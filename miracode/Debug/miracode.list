
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019af8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08019cb8  08019cb8  00029cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a550  0801a550  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  0801a550  0801a550  0002a550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a558  0801a558  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a558  0801a558  0002a558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a55c  0801a55c  0002a55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0801a560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c20  20000354  0801a8b4  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20002f74  0801a8b4  00032f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046373  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006586  00000000  00000000  000766f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003428  00000000  00000000  0007cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031c8  00000000  00000000  000800a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035081  00000000  00000000  00083270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a9ed  00000000  00000000  000b82f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001290f2  00000000  00000000  000f2cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021bdd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f440  00000000  00000000  0021be20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0022b260  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0022b32c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019ca0 	.word	0x08019ca0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08019ca0 	.word	0x08019ca0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	08019cb8 	.word	0x08019cb8

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f015 f978 	bl	8016e04 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08019cbc 	.word	0x08019cbc

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f013 fd24 	bl	8016354 <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f013 fd1f 	bl	8016354 <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f013 fd1a 	bl	8016354 <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f013 fd15 	bl	8016354 <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f013 fd10 	bl	8016354 <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f013 fd0b 	bl	8016354 <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f013 fd06 	bl	8016354 <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f013 fd01 	bl	8016354 <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	08019d04 	.word	0x08019d04
 8002964:	08019d0c 	.word	0x08019d0c
 8002968:	08019d14 	.word	0x08019d14
 800296c:	08019d1c 	.word	0x08019d1c
 8002970:	08019d24 	.word	0x08019d24
 8002974:	08019d2c 	.word	0x08019d2c
 8002978:	08019d34 	.word	0x08019d34
 800297c:	08019d3c 	.word	0x08019d3c

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000370 	.word	0x20000370
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f003 ff80 	bl	8006954 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f004 f86b 	bl	8006b3c <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000574 	.word	0x20000574

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f014 f9af 	bl	8016e04 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f003 ff4c 	bl	8006954 <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000374 	.word	0x20000374
 8002acc:	20000375 	.word	0x20000375
 8002ad0:	20000574 	.word	0x20000574

08002ad4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_I2C2_Init+0x74>)
 8002ae2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002aec:	600a      	str	r2, [r1, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d122      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002af4:	f004 fc4d 	bl	8007392 <HAL_I2C_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b00:	f000 f8fe 	bl	8002d00 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b0c:	f000 f8b4 	bl	8002c78 <MX_I2C2_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b16:	f06f 0307 	mvn.w	r3, #7
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b22:	f004 ff71 	bl	8007a08 <HAL_I2CEx_ConfigAnalogFilter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b2c:	f06f 0307 	mvn.w	r3, #7
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e001      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000574 	.word	0x20000574
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	200005c8 	.word	0x200005c8

08002b50 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b76:	f000 f923 	bl	8002dc0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b7c:	f003 febb 	bl	80068f6 <HAL_I2C_DeInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b86:	f06f 0307 	mvn.w	r3, #7
 8002b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200005c8 	.word	0x200005c8
 8002b9c:	20000574 	.word	0x20000574

08002ba0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	480c      	ldr	r0, [pc, #48]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bd0:	f004 f8aa 	bl	8006d28 <HAL_I2C_Mem_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bdc:	f004 fbe7 	bl	80073ae <HAL_I2C_GetError>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d103      	bne.n	8002bee <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e002      	b.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bee:	f06f 0303 	mvn.w	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bf4:	697b      	ldr	r3, [r7, #20]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000574 	.word	0x20000574

08002c04 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	460b      	mov	r3, r1
 8002c14:	81bb      	strh	r3, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	89f9      	ldrh	r1, [r7, #14]
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c34:	f004 f98c 	bl	8006f50 <HAL_I2C_Mem_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c40:	f004 fbb5 	bl	80073ae <HAL_I2C_GetError>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d103      	bne.n	8002c52 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e002      	b.n	8002c58 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000574 	.word	0x20000574

08002c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c6c:	f003 f8ea 	bl	8005e44 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C2_Init+0x80>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C2_Init+0x84>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f003 fd8c 	bl	80067d8 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f004 fe9b 	bl	8007a08 <HAL_I2CEx_ConfigAnalogFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f004 fedd 	bl	8007a9e <HAL_I2CEx_ConfigDigitalFilter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	307075b1 	.word	0x307075b1

08002d00 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ae      	sub	sp, #184	; 0xb8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2294      	movs	r2, #148	; 0x94
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f014 f885 	bl	8016e20 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f007 f8aa 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d68:	f003 fa68 	bl	800623c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d90:	4619      	mov	r1, r3
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d94:	f003 fa52 	bl	800623c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	37b8      	adds	r7, #184	; 0xb8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002dda:	f003 fbc1 	bl	8006560 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002de4:	f003 fbbc 	bl	8006560 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	f6ad 7d08 	subw	sp, sp, #3848	; 0xf08
 8002dfe:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8002e00:	4bd2      	ldr	r3, [pc, #840]	; (800314c <main+0x354>)
 8002e02:	f507 6465 	add.w	r4, r7, #3664	; 0xe50
 8002e06:	461d      	mov	r5, r3
 8002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e10:	c403      	stmia	r4!, {r0, r1}
 8002e12:	7022      	strb	r2, [r4, #0]
 8002e14:	f607 6369 	addw	r3, r7, #3689	; 0xe69
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
 8002e24:	615a      	str	r2, [r3, #20]
 8002e26:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 8002e28:	4bc9      	ldr	r3, [pc, #804]	; (8003150 <main+0x358>)
 8002e2a:	f8c7 3ef0 	str.w	r3, [r7, #3824]	; 0xef0

	uint8_t USB_TxBuffer_FS;
	uint32_t USB_TxBuffer_Length = 1000;
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	f8c7 3eec 	str.w	r3, [r7, #3820]	; 0xeec
	GPS myData;

	int8_t rslt;
	uint16_t settings_sel;
	struct bmp3_dev dev;
	struct bmp3_data bmpdata = { 0 };
 8002e36:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002e3a:	f6a3 5388 	subw	r3, r3, #3464	; 0xd88
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	6053      	str	r3, [r2, #4]
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings settings = { 0 };
 8002e4a:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002e4e:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	731a      	strb	r2, [r3, #12]
	struct bmp3_status status = { { 0 } };
 8002e5c:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002e60:	f6a3 53a4 	subw	r3, r3, #3492	; 0xda4
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	811a      	strh	r2, [r3, #8]
	uint8_t TempBuffer[25] = {0};
 8002e6c:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002e70:	f5a3 635c 	sub.w	r3, r3, #3520	; 0xdc0
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	611a      	str	r2, [r3, #16]
 8002e86:	751a      	strb	r2, [r3, #20]
	uint8_t PresBuffer[25] = {0};
 8002e88:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002e8c:	f6a3 53dc 	subw	r3, r3, #3548	; 0xddc
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	751a      	strb	r2, [r3, #20]

	//test
	HAL_StatusTypeDef i2c2status;
	uint8_t hello[7] = "Hello!\n";
 8002ea4:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002ea8:	f6a3 53e4 	subw	r3, r3, #3556	; 0xde4
 8002eac:	4aa9      	ldr	r2, [pc, #676]	; (8003154 <main+0x35c>)
 8002eae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eb2:	6018      	str	r0, [r3, #0]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	8019      	strh	r1, [r3, #0]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	0c0a      	lsrs	r2, r1, #16
 8002ebc:	701a      	strb	r2, [r3, #0]
	uint8_t Buffer[25] = {0};
 8002ebe:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002ec2:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8002eda:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002ede:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8002ee2:	4a9d      	ldr	r2, [pc, #628]	; (8003158 <main+0x360>)
 8002ee4:	601a      	str	r2, [r3, #0]
	// LSM6DSO_Object_t
	LSM6DSO_Object_t AccObj;

	// Acceleration data for LSM
	LSM6DSO_Axes_t Acceleration;
	uint8_t AccelerationBuffer[40] = {0};
 8002ee6:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002eea:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2224      	movs	r2, #36	; 0x24
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f013 ff91 	bl	8016e20 <memset>
	LSM6DSO_Axes_t AngularVelocity;
	uint8_t AngularVelocityBuffer[40] = {0};
 8002efe:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002f02:	f6a3 63a4 	subw	r3, r3, #3748	; 0xea4
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	2224      	movs	r2, #36	; 0x24
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f013 ff85 	bl	8016e20 <memset>
	int32_t AccError;
	int32_t AVError;
	uint8_t GyroErrBuff[25] = {0};
 8002f16:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002f1a:	f5a3 636c 	sub.w	r3, r3, #3776	; 0xec0
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	3304      	adds	r3, #4
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
 8002f30:	751a      	strb	r2, [r3, #20]

	int32_t errcode;
	double SystemTime;
	SystemTime = 0;
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	f607 61f8 	addw	r1, r7, #3832	; 0xef8
 8002f3e:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t SystemTimeBuffer[25] = {0};
 8002f42:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002f46:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
 8002f5c:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5e:	f002 ff09 	bl	8005d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f62:	f000 fc51 	bl	8003808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f66:	f000 fe69 	bl	8003c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f6a:	f000 fcb3 	bl	80038d4 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8002f6e:	f000 fcf1 	bl	8003954 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002f72:	f000 fd11 	bl	8003998 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002f76:	f000 fdc3 	bl	8003b00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f7a:	f000 fe0f 	bl	8003b9c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002f7e:	f00e fbcf 	bl	8011720 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002f82:	f013 f929 	bl	80161d8 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8002f86:	f000 fd45 	bl	8003a14 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002f8a:	f000 fc8f 	bl	80038ac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_MspInit();
 8002f8e:	f000 ff2f 	bl	8003df0 <HAL_MspInit>
  BSP_I2C2_Init();
 8002f92:	f7ff fd9f 	bl	8002ad4 <BSP_I2C2_Init>
  HAL_UART_MspInit(&huart1);
 8002f96:	4871      	ldr	r0, [pc, #452]	; (800315c <main+0x364>)
 8002f98:	f001 f8b4 	bl	8004104 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8002f9c:	4870      	ldr	r0, [pc, #448]	; (8003160 <main+0x368>)
 8002f9e:	f001 f8b1 	bl	8004104 <HAL_UART_MspInit>

	LSM6DSO_IO_t IO;
	IO.Init = BSP_I2C2_Init;
 8002fa2:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002fa6:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002faa:	4a6e      	ldr	r2, [pc, #440]	; (8003164 <main+0x36c>)
 8002fac:	601a      	str	r2, [r3, #0]
	IO.DeInit = BSP_I2C2_DeInit;
 8002fae:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002fb2:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002fb6:	4a6c      	ldr	r2, [pc, #432]	; (8003168 <main+0x370>)
 8002fb8:	605a      	str	r2, [r3, #4]
	IO.BusType = 0;
 8002fba:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002fbe:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
	IO.Address = LSM6DSO_I2C_ADD_L;
 8002fc6:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002fca:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002fce:	22d5      	movs	r2, #213	; 0xd5
 8002fd0:	731a      	strb	r2, [r3, #12]
	IO.WriteReg = BSP_I2C2_WriteReg;
 8002fd2:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002fd6:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002fda:	4a64      	ldr	r2, [pc, #400]	; (800316c <main+0x374>)
 8002fdc:	611a      	str	r2, [r3, #16]
	IO.ReadReg = BSP_I2C2_ReadReg;
 8002fde:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002fe2:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002fe6:	4a62      	ldr	r2, [pc, #392]	; (8003170 <main+0x378>)
 8002fe8:	615a      	str	r2, [r3, #20]
	IO.GetTick = BSP_GetTick;
 8002fea:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002fee:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002ff2:	4a60      	ldr	r2, [pc, #384]	; (8003174 <main+0x37c>)
 8002ff4:	619a      	str	r2, [r3, #24]
	IO.Delay = HAL_Delay;
 8002ff6:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8002ffa:	f6a3 63fc 	subw	r3, r3, #3836	; 0xefc
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <main+0x380>)
 8003000:	61da      	str	r2, [r3, #28]
  // Setting up LSM6DSO
  LSM6DSO_RegisterBusIO(&AccObj, &IO);
 8003002:	1d3a      	adds	r2, r7, #4
 8003004:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fa0a 	bl	8004424 <LSM6DSO_RegisterBusIO>
  errcode = LSM6DSO_Init(&AccObj);
 8003010:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fa6f 	bl	80044f8 <LSM6DSO_Init>
 800301a:	f8c7 0ee8 	str.w	r0, [r7, #3816]	; 0xee8

  if (errcode == 0) {while (CDC_Transmit_FS ("GYRO OK!\n", 9) == USBD_BUSY);}
 800301e:	f8d7 3ee8 	ldr.w	r3, [r7, #3816]	; 0xee8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <main+0x240>
 8003026:	bf00      	nop
 8003028:	2109      	movs	r1, #9
 800302a:	4854      	ldr	r0, [pc, #336]	; (800317c <main+0x384>)
 800302c:	f013 f992 	bl	8016354 <CDC_Transmit_FS>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d0f8      	beq.n	8003028 <main+0x230>
 8003036:	e007      	b.n	8003048 <main+0x250>
  else {while (CDC_Transmit_FS ("GYRO NOT OK!\n", 13) == USBD_BUSY);}
 8003038:	bf00      	nop
 800303a:	210d      	movs	r1, #13
 800303c:	4850      	ldr	r0, [pc, #320]	; (8003180 <main+0x388>)
 800303e:	f013 f989 	bl	8016354 <CDC_Transmit_FS>
 8003042:	4603      	mov	r3, r0
 8003044:	2b01      	cmp	r3, #1
 8003046:	d0f8      	beq.n	800303a <main+0x242>

	// Enabling translational and angular acceleration measurements
	LSM6DSO_ACC_Enable(&AccObj);
 8003048:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800304c:	4618      	mov	r0, r3
 800304e:	f001 fac8 	bl	80045e2 <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&AccObj);
 8003052:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003056:	4618      	mov	r0, r3
 8003058:	f001 fd35 	bl	8004ac6 <LSM6DSO_GYRO_Enable>
	LSM6DSO_ACC_SetOutputDataRate(&AccObj, 104.0f);
 800305c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003060:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003184 <main+0x38c>
 8003064:	4618      	mov	r0, r3
 8003066:	f001 fb27 	bl	80046b8 <LSM6DSO_ACC_SetOutputDataRate>
	LSM6DSO_GYRO_SetOutputDataRate(&AccObj, 104.0f);
 800306a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800306e:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8003184 <main+0x38c>
 8003072:	4618      	mov	r0, r3
 8003074:	f001 fdcc 	bl	8004c10 <LSM6DSO_GYRO_SetOutputDataRate>
	//LSM6DSO_FIFO_Set_Mode(&AccObj, (uint8_t)3);
	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
 8003078:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fc7e 	bl	8002980 <bmp3_interface_init>
 8003084:	4603      	mov	r3, r0
 8003086:	f887 3ee7 	strb.w	r3, [r7, #3815]	; 0xee7
	bmp3_check_rslt("bmp3_interface_init", rslt);
 800308a:	f997 3ee7 	ldrsb.w	r3, [r7, #3815]	; 0xee7
 800308e:	4619      	mov	r1, r3
 8003090:	483d      	ldr	r0, [pc, #244]	; (8003188 <main+0x390>)
 8003092:	f7ff fc15 	bl	80028c0 <bmp3_check_rslt>

	rslt = bmp3_init(&dev);
 8003096:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd ff6e 	bl	8000f7c <bmp3_init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3ee7 	strb.w	r3, [r7, #3815]	; 0xee7
	bmp3_check_rslt("bmp3_init", rslt);
 80030a6:	f997 3ee7 	ldrsb.w	r3, [r7, #3815]	; 0xee7
 80030aa:	4619      	mov	r1, r3
 80030ac:	4837      	ldr	r0, [pc, #220]	; (800318c <main+0x394>)
 80030ae:	f7ff fc07 	bl	80028c0 <bmp3_check_rslt>

	settings.int_settings.drdy_en = BMP3_DISABLE;
 80030b2:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80030b6:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030ba:	2200      	movs	r2, #0
 80030bc:	729a      	strb	r2, [r3, #10]
	settings.int_settings.latch = BMP3_ENABLE;
 80030be:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80030c2:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030c6:	2201      	movs	r2, #1
 80030c8:	725a      	strb	r2, [r3, #9]
	settings.press_en = BMP3_ENABLE;
 80030ca:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80030ce:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030d2:	2201      	movs	r2, #1
 80030d4:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 80030d6:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80030da:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030de:	2201      	movs	r2, #1
 80030e0:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 80030e2:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80030e6:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030ea:	2202      	movs	r2, #2
 80030ec:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 80030ee:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80030f2:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030f6:	2200      	movs	r2, #0
 80030f8:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_100_HZ;
 80030fa:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80030fe:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 8003102:	2201      	movs	r2, #1
 8003104:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8003106:	23be      	movs	r3, #190	; 0xbe
 8003108:	f8a7 3ee4 	strh.w	r3, [r7, #3812]	; 0xee4
				   BMP3_SEL_DRDY_EN;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 800310c:	f8b7 3ee4 	ldrh.w	r3, [r7, #3812]	; 0xee4
 8003110:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003114:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe f897 	bl	800124c <bmp3_set_sensor_settings>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3ee7 	strb.w	r3, [r7, #3815]	; 0xee7
	bmp3_check_rslt("bmp3_set_sensor_settings", rslt);
 8003124:	f997 3ee7 	ldrsb.w	r3, [r7, #3815]	; 0xee7
 8003128:	4619      	mov	r1, r3
 800312a:	4819      	ldr	r0, [pc, #100]	; (8003190 <main+0x398>)
 800312c:	f7ff fbc8 	bl	80028c0 <bmp3_check_rslt>

	if (rslt == 0) {while (CDC_Transmit_FS ("BMP OK!\n", 8) == USBD_BUSY);}
 8003130:	f997 3ee7 	ldrsb.w	r3, [r7, #3815]	; 0xee7
 8003134:	2b00      	cmp	r3, #0
 8003136:	d12f      	bne.n	8003198 <main+0x3a0>
 8003138:	bf00      	nop
 800313a:	2108      	movs	r1, #8
 800313c:	4815      	ldr	r0, [pc, #84]	; (8003194 <main+0x39c>)
 800313e:	f013 f909 	bl	8016354 <CDC_Transmit_FS>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d0f8      	beq.n	800313a <main+0x342>
 8003148:	e02e      	b.n	80031a8 <main+0x3b0>
 800314a:	bf00      	nop
 800314c:	08019f68 	.word	0x08019f68
 8003150:	08019de4 	.word	0x08019de4
 8003154:	08019f9c 	.word	0x08019f9c
 8003158:	00202d20 	.word	0x00202d20
 800315c:	20000750 	.word	0x20000750
 8003160:	200007e0 	.word	0x200007e0
 8003164:	08002ad5 	.word	0x08002ad5
 8003168:	08002b51 	.word	0x08002b51
 800316c:	08002ba1 	.word	0x08002ba1
 8003170:	08002c05 	.word	0x08002c05
 8003174:	08002c69 	.word	0x08002c69
 8003178:	08005e5d 	.word	0x08005e5d
 800317c:	08019dec 	.word	0x08019dec
 8003180:	08019df8 	.word	0x08019df8
 8003184:	42d00000 	.word	0x42d00000
 8003188:	08019e08 	.word	0x08019e08
 800318c:	08019e1c 	.word	0x08019e1c
 8003190:	08019e28 	.word	0x08019e28
 8003194:	08019e44 	.word	0x08019e44
	else {while (CDC_Transmit_FS ("BMP NOT OK!\n", 12) == USBD_BUSY);}
 8003198:	bf00      	nop
 800319a:	210c      	movs	r1, #12
 800319c:	4891      	ldr	r0, [pc, #580]	; (80033e4 <main+0x5ec>)
 800319e:	f013 f8d9 	bl	8016354 <CDC_Transmit_FS>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d0f8      	beq.n	800319a <main+0x3a2>
	bmp3_check_rslt("bmp3_set_op_mode", rslt);*/

	volatile unsigned tmp;

	// Setting the buffer for UART2 data reading
	gps_rxBuffer = gps_rxBuffer1;
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <main+0x5f0>)
 80031aa:	4a90      	ldr	r2, [pc, #576]	; (80033ec <main+0x5f4>)
 80031ac:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 80031ae:	4b90      	ldr	r3, [pc, #576]	; (80033f0 <main+0x5f8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8c7 3eb8 	str.w	r3, [r7, #3768]	; 0xeb8
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	f8d7 3eb8 	ldr.w	r3, [r7, #3768]	; 0xeb8
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	f8c7 3eb4 	str.w	r3, [r7, #3764]	; 0xeb4
   return(result);
 80031c2:	f8d7 3eb4 	ldr.w	r3, [r7, #3764]	; 0xeb4
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	f8c7 3ee0 	str.w	r3, [r7, #3808]	; 0xee0
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <main+0x5f8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f8d7 3ee0 	ldr.w	r3, [r7, #3808]	; 0xee0
 80031d8:	f8c7 3ec4 	str.w	r3, [r7, #3780]	; 0xec4
 80031dc:	f8c7 2ec0 	str.w	r2, [r7, #3776]	; 0xec0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	f8d7 1ec0 	ldr.w	r1, [r7, #3776]	; 0xec0
 80031e4:	f8d7 2ec4 	ldr.w	r2, [r7, #3780]	; 0xec4
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	f8c7 3ebc 	str.w	r3, [r7, #3772]	; 0xebc
   return(result);
 80031f0:	f8d7 3ebc 	ldr.w	r3, [r7, #3772]	; 0xebc
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1da      	bne.n	80031ae <main+0x3b6>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 80031f8:	4b7d      	ldr	r3, [pc, #500]	; (80033f0 <main+0x5f8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8c7 3ea4 	str.w	r3, [r7, #3748]	; 0xea4
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	f8d7 3ea4 	ldr.w	r3, [r7, #3748]	; 0xea4
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	f8c7 3ea0 	str.w	r3, [r7, #3744]	; 0xea0
   return(result);
 800320c:	f8d7 3ea0 	ldr.w	r3, [r7, #3744]	; 0xea0
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	f8c7 3edc 	str.w	r3, [r7, #3804]	; 0xedc
 8003218:	4b75      	ldr	r3, [pc, #468]	; (80033f0 <main+0x5f8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	f8d7 3edc 	ldr.w	r3, [r7, #3804]	; 0xedc
 8003222:	f8c7 3eb0 	str.w	r3, [r7, #3760]	; 0xeb0
 8003226:	f8c7 2eac 	str.w	r2, [r7, #3756]	; 0xeac
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	f8d7 1eac 	ldr.w	r1, [r7, #3756]	; 0xeac
 800322e:	f8d7 2eb0 	ldr.w	r2, [r7, #3760]	; 0xeb0
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	f8c7 3ea8 	str.w	r3, [r7, #3752]	; 0xea8
   return(result);
 800323a:	f8d7 3ea8 	ldr.w	r3, [r7, #3752]	; 0xea8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1da      	bne.n	80031f8 <main+0x400>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003242:	4b6b      	ldr	r3, [pc, #428]	; (80033f0 <main+0x5f8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8c7 3e90 	str.w	r3, [r7, #3728]	; 0xe90
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	f8d7 3e90 	ldr.w	r3, [r7, #3728]	; 0xe90
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	f8c7 3e8c 	str.w	r3, [r7, #3724]	; 0xe8c
   return(result);
 8003256:	f8d7 3e8c 	ldr.w	r3, [r7, #3724]	; 0xe8c
 800325a:	f043 0320 	orr.w	r3, r3, #32
 800325e:	f8c7 3ed8 	str.w	r3, [r7, #3800]	; 0xed8
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <main+0x5f8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 3ed8 	ldr.w	r3, [r7, #3800]	; 0xed8
 800326c:	f8c7 3e9c 	str.w	r3, [r7, #3740]	; 0xe9c
 8003270:	f8c7 2e98 	str.w	r2, [r7, #3736]	; 0xe98
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	f8d7 1e98 	ldr.w	r1, [r7, #3736]	; 0xe98
 8003278:	f8d7 2e9c 	ldr.w	r2, [r7, #3740]	; 0xe9c
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	f8c7 3e94 	str.w	r3, [r7, #3732]	; 0xe94
   return(result);
 8003284:	f8d7 3e94 	ldr.w	r3, [r7, #3732]	; 0xe94
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1da      	bne.n	8003242 <main+0x44a>



	// If not FR_OK, mounting failed, else it was successful
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800328c:	2200      	movs	r2, #0
 800328e:	4959      	ldr	r1, [pc, #356]	; (80033f4 <main+0x5fc>)
 8003290:	4859      	ldr	r0, [pc, #356]	; (80033f8 <main+0x600>)
 8003292:	f011 fdb9 	bl	8014e08 <f_mount>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <main+0x4b6>
		{
		while (CDC_Transmit_FS ("Mount failed!\n", 14) == USBD_BUSY);
 800329c:	bf00      	nop
 800329e:	210e      	movs	r1, #14
 80032a0:	4856      	ldr	r0, [pc, #344]	; (80033fc <main+0x604>)
 80032a2:	f013 f857 	bl	8016354 <CDC_Transmit_FS>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d0f8      	beq.n	800329e <main+0x4a6>
 80032ac:	e062      	b.n	8003374 <main+0x57c>
		}
	// here f_mount == FR_OK -> mounting was a success
	else
		{
		// f_mkfs
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80032ae:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80032b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b6:	9200      	str	r2, [sp, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	2107      	movs	r1, #7
 80032bc:	484d      	ldr	r0, [pc, #308]	; (80033f4 <main+0x5fc>)
 80032be:	f012 fb03 	bl	80158c8 <f_mkfs>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <main+0x4e8>
			{
			while (CDC_Transmit_FS ("MKFS failed!\n", 13) == USBD_BUSY);
 80032c8:	bf00      	nop
 80032ca:	210d      	movs	r1, #13
 80032cc:	484c      	ldr	r0, [pc, #304]	; (8003400 <main+0x608>)
 80032ce:	f013 f841 	bl	8016354 <CDC_Transmit_FS>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d0f8      	beq.n	80032ca <main+0x4d2>
			hsd1.Init.ClockDiv = 0;
 80032d8:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <main+0x60c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	615a      	str	r2, [r3, #20]
 80032de:	e049      	b.n	8003374 <main+0x57c>
			}
		else
			{
			hsd1.Init.ClockDiv = 0;
 80032e0:	4b48      	ldr	r3, [pc, #288]	; (8003404 <main+0x60c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	615a      	str	r2, [r3, #20]
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80032e6:	220a      	movs	r2, #10
 80032e8:	4947      	ldr	r1, [pc, #284]	; (8003408 <main+0x610>)
 80032ea:	4848      	ldr	r0, [pc, #288]	; (800340c <main+0x614>)
 80032ec:	f011 fdd2 	bl	8014e94 <f_open>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <main+0x510>
				{
				while (CDC_Transmit_FS ("Open file failed!\n", 18) == USBD_BUSY);
 80032f6:	bf00      	nop
 80032f8:	2112      	movs	r1, #18
 80032fa:	4845      	ldr	r0, [pc, #276]	; (8003410 <main+0x618>)
 80032fc:	f013 f82a 	bl	8016354 <CDC_Transmit_FS>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d0f8      	beq.n	80032f8 <main+0x500>
 8003306:	e035      	b.n	8003374 <main+0x57c>
				}
			else
				{

				// Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8003308:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800330c:	4618      	mov	r0, r3
 800330e:	f7fc ff77 	bl	8000200 <strlen>
 8003312:	4602      	mov	r2, r0
 8003314:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8003318:	f507 6165 	add.w	r1, r7, #3664	; 0xe50
 800331c:	483b      	ldr	r0, [pc, #236]	; (800340c <main+0x614>)
 800331e:	f012 f8b6 	bl	801548e <f_write>
 8003322:	4603      	mov	r3, r0
 8003324:	f887 3ed7 	strb.w	r3, [r7, #3799]	; 0xed7
				f_read(&SDFile, &rtext, 100, &bytesread);
 8003328:	f607 6384 	addw	r3, r7, #3716	; 0xe84
 800332c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8003330:	2264      	movs	r2, #100	; 0x64
 8003332:	4836      	ldr	r0, [pc, #216]	; (800340c <main+0x614>)
 8003334:	f011 ff6c 	bl	8015210 <f_read>

				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 8003338:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800333c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003340:	4618      	mov	r0, r3
 8003342:	f013 f807 	bl	8016354 <CDC_Transmit_FS>
 8003346:	4603      	mov	r3, r0
 8003348:	f887 3ed6 	strb.w	r3, [r7, #3798]	; 0xed6
				if((byteswritten == 0) || (res != FR_OK))
 800334c:	f8d7 3e88 	ldr.w	r3, [r7, #3720]	; 0xe88
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <main+0x564>
 8003354:	f897 3ed7 	ldrb.w	r3, [r7, #3799]	; 0xed7
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <main+0x576>
					{
					while (CDC_Transmit_FS ("Read/Write failed!\n", 19) == USBD_BUSY);
 800335c:	bf00      	nop
 800335e:	2113      	movs	r1, #19
 8003360:	482c      	ldr	r0, [pc, #176]	; (8003414 <main+0x61c>)
 8003362:	f012 fff7 	bl	8016354 <CDC_Transmit_FS>
 8003366:	4603      	mov	r3, r0
 8003368:	2b01      	cmp	r3, #1
 800336a:	d0f8      	beq.n	800335e <main+0x566>
				if((byteswritten == 0) || (res != FR_OK))
 800336c:	e002      	b.n	8003374 <main+0x57c>
					}
				else
					{
					f_close(&SDFile);
 800336e:	4827      	ldr	r0, [pc, #156]	; (800340c <main+0x614>)
 8003370:	f012 fa80 	bl	8015874 <f_close>
					}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8003374:	2200      	movs	r2, #0
 8003376:	2100      	movs	r1, #0
 8003378:	481f      	ldr	r0, [pc, #124]	; (80033f8 <main+0x600>)
 800337a:	f011 fd45 	bl	8014e08 <f_mount>



	HAL_TIM_Base_Start_IT(&htim17);
 800337e:	4826      	ldr	r0, [pc, #152]	; (8003418 <main+0x620>)
 8003380:	f00a f802 	bl	800d388 <HAL_TIM_Base_Start_IT>
	tick = 0;
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <main+0x624>)
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <main+0x628>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]


	//-[ I2C Bus Scanning ]-
	uint8_t i = 0, ret;
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3ef7 	strb.w	r3, [r7, #3831]	; 0xef7
	for(i = 1; i < 128; i++)
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3ef7 	strb.w	r3, [r7, #3831]	; 0xef7
 800339c:	e066      	b.n	800346c <main+0x674>
		{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 800339e:	f897 3ef7 	ldrb.w	r3, [r7, #3831]	; 0xef7
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	b299      	uxth	r1, r3
 80033a8:	2305      	movs	r3, #5
 80033aa:	2203      	movs	r2, #3
 80033ac:	481d      	ldr	r0, [pc, #116]	; (8003424 <main+0x62c>)
 80033ae:	f003 fee9 	bl	8007184 <HAL_I2C_IsDeviceReady>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f887 3ecb 	strb.w	r3, [r7, #3787]	; 0xecb
		if (ret != HAL_OK) // No ACK Received At That Address
 80033b8:	f897 3ecb 	ldrb.w	r3, [r7, #3787]	; 0xecb
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d033      	beq.n	8003428 <main+0x630>
			{
			while (CDC_Transmit_FS (Space, strlen(Space)) == USBD_BUSY);
 80033c0:	bf00      	nop
 80033c2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fc ff1a 	bl	8000200 <strlen>
 80033cc:	4603      	mov	r3, r0
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f012 ffbc 	bl	8016354 <CDC_Transmit_FS>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d0ef      	beq.n	80033c2 <main+0x5ca>
 80033e2:	e03e      	b.n	8003462 <main+0x66a>
 80033e4:	08019e50 	.word	0x08019e50
 80033e8:	20000eb0 	.word	0x20000eb0
 80033ec:	20000870 	.word	0x20000870
 80033f0:	200007e0 	.word	0x200007e0
 80033f4:	20000ec8 	.word	0x20000ec8
 80033f8:	20000ecc 	.word	0x20000ecc
 80033fc:	08019e60 	.word	0x08019e60
 8003400:	08019e70 	.word	0x08019e70
 8003404:	20000620 	.word	0x20000620
 8003408:	08019e80 	.word	0x08019e80
 800340c:	200010fc 	.word	0x200010fc
 8003410:	08019e8c 	.word	0x08019e8c
 8003414:	08019ea0 	.word	0x08019ea0
 8003418:	20000704 	.word	0x20000704
 800341c:	20000ebc 	.word	0x20000ebc
 8003420:	20000ebd 	.word	0x20000ebd
 8003424:	20000574 	.word	0x20000574
			}
		else if(ret == HAL_OK)
 8003428:	f897 3ecb 	ldrb.w	r3, [r7, #3787]	; 0xecb
 800342c:	2b00      	cmp	r3, #0
 800342e:	d118      	bne.n	8003462 <main+0x66a>
			{
			sprintf(Buffer, "0x%X", i);
 8003430:	f897 2ef7 	ldrb.w	r2, [r7, #3831]	; 0xef7
 8003434:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003438:	49ce      	ldr	r1, [pc, #824]	; (8003774 <main+0x97c>)
 800343a:	4618      	mov	r0, r3
 800343c:	f014 fa6a 	bl	8017914 <siprintf>
			while (CDC_Transmit_FS (Buffer, strlen(Buffer)) == USBD_BUSY);
 8003440:	bf00      	nop
 8003442:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003446:	4618      	mov	r0, r3
 8003448:	f7fc feda 	bl	8000200 <strlen>
 800344c:	4603      	mov	r3, r0
 800344e:	b29a      	uxth	r2, r3
 8003450:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f012 ff7c 	bl	8016354 <CDC_Transmit_FS>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d0ef      	beq.n	8003442 <main+0x64a>
	for(i = 1; i < 128; i++)
 8003462:	f897 3ef7 	ldrb.w	r3, [r7, #3831]	; 0xef7
 8003466:	3301      	adds	r3, #1
 8003468:	f887 3ef7 	strb.w	r3, [r7, #3831]	; 0xef7
 800346c:	f997 3ef7 	ldrsb.w	r3, [r7, #3831]	; 0xef7
 8003470:	2b00      	cmp	r3, #0
 8003472:	da94      	bge.n	800339e <main+0x5a6>
			}
		}
	while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8003474:	bf00      	nop
 8003476:	2101      	movs	r1, #1
 8003478:	48bf      	ldr	r0, [pc, #764]	; (8003778 <main+0x980>)
 800347a:	f012 ff6b 	bl	8016354 <CDC_Transmit_FS>
 800347e:	4603      	mov	r3, r0
 8003480:	2b01      	cmp	r3, #1
 8003482:	d0f8      	beq.n	8003476 <main+0x67e>
	while (1)
		{


		/* Read temperature and pressure data iteratively based on data ready interrupt */
		if (tick == 0)
 8003484:	4bbd      	ldr	r3, [pc, #756]	; (800377c <main+0x984>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 8155 	bne.w	800373a <main+0x942>
			{
			tick = 10;
 8003490:	4bba      	ldr	r3, [pc, #744]	; (800377c <main+0x984>)
 8003492:	220a      	movs	r2, #10
 8003494:	701a      	strb	r2, [r3, #0]

			sprintf(SystemTimeBuffer, "\ntime: %.0f s \n", SystemTime);
 8003496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800349a:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	49b7      	ldr	r1, [pc, #732]	; (8003780 <main+0x988>)
 80034a4:	f014 fa36 	bl	8017914 <siprintf>
			while (CDC_Transmit_FS (SystemTimeBuffer, strlen(SystemTimeBuffer)) == USBD_BUSY);
 80034a8:	bf00      	nop
 80034aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fc fea6 	bl	8000200 <strlen>
 80034b4:	4603      	mov	r3, r0
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f012 ff48 	bl	8016354 <CDC_Transmit_FS>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d0ef      	beq.n	80034aa <main+0x6b2>
			SystemTime++;
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	4bad      	ldr	r3, [pc, #692]	; (8003784 <main+0x98c>)
 80034d0:	f607 61f8 	addw	r1, r7, #3832	; 0xef8
 80034d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034d8:	f7fc fef0 	bl	80002bc <__adddf3>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	f607 61f8 	addw	r1, r7, #3832	; 0xef8
 80034e4:	e9c1 2300 	strd	r2, r3, [r1]


			HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80034e8:	2110      	movs	r1, #16
 80034ea:	48a7      	ldr	r0, [pc, #668]	; (8003788 <main+0x990>)
 80034ec:	f003 f95a 	bl	80067a4 <HAL_GPIO_TogglePin>

			settings.op_mode = BMP3_MODE_FORCED;
 80034f0:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80034f4:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
			rslt = bmp3_set_op_mode(&settings, &dev);
 80034fc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003500:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd ff63 	bl	80013d2 <bmp3_set_op_mode>
 800350c:	4603      	mov	r3, r0
 800350e:	f887 3ee7 	strb.w	r3, [r7, #3815]	; 0xee7
			bmp3_check_rslt("bmp3_set_op_mode", rslt);
 8003512:	f997 3ee7 	ldrsb.w	r3, [r7, #3815]	; 0xee7
 8003516:	4619      	mov	r1, r3
 8003518:	489c      	ldr	r0, [pc, #624]	; (800378c <main+0x994>)
 800351a:	f7ff f9d1 	bl	80028c0 <bmp3_check_rslt>
			* First parameter indicates the type of data to be read
			* BMP3_PRESS_TEMP : To read pressure and temperature data
			* BMP3_TEMP       : To read only temperature data
			* BMP3_PRESS      : To read only pressure data
			*/
			rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmpdata, &dev);
 800351e:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003522:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003526:	4619      	mov	r1, r3
 8003528:	2003      	movs	r0, #3
 800352a:	f7fd ffc6 	bl	80014ba <bmp3_get_sensor_data>
 800352e:	4603      	mov	r3, r0
 8003530:	f887 3ee7 	strb.w	r3, [r7, #3815]	; 0xee7
			bmp3_check_rslt("bmp3_get_sensor_data", rslt);
 8003534:	f997 3ee7 	ldrsb.w	r3, [r7, #3815]	; 0xee7
 8003538:	4619      	mov	r1, r3
 800353a:	4895      	ldr	r0, [pc, #596]	; (8003790 <main+0x998>)
 800353c:	f7ff f9c0 	bl	80028c0 <bmp3_check_rslt>

			// NOTE : Read status register again to clear data ready interrupt status
			rslt = bmp3_get_status(&status, &dev);
 8003540:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003544:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fecc 	bl	80012e8 <bmp3_get_status>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 3ee7 	strb.w	r3, [r7, #3815]	; 0xee7
			bmp3_check_rslt("bmp3_get_status", rslt);
 8003556:	f997 3ee7 	ldrsb.w	r3, [r7, #3815]	; 0xee7
 800355a:	4619      	mov	r1, r3
 800355c:	488d      	ldr	r0, [pc, #564]	; (8003794 <main+0x99c>)
 800355e:	f7ff f9af 	bl	80028c0 <bmp3_check_rslt>

			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8003562:	bf00      	nop
 8003564:	2101      	movs	r1, #1
 8003566:	4884      	ldr	r0, [pc, #528]	; (8003778 <main+0x980>)
 8003568:	f012 fef4 	bl	8016354 <CDC_Transmit_FS>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d0f8      	beq.n	8003564 <main+0x76c>
			while (CDC_Transmit_FS ("BMP390 START\n", 13) == USBD_BUSY);
 8003572:	bf00      	nop
 8003574:	210d      	movs	r1, #13
 8003576:	4888      	ldr	r0, [pc, #544]	; (8003798 <main+0x9a0>)
 8003578:	f012 feec 	bl	8016354 <CDC_Transmit_FS>
 800357c:	4603      	mov	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d0f8      	beq.n	8003574 <main+0x77c>
			sprintf(TempBuffer, "%.2f\n", bmpdata.temperature);
 8003582:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8003586:	f6a3 5388 	subw	r3, r3, #3464	; 0xd88
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8003592:	4982      	ldr	r1, [pc, #520]	; (800379c <main+0x9a4>)
 8003594:	f014 f9be 	bl	8017914 <siprintf>
			sprintf(PresBuffer, "%.2f\n", bmpdata.pressure);
 8003598:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800359c:	f6a3 5388 	subw	r3, r3, #3464	; 0xd88
 80035a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035a4:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80035a8:	497c      	ldr	r1, [pc, #496]	; (800379c <main+0x9a4>)
 80035aa:	f014 f9b3 	bl	8017914 <siprintf>
			while (CDC_Transmit_FS (TempBuffer, strlen(TempBuffer)) == USBD_BUSY);
 80035ae:	bf00      	nop
 80035b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc fe23 	bl	8000200 <strlen>
 80035ba:	4603      	mov	r3, r0
 80035bc:	b29a      	uxth	r2, r3
 80035be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f012 fec5 	bl	8016354 <CDC_Transmit_FS>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d0ef      	beq.n	80035b0 <main+0x7b8>
			while (CDC_Transmit_FS (PresBuffer, strlen(PresBuffer)) == USBD_BUSY);
 80035d0:	bf00      	nop
 80035d2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc fe12 	bl	8000200 <strlen>
 80035dc:	4603      	mov	r3, r0
 80035de:	b29a      	uxth	r2, r3
 80035e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f012 feb4 	bl	8016354 <CDC_Transmit_FS>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d0ef      	beq.n	80035d2 <main+0x7da>
			while (CDC_Transmit_FS ("BMP390 END\n", 11) == USBD_BUSY);
 80035f2:	bf00      	nop
 80035f4:	210b      	movs	r1, #11
 80035f6:	486a      	ldr	r0, [pc, #424]	; (80037a0 <main+0x9a8>)
 80035f8:	f012 feac 	bl	8016354 <CDC_Transmit_FS>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d0f8      	beq.n	80035f4 <main+0x7fc>
			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8003602:	bf00      	nop
 8003604:	2101      	movs	r1, #1
 8003606:	485c      	ldr	r0, [pc, #368]	; (8003778 <main+0x980>)
 8003608:	f012 fea4 	bl	8016354 <CDC_Transmit_FS>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d0f8      	beq.n	8003604 <main+0x80c>

			//Read gyro data
			AccError = LSM6DSO_ACC_GetAxes (&AccObj, &Acceleration);
 8003612:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003616:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f001 f9fb 	bl	8004a18 <LSM6DSO_ACC_GetAxes>
 8003622:	f8c7 0ed0 	str.w	r0, [r7, #3792]	; 0xed0
			AVError = LSM6DSO_GYRO_GetAxes (&AccObj, &AngularVelocity);
 8003626:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800362a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fb95 	bl	8004d60 <LSM6DSO_GYRO_GetAxes>
 8003636:	f8c7 0ecc 	str.w	r0, [r7, #3788]	; 0xecc

			sprintf(GyroErrBuff, "%"PRId32"   %"PRId32"\n", AccError, AVError);
 800363a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800363e:	f8d7 3ecc 	ldr.w	r3, [r7, #3788]	; 0xecc
 8003642:	f8d7 2ed0 	ldr.w	r2, [r7, #3792]	; 0xed0
 8003646:	4957      	ldr	r1, [pc, #348]	; (80037a4 <main+0x9ac>)
 8003648:	f014 f964 	bl	8017914 <siprintf>

			while (CDC_Transmit_FS (GyroErrBuff, strlen(GyroErrBuff)) == USBD_BUSY);
 800364c:	bf00      	nop
 800364e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc fdd4 	bl	8000200 <strlen>
 8003658:	4603      	mov	r3, r0
 800365a:	b29a      	uxth	r2, r3
 800365c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f012 fe76 	bl	8016354 <CDC_Transmit_FS>
 8003668:	4603      	mov	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d0ef      	beq.n	800364e <main+0x856>
			while (CDC_Transmit_FS ("GYRO START\n", 11) == USBD_BUSY);
 800366e:	bf00      	nop
 8003670:	210b      	movs	r1, #11
 8003672:	484d      	ldr	r0, [pc, #308]	; (80037a8 <main+0x9b0>)
 8003674:	f012 fe6e 	bl	8016354 <CDC_Transmit_FS>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d0f8      	beq.n	8003670 <main+0x878>

			sprintf(AccelerationBuffer, "%"PRId32"   %"PRId32"   %"PRId32"\n", Acceleration.x, Acceleration.y, Acceleration.z);
 800367e:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8003682:	f6a3 6348 	subw	r3, r3, #3656	; 0xe48
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800368c:	f6a3 6348 	subw	r3, r3, #3656	; 0xe48
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8003696:	f6a3 6348 	subw	r3, r3, #3656	; 0xe48
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	460b      	mov	r3, r1
 80036a4:	4941      	ldr	r1, [pc, #260]	; (80037ac <main+0x9b4>)
 80036a6:	f014 f935 	bl	8017914 <siprintf>
			while (CDC_Transmit_FS (AccelerationBuffer, strlen(AccelerationBuffer)) == USBD_BUSY);
 80036aa:	bf00      	nop
 80036ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc fda5 	bl	8000200 <strlen>
 80036b6:	4603      	mov	r3, r0
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f012 fe47 	bl	8016354 <CDC_Transmit_FS>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d0ef      	beq.n	80036ac <main+0x8b4>

			sprintf(AngularVelocityBuffer, "%"PRId32"   %"PRId32"   %"PRId32"\n", AngularVelocity.x, AngularVelocity.y, AngularVelocity.z);
 80036cc:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80036d0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80036da:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80036e4:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	460b      	mov	r3, r1
 80036f2:	492e      	ldr	r1, [pc, #184]	; (80037ac <main+0x9b4>)
 80036f4:	f014 f90e 	bl	8017914 <siprintf>
			while (CDC_Transmit_FS (AngularVelocityBuffer, strlen(AngularVelocityBuffer)) == USBD_BUSY);
 80036f8:	bf00      	nop
 80036fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fc fd7e 	bl	8000200 <strlen>
 8003704:	4603      	mov	r3, r0
 8003706:	b29a      	uxth	r2, r3
 8003708:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f012 fe20 	bl	8016354 <CDC_Transmit_FS>
 8003714:	4603      	mov	r3, r0
 8003716:	2b01      	cmp	r3, #1
 8003718:	d0ef      	beq.n	80036fa <main+0x902>

			while (CDC_Transmit_FS ("GYRO END\n", 9) == USBD_BUSY);
 800371a:	bf00      	nop
 800371c:	2109      	movs	r1, #9
 800371e:	4824      	ldr	r0, [pc, #144]	; (80037b0 <main+0x9b8>)
 8003720:	f012 fe18 	bl	8016354 <CDC_Transmit_FS>
 8003724:	4603      	mov	r3, r0
 8003726:	2b01      	cmp	r3, #1
 8003728:	d0f8      	beq.n	800371c <main+0x924>
			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 800372a:	bf00      	nop
 800372c:	2101      	movs	r1, #1
 800372e:	4812      	ldr	r0, [pc, #72]	; (8003778 <main+0x980>)
 8003730:	f012 fe10 	bl	8016354 <CDC_Transmit_FS>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d0f8      	beq.n	800372c <main+0x934>

			}
		// GPS
		if (gps_data_ready)
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <main+0x9bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f43f aea0 	beq.w	8003484 <main+0x68c>
			{
			HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003744:	2108      	movs	r1, #8
 8003746:	4810      	ldr	r0, [pc, #64]	; (8003788 <main+0x990>)
 8003748:	f003 f82c 	bl	80067a4 <HAL_GPIO_TogglePin>
			//while (CDC_Transmit_FS ("GPS START\n", 10) == USBD_BUSY);

			if (gps_rxBuffer == gps_rxBuffer1)
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <main+0x9c0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <main+0x9c4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d137      	bne.n	80037c6 <main+0x9ce>
				{

				while (CDC_Transmit_FS (gps_rxBuffer2, strlen(gps_rxBuffer2)) == USBD_BUSY);
 8003756:	bf00      	nop
 8003758:	4819      	ldr	r0, [pc, #100]	; (80037c0 <main+0x9c8>)
 800375a:	f7fc fd51 	bl	8000200 <strlen>
 800375e:	4603      	mov	r3, r0
 8003760:	b29b      	uxth	r3, r3
 8003762:	4619      	mov	r1, r3
 8003764:	4816      	ldr	r0, [pc, #88]	; (80037c0 <main+0x9c8>)
 8003766:	f012 fdf5 	bl	8016354 <CDC_Transmit_FS>
 800376a:	4603      	mov	r3, r0
 800376c:	2b01      	cmp	r3, #1
 800376e:	d0f3      	beq.n	8003758 <main+0x960>
 8003770:	e028      	b.n	80037c4 <main+0x9cc>
 8003772:	bf00      	nop
 8003774:	08019eb4 	.word	0x08019eb4
 8003778:	08019ebc 	.word	0x08019ebc
 800377c:	20000ebc 	.word	0x20000ebc
 8003780:	08019ec0 	.word	0x08019ec0
 8003784:	3ff00000 	.word	0x3ff00000
 8003788:	48000c00 	.word	0x48000c00
 800378c:	08019ed0 	.word	0x08019ed0
 8003790:	08019ee4 	.word	0x08019ee4
 8003794:	08019efc 	.word	0x08019efc
 8003798:	08019f0c 	.word	0x08019f0c
 800379c:	08019f1c 	.word	0x08019f1c
 80037a0:	08019f24 	.word	0x08019f24
 80037a4:	08019f30 	.word	0x08019f30
 80037a8:	08019f3c 	.word	0x08019f3c
 80037ac:	08019f48 	.word	0x08019f48
 80037b0:	08019f5c 	.word	0x08019f5c
 80037b4:	20000eb8 	.word	0x20000eb8
 80037b8:	20000eb0 	.word	0x20000eb0
 80037bc:	20000870 	.word	0x20000870
 80037c0:	20000b90 	.word	0x20000b90
 80037c4:	e00c      	b.n	80037e0 <main+0x9e8>
				}
			else
				{
				while (CDC_Transmit_FS (gps_rxBuffer1, strlen(gps_rxBuffer1)) == USBD_BUSY);
 80037c6:	bf00      	nop
 80037c8:	480c      	ldr	r0, [pc, #48]	; (80037fc <main+0xa04>)
 80037ca:	f7fc fd19 	bl	8000200 <strlen>
 80037ce:	4603      	mov	r3, r0
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4619      	mov	r1, r3
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <main+0xa04>)
 80037d6:	f012 fdbd 	bl	8016354 <CDC_Transmit_FS>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d0f3      	beq.n	80037c8 <main+0x9d0>

				}

			gps_data_ready ^= 1;
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <main+0xa08>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	4a05      	ldr	r2, [pc, #20]	; (8003800 <main+0xa08>)
 80037ea:	6013      	str	r3, [r2, #0]
			gps_send_ready |= 1;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <main+0xa0c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	4a03      	ldr	r2, [pc, #12]	; (8003804 <main+0xa0c>)
 80037f6:	6013      	str	r3, [r2, #0]
		if (tick == 0)
 80037f8:	e644      	b.n	8003484 <main+0x68c>
 80037fa:	bf00      	nop
 80037fc:	20000870 	.word	0x20000870
 8003800:	20000eb8 	.word	0x20000eb8
 8003804:	20000000 	.word	0x20000000

08003808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b096      	sub	sp, #88	; 0x58
 800380c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800380e:	f107 0314 	add.w	r3, r7, #20
 8003812:	2244      	movs	r2, #68	; 0x44
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f013 fb02 	bl	8016e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800381c:	463b      	mov	r3, r7
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800382a:	2000      	movs	r0, #0
 800382c:	f005 fb6e 	bl	8008f0c <HAL_PWREx_ControlVoltageScaling>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003836:	f000 fad1 	bl	8003ddc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800383a:	2321      	movs	r3, #33	; 0x21
 800383c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800383e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003842:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003844:	2301      	movs	r3, #1
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003848:	2302      	movs	r3, #2
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800384c:	2303      	movs	r3, #3
 800384e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003850:	2301      	movs	r3, #1
 8003852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8003854:	231e      	movs	r3, #30
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003858:	2302      	movs	r3, #2
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800385c:	2302      	movs	r3, #2
 800385e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003860:	2302      	movs	r3, #2
 8003862:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	4618      	mov	r0, r3
 800386a:	f005 fc03 	bl	8009074 <HAL_RCC_OscConfig>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8003874:	f000 fab2 	bl	8003ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003878:	230f      	movs	r3, #15
 800387a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800387c:	2303      	movs	r3, #3
 800387e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800388c:	463b      	mov	r3, r7
 800388e:	2105      	movs	r1, #5
 8003890:	4618      	mov	r0, r3
 8003892:	f006 f809 	bl	80098a8 <HAL_RCC_ClockConfig>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800389c:	f000 fa9e 	bl	8003ddc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80038a0:	f006 fa00 	bl	8009ca4 <HAL_RCC_EnableCSS>
}
 80038a4:	bf00      	nop
 80038a6:	3758      	adds	r7, #88	; 0x58
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2100      	movs	r1, #0
 80038b4:	201a      	movs	r0, #26
 80038b6:	f002 fbd0 	bl	800605a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80038ba:	201a      	movs	r0, #26
 80038bc:	f002 fbe9 	bl	8006092 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	2026      	movs	r0, #38	; 0x26
 80038c6:	f002 fbc8 	bl	800605a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038ca:	2026      	movs	r0, #38	; 0x26
 80038cc:	f002 fbe1 	bl	8006092 <HAL_NVIC_EnableIRQ>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <MX_I2C1_Init+0x74>)
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <MX_I2C1_Init+0x78>)
 80038dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80038de:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <MX_I2C1_Init+0x74>)
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <MX_I2C1_Init+0x7c>)
 80038e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <MX_I2C1_Init+0x74>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <MX_I2C1_Init+0x74>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <MX_I2C1_Init+0x74>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <MX_I2C1_Init+0x74>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <MX_I2C1_Init+0x74>)
 80038fe:	2200      	movs	r2, #0
 8003900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003902:	4b11      	ldr	r3, [pc, #68]	; (8003948 <MX_I2C1_Init+0x74>)
 8003904:	2200      	movs	r2, #0
 8003906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <MX_I2C1_Init+0x74>)
 800390a:	2200      	movs	r2, #0
 800390c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800390e:	480e      	ldr	r0, [pc, #56]	; (8003948 <MX_I2C1_Init+0x74>)
 8003910:	f002 ff62 	bl	80067d8 <HAL_I2C_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800391a:	f000 fa5f 	bl	8003ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800391e:	2100      	movs	r1, #0
 8003920:	4809      	ldr	r0, [pc, #36]	; (8003948 <MX_I2C1_Init+0x74>)
 8003922:	f004 f871 	bl	8007a08 <HAL_I2CEx_ConfigAnalogFilter>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800392c:	f000 fa56 	bl	8003ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003930:	2100      	movs	r1, #0
 8003932:	4805      	ldr	r0, [pc, #20]	; (8003948 <MX_I2C1_Init+0x74>)
 8003934:	f004 f8b3 	bl	8007a9e <HAL_I2CEx_ConfigDigitalFilter>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800393e:	f000 fa4d 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200005cc 	.word	0x200005cc
 800394c:	40005400 	.word	0x40005400
 8003950:	307075b1 	.word	0x307075b1

08003954 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003958:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <MX_SDMMC1_SD_Init+0x3c>)
 800395a:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <MX_SDMMC1_SD_Init+0x40>)
 800395c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <MX_SDMMC1_SD_Init+0x3c>)
 8003960:	2200      	movs	r2, #0
 8003962:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <MX_SDMMC1_SD_Init+0x3c>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_SDMMC1_SD_Init+0x3c>)
 800396c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003970:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <MX_SDMMC1_SD_Init+0x3c>)
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <MX_SDMMC1_SD_Init+0x3c>)
 800397a:	2200      	movs	r2, #0
 800397c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <MX_SDMMC1_SD_Init+0x3c>)
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000620 	.word	0x20000620
 8003994:	50062400 	.word	0x50062400

08003998 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <MX_SPI1_Init+0x74>)
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <MX_SPI1_Init+0x78>)
 80039a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80039b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039be:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039da:	2200      	movs	r2, #0
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039e6:	2207      	movs	r2, #7
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039f2:	2208      	movs	r2, #8
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <MX_SPI1_Init+0x74>)
 80039f8:	f009 fbcb 	bl	800d192 <HAL_SPI_Init>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a02:	f000 f9eb 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200006a0 	.word	0x200006a0
 8003a10:	40013000 	.word	0x40013000

08003a14 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b092      	sub	sp, #72	; 0x48
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	611a      	str	r2, [r3, #16]
 8003a2a:	615a      	str	r2, [r3, #20]
 8003a2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a2e:	463b      	mov	r3, r7
 8003a30:	222c      	movs	r2, #44	; 0x2c
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f013 f9f3 	bl	8016e20 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a3c:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <MX_TIM17_Init+0xe8>)
 8003a3e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8003a40:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a46:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8003a4e:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a50:	f642 62df 	movw	r2, #11999	; 0x2edf
 8003a54:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a56:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a5c:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a62:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a68:	4823      	ldr	r0, [pc, #140]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a6a:	f009 fc35 	bl	800d2d8 <HAL_TIM_Base_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8003a74:	f000 f9b2 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003a78:	481f      	ldr	r0, [pc, #124]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003a7a:	f009 fcf5 	bl	800d468 <HAL_TIM_OC_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8003a84:	f000 f9aa 	bl	8003ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a90:	2300      	movs	r3, #0
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a94:	2300      	movs	r3, #0
 8003a96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4812      	ldr	r0, [pc, #72]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003aae:	f009 fe5b 	bl	800d768 <HAL_TIM_OC_ConfigChannel>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8003ab8:	f000 f990 	bl	8003ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003ada:	463b      	mov	r3, r7
 8003adc:	4619      	mov	r1, r3
 8003ade:	4806      	ldr	r0, [pc, #24]	; (8003af8 <MX_TIM17_Init+0xe4>)
 8003ae0:	f00a fa5e 	bl	800dfa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8003aea:	f000 f977 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003aee:	bf00      	nop
 8003af0:	3748      	adds	r7, #72	; 0x48
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000704 	.word	0x20000704
 8003afc:	40014800 	.word	0x40014800

08003b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b04:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <MX_USART1_UART_Init+0x94>)
 8003b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b0c:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <MX_USART1_UART_Init+0x98>)
 8003b0e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b24:	220c      	movs	r2, #12
 8003b26:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b3a:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b46:	4812      	ldr	r0, [pc, #72]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b48:	f00a fac6 	bl	800e0d8 <HAL_UART_Init>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003b52:	f000 f943 	bl	8003ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b56:	2100      	movs	r1, #0
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b5a:	f00b fbf4 	bl	800f346 <HAL_UARTEx_SetTxFifoThreshold>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003b64:	f000 f93a 	bl	8003ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4809      	ldr	r0, [pc, #36]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b6c:	f00b fc29 	bl	800f3c2 <HAL_UARTEx_SetRxFifoThreshold>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003b76:	f000 f931 	bl	8003ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b7a:	4805      	ldr	r0, [pc, #20]	; (8003b90 <MX_USART1_UART_Init+0x90>)
 8003b7c:	f00b fbaa 	bl	800f2d4 <HAL_UARTEx_DisableFifoMode>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003b86:	f000 f929 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000750 	.word	0x20000750
 8003b94:	40013800 	.word	0x40013800
 8003b98:	0001c138 	.word	0x0001c138

08003b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003ba2:	4a25      	ldr	r2, [pc, #148]	; (8003c38 <MX_USART2_UART_Init+0x9c>)
 8003ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003be0:	2210      	movs	r2, #16
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003be6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bec:	4811      	ldr	r0, [pc, #68]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003bee:	f00a fa73 	bl	800e0d8 <HAL_UART_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003bf8:	f000 f8f0 	bl	8003ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	480d      	ldr	r0, [pc, #52]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003c00:	f00b fba1 	bl	800f346 <HAL_UARTEx_SetTxFifoThreshold>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8003c0a:	f000 f8e7 	bl	8003ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4808      	ldr	r0, [pc, #32]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003c12:	f00b fbd6 	bl	800f3c2 <HAL_UARTEx_SetRxFifoThreshold>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8003c1c:	f000 f8de 	bl	8003ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003c20:	4804      	ldr	r0, [pc, #16]	; (8003c34 <MX_USART2_UART_Init+0x98>)
 8003c22:	f00b fb57 	bl	800f2d4 <HAL_UARTEx_DisableFifoMode>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8003c2c:	f000 f8d6 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200007e0 	.word	0x200007e0
 8003c38:	40004400 	.word	0x40004400

08003c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c42:	f107 031c 	add.w	r3, r7, #28
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a5c      	ldr	r2, [pc, #368]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c58:	f043 0310 	orr.w	r3, r3, #16
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6a:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4a56      	ldr	r2, [pc, #344]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c76:	4b54      	ldr	r3, [pc, #336]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c82:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	4a50      	ldr	r2, [pc, #320]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8e:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	4a4a      	ldr	r2, [pc, #296]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca6:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb2:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb6:	4a44      	ldr	r2, [pc, #272]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cbe:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cca:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	4a3e      	ldr	r2, [pc, #248]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd6:	4b3c      	ldr	r3, [pc, #240]	; (8003dc8 <MX_GPIO_Init+0x18c>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f641 013c 	movw	r1, #6204	; 0x183c
 8003ce8:	4838      	ldr	r0, [pc, #224]	; (8003dcc <MX_GPIO_Init+0x190>)
 8003cea:	f002 fd43 	bl	8006774 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2130      	movs	r1, #48	; 0x30
 8003cf2:	4837      	ldr	r0, [pc, #220]	; (8003dd0 <MX_GPIO_Init+0x194>)
 8003cf4:	f002 fd3e 	bl	8006774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2178      	movs	r1, #120	; 0x78
 8003cfc:	4835      	ldr	r0, [pc, #212]	; (8003dd4 <MX_GPIO_Init+0x198>)
 8003cfe:	f002 fd39 	bl	8006774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003d02:	f641 033c 	movw	r3, #6204	; 0x183c
 8003d06:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d14:	f107 031c 	add.w	r3, r7, #28
 8003d18:	4619      	mov	r1, r3
 8003d1a:	482c      	ldr	r0, [pc, #176]	; (8003dcc <MX_GPIO_Init+0x190>)
 8003d1c:	f002 fa8e 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8003d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d26:	2300      	movs	r3, #0
 8003d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8003d2e:	f107 031c 	add.w	r3, r7, #28
 8003d32:	4619      	mov	r1, r3
 8003d34:	4826      	ldr	r0, [pc, #152]	; (8003dd0 <MX_GPIO_Init+0x194>)
 8003d36:	f002 fa81 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 8003d3a:	f248 0302 	movw	r3, #32770	; 0x8002
 8003d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d48:	f107 031c 	add.w	r3, r7, #28
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d52:	f002 fa73 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8003d56:	2330      	movs	r3, #48	; 0x30
 8003d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d66:	f107 031c 	add.w	r3, r7, #28
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4818      	ldr	r0, [pc, #96]	; (8003dd0 <MX_GPIO_Init+0x194>)
 8003d6e:	f002 fa65 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8003d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8003d80:	f107 031c 	add.w	r3, r7, #28
 8003d84:	4619      	mov	r1, r3
 8003d86:	4811      	ldr	r0, [pc, #68]	; (8003dcc <MX_GPIO_Init+0x190>)
 8003d88:	f002 fa58 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8003d8c:	2378      	movs	r3, #120	; 0x78
 8003d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d90:	2301      	movs	r3, #1
 8003d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	4619      	mov	r1, r3
 8003da2:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <MX_GPIO_Init+0x198>)
 8003da4:	f002 fa4a 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8003da8:	2320      	movs	r3, #32
 8003daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dac:	2300      	movs	r3, #0
 8003dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8003db4:	f107 031c 	add.w	r3, r7, #28
 8003db8:	4619      	mov	r1, r3
 8003dba:	4807      	ldr	r0, [pc, #28]	; (8003dd8 <MX_GPIO_Init+0x19c>)
 8003dbc:	f002 fa3e 	bl	800623c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dc0:	bf00      	nop
 8003dc2:	3730      	adds	r7, #48	; 0x30
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	48001000 	.word	0x48001000
 8003dd0:	48000800 	.word	0x48000800
 8003dd4:	48000c00 	.word	0x48000c00
 8003dd8:	48000400 	.word	0x48000400

08003ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003de0:	b672      	cpsid	i
}
 8003de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <Error_Handler+0x10>)
 8003de6:	f013 fd6d 	bl	80178c4 <iprintf>
  while (1)
 8003dea:	e7fe      	b.n	8003dea <Error_Handler+0xe>
 8003dec:	08019fa4 	.word	0x08019fa4

08003df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_MspInit+0x44>)
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <HAL_MspInit+0x44>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6613      	str	r3, [r2, #96]	; 0x60
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <HAL_MspInit+0x44>)
 8003e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_MspInit+0x44>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_MspInit+0x44>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_MspInit+0x44>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000

08003e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b0ae      	sub	sp, #184	; 0xb8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	2294      	movs	r2, #148	; 0x94
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f012 ffe1 	bl	8016e20 <memset>
  if(hi2c->Instance==I2C1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <HAL_I2C_MspInit+0xb0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d13a      	bne.n	8003ede <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	4618      	mov	r0, r3
 8003e76:	f006 f801 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003e80:	f7ff ffac 	bl	8003ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_I2C_MspInit+0xb4>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_I2C_MspInit+0xb4>)
 8003e8a:	f043 0302 	orr.w	r3, r3, #2
 8003e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_I2C_MspInit+0xb4>)
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e9c:	23c0      	movs	r3, #192	; 0xc0
 8003e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ea2:	2312      	movs	r3, #18
 8003ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	480b      	ldr	r0, [pc, #44]	; (8003ef0 <HAL_I2C_MspInit+0xb8>)
 8003ec2:	f002 f9bb 	bl	800623c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_I2C_MspInit+0xb4>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	4a08      	ldr	r2, [pc, #32]	; (8003eec <HAL_I2C_MspInit+0xb4>)
 8003ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_I2C_MspInit+0xb4>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ede:	bf00      	nop
 8003ee0:	37b8      	adds	r7, #184	; 0xb8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40005400 	.word	0x40005400
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	48000400 	.word	0x48000400

08003ef4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <HAL_I2C_MspDeInit+0x38>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10d      	bne.n	8003f22 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_I2C_MspDeInit+0x3c>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <HAL_I2C_MspDeInit+0x3c>)
 8003f0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f10:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003f12:	2140      	movs	r1, #64	; 0x40
 8003f14:	4807      	ldr	r0, [pc, #28]	; (8003f34 <HAL_I2C_MspDeInit+0x40>)
 8003f16:	f002 fb23 	bl	8006560 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	4805      	ldr	r0, [pc, #20]	; (8003f34 <HAL_I2C_MspDeInit+0x40>)
 8003f1e:	f002 fb1f 	bl	8006560 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40005400 	.word	0x40005400
 8003f30:	40021000 	.word	0x40021000
 8003f34:	48000400 	.word	0x48000400

08003f38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0b0      	sub	sp, #192	; 0xc0
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f50:	f107 0318 	add.w	r3, r7, #24
 8003f54:	2294      	movs	r2, #148	; 0x94
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f012 ff61 	bl	8016e20 <memset>
  if(hsd->Instance==SDMMC1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a33      	ldr	r2, [pc, #204]	; (8004030 <HAL_SD_MspInit+0xf8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d15e      	bne.n	8004026 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8003f68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f74:	f107 0318 	add.w	r3, r7, #24
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f005 ff7f 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8003f84:	f7ff ff2a 	bl	8003ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003f88:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa0:	4b24      	ldr	r3, [pc, #144]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003fbe:	f043 0308 	orr.w	r3, r3, #8
 8003fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <HAL_SD_MspInit+0xfc>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003fd0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003fea:	230c      	movs	r3, #12
 8003fec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4810      	ldr	r0, [pc, #64]	; (8004038 <HAL_SD_MspInit+0x100>)
 8003ff8:	f002 f920 	bl	800623c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400e:	2303      	movs	r3, #3
 8004010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004014:	230c      	movs	r3, #12
 8004016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800401a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800401e:	4619      	mov	r1, r3
 8004020:	4806      	ldr	r0, [pc, #24]	; (800403c <HAL_SD_MspInit+0x104>)
 8004022:	f002 f90b 	bl	800623c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004026:	bf00      	nop
 8004028:	37c0      	adds	r7, #192	; 0xc0
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	50062400 	.word	0x50062400
 8004034:	40021000 	.word	0x40021000
 8004038:	48000800 	.word	0x48000800
 800403c:	48000c00 	.word	0x48000c00

08004040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a17      	ldr	r2, [pc, #92]	; (80040bc <HAL_SPI_MspInit+0x7c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d128      	bne.n	80040b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004062:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <HAL_SPI_MspInit+0x80>)
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <HAL_SPI_MspInit+0x80>)
 8004068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800406c:	6613      	str	r3, [r2, #96]	; 0x60
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <HAL_SPI_MspInit+0x80>)
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_SPI_MspInit+0x80>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <HAL_SPI_MspInit+0x80>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_SPI_MspInit+0x80>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004092:	23f0      	movs	r3, #240	; 0xf0
 8004094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004096:	2302      	movs	r3, #2
 8004098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409e:	2303      	movs	r3, #3
 80040a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040a2:	2305      	movs	r3, #5
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a6:	f107 0314 	add.w	r3, r7, #20
 80040aa:	4619      	mov	r1, r3
 80040ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b0:	f002 f8c4 	bl	800623c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040b4:	bf00      	nop
 80040b6:	3728      	adds	r7, #40	; 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40013000 	.word	0x40013000
 80040c0:	40021000 	.word	0x40021000

080040c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_TIM_Base_MspInit+0x38>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10b      	bne.n	80040ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_TIM_Base_MspInit+0x3c>)
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_TIM_Base_MspInit+0x3c>)
 80040dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e0:	6613      	str	r3, [r2, #96]	; 0x60
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <HAL_TIM_Base_MspInit+0x3c>)
 80040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40014800 	.word	0x40014800
 8004100:	40021000 	.word	0x40021000

08004104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b0b0      	sub	sp, #192	; 0xc0
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800411c:	f107 0318 	add.w	r3, r7, #24
 8004120:	2294      	movs	r2, #148	; 0x94
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f012 fe7b 	bl	8016e20 <memset>
  if(huart->Instance==USART1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a43      	ldr	r2, [pc, #268]	; (800423c <HAL_UART_MspInit+0x138>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d13d      	bne.n	80041b0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004134:	2301      	movs	r3, #1
 8004136:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004138:	2300      	movs	r3, #0
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800413c:	f107 0318 	add.w	r3, r7, #24
 8004140:	4618      	mov	r0, r3
 8004142:	f005 fe9b 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800414c:	f7ff fe46 	bl	8003ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004150:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_UART_MspInit+0x13c>)
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <HAL_UART_MspInit+0x13c>)
 8004156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415a:	6613      	str	r3, [r2, #96]	; 0x60
 800415c:	4b38      	ldr	r3, [pc, #224]	; (8004240 <HAL_UART_MspInit+0x13c>)
 800415e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004168:	4b35      	ldr	r3, [pc, #212]	; (8004240 <HAL_UART_MspInit+0x13c>)
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	4a34      	ldr	r2, [pc, #208]	; (8004240 <HAL_UART_MspInit+0x13c>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004174:	4b32      	ldr	r3, [pc, #200]	; (8004240 <HAL_UART_MspInit+0x13c>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8004180:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004194:	2303      	movs	r3, #3
 8004196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800419a:	2307      	movs	r3, #7
 800419c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041aa:	f002 f847 	bl	800623c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041ae:	e040      	b.n	8004232 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a23      	ldr	r2, [pc, #140]	; (8004244 <HAL_UART_MspInit+0x140>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d13b      	bne.n	8004232 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041ba:	2302      	movs	r3, #2
 80041bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041be:	2300      	movs	r3, #0
 80041c0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041c2:	f107 0318 	add.w	r3, r7, #24
 80041c6:	4618      	mov	r0, r3
 80041c8:	f005 fe58 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80041d2:	f7ff fe03 	bl	8003ddc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041d6:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_UART_MspInit+0x13c>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4a19      	ldr	r2, [pc, #100]	; (8004240 <HAL_UART_MspInit+0x13c>)
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <HAL_UART_MspInit+0x13c>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ee:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_UART_MspInit+0x13c>)
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	4a13      	ldr	r2, [pc, #76]	; (8004240 <HAL_UART_MspInit+0x13c>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_UART_MspInit+0x13c>)
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8004206:	230c      	movs	r3, #12
 8004208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420c:	2302      	movs	r3, #2
 800420e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004218:	2303      	movs	r3, #3
 800421a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800421e:	2307      	movs	r3, #7
 8004220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004224:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004228:	4619      	mov	r1, r3
 800422a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800422e:	f002 f805 	bl	800623c <HAL_GPIO_Init>
}
 8004232:	bf00      	nop
 8004234:	37c0      	adds	r7, #192	; 0xc0
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40013800 	.word	0x40013800
 8004240:	40021000 	.word	0x40021000
 8004244:	40004400 	.word	0x40004400

08004248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800424c:	f005 fd3a 	bl	8009cc4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <NMI_Handler+0x8>

08004252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004256:	e7fe      	b.n	8004256 <HardFault_Handler+0x4>

08004258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800425c:	e7fe      	b.n	800425c <MemManage_Handler+0x4>

0800425e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004262:	e7fe      	b.n	8004262 <BusFault_Handler+0x4>

08004264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004268:	e7fe      	b.n	8004268 <UsageFault_Handler+0x4>

0800426a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004298:	f001 fdc0 	bl	8005e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}

080042a0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80042ba:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80042d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80042d4:	4804      	ldr	r0, [pc, #16]	; (80042e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 80042d6:	f009 f928 	bl	800d52a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000ebc 	.word	0x20000ebc
 80042e4:	20000ebd 	.word	0x20000ebd
 80042e8:	20000704 	.word	0x20000704

080042ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <USART2_IRQHandler+0x90>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 80042fc:	4b20      	ldr	r3, [pc, #128]	; (8004380 <USART2_IRQHandler+0x94>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <USART2_IRQHandler+0x98>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <USART2_IRQHandler+0x94>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	1c59      	adds	r1, r3, #1
 800430c:	b2c8      	uxtb	r0, r1
 800430e:	491c      	ldr	r1, [pc, #112]	; (8004380 <USART2_IRQHandler+0x94>)
 8004310:	7008      	strb	r0, [r1, #0]
 8004312:	4413      	add	r3, r2
 8004314:	79fa      	ldrb	r2, [r7, #7]
 8004316:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b0a      	cmp	r3, #10
 800431c:	d126      	bne.n	800436c <USART2_IRQHandler+0x80>
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <USART2_IRQHandler+0x9c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d022      	beq.n	800436c <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <USART2_IRQHandler+0x98>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a15      	ldr	r2, [pc, #84]	; (8004380 <USART2_IRQHandler+0x94>)
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	4413      	add	r3, r2
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <USART2_IRQHandler+0xa0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	4a13      	ldr	r2, [pc, #76]	; (800438c <USART2_IRQHandler+0xa0>)
 8004340:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <USART2_IRQHandler+0x9c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f083 0301 	eor.w	r3, r3, #1
 800434a:	4a0f      	ldr	r2, [pc, #60]	; (8004388 <USART2_IRQHandler+0x9c>)
 800434c:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <USART2_IRQHandler+0x94>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <USART2_IRQHandler+0x98>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <USART2_IRQHandler+0xa4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d103      	bne.n	8004366 <USART2_IRQHandler+0x7a>
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <USART2_IRQHandler+0x98>)
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <USART2_IRQHandler+0xa8>)
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e002      	b.n	800436c <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <USART2_IRQHandler+0x98>)
 8004368:	4a09      	ldr	r2, [pc, #36]	; (8004390 <USART2_IRQHandler+0xa4>)
 800436a:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800436c:	4803      	ldr	r0, [pc, #12]	; (800437c <USART2_IRQHandler+0x90>)
 800436e:	f009 ff03 	bl	800e178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	200007e0 	.word	0x200007e0
 8004380:	20000eb4 	.word	0x20000eb4
 8004384:	20000eb0 	.word	0x20000eb0
 8004388:	20000000 	.word	0x20000000
 800438c:	20000eb8 	.word	0x20000eb8
 8004390:	20000870 	.word	0x20000870
 8004394:	20000b90 	.word	0x20000b90

08004398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <OTG_FS_IRQHandler+0x10>)
 800439e:	f003 fd1d 	bl	8007ddc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20002834 	.word	0x20002834

080043ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <SystemInit+0x20>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	4a05      	ldr	r2, [pc, #20]	; (80043cc <SystemInit+0x20>)
 80043b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80043d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004408 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043d4:	f7ff ffea 	bl	80043ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043d8:	480c      	ldr	r0, [pc, #48]	; (800440c <LoopForever+0x6>)
  ldr r1, =_edata
 80043da:	490d      	ldr	r1, [pc, #52]	; (8004410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <LoopForever+0xe>)
  movs r3, #0
 80043de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e0:	e002      	b.n	80043e8 <LoopCopyDataInit>

080043e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e6:	3304      	adds	r3, #4

080043e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043ec:	d3f9      	bcc.n	80043e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ee:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043f0:	4c0a      	ldr	r4, [pc, #40]	; (800441c <LoopForever+0x16>)
  movs r3, #0
 80043f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f4:	e001      	b.n	80043fa <LoopFillZerobss>

080043f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f8:	3204      	adds	r2, #4

080043fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043fc:	d3fb      	bcc.n	80043f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043fe:	f012 fcd5 	bl	8016dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004402:	f7fe fcf9 	bl	8002df8 <main>

08004406 <LoopForever>:

LoopForever:
    b LoopForever
 8004406:	e7fe      	b.n	8004406 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004408:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004410:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004414:	0801a560 	.word	0x0801a560
  ldr r2, =_sbss
 8004418:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 800441c:	20002f74 	.word	0x20002f74

08004420 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004420:	e7fe      	b.n	8004420 <ADC1_IRQHandler>
	...

08004424 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d103      	bne.n	8004440 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e051      	b.n	80044e4 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	7b1a      	ldrb	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <LSM6DSO_RegisterBusIO+0xcc>)
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <LSM6DSO_RegisterBusIO+0xd0>)
 8004482:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e020      	b.n	80044e4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4798      	blx	r3
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e016      	b.n	80044e4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d112      	bne.n	80044e4 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80044c8:	230c      	movs	r3, #12
 80044ca:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80044cc:	7afb      	ldrb	r3, [r7, #11]
 80044ce:	461a      	mov	r2, r3
 80044d0:	2112      	movs	r1, #18
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fc98 	bl	8004e08 <LSM6DSO_Write_Reg>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044e2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	080052ad 	.word	0x080052ad
 80044f4:	080052e3 	.word	0x080052e3

080044f8 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3320      	adds	r3, #32
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fb5e 	bl	8005bc8 <lsm6dso_i3c_disable_set>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8004512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004516:	e060      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3320      	adds	r3, #32
 800451c:	2101      	movs	r1, #1
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fb2c 	bl	8005b7c <lsm6dso_auto_increment_set>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452e:	e054      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3320      	adds	r3, #32
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f001 fa3e 	bl	80059b8 <lsm6dso_block_data_update_set>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004546:	e048      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3320      	adds	r3, #32
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f001 fb80 	bl	8005c54 <lsm6dso_fifo_mode_set>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800455e:	e03c      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2204      	movs	r2, #4
 8004564:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3320      	adds	r3, #32
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ff60 	bl	8005434 <lsm6dso_xl_data_rate_set>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800457e:	e02c      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3320      	adds	r3, #32
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fef6 	bl	8005378 <lsm6dso_xl_full_scale_set>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8004592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004596:	e020      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3320      	adds	r3, #32
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f8a8 	bl	80056fc <lsm6dso_gy_data_rate_set>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045b6:	e010      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3320      	adds	r3, #32
 80045bc:	2106      	movs	r1, #6
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 f834 	bl	800562c <lsm6dso_gy_full_scale_set>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ce:	e004      	b.n	80045da <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e014      	b.n	8004622 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f103 0220 	add.w	r2, r3, #32
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 ff14 	bl	8005434 <lsm6dso_xl_data_rate_set>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004616:	e004      	b.n	8004622 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3320      	adds	r3, #32
 800463e:	f107 020b 	add.w	r2, r7, #11
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 febd 	bl	80053c4 <lsm6dso_xl_full_scale_get>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004654:	e023      	b.n	800469e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004656:	7afb      	ldrb	r3, [r7, #11]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d81b      	bhi.n	8004694 <LSM6DSO_ACC_GetSensitivity+0x68>
 800465c:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	08004675 	.word	0x08004675
 8004668:	0800468d 	.word	0x0800468d
 800466c:	0800467d 	.word	0x0800467d
 8004670:	08004685 	.word	0x08004685
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8004678:	601a      	str	r2, [r3, #0]
      break;
 800467a:	e00f      	b.n	800469c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	4a0b      	ldr	r2, [pc, #44]	; (80046ac <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004680:	601a      	str	r2, [r3, #0]
      break;
 8004682:	e00b      	b.n	800469c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8004688:	601a      	str	r2, [r3, #0]
      break;
 800468a:	e007      	b.n	800469c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004690:	601a      	str	r2, [r3, #0]
      break;
 8004692:	e003      	b.n	800469c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004698:	60fb      	str	r3, [r7, #12]
      break;
 800469a:	bf00      	nop
  }

  return ret;
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	3d79db23 	.word	0x3d79db23
 80046ac:	3df9db23 	.word	0x3df9db23
 80046b0:	3e79db23 	.word	0x3e79db23
 80046b4:	3ef9db23 	.word	0x3ef9db23

080046b8 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80046c4:	2100      	movs	r1, #0
 80046c6:	ed97 0a00 	vldr	s0, [r7]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f806 	bl	80046dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80046d0:	4603      	mov	r3, r0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80046e8:	460b      	mov	r3, r1
 80046ea:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	f000 80ea 	beq.w	80048d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f300 8163 	bgt.w	80049c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004706:	2b01      	cmp	r3, #1
 8004708:	d074      	beq.n	80047f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800470a:	e15d      	b.n	80049c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f103 0020 	add.w	r0, r3, #32
 8004712:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004716:	2301      	movs	r3, #1
 8004718:	2114      	movs	r1, #20
 800471a:	f000 fdfd 	bl	8005318 <lsm6dso_read_reg>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004728:	e16c      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800472a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800472e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d025      	beq.n	8004784 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10b      	bne.n	800475a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3320      	adds	r3, #32
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fe73 	bl	8005434 <lsm6dso_xl_data_rate_set>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004758:	e154      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800475a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800475e:	f36f 13c7 	bfc	r3, #7, #1
 8004762:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f103 0020 	add.w	r0, r3, #32
 800476c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004770:	2301      	movs	r3, #1
 8004772:	2114      	movs	r1, #20
 8004774:	f000 fde8 	bl	8005348 <lsm6dso_write_reg>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004782:	e13f      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f103 0020 	add.w	r0, r3, #32
 800478a:	f107 0220 	add.w	r2, r7, #32
 800478e:	2301      	movs	r3, #1
 8004790:	2115      	movs	r1, #21
 8004792:	f000 fdc1 	bl	8005318 <lsm6dso_read_reg>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a0:	e130      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80047a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d014      	beq.n	80047da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80047b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047b4:	f36f 1304 	bfc	r3, #4, #1
 80047b8:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f103 0020 	add.w	r0, r3, #32
 80047c2:	f107 0220 	add.w	r2, r7, #32
 80047c6:	2301      	movs	r3, #1
 80047c8:	2115      	movs	r1, #21
 80047ca:	f000 fdbd 	bl	8005348 <lsm6dso_write_reg>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80047d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d8:	e114      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80047da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80047de:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80047e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ea:	d400      	bmi.n	80047ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80047ec:	e0f0      	b.n	80049d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80047ee:	4b87      	ldr	r3, [pc, #540]	; (8004a0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f2:	e0ed      	b.n	80049d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f103 0020 	add.w	r0, r3, #32
 80047fa:	f107 021c 	add.w	r2, r7, #28
 80047fe:	2301      	movs	r3, #1
 8004800:	2114      	movs	r1, #20
 8004802:	f000 fd89 	bl	8005318 <lsm6dso_read_reg>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004810:	e0f8      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004812:	7f3b      	ldrb	r3, [r7, #28]
 8004814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10b      	bne.n	8004840 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3320      	adds	r3, #32
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fe00 	bl	8005434 <lsm6dso_xl_data_rate_set>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800483e:	e0e1      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004840:	7f3b      	ldrb	r3, [r7, #28]
 8004842:	f36f 13c7 	bfc	r3, #7, #1
 8004846:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f103 0020 	add.w	r0, r3, #32
 800484e:	f107 021c 	add.w	r2, r7, #28
 8004852:	2301      	movs	r3, #1
 8004854:	2114      	movs	r1, #20
 8004856:	f000 fd77 	bl	8005348 <lsm6dso_write_reg>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004864:	e0ce      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f103 0020 	add.w	r0, r3, #32
 800486c:	f107 0218 	add.w	r2, r7, #24
 8004870:	2301      	movs	r3, #1
 8004872:	2115      	movs	r1, #21
 8004874:	f000 fd50 	bl	8005318 <lsm6dso_read_reg>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004882:	e0bf      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004884:	7e3b      	ldrb	r3, [r7, #24]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d112      	bne.n	80048b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004890:	7e3b      	ldrb	r3, [r7, #24]
 8004892:	f043 0310 	orr.w	r3, r3, #16
 8004896:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f103 0020 	add.w	r0, r3, #32
 800489e:	f107 0218 	add.w	r2, r7, #24
 80048a2:	2301      	movs	r3, #1
 80048a4:	2115      	movs	r1, #21
 80048a6:	f000 fd4f 	bl	8005348 <lsm6dso_write_reg>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80048b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b4:	e0a6      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80048b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80048ba:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004a10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80048be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c6:	dc00      	bgt.n	80048ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80048c8:	e082      	b.n	80049d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80048ca:	4b52      	ldr	r3, [pc, #328]	; (8004a14 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ce:	e07f      	b.n	80049d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f103 0020 	add.w	r0, r3, #32
 80048d6:	f107 0210 	add.w	r2, r7, #16
 80048da:	2301      	movs	r3, #1
 80048dc:	2115      	movs	r1, #21
 80048de:	f000 fd1b 	bl	8005318 <lsm6dso_read_reg>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ec:	e08a      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80048ee:	7c3b      	ldrb	r3, [r7, #16]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d012      	beq.n	8004920 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80048fa:	7c3b      	ldrb	r3, [r7, #16]
 80048fc:	f36f 1304 	bfc	r3, #4, #1
 8004900:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f103 0020 	add.w	r0, r3, #32
 8004908:	f107 0210 	add.w	r2, r7, #16
 800490c:	2301      	movs	r3, #1
 800490e:	2115      	movs	r1, #21
 8004910:	f000 fd1a 	bl	8005348 <lsm6dso_write_reg>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800491e:	e071      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004926:	2b01      	cmp	r3, #1
 8004928:	d108      	bne.n	800493c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f8ef 	bl	8004b0e <LSM6DSO_GYRO_Disable>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800493a:	e063      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f103 0020 	add.w	r0, r3, #32
 8004942:	f107 0214 	add.w	r2, r7, #20
 8004946:	2301      	movs	r3, #1
 8004948:	2114      	movs	r1, #20
 800494a:	f000 fce5 	bl	8005318 <lsm6dso_read_reg>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004958:	e054      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800495a:	7d3b      	ldrb	r3, [r7, #20]
 800495c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d123      	bne.n	80049ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10b      	bne.n	8004988 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3320      	adds	r3, #32
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fd5c 	bl	8005434 <lsm6dso_xl_data_rate_set>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004986:	e03d      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004988:	7d3b      	ldrb	r3, [r7, #20]
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f103 0020 	add.w	r0, r3, #32
 8004996:	f107 0214 	add.w	r2, r7, #20
 800499a:	2301      	movs	r3, #1
 800499c:	2114      	movs	r1, #20
 800499e:	f000 fcd3 	bl	8005348 <lsm6dso_write_reg>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ac:	e02a      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80049ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049b2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004a10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80049b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	dc00      	bgt.n	80049c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80049c0:	e006      	b.n	80049d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c6:	e003      	b.n	80049d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80049ce:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049d6:	d102      	bne.n	80049de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049dc:	e012      	b.n	8004a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d106      	bne.n	80049f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80049e8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fa27 	bl	8004e40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80049f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80049f4:	e005      	b.n	8004a02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80049f6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fab8 	bl	8004f70 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004a00:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3730      	adds	r7, #48	; 0x30
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	41480000 	.word	0x41480000
 8004a10:	43500000 	.word	0x43500000
 8004a14:	43500000 	.word	0x43500000

08004a18 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3320      	adds	r3, #32
 8004a2c:	f107 0210 	add.w	r2, r7, #16
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f831 	bl	8005a9a <lsm6dso_acceleration_raw_get>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a42:	e03c      	b.n	8004abe <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004a44:	f107 030c 	add.w	r3, r7, #12
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fdee 	bl	800462c <LSM6DSO_ACC_GetSensitivity>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a5a:	e030      	b.n	8004abe <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004a5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a74:	ee17 2a90 	vmov	r2, s15
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004a7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a94:	ee17 2a90 	vmov	r2, s15
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004a9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ab4:	ee17 2a90 	vmov	r2, s15
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e014      	b.n	8004b06 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f103 0220 	add.w	r2, r3, #32
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 fe06 	bl	80056fc <lsm6dso_gy_data_rate_set>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004afa:	e004      	b.n	8004b06 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e01f      	b.n	8004b64 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f103 0220 	add.w	r2, r3, #32
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3334      	adds	r3, #52	; 0x34
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 fedf 	bl	80058f4 <lsm6dso_gy_data_rate_get>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b40:	e010      	b.n	8004b64 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3320      	adds	r3, #32
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fdd7 	bl	80056fc <lsm6dso_gy_data_rate_set>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b58:	e004      	b.n	8004b64 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3320      	adds	r3, #32
 8004b7e:	f107 020b 	add.w	r2, r7, #11
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fd77 	bl	8005678 <lsm6dso_gy_full_scale_get>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b94:	e02d      	b.n	8004bf2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004b96:	7afb      	ldrb	r3, [r7, #11]
 8004b98:	2b06      	cmp	r3, #6
 8004b9a:	d825      	bhi.n	8004be8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bc1 	.word	0x08004bc1
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004be9 	.word	0x08004be9
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be9 	.word	0x08004be9
 8004bbc:	08004be1 	.word	0x08004be1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004bc4:	601a      	str	r2, [r3, #0]
      break;
 8004bc6:	e013      	b.n	8004bf0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004bcc:	601a      	str	r2, [r3, #0]
      break;
 8004bce:	e00f      	b.n	8004bf0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004bd4:	601a      	str	r2, [r3, #0]
      break;
 8004bd6:	e00b      	b.n	8004bf0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	4a0b      	ldr	r2, [pc, #44]	; (8004c08 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004bdc:	601a      	str	r2, [r3, #0]
      break;
 8004bde:	e007      	b.n	8004bf0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004be4:	601a      	str	r2, [r3, #0]
      break;
 8004be6:	e003      	b.n	8004bf0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bec:	60fb      	str	r3, [r7, #12]
      break;
 8004bee:	bf00      	nop
  }

  return ret;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	408c0000 	.word	0x408c0000
 8004c00:	410c0000 	.word	0x410c0000
 8004c04:	418c0000 	.word	0x418c0000
 8004c08:	420c0000 	.word	0x420c0000
 8004c0c:	428c0000 	.word	0x428c0000

08004c10 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	ed97 0a00 	vldr	s0, [r7]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f806 	bl	8004c34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004c28:	4603      	mov	r3, r0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c40:	460b      	mov	r3, r1
 8004c42:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d028      	beq.n	8004ca8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004c56:	e05c      	b.n	8004d12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f103 0020 	add.w	r0, r3, #32
 8004c5e:	f107 0214 	add.w	r2, r7, #20
 8004c62:	2301      	movs	r3, #1
 8004c64:	2116      	movs	r1, #22
 8004c66:	f000 fb57 	bl	8005318 <lsm6dso_read_reg>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c74:	e06c      	b.n	8004d50 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004c76:	7d3b      	ldrb	r3, [r7, #20]
 8004c78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d04b      	beq.n	8004d1a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004c82:	7d3b      	ldrb	r3, [r7, #20]
 8004c84:	f36f 13c7 	bfc	r3, #7, #1
 8004c88:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f103 0020 	add.w	r0, r3, #32
 8004c90:	f107 0214 	add.w	r2, r7, #20
 8004c94:	2301      	movs	r3, #1
 8004c96:	2116      	movs	r1, #22
 8004c98:	f000 fb56 	bl	8005348 <lsm6dso_write_reg>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d03b      	beq.n	8004d1a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ca6:	e053      	b.n	8004d50 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f103 0020 	add.w	r0, r3, #32
 8004cae:	f107 0210 	add.w	r2, r7, #16
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2116      	movs	r1, #22
 8004cb6:	f000 fb2f 	bl	8005318 <lsm6dso_read_reg>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cc4:	e044      	b.n	8004d50 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8004cc6:	7c3b      	ldrb	r3, [r7, #16]
 8004cc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d112      	bne.n	8004cf8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004cd2:	7c3b      	ldrb	r3, [r7, #16]
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f103 0020 	add.w	r0, r3, #32
 8004ce0:	f107 0210 	add.w	r2, r7, #16
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	2116      	movs	r1, #22
 8004ce8:	f000 fb2e 	bl	8005348 <lsm6dso_write_reg>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf6:	e02b      	b.n	8004d50 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004cf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cfc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004d58 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d08:	dc00      	bgt.n	8004d0c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004d0a:	e007      	b.n	8004d1c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e004      	b.n	8004d1c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d16:	61fb      	str	r3, [r7, #28]
      break;
 8004d18:	e000      	b.n	8004d1c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004d1a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d22:	d102      	bne.n	8004d2a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d28:	e012      	b.n	8004d50 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004d34:	ed97 0a06 	vldr	s0, [r7, #24]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f9a9 	bl	8005090 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004d3e:	61f8      	str	r0, [r7, #28]
 8004d40:	e005      	b.n	8004d4e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004d42:	ed97 0a06 	vldr	s0, [r7, #24]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fa2e 	bl	80051a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004d4c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	43500000 	.word	0x43500000
 8004d5c:	43500000 	.word	0x43500000

08004d60 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3320      	adds	r3, #32
 8004d6e:	f107 0210 	add.w	r2, r7, #16
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fe45 	bl	8005a04 <lsm6dso_angular_rate_raw_get>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d84:	e03c      	b.n	8004e00 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004d86:	f107 030c 	add.w	r3, r7, #12
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff feed 	bl	8004b6c <LSM6DSO_GYRO_GetSensitivity>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d9c:	e030      	b.n	8004e00 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004d9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db6:	ee17 2a90 	vmov	r2, s15
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004dbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd6:	ee17 2a90 	vmov	r2, s15
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004dde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dea:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df6:	ee17 2a90 	vmov	r2, s15
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
 8004e14:	4613      	mov	r3, r2
 8004e16:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f103 0020 	add.w	r0, r3, #32
 8004e1e:	1cba      	adds	r2, r7, #2
 8004e20:	78f9      	ldrb	r1, [r7, #3]
 8004e22:	2301      	movs	r3, #1
 8004e24:	f000 fa90 	bl	8005348 <lsm6dso_write_reg>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e32:	e000      	b.n	8004e36 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004e4c:	edd7 7a00 	vldr	s15, [r7]
 8004e50:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004f50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5c:	d801      	bhi.n	8004e62 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004e5e:	230b      	movs	r3, #11
 8004e60:	e063      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e62:	edd7 7a00 	vldr	s15, [r7]
 8004e66:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e72:	d801      	bhi.n	8004e78 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e058      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e78:	edd7 7a00 	vldr	s15, [r7]
 8004e7c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	d801      	bhi.n	8004e8e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e04d      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e8e:	edd7 7a00 	vldr	s15, [r7]
 8004e92:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004f54 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9e:	d801      	bhi.n	8004ea4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e042      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ea4:	edd7 7a00 	vldr	s15, [r7]
 8004ea8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004f58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb4:	d801      	bhi.n	8004eba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e037      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004eba:	edd7 7a00 	vldr	s15, [r7]
 8004ebe:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004f5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	d801      	bhi.n	8004ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004ecc:	2305      	movs	r3, #5
 8004ece:	e02c      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ed0:	edd7 7a00 	vldr	s15, [r7]
 8004ed4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004f60 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee0:	d801      	bhi.n	8004ee6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	e021      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ee6:	edd7 7a00 	vldr	s15, [r7]
 8004eea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004f64 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef6:	d801      	bhi.n	8004efc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004ef8:	2307      	movs	r3, #7
 8004efa:	e016      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004efc:	edd7 7a00 	vldr	s15, [r7]
 8004f00:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f68 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	d801      	bhi.n	8004f12 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004f0e:	2308      	movs	r3, #8
 8004f10:	e00b      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004f12:	edd7 7a00 	vldr	s15, [r7]
 8004f16:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004f6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f22:	d801      	bhi.n	8004f28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004f24:	2309      	movs	r3, #9
 8004f26:	e000      	b.n	8004f2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004f28:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004f2a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3320      	adds	r3, #32
 8004f30:	7bfa      	ldrb	r2, [r7, #15]
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fa7d 	bl	8005434 <lsm6dso_xl_data_rate_set>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f44:	e000      	b.n	8004f48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	3fcccccd 	.word	0x3fcccccd
 8004f54:	42500000 	.word	0x42500000
 8004f58:	42d00000 	.word	0x42d00000
 8004f5c:	43500000 	.word	0x43500000
 8004f60:	43d08000 	.word	0x43d08000
 8004f64:	44504000 	.word	0x44504000
 8004f68:	44d06000 	.word	0x44d06000
 8004f6c:	45505000 	.word	0x45505000

08004f70 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004f7c:	edd7 7a00 	vldr	s15, [r7]
 8004f80:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005070 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8c:	d801      	bhi.n	8004f92 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004f8e:	230b      	movs	r3, #11
 8004f90:	e063      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f92:	edd7 7a00 	vldr	s15, [r7]
 8004f96:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	d801      	bhi.n	8004fa8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e058      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004fa8:	edd7 7a00 	vldr	s15, [r7]
 8004fac:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb8:	d801      	bhi.n	8004fbe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e04d      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004fbe:	edd7 7a00 	vldr	s15, [r7]
 8004fc2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005074 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	d801      	bhi.n	8004fd4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e042      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004fd4:	edd7 7a00 	vldr	s15, [r7]
 8004fd8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005078 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	d801      	bhi.n	8004fea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	e037      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004fea:	edd7 7a00 	vldr	s15, [r7]
 8004fee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800507c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffa:	d801      	bhi.n	8005000 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004ffc:	2305      	movs	r3, #5
 8004ffe:	e02c      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005000:	edd7 7a00 	vldr	s15, [r7]
 8005004:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005080 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	d801      	bhi.n	8005016 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005012:	2306      	movs	r3, #6
 8005014:	e021      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005016:	edd7 7a00 	vldr	s15, [r7]
 800501a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005084 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800501e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	d801      	bhi.n	800502c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005028:	2307      	movs	r3, #7
 800502a:	e016      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800502c:	edd7 7a00 	vldr	s15, [r7]
 8005030:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005088 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	d801      	bhi.n	8005042 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800503e:	2308      	movs	r3, #8
 8005040:	e00b      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005042:	edd7 7a00 	vldr	s15, [r7]
 8005046:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800508c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d801      	bhi.n	8005058 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005054:	2309      	movs	r3, #9
 8005056:	e000      	b.n	800505a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005058:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	3fcccccd 	.word	0x3fcccccd
 8005074:	42500000 	.word	0x42500000
 8005078:	42d00000 	.word	0x42d00000
 800507c:	43500000 	.word	0x43500000
 8005080:	43d08000 	.word	0x43d08000
 8005084:	44504000 	.word	0x44504000
 8005088:	44d06000 	.word	0x44d06000
 800508c:	45505000 	.word	0x45505000

08005090 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800509c:	edd7 7a00 	vldr	s15, [r7]
 80050a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80050a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ac:	d801      	bhi.n	80050b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e058      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050b2:	edd7 7a00 	vldr	s15, [r7]
 80050b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80050ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	d801      	bhi.n	80050c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e04d      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050c8:	edd7 7a00 	vldr	s15, [r7]
 80050cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800518c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80050d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	d801      	bhi.n	80050de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80050da:	2303      	movs	r3, #3
 80050dc:	e042      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050de:	edd7 7a00 	vldr	s15, [r7]
 80050e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005190 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80050e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	d801      	bhi.n	80050f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80050f0:	2304      	movs	r3, #4
 80050f2:	e037      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050f4:	edd7 7a00 	vldr	s15, [r7]
 80050f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005194 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80050fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005104:	d801      	bhi.n	800510a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005106:	2305      	movs	r3, #5
 8005108:	e02c      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800510a:	edd7 7a00 	vldr	s15, [r7]
 800510e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005198 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	d801      	bhi.n	8005120 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800511c:	2306      	movs	r3, #6
 800511e:	e021      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005120:	edd7 7a00 	vldr	s15, [r7]
 8005124:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800519c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800512c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005130:	d801      	bhi.n	8005136 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005132:	2307      	movs	r3, #7
 8005134:	e016      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005136:	edd7 7a00 	vldr	s15, [r7]
 800513a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80051a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800513e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005146:	d801      	bhi.n	800514c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005148:	2308      	movs	r3, #8
 800514a:	e00b      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800514c:	edd7 7a00 	vldr	s15, [r7]
 8005150:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80051a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	d801      	bhi.n	8005162 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800515e:	2309      	movs	r3, #9
 8005160:	e000      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005162:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005164:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3320      	adds	r3, #32
 800516a:	7bfa      	ldrb	r2, [r7, #15]
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fac4 	bl	80056fc <lsm6dso_gy_data_rate_set>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800517e:	e000      	b.n	8005182 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	42500000 	.word	0x42500000
 8005190:	42d00000 	.word	0x42d00000
 8005194:	43500000 	.word	0x43500000
 8005198:	43d08000 	.word	0x43d08000
 800519c:	44504000 	.word	0x44504000
 80051a0:	44d06000 	.word	0x44d06000
 80051a4:	45505000 	.word	0x45505000

080051a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80051b4:	edd7 7a00 	vldr	s15, [r7]
 80051b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80051bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c4:	d801      	bhi.n	80051ca <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e058      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051ca:	edd7 7a00 	vldr	s15, [r7]
 80051ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80051d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	d801      	bhi.n	80051e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80051dc:	2302      	movs	r3, #2
 80051de:	e04d      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051e0:	edd7 7a00 	vldr	s15, [r7]
 80051e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005290 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80051e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	d801      	bhi.n	80051f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80051f2:	2303      	movs	r3, #3
 80051f4:	e042      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051f6:	edd7 7a00 	vldr	s15, [r7]
 80051fa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005294 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80051fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005206:	d801      	bhi.n	800520c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005208:	2304      	movs	r3, #4
 800520a:	e037      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800520c:	edd7 7a00 	vldr	s15, [r7]
 8005210:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005298 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521c:	d801      	bhi.n	8005222 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800521e:	2305      	movs	r3, #5
 8005220:	e02c      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005222:	edd7 7a00 	vldr	s15, [r7]
 8005226:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800529c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800522a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005232:	d801      	bhi.n	8005238 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005234:	2306      	movs	r3, #6
 8005236:	e021      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005238:	edd7 7a00 	vldr	s15, [r7]
 800523c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80052a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005248:	d801      	bhi.n	800524e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800524a:	2307      	movs	r3, #7
 800524c:	e016      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800524e:	edd7 7a00 	vldr	s15, [r7]
 8005252:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80052a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525e:	d801      	bhi.n	8005264 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005260:	2308      	movs	r3, #8
 8005262:	e00b      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005264:	edd7 7a00 	vldr	s15, [r7]
 8005268:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80052a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800526c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	d801      	bhi.n	800527a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005276:	2309      	movs	r3, #9
 8005278:	e000      	b.n	800527c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800527a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	42500000 	.word	0x42500000
 8005294:	42d00000 	.word	0x42d00000
 8005298:	43500000 	.word	0x43500000
 800529c:	43d08000 	.word	0x43d08000
 80052a0:	44504000 	.word	0x44504000
 80052a4:	44d06000 	.word	0x44d06000
 80052a8:	45505000 	.word	0x45505000

080052ac <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	460b      	mov	r3, r1
 80052ba:	72fb      	strb	r3, [r7, #11]
 80052bc:	4613      	mov	r3, r2
 80052be:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	695c      	ldr	r4, [r3, #20]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	7b1b      	ldrb	r3, [r3, #12]
 80052cc:	b298      	uxth	r0, r3
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	b299      	uxth	r1, r3
 80052d2:	893b      	ldrh	r3, [r7, #8]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	47a0      	blx	r4
 80052d8:	4603      	mov	r3, r0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}

080052e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052e2:	b590      	push	{r4, r7, lr}
 80052e4:	b087      	sub	sp, #28
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	461a      	mov	r2, r3
 80052ee:	460b      	mov	r3, r1
 80052f0:	72fb      	strb	r3, [r7, #11]
 80052f2:	4613      	mov	r3, r2
 80052f4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	691c      	ldr	r4, [r3, #16]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	7b1b      	ldrb	r3, [r3, #12]
 8005302:	b298      	uxth	r0, r3
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	b299      	uxth	r1, r3
 8005308:	893b      	ldrh	r3, [r7, #8]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	47a0      	blx	r4
 800530e:	4603      	mov	r3, r0
}
 8005310:	4618      	mov	r0, r3
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd90      	pop	{r4, r7, pc}

08005318 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len) // __weak
{
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	461a      	mov	r2, r3
 8005324:	460b      	mov	r3, r1
 8005326:	72fb      	strb	r3, [r7, #11]
 8005328:	4613      	mov	r3, r2
 800532a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685c      	ldr	r4, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68d8      	ldr	r0, [r3, #12]
 8005334:	893b      	ldrh	r3, [r7, #8]
 8005336:	7af9      	ldrb	r1, [r7, #11]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	47a0      	blx	r4
 800533c:	6178      	str	r0, [r7, #20]

  return ret;
 800533e:	697b      	ldr	r3, [r7, #20]
}
 8005340:	4618      	mov	r0, r3
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len) // __weak
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	461a      	mov	r2, r3
 8005354:	460b      	mov	r3, r1
 8005356:	72fb      	strb	r3, [r7, #11]
 8005358:	4613      	mov	r3, r2
 800535a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681c      	ldr	r4, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68d8      	ldr	r0, [r3, #12]
 8005364:	893b      	ldrh	r3, [r7, #8]
 8005366:	7af9      	ldrb	r1, [r7, #11]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	47a0      	blx	r4
 800536c:	6178      	str	r0, [r7, #20]

  return ret;
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	bd90      	pop	{r4, r7, pc}

08005378 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005384:	f107 0208 	add.w	r2, r7, #8
 8005388:	2301      	movs	r3, #1
 800538a:	2110      	movs	r1, #16
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ffc3 	bl	8005318 <lsm6dso_read_reg>
 8005392:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10f      	bne.n	80053ba <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	7a3b      	ldrb	r3, [r7, #8]
 80053a4:	f362 0383 	bfi	r3, r2, #2, #2
 80053a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80053aa:	f107 0208 	add.w	r2, r7, #8
 80053ae:	2301      	movs	r3, #1
 80053b0:	2110      	movs	r1, #16
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ffc8 	bl	8005348 <lsm6dso_write_reg>
 80053b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80053ce:	f107 0208 	add.w	r2, r7, #8
 80053d2:	2301      	movs	r3, #1
 80053d4:	2110      	movs	r1, #16
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ff9e 	bl	8005318 <lsm6dso_read_reg>
 80053dc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80053de:	7a3b      	ldrb	r3, [r7, #8]
 80053e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d81a      	bhi.n	8005420 <lsm6dso_xl_full_scale_get+0x5c>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <lsm6dso_xl_full_scale_get+0x2c>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005401 	.word	0x08005401
 80053f4:	08005409 	.word	0x08005409
 80053f8:	08005411 	.word	0x08005411
 80053fc:	08005419 	.word	0x08005419
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
      break;
 8005406:	e00f      	b.n	8005428 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e00b      	b.n	8005428 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2202      	movs	r2, #2
 8005414:	701a      	strb	r2, [r3, #0]
      break;
 8005416:	e007      	b.n	8005428 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2203      	movs	r2, #3
 800541c:	701a      	strb	r2, [r3, #0]
      break;
 800541e:	e003      	b.n	8005428 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
      break;
 8005426:	bf00      	nop
  }

  return ret;
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop

08005434 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005444:	f107 030c 	add.w	r3, r7, #12
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fc28 	bl	8005ca0 <lsm6dso_fsm_enable_get>
 8005450:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f040 80c4 	bne.w	80055e2 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800545a:	7b3b      	ldrb	r3, [r7, #12]
 800545c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005462:	7b3b      	ldrb	r3, [r7, #12]
 8005464:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005468:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800546a:	4313      	orrs	r3, r2
 800546c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800546e:	7b3b      	ldrb	r3, [r7, #12]
 8005470:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005474:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005476:	4313      	orrs	r3, r2
 8005478:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800547a:	7b3b      	ldrb	r3, [r7, #12]
 800547c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005480:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005482:	4313      	orrs	r3, r2
 8005484:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005486:	7b3b      	ldrb	r3, [r7, #12]
 8005488:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800548c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800548e:	4313      	orrs	r3, r2
 8005490:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005492:	7b3b      	ldrb	r3, [r7, #12]
 8005494:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005498:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800549a:	4313      	orrs	r3, r2
 800549c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800549e:	7b3b      	ldrb	r3, [r7, #12]
 80054a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80054a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80054a6:	4313      	orrs	r3, r2
 80054a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80054aa:	7b3b      	ldrb	r3, [r7, #12]
 80054ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80054b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80054b2:	4313      	orrs	r3, r2
 80054b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80054b6:	7b7b      	ldrb	r3, [r7, #13]
 80054b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80054be:	4313      	orrs	r3, r2
 80054c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80054c2:	7b7b      	ldrb	r3, [r7, #13]
 80054c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80054ca:	4313      	orrs	r3, r2
 80054cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80054ce:	7b7b      	ldrb	r3, [r7, #13]
 80054d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80054d6:	4313      	orrs	r3, r2
 80054d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80054da:	7b7b      	ldrb	r3, [r7, #13]
 80054dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80054e6:	7b7b      	ldrb	r3, [r7, #13]
 80054e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80054f2:	7b7b      	ldrb	r3, [r7, #13]
 80054f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80054fe:	7b7b      	ldrb	r3, [r7, #13]
 8005500:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005504:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005506:	4313      	orrs	r3, r2
 8005508:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800550a:	7b7b      	ldrb	r3, [r7, #13]
 800550c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005510:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005512:	4313      	orrs	r3, r2
 8005514:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005516:	2b01      	cmp	r3, #1
 8005518:	d163      	bne.n	80055e2 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800551a:	f107 030b 	add.w	r3, r7, #11
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fbdf 	bl	8005ce4 <lsm6dso_fsm_data_rate_get>
 8005526:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d159      	bne.n	80055e2 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800552e:	7afb      	ldrb	r3, [r7, #11]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d853      	bhi.n	80055dc <lsm6dso_xl_data_rate_set+0x1a8>
 8005534:	a201      	add	r2, pc, #4	; (adr r2, 800553c <lsm6dso_xl_data_rate_set+0x108>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	0800554d 	.word	0x0800554d
 8005540:	0800555f 	.word	0x0800555f
 8005544:	0800557d 	.word	0x0800557d
 8005548:	080055a7 	.word	0x080055a7
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005556:	e045      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	75fb      	strb	r3, [r7, #23]
            break;
 800555c:	e042      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005564:	2302      	movs	r3, #2
 8005566:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005568:	e03c      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d102      	bne.n	8005576 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005570:	2302      	movs	r3, #2
 8005572:	75fb      	strb	r3, [r7, #23]
            break;
 8005574:	e036      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	75fb      	strb	r3, [r7, #23]
            break;
 800557a:	e033      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005582:	2303      	movs	r3, #3
 8005584:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005586:	e02d      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d102      	bne.n	8005594 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800558e:	2303      	movs	r3, #3
 8005590:	75fb      	strb	r3, [r7, #23]
            break;
 8005592:	e027      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d102      	bne.n	80055a0 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800559a:	2303      	movs	r3, #3
 800559c:	75fb      	strb	r3, [r7, #23]
            break;
 800559e:	e021      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	75fb      	strb	r3, [r7, #23]
            break;
 80055a4:	e01e      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80055ac:	2304      	movs	r3, #4
 80055ae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80055b0:	e018      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80055b8:	2304      	movs	r3, #4
 80055ba:	75fb      	strb	r3, [r7, #23]
            break;
 80055bc:	e012      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d102      	bne.n	80055ca <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80055c4:	2304      	movs	r3, #4
 80055c6:	75fb      	strb	r3, [r7, #23]
            break;
 80055c8:	e00c      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d102      	bne.n	80055d6 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80055d0:	2304      	movs	r3, #4
 80055d2:	75fb      	strb	r3, [r7, #23]
            break;
 80055d4:	e006      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	75fb      	strb	r3, [r7, #23]
            break;
 80055da:	e003      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	75fb      	strb	r3, [r7, #23]
            break;
 80055e0:	e000      	b.n	80055e4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80055e2:	bf00      	nop
    }
  }

  if (ret == 0)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d107      	bne.n	80055fa <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80055ea:	f107 0208 	add.w	r2, r7, #8
 80055ee:	2301      	movs	r3, #1
 80055f0:	2110      	movs	r1, #16
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff fe90 	bl	8005318 <lsm6dso_read_reg>
 80055f8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10f      	bne.n	8005620 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	b2da      	uxtb	r2, r3
 8005608:	7a3b      	ldrb	r3, [r7, #8]
 800560a:	f362 1307 	bfi	r3, r2, #4, #4
 800560e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005610:	f107 0208 	add.w	r2, r7, #8
 8005614:	2301      	movs	r3, #1
 8005616:	2110      	movs	r1, #16
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fe95 	bl	8005348 <lsm6dso_write_reg>
 800561e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005620:	693b      	ldr	r3, [r7, #16]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop

0800562c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005638:	f107 0208 	add.w	r2, r7, #8
 800563c:	2301      	movs	r3, #1
 800563e:	2111      	movs	r1, #17
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fe69 	bl	8005318 <lsm6dso_read_reg>
 8005646:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	b2da      	uxtb	r2, r3
 8005656:	7a3b      	ldrb	r3, [r7, #8]
 8005658:	f362 0343 	bfi	r3, r2, #1, #3
 800565c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800565e:	f107 0208 	add.w	r2, r7, #8
 8005662:	2301      	movs	r3, #1
 8005664:	2111      	movs	r1, #17
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fe6e 	bl	8005348 <lsm6dso_write_reg>
 800566c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800566e:	68fb      	ldr	r3, [r7, #12]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005682:	f107 0208 	add.w	r2, r7, #8
 8005686:	2301      	movs	r3, #1
 8005688:	2111      	movs	r1, #17
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fe44 	bl	8005318 <lsm6dso_read_reg>
 8005690:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8005692:	7a3b      	ldrb	r3, [r7, #8]
 8005694:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b06      	cmp	r3, #6
 800569c:	d824      	bhi.n	80056e8 <lsm6dso_gy_full_scale_get+0x70>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <lsm6dso_gy_full_scale_get+0x2c>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056c9 	.word	0x080056c9
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056e9 	.word	0x080056e9
 80056b4:	080056d9 	.word	0x080056d9
 80056b8:	080056e9 	.word	0x080056e9
 80056bc:	080056e1 	.word	0x080056e1
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
      break;
 80056c6:	e013      	b.n	80056f0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
      break;
 80056ce:	e00f      	b.n	80056f0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	701a      	strb	r2, [r3, #0]
      break;
 80056d6:	e00b      	b.n	80056f0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2204      	movs	r2, #4
 80056dc:	701a      	strb	r2, [r3, #0]
      break;
 80056de:	e007      	b.n	80056f0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2206      	movs	r2, #6
 80056e4:	701a      	strb	r2, [r3, #0]
      break;
 80056e6:	e003      	b.n	80056f0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
      break;
 80056ee:	bf00      	nop
  }

  return ret;
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop

080056fc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800570c:	f107 030c 	add.w	r3, r7, #12
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fac4 	bl	8005ca0 <lsm6dso_fsm_enable_get>
 8005718:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f040 80c4 	bne.w	80058aa <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005722:	7b3b      	ldrb	r3, [r7, #12]
 8005724:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005728:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800572a:	7b3b      	ldrb	r3, [r7, #12]
 800572c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005730:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005732:	4313      	orrs	r3, r2
 8005734:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005736:	7b3b      	ldrb	r3, [r7, #12]
 8005738:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800573c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800573e:	4313      	orrs	r3, r2
 8005740:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005742:	7b3b      	ldrb	r3, [r7, #12]
 8005744:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005748:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800574a:	4313      	orrs	r3, r2
 800574c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800574e:	7b3b      	ldrb	r3, [r7, #12]
 8005750:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005754:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005756:	4313      	orrs	r3, r2
 8005758:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800575a:	7b3b      	ldrb	r3, [r7, #12]
 800575c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005760:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005762:	4313      	orrs	r3, r2
 8005764:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005766:	7b3b      	ldrb	r3, [r7, #12]
 8005768:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800576c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800576e:	4313      	orrs	r3, r2
 8005770:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005772:	7b3b      	ldrb	r3, [r7, #12]
 8005774:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005778:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800577a:	4313      	orrs	r3, r2
 800577c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800577e:	7b7b      	ldrb	r3, [r7, #13]
 8005780:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005784:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005786:	4313      	orrs	r3, r2
 8005788:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800578a:	7b7b      	ldrb	r3, [r7, #13]
 800578c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005790:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005792:	4313      	orrs	r3, r2
 8005794:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005796:	7b7b      	ldrb	r3, [r7, #13]
 8005798:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800579c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800579e:	4313      	orrs	r3, r2
 80057a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80057a2:	7b7b      	ldrb	r3, [r7, #13]
 80057a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80057aa:	4313      	orrs	r3, r2
 80057ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80057ae:	7b7b      	ldrb	r3, [r7, #13]
 80057b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80057b6:	4313      	orrs	r3, r2
 80057b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80057ba:	7b7b      	ldrb	r3, [r7, #13]
 80057bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80057c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80057c6:	7b7b      	ldrb	r3, [r7, #13]
 80057c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80057cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80057ce:	4313      	orrs	r3, r2
 80057d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80057d2:	7b7b      	ldrb	r3, [r7, #13]
 80057d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80057da:	4313      	orrs	r3, r2
 80057dc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d163      	bne.n	80058aa <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80057e2:	f107 030b 	add.w	r3, r7, #11
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa7b 	bl	8005ce4 <lsm6dso_fsm_data_rate_get>
 80057ee:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d159      	bne.n	80058aa <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d853      	bhi.n	80058a4 <lsm6dso_gy_data_rate_set+0x1a8>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <lsm6dso_gy_data_rate_set+0x108>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005815 	.word	0x08005815
 8005808:	08005827 	.word	0x08005827
 800580c:	08005845 	.word	0x08005845
 8005810:	0800586f 	.word	0x0800586f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800581e:	e045      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	75fb      	strb	r3, [r7, #23]
            break;
 8005824:	e042      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 800582c:	2302      	movs	r3, #2
 800582e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005830:	e03c      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d102      	bne.n	800583e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005838:	2302      	movs	r3, #2
 800583a:	75fb      	strb	r3, [r7, #23]
            break;
 800583c:	e036      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	75fb      	strb	r3, [r7, #23]
            break;
 8005842:	e033      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800584a:	2303      	movs	r3, #3
 800584c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800584e:	e02d      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d102      	bne.n	800585c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005856:	2303      	movs	r3, #3
 8005858:	75fb      	strb	r3, [r7, #23]
            break;
 800585a:	e027      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d102      	bne.n	8005868 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005862:	2303      	movs	r3, #3
 8005864:	75fb      	strb	r3, [r7, #23]
            break;
 8005866:	e021      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	75fb      	strb	r3, [r7, #23]
            break;
 800586c:	e01e      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005874:	2304      	movs	r3, #4
 8005876:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005878:	e018      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d102      	bne.n	8005886 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005880:	2304      	movs	r3, #4
 8005882:	75fb      	strb	r3, [r7, #23]
            break;
 8005884:	e012      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d102      	bne.n	8005892 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800588c:	2304      	movs	r3, #4
 800588e:	75fb      	strb	r3, [r7, #23]
            break;
 8005890:	e00c      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d102      	bne.n	800589e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005898:	2304      	movs	r3, #4
 800589a:	75fb      	strb	r3, [r7, #23]
            break;
 800589c:	e006      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	75fb      	strb	r3, [r7, #23]
            break;
 80058a2:	e003      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	75fb      	strb	r3, [r7, #23]
            break;
 80058a8:	e000      	b.n	80058ac <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80058aa:	bf00      	nop
    }
  }

  if (ret == 0)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058b2:	f107 0208 	add.w	r2, r7, #8
 80058b6:	2301      	movs	r3, #1
 80058b8:	2111      	movs	r1, #17
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fd2c 	bl	8005318 <lsm6dso_read_reg>
 80058c0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	7a3b      	ldrb	r3, [r7, #8]
 80058d2:	f362 1307 	bfi	r3, r2, #4, #4
 80058d6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058d8:	f107 0208 	add.w	r2, r7, #8
 80058dc:	2301      	movs	r3, #1
 80058de:	2111      	movs	r1, #17
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fd31 	bl	8005348 <lsm6dso_write_reg>
 80058e6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80058e8:	693b      	ldr	r3, [r7, #16]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop

080058f4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058fe:	f107 0208 	add.w	r2, r7, #8
 8005902:	2301      	movs	r3, #1
 8005904:	2111      	movs	r1, #17
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fd06 	bl	8005318 <lsm6dso_read_reg>
 800590c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800590e:	7a3b      	ldrb	r3, [r7, #8]
 8005910:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b0a      	cmp	r3, #10
 8005918:	d844      	bhi.n	80059a4 <lsm6dso_gy_data_rate_get+0xb0>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <lsm6dso_gy_data_rate_get+0x2c>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	0800594d 	.word	0x0800594d
 8005924:	08005955 	.word	0x08005955
 8005928:	0800595d 	.word	0x0800595d
 800592c:	08005965 	.word	0x08005965
 8005930:	0800596d 	.word	0x0800596d
 8005934:	08005975 	.word	0x08005975
 8005938:	0800597d 	.word	0x0800597d
 800593c:	08005985 	.word	0x08005985
 8005940:	0800598d 	.word	0x0800598d
 8005944:	08005995 	.word	0x08005995
 8005948:	0800599d 	.word	0x0800599d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e02b      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
      break;
 800595a:	e027      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	e023      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2203      	movs	r2, #3
 8005968:	701a      	strb	r2, [r3, #0]
      break;
 800596a:	e01f      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2204      	movs	r2, #4
 8005970:	701a      	strb	r2, [r3, #0]
      break;
 8005972:	e01b      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2205      	movs	r2, #5
 8005978:	701a      	strb	r2, [r3, #0]
      break;
 800597a:	e017      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2206      	movs	r2, #6
 8005980:	701a      	strb	r2, [r3, #0]
      break;
 8005982:	e013      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2207      	movs	r2, #7
 8005988:	701a      	strb	r2, [r3, #0]
      break;
 800598a:	e00f      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2208      	movs	r2, #8
 8005990:	701a      	strb	r2, [r3, #0]
      break;
 8005992:	e00b      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2209      	movs	r2, #9
 8005998:	701a      	strb	r2, [r3, #0]
      break;
 800599a:	e007      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	220a      	movs	r2, #10
 80059a0:	701a      	strb	r2, [r3, #0]
      break;
 80059a2:	e003      	b.n	80059ac <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
      break;
 80059aa:	bf00      	nop
  }

  return ret;
 80059ac:	68fb      	ldr	r3, [r7, #12]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop

080059b8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80059c4:	f107 0208 	add.w	r2, r7, #8
 80059c8:	2301      	movs	r3, #1
 80059ca:	2112      	movs	r1, #18
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff fca3 	bl	8005318 <lsm6dso_read_reg>
 80059d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10f      	bne.n	80059fa <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	7a3b      	ldrb	r3, [r7, #8]
 80059e4:	f362 1386 	bfi	r3, r2, #6, #1
 80059e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80059ea:	f107 0208 	add.w	r2, r7, #8
 80059ee:	2301      	movs	r3, #1
 80059f0:	2112      	movs	r1, #18
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fca8 	bl	8005348 <lsm6dso_write_reg>
 80059f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059fa:	68fb      	ldr	r3, [r7, #12]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005a0e:	f107 020c 	add.w	r2, r7, #12
 8005a12:	2306      	movs	r3, #6
 8005a14:	2122      	movs	r1, #34	; 0x22
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fc7e 	bl	8005318 <lsm6dso_read_reg>
 8005a1c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005a1e:	7b7b      	ldrb	r3, [r7, #13]
 8005a20:	b21a      	sxth	r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	7b3b      	ldrb	r3, [r7, #12]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4413      	add	r3, r2
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	b21a      	sxth	r2, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005a40:	7bfa      	ldrb	r2, [r7, #15]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	3302      	adds	r3, #2
 8005a46:	b212      	sxth	r2, r2
 8005a48:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	3302      	adds	r3, #2
 8005a64:	b212      	sxth	r2, r2
 8005a66:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005a68:	7c7a      	ldrb	r2, [r7, #17]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	b212      	sxth	r2, r2
 8005a70:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	3304      	adds	r3, #4
 8005a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	7c3b      	ldrb	r3, [r7, #16]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	b212      	sxth	r2, r2
 8005a8e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005aa4:	f107 020c 	add.w	r2, r7, #12
 8005aa8:	2306      	movs	r3, #6
 8005aaa:	2128      	movs	r1, #40	; 0x28
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff fc33 	bl	8005318 <lsm6dso_read_reg>
 8005ab2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005ab4:	7b7b      	ldrb	r3, [r7, #13]
 8005ab6:	b21a      	sxth	r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	7b3b      	ldrb	r3, [r7, #12]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	b21a      	sxth	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005ad6:	7bfa      	ldrb	r2, [r7, #15]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	3302      	adds	r3, #2
 8005adc:	b212      	sxth	r2, r2
 8005ade:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	7bbb      	ldrb	r3, [r7, #14]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	3302      	adds	r3, #2
 8005afa:	b212      	sxth	r2, r2
 8005afc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005afe:	7c7a      	ldrb	r2, [r7, #17]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	3304      	adds	r3, #4
 8005b04:	b212      	sxth	r2, r2
 8005b06:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	7c3b      	ldrb	r3, [r7, #16]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	b212      	sxth	r2, r2
 8005b24:	801a      	strh	r2, [r3, #0]

  return ret;
 8005b26:	697b      	ldr	r3, [r7, #20]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005b3c:	f107 0208 	add.w	r2, r7, #8
 8005b40:	2301      	movs	r3, #1
 8005b42:	2101      	movs	r1, #1
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff fbe7 	bl	8005318 <lsm6dso_read_reg>
 8005b4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	7a3b      	ldrb	r3, [r7, #8]
 8005b5c:	f362 1387 	bfi	r3, r2, #6, #2
 8005b60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005b62:	f107 0208 	add.w	r2, r7, #8
 8005b66:	2301      	movs	r3, #1
 8005b68:	2101      	movs	r1, #1
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fbec 	bl	8005348 <lsm6dso_write_reg>
 8005b70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005b88:	f107 0208 	add.w	r2, r7, #8
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	2112      	movs	r1, #18
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff fbc1 	bl	8005318 <lsm6dso_read_reg>
 8005b96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10f      	bne.n	8005bbe <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	7a3b      	ldrb	r3, [r7, #8]
 8005ba8:	f362 0382 	bfi	r3, r2, #2, #1
 8005bac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005bae:	f107 0208 	add.w	r2, r7, #8
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	2112      	movs	r1, #18
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fbc6 	bl	8005348 <lsm6dso_write_reg>
 8005bbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005bd4:	f107 020c 	add.w	r2, r7, #12
 8005bd8:	2301      	movs	r3, #1
 8005bda:	2118      	movs	r1, #24
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fb9b 	bl	8005318 <lsm6dso_read_reg>
 8005be2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d111      	bne.n	8005c0e <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	09db      	lsrs	r3, r3, #7
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	7b3b      	ldrb	r3, [r7, #12]
 8005bf8:	f362 0341 	bfi	r3, r2, #1, #1
 8005bfc:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005bfe:	f107 020c 	add.w	r2, r7, #12
 8005c02:	2301      	movs	r3, #1
 8005c04:	2118      	movs	r1, #24
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fb9e 	bl	8005348 <lsm6dso_write_reg>
 8005c0c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d107      	bne.n	8005c24 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005c14:	f107 0210 	add.w	r2, r7, #16
 8005c18:	2301      	movs	r3, #1
 8005c1a:	2162      	movs	r1, #98	; 0x62
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fb7b 	bl	8005318 <lsm6dso_read_reg>
 8005c22:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	7c3b      	ldrb	r3, [r7, #16]
 8005c34:	f362 03c4 	bfi	r3, r2, #3, #2
 8005c38:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005c3a:	f107 0210 	add.w	r2, r7, #16
 8005c3e:	2301      	movs	r3, #1
 8005c40:	2162      	movs	r1, #98	; 0x62
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fb80 	bl	8005348 <lsm6dso_write_reg>
 8005c48:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005c4a:	697b      	ldr	r3, [r7, #20]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005c60:	f107 0208 	add.w	r2, r7, #8
 8005c64:	2301      	movs	r3, #1
 8005c66:	210a      	movs	r1, #10
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fb55 	bl	8005318 <lsm6dso_read_reg>
 8005c6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	7a3b      	ldrb	r3, [r7, #8]
 8005c80:	f362 0302 	bfi	r3, r2, #0, #3
 8005c84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005c86:	f107 0208 	add.w	r2, r7, #8
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	210a      	movs	r1, #10
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fb5a 	bl	8005348 <lsm6dso_write_reg>
 8005c94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005caa:	2102      	movs	r1, #2
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ff3f 	bl	8005b30 <lsm6dso_mem_bank_set>
 8005cb2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005cba:	2302      	movs	r3, #2
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	2146      	movs	r1, #70	; 0x46
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fb29 	bl	8005318 <lsm6dso_read_reg>
 8005cc6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff2d 	bl	8005b30 <lsm6dso_mem_bank_set>
 8005cd6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005cee:	2102      	movs	r1, #2
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff1d 	bl	8005b30 <lsm6dso_mem_bank_set>
 8005cf6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8005cfe:	f107 0208 	add.w	r2, r7, #8
 8005d02:	2301      	movs	r3, #1
 8005d04:	215f      	movs	r1, #95	; 0x5f
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fb06 	bl	8005318 <lsm6dso_read_reg>
 8005d0c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d12a      	bne.n	8005d6a <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8005d14:	7a3b      	ldrb	r3, [r7, #8]
 8005d16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d81b      	bhi.n	8005d58 <lsm6dso_fsm_data_rate_get+0x74>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <lsm6dso_fsm_data_rate_get+0x44>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d41 	.word	0x08005d41
 8005d30:	08005d49 	.word	0x08005d49
 8005d34:	08005d51 	.word	0x08005d51
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
        break;
 8005d3e:	e00f      	b.n	8005d60 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
        break;
 8005d46:	e00b      	b.n	8005d60 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	701a      	strb	r2, [r3, #0]
        break;
 8005d4e:	e007      	b.n	8005d60 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2203      	movs	r2, #3
 8005d54:	701a      	strb	r2, [r3, #0]
        break;
 8005d56:	e003      	b.n	8005d60 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
        break;
 8005d5e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005d60:	2100      	movs	r1, #0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fee4 	bl	8005b30 <lsm6dso_mem_bank_set>
 8005d68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d7e:	2003      	movs	r0, #3
 8005d80:	f000 f960 	bl	8006044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d84:	200f      	movs	r0, #15
 8005d86:	f000 f80d 	bl	8005da4 <HAL_InitTick>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	71fb      	strb	r3, [r7, #7]
 8005d94:	e001      	b.n	8005d9a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d96:	f7fe f82b 	bl	8003df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <HAL_InitTick+0x6c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d023      	beq.n	8005e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005db8:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <HAL_InitTick+0x70>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <HAL_InitTick+0x6c>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f96d 	bl	80060ae <HAL_SYSTICK_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d809      	bhi.n	8005df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005de0:	2200      	movs	r2, #0
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005de8:	f000 f937 	bl	800605a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dec:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <HAL_InitTick+0x74>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e007      	b.n	8005e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e004      	b.n	8005e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	73fb      	strb	r3, [r7, #15]
 8005dfe:	e001      	b.n	8005e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000000c 	.word	0x2000000c
 8005e14:	20000004 	.word	0x20000004
 8005e18:	20000008 	.word	0x20000008

08005e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_IncTick+0x20>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_IncTick+0x24>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <HAL_IncTick+0x24>)
 8005e2e:	6013      	str	r3, [r2, #0]
}
 8005e30:	bf00      	nop
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	2000000c 	.word	0x2000000c
 8005e40:	20000ec0 	.word	0x20000ec0

08005e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return uwTick;
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <HAL_GetTick+0x14>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20000ec0 	.word	0x20000ec0

08005e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e64:	f7ff ffee 	bl	8005e44 <HAL_GetTick>
 8005e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e74:	d005      	beq.n	8005e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <HAL_Delay+0x44>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e82:	bf00      	nop
 8005e84:	f7ff ffde 	bl	8005e44 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d8f7      	bhi.n	8005e84 <HAL_Delay+0x28>
  {
  }
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	2000000c 	.word	0x2000000c

08005ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ed6:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	60d3      	str	r3, [r2, #12]
}
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000ed00 	.word	0xe000ed00

08005eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <__NVIC_GetPriorityGrouping+0x18>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	f003 0307 	and.w	r3, r3, #7
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	e000ed00 	.word	0xe000ed00

08005f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	db0b      	blt.n	8005f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	f003 021f 	and.w	r2, r3, #31
 8005f20:	4907      	ldr	r1, [pc, #28]	; (8005f40 <__NVIC_EnableIRQ+0x38>)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	2001      	movs	r0, #1
 8005f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000e100 	.word	0xe000e100

08005f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	db0a      	blt.n	8005f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	490c      	ldr	r1, [pc, #48]	; (8005f90 <__NVIC_SetPriority+0x4c>)
 8005f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f62:	0112      	lsls	r2, r2, #4
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	440b      	add	r3, r1
 8005f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f6c:	e00a      	b.n	8005f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	4908      	ldr	r1, [pc, #32]	; (8005f94 <__NVIC_SetPriority+0x50>)
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	3b04      	subs	r3, #4
 8005f7c:	0112      	lsls	r2, r2, #4
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	440b      	add	r3, r1
 8005f82:	761a      	strb	r2, [r3, #24]
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	e000e100 	.word	0xe000e100
 8005f94:	e000ed00 	.word	0xe000ed00

08005f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f1c3 0307 	rsb	r3, r3, #7
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	bf28      	it	cs
 8005fb6:	2304      	movcs	r3, #4
 8005fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d902      	bls.n	8005fc8 <NVIC_EncodePriority+0x30>
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3b03      	subs	r3, #3
 8005fc6:	e000      	b.n	8005fca <NVIC_EncodePriority+0x32>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	401a      	ands	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fea:	43d9      	mvns	r1, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff0:	4313      	orrs	r3, r2
         );
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3724      	adds	r7, #36	; 0x24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3b01      	subs	r3, #1
 800600c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006010:	d301      	bcc.n	8006016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006012:	2301      	movs	r3, #1
 8006014:	e00f      	b.n	8006036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006016:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <SysTick_Config+0x40>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3b01      	subs	r3, #1
 800601c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800601e:	210f      	movs	r1, #15
 8006020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006024:	f7ff ff8e 	bl	8005f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <SysTick_Config+0x40>)
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800602e:	4b04      	ldr	r3, [pc, #16]	; (8006040 <SysTick_Config+0x40>)
 8006030:	2207      	movs	r2, #7
 8006032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	e000e010 	.word	0xe000e010

08006044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff ff29 	bl	8005ea4 <__NVIC_SetPriorityGrouping>
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b086      	sub	sp, #24
 800605e:	af00      	add	r7, sp, #0
 8006060:	4603      	mov	r3, r0
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	607a      	str	r2, [r7, #4]
 8006066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800606c:	f7ff ff3e 	bl	8005eec <__NVIC_GetPriorityGrouping>
 8006070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	6978      	ldr	r0, [r7, #20]
 8006078:	f7ff ff8e 	bl	8005f98 <NVIC_EncodePriority>
 800607c:	4602      	mov	r2, r0
 800607e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006082:	4611      	mov	r1, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff ff5d 	bl	8005f44 <__NVIC_SetPriority>
}
 800608a:	bf00      	nop
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	4603      	mov	r3, r0
 800609a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800609c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff ff31 	bl	8005f08 <__NVIC_EnableIRQ>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ffa2 	bl	8006000 <SysTick_Config>
 80060bc:	4603      	mov	r3, r0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d008      	beq.n	80060f0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2204      	movs	r2, #4
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e040      	b.n	8006172 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 020e 	bic.w	r2, r2, #14
 80060fe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800610e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	f003 021c 	and.w	r2, r3, #28
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	2101      	movs	r1, #1
 800612e:	fa01 f202 	lsl.w	r2, r1, r2
 8006132:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800613c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00c      	beq.n	8006160 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006154:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800615e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d005      	beq.n	80061a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2204      	movs	r2, #4
 800619a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
 80061a0:	e047      	b.n	8006232 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 020e 	bic.w	r2, r2, #14
 80061b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	f003 021c 	and.w	r2, r3, #28
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	2101      	movs	r1, #1
 80061e0:	fa01 f202 	lsl.w	r2, r1, r2
 80061e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061ee:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00c      	beq.n	8006212 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006206:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006210:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
    }
  }
  return status;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800624a:	e166      	b.n	800651a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	2101      	movs	r1, #1
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	4013      	ands	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8158 	beq.w	8006514 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d005      	beq.n	800627c <HAL_GPIO_Init+0x40>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d130      	bne.n	80062de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	2203      	movs	r2, #3
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	43db      	mvns	r3, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4013      	ands	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062b2:	2201      	movs	r2, #1
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	43db      	mvns	r3, r3
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4013      	ands	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 0201 	and.w	r2, r3, #1
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d017      	beq.n	800631a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	2203      	movs	r2, #3
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4013      	ands	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d123      	bne.n	800636e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	08da      	lsrs	r2, r3, #3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3208      	adds	r2, #8
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	220f      	movs	r2, #15
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	43db      	mvns	r3, r3
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4013      	ands	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691a      	ldr	r2, [r3, #16]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	fa02 f303 	lsl.w	r3, r2, r3
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	08da      	lsrs	r2, r3, #3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3208      	adds	r2, #8
 8006368:	6939      	ldr	r1, [r7, #16]
 800636a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	2203      	movs	r2, #3
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4013      	ands	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f003 0203 	and.w	r2, r3, #3
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80b2 	beq.w	8006514 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <HAL_GPIO_Init+0x2fc>)
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	4a60      	ldr	r2, [pc, #384]	; (8006538 <HAL_GPIO_Init+0x2fc>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	6613      	str	r3, [r2, #96]	; 0x60
 80063bc:	4b5e      	ldr	r3, [pc, #376]	; (8006538 <HAL_GPIO_Init+0x2fc>)
 80063be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80063c8:	4a5c      	ldr	r2, [pc, #368]	; (800653c <HAL_GPIO_Init+0x300>)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	089b      	lsrs	r3, r3, #2
 80063ce:	3302      	adds	r3, #2
 80063d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	220f      	movs	r2, #15
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	43db      	mvns	r3, r3
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4013      	ands	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80063f2:	d02b      	beq.n	800644c <HAL_GPIO_Init+0x210>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a52      	ldr	r2, [pc, #328]	; (8006540 <HAL_GPIO_Init+0x304>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d025      	beq.n	8006448 <HAL_GPIO_Init+0x20c>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a51      	ldr	r2, [pc, #324]	; (8006544 <HAL_GPIO_Init+0x308>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01f      	beq.n	8006444 <HAL_GPIO_Init+0x208>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a50      	ldr	r2, [pc, #320]	; (8006548 <HAL_GPIO_Init+0x30c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d019      	beq.n	8006440 <HAL_GPIO_Init+0x204>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a4f      	ldr	r2, [pc, #316]	; (800654c <HAL_GPIO_Init+0x310>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_GPIO_Init+0x200>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a4e      	ldr	r2, [pc, #312]	; (8006550 <HAL_GPIO_Init+0x314>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00d      	beq.n	8006438 <HAL_GPIO_Init+0x1fc>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a4d      	ldr	r2, [pc, #308]	; (8006554 <HAL_GPIO_Init+0x318>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <HAL_GPIO_Init+0x1f8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a4c      	ldr	r2, [pc, #304]	; (8006558 <HAL_GPIO_Init+0x31c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <HAL_GPIO_Init+0x1f4>
 800642c:	2307      	movs	r3, #7
 800642e:	e00e      	b.n	800644e <HAL_GPIO_Init+0x212>
 8006430:	2308      	movs	r3, #8
 8006432:	e00c      	b.n	800644e <HAL_GPIO_Init+0x212>
 8006434:	2306      	movs	r3, #6
 8006436:	e00a      	b.n	800644e <HAL_GPIO_Init+0x212>
 8006438:	2305      	movs	r3, #5
 800643a:	e008      	b.n	800644e <HAL_GPIO_Init+0x212>
 800643c:	2304      	movs	r3, #4
 800643e:	e006      	b.n	800644e <HAL_GPIO_Init+0x212>
 8006440:	2303      	movs	r3, #3
 8006442:	e004      	b.n	800644e <HAL_GPIO_Init+0x212>
 8006444:	2302      	movs	r3, #2
 8006446:	e002      	b.n	800644e <HAL_GPIO_Init+0x212>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <HAL_GPIO_Init+0x212>
 800644c:	2300      	movs	r3, #0
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	f002 0203 	and.w	r2, r2, #3
 8006454:	0092      	lsls	r2, r2, #2
 8006456:	4093      	lsls	r3, r2
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800645e:	4937      	ldr	r1, [pc, #220]	; (800653c <HAL_GPIO_Init+0x300>)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	3302      	adds	r3, #2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800646c:	4b3b      	ldr	r3, [pc, #236]	; (800655c <HAL_GPIO_Init+0x320>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	43db      	mvns	r3, r3
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4013      	ands	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006490:	4a32      	ldr	r2, [pc, #200]	; (800655c <HAL_GPIO_Init+0x320>)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006496:	4b31      	ldr	r3, [pc, #196]	; (800655c <HAL_GPIO_Init+0x320>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	43db      	mvns	r3, r3
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4013      	ands	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80064ba:	4a28      	ldr	r2, [pc, #160]	; (800655c <HAL_GPIO_Init+0x320>)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80064c0:	4b26      	ldr	r3, [pc, #152]	; (800655c <HAL_GPIO_Init+0x320>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4013      	ands	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80064e4:	4a1d      	ldr	r2, [pc, #116]	; (800655c <HAL_GPIO_Init+0x320>)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80064ea:	4b1c      	ldr	r3, [pc, #112]	; (800655c <HAL_GPIO_Init+0x320>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	43db      	mvns	r3, r3
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4013      	ands	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <HAL_GPIO_Init+0x320>)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	3301      	adds	r3, #1
 8006518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	f47f ae91 	bne.w	800624c <HAL_GPIO_Init+0x10>
  }
}
 800652a:	bf00      	nop
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40021000 	.word	0x40021000
 800653c:	40010000 	.word	0x40010000
 8006540:	48000400 	.word	0x48000400
 8006544:	48000800 	.word	0x48000800
 8006548:	48000c00 	.word	0x48000c00
 800654c:	48001000 	.word	0x48001000
 8006550:	48001400 	.word	0x48001400
 8006554:	48001800 	.word	0x48001800
 8006558:	48001c00 	.word	0x48001c00
 800655c:	40010400 	.word	0x40010400

08006560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800656e:	e0c9      	b.n	8006704 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006570:	2201      	movs	r2, #1
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80bc 	beq.w	80066fe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006586:	4a66      	ldr	r2, [pc, #408]	; (8006720 <HAL_GPIO_DeInit+0x1c0>)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	089b      	lsrs	r3, r3, #2
 800658c:	3302      	adds	r3, #2
 800658e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006592:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	220f      	movs	r2, #15
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065ae:	d02b      	beq.n	8006608 <HAL_GPIO_DeInit+0xa8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a5c      	ldr	r2, [pc, #368]	; (8006724 <HAL_GPIO_DeInit+0x1c4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d025      	beq.n	8006604 <HAL_GPIO_DeInit+0xa4>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a5b      	ldr	r2, [pc, #364]	; (8006728 <HAL_GPIO_DeInit+0x1c8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d01f      	beq.n	8006600 <HAL_GPIO_DeInit+0xa0>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a5a      	ldr	r2, [pc, #360]	; (800672c <HAL_GPIO_DeInit+0x1cc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d019      	beq.n	80065fc <HAL_GPIO_DeInit+0x9c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a59      	ldr	r2, [pc, #356]	; (8006730 <HAL_GPIO_DeInit+0x1d0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <HAL_GPIO_DeInit+0x98>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a58      	ldr	r2, [pc, #352]	; (8006734 <HAL_GPIO_DeInit+0x1d4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00d      	beq.n	80065f4 <HAL_GPIO_DeInit+0x94>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a57      	ldr	r2, [pc, #348]	; (8006738 <HAL_GPIO_DeInit+0x1d8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <HAL_GPIO_DeInit+0x90>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a56      	ldr	r2, [pc, #344]	; (800673c <HAL_GPIO_DeInit+0x1dc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d101      	bne.n	80065ec <HAL_GPIO_DeInit+0x8c>
 80065e8:	2307      	movs	r3, #7
 80065ea:	e00e      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 80065ec:	2308      	movs	r3, #8
 80065ee:	e00c      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 80065f0:	2306      	movs	r3, #6
 80065f2:	e00a      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 80065f4:	2305      	movs	r3, #5
 80065f6:	e008      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 80065f8:	2304      	movs	r3, #4
 80065fa:	e006      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 80065fc:	2303      	movs	r3, #3
 80065fe:	e004      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 8006600:	2302      	movs	r3, #2
 8006602:	e002      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 8006604:	2301      	movs	r3, #1
 8006606:	e000      	b.n	800660a <HAL_GPIO_DeInit+0xaa>
 8006608:	2300      	movs	r3, #0
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	f002 0203 	and.w	r2, r2, #3
 8006610:	0092      	lsls	r2, r2, #2
 8006612:	4093      	lsls	r3, r2
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	429a      	cmp	r2, r3
 8006618:	d132      	bne.n	8006680 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800661a:	4b49      	ldr	r3, [pc, #292]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	43db      	mvns	r3, r3
 8006622:	4947      	ldr	r1, [pc, #284]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 8006624:	4013      	ands	r3, r2
 8006626:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006628:	4b45      	ldr	r3, [pc, #276]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	43db      	mvns	r3, r3
 8006630:	4943      	ldr	r1, [pc, #268]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 8006632:	4013      	ands	r3, r2
 8006634:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006636:	4b42      	ldr	r3, [pc, #264]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	43db      	mvns	r3, r3
 800663e:	4940      	ldr	r1, [pc, #256]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 8006640:	4013      	ands	r3, r2
 8006642:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006644:	4b3e      	ldr	r3, [pc, #248]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	43db      	mvns	r3, r3
 800664c:	493c      	ldr	r1, [pc, #240]	; (8006740 <HAL_GPIO_DeInit+0x1e0>)
 800664e:	4013      	ands	r3, r2
 8006650:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	220f      	movs	r2, #15
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006662:	4a2f      	ldr	r2, [pc, #188]	; (8006720 <HAL_GPIO_DeInit+0x1c0>)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	089b      	lsrs	r3, r3, #2
 8006668:	3302      	adds	r3, #2
 800666a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	43da      	mvns	r2, r3
 8006672:	482b      	ldr	r0, [pc, #172]	; (8006720 <HAL_GPIO_DeInit+0x1c0>)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	400a      	ands	r2, r1
 800667a:	3302      	adds	r3, #2
 800667c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	2103      	movs	r1, #3
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	08da      	lsrs	r2, r3, #3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3208      	adds	r2, #8
 800669c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	220f      	movs	r2, #15
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	08d2      	lsrs	r2, r2, #3
 80066b4:	4019      	ands	r1, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3208      	adds	r2, #8
 80066ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	2103      	movs	r1, #3
 80066c8:	fa01 f303 	lsl.w	r3, r1, r3
 80066cc:	43db      	mvns	r3, r3
 80066ce:	401a      	ands	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	2101      	movs	r1, #1
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	2103      	movs	r1, #3
 80066f2:	fa01 f303 	lsl.w	r3, r1, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	401a      	ands	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	3301      	adds	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f af2f 	bne.w	8006570 <HAL_GPIO_DeInit+0x10>
  }
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	40010000 	.word	0x40010000
 8006724:	48000400 	.word	0x48000400
 8006728:	48000800 	.word	0x48000800
 800672c:	48000c00 	.word	0x48000c00
 8006730:	48001000 	.word	0x48001000
 8006734:	48001400 	.word	0x48001400
 8006738:	48001800 	.word	0x48001800
 800673c:	48001c00 	.word	0x48001c00
 8006740:	40010400 	.word	0x40010400

08006744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	887b      	ldrh	r3, [r7, #2]
 8006756:	4013      	ands	r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
 8006760:	e001      	b.n	8006766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	807b      	strh	r3, [r7, #2]
 8006780:	4613      	mov	r3, r2
 8006782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006784:	787b      	ldrb	r3, [r7, #1]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800678a:	887a      	ldrh	r2, [r7, #2]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006790:	e002      	b.n	8006798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006792:	887a      	ldrh	r2, [r7, #2]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4013      	ands	r3, r2
 80067bc:	041a      	lsls	r2, r3, #16
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	43d9      	mvns	r1, r3
 80067c2:	887b      	ldrh	r3, [r7, #2]
 80067c4:	400b      	ands	r3, r1
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	619a      	str	r2, [r3, #24]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e081      	b.n	80068ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fd fb1a 	bl	8003e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2224      	movs	r2, #36	; 0x24
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006828:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006838:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d107      	bne.n	8006852 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	e006      	b.n	8006860 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800685e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d104      	bne.n	8006872 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69d9      	ldr	r1, [r3, #28]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e021      	b.n	800694c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2224      	movs	r2, #36	; 0x24
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fd fae7 	bl	8003ef4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	461a      	mov	r2, r3
 8006960:	460b      	mov	r3, r1
 8006962:	817b      	strh	r3, [r7, #10]
 8006964:	4613      	mov	r3, r2
 8006966:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b20      	cmp	r3, #32
 8006972:	f040 80da 	bne.w	8006b2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_I2C_Master_Transmit+0x30>
 8006980:	2302      	movs	r3, #2
 8006982:	e0d3      	b.n	8006b2c <HAL_I2C_Master_Transmit+0x1d8>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800698c:	f7ff fa5a 	bl	8005e44 <HAL_GetTick>
 8006990:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	2319      	movs	r3, #25
 8006998:	2201      	movs	r2, #1
 800699a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fdde 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e0be      	b.n	8006b2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2210      	movs	r2, #16
 80069ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	893a      	ldrh	r2, [r7, #8]
 80069ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2bff      	cmp	r3, #255	; 0xff
 80069de:	d90e      	bls.n	80069fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	8979      	ldrh	r1, [r7, #10]
 80069ee:	4b51      	ldr	r3, [pc, #324]	; (8006b34 <HAL_I2C_Master_Transmit+0x1e0>)
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 ffd4 	bl	80079a4 <I2C_TransferConfig>
 80069fc:	e06c      	b.n	8006ad8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	8979      	ldrh	r1, [r7, #10]
 8006a10:	4b48      	ldr	r3, [pc, #288]	; (8006b34 <HAL_I2C_Master_Transmit+0x1e0>)
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 ffc3 	bl	80079a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006a1e:	e05b      	b.n	8006ad8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	6a39      	ldr	r1, [r7, #32]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fddb 	bl	80075e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e07b      	b.n	8006b2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d034      	beq.n	8006ad8 <HAL_I2C_Master_Transmit+0x184>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d130      	bne.n	8006ad8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2180      	movs	r1, #128	; 0x80
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 fd6d 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e04d      	b.n	8006b2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2bff      	cmp	r3, #255	; 0xff
 8006a98:	d90e      	bls.n	8006ab8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 ff77 	bl	80079a4 <I2C_TransferConfig>
 8006ab6:	e00f      	b.n	8006ad8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	8979      	ldrh	r1, [r7, #10]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 ff66 	bl	80079a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d19e      	bne.n	8006a20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	6a39      	ldr	r1, [r7, #32]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fdba 	bl	8007660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e01a      	b.n	8006b2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2220      	movs	r2, #32
 8006afc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6859      	ldr	r1, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <HAL_I2C_Master_Transmit+0x1e4>)
 8006b0a:	400b      	ands	r3, r1
 8006b0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e000      	b.n	8006b2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006b2a:	2302      	movs	r3, #2
  }
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	80002000 	.word	0x80002000
 8006b38:	fe00e800 	.word	0xfe00e800

08006b3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	461a      	mov	r2, r3
 8006b48:	460b      	mov	r3, r1
 8006b4a:	817b      	strh	r3, [r7, #10]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	f040 80db 	bne.w	8006d14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_I2C_Master_Receive+0x30>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e0d4      	b.n	8006d16 <HAL_I2C_Master_Receive+0x1da>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b74:	f7ff f966 	bl	8005e44 <HAL_GetTick>
 8006b78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	2319      	movs	r3, #25
 8006b80:	2201      	movs	r2, #1
 8006b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fcea 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0bf      	b.n	8006d16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2222      	movs	r2, #34	; 0x22
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	893a      	ldrh	r2, [r7, #8]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2bff      	cmp	r3, #255	; 0xff
 8006bc6:	d90e      	bls.n	8006be6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	22ff      	movs	r2, #255	; 0xff
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	8979      	ldrh	r1, [r7, #10]
 8006bd6:	4b52      	ldr	r3, [pc, #328]	; (8006d20 <HAL_I2C_Master_Receive+0x1e4>)
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fee0 	bl	80079a4 <I2C_TransferConfig>
 8006be4:	e06d      	b.n	8006cc2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	8979      	ldrh	r1, [r7, #10]
 8006bf8:	4b49      	ldr	r3, [pc, #292]	; (8006d20 <HAL_I2C_Master_Receive+0x1e4>)
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fecf 	bl	80079a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006c06:	e05c      	b.n	8006cc2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	6a39      	ldr	r1, [r7, #32]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fd63 	bl	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e07c      	b.n	8006d16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d034      	beq.n	8006cc2 <HAL_I2C_Master_Receive+0x186>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d130      	bne.n	8006cc2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2200      	movs	r2, #0
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fc78 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e04d      	b.n	8006d16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2bff      	cmp	r3, #255	; 0xff
 8006c82:	d90e      	bls.n	8006ca2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	22ff      	movs	r2, #255	; 0xff
 8006c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	8979      	ldrh	r1, [r7, #10]
 8006c92:	2300      	movs	r3, #0
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fe82 	bl	80079a4 <I2C_TransferConfig>
 8006ca0:	e00f      	b.n	8006cc2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	8979      	ldrh	r1, [r7, #10]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fe71 	bl	80079a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d19d      	bne.n	8006c08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	6a39      	ldr	r1, [r7, #32]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fcc5 	bl	8007660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e01a      	b.n	8006d16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6859      	ldr	r1, [r3, #4]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <HAL_I2C_Master_Receive+0x1e8>)
 8006cf4:	400b      	ands	r3, r1
 8006cf6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	80002400 	.word	0x80002400
 8006d24:	fe00e800 	.word	0xfe00e800

08006d28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	461a      	mov	r2, r3
 8006d36:	4603      	mov	r3, r0
 8006d38:	817b      	strh	r3, [r7, #10]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	813b      	strh	r3, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	f040 80f9 	bne.w	8006f42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_I2C_Mem_Write+0x34>
 8006d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0ed      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_I2C_Mem_Write+0x4e>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e0e6      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d7e:	f7ff f861 	bl	8005e44 <HAL_GetTick>
 8006d82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2319      	movs	r3, #25
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fbe5 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0d1      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2221      	movs	r2, #33	; 0x21
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2240      	movs	r2, #64	; 0x40
 8006dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a3a      	ldr	r2, [r7, #32]
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dc8:	88f8      	ldrh	r0, [r7, #6]
 8006dca:	893a      	ldrh	r2, [r7, #8]
 8006dcc:	8979      	ldrh	r1, [r7, #10]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 faf5 	bl	80073c8 <I2C_RequestMemoryWrite>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0a9      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2bff      	cmp	r3, #255	; 0xff
 8006df8:	d90e      	bls.n	8006e18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	22ff      	movs	r2, #255	; 0xff
 8006dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	8979      	ldrh	r1, [r7, #10]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fdc7 	bl	80079a4 <I2C_TransferConfig>
 8006e16:	e00f      	b.n	8006e38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	8979      	ldrh	r1, [r7, #10]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fdb6 	bl	80079a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fbcf 	bl	80075e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e07b      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d034      	beq.n	8006ef0 <HAL_I2C_Mem_Write+0x1c8>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d130      	bne.n	8006ef0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	2200      	movs	r2, #0
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fb61 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e04d      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2bff      	cmp	r3, #255	; 0xff
 8006eb0:	d90e      	bls.n	8006ed0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	22ff      	movs	r2, #255	; 0xff
 8006eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	8979      	ldrh	r1, [r7, #10]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fd6b 	bl	80079a4 <I2C_TransferConfig>
 8006ece:	e00f      	b.n	8006ef0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	8979      	ldrh	r1, [r7, #10]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fd5a 	bl	80079a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d19e      	bne.n	8006e38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fbae 	bl	8007660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e01a      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2220      	movs	r2, #32
 8006f14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <HAL_I2C_Mem_Write+0x224>)
 8006f22:	400b      	ands	r3, r1
 8006f24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e000      	b.n	8006f44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006f42:	2302      	movs	r3, #2
  }
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	fe00e800 	.word	0xfe00e800

08006f50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	817b      	strh	r3, [r7, #10]
 8006f62:	460b      	mov	r3, r1
 8006f64:	813b      	strh	r3, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	f040 80fd 	bne.w	8007172 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_I2C_Mem_Read+0x34>
 8006f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d105      	bne.n	8006f90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0f1      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_I2C_Mem_Read+0x4e>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e0ea      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fa6:	f7fe ff4d 	bl	8005e44 <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	2319      	movs	r3, #25
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fad1 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0d5      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2222      	movs	r2, #34	; 0x22
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2240      	movs	r2, #64	; 0x40
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ff0:	88f8      	ldrh	r0, [r7, #6]
 8006ff2:	893a      	ldrh	r2, [r7, #8]
 8006ff4:	8979      	ldrh	r1, [r7, #10]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4603      	mov	r3, r0
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fa35 	bl	8007470 <I2C_RequestMemoryRead>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0ad      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	2bff      	cmp	r3, #255	; 0xff
 8007020:	d90e      	bls.n	8007040 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702c:	b2da      	uxtb	r2, r3
 800702e:	8979      	ldrh	r1, [r7, #10]
 8007030:	4b52      	ldr	r3, [pc, #328]	; (800717c <HAL_I2C_Mem_Read+0x22c>)
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fcb3 	bl	80079a4 <I2C_TransferConfig>
 800703e:	e00f      	b.n	8007060 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704e:	b2da      	uxtb	r2, r3
 8007050:	8979      	ldrh	r1, [r7, #10]
 8007052:	4b4a      	ldr	r3, [pc, #296]	; (800717c <HAL_I2C_Mem_Read+0x22c>)
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fca2 	bl	80079a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	2200      	movs	r2, #0
 8007068:	2104      	movs	r1, #4
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fa78 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e07c      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d034      	beq.n	8007120 <HAL_I2C_Mem_Read+0x1d0>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d130      	bne.n	8007120 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	2200      	movs	r2, #0
 80070c6:	2180      	movs	r1, #128	; 0x80
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fa49 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e04d      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2bff      	cmp	r3, #255	; 0xff
 80070e0:	d90e      	bls.n	8007100 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	22ff      	movs	r2, #255	; 0xff
 80070e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	8979      	ldrh	r1, [r7, #10]
 80070f0:	2300      	movs	r3, #0
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fc53 	bl	80079a4 <I2C_TransferConfig>
 80070fe:	e00f      	b.n	8007120 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710e:	b2da      	uxtb	r2, r3
 8007110:	8979      	ldrh	r1, [r7, #10]
 8007112:	2300      	movs	r3, #0
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fc42 	bl	80079a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d19a      	bne.n	8007060 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fa96 	bl	8007660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e01a      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2220      	movs	r2, #32
 8007144:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6859      	ldr	r1, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_I2C_Mem_Read+0x230>)
 8007152:	400b      	ands	r3, r1
 8007154:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2220      	movs	r2, #32
 800715a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	e000      	b.n	8007174 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007172:	2302      	movs	r3, #2
  }
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	80002400 	.word	0x80002400
 8007180:	fe00e800 	.word	0xfe00e800

08007184 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08a      	sub	sp, #40	; 0x28
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	607a      	str	r2, [r7, #4]
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	460b      	mov	r3, r1
 8007192:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	f040 80f1 	bne.w	8007388 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b4:	d101      	bne.n	80071ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
 80071b8:	e0e7      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_I2C_IsDeviceReady+0x44>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e0e0      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2224      	movs	r2, #36	; 0x24
 80071d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d107      	bne.n	80071f6 <HAL_I2C_IsDeviceReady+0x72>
 80071e6:	897b      	ldrh	r3, [r7, #10]
 80071e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071f4:	e004      	b.n	8007200 <HAL_I2C_IsDeviceReady+0x7c>
 80071f6:	897b      	ldrh	r3, [r7, #10]
 80071f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007206:	f7fe fe1d 	bl	8005e44 <HAL_GetTick>
 800720a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b20      	cmp	r3, #32
 8007218:	bf0c      	ite	eq
 800721a:	2301      	moveq	r3, #1
 800721c:	2300      	movne	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b10      	cmp	r3, #16
 800722e:	bf0c      	ite	eq
 8007230:	2301      	moveq	r3, #1
 8007232:	2300      	movne	r3, #0
 8007234:	b2db      	uxtb	r3, r3
 8007236:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007238:	e034      	b.n	80072a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007240:	d01a      	beq.n	8007278 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007242:	f7fe fdff 	bl	8005e44 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d302      	bcc.n	8007258 <HAL_I2C_IsDeviceReady+0xd4>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10f      	bne.n	8007278 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e088      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	bf0c      	ite	eq
 8007286:	2301      	moveq	r3, #1
 8007288:	2300      	movne	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b10      	cmp	r3, #16
 800729a:	bf0c      	ite	eq
 800729c:	2301      	moveq	r3, #1
 800729e:	2300      	movne	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80072a4:	7ffb      	ldrb	r3, [r7, #31]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <HAL_I2C_IsDeviceReady+0x12c>
 80072aa:	7fbb      	ldrb	r3, [r7, #30]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0c4      	beq.n	800723a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b10      	cmp	r3, #16
 80072bc:	d01a      	beq.n	80072f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2200      	movs	r2, #0
 80072c6:	2120      	movs	r1, #32
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f949 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e058      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2220      	movs	r2, #32
 80072de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e04a      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	2120      	movs	r1, #32
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f92e 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e03d      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2210      	movs	r2, #16
 8007314:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2220      	movs	r2, #32
 800731c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d118      	bne.n	8007358 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007334:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	2120      	movs	r1, #32
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f90d 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e01c      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2220      	movs	r2, #32
 8007356:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	3301      	adds	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	f63f af3b 	bhi.w	80071de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	f043 0220 	orr.w	r2, r3, #32
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007388:	2302      	movs	r3, #2
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073a0:	b2db      	uxtb	r3, r3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	817b      	strh	r3, [r7, #10]
 80073da:	460b      	mov	r3, r1
 80073dc:	813b      	strh	r3, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	8979      	ldrh	r1, [r7, #10]
 80073e8:	4b20      	ldr	r3, [pc, #128]	; (800746c <I2C_RequestMemoryWrite+0xa4>)
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fad7 	bl	80079a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	69b9      	ldr	r1, [r7, #24]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f8f0 	bl	80075e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e02c      	b.n	8007464 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d105      	bne.n	800741c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007410:	893b      	ldrh	r3, [r7, #8]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	629a      	str	r2, [r3, #40]	; 0x28
 800741a:	e015      	b.n	8007448 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800741c:	893b      	ldrh	r3, [r7, #8]
 800741e:	0a1b      	lsrs	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	b2da      	uxtb	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	69b9      	ldr	r1, [r7, #24]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f8d6 	bl	80075e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e012      	b.n	8007464 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800743e:	893b      	ldrh	r3, [r7, #8]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2200      	movs	r2, #0
 8007450:	2180      	movs	r1, #128	; 0x80
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f884 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	80002000 	.word	0x80002000

08007470 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	4608      	mov	r0, r1
 800747a:	4611      	mov	r1, r2
 800747c:	461a      	mov	r2, r3
 800747e:	4603      	mov	r3, r0
 8007480:	817b      	strh	r3, [r7, #10]
 8007482:	460b      	mov	r3, r1
 8007484:	813b      	strh	r3, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	b2da      	uxtb	r2, r3
 800748e:	8979      	ldrh	r1, [r7, #10]
 8007490:	4b20      	ldr	r3, [pc, #128]	; (8007514 <I2C_RequestMemoryRead+0xa4>)
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fa84 	bl	80079a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	69b9      	ldr	r1, [r7, #24]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 f89d 	bl	80075e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e02c      	b.n	800750a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d105      	bne.n	80074c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074b6:	893b      	ldrh	r3, [r7, #8]
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	629a      	str	r2, [r3, #40]	; 0x28
 80074c0:	e015      	b.n	80074ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80074c2:	893b      	ldrh	r3, [r7, #8]
 80074c4:	0a1b      	lsrs	r3, r3, #8
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	69b9      	ldr	r1, [r7, #24]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f883 	bl	80075e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e012      	b.n	800750a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074e4:	893b      	ldrh	r3, [r7, #8]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2200      	movs	r2, #0
 80074f6:	2140      	movs	r1, #64	; 0x40
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f831 	bl	8007560 <I2C_WaitOnFlagUntilTimeout>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	80002000 	.word	0x80002000

08007518 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d103      	bne.n	8007536 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b01      	cmp	r3, #1
 8007542:	d007      	beq.n	8007554 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	619a      	str	r2, [r3, #24]
  }
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007570:	e022      	b.n	80075b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007578:	d01e      	beq.n	80075b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757a:	f7fe fc63 	bl	8005e44 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d302      	bcc.n	8007590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d113      	bne.n	80075b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e00f      	b.n	80075d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4013      	ands	r3, r2
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	bf0c      	ite	eq
 80075c8:	2301      	moveq	r3, #1
 80075ca:	2300      	movne	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d0cd      	beq.n	8007572 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075ec:	e02c      	b.n	8007648 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f8ea 	bl	80077cc <I2C_IsErrorOccurred>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e02a      	b.n	8007658 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007608:	d01e      	beq.n	8007648 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760a:	f7fe fc1b 	bl	8005e44 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d113      	bne.n	8007648 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007624:	f043 0220 	orr.w	r2, r3, #32
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e007      	b.n	8007658 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b02      	cmp	r3, #2
 8007654:	d1cb      	bne.n	80075ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800766c:	e028      	b.n	80076c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 f8aa 	bl	80077cc <I2C_IsErrorOccurred>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e026      	b.n	80076d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007682:	f7fe fbdf 	bl	8005e44 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	429a      	cmp	r2, r3
 8007690:	d302      	bcc.n	8007698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d113      	bne.n	80076c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e007      	b.n	80076d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d1cf      	bne.n	800766e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076e4:	e064      	b.n	80077b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f86e 	bl	80077cc <I2C_IsErrorOccurred>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e062      	b.n	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b20      	cmp	r3, #32
 8007706:	d138      	bne.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b04      	cmp	r3, #4
 8007714:	d105      	bne.n	8007722 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e04e      	b.n	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b10      	cmp	r3, #16
 800772e:	d107      	bne.n	8007740 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2210      	movs	r2, #16
 8007736:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2204      	movs	r2, #4
 800773c:	645a      	str	r2, [r3, #68]	; 0x44
 800773e:	e002      	b.n	8007746 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2220      	movs	r2, #32
 800774c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6859      	ldr	r1, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800775a:	400b      	ands	r3, r1
 800775c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e022      	b.n	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777a:	f7fe fb63 	bl	8005e44 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	d302      	bcc.n	8007790 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10f      	bne.n	80077b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e007      	b.n	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d193      	bne.n	80076e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	fe00e800 	.word	0xfe00e800

080077cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	; 0x28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d075      	beq.n	80078e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2210      	movs	r2, #16
 80077fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007800:	e056      	b.n	80078b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007808:	d052      	beq.n	80078b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800780a:	f7fe fb1b 	bl	8005e44 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	429a      	cmp	r2, r3
 8007818:	d302      	bcc.n	8007820 <I2C_IsErrorOccurred+0x54>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d147      	bne.n	80078b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800782a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007832:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800783e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007842:	d12e      	bne.n	80078a2 <I2C_IsErrorOccurred+0xd6>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784a:	d02a      	beq.n	80078a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800784c:	7cfb      	ldrb	r3, [r7, #19]
 800784e:	2b20      	cmp	r3, #32
 8007850:	d027      	beq.n	80078a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007860:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007862:	f7fe faef 	bl	8005e44 <HAL_GetTick>
 8007866:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007868:	e01b      	b.n	80078a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800786a:	f7fe faeb 	bl	8005e44 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b19      	cmp	r3, #25
 8007876:	d914      	bls.n	80078a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787c:	f043 0220 	orr.w	r2, r3, #32
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	d1dc      	bne.n	800786a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d003      	beq.n	80078c6 <I2C_IsErrorOccurred+0xfa>
 80078be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d09d      	beq.n	8007802 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80078c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2220      	movs	r2, #32
 80078d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	f043 0304 	orr.w	r3, r3, #4
 80078dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	f043 0301 	orr.w	r3, r3, #1
 80078fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007906:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	f043 0308 	orr.w	r3, r3, #8
 800791e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	f043 0302 	orr.w	r3, r3, #2
 8007940:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800794a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01c      	beq.n	8007994 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fddc 	bl	8007518 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6859      	ldr	r1, [r3, #4]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <I2C_IsErrorOccurred+0x1d4>)
 800796c:	400b      	ands	r3, r1
 800796e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	431a      	orrs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007998:	4618      	mov	r0, r3
 800799a:	3728      	adds	r7, #40	; 0x28
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	fe00e800 	.word	0xfe00e800

080079a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	607b      	str	r3, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	817b      	strh	r3, [r7, #10]
 80079b2:	4613      	mov	r3, r2
 80079b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079b6:	897b      	ldrh	r3, [r7, #10]
 80079b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079bc:	7a7b      	ldrb	r3, [r7, #9]
 80079be:	041b      	lsls	r3, r3, #16
 80079c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	0d5b      	lsrs	r3, r3, #21
 80079de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <I2C_TransferConfig+0x60>)
 80079e4:	430b      	orrs	r3, r1
 80079e6:	43db      	mvns	r3, r3
 80079e8:	ea02 0103 	and.w	r1, r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80079f6:	bf00      	nop
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	03ff63ff 	.word	0x03ff63ff

08007a08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d138      	bne.n	8007a90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e032      	b.n	8007a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2224      	movs	r2, #36	; 0x24
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6819      	ldr	r1, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e000      	b.n	8007a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
  }
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	d139      	bne.n	8007b28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e033      	b.n	8007b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2224      	movs	r2, #36	; 0x24
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0201 	bic.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007af0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	e000      	b.n	8007b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b28:	2302      	movs	r3, #2
  }
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b38:	b08f      	sub	sp, #60	; 0x3c
 8007b3a:	af0a      	add	r7, sp, #40	; 0x28
 8007b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e116      	b.n	8007d76 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f00e fd3e 	bl	80165e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f008 fb67 	bl	801025a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	687e      	ldr	r6, [r7, #4]
 8007b94:	466d      	mov	r5, sp
 8007b96:	f106 0410 	add.w	r4, r6, #16
 8007b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8007baa:	1d33      	adds	r3, r6, #4
 8007bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bae:	6838      	ldr	r0, [r7, #0]
 8007bb0:	f008 fa7a 	bl	80100a8 <USB_CoreInit>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e0d7      	b.n	8007d76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f008 fb55 	bl	801027c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
 8007bd6:	e04a      	b.n	8007c6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007bd8:	7bfa      	ldrb	r2, [r7, #15]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	333d      	adds	r3, #61	; 0x3d
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007bec:	7bfa      	ldrb	r2, [r7, #15]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	333c      	adds	r3, #60	; 0x3c
 8007bfc:	7bfa      	ldrb	r2, [r7, #15]
 8007bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007c00:	7bfa      	ldrb	r2, [r7, #15]
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	b298      	uxth	r0, r3
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	3344      	adds	r3, #68	; 0x44
 8007c14:	4602      	mov	r2, r0
 8007c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c18:	7bfa      	ldrb	r2, [r7, #15]
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	3340      	adds	r3, #64	; 0x40
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007c2c:	7bfa      	ldrb	r2, [r7, #15]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	3348      	adds	r3, #72	; 0x48
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c40:	7bfa      	ldrb	r2, [r7, #15]
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4613      	mov	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	334c      	adds	r3, #76	; 0x4c
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c54:	7bfa      	ldrb	r2, [r7, #15]
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3354      	adds	r3, #84	; 0x54
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
 8007c6e:	7bfa      	ldrb	r2, [r7, #15]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d3af      	bcc.n	8007bd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
 8007c7c:	e044      	b.n	8007d08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c7e:	7bfa      	ldrb	r2, [r7, #15]
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c94:	7bfa      	ldrb	r2, [r7, #15]
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007ca6:	7bfa      	ldrb	r2, [r7, #15]
 8007ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007caa:	7bfa      	ldrb	r2, [r7, #15]
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007cc0:	7bfa      	ldrb	r2, [r7, #15]
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007cd6:	7bfa      	ldrb	r2, [r7, #15]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	3301      	adds	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
 8007d08:	7bfa      	ldrb	r2, [r7, #15]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d3b5      	bcc.n	8007c7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	687e      	ldr	r6, [r7, #4]
 8007d1a:	466d      	mov	r5, sp
 8007d1c:	f106 0410 	add.w	r4, r6, #16
 8007d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d30:	1d33      	adds	r3, r6, #4
 8007d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d34:	6838      	ldr	r0, [r7, #0]
 8007d36:	f008 faed 	bl	8010314 <USB_DevInit>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e014      	b.n	8007d76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d102      	bne.n	8007d6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f881 	bl	8008e6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f009 fb75 	bl	801145e <USB_DevDisconnect>

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_PCD_Start+0x1c>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e01c      	b.n	8007dd4 <HAL_PCD_Start+0x56>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d105      	bne.n	8007db6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f008 fa3c 	bl	8010238 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f009 fb29 	bl	801141c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	b08d      	sub	sp, #52	; 0x34
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f009 fbe7 	bl	80115c6 <USB_GetMode>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 847e 	bne.w	80086fc <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f009 fb4b 	bl	80114a0 <USB_ReadInterrupts>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8474 	beq.w	80086fa <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f009 fb38 	bl	80114a0 <USB_ReadInterrupts>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d107      	bne.n	8007e4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	695a      	ldr	r2, [r3, #20]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f002 0202 	and.w	r2, r2, #2
 8007e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f009 fb26 	bl	80114a0 <USB_ReadInterrupts>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f003 0310 	and.w	r3, r3, #16
 8007e5a:	2b10      	cmp	r3, #16
 8007e5c:	d161      	bne.n	8007f22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	699a      	ldr	r2, [r3, #24]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0210 	bic.w	r2, r2, #16
 8007e6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f003 020f 	and.w	r2, r3, #15
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	0c5b      	lsrs	r3, r3, #17
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d124      	bne.n	8007ee4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d035      	beq.n	8007f12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6a38      	ldr	r0, [r7, #32]
 8007eba:	f009 f95d 	bl	8011178 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	691a      	ldr	r2, [r3, #16]
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	091b      	lsrs	r3, r3, #4
 8007ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eca:	441a      	add	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6a1a      	ldr	r2, [r3, #32]
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	091b      	lsrs	r3, r3, #4
 8007ed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007edc:	441a      	add	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
 8007ee2:	e016      	b.n	8007f12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	0c5b      	lsrs	r3, r3, #17
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	2b06      	cmp	r3, #6
 8007eee:	d110      	bne.n	8007f12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6a38      	ldr	r0, [r7, #32]
 8007efc:	f009 f93c 	bl	8011178 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	6a1a      	ldr	r2, [r3, #32]
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	091b      	lsrs	r3, r3, #4
 8007f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f0c:	441a      	add	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699a      	ldr	r2, [r3, #24]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0210 	orr.w	r2, r2, #16
 8007f20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f009 faba 	bl	80114a0 <USB_ReadInterrupts>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f36:	f040 80a7 	bne.w	8008088 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f009 fabf 	bl	80114c6 <USB_ReadDevAllOutEpInterrupt>
 8007f48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007f4a:	e099      	b.n	8008080 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 808e 	beq.w	8008074 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f009 fae3 	bl	801152e <USB_ReadDevOutEPInterrupt>
 8007f68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00c      	beq.n	8007f8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f80:	461a      	mov	r2, r3
 8007f82:	2301      	movs	r3, #1
 8007f84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fe95 	bl	8008cb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00c      	beq.n	8007fb2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fed1 	bl	8008d54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2310      	movs	r3, #16
 8007fcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d030      	beq.n	800803a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b80      	cmp	r3, #128	; 0x80
 8007fe2:	d109      	bne.n	8007ff8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ff6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	3304      	adds	r3, #4
 800800c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	78db      	ldrb	r3, [r3, #3]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d108      	bne.n	8008028 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2200      	movs	r2, #0
 800801a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	b2db      	uxtb	r3, r3
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f00e fc22 	bl	801686c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	461a      	mov	r2, r3
 8008036:	2302      	movs	r3, #2
 8008038:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b00      	cmp	r3, #0
 8008042:	d008      	beq.n	8008056 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	461a      	mov	r2, r3
 8008052:	2320      	movs	r3, #32
 8008054:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806c:	461a      	mov	r2, r3
 800806e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008072:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	3301      	adds	r3, #1
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	2b00      	cmp	r3, #0
 8008084:	f47f af62 	bne.w	8007f4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f009 fa07 	bl	80114a0 <USB_ReadInterrupts>
 8008092:	4603      	mov	r3, r0
 8008094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800809c:	f040 80a4 	bne.w	80081e8 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f009 fa28 	bl	80114fa <USB_ReadDevAllInEpInterrupt>
 80080aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80080b0:	e096      	b.n	80081e0 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 808b 	beq.w	80081d4 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f009 fa4e 	bl	801156a <USB_ReadDevInEPInterrupt>
 80080ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d020      	beq.n	800811c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	2201      	movs	r2, #1
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	43db      	mvns	r3, r3
 80080f4:	69f9      	ldr	r1, [r7, #28]
 80080f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080fa:	4013      	ands	r3, r2
 80080fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810a:	461a      	mov	r2, r3
 800810c:	2301      	movs	r3, #1
 800810e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	b2db      	uxtb	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f00e fb13 	bl	8016742 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008132:	461a      	mov	r2, r3
 8008134:	2308      	movs	r3, #8
 8008136:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814e:	461a      	mov	r2, r3
 8008150:	2310      	movs	r3, #16
 8008152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	461a      	mov	r2, r3
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d023      	beq.n	80081c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800817a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800817c:	6a38      	ldr	r0, [r7, #32]
 800817e:	f008 fa15 	bl	80105ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	3338      	adds	r3, #56	; 0x38
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	3304      	adds	r3, #4
 8008194:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	78db      	ldrb	r3, [r3, #3]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d108      	bne.n	80081b0 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2200      	movs	r2, #0
 80081a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f00e fb70 	bl	8016890 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	461a      	mov	r2, r3
 80081be:	2302      	movs	r3, #2
 80081c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80081cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fcea 	bl	8008ba8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	3301      	adds	r3, #1
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f47f af65 	bne.w	80080b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f009 f957 	bl	80114a0 <USB_ReadInterrupts>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fc:	d122      	bne.n	8008244 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800820c:	f023 0301 	bic.w	r3, r3, #1
 8008210:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008218:	2b01      	cmp	r3, #1
 800821a:	d108      	bne.n	800822e <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008224:	2100      	movs	r1, #0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fe44 	bl	8008eb4 <HAL_PCDEx_LPM_Callback>
 800822c:	e002      	b.n	8008234 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f00e faf4 	bl	801681c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695a      	ldr	r2, [r3, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f009 f929 	bl	80114a0 <USB_ReadInterrupts>
 800824e:	4603      	mov	r3, r0
 8008250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008258:	d112      	bne.n	8008280 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b01      	cmp	r3, #1
 8008268:	d102      	bne.n	8008270 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f00e fab0 	bl	80167d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695a      	ldr	r2, [r3, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800827e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f009 f90b 	bl	80114a0 <USB_ReadInterrupts>
 800828a:	4603      	mov	r3, r0
 800828c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008294:	d121      	bne.n	80082da <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695a      	ldr	r2, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80082a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d111      	bne.n	80082d4 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80082ca:	2101      	movs	r1, #1
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fdf1 	bl	8008eb4 <HAL_PCDEx_LPM_Callback>
 80082d2:	e002      	b.n	80082da <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f00e fa7b 	bl	80167d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f009 f8de 	bl	80114a0 <USB_ReadInterrupts>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ee:	f040 80b5 	bne.w	800845c <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2110      	movs	r1, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f008 f94d 	bl	80105ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008312:	2300      	movs	r3, #0
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008316:	e046      	b.n	80083a6 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	461a      	mov	r2, r3
 8008326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800832a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800834a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	461a      	mov	r2, r3
 800835a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800835e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800837a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800837e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	440a      	add	r2, r1
 8008396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800839e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	3301      	adds	r3, #1
 80083a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d3b3      	bcc.n	8008318 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80083c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d016      	beq.n	80083fa <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d6:	69fa      	ldr	r2, [r7, #28]
 80083d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083dc:	f043 030b 	orr.w	r3, r3, #11
 80083e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083f2:	f043 030b 	orr.w	r3, r3, #11
 80083f6:	6453      	str	r3, [r2, #68]	; 0x44
 80083f8:	e015      	b.n	8008426 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008408:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800840c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008410:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008420:	f043 030b 	orr.w	r3, r3, #11
 8008424:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008434:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008438:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f009 f8ee 	bl	8011628 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695a      	ldr	r2, [r3, #20]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800845a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f009 f81d 	bl	80114a0 <USB_ReadInterrupts>
 8008466:	4603      	mov	r3, r0
 8008468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800846c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008470:	d124      	bne.n	80084bc <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f009 f8b3 	bl	80115e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f008 f910 	bl	80106a6 <USB_GetDevSpeed>
 8008486:	4603      	mov	r3, r0
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681c      	ldr	r4, [r3, #0]
 8008492:	f001 fbcf 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8008496:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800849c:	b2db      	uxtb	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	4620      	mov	r0, r4
 80084a2:	f007 fe2d 	bl	8010100 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f00e f973 	bl	8016792 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	695a      	ldr	r2, [r3, #20]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80084ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f008 ffed 	bl	80114a0 <USB_ReadInterrupts>
 80084c6:	4603      	mov	r3, r0
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d10a      	bne.n	80084e6 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f00e f950 	bl	8016776 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f002 0208 	and.w	r2, r2, #8
 80084e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f008 ffd8 	bl	80114a0 <USB_ReadInterrupts>
 80084f0:	4603      	mov	r3, r0
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d122      	bne.n	8008540 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008506:	2301      	movs	r3, #1
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
 800850a:	e014      	b.n	8008536 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008510:	4613      	mov	r3, r2
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	440b      	add	r3, r1
 800851a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d105      	bne.n	8008530 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	b2db      	uxtb	r3, r3
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fb0b 	bl	8008b46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	3301      	adds	r3, #1
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853c:	429a      	cmp	r2, r3
 800853e:	d3e5      	bcc.n	800850c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f008 ffab 	bl	80114a0 <USB_ReadInterrupts>
 800854a:	4603      	mov	r3, r0
 800854c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008554:	d13b      	bne.n	80085ce <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008556:	2301      	movs	r3, #1
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
 800855a:	e02b      	b.n	80085b4 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008570:	4613      	mov	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	3340      	adds	r3, #64	; 0x40
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d115      	bne.n	80085ae <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008582:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008584:	2b00      	cmp	r3, #0
 8008586:	da12      	bge.n	80085ae <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	333f      	adds	r3, #63	; 0x3f
 8008598:	2201      	movs	r2, #1
 800859a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 facc 	bl	8008b46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	3301      	adds	r3, #1
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d3ce      	bcc.n	800855c <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695a      	ldr	r2, [r3, #20]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80085cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f008 ff64 	bl	80114a0 <USB_ReadInterrupts>
 80085d8:	4603      	mov	r3, r0
 80085da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085e2:	d155      	bne.n	8008690 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085e4:	2301      	movs	r3, #1
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
 80085e8:	e045      	b.n	8008676 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fe:	4613      	mov	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d12e      	bne.n	8008670 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008612:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008614:	2b00      	cmp	r3, #0
 8008616:	da2b      	bge.n	8008670 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008624:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008628:	429a      	cmp	r2, r3
 800862a:	d121      	bne.n	8008670 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008630:	4613      	mov	r3, r2
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	440b      	add	r3, r1
 800863a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10a      	bne.n	8008670 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800866c:	6053      	str	r3, [r2, #4]
            break;
 800866e:	e007      	b.n	8008680 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	3301      	adds	r3, #1
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867c:	429a      	cmp	r2, r3
 800867e:	d3b4      	bcc.n	80085ea <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800868e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f008 ff03 	bl	80114a0 <USB_ReadInterrupts>
 800869a:	4603      	mov	r3, r0
 800869c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a4:	d10a      	bne.n	80086bc <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f00e f904 	bl	80168b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695a      	ldr	r2, [r3, #20]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80086ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f008 feed 	bl	80114a0 <USB_ReadInterrupts>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d115      	bne.n	80086fc <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f00e f8f4 	bl	80168d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6859      	ldr	r1, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	605a      	str	r2, [r3, #4]
 80086f8:	e000      	b.n	80086fc <HAL_PCD_IRQHandler+0x920>
      return;
 80086fa:	bf00      	nop
    }
  }
}
 80086fc:	3734      	adds	r7, #52	; 0x34
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd90      	pop	{r4, r7, pc}

08008702 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_PCD_SetAddress+0x1a>
 8008718:	2302      	movs	r3, #2
 800871a:	e013      	b.n	8008744 <HAL_PCD_SetAddress+0x42>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f008 fe4b 	bl	80113d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	461a      	mov	r2, r3
 800875a:	4603      	mov	r3, r0
 800875c:	70fb      	strb	r3, [r7, #3]
 800875e:	460b      	mov	r3, r1
 8008760:	803b      	strh	r3, [r7, #0]
 8008762:	4613      	mov	r3, r2
 8008764:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800876a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da0f      	bge.n	8008792 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	f003 020f 	and.w	r2, r3, #15
 8008778:	4613      	mov	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	3338      	adds	r3, #56	; 0x38
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	3304      	adds	r3, #4
 8008788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	705a      	strb	r2, [r3, #1]
 8008790:	e00f      	b.n	80087b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	4613      	mov	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	4413      	add	r3, r2
 80087a8:	3304      	adds	r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	f003 030f 	and.w	r3, r3, #15
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80087be:	883a      	ldrh	r2, [r7, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	78ba      	ldrb	r2, [r7, #2]
 80087c8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d004      	beq.n	80087dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80087dc:	78bb      	ldrb	r3, [r7, #2]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d102      	bne.n	80087e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <HAL_PCD_EP_Open+0xaa>
 80087f2:	2302      	movs	r3, #2
 80087f4:	e00e      	b.n	8008814 <HAL_PCD_EP_Open+0xc8>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	4618      	mov	r0, r3
 8008806:	f007 ff6d 	bl	80106e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008812:	7afb      	ldrb	r3, [r7, #11]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800882c:	2b00      	cmp	r3, #0
 800882e:	da0f      	bge.n	8008850 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008830:	78fb      	ldrb	r3, [r7, #3]
 8008832:	f003 020f 	and.w	r2, r3, #15
 8008836:	4613      	mov	r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	3338      	adds	r3, #56	; 0x38
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	3304      	adds	r3, #4
 8008846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	705a      	strb	r2, [r3, #1]
 800884e:	e00f      	b.n	8008870 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	f003 020f 	and.w	r2, r3, #15
 8008856:	4613      	mov	r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	3304      	adds	r3, #4
 8008868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	b2da      	uxtb	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008882:	2b01      	cmp	r3, #1
 8008884:	d101      	bne.n	800888a <HAL_PCD_EP_Close+0x6e>
 8008886:	2302      	movs	r3, #2
 8008888:	e00e      	b.n	80088a8 <HAL_PCD_EP_Close+0x8c>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68f9      	ldr	r1, [r7, #12]
 8008898:	4618      	mov	r0, r3
 800889a:	f007 ffab 	bl	80107f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	460b      	mov	r3, r1
 80088be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088c0:	7afb      	ldrb	r3, [r7, #11]
 80088c2:	f003 020f 	and.w	r2, r3, #15
 80088c6:	4613      	mov	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4413      	add	r3, r2
 80088d6:	3304      	adds	r3, #4
 80088d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2200      	movs	r2, #0
 80088ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2200      	movs	r2, #0
 80088f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6979      	ldr	r1, [r7, #20]
 800890e:	4618      	mov	r0, r3
 8008910:	f008 fa2c 	bl	8010d6c <USB_EP0StartXfer>
 8008914:	e005      	b.n	8008922 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6979      	ldr	r1, [r7, #20]
 800891c:	4618      	mov	r0, r3
 800891e:	f008 f845 	bl	80109ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800894e:	681b      	ldr	r3, [r3, #0]
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	460b      	mov	r3, r1
 800896a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800896c:	7afb      	ldrb	r3, [r7, #11]
 800896e:	f003 020f 	and.w	r2, r3, #15
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3338      	adds	r3, #56	; 0x38
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	3304      	adds	r3, #4
 8008982:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2200      	movs	r2, #0
 8008994:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2201      	movs	r2, #1
 800899a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6979      	ldr	r1, [r7, #20]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f008 f9d7 	bl	8010d6c <USB_EP0StartXfer>
 80089be:	e005      	b.n	80089cc <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6979      	ldr	r1, [r7, #20]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f007 fff0 	bl	80109ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	f003 020f 	and.w	r2, r3, #15
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d901      	bls.n	80089f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e04e      	b.n	8008a92 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	da0f      	bge.n	8008a1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	f003 020f 	and.w	r2, r3, #15
 8008a02:	4613      	mov	r3, r2
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	3338      	adds	r3, #56	; 0x38
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	4413      	add	r3, r2
 8008a10:	3304      	adds	r3, #4
 8008a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	705a      	strb	r2, [r3, #1]
 8008a1a:	e00d      	b.n	8008a38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a1c:	78fa      	ldrb	r2, [r7, #3]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_PCD_EP_SetStall+0x82>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e01c      	b.n	8008a92 <HAL_PCD_EP_SetStall+0xbc>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68f9      	ldr	r1, [r7, #12]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f008 fbde 	bl	8011228 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d108      	bne.n	8008a88 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a80:	4619      	mov	r1, r3
 8008a82:	4610      	mov	r0, r2
 8008a84:	f008 fdd0 	bl	8011628 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	f003 020f 	and.w	r2, r3, #15
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d901      	bls.n	8008ab8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e042      	b.n	8008b3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	da0f      	bge.n	8008ae0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	f003 020f 	and.w	r2, r3, #15
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	3338      	adds	r3, #56	; 0x38
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	705a      	strb	r2, [r3, #1]
 8008ade:	e00f      	b.n	8008b00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	f003 020f 	and.w	r2, r3, #15
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	3304      	adds	r3, #4
 8008af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_PCD_EP_ClrStall+0x86>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e00e      	b.n	8008b3e <HAL_PCD_EP_ClrStall+0xa4>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68f9      	ldr	r1, [r7, #12]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f008 fbe8 	bl	8011304 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da0c      	bge.n	8008b74 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	f003 020f 	and.w	r2, r3, #15
 8008b60:	4613      	mov	r3, r2
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	3338      	adds	r3, #56	; 0x38
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3304      	adds	r3, #4
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	e00c      	b.n	8008b8e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	f003 020f 	and.w	r2, r3, #15
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68f9      	ldr	r1, [r7, #12]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f008 fa0b 	bl	8010fb0 <USB_EPStopXfer>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	3338      	adds	r3, #56	; 0x38
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	3304      	adds	r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a1a      	ldr	r2, [r3, #32]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d901      	bls.n	8008be0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e067      	b.n	8008cb0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	699a      	ldr	r2, [r3, #24]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d902      	bls.n	8008bfc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	3303      	adds	r3, #3
 8008c00:	089b      	lsrs	r3, r3, #2
 8008c02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c04:	e026      	b.n	8008c54 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	699a      	ldr	r2, [r3, #24]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d902      	bls.n	8008c22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	3303      	adds	r3, #3
 8008c26:	089b      	lsrs	r3, r3, #2
 8008c28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6919      	ldr	r1, [r3, #16]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	6978      	ldr	r0, [r7, #20]
 8008c38:	f008 fa64 	bl	8011104 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	441a      	add	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a1a      	ldr	r2, [r3, #32]
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	441a      	add	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d809      	bhi.n	8008c7e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1a      	ldr	r2, [r3, #32]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d203      	bcs.n	8008c7e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1c3      	bne.n	8008c06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d811      	bhi.n	8008cae <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	2201      	movs	r2, #1
 8008c92:	fa02 f303 	lsl.w	r3, r2, r3
 8008c96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	43db      	mvns	r3, r3
 8008ca4:	6939      	ldr	r1, [r7, #16]
 8008ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008caa:	4013      	ands	r3, r2
 8008cac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	333c      	adds	r3, #60	; 0x3c
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <PCD_EP_OutXfrComplete_int+0x98>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d124      	bne.n	8008d38 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00a      	beq.n	8008d0e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d04:	461a      	mov	r2, r3
 8008d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d0a:	6093      	str	r3, [r2, #8]
 8008d0c:	e01a      	b.n	8008d44 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d008      	beq.n	8008d2a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	461a      	mov	r2, r3
 8008d26:	2320      	movs	r3, #32
 8008d28:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f00d fceb 	bl	801670c <HAL_PCD_DataOutStageCallback>
 8008d36:	e005      	b.n	8008d44 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f00d fce4 	bl	801670c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	4f54310a 	.word	0x4f54310a

08008d54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	333c      	adds	r3, #60	; 0x3c
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a0c      	ldr	r2, [pc, #48]	; (8008db8 <PCD_EP_OutSetupPacket_int+0x64>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d90e      	bls.n	8008da8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	461a      	mov	r2, r3
 8008da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008da6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f00d fc9d 	bl	80166e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	4f54300a 	.word	0x4f54300a

08008dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d107      	bne.n	8008dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008dda:	883b      	ldrh	r3, [r7, #0]
 8008ddc:	0419      	lsls	r1, r3, #16
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	629a      	str	r2, [r3, #40]	; 0x28
 8008de8:	e028      	b.n	8008e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df0:	0c1b      	lsrs	r3, r3, #16
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	4413      	add	r3, r2
 8008df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	e00d      	b.n	8008e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	3340      	adds	r3, #64	; 0x40
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	0c1b      	lsrs	r3, r3, #16
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4413      	add	r3, r2
 8008e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	3301      	adds	r3, #1
 8008e18:	73fb      	strb	r3, [r7, #15]
 8008e1a:	7bfa      	ldrb	r2, [r7, #15]
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d3ec      	bcc.n	8008dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008e24:	883b      	ldrh	r3, [r7, #0]
 8008e26:	0418      	lsls	r0, r3, #16
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6819      	ldr	r1, [r3, #0]
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	4302      	orrs	r2, r0
 8008e34:	3340      	adds	r3, #64	; 0x40
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	887a      	ldrh	r2, [r7, #2]
 8008e5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	f043 0303 	orr.w	r3, r3, #3
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ed0:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008edc:	d102      	bne.n	8008ee4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee2:	e00b      	b.n	8008efc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008ee4:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ef2:	d102      	bne.n	8008efa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ef8:	e000      	b.n	8008efc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8008efa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40007000 	.word	0x40007000

08008f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d141      	bne.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f1a:	4b4b      	ldr	r3, [pc, #300]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f26:	d131      	bne.n	8008f8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f28:	4b47      	ldr	r3, [pc, #284]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f2e:	4a46      	ldr	r2, [pc, #280]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f38:	4b43      	ldr	r3, [pc, #268]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f40:	4a41      	ldr	r2, [pc, #260]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f48:	4b40      	ldr	r3, [pc, #256]	; (800904c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2232      	movs	r2, #50	; 0x32
 8008f4e:	fb02 f303 	mul.w	r3, r2, r3
 8008f52:	4a3f      	ldr	r2, [pc, #252]	; (8009050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f54:	fba2 2303 	umull	r2, r3, r2, r3
 8008f58:	0c9b      	lsrs	r3, r3, #18
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f5e:	e002      	b.n	8008f66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f66:	4b38      	ldr	r3, [pc, #224]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f72:	d102      	bne.n	8008f7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f2      	bne.n	8008f60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f7a:	4b33      	ldr	r3, [pc, #204]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f86:	d158      	bne.n	800903a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e057      	b.n	800903c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f8c:	4b2e      	ldr	r3, [pc, #184]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f92:	4a2d      	ldr	r2, [pc, #180]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008f9c:	e04d      	b.n	800903a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa4:	d141      	bne.n	800902a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008fa6:	4b28      	ldr	r3, [pc, #160]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb2:	d131      	bne.n	8009018 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fb4:	4b24      	ldr	r3, [pc, #144]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fba:	4a23      	ldr	r2, [pc, #140]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fc4:	4b20      	ldr	r3, [pc, #128]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008fcc:	4a1e      	ldr	r2, [pc, #120]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008fd4:	4b1d      	ldr	r3, [pc, #116]	; (800904c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2232      	movs	r2, #50	; 0x32
 8008fda:	fb02 f303 	mul.w	r3, r2, r3
 8008fde:	4a1c      	ldr	r2, [pc, #112]	; (8009050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe4:	0c9b      	lsrs	r3, r3, #18
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fea:	e002      	b.n	8008ff2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ffe:	d102      	bne.n	8009006 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1f2      	bne.n	8008fec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009006:	4b10      	ldr	r3, [pc, #64]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800900e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009012:	d112      	bne.n	800903a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e011      	b.n	800903c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009018:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800901e:	4a0a      	ldr	r2, [pc, #40]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009028:	e007      	b.n	800903a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800902a:	4b07      	ldr	r3, [pc, #28]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009032:	4a05      	ldr	r2, [pc, #20]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009034:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009038:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	40007000 	.word	0x40007000
 800904c:	20000004 	.word	0x20000004
 8009050:	431bde83 	.word	0x431bde83

08009054 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <HAL_PWREx_EnableVddUSB+0x1c>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	4a04      	ldr	r2, [pc, #16]	; (8009070 <HAL_PWREx_EnableVddUSB+0x1c>)
 800905e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009062:	6053      	str	r3, [r2, #4]
}
 8009064:	bf00      	nop
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40007000 	.word	0x40007000

08009074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f000 bc08 	b.w	8009898 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009088:	4b96      	ldr	r3, [pc, #600]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f003 030c 	and.w	r3, r3, #12
 8009090:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009092:	4b94      	ldr	r3, [pc, #592]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 80e4 	beq.w	8009272 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d007      	beq.n	80090c0 <HAL_RCC_OscConfig+0x4c>
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2b0c      	cmp	r3, #12
 80090b4:	f040 808b 	bne.w	80091ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	f040 8087 	bne.w	80091ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80090c0:	4b88      	ldr	r3, [pc, #544]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_RCC_OscConfig+0x64>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e3df      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1a      	ldr	r2, [r3, #32]
 80090dc:	4b81      	ldr	r3, [pc, #516]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d004      	beq.n	80090f2 <HAL_RCC_OscConfig+0x7e>
 80090e8:	4b7e      	ldr	r3, [pc, #504]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090f0:	e005      	b.n	80090fe <HAL_RCC_OscConfig+0x8a>
 80090f2:	4b7c      	ldr	r3, [pc, #496]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80090f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090f8:	091b      	lsrs	r3, r3, #4
 80090fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090fe:	4293      	cmp	r3, r2
 8009100:	d223      	bcs.n	800914a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fdf8 	bl	8009cfc <RCC_SetFlashLatencyFromMSIRange>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e3c0      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009116:	4b73      	ldr	r3, [pc, #460]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a72      	ldr	r2, [pc, #456]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800911c:	f043 0308 	orr.w	r3, r3, #8
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	4b70      	ldr	r3, [pc, #448]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	496d      	ldr	r1, [pc, #436]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009130:	4313      	orrs	r3, r2
 8009132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009134:	4b6b      	ldr	r3, [pc, #428]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	4968      	ldr	r1, [pc, #416]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009144:	4313      	orrs	r3, r2
 8009146:	604b      	str	r3, [r1, #4]
 8009148:	e025      	b.n	8009196 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800914a:	4b66      	ldr	r3, [pc, #408]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a65      	ldr	r2, [pc, #404]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009150:	f043 0308 	orr.w	r3, r3, #8
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	4b63      	ldr	r3, [pc, #396]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	4960      	ldr	r1, [pc, #384]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009164:	4313      	orrs	r3, r2
 8009166:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009168:	4b5e      	ldr	r3, [pc, #376]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	495b      	ldr	r1, [pc, #364]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009178:	4313      	orrs	r3, r2
 800917a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d109      	bne.n	8009196 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fdb8 	bl	8009cfc <RCC_SetFlashLatencyFromMSIRange>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e380      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009196:	f000 fcc1 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800919a:	4602      	mov	r2, r0
 800919c:	4b51      	ldr	r3, [pc, #324]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	091b      	lsrs	r3, r3, #4
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	4950      	ldr	r1, [pc, #320]	; (80092e8 <HAL_RCC_OscConfig+0x274>)
 80091a8:	5ccb      	ldrb	r3, [r1, r3]
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	4a4e      	ldr	r2, [pc, #312]	; (80092ec <HAL_RCC_OscConfig+0x278>)
 80091b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80091b6:	4b4e      	ldr	r3, [pc, #312]	; (80092f0 <HAL_RCC_OscConfig+0x27c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fc fdf2 	bl	8005da4 <HAL_InitTick>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d052      	beq.n	8009270 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	e364      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d032      	beq.n	800923c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80091d6:	4b43      	ldr	r3, [pc, #268]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a42      	ldr	r2, [pc, #264]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80091dc:	f043 0301 	orr.w	r3, r3, #1
 80091e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80091e2:	f7fc fe2f 	bl	8005e44 <HAL_GetTick>
 80091e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80091e8:	e008      	b.n	80091fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80091ea:	f7fc fe2b 	bl	8005e44 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d901      	bls.n	80091fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e34d      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80091fc:	4b39      	ldr	r3, [pc, #228]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0f0      	beq.n	80091ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009208:	4b36      	ldr	r3, [pc, #216]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a35      	ldr	r2, [pc, #212]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800920e:	f043 0308 	orr.w	r3, r3, #8
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	4b33      	ldr	r3, [pc, #204]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	4930      	ldr	r1, [pc, #192]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009222:	4313      	orrs	r3, r2
 8009224:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009226:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	492b      	ldr	r1, [pc, #172]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009236:	4313      	orrs	r3, r2
 8009238:	604b      	str	r3, [r1, #4]
 800923a:	e01a      	b.n	8009272 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800923c:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a28      	ldr	r2, [pc, #160]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009242:	f023 0301 	bic.w	r3, r3, #1
 8009246:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009248:	f7fc fdfc 	bl	8005e44 <HAL_GetTick>
 800924c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800924e:	e008      	b.n	8009262 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009250:	f7fc fdf8 	bl	8005e44 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b02      	cmp	r3, #2
 800925c:	d901      	bls.n	8009262 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e31a      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009262:	4b20      	ldr	r3, [pc, #128]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f0      	bne.n	8009250 <HAL_RCC_OscConfig+0x1dc>
 800926e:	e000      	b.n	8009272 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009270:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d073      	beq.n	8009366 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	2b08      	cmp	r3, #8
 8009282:	d005      	beq.n	8009290 <HAL_RCC_OscConfig+0x21c>
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	2b0c      	cmp	r3, #12
 8009288:	d10e      	bne.n	80092a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d10b      	bne.n	80092a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009290:	4b14      	ldr	r3, [pc, #80]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d063      	beq.n	8009364 <HAL_RCC_OscConfig+0x2f0>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d15f      	bne.n	8009364 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e2f7      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b0:	d106      	bne.n	80092c0 <HAL_RCC_OscConfig+0x24c>
 80092b2:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0b      	ldr	r2, [pc, #44]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80092b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	e025      	b.n	800930c <HAL_RCC_OscConfig+0x298>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092c8:	d114      	bne.n	80092f4 <HAL_RCC_OscConfig+0x280>
 80092ca:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a05      	ldr	r2, [pc, #20]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80092d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a02      	ldr	r2, [pc, #8]	; (80092e4 <HAL_RCC_OscConfig+0x270>)
 80092dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	e013      	b.n	800930c <HAL_RCC_OscConfig+0x298>
 80092e4:	40021000 	.word	0x40021000
 80092e8:	0801a048 	.word	0x0801a048
 80092ec:	20000004 	.word	0x20000004
 80092f0:	20000008 	.word	0x20000008
 80092f4:	4ba0      	ldr	r3, [pc, #640]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a9f      	ldr	r2, [pc, #636]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80092fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	4b9d      	ldr	r3, [pc, #628]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a9c      	ldr	r2, [pc, #624]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800930a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d013      	beq.n	800933c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009314:	f7fc fd96 	bl	8005e44 <HAL_GetTick>
 8009318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800931a:	e008      	b.n	800932e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800931c:	f7fc fd92 	bl	8005e44 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b64      	cmp	r3, #100	; 0x64
 8009328:	d901      	bls.n	800932e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e2b4      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800932e:	4b92      	ldr	r3, [pc, #584]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0f0      	beq.n	800931c <HAL_RCC_OscConfig+0x2a8>
 800933a:	e014      	b.n	8009366 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933c:	f7fc fd82 	bl	8005e44 <HAL_GetTick>
 8009340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009342:	e008      	b.n	8009356 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009344:	f7fc fd7e 	bl	8005e44 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b64      	cmp	r3, #100	; 0x64
 8009350:	d901      	bls.n	8009356 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e2a0      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009356:	4b88      	ldr	r3, [pc, #544]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1f0      	bne.n	8009344 <HAL_RCC_OscConfig+0x2d0>
 8009362:	e000      	b.n	8009366 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d060      	beq.n	8009434 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b04      	cmp	r3, #4
 8009376:	d005      	beq.n	8009384 <HAL_RCC_OscConfig+0x310>
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	2b0c      	cmp	r3, #12
 800937c:	d119      	bne.n	80093b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d116      	bne.n	80093b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009384:	4b7c      	ldr	r3, [pc, #496]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800938c:	2b00      	cmp	r3, #0
 800938e:	d005      	beq.n	800939c <HAL_RCC_OscConfig+0x328>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e27d      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939c:	4b76      	ldr	r3, [pc, #472]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	061b      	lsls	r3, r3, #24
 80093aa:	4973      	ldr	r1, [pc, #460]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093b0:	e040      	b.n	8009434 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d023      	beq.n	8009402 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093ba:	4b6f      	ldr	r3, [pc, #444]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a6e      	ldr	r2, [pc, #440]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80093c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c6:	f7fc fd3d 	bl	8005e44 <HAL_GetTick>
 80093ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093cc:	e008      	b.n	80093e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093ce:	f7fc fd39 	bl	8005e44 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d901      	bls.n	80093e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e25b      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093e0:	4b65      	ldr	r3, [pc, #404]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0f0      	beq.n	80093ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093ec:	4b62      	ldr	r3, [pc, #392]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	061b      	lsls	r3, r3, #24
 80093fa:	495f      	ldr	r1, [pc, #380]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	604b      	str	r3, [r1, #4]
 8009400:	e018      	b.n	8009434 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009402:	4b5d      	ldr	r3, [pc, #372]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a5c      	ldr	r2, [pc, #368]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800940c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800940e:	f7fc fd19 	bl	8005e44 <HAL_GetTick>
 8009412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009414:	e008      	b.n	8009428 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009416:	f7fc fd15 	bl	8005e44 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e237      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009428:	4b53      	ldr	r3, [pc, #332]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f0      	bne.n	8009416 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d03c      	beq.n	80094ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01c      	beq.n	8009482 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009448:	4b4b      	ldr	r3, [pc, #300]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 800944a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800944e:	4a4a      	ldr	r2, [pc, #296]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009458:	f7fc fcf4 	bl	8005e44 <HAL_GetTick>
 800945c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800945e:	e008      	b.n	8009472 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009460:	f7fc fcf0 	bl	8005e44 <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	2b02      	cmp	r3, #2
 800946c:	d901      	bls.n	8009472 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e212      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009472:	4b41      	ldr	r3, [pc, #260]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0ef      	beq.n	8009460 <HAL_RCC_OscConfig+0x3ec>
 8009480:	e01b      	b.n	80094ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009482:	4b3d      	ldr	r3, [pc, #244]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009488:	4a3b      	ldr	r2, [pc, #236]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 800948a:	f023 0301 	bic.w	r3, r3, #1
 800948e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009492:	f7fc fcd7 	bl	8005e44 <HAL_GetTick>
 8009496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009498:	e008      	b.n	80094ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800949a:	f7fc fcd3 	bl	8005e44 <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d901      	bls.n	80094ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e1f5      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80094ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1ef      	bne.n	800949a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0304 	and.w	r3, r3, #4
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80a6 	beq.w	8009614 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094c8:	2300      	movs	r3, #0
 80094ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80094cc:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80094ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10d      	bne.n	80094f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094d8:	4b27      	ldr	r3, [pc, #156]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80094da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094dc:	4a26      	ldr	r2, [pc, #152]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80094de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e2:	6593      	str	r3, [r2, #88]	; 0x58
 80094e4:	4b24      	ldr	r3, [pc, #144]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 80094e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094f0:	2301      	movs	r3, #1
 80094f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094f4:	4b21      	ldr	r3, [pc, #132]	; (800957c <HAL_RCC_OscConfig+0x508>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d118      	bne.n	8009532 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009500:	4b1e      	ldr	r3, [pc, #120]	; (800957c <HAL_RCC_OscConfig+0x508>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1d      	ldr	r2, [pc, #116]	; (800957c <HAL_RCC_OscConfig+0x508>)
 8009506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800950a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800950c:	f7fc fc9a 	bl	8005e44 <HAL_GetTick>
 8009510:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009512:	e008      	b.n	8009526 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009514:	f7fc fc96 	bl	8005e44 <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2b02      	cmp	r3, #2
 8009520:	d901      	bls.n	8009526 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e1b8      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009526:	4b15      	ldr	r3, [pc, #84]	; (800957c <HAL_RCC_OscConfig+0x508>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f0      	beq.n	8009514 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d108      	bne.n	800954c <HAL_RCC_OscConfig+0x4d8>
 800953a:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 800953c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009540:	4a0d      	ldr	r2, [pc, #52]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009542:	f043 0301 	orr.w	r3, r3, #1
 8009546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800954a:	e029      	b.n	80095a0 <HAL_RCC_OscConfig+0x52c>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	2b05      	cmp	r3, #5
 8009552:	d115      	bne.n	8009580 <HAL_RCC_OscConfig+0x50c>
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955a:	4a07      	ldr	r2, [pc, #28]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 800955c:	f043 0304 	orr.w	r3, r3, #4
 8009560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009564:	4b04      	ldr	r3, [pc, #16]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 8009566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800956a:	4a03      	ldr	r2, [pc, #12]	; (8009578 <HAL_RCC_OscConfig+0x504>)
 800956c:	f043 0301 	orr.w	r3, r3, #1
 8009570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009574:	e014      	b.n	80095a0 <HAL_RCC_OscConfig+0x52c>
 8009576:	bf00      	nop
 8009578:	40021000 	.word	0x40021000
 800957c:	40007000 	.word	0x40007000
 8009580:	4b9d      	ldr	r3, [pc, #628]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009586:	4a9c      	ldr	r2, [pc, #624]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009590:	4b99      	ldr	r3, [pc, #612]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009596:	4a98      	ldr	r2, [pc, #608]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009598:	f023 0304 	bic.w	r3, r3, #4
 800959c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d016      	beq.n	80095d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095a8:	f7fc fc4c 	bl	8005e44 <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095ae:	e00a      	b.n	80095c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095b0:	f7fc fc48 	bl	8005e44 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80095be:	4293      	cmp	r3, r2
 80095c0:	d901      	bls.n	80095c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e168      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095c6:	4b8c      	ldr	r3, [pc, #560]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80095c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0ed      	beq.n	80095b0 <HAL_RCC_OscConfig+0x53c>
 80095d4:	e015      	b.n	8009602 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095d6:	f7fc fc35 	bl	8005e44 <HAL_GetTick>
 80095da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80095dc:	e00a      	b.n	80095f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095de:	f7fc fc31 	bl	8005e44 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e151      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80095f4:	4b80      	ldr	r3, [pc, #512]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80095f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1ed      	bne.n	80095de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009602:	7ffb      	ldrb	r3, [r7, #31]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d105      	bne.n	8009614 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009608:	4b7b      	ldr	r3, [pc, #492]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 800960a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960c:	4a7a      	ldr	r2, [pc, #488]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 800960e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009612:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d03c      	beq.n	800969a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01c      	beq.n	8009662 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009628:	4b73      	ldr	r3, [pc, #460]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 800962a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800962e:	4a72      	ldr	r2, [pc, #456]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009638:	f7fc fc04 	bl	8005e44 <HAL_GetTick>
 800963c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800963e:	e008      	b.n	8009652 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009640:	f7fc fc00 	bl	8005e44 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d901      	bls.n	8009652 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e122      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009652:	4b69      	ldr	r3, [pc, #420]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0ef      	beq.n	8009640 <HAL_RCC_OscConfig+0x5cc>
 8009660:	e01b      	b.n	800969a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009662:	4b65      	ldr	r3, [pc, #404]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009668:	4a63      	ldr	r2, [pc, #396]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009672:	f7fc fbe7 	bl	8005e44 <HAL_GetTick>
 8009676:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009678:	e008      	b.n	800968c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800967a:	f7fc fbe3 	bl	8005e44 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b02      	cmp	r3, #2
 8009686:	d901      	bls.n	800968c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e105      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800968c:	4b5a      	ldr	r3, [pc, #360]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 800968e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1ef      	bne.n	800967a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80f9 	beq.w	8009896 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	f040 80cf 	bne.w	800984c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80096ae:	4b52      	ldr	r3, [pc, #328]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f003 0203 	and.w	r2, r3, #3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096be:	429a      	cmp	r2, r3
 80096c0:	d12c      	bne.n	800971c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096cc:	3b01      	subs	r3, #1
 80096ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d123      	bne.n	800971c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d11b      	bne.n	800971c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d113      	bne.n	800971c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fe:	085b      	lsrs	r3, r3, #1
 8009700:	3b01      	subs	r3, #1
 8009702:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009704:	429a      	cmp	r2, r3
 8009706:	d109      	bne.n	800971c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	3b01      	subs	r3, #1
 8009716:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009718:	429a      	cmp	r2, r3
 800971a:	d071      	beq.n	8009800 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	2b0c      	cmp	r3, #12
 8009720:	d068      	beq.n	80097f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009722:	4b35      	ldr	r3, [pc, #212]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d105      	bne.n	800973a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800972e:	4b32      	ldr	r3, [pc, #200]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e0ac      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800973e:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a2d      	ldr	r2, [pc, #180]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009748:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800974a:	f7fc fb7b 	bl	8005e44 <HAL_GetTick>
 800974e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009750:	e008      	b.n	8009764 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009752:	f7fc fb77 	bl	8005e44 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d901      	bls.n	8009764 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e099      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009764:	4b24      	ldr	r3, [pc, #144]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1f0      	bne.n	8009752 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009770:	4b21      	ldr	r3, [pc, #132]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	4b21      	ldr	r3, [pc, #132]	; (80097fc <HAL_RCC_OscConfig+0x788>)
 8009776:	4013      	ands	r3, r2
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009780:	3a01      	subs	r2, #1
 8009782:	0112      	lsls	r2, r2, #4
 8009784:	4311      	orrs	r1, r2
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800978a:	0212      	lsls	r2, r2, #8
 800978c:	4311      	orrs	r1, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009792:	0852      	lsrs	r2, r2, #1
 8009794:	3a01      	subs	r2, #1
 8009796:	0552      	lsls	r2, r2, #21
 8009798:	4311      	orrs	r1, r2
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800979e:	0852      	lsrs	r2, r2, #1
 80097a0:	3a01      	subs	r2, #1
 80097a2:	0652      	lsls	r2, r2, #25
 80097a4:	4311      	orrs	r1, r2
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097aa:	06d2      	lsls	r2, r2, #27
 80097ac:	430a      	orrs	r2, r1
 80097ae:	4912      	ldr	r1, [pc, #72]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80097b4:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80097ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80097c0:	4b0d      	ldr	r3, [pc, #52]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	4a0c      	ldr	r2, [pc, #48]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80097c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80097cc:	f7fc fb3a 	bl	8005e44 <HAL_GetTick>
 80097d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097d2:	e008      	b.n	80097e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097d4:	f7fc fb36 	bl	8005e44 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d901      	bls.n	80097e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e058      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097e6:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <HAL_RCC_OscConfig+0x784>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0f0      	beq.n	80097d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80097f2:	e050      	b.n	8009896 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e04f      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
 80097f8:	40021000 	.word	0x40021000
 80097fc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009800:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d144      	bne.n	8009896 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800980c:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a23      	ldr	r2, [pc, #140]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 8009812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009816:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009818:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	4a20      	ldr	r2, [pc, #128]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 800981e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009822:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009824:	f7fc fb0e 	bl	8005e44 <HAL_GetTick>
 8009828:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800982a:	e008      	b.n	800983e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800982c:	f7fc fb0a 	bl	8005e44 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e02c      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800983e:	4b18      	ldr	r3, [pc, #96]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0f0      	beq.n	800982c <HAL_RCC_OscConfig+0x7b8>
 800984a:	e024      	b.n	8009896 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	2b0c      	cmp	r3, #12
 8009850:	d01f      	beq.n	8009892 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 8009858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800985c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800985e:	f7fc faf1 	bl	8005e44 <HAL_GetTick>
 8009862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009864:	e008      	b.n	8009878 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009866:	f7fc faed 	bl	8005e44 <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	2b02      	cmp	r3, #2
 8009872:	d901      	bls.n	8009878 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e00f      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009878:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1f0      	bne.n	8009866 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009884:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	4905      	ldr	r1, [pc, #20]	; (80098a0 <HAL_RCC_OscConfig+0x82c>)
 800988a:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <HAL_RCC_OscConfig+0x830>)
 800988c:	4013      	ands	r3, r2
 800988e:	60cb      	str	r3, [r1, #12]
 8009890:	e001      	b.n	8009896 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e000      	b.n	8009898 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3720      	adds	r7, #32
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40021000 	.word	0x40021000
 80098a4:	feeefffc 	.word	0xfeeefffc

080098a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80098b2:	2300      	movs	r3, #0
 80098b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e11d      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098c0:	4b90      	ldr	r3, [pc, #576]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 030f 	and.w	r3, r3, #15
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d910      	bls.n	80098f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ce:	4b8d      	ldr	r3, [pc, #564]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f023 020f 	bic.w	r2, r3, #15
 80098d6:	498b      	ldr	r1, [pc, #556]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	4313      	orrs	r3, r2
 80098dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098de:	4b89      	ldr	r3, [pc, #548]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d001      	beq.n	80098f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e105      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d010      	beq.n	800991e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	4b81      	ldr	r3, [pc, #516]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009908:	429a      	cmp	r2, r3
 800990a:	d908      	bls.n	800991e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800990c:	4b7e      	ldr	r3, [pc, #504]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	497b      	ldr	r1, [pc, #492]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 800991a:	4313      	orrs	r3, r2
 800991c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d079      	beq.n	8009a1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b03      	cmp	r3, #3
 8009930:	d11e      	bne.n	8009970 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009932:	4b75      	ldr	r3, [pc, #468]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0dc      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009942:	f000 fa35 	bl	8009db0 <RCC_GetSysClockFreqFromPLLSource>
 8009946:	4603      	mov	r3, r0
 8009948:	4a70      	ldr	r2, [pc, #448]	; (8009b0c <HAL_RCC_ClockConfig+0x264>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d946      	bls.n	80099dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800994e:	4b6e      	ldr	r3, [pc, #440]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d140      	bne.n	80099dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800995a:	4b6b      	ldr	r3, [pc, #428]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009962:	4a69      	ldr	r2, [pc, #420]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009968:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800996a:	2380      	movs	r3, #128	; 0x80
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	e035      	b.n	80099dc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	2b02      	cmp	r3, #2
 8009976:	d107      	bne.n	8009988 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009978:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d115      	bne.n	80099b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e0b9      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d107      	bne.n	80099a0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009990:	4b5d      	ldr	r3, [pc, #372]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b00      	cmp	r3, #0
 800999a:	d109      	bne.n	80099b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e0ad      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099a0:	4b59      	ldr	r3, [pc, #356]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e0a5      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80099b0:	f000 f8b4 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 80099b4:	4603      	mov	r3, r0
 80099b6:	4a55      	ldr	r2, [pc, #340]	; (8009b0c <HAL_RCC_ClockConfig+0x264>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d90f      	bls.n	80099dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80099bc:	4b52      	ldr	r3, [pc, #328]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80099c8:	4b4f      	ldr	r3, [pc, #316]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099d0:	4a4d      	ldr	r2, [pc, #308]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 80099d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099dc:	4b4a      	ldr	r3, [pc, #296]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f023 0203 	bic.w	r2, r3, #3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	4947      	ldr	r1, [pc, #284]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ee:	f7fc fa29 	bl	8005e44 <HAL_GetTick>
 80099f2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099f4:	e00a      	b.n	8009a0c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099f6:	f7fc fa25 	bl	8005e44 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e077      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a0c:	4b3e      	ldr	r3, [pc, #248]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f003 020c 	and.w	r2, r3, #12
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d1eb      	bne.n	80099f6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b80      	cmp	r3, #128	; 0x80
 8009a22:	d105      	bne.n	8009a30 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009a24:	4b38      	ldr	r3, [pc, #224]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	4a37      	ldr	r2, [pc, #220]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a2e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0302 	and.w	r3, r3, #2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d010      	beq.n	8009a5e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	4b31      	ldr	r3, [pc, #196]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d208      	bcs.n	8009a5e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a4c:	4b2e      	ldr	r3, [pc, #184]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	492b      	ldr	r1, [pc, #172]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a5e:	4b29      	ldr	r3, [pc, #164]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 030f 	and.w	r3, r3, #15
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d210      	bcs.n	8009a8e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a6c:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f023 020f 	bic.w	r2, r3, #15
 8009a74:	4923      	ldr	r1, [pc, #140]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a7c:	4b21      	ldr	r3, [pc, #132]	; (8009b04 <HAL_RCC_ClockConfig+0x25c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d001      	beq.n	8009a8e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e036      	b.n	8009afc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0304 	and.w	r3, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a9a:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	4918      	ldr	r1, [pc, #96]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d009      	beq.n	8009acc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ab8:	4b13      	ldr	r3, [pc, #76]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	00db      	lsls	r3, r3, #3
 8009ac6:	4910      	ldr	r1, [pc, #64]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009acc:	f000 f826 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <HAL_RCC_ClockConfig+0x260>)
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	091b      	lsrs	r3, r3, #4
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	490c      	ldr	r1, [pc, #48]	; (8009b10 <HAL_RCC_ClockConfig+0x268>)
 8009ade:	5ccb      	ldrb	r3, [r1, r3]
 8009ae0:	f003 031f 	and.w	r3, r3, #31
 8009ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae8:	4a0a      	ldr	r2, [pc, #40]	; (8009b14 <HAL_RCC_ClockConfig+0x26c>)
 8009aea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <HAL_RCC_ClockConfig+0x270>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fc f957 	bl	8005da4 <HAL_InitTick>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73fb      	strb	r3, [r7, #15]

  return status;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40022000 	.word	0x40022000
 8009b08:	40021000 	.word	0x40021000
 8009b0c:	04c4b400 	.word	0x04c4b400
 8009b10:	0801a048 	.word	0x0801a048
 8009b14:	20000004 	.word	0x20000004
 8009b18:	20000008 	.word	0x20000008

08009b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b089      	sub	sp, #36	; 0x24
 8009b20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	61fb      	str	r3, [r7, #28]
 8009b26:	2300      	movs	r3, #0
 8009b28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b2a:	4b3e      	ldr	r3, [pc, #248]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 030c 	and.w	r3, r3, #12
 8009b32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b34:	4b3b      	ldr	r3, [pc, #236]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <HAL_RCC_GetSysClockFreq+0x34>
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b0c      	cmp	r3, #12
 8009b48:	d121      	bne.n	8009b8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d11e      	bne.n	8009b8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009b50:	4b34      	ldr	r3, [pc, #208]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0308 	and.w	r3, r3, #8
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d107      	bne.n	8009b6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009b5c:	4b31      	ldr	r3, [pc, #196]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	e005      	b.n	8009b78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009b6c:	4b2d      	ldr	r3, [pc, #180]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	091b      	lsrs	r3, r3, #4
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009b78:	4a2b      	ldr	r2, [pc, #172]	; (8009c28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10d      	bne.n	8009ba4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b8c:	e00a      	b.n	8009ba4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d102      	bne.n	8009b9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009b94:	4b25      	ldr	r3, [pc, #148]	; (8009c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8009b96:	61bb      	str	r3, [r7, #24]
 8009b98:	e004      	b.n	8009ba4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d101      	bne.n	8009ba4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ba0:	4b23      	ldr	r3, [pc, #140]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8009ba2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2b0c      	cmp	r3, #12
 8009ba8:	d134      	bne.n	8009c14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009baa:	4b1e      	ldr	r3, [pc, #120]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d003      	beq.n	8009bc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d003      	beq.n	8009bc8 <HAL_RCC_GetSysClockFreq+0xac>
 8009bc0:	e005      	b.n	8009bce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009bc2:	4b1a      	ldr	r3, [pc, #104]	; (8009c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8009bc4:	617b      	str	r3, [r7, #20]
      break;
 8009bc6:	e005      	b.n	8009bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009bc8:	4b19      	ldr	r3, [pc, #100]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8009bca:	617b      	str	r3, [r7, #20]
      break;
 8009bcc:	e002      	b.n	8009bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	617b      	str	r3, [r7, #20]
      break;
 8009bd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009bd4:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	091b      	lsrs	r3, r3, #4
 8009bda:	f003 030f 	and.w	r3, r3, #15
 8009bde:	3301      	adds	r3, #1
 8009be0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009be2:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	0a1b      	lsrs	r3, r3, #8
 8009be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	fb03 f202 	mul.w	r2, r3, r2
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009bfa:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	0e5b      	lsrs	r3, r3, #25
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	3301      	adds	r3, #1
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009c14:	69bb      	ldr	r3, [r7, #24]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3724      	adds	r7, #36	; 0x24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	40021000 	.word	0x40021000
 8009c28:	0801a060 	.word	0x0801a060
 8009c2c:	00f42400 	.word	0x00f42400
 8009c30:	007a1200 	.word	0x007a1200

08009c34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c38:	4b03      	ldr	r3, [pc, #12]	; (8009c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000004 	.word	0x20000004

08009c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009c50:	f7ff fff0 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009c54:	4602      	mov	r2, r0
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	0a1b      	lsrs	r3, r3, #8
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	4904      	ldr	r1, [pc, #16]	; (8009c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c62:	5ccb      	ldrb	r3, [r1, r3]
 8009c64:	f003 031f 	and.w	r3, r3, #31
 8009c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	40021000 	.word	0x40021000
 8009c74:	0801a058 	.word	0x0801a058

08009c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009c7c:	f7ff ffda 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009c80:	4602      	mov	r2, r0
 8009c82:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	0adb      	lsrs	r3, r3, #11
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	4904      	ldr	r1, [pc, #16]	; (8009ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c8e:	5ccb      	ldrb	r3, [r1, r3]
 8009c90:	f003 031f 	and.w	r3, r3, #31
 8009c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	40021000 	.word	0x40021000
 8009ca0:	0801a058 	.word	0x0801a058

08009ca4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <HAL_RCC_EnableCSS+0x1c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a04      	ldr	r2, [pc, #16]	; (8009cc0 <HAL_RCC_EnableCSS+0x1c>)
 8009cae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cb2:	6013      	str	r3, [r2, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40021000 	.word	0x40021000

08009cc4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd4:	d105      	bne.n	8009ce2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009cd6:	f000 f809 	bl	8009cec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009cda:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ce0:	621a      	str	r2, [r3, #32]
  }
}
 8009ce2:	bf00      	nop
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40021000 	.word	0x40021000

08009cec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
	...

08009cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009d04:	2300      	movs	r3, #0
 8009d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d08:	4b27      	ldr	r3, [pc, #156]	; (8009da8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009d14:	f7ff f8da 	bl	8008ecc <HAL_PWREx_GetVoltageRange>
 8009d18:	6178      	str	r0, [r7, #20]
 8009d1a:	e014      	b.n	8009d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d1c:	4b22      	ldr	r3, [pc, #136]	; (8009da8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d20:	4a21      	ldr	r2, [pc, #132]	; (8009da8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d26:	6593      	str	r3, [r2, #88]	; 0x58
 8009d28:	4b1f      	ldr	r3, [pc, #124]	; (8009da8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009d34:	f7ff f8ca 	bl	8008ecc <HAL_PWREx_GetVoltageRange>
 8009d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009d3a:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3e:	4a1a      	ldr	r2, [pc, #104]	; (8009da8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d4c:	d10b      	bne.n	8009d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b80      	cmp	r3, #128	; 0x80
 8009d52:	d913      	bls.n	8009d7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2ba0      	cmp	r3, #160	; 0xa0
 8009d58:	d902      	bls.n	8009d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	613b      	str	r3, [r7, #16]
 8009d5e:	e00d      	b.n	8009d7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009d60:	2301      	movs	r3, #1
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	e00a      	b.n	8009d7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b7f      	cmp	r3, #127	; 0x7f
 8009d6a:	d902      	bls.n	8009d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	e004      	b.n	8009d7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b70      	cmp	r3, #112	; 0x70
 8009d76:	d101      	bne.n	8009d7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009d78:	2301      	movs	r3, #1
 8009d7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009d7c:	4b0b      	ldr	r3, [pc, #44]	; (8009dac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f023 020f 	bic.w	r2, r3, #15
 8009d84:	4909      	ldr	r1, [pc, #36]	; (8009dac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009d8c:	4b07      	ldr	r3, [pc, #28]	; (8009dac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 030f 	and.w	r3, r3, #15
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d001      	beq.n	8009d9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	40021000 	.word	0x40021000
 8009dac:	40022000 	.word	0x40022000

08009db0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009db6:	4b2d      	ldr	r3, [pc, #180]	; (8009e6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d00b      	beq.n	8009dde <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d825      	bhi.n	8009e18 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d008      	beq.n	8009de4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d11f      	bne.n	8009e18 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009dd8:	4b25      	ldr	r3, [pc, #148]	; (8009e70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009dda:	613b      	str	r3, [r7, #16]
    break;
 8009ddc:	e01f      	b.n	8009e1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009dde:	4b25      	ldr	r3, [pc, #148]	; (8009e74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009de0:	613b      	str	r3, [r7, #16]
    break;
 8009de2:	e01c      	b.n	8009e1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009de4:	4b21      	ldr	r3, [pc, #132]	; (8009e6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0308 	and.w	r3, r3, #8
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d107      	bne.n	8009e00 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009df0:	4b1e      	ldr	r3, [pc, #120]	; (8009e6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	617b      	str	r3, [r7, #20]
 8009dfe:	e005      	b.n	8009e0c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e00:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	091b      	lsrs	r3, r3, #4
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009e0c:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e14:	613b      	str	r3, [r7, #16]
    break;
 8009e16:	e002      	b.n	8009e1e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	613b      	str	r3, [r7, #16]
    break;
 8009e1c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	091b      	lsrs	r3, r3, #4
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	3301      	adds	r3, #1
 8009e2a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e2c:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	0a1b      	lsrs	r3, r3, #8
 8009e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	fb03 f202 	mul.w	r2, r3, r2
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e42:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e44:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	0e5b      	lsrs	r3, r3, #25
 8009e4a:	f003 0303 	and.w	r3, r3, #3
 8009e4e:	3301      	adds	r3, #1
 8009e50:	005b      	lsls	r3, r3, #1
 8009e52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009e5e:	683b      	ldr	r3, [r7, #0]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	371c      	adds	r7, #28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	40021000 	.word	0x40021000
 8009e70:	00f42400 	.word	0x00f42400
 8009e74:	007a1200 	.word	0x007a1200
 8009e78:	0801a060 	.word	0x0801a060

08009e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e84:	2300      	movs	r3, #0
 8009e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e88:	2300      	movs	r3, #0
 8009e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d040      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e9c:	2b80      	cmp	r3, #128	; 0x80
 8009e9e:	d02a      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ea0:	2b80      	cmp	r3, #128	; 0x80
 8009ea2:	d825      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009ea4:	2b60      	cmp	r3, #96	; 0x60
 8009ea6:	d026      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ea8:	2b60      	cmp	r3, #96	; 0x60
 8009eaa:	d821      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009eac:	2b40      	cmp	r3, #64	; 0x40
 8009eae:	d006      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d81d      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d009      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009eb8:	2b20      	cmp	r3, #32
 8009eba:	d010      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009ebc:	e018      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009ebe:	4b89      	ldr	r3, [pc, #548]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	4a88      	ldr	r2, [pc, #544]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009eca:	e015      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f001 fa24 	bl	800b320 <RCCEx_PLLSAI1_Config>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009edc:	e00c      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3320      	adds	r3, #32
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 fb0f 	bl	800b508 <RCCEx_PLLSAI2_Config>
 8009eea:	4603      	mov	r3, r0
 8009eec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009eee:	e003      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	74fb      	strb	r3, [r7, #19]
      break;
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef8:	7cfb      	ldrb	r3, [r7, #19]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10b      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009efe:	4b79      	ldr	r3, [pc, #484]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f04:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f0c:	4975      	ldr	r1, [pc, #468]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009f14:	e001      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f16:	7cfb      	ldrb	r3, [r7, #19]
 8009f18:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d047      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f2e:	d030      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f34:	d82a      	bhi.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f3a:	d02a      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f40:	d824      	bhi.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f46:	d008      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f4c:	d81e      	bhi.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f56:	d010      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009f58:	e018      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009f5a:	4b62      	ldr	r3, [pc, #392]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	4a61      	ldr	r2, [pc, #388]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f64:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f66:	e015      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 f9d6 	bl	800b320 <RCCEx_PLLSAI1_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f78:	e00c      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3320      	adds	r3, #32
 8009f7e:	2100      	movs	r1, #0
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 fac1 	bl	800b508 <RCCEx_PLLSAI2_Config>
 8009f86:	4603      	mov	r3, r0
 8009f88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f8a:	e003      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	74fb      	strb	r3, [r7, #19]
      break;
 8009f90:	e000      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f94:	7cfb      	ldrb	r3, [r7, #19]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009f9a:	4b52      	ldr	r3, [pc, #328]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa8:	494e      	ldr	r1, [pc, #312]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009fb0:	e001      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb2:	7cfb      	ldrb	r3, [r7, #19]
 8009fb4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 809f 	beq.w	800a102 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009fc8:	4b46      	ldr	r3, [pc, #280]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e000      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00d      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fde:	4b41      	ldr	r3, [pc, #260]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe2:	4a40      	ldr	r2, [pc, #256]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8009fea:	4b3e      	ldr	r3, [pc, #248]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ff2:	60bb      	str	r3, [r7, #8]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ffa:	4b3b      	ldr	r3, [pc, #236]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a3a      	ldr	r2, [pc, #232]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a006:	f7fb ff1d 	bl	8005e44 <HAL_GetTick>
 800a00a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a00c:	e009      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a00e:	f7fb ff19 	bl	8005e44 <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d902      	bls.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	74fb      	strb	r3, [r7, #19]
        break;
 800a020:	e005      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a022:	4b31      	ldr	r3, [pc, #196]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0ef      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a02e:	7cfb      	ldrb	r3, [r7, #19]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d15b      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a034:	4b2b      	ldr	r3, [pc, #172]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a03e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01f      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d019      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a052:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a05c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a05e:	4b21      	ldr	r3, [pc, #132]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a064:	4a1f      	ldr	r2, [pc, #124]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a06a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a06e:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a074:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a07a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a07e:	4a19      	ldr	r2, [pc, #100]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d016      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a090:	f7fb fed8 	bl	8005e44 <HAL_GetTick>
 800a094:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a096:	e00b      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a098:	f7fb fed4 	bl	8005e44 <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d902      	bls.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	74fb      	strb	r3, [r7, #19]
            break;
 800a0ae:	e006      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0b0:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0ec      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a0be:	7cfb      	ldrb	r3, [r7, #19]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10c      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0c4:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0d4:	4903      	ldr	r1, [pc, #12]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a0dc:	e008      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0de:	7cfb      	ldrb	r3, [r7, #19]
 800a0e0:	74bb      	strb	r3, [r7, #18]
 800a0e2:	e005      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a0e4:	40021000 	.word	0x40021000
 800a0e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ec:	7cfb      	ldrb	r3, [r7, #19]
 800a0ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0f0:	7c7b      	ldrb	r3, [r7, #17]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d105      	bne.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0f6:	4ba0      	ldr	r3, [pc, #640]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	4a9f      	ldr	r2, [pc, #636]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a100:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a10e:	4b9a      	ldr	r3, [pc, #616]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a114:	f023 0203 	bic.w	r2, r3, #3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11c:	4996      	ldr	r1, [pc, #600]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00a      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a130:	4b91      	ldr	r3, [pc, #580]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a136:	f023 020c 	bic.w	r2, r3, #12
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	498e      	ldr	r1, [pc, #568]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a140:	4313      	orrs	r3, r2
 800a142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a152:	4b89      	ldr	r3, [pc, #548]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a158:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a160:	4985      	ldr	r1, [pc, #532]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a162:	4313      	orrs	r3, r2
 800a164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00a      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a174:	4b80      	ldr	r3, [pc, #512]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a182:	497d      	ldr	r1, [pc, #500]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a184:	4313      	orrs	r3, r2
 800a186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0310 	and.w	r3, r3, #16
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a196:	4b78      	ldr	r3, [pc, #480]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1a4:	4974      	ldr	r1, [pc, #464]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0320 	and.w	r3, r3, #32
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a1b8:	4b6f      	ldr	r3, [pc, #444]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c6:	496c      	ldr	r1, [pc, #432]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1da:	4b67      	ldr	r3, [pc, #412]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1e8:	4963      	ldr	r1, [pc, #396]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a1fc:	4b5e      	ldr	r3, [pc, #376]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a20a:	495b      	ldr	r1, [pc, #364]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a21e:	4b56      	ldr	r3, [pc, #344]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a224:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22c:	4952      	ldr	r1, [pc, #328]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a240:	4b4d      	ldr	r3, [pc, #308]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a24e:	494a      	ldr	r1, [pc, #296]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a250:	4313      	orrs	r3, r2
 800a252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a262:	4b45      	ldr	r3, [pc, #276]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a270:	4941      	ldr	r1, [pc, #260]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a272:	4313      	orrs	r3, r2
 800a274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00a      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a284:	4b3c      	ldr	r3, [pc, #240]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a28a:	f023 0203 	bic.w	r2, r3, #3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a292:	4939      	ldr	r1, [pc, #228]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a294:	4313      	orrs	r3, r2
 800a296:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d028      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2a6:	4b34      	ldr	r3, [pc, #208]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b4:	4930      	ldr	r1, [pc, #192]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2c4:	d106      	bne.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a2c6:	4b2c      	ldr	r3, [pc, #176]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	4a2b      	ldr	r2, [pc, #172]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2d0:	60d3      	str	r3, [r2, #12]
 800a2d2:	e011      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2dc:	d10c      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 f81b 	bl	800b320 <RCCEx_PLLSAI1_Config>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a2ee:	7cfb      	ldrb	r3, [r7, #19]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a2f4:	7cfb      	ldrb	r3, [r7, #19]
 800a2f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d04d      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a30c:	d108      	bne.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a30e:	4b1a      	ldr	r3, [pc, #104]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a310:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a314:	4a18      	ldr	r2, [pc, #96]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a31a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a31e:	e012      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a320:	4b15      	ldr	r3, [pc, #84]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a326:	4a14      	ldr	r2, [pc, #80]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a32c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a330:	4b11      	ldr	r3, [pc, #68]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a33e:	490e      	ldr	r1, [pc, #56]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a340:	4313      	orrs	r3, r2
 800a342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a34a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a34e:	d106      	bne.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a350:	4b09      	ldr	r3, [pc, #36]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	4a08      	ldr	r2, [pc, #32]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a35a:	60d3      	str	r3, [r2, #12]
 800a35c:	e020      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a366:	d109      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a368:	4b03      	ldr	r3, [pc, #12]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	4a02      	ldr	r2, [pc, #8]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a36e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a372:	60d3      	str	r3, [r2, #12]
 800a374:	e014      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a376:	bf00      	nop
 800a378:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a384:	d10c      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3304      	adds	r3, #4
 800a38a:	2101      	movs	r1, #1
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 ffc7 	bl	800b320 <RCCEx_PLLSAI1_Config>
 800a392:	4603      	mov	r3, r0
 800a394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a396:	7cfb      	ldrb	r3, [r7, #19]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a39c:	7cfb      	ldrb	r3, [r7, #19]
 800a39e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d028      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3ac:	4b4a      	ldr	r3, [pc, #296]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ba:	4947      	ldr	r1, [pc, #284]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ca:	d106      	bne.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3cc:	4b42      	ldr	r3, [pc, #264]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	4a41      	ldr	r2, [pc, #260]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3d6:	60d3      	str	r3, [r2, #12]
 800a3d8:	e011      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3e2:	d10c      	bne.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 ff98 	bl	800b320 <RCCEx_PLLSAI1_Config>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3f4:	7cfb      	ldrb	r3, [r7, #19]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a3fa:	7cfb      	ldrb	r3, [r7, #19]
 800a3fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d01e      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a40a:	4b33      	ldr	r3, [pc, #204]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a410:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a41a:	492f      	ldr	r1, [pc, #188]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a42c:	d10c      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3304      	adds	r3, #4
 800a432:	2102      	movs	r1, #2
 800a434:	4618      	mov	r0, r3
 800a436:	f000 ff73 	bl	800b320 <RCCEx_PLLSAI1_Config>
 800a43a:	4603      	mov	r3, r0
 800a43c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a43e:	7cfb      	ldrb	r3, [r7, #19]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a444:	7cfb      	ldrb	r3, [r7, #19]
 800a446:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a454:	4b20      	ldr	r3, [pc, #128]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a45a:	f023 0204 	bic.w	r2, r3, #4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a464:	491c      	ldr	r1, [pc, #112]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a466:	4313      	orrs	r3, r2
 800a468:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00b      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a478:	4b17      	ldr	r3, [pc, #92]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a47a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a47e:	f023 0218 	bic.w	r2, r3, #24
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a488:	4913      	ldr	r1, [pc, #76]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d017      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a49c:	4b0e      	ldr	r3, [pc, #56]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a49e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ac:	490a      	ldr	r1, [pc, #40]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4be:	d105      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4c0:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	4a04      	ldr	r2, [pc, #16]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a4cc:	7cbb      	ldrb	r3, [r7, #18]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	40021000 	.word	0x40021000

0800a4dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4ee:	d13e      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a4f0:	4bb6      	ldr	r3, [pc, #728]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4fa:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a502:	d028      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a50a:	f200 86f4 	bhi.w	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a514:	d005      	beq.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a51c:	d00e      	beq.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800a51e:	f000 beea 	b.w	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a522:	4baa      	ldr	r3, [pc, #680]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a528:	f003 0302 	and.w	r3, r3, #2
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	f040 86e4 	bne.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800a532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a536:	61fb      	str	r3, [r7, #28]
      break;
 800a538:	f000 bedf 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a53c:	4ba3      	ldr	r3, [pc, #652]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a53e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b02      	cmp	r3, #2
 800a548:	f040 86d9 	bne.w	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800a54c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a550:	61fb      	str	r3, [r7, #28]
      break;
 800a552:	f000 bed4 	b.w	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a556:	4b9d      	ldr	r3, [pc, #628]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a55e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a562:	f040 86ce 	bne.w	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800a566:	4b9a      	ldr	r3, [pc, #616]	; (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800a568:	61fb      	str	r3, [r7, #28]
      break;
 800a56a:	f000 beca 	b.w	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a56e:	4b97      	ldr	r3, [pc, #604]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f003 0303 	and.w	r3, r3, #3
 800a576:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d036      	beq.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2b03      	cmp	r3, #3
 800a582:	d840      	bhi.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d003      	beq.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d020      	beq.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800a590:	e039      	b.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a592:	4b8e      	ldr	r3, [pc, #568]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0302 	and.w	r3, r3, #2
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d116      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a59e:	4b8b      	ldr	r3, [pc, #556]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0308 	and.w	r3, r3, #8
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d005      	beq.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a5aa:	4b88      	ldr	r3, [pc, #544]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	091b      	lsrs	r3, r3, #4
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	e005      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a5b6:	4b85      	ldr	r3, [pc, #532]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5bc:	0a1b      	lsrs	r3, r3, #8
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	4a84      	ldr	r2, [pc, #528]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a5ca:	e01f      	b.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61bb      	str	r3, [r7, #24]
      break;
 800a5d0:	e01c      	b.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5d2:	4b7e      	ldr	r3, [pc, #504]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5de:	d102      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a5e0:	4b7d      	ldr	r3, [pc, #500]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a5e2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a5e4:	e012      	b.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61bb      	str	r3, [r7, #24]
      break;
 800a5ea:	e00f      	b.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5ec:	4b77      	ldr	r3, [pc, #476]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5f8:	d102      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a5fa:	4b78      	ldr	r3, [pc, #480]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a5fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a5fe:	e005      	b.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	61bb      	str	r3, [r7, #24]
      break;
 800a604:	e002      	b.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	61bb      	str	r3, [r7, #24]
      break;
 800a60a:	bf00      	nop
    }

    switch(PeriphClk)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a612:	f000 8606 	beq.w	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a61c:	f200 8673 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a626:	f000 8469 	beq.w	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a630:	f200 8669 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a63a:	f000 8531 	beq.w	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a644:	f200 865f 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a64e:	f000 8187 	beq.w	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a658:	f200 8655 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a662:	f000 80cd 	beq.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a66c:	f200 864b 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a676:	f000 8430 	beq.w	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a680:	f200 8641 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a68a:	f000 83e4 	beq.w	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a694:	f200 8637 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	f000 80af 	beq.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a8:	f200 862d 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b2:	f000 809d 	beq.w	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6bc:	f200 8623 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6c6:	f000 808b 	beq.w	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6d0:	f200 8619 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6da:	f000 8554 	beq.w	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6e4:	f200 860f 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6ee:	f000 8500 	beq.w	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6f8:	f200 8605 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a702:	f000 84a1 	beq.w	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a70c:	f200 85fb 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	f000 846c 	beq.w	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b80      	cmp	r3, #128	; 0x80
 800a71c:	f200 85f3 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b20      	cmp	r3, #32
 800a724:	d84c      	bhi.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 85ec 	beq.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3b01      	subs	r3, #1
 800a732:	2b1f      	cmp	r3, #31
 800a734:	f200 85e7 	bhi.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a738:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73e:	bf00      	nop
 800a740:	0800ab55 	.word	0x0800ab55
 800a744:	0800abc3 	.word	0x0800abc3
 800a748:	0800b307 	.word	0x0800b307
 800a74c:	0800ac57 	.word	0x0800ac57
 800a750:	0800b307 	.word	0x0800b307
 800a754:	0800b307 	.word	0x0800b307
 800a758:	0800b307 	.word	0x0800b307
 800a75c:	0800accf 	.word	0x0800accf
 800a760:	0800b307 	.word	0x0800b307
 800a764:	0800b307 	.word	0x0800b307
 800a768:	0800b307 	.word	0x0800b307
 800a76c:	0800b307 	.word	0x0800b307
 800a770:	0800b307 	.word	0x0800b307
 800a774:	0800b307 	.word	0x0800b307
 800a778:	0800b307 	.word	0x0800b307
 800a77c:	0800ad53 	.word	0x0800ad53
 800a780:	0800b307 	.word	0x0800b307
 800a784:	0800b307 	.word	0x0800b307
 800a788:	0800b307 	.word	0x0800b307
 800a78c:	0800b307 	.word	0x0800b307
 800a790:	0800b307 	.word	0x0800b307
 800a794:	0800b307 	.word	0x0800b307
 800a798:	0800b307 	.word	0x0800b307
 800a79c:	0800b307 	.word	0x0800b307
 800a7a0:	0800b307 	.word	0x0800b307
 800a7a4:	0800b307 	.word	0x0800b307
 800a7a8:	0800b307 	.word	0x0800b307
 800a7ac:	0800b307 	.word	0x0800b307
 800a7b0:	0800b307 	.word	0x0800b307
 800a7b4:	0800b307 	.word	0x0800b307
 800a7b8:	0800b307 	.word	0x0800b307
 800a7bc:	0800add5 	.word	0x0800add5
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b40      	cmp	r3, #64	; 0x40
 800a7c4:	f000 83e8 	beq.w	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a7c8:	f000 bd9d 	b.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7cc:	40021000 	.word	0x40021000
 800a7d0:	0003d090 	.word	0x0003d090
 800a7d4:	0801a060 	.word	0x0801a060
 800a7d8:	00f42400 	.word	0x00f42400
 800a7dc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a7e0:	69b9      	ldr	r1, [r7, #24]
 800a7e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a7e6:	f000 ff83 	bl	800b6f0 <RCCEx_GetSAIxPeriphCLKFreq>
 800a7ea:	61f8      	str	r0, [r7, #28]
      break;
 800a7ec:	f000 bd8e 	b.w	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a7f0:	69b9      	ldr	r1, [r7, #24]
 800a7f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a7f6:	f000 ff7b 	bl	800b6f0 <RCCEx_GetSAIxPeriphCLKFreq>
 800a7fa:	61f8      	str	r0, [r7, #28]
      break;
 800a7fc:	f000 bd86 	b.w	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a800:	4b9a      	ldr	r3, [pc, #616]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a806:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a812:	d015      	beq.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a81a:	f200 8092 	bhi.w	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a824:	d029      	beq.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a82c:	f200 8089 	bhi.w	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d07b      	beq.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a83c:	d04a      	beq.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800a83e:	e080      	b.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a840:	4b8a      	ldr	r3, [pc, #552]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d17d      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a84c:	4b87      	ldr	r3, [pc, #540]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0308 	and.w	r3, r3, #8
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800a858:	4b84      	ldr	r3, [pc, #528]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	091b      	lsrs	r3, r3, #4
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	e005      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800a864:	4b81      	ldr	r3, [pc, #516]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a86a:	0a1b      	lsrs	r3, r3, #8
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	4a7f      	ldr	r2, [pc, #508]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a876:	61fb      	str	r3, [r7, #28]
          break;
 800a878:	e066      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a87a:	4b7c      	ldr	r3, [pc, #496]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a886:	d162      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a888:	4b78      	ldr	r3, [pc, #480]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a894:	d15b      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a896:	4b75      	ldr	r3, [pc, #468]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	0a1b      	lsrs	r3, r3, #8
 800a89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8a0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	fb03 f202 	mul.w	r2, r3, r2
 800a8aa:	4b70      	ldr	r3, [pc, #448]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	091b      	lsrs	r3, r3, #4
 800a8b0:	f003 030f 	and.w	r3, r3, #15
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a8bc:	4b6b      	ldr	r3, [pc, #428]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	0d5b      	lsrs	r3, r3, #21
 800a8c2:	f003 0303 	and.w	r3, r3, #3
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d0:	61fb      	str	r3, [r7, #28]
          break;
 800a8d2:	e03c      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a8d4:	4b65      	ldr	r3, [pc, #404]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8e0:	d138      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a8e2:	4b62      	ldr	r3, [pc, #392]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ee:	d131      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a8f0:	4b5e      	ldr	r3, [pc, #376]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	0a1b      	lsrs	r3, r3, #8
 800a8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	fb03 f202 	mul.w	r2, r3, r2
 800a904:	4b59      	ldr	r3, [pc, #356]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	091b      	lsrs	r3, r3, #4
 800a90a:	f003 030f 	and.w	r3, r3, #15
 800a90e:	3301      	adds	r3, #1
 800a910:	fbb2 f3f3 	udiv	r3, r2, r3
 800a914:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a916:	4b55      	ldr	r3, [pc, #340]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	0d5b      	lsrs	r3, r3, #21
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	3301      	adds	r3, #1
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92a:	61fb      	str	r3, [r7, #28]
          break;
 800a92c:	e012      	b.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a92e:	4b4f      	ldr	r3, [pc, #316]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d10e      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800a93c:	4b4d      	ldr	r3, [pc, #308]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a93e:	61fb      	str	r3, [r7, #28]
          break;
 800a940:	e00b      	b.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800a942:	bf00      	nop
 800a944:	f000 bce2 	b.w	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a948:	bf00      	nop
 800a94a:	f000 bcdf 	b.w	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a94e:	bf00      	nop
 800a950:	f000 bcdc 	b.w	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a954:	bf00      	nop
 800a956:	f000 bcd9 	b.w	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a95a:	bf00      	nop
        break;
 800a95c:	f000 bcd6 	b.w	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800a960:	4b42      	ldr	r3, [pc, #264]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a96a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a96e:	d13d      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a970:	4b3e      	ldr	r3, [pc, #248]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a97c:	f040 84c5 	bne.w	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800a980:	4b3a      	ldr	r3, [pc, #232]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a98c:	f040 84bd 	bne.w	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a990:	4b36      	ldr	r3, [pc, #216]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	0a1b      	lsrs	r3, r3, #8
 800a996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a99a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	fb03 f202 	mul.w	r2, r3, r2
 800a9a4:	4b31      	ldr	r3, [pc, #196]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	091b      	lsrs	r3, r3, #4
 800a9aa:	f003 030f 	and.w	r3, r3, #15
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a9b6:	4b2d      	ldr	r3, [pc, #180]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	0edb      	lsrs	r3, r3, #27
 800a9bc:	f003 031f 	and.w	r3, r3, #31
 800a9c0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a9c8:	4b28      	ldr	r3, [pc, #160]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800a9d4:	2311      	movs	r3, #17
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	e001      	b.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800a9da:	2307      	movs	r3, #7
 800a9dc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e6:	61fb      	str	r3, [r7, #28]
      break;
 800a9e8:	f000 bc8f 	b.w	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a9ec:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a9fe:	d016      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aa06:	f200 809b 	bhi.w	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa10:	d032      	beq.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa18:	f200 8092 	bhi.w	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8084 	beq.w	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa2a:	d052      	beq.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800aa2c:	e088      	b.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800aa2e:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	f040 8084 	bne.w	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800aa3c:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0308 	and.w	r3, r3, #8
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d005      	beq.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aa48:	4b08      	ldr	r3, [pc, #32]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	091b      	lsrs	r3, r3, #4
 800aa4e:	f003 030f 	and.w	r3, r3, #15
 800aa52:	e005      	b.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa5a:	0a1b      	lsrs	r3, r3, #8
 800aa5c:	f003 030f 	and.w	r3, r3, #15
 800aa60:	4a03      	ldr	r2, [pc, #12]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aa62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa66:	61fb      	str	r3, [r7, #28]
          break;
 800aa68:	e06c      	b.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800aa6a:	bf00      	nop
 800aa6c:	40021000 	.word	0x40021000
 800aa70:	0801a060 	.word	0x0801a060
 800aa74:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800aa78:	4ba5      	ldr	r3, [pc, #660]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa84:	d160      	bne.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800aa86:	4ba2      	ldr	r3, [pc, #648]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa92:	d159      	bne.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800aa94:	4b9e      	ldr	r3, [pc, #632]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	0a1b      	lsrs	r3, r3, #8
 800aa9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa9e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	fb03 f202 	mul.w	r2, r3, r2
 800aaa8:	4b99      	ldr	r3, [pc, #612]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	091b      	lsrs	r3, r3, #4
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	3301      	adds	r3, #1
 800aab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800aaba:	4b95      	ldr	r3, [pc, #596]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	0d5b      	lsrs	r3, r3, #21
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	3301      	adds	r3, #1
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aace:	61fb      	str	r3, [r7, #28]
          break;
 800aad0:	e03a      	b.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800aad2:	4b8f      	ldr	r3, [pc, #572]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aade:	d135      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800aae0:	4b8b      	ldr	r3, [pc, #556]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaec:	d12e      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800aaee:	4b88      	ldr	r3, [pc, #544]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	0a1b      	lsrs	r3, r3, #8
 800aaf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	fb03 f202 	mul.w	r2, r3, r2
 800ab02:	4b83      	ldr	r3, [pc, #524]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	091b      	lsrs	r3, r3, #4
 800ab08:	f003 030f 	and.w	r3, r3, #15
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab12:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ab14:	4b7e      	ldr	r3, [pc, #504]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	0d5b      	lsrs	r3, r3, #21
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	3301      	adds	r3, #1
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab28:	61fb      	str	r3, [r7, #28]
          break;
 800ab2a:	e00f      	b.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ab2c:	4b78      	ldr	r3, [pc, #480]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d10a      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800ab3a:	4b76      	ldr	r3, [pc, #472]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ab3c:	61fb      	str	r3, [r7, #28]
          break;
 800ab3e:	e007      	b.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800ab40:	bf00      	nop
 800ab42:	e3e2      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab44:	bf00      	nop
 800ab46:	e3e0      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab48:	bf00      	nop
 800ab4a:	e3de      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab4c:	bf00      	nop
 800ab4e:	e3dc      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab50:	bf00      	nop
      break;
 800ab52:	e3da      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ab54:	4b6e      	ldr	r3, [pc, #440]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d827      	bhi.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ab66:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800ab7d 	.word	0x0800ab7d
 800ab70:	0800ab85 	.word	0x0800ab85
 800ab74:	0800ab8d 	.word	0x0800ab8d
 800ab78:	0800aba1 	.word	0x0800aba1
          frequency = HAL_RCC_GetPCLK2Freq();
 800ab7c:	f7ff f87c 	bl	8009c78 <HAL_RCC_GetPCLK2Freq>
 800ab80:	61f8      	str	r0, [r7, #28]
          break;
 800ab82:	e01d      	b.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab84:	f7fe ffca 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ab88:	61f8      	str	r0, [r7, #28]
          break;
 800ab8a:	e019      	b.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab8c:	4b60      	ldr	r3, [pc, #384]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab98:	d10f      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800ab9a:	4b5f      	ldr	r3, [pc, #380]	; (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab9c:	61fb      	str	r3, [r7, #28]
          break;
 800ab9e:	e00c      	b.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aba0:	4b5b      	ldr	r3, [pc, #364]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d107      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800abae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abb2:	61fb      	str	r3, [r7, #28]
          break;
 800abb4:	e003      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800abb6:	bf00      	nop
 800abb8:	e3a8      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abba:	bf00      	nop
 800abbc:	e3a6      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abbe:	bf00      	nop
        break;
 800abc0:	e3a4      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800abc2:	4b53      	ldr	r3, [pc, #332]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc8:	f003 030c 	and.w	r3, r3, #12
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b0c      	cmp	r3, #12
 800abd2:	d83a      	bhi.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800ac11 	.word	0x0800ac11
 800abe0:	0800ac4b 	.word	0x0800ac4b
 800abe4:	0800ac4b 	.word	0x0800ac4b
 800abe8:	0800ac4b 	.word	0x0800ac4b
 800abec:	0800ac19 	.word	0x0800ac19
 800abf0:	0800ac4b 	.word	0x0800ac4b
 800abf4:	0800ac4b 	.word	0x0800ac4b
 800abf8:	0800ac4b 	.word	0x0800ac4b
 800abfc:	0800ac21 	.word	0x0800ac21
 800ac00:	0800ac4b 	.word	0x0800ac4b
 800ac04:	0800ac4b 	.word	0x0800ac4b
 800ac08:	0800ac4b 	.word	0x0800ac4b
 800ac0c:	0800ac35 	.word	0x0800ac35
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac10:	f7ff f81c 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800ac14:	61f8      	str	r0, [r7, #28]
          break;
 800ac16:	e01d      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac18:	f7fe ff80 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ac1c:	61f8      	str	r0, [r7, #28]
          break;
 800ac1e:	e019      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac20:	4b3b      	ldr	r3, [pc, #236]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac2c:	d10f      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800ac2e:	4b3a      	ldr	r3, [pc, #232]	; (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac30:	61fb      	str	r3, [r7, #28]
          break;
 800ac32:	e00c      	b.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac34:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d107      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800ac42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac46:	61fb      	str	r3, [r7, #28]
          break;
 800ac48:	e003      	b.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800ac4a:	bf00      	nop
 800ac4c:	e35e      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac4e:	bf00      	nop
 800ac50:	e35c      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac52:	bf00      	nop
        break;
 800ac54:	e35a      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ac56:	4b2e      	ldr	r3, [pc, #184]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b30      	cmp	r3, #48	; 0x30
 800ac66:	d021      	beq.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b30      	cmp	r3, #48	; 0x30
 800ac6c:	d829      	bhi.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2b20      	cmp	r3, #32
 800ac72:	d011      	beq.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	d823      	bhi.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b10      	cmp	r3, #16
 800ac84:	d004      	beq.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800ac86:	e01c      	b.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac88:	f7fe ffe0 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800ac8c:	61f8      	str	r0, [r7, #28]
          break;
 800ac8e:	e01d      	b.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac90:	f7fe ff44 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ac94:	61f8      	str	r0, [r7, #28]
          break;
 800ac96:	e019      	b.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac98:	4b1d      	ldr	r3, [pc, #116]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aca4:	d10f      	bne.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800aca6:	4b1c      	ldr	r3, [pc, #112]	; (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aca8:	61fb      	str	r3, [r7, #28]
          break;
 800acaa:	e00c      	b.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800acac:	4b18      	ldr	r3, [pc, #96]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d107      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800acba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acbe:	61fb      	str	r3, [r7, #28]
          break;
 800acc0:	e003      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800acc2:	bf00      	nop
 800acc4:	e322      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800acc6:	bf00      	nop
 800acc8:	e320      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800acca:	bf00      	nop
        break;
 800accc:	e31e      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800acce:	4b10      	ldr	r3, [pc, #64]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2bc0      	cmp	r3, #192	; 0xc0
 800acde:	d027      	beq.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2bc0      	cmp	r3, #192	; 0xc0
 800ace4:	d82f      	bhi.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b80      	cmp	r3, #128	; 0x80
 800acea:	d017      	beq.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b80      	cmp	r3, #128	; 0x80
 800acf0:	d829      	bhi.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b40      	cmp	r3, #64	; 0x40
 800acfc:	d004      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800acfe:	e022      	b.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad00:	f7fe ffa4 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800ad04:	61f8      	str	r0, [r7, #28]
          break;
 800ad06:	e023      	b.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad08:	f7fe ff08 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ad0c:	61f8      	str	r0, [r7, #28]
          break;
 800ad0e:	e01f      	b.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800ad10:	40021000 	.word	0x40021000
 800ad14:	02dc6c00 	.word	0x02dc6c00
 800ad18:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad1c:	4b9b      	ldr	r3, [pc, #620]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad28:	d10f      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800ad2a:	4b99      	ldr	r3, [pc, #612]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ad2c:	61fb      	str	r3, [r7, #28]
          break;
 800ad2e:	e00c      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad30:	4b96      	ldr	r3, [pc, #600]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d107      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800ad3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad42:	61fb      	str	r3, [r7, #28]
          break;
 800ad44:	e003      	b.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800ad46:	bf00      	nop
 800ad48:	e2e0      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad4a:	bf00      	nop
 800ad4c:	e2de      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad4e:	bf00      	nop
        break;
 800ad50:	e2dc      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ad52:	4b8e      	ldr	r3, [pc, #568]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad64:	d025      	beq.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad6c:	d82c      	bhi.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad74:	d013      	beq.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad7c:	d824      	bhi.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad8a:	d004      	beq.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800ad8c:	e01c      	b.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad8e:	f7fe ff5d 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800ad92:	61f8      	str	r0, [r7, #28]
          break;
 800ad94:	e01d      	b.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad96:	f7fe fec1 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ad9a:	61f8      	str	r0, [r7, #28]
          break;
 800ad9c:	e019      	b.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad9e:	4b7b      	ldr	r3, [pc, #492]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ada6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adaa:	d10f      	bne.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800adac:	4b78      	ldr	r3, [pc, #480]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800adae:	61fb      	str	r3, [r7, #28]
          break;
 800adb0:	e00c      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800adb2:	4b76      	ldr	r3, [pc, #472]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800adb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d107      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800adc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adc4:	61fb      	str	r3, [r7, #28]
          break;
 800adc6:	e003      	b.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800adc8:	bf00      	nop
 800adca:	e29f      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adcc:	bf00      	nop
 800adce:	e29d      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800add0:	bf00      	nop
        break;
 800add2:	e29b      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800add4:	4b6d      	ldr	r3, [pc, #436]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800add6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ade6:	d025      	beq.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800adee:	d82c      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adf6:	d013      	beq.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adfe:	d824      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d004      	beq.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae0c:	d004      	beq.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800ae0e:	e01c      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae10:	f7fe ff1c 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800ae14:	61f8      	str	r0, [r7, #28]
          break;
 800ae16:	e01d      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae18:	f7fe fe80 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ae1c:	61f8      	str	r0, [r7, #28]
          break;
 800ae1e:	e019      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae20:	4b5a      	ldr	r3, [pc, #360]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae2c:	d10f      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800ae2e:	4b58      	ldr	r3, [pc, #352]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ae30:	61fb      	str	r3, [r7, #28]
          break;
 800ae32:	e00c      	b.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae34:	4b55      	ldr	r3, [pc, #340]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d107      	bne.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800ae42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae46:	61fb      	str	r3, [r7, #28]
          break;
 800ae48:	e003      	b.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800ae4a:	bf00      	nop
 800ae4c:	e25e      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae4e:	bf00      	nop
 800ae50:	e25c      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae52:	bf00      	nop
        break;
 800ae54:	e25a      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae56:	4b4d      	ldr	r3, [pc, #308]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae68:	d007      	beq.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae70:	d12f      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae72:	f7fe fe53 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ae76:	61f8      	str	r0, [r7, #28]
          break;
 800ae78:	e02e      	b.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800ae7a:	4b44      	ldr	r3, [pc, #272]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae86:	d126      	bne.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800ae88:	4b40      	ldr	r3, [pc, #256]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d020      	beq.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ae94:	4b3d      	ldr	r3, [pc, #244]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	0a1b      	lsrs	r3, r3, #8
 800ae9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae9e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	fb03 f202 	mul.w	r2, r3, r2
 800aea8:	4b38      	ldr	r3, [pc, #224]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	091b      	lsrs	r3, r3, #4
 800aeae:	f003 030f 	and.w	r3, r3, #15
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800aeba:	4b34      	ldr	r3, [pc, #208]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	0e5b      	lsrs	r3, r3, #25
 800aec0:	f003 0303 	and.w	r3, r3, #3
 800aec4:	3301      	adds	r3, #1
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aece:	61fb      	str	r3, [r7, #28]
          break;
 800aed0:	e001      	b.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800aed2:	bf00      	nop
 800aed4:	e21a      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aed6:	bf00      	nop
        break;
 800aed8:	e218      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800aeda:	4b2c      	ldr	r3, [pc, #176]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aedc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d103      	bne.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800aeec:	f7fe fec4 	bl	8009c78 <HAL_RCC_GetPCLK2Freq>
 800aef0:	61f8      	str	r0, [r7, #28]
        break;
 800aef2:	e20b      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800aef4:	f7fe fe12 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800aef8:	61f8      	str	r0, [r7, #28]
        break;
 800aefa:	e207      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800aefc:	4b23      	ldr	r3, [pc, #140]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aefe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af02:	f003 0318 	and.w	r3, r3, #24
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b10      	cmp	r3, #16
 800af0c:	d010      	beq.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b10      	cmp	r3, #16
 800af12:	d834      	bhi.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b08      	cmp	r3, #8
 800af1e:	d024      	beq.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800af20:	e02d      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800af22:	69b9      	ldr	r1, [r7, #24]
 800af24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af28:	f000 fbe2 	bl	800b6f0 <RCCEx_GetSAIxPeriphCLKFreq>
 800af2c:	61f8      	str	r0, [r7, #28]
          break;
 800af2e:	e02b      	b.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800af30:	4b16      	ldr	r3, [pc, #88]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0302 	and.w	r3, r3, #2
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d122      	bne.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800af3c:	4b13      	ldr	r3, [pc, #76]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0308 	and.w	r3, r3, #8
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800af48:	4b10      	ldr	r3, [pc, #64]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	091b      	lsrs	r3, r3, #4
 800af4e:	f003 030f 	and.w	r3, r3, #15
 800af52:	e005      	b.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800af54:	4b0d      	ldr	r3, [pc, #52]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af5a:	0a1b      	lsrs	r3, r3, #8
 800af5c:	f003 030f 	and.w	r3, r3, #15
 800af60:	4a0c      	ldr	r2, [pc, #48]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800af62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af66:	61fb      	str	r3, [r7, #28]
          break;
 800af68:	e00b      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af6a:	4b08      	ldr	r3, [pc, #32]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af76:	d106      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800af7a:	61fb      	str	r3, [r7, #28]
          break;
 800af7c:	e003      	b.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800af7e:	bf00      	nop
 800af80:	e1c4      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af82:	bf00      	nop
 800af84:	e1c2      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af86:	bf00      	nop
        break;
 800af88:	e1c0      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800af8a:	bf00      	nop
 800af8c:	40021000 	.word	0x40021000
 800af90:	00f42400 	.word	0x00f42400
 800af94:	0801a060 	.word	0x0801a060
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800af98:	4b96      	ldr	r3, [pc, #600]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800af9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afaa:	d013      	beq.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb2:	d819      	bhi.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d004      	beq.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc0:	d004      	beq.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800afc2:	e011      	b.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800afc4:	f7fe fe42 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800afc8:	61f8      	str	r0, [r7, #28]
          break;
 800afca:	e010      	b.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800afcc:	f7fe fda6 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800afd0:	61f8      	str	r0, [r7, #28]
          break;
 800afd2:	e00c      	b.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afd4:	4b87      	ldr	r3, [pc, #540]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe0:	d104      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800afe2:	4b85      	ldr	r3, [pc, #532]	; (800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800afe4:	61fb      	str	r3, [r7, #28]
          break;
 800afe6:	e001      	b.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800afe8:	bf00      	nop
 800afea:	e18f      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800afec:	bf00      	nop
        break;
 800afee:	e18d      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800aff0:	4b80      	ldr	r3, [pc, #512]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b002:	d013      	beq.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b00a:	d819      	bhi.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b018:	d004      	beq.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800b01a:	e011      	b.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b01c:	f7fe fe16 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800b020:	61f8      	str	r0, [r7, #28]
          break;
 800b022:	e010      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800b024:	f7fe fd7a 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800b028:	61f8      	str	r0, [r7, #28]
          break;
 800b02a:	e00c      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b02c:	4b71      	ldr	r3, [pc, #452]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b038:	d104      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800b03a:	4b6f      	ldr	r3, [pc, #444]	; (800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b03c:	61fb      	str	r3, [r7, #28]
          break;
 800b03e:	e001      	b.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800b040:	bf00      	nop
 800b042:	e163      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b044:	bf00      	nop
        break;
 800b046:	e161      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b048:	4b6a      	ldr	r3, [pc, #424]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b05a:	d013      	beq.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b062:	d819      	bhi.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b070:	d004      	beq.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800b072:	e011      	b.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b074:	f7fe fdea 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800b078:	61f8      	str	r0, [r7, #28]
          break;
 800b07a:	e010      	b.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800b07c:	f7fe fd4e 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800b080:	61f8      	str	r0, [r7, #28]
          break;
 800b082:	e00c      	b.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b084:	4b5b      	ldr	r3, [pc, #364]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b08c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b090:	d104      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800b092:	4b59      	ldr	r3, [pc, #356]	; (800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b094:	61fb      	str	r3, [r7, #28]
          break;
 800b096:	e001      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800b098:	bf00      	nop
 800b09a:	e137      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b09c:	bf00      	nop
        break;
 800b09e:	e135      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b0a0:	4b54      	ldr	r3, [pc, #336]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0a6:	f003 0303 	and.w	r3, r3, #3
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d011      	beq.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d818      	bhi.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d004      	beq.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800b0c4:	e011      	b.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0c6:	f7fe fdc1 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800b0ca:	61f8      	str	r0, [r7, #28]
          break;
 800b0cc:	e010      	b.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800b0ce:	f7fe fd25 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800b0d2:	61f8      	str	r0, [r7, #28]
          break;
 800b0d4:	e00c      	b.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0d6:	4b47      	ldr	r3, [pc, #284]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e2:	d104      	bne.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800b0e4:	4b44      	ldr	r3, [pc, #272]	; (800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b0e6:	61fb      	str	r3, [r7, #28]
          break;
 800b0e8:	e001      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800b0ea:	bf00      	nop
 800b0ec:	e10e      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b0ee:	bf00      	nop
        break;
 800b0f0:	e10c      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b0f2:	4b40      	ldr	r3, [pc, #256]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b104:	d02c      	beq.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b10c:	d833      	bhi.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b114:	d01a      	beq.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b11c:	d82b      	bhi.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d004      	beq.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b12a:	d004      	beq.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800b12c:	e023      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b12e:	f7fe fd8d 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800b132:	61f8      	str	r0, [r7, #28]
          break;
 800b134:	e026      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b136:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b02      	cmp	r3, #2
 800b142:	d11a      	bne.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800b144:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b148:	61fb      	str	r3, [r7, #28]
          break;
 800b14a:	e016      	b.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b14c:	4b29      	ldr	r3, [pc, #164]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b158:	d111      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800b15a:	4b27      	ldr	r3, [pc, #156]	; (800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b15c:	61fb      	str	r3, [r7, #28]
          break;
 800b15e:	e00e      	b.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b160:	4b24      	ldr	r3, [pc, #144]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b166:	f003 0302 	and.w	r3, r3, #2
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d109      	bne.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800b16e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b172:	61fb      	str	r3, [r7, #28]
          break;
 800b174:	e005      	b.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800b176:	bf00      	nop
 800b178:	e0c8      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b17a:	bf00      	nop
 800b17c:	e0c6      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b17e:	bf00      	nop
 800b180:	e0c4      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b182:	bf00      	nop
        break;
 800b184:	e0c2      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b186:	4b1b      	ldr	r3, [pc, #108]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b198:	d030      	beq.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1a0:	d837      	bhi.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1a8:	d01a      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1b0:	d82f      	bhi.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1be:	d004      	beq.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800b1c0:	e027      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1c2:	f7fe fd43 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800b1c6:	61f8      	str	r0, [r7, #28]
          break;
 800b1c8:	e02a      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b1ca:	4b0a      	ldr	r3, [pc, #40]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d11e      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800b1d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b1dc:	61fb      	str	r3, [r7, #28]
          break;
 800b1de:	e01a      	b.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1e0:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ec:	d115      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800b1ee:	4b02      	ldr	r3, [pc, #8]	; (800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b1f0:	61fb      	str	r3, [r7, #28]
          break;
 800b1f2:	e012      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b1f4:	40021000 	.word	0x40021000
 800b1f8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b1fc:	4b46      	ldr	r3, [pc, #280]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b02      	cmp	r3, #2
 800b208:	d109      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800b20a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b20e:	61fb      	str	r3, [r7, #28]
          break;
 800b210:	e005      	b.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800b212:	bf00      	nop
 800b214:	e07a      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b216:	bf00      	nop
 800b218:	e078      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b21a:	bf00      	nop
 800b21c:	e076      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b21e:	bf00      	nop
        break;
 800b220:	e074      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b222:	4b3d      	ldr	r3, [pc, #244]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b224:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b228:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b22c:	60fb      	str	r3, [r7, #12]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b234:	d02c      	beq.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b23c:	d855      	bhi.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b24a:	d004      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800b24c:	e04d      	b.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800b24e:	f7fe fc65 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800b252:	61f8      	str	r0, [r7, #28]
          break;
 800b254:	e04e      	b.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b256:	4b30      	ldr	r3, [pc, #192]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d145      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b262:	4b2d      	ldr	r3, [pc, #180]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0308 	and.w	r3, r3, #8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800b26e:	4b2a      	ldr	r3, [pc, #168]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	091b      	lsrs	r3, r3, #4
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	e005      	b.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800b27a:	4b27      	ldr	r3, [pc, #156]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b27c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b280:	0a1b      	lsrs	r3, r3, #8
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	4a25      	ldr	r2, [pc, #148]	; (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800b288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b28c:	61fb      	str	r3, [r7, #28]
          break;
 800b28e:	e02e      	b.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b290:	4b21      	ldr	r3, [pc, #132]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b29c:	d129      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b29e:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2aa:	d122      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b2ac:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	0a1b      	lsrs	r3, r3, #8
 800b2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	fb03 f202 	mul.w	r2, r3, r2
 800b2c0:	4b15      	ldr	r3, [pc, #84]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	091b      	lsrs	r3, r3, #4
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b2d2:	4b11      	ldr	r3, [pc, #68]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	0d5b      	lsrs	r3, r3, #21
 800b2d8:	f003 0303 	and.w	r3, r3, #3
 800b2dc:	3301      	adds	r3, #1
 800b2de:	005b      	lsls	r3, r3, #1
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e6:	61fb      	str	r3, [r7, #28]
          break;
 800b2e8:	e003      	b.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800b2ea:	bf00      	nop
 800b2ec:	e00e      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2ee:	bf00      	nop
 800b2f0:	e00c      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2f2:	bf00      	nop
        break;
 800b2f4:	e00a      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2f6:	bf00      	nop
 800b2f8:	e008      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2fa:	bf00      	nop
 800b2fc:	e006      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2fe:	bf00      	nop
 800b300:	e004      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b302:	bf00      	nop
 800b304:	e002      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b306:	bf00      	nop
 800b308:	e000      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b30a:	bf00      	nop
    }
  }

  return(frequency);
 800b30c:	69fb      	ldr	r3, [r7, #28]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3720      	adds	r7, #32
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	40021000 	.word	0x40021000
 800b31c:	0801a060 	.word	0x0801a060

0800b320 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b32e:	4b72      	ldr	r3, [pc, #456]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	f003 0303 	and.w	r3, r3, #3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00e      	beq.n	800b358 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b33a:	4b6f      	ldr	r3, [pc, #444]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	f003 0203 	and.w	r2, r3, #3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d103      	bne.n	800b352 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
       ||
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d142      	bne.n	800b3d8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	73fb      	strb	r3, [r7, #15]
 800b356:	e03f      	b.n	800b3d8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d018      	beq.n	800b392 <RCCEx_PLLSAI1_Config+0x72>
 800b360:	2b03      	cmp	r3, #3
 800b362:	d825      	bhi.n	800b3b0 <RCCEx_PLLSAI1_Config+0x90>
 800b364:	2b01      	cmp	r3, #1
 800b366:	d002      	beq.n	800b36e <RCCEx_PLLSAI1_Config+0x4e>
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d009      	beq.n	800b380 <RCCEx_PLLSAI1_Config+0x60>
 800b36c:	e020      	b.n	800b3b0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b36e:	4b62      	ldr	r3, [pc, #392]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	d11d      	bne.n	800b3b6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b37e:	e01a      	b.n	800b3b6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b380:	4b5d      	ldr	r3, [pc, #372]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d116      	bne.n	800b3ba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b390:	e013      	b.n	800b3ba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b392:	4b59      	ldr	r3, [pc, #356]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10f      	bne.n	800b3be <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b39e:	4b56      	ldr	r3, [pc, #344]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d109      	bne.n	800b3be <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b3ae:	e006      	b.n	800b3be <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b4:	e004      	b.n	800b3c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b3b6:	bf00      	nop
 800b3b8:	e002      	b.n	800b3c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e000      	b.n	800b3c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b3be:	bf00      	nop
    }

    if(status == HAL_OK)
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d108      	bne.n	800b3d8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b3c6:	4b4c      	ldr	r3, [pc, #304]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	f023 0203 	bic.w	r2, r3, #3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4949      	ldr	r1, [pc, #292]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f040 8086 	bne.w	800b4ec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b3e0:	4b45      	ldr	r3, [pc, #276]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a44      	ldr	r2, [pc, #272]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b3ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3ec:	f7fa fd2a 	bl	8005e44 <HAL_GetTick>
 800b3f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b3f2:	e009      	b.n	800b408 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b3f4:	f7fa fd26 	bl	8005e44 <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d902      	bls.n	800b408 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	73fb      	strb	r3, [r7, #15]
        break;
 800b406:	e005      	b.n	800b414 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b408:	4b3b      	ldr	r3, [pc, #236]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1ef      	bne.n	800b3f4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d168      	bne.n	800b4ec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d113      	bne.n	800b448 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b420:	4b35      	ldr	r3, [pc, #212]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b422:	691a      	ldr	r2, [r3, #16]
 800b424:	4b35      	ldr	r3, [pc, #212]	; (800b4fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800b426:	4013      	ands	r3, r2
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	6892      	ldr	r2, [r2, #8]
 800b42c:	0211      	lsls	r1, r2, #8
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	68d2      	ldr	r2, [r2, #12]
 800b432:	06d2      	lsls	r2, r2, #27
 800b434:	4311      	orrs	r1, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	6852      	ldr	r2, [r2, #4]
 800b43a:	3a01      	subs	r2, #1
 800b43c:	0112      	lsls	r2, r2, #4
 800b43e:	430a      	orrs	r2, r1
 800b440:	492d      	ldr	r1, [pc, #180]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b442:	4313      	orrs	r3, r2
 800b444:	610b      	str	r3, [r1, #16]
 800b446:	e02d      	b.n	800b4a4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d115      	bne.n	800b47a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b44e:	4b2a      	ldr	r3, [pc, #168]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b450:	691a      	ldr	r2, [r3, #16]
 800b452:	4b2b      	ldr	r3, [pc, #172]	; (800b500 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b454:	4013      	ands	r3, r2
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	6892      	ldr	r2, [r2, #8]
 800b45a:	0211      	lsls	r1, r2, #8
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	6912      	ldr	r2, [r2, #16]
 800b460:	0852      	lsrs	r2, r2, #1
 800b462:	3a01      	subs	r2, #1
 800b464:	0552      	lsls	r2, r2, #21
 800b466:	4311      	orrs	r1, r2
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	6852      	ldr	r2, [r2, #4]
 800b46c:	3a01      	subs	r2, #1
 800b46e:	0112      	lsls	r2, r2, #4
 800b470:	430a      	orrs	r2, r1
 800b472:	4921      	ldr	r1, [pc, #132]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b474:	4313      	orrs	r3, r2
 800b476:	610b      	str	r3, [r1, #16]
 800b478:	e014      	b.n	800b4a4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b47a:	4b1f      	ldr	r3, [pc, #124]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b47c:	691a      	ldr	r2, [r3, #16]
 800b47e:	4b21      	ldr	r3, [pc, #132]	; (800b504 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b480:	4013      	ands	r3, r2
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	6892      	ldr	r2, [r2, #8]
 800b486:	0211      	lsls	r1, r2, #8
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	6952      	ldr	r2, [r2, #20]
 800b48c:	0852      	lsrs	r2, r2, #1
 800b48e:	3a01      	subs	r2, #1
 800b490:	0652      	lsls	r2, r2, #25
 800b492:	4311      	orrs	r1, r2
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6852      	ldr	r2, [r2, #4]
 800b498:	3a01      	subs	r2, #1
 800b49a:	0112      	lsls	r2, r2, #4
 800b49c:	430a      	orrs	r2, r1
 800b49e:	4916      	ldr	r1, [pc, #88]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b4a4:	4b14      	ldr	r3, [pc, #80]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a13      	ldr	r2, [pc, #76]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4b0:	f7fa fcc8 	bl	8005e44 <HAL_GetTick>
 800b4b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b4b6:	e009      	b.n	800b4cc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b4b8:	f7fa fcc4 	bl	8005e44 <HAL_GetTick>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d902      	bls.n	800b4cc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	73fb      	strb	r3, [r7, #15]
          break;
 800b4ca:	e005      	b.n	800b4d8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b4cc:	4b0a      	ldr	r3, [pc, #40]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0ef      	beq.n	800b4b8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d106      	bne.n	800b4ec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b4de:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	4904      	ldr	r1, [pc, #16]	; (800b4f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	40021000 	.word	0x40021000
 800b4fc:	07ff800f 	.word	0x07ff800f
 800b500:	ff9f800f 	.word	0xff9f800f
 800b504:	f9ff800f 	.word	0xf9ff800f

0800b508 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b516:	4b72      	ldr	r3, [pc, #456]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00e      	beq.n	800b540 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b522:	4b6f      	ldr	r3, [pc, #444]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	f003 0203 	and.w	r2, r3, #3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d103      	bne.n	800b53a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
       ||
 800b536:	2b00      	cmp	r3, #0
 800b538:	d142      	bne.n	800b5c0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	73fb      	strb	r3, [r7, #15]
 800b53e:	e03f      	b.n	800b5c0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b03      	cmp	r3, #3
 800b546:	d018      	beq.n	800b57a <RCCEx_PLLSAI2_Config+0x72>
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d825      	bhi.n	800b598 <RCCEx_PLLSAI2_Config+0x90>
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d002      	beq.n	800b556 <RCCEx_PLLSAI2_Config+0x4e>
 800b550:	2b02      	cmp	r3, #2
 800b552:	d009      	beq.n	800b568 <RCCEx_PLLSAI2_Config+0x60>
 800b554:	e020      	b.n	800b598 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b556:	4b62      	ldr	r3, [pc, #392]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d11d      	bne.n	800b59e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b566:	e01a      	b.n	800b59e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b568:	4b5d      	ldr	r3, [pc, #372]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b570:	2b00      	cmp	r3, #0
 800b572:	d116      	bne.n	800b5a2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b578:	e013      	b.n	800b5a2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b57a:	4b59      	ldr	r3, [pc, #356]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10f      	bne.n	800b5a6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b586:	4b56      	ldr	r3, [pc, #344]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b596:	e006      	b.n	800b5a6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	73fb      	strb	r3, [r7, #15]
      break;
 800b59c:	e004      	b.n	800b5a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b59e:	bf00      	nop
 800b5a0:	e002      	b.n	800b5a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b5a2:	bf00      	nop
 800b5a4:	e000      	b.n	800b5a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b5a6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d108      	bne.n	800b5c0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b5ae:	4b4c      	ldr	r3, [pc, #304]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	f023 0203 	bic.w	r2, r3, #3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4949      	ldr	r1, [pc, #292]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f040 8086 	bne.w	800b6d4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b5c8:	4b45      	ldr	r3, [pc, #276]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a44      	ldr	r2, [pc, #272]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5d4:	f7fa fc36 	bl	8005e44 <HAL_GetTick>
 800b5d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b5da:	e009      	b.n	800b5f0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b5dc:	f7fa fc32 	bl	8005e44 <HAL_GetTick>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d902      	bls.n	800b5f0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	73fb      	strb	r3, [r7, #15]
        break;
 800b5ee:	e005      	b.n	800b5fc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b5f0:	4b3b      	ldr	r3, [pc, #236]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1ef      	bne.n	800b5dc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d168      	bne.n	800b6d4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d113      	bne.n	800b630 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b608:	4b35      	ldr	r3, [pc, #212]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b60a:	695a      	ldr	r2, [r3, #20]
 800b60c:	4b35      	ldr	r3, [pc, #212]	; (800b6e4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b60e:	4013      	ands	r3, r2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6892      	ldr	r2, [r2, #8]
 800b614:	0211      	lsls	r1, r2, #8
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	68d2      	ldr	r2, [r2, #12]
 800b61a:	06d2      	lsls	r2, r2, #27
 800b61c:	4311      	orrs	r1, r2
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	6852      	ldr	r2, [r2, #4]
 800b622:	3a01      	subs	r2, #1
 800b624:	0112      	lsls	r2, r2, #4
 800b626:	430a      	orrs	r2, r1
 800b628:	492d      	ldr	r1, [pc, #180]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b62a:	4313      	orrs	r3, r2
 800b62c:	614b      	str	r3, [r1, #20]
 800b62e:	e02d      	b.n	800b68c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d115      	bne.n	800b662 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b636:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b638:	695a      	ldr	r2, [r3, #20]
 800b63a:	4b2b      	ldr	r3, [pc, #172]	; (800b6e8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	6892      	ldr	r2, [r2, #8]
 800b642:	0211      	lsls	r1, r2, #8
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	6912      	ldr	r2, [r2, #16]
 800b648:	0852      	lsrs	r2, r2, #1
 800b64a:	3a01      	subs	r2, #1
 800b64c:	0552      	lsls	r2, r2, #21
 800b64e:	4311      	orrs	r1, r2
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	6852      	ldr	r2, [r2, #4]
 800b654:	3a01      	subs	r2, #1
 800b656:	0112      	lsls	r2, r2, #4
 800b658:	430a      	orrs	r2, r1
 800b65a:	4921      	ldr	r1, [pc, #132]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	614b      	str	r3, [r1, #20]
 800b660:	e014      	b.n	800b68c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b662:	4b1f      	ldr	r3, [pc, #124]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b664:	695a      	ldr	r2, [r3, #20]
 800b666:	4b21      	ldr	r3, [pc, #132]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1e4>)
 800b668:	4013      	ands	r3, r2
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6892      	ldr	r2, [r2, #8]
 800b66e:	0211      	lsls	r1, r2, #8
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6952      	ldr	r2, [r2, #20]
 800b674:	0852      	lsrs	r2, r2, #1
 800b676:	3a01      	subs	r2, #1
 800b678:	0652      	lsls	r2, r2, #25
 800b67a:	4311      	orrs	r1, r2
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	6852      	ldr	r2, [r2, #4]
 800b680:	3a01      	subs	r2, #1
 800b682:	0112      	lsls	r2, r2, #4
 800b684:	430a      	orrs	r2, r1
 800b686:	4916      	ldr	r1, [pc, #88]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b68c:	4b14      	ldr	r3, [pc, #80]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a13      	ldr	r2, [pc, #76]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b696:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b698:	f7fa fbd4 	bl	8005e44 <HAL_GetTick>
 800b69c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b69e:	e009      	b.n	800b6b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b6a0:	f7fa fbd0 	bl	8005e44 <HAL_GetTick>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d902      	bls.n	800b6b4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	73fb      	strb	r3, [r7, #15]
          break;
 800b6b2:	e005      	b.n	800b6c0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d0ef      	beq.n	800b6a0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b6c6:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6c8:	695a      	ldr	r2, [r3, #20]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	4904      	ldr	r1, [pc, #16]	; (800b6e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	40021000 	.word	0x40021000
 800b6e4:	07ff800f 	.word	0x07ff800f
 800b6e8:	ff9f800f 	.word	0xff9f800f
 800b6ec:	f9ff800f 	.word	0xf9ff800f

0800b6f0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b089      	sub	sp, #36	; 0x24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70c:	d10b      	bne.n	800b726 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b70e:	4b7e      	ldr	r3, [pc, #504]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b714:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b718:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	2b60      	cmp	r3, #96	; 0x60
 800b71e:	d112      	bne.n	800b746 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b720:	4b7a      	ldr	r3, [pc, #488]	; (800b90c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b722:	61fb      	str	r3, [r7, #28]
 800b724:	e00f      	b.n	800b746 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b72c:	d10b      	bne.n	800b746 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b72e:	4b76      	ldr	r3, [pc, #472]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b738:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b740:	d101      	bne.n	800b746 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b742:	4b72      	ldr	r3, [pc, #456]	; (800b90c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b744:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f040 80d6 	bne.w	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b40      	cmp	r3, #64	; 0x40
 800b756:	d003      	beq.n	800b760 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b75e:	d13b      	bne.n	800b7d8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b760:	4b69      	ldr	r3, [pc, #420]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b76c:	f040 80c4 	bne.w	800b8f8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b770:	4b65      	ldr	r3, [pc, #404]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 80bd 	beq.w	800b8f8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b77e:	4b62      	ldr	r3, [pc, #392]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	091b      	lsrs	r3, r3, #4
 800b784:	f003 030f 	and.w	r3, r3, #15
 800b788:	3301      	adds	r3, #1
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b790:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b792:	4b5d      	ldr	r3, [pc, #372]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	0a1b      	lsrs	r3, r3, #8
 800b798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b79c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b79e:	4b5a      	ldr	r3, [pc, #360]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	0edb      	lsrs	r3, r3, #27
 800b7a4:	f003 031f 	and.w	r3, r3, #31
 800b7a8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b7b0:	4b55      	ldr	r3, [pc, #340]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d002      	beq.n	800b7c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800b7bc:	2311      	movs	r3, #17
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	e001      	b.n	800b7c6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800b7c2:	2307      	movs	r3, #7
 800b7c4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	fb03 f202 	mul.w	r2, r3, r2
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b7d6:	e08f      	b.n	800b8f8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d13a      	bne.n	800b854 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b7de:	4b4a      	ldr	r3, [pc, #296]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7ea:	f040 8086 	bne.w	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b7ee:	4b46      	ldr	r3, [pc, #280]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d07f      	beq.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b7fa:	4b43      	ldr	r3, [pc, #268]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	091b      	lsrs	r3, r3, #4
 800b800:	f003 030f 	and.w	r3, r3, #15
 800b804:	3301      	adds	r3, #1
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b80e:	4b3e      	ldr	r3, [pc, #248]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b818:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b81a:	4b3b      	ldr	r3, [pc, #236]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	0edb      	lsrs	r3, r3, #27
 800b820:	f003 031f 	and.w	r3, r3, #31
 800b824:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b82c:	4b36      	ldr	r3, [pc, #216]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800b838:	2311      	movs	r3, #17
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e001      	b.n	800b842 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800b83e:	2307      	movs	r3, #7
 800b840:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	fb03 f202 	mul.w	r2, r3, r2
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	e052      	b.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b80      	cmp	r3, #128	; 0x80
 800b858:	d003      	beq.n	800b862 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b860:	d109      	bne.n	800b876 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b862:	4b29      	ldr	r3, [pc, #164]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b86a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b86e:	d144      	bne.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800b870:	4b27      	ldr	r3, [pc, #156]	; (800b910 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800b872:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b874:	e041      	b.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	2b20      	cmp	r3, #32
 800b87a:	d003      	beq.n	800b884 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b882:	d13a      	bne.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b884:	4b20      	ldr	r3, [pc, #128]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b88c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b890:	d133      	bne.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b892:	4b1d      	ldr	r3, [pc, #116]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d02d      	beq.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800b89e:	4b1a      	ldr	r3, [pc, #104]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	091b      	lsrs	r3, r3, #4
 800b8a4:	f003 030f 	and.w	r3, r3, #15
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b8b2:	4b15      	ldr	r3, [pc, #84]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8b4:	695b      	ldr	r3, [r3, #20]
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b8be:	4b12      	ldr	r3, [pc, #72]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	0edb      	lsrs	r3, r3, #27
 800b8c4:	f003 031f 	and.w	r3, r3, #31
 800b8c8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10a      	bne.n	800b8e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b8d0:	4b0d      	ldr	r3, [pc, #52]	; (800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800b8dc:	2311      	movs	r3, #17
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	e001      	b.n	800b8e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800b8e2:	2307      	movs	r3, #7
 800b8e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	fb03 f202 	mul.w	r2, r3, r2
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f4:	61fb      	str	r3, [r7, #28]
 800b8f6:	e000      	b.n	800b8fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b8f8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3724      	adds	r7, #36	; 0x24
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	40021000 	.word	0x40021000
 800b90c:	001fff68 	.word	0x001fff68
 800b910:	00f42400 	.word	0x00f42400

0800b914 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e078      	b.n	800ba18 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d105      	bne.n	800b93e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f7f8 fafd 	bl	8003f38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2203      	movs	r2, #3
 800b942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f86a 	bl	800ba20 <HAL_SD_InitCard>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e060      	b.n	800ba18 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b956:	f107 0308 	add.w	r3, r7, #8
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fdcd 	bl	800c4fc <HAL_SD_GetCardStatus>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e055      	b.n	800ba18 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b96c:	7e3b      	ldrb	r3, [r7, #24]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b972:	7e7b      	ldrb	r3, [r7, #25]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d10a      	bne.n	800b996 <HAL_SD_Init+0x82>
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d102      	bne.n	800b98c <HAL_SD_Init+0x78>
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b992:	65da      	str	r2, [r3, #92]	; 0x5c
 800b994:	e00b      	b.n	800b9ae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d104      	bne.n	800b9a8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b9a6:	e002      	b.n	800b9ae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fe83 	bl	800c6c0 <HAL_SD_ConfigWideBusOperation>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e029      	b.n	800ba18 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b9c4:	f7fa fa3e 	bl	8005e44 <HAL_GetTick>
 800b9c8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b9ca:	e014      	b.n	800b9f6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800b9cc:	f7fa fa3a 	bl	8005e44 <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9da:	d10c      	bne.n	800b9f6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e010      	b.n	800ba18 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 ff76 	bl	800c8e8 <HAL_SD_GetCardState>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d1e4      	bne.n	800b9cc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3728      	adds	r7, #40	; 0x28
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ba20:	b5b0      	push	{r4, r5, r7, lr}
 800ba22:	b08e      	sub	sp, #56	; 0x38
 800ba24:	af04      	add	r7, sp, #16
 800ba26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ba30:	2300      	movs	r3, #0
 800ba32:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800ba38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ba3c:	f7fe fd4e 	bl	800a4dc <HAL_RCCEx_GetPeriphCLKFreq>
 800ba40:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d109      	bne.n	800ba5c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ba56:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e079      	b.n	800bb50 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	0a1b      	lsrs	r3, r3, #8
 800ba60:	4a3d      	ldr	r2, [pc, #244]	; (800bb58 <HAL_SD_InitCard+0x138>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	091b      	lsrs	r3, r3, #4
 800ba68:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d107      	bne.n	800ba88 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0210 	orr.w	r2, r2, #16
 800ba86:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681d      	ldr	r5, [r3, #0]
 800ba8c:	466c      	mov	r4, sp
 800ba8e:	f107 0314 	add.w	r3, r7, #20
 800ba92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba9a:	f107 0308 	add.w	r3, r7, #8
 800ba9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800baa0:	4628      	mov	r0, r5
 800baa2:	f003 fd1b 	bl	800f4dc <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4618      	mov	r0, r3
 800baac:	f003 fd5e 	bl	800f56c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800baba:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800babc:	4a27      	ldr	r2, [pc, #156]	; (800bb5c <HAL_SD_InitCard+0x13c>)
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac4:	3301      	adds	r3, #1
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fa f9c8 	bl	8005e5c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 ffeb 	bl	800caa8 <SD_PowerON>
 800bad2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00b      	beq.n	800baf2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	431a      	orrs	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e02e      	b.n	800bb50 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 ff18 	bl	800c928 <SD_InitCard>
 800baf8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00b      	beq.n	800bb18 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e01b      	b.n	800bb50 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb20:	4618      	mov	r0, r3
 800bb22:	f003 fdb9 	bl	800f698 <SDMMC_CmdBlockLength>
 800bb26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00f      	beq.n	800bb4e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a0b      	ldr	r2, [pc, #44]	; (800bb60 <HAL_SD_InitCard+0x140>)
 800bb34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	431a      	orrs	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2201      	movs	r2, #1
 800bb46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3728      	adds	r7, #40	; 0x28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bdb0      	pop	{r4, r5, r7, pc}
 800bb58:	014f8b59 	.word	0x014f8b59
 800bb5c:	00012110 	.word	0x00012110
 800bb60:	1fe00fff 	.word	0x1fe00fff

0800bb64 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b092      	sub	sp, #72	; 0x48
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb72:	f7fa f967 	bl	8005e44 <HAL_GetTick>
 800bb76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d107      	bne.n	800bb96 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e170      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	f040 8163 	bne.w	800be6a <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bbaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	441a      	add	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d907      	bls.n	800bbc8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e157      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2203      	movs	r2, #3
 800bbcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d002      	beq.n	800bbe6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	025b      	lsls	r3, r3, #9
 800bbe4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bbe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	025b      	lsls	r3, r3, #9
 800bbf0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bbf2:	2390      	movs	r3, #144	; 0x90
 800bbf4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f107 0214 	add.w	r2, r7, #20
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f003 fd17 	bl	800f640 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68da      	ldr	r2, [r3, #12]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc20:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d90a      	bls.n	800bc3e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc34:	4618      	mov	r0, r3
 800bc36:	f003 fd75 	bl	800f724 <SDMMC_CmdReadMultiBlock>
 800bc3a:	6478      	str	r0, [r7, #68]	; 0x44
 800bc3c:	e009      	b.n	800bc52 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f003 fd47 	bl	800f6de <SDMMC_CmdReadSingleBlock>
 800bc50:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d012      	beq.n	800bc7e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a88      	ldr	r2, [pc, #544]	; (800be80 <HAL_SD_ReadBlocks+0x31c>)
 800bc5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc66:	431a      	orrs	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e0fc      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bc82:	e061      	b.n	800bd48 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d03c      	beq.n	800bd0c <HAL_SD_ReadBlocks+0x1a8>
 800bc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d039      	beq.n	800bd0c <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc9c:	e033      	b.n	800bd06 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f003 fc44 	bl	800f530 <SDMMC_ReadFIFO>
 800bca8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bcb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	0a1b      	lsrs	r3, r3, #8
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcca:	3301      	adds	r3, #1
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bcce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd6:	0c1b      	lsrs	r3, r3, #16
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce0:	3301      	adds	r3, #1
 800bce2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce6:	3b01      	subs	r3, #1
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	0e1b      	lsrs	r3, r3, #24
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800bd00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd02:	3301      	adds	r3, #1
 800bd04:	643b      	str	r3, [r7, #64]	; 0x40
 800bd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd08:	2b07      	cmp	r3, #7
 800bd0a:	d9c8      	bls.n	800bc9e <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bd0c:	f7fa f89a 	bl	8005e44 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d902      	bls.n	800bd22 <HAL_SD_ReadBlocks+0x1be>
 800bd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d112      	bne.n	800bd48 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a56      	ldr	r2, [pc, #344]	; (800be80 <HAL_SD_ReadBlocks+0x31c>)
 800bd28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e097      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d096      	beq.n	800bc84 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd64:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d022      	beq.n	800bdba <HAL_SD_ReadBlocks+0x256>
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d91f      	bls.n	800bdba <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d01b      	beq.n	800bdba <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f003 fd36 	bl	800f7f8 <SDMMC_CmdStopTransfer>
 800bd8c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bd8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d012      	beq.n	800bdba <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a39      	ldr	r2, [pc, #228]	; (800be80 <HAL_SD_ReadBlocks+0x31c>)
 800bd9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda2:	431a      	orrs	r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e05e      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc0:	f003 0308 	and.w	r3, r3, #8
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d012      	beq.n	800bdee <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a2c      	ldr	r2, [pc, #176]	; (800be80 <HAL_SD_ReadBlocks+0x31c>)
 800bdce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd4:	f043 0208 	orr.w	r2, r3, #8
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e044      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d012      	beq.n	800be22 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a1f      	ldr	r2, [pc, #124]	; (800be80 <HAL_SD_ReadBlocks+0x31c>)
 800be02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be08:	f043 0202 	orr.w	r2, r3, #2
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e02a      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be28:	f003 0320 	and.w	r3, r3, #32
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d012      	beq.n	800be56 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a12      	ldr	r2, [pc, #72]	; (800be80 <HAL_SD_ReadBlocks+0x31c>)
 800be36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	f043 0220 	orr.w	r2, r3, #32
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e010      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a0a      	ldr	r2, [pc, #40]	; (800be84 <HAL_SD_ReadBlocks+0x320>)
 800be5c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2201      	movs	r2, #1
 800be62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	e006      	b.n	800be78 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
  }
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3748      	adds	r7, #72	; 0x48
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	1fe00fff 	.word	0x1fe00fff
 800be84:	18000f3a 	.word	0x18000f3a

0800be88 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b092      	sub	sp, #72	; 0x48
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800be96:	f7f9 ffd5 	bl	8005e44 <HAL_GetTick>
 800be9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d107      	bne.n	800beba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e174      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	f040 8167 	bne.w	800c196 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	441a      	add	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed8:	429a      	cmp	r2, r3
 800beda:	d907      	bls.n	800beec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e15b      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2203      	movs	r2, #3
 800bef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2200      	movs	r2, #0
 800befa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d002      	beq.n	800bf0a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	025b      	lsls	r3, r3, #9
 800bf08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf0e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	025b      	lsls	r3, r3, #9
 800bf14:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bf16:	2390      	movs	r3, #144	; 0x90
 800bf18:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bf22:	2300      	movs	r3, #0
 800bf24:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f107 0218 	add.w	r2, r7, #24
 800bf2e:	4611      	mov	r1, r2
 800bf30:	4618      	mov	r0, r3
 800bf32:	f003 fb85 	bl	800f640 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68da      	ldr	r2, [r3, #12]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf44:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d90a      	bls.n	800bf62 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2220      	movs	r2, #32
 800bf50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f003 fc29 	bl	800f7b0 <SDMMC_CmdWriteMultiBlock>
 800bf5e:	6478      	str	r0, [r7, #68]	; 0x44
 800bf60:	e009      	b.n	800bf76 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2210      	movs	r2, #16
 800bf66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f003 fbfb 	bl	800f76a <SDMMC_CmdWriteSingleBlock>
 800bf74:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d012      	beq.n	800bfa2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a8a      	ldr	r2, [pc, #552]	; (800c1ac <HAL_SD_WriteBlocks+0x324>)
 800bf82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e100      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bfa6:	e065      	b.n	800c074 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d040      	beq.n	800c038 <HAL_SD_WriteBlocks+0x1b0>
 800bfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d03d      	beq.n	800c038 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	643b      	str	r3, [r7, #64]	; 0x40
 800bfc0:	e037      	b.n	800c032 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800bfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfca:	3301      	adds	r3, #1
 800bfcc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	021a      	lsls	r2, r3, #8
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	041a      	lsls	r2, r3, #16
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	3301      	adds	r3, #1
 800bffc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c000:	3b01      	subs	r3, #1
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	061a      	lsls	r2, r3, #24
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	3301      	adds	r3, #1
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c018:	3b01      	subs	r3, #1
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f107 0214 	add.w	r2, r7, #20
 800c024:	4611      	mov	r1, r2
 800c026:	4618      	mov	r0, r3
 800c028:	f003 fa8f 	bl	800f54a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c02e:	3301      	adds	r3, #1
 800c030:	643b      	str	r3, [r7, #64]	; 0x40
 800c032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c034:	2b07      	cmp	r3, #7
 800c036:	d9c4      	bls.n	800bfc2 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c038:	f7f9 ff04 	bl	8005e44 <HAL_GetTick>
 800c03c:	4602      	mov	r2, r0
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c044:	429a      	cmp	r2, r3
 800c046:	d902      	bls.n	800c04e <HAL_SD_WriteBlocks+0x1c6>
 800c048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d112      	bne.n	800c074 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a56      	ldr	r2, [pc, #344]	; (800c1ac <HAL_SD_WriteBlocks+0x324>)
 800c054:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c05c:	431a      	orrs	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e097      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d092      	beq.n	800bfa8 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68da      	ldr	r2, [r3, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c090:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d022      	beq.n	800c0e6 <HAL_SD_WriteBlocks+0x25e>
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d91f      	bls.n	800c0e6 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d01b      	beq.n	800c0e6 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f003 fba0 	bl	800f7f8 <SDMMC_CmdStopTransfer>
 800c0b8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d012      	beq.n	800c0e6 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a39      	ldr	r2, [pc, #228]	; (800c1ac <HAL_SD_WriteBlocks+0x324>)
 800c0c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ce:	431a      	orrs	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e05e      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ec:	f003 0308 	and.w	r3, r3, #8
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d012      	beq.n	800c11a <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a2c      	ldr	r2, [pc, #176]	; (800c1ac <HAL_SD_WriteBlocks+0x324>)
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c100:	f043 0208 	orr.w	r2, r3, #8
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e044      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c120:	f003 0302 	and.w	r3, r3, #2
 800c124:	2b00      	cmp	r3, #0
 800c126:	d012      	beq.n	800c14e <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a1f      	ldr	r2, [pc, #124]	; (800c1ac <HAL_SD_WriteBlocks+0x324>)
 800c12e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c134:	f043 0202 	orr.w	r2, r3, #2
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e02a      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c154:	f003 0310 	and.w	r3, r3, #16
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d012      	beq.n	800c182 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a12      	ldr	r2, [pc, #72]	; (800c1ac <HAL_SD_WriteBlocks+0x324>)
 800c162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c168:	f043 0210 	orr.w	r2, r3, #16
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e010      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a0a      	ldr	r2, [pc, #40]	; (800c1b0 <HAL_SD_WriteBlocks+0x328>)
 800c188:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	e006      	b.n	800c1a4 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
  }
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3748      	adds	r7, #72	; 0x48
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	1fe00fff 	.word	0x1fe00fff
 800c1b0:	18000f3a 	.word	0x18000f3a

0800c1b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1c2:	0f9b      	lsrs	r3, r3, #30
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1ce:	0e9b      	lsrs	r3, r3, #26
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	f003 030f 	and.w	r3, r3, #15
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1e0:	0e1b      	lsrs	r3, r3, #24
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	f003 0303 	and.w	r3, r3, #3
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1f2:	0c1b      	lsrs	r3, r3, #16
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1fe:	0a1b      	lsrs	r3, r3, #8
 800c200:	b2da      	uxtb	r2, r3
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c214:	0d1b      	lsrs	r3, r3, #20
 800c216:	b29a      	uxth	r2, r3
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c220:	0c1b      	lsrs	r3, r3, #16
 800c222:	b2db      	uxtb	r3, r3
 800c224:	f003 030f 	and.w	r3, r3, #15
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c232:	0bdb      	lsrs	r3, r3, #15
 800c234:	b2db      	uxtb	r3, r3
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c244:	0b9b      	lsrs	r3, r3, #14
 800c246:	b2db      	uxtb	r3, r3
 800c248:	f003 0301 	and.w	r3, r3, #1
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c256:	0b5b      	lsrs	r3, r3, #13
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c268:	0b1b      	lsrs	r3, r3, #12
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f003 0301 	and.w	r3, r3, #1
 800c270:	b2da      	uxtb	r2, r3
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2200      	movs	r2, #0
 800c27a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d163      	bne.n	800c34c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c288:	009a      	lsls	r2, r3, #2
 800c28a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c28e:	4013      	ands	r3, r2
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c294:	0f92      	lsrs	r2, r2, #30
 800c296:	431a      	orrs	r2, r3
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2a0:	0edb      	lsrs	r3, r3, #27
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2b2:	0e1b      	lsrs	r3, r3, #24
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2c4:	0d5b      	lsrs	r3, r3, #21
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 0307 	and.w	r3, r3, #7
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2d6:	0c9b      	lsrs	r3, r3, #18
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2e8:	0bdb      	lsrs	r3, r3, #15
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	f003 0307 	and.w	r3, r3, #7
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	7e1b      	ldrb	r3, [r3, #24]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	f003 0307 	and.w	r3, r3, #7
 800c30a:	3302      	adds	r3, #2
 800c30c:	2201      	movs	r2, #1
 800c30e:	fa02 f303 	lsl.w	r3, r2, r3
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c316:	fb03 f202 	mul.w	r2, r3, r2
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	7a1b      	ldrb	r3, [r3, #8]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	2201      	movs	r2, #1
 800c32a:	409a      	lsls	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c338:	0a52      	lsrs	r2, r2, #9
 800c33a:	fb03 f202 	mul.w	r2, r3, r2
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c348:	659a      	str	r2, [r3, #88]	; 0x58
 800c34a:	e031      	b.n	800c3b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c350:	2b01      	cmp	r3, #1
 800c352:	d11d      	bne.n	800c390 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c358:	041b      	lsls	r3, r3, #16
 800c35a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c362:	0c1b      	lsrs	r3, r3, #16
 800c364:	431a      	orrs	r2, r3
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	3301      	adds	r3, #1
 800c370:	029a      	lsls	r2, r3, #10
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c384:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	659a      	str	r2, [r3, #88]	; 0x58
 800c38e:	e00f      	b.n	800c3b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a58      	ldr	r2, [pc, #352]	; (800c4f8 <HAL_SD_GetCardCSD+0x344>)
 800c396:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e09d      	b.n	800c4ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3b4:	0b9b      	lsrs	r3, r3, #14
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3c6:	09db      	lsrs	r3, r3, #7
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e8:	0fdb      	lsrs	r3, r3, #31
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f4:	0f5b      	lsrs	r3, r3, #29
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	f003 0303 	and.w	r3, r3, #3
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c406:	0e9b      	lsrs	r3, r3, #26
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	f003 0307 	and.w	r3, r3, #7
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c418:	0d9b      	lsrs	r3, r3, #22
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	f003 030f 	and.w	r3, r3, #15
 800c420:	b2da      	uxtb	r2, r3
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42a:	0d5b      	lsrs	r3, r3, #21
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	b2da      	uxtb	r2, r3
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c446:	0c1b      	lsrs	r3, r3, #16
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45a:	0bdb      	lsrs	r3, r3, #15
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	b2da      	uxtb	r2, r3
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46e:	0b9b      	lsrs	r3, r3, #14
 800c470:	b2db      	uxtb	r3, r3
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	b2da      	uxtb	r2, r3
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c482:	0b5b      	lsrs	r3, r3, #13
 800c484:	b2db      	uxtb	r3, r3
 800c486:	f003 0301 	and.w	r3, r3, #1
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c496:	0b1b      	lsrs	r3, r3, #12
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4aa:	0a9b      	lsrs	r3, r3, #10
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	f003 0303 	and.w	r3, r3, #3
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4be:	0a1b      	lsrs	r3, r3, #8
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	f003 0303 	and.w	r3, r3, #3
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d2:	085b      	lsrs	r3, r3, #1
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	1fe00fff 	.word	0x1fe00fff

0800c4fc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b094      	sub	sp, #80	; 0x50
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c50c:	f107 0308 	add.w	r3, r7, #8
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fbd4 	bl	800ccc0 <SD_SendSDStatus>
 800c518:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d011      	beq.n	800c544 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a4f      	ldr	r2, [pc, #316]	; (800c664 <HAL_SD_GetCardStatus+0x168>)
 800c526:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52e:	431a      	orrs	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c542:	e070      	b.n	800c626 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	099b      	lsrs	r3, r3, #6
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f003 0303 	and.w	r3, r3, #3
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	095b      	lsrs	r3, r3, #5
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	0a1b      	lsrs	r3, r3, #8
 800c568:	b29b      	uxth	r3, r3
 800c56a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c56e:	b29a      	uxth	r2, r3
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	0e1b      	lsrs	r3, r3, #24
 800c574:	b29b      	uxth	r3, r3
 800c576:	4313      	orrs	r3, r2
 800c578:	b29a      	uxth	r2, r3
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	061a      	lsls	r2, r3, #24
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	021b      	lsls	r3, r3, #8
 800c586:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c58a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	0a1b      	lsrs	r3, r3, #8
 800c590:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c594:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	0e1b      	lsrs	r3, r3, #24
 800c59a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	0a1b      	lsrs	r3, r3, #8
 800c5ac:	b2da      	uxtb	r2, r3
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	0d1b      	lsrs	r3, r3, #20
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	0c1b      	lsrs	r3, r3, #16
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	0a9b      	lsrs	r3, r3, #10
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	0a1b      	lsrs	r3, r3, #8
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	f003 0303 	and.w	r3, r3, #3
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	091b      	lsrs	r3, r3, #4
 800c602:	b2db      	uxtb	r3, r3
 800c604:	f003 030f 	and.w	r3, r3, #15
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	b2db      	uxtb	r3, r3
 800c612:	f003 030f 	and.w	r3, r3, #15
 800c616:	b2da      	uxtb	r2, r3
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	0e1b      	lsrs	r3, r3, #24
 800c620:	b2da      	uxtb	r2, r3
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c62e:	4618      	mov	r0, r3
 800c630:	f003 f832 	bl	800f698 <SDMMC_CmdBlockLength>
 800c634:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00d      	beq.n	800c658 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a08      	ldr	r2, [pc, #32]	; (800c664 <HAL_SD_GetCardStatus+0x168>)
 800c642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c648:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2201      	movs	r2, #1
 800c64e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800c658:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3750      	adds	r7, #80	; 0x50
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	1fe00fff 	.word	0x1fe00fff

0800c668 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c6c0:	b5b0      	push	{r4, r5, r7, lr}
 800c6c2:	b090      	sub	sp, #64	; 0x40
 800c6c4:	af04      	add	r7, sp, #16
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6dc:	2b03      	cmp	r3, #3
 800c6de:	d02e      	beq.n	800c73e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6e6:	d106      	bne.n	800c6f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38
 800c6f4:	e029      	b.n	800c74a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6fc:	d10a      	bne.n	800c714 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fbd6 	bl	800ceb0 <SD_WideBus_Enable>
 800c704:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	431a      	orrs	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	639a      	str	r2, [r3, #56]	; 0x38
 800c712:	e01a      	b.n	800c74a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fc13 	bl	800cf46 <SD_WideBus_Disable>
 800c720:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	431a      	orrs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	639a      	str	r2, [r3, #56]	; 0x38
 800c72e:	e00c      	b.n	800c74a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c734:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	639a      	str	r2, [r3, #56]	; 0x38
 800c73c:	e005      	b.n	800c74a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d007      	beq.n	800c762 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a60      	ldr	r2, [pc, #384]	; (800c8d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c758:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c760:	e097      	b.n	800c892 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800c762:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c766:	f7fd feb9 	bl	800a4dc <HAL_RCCEx_GetPeriphCLKFreq>
 800c76a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f000 8086 	beq.w	800c880 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	695a      	ldr	r2, [r3, #20]
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c790:	4952      	ldr	r1, [pc, #328]	; (800c8dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c792:	fba1 1303 	umull	r1, r3, r1, r3
 800c796:	0e1b      	lsrs	r3, r3, #24
 800c798:	429a      	cmp	r2, r3
 800c79a:	d303      	bcc.n	800c7a4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	61fb      	str	r3, [r7, #28]
 800c7a2:	e05a      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ac:	d103      	bne.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	61fb      	str	r3, [r7, #28]
 800c7b4:	e051      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7be:	d126      	bne.n	800c80e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10e      	bne.n	800c7e6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	4a45      	ldr	r2, [pc, #276]	; (800c8e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d906      	bls.n	800c7de <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	4a42      	ldr	r2, [pc, #264]	; (800c8dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7d8:	0e5b      	lsrs	r3, r3, #25
 800c7da:	61fb      	str	r3, [r7, #28]
 800c7dc:	e03d      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	695b      	ldr	r3, [r3, #20]
 800c7e2:	61fb      	str	r3, [r7, #28]
 800c7e4:	e039      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	695b      	ldr	r3, [r3, #20]
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f2:	4a3b      	ldr	r2, [pc, #236]	; (800c8e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d906      	bls.n	800c806 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	4a38      	ldr	r2, [pc, #224]	; (800c8dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c800:	0e5b      	lsrs	r3, r3, #25
 800c802:	61fb      	str	r3, [r7, #28]
 800c804:	e029      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	61fb      	str	r3, [r7, #28]
 800c80c:	e025      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10e      	bne.n	800c834 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c818:	4a32      	ldr	r2, [pc, #200]	; (800c8e4 <HAL_SD_ConfigWideBusOperation+0x224>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d906      	bls.n	800c82c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	4a2e      	ldr	r2, [pc, #184]	; (800c8dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c822:	fba2 2303 	umull	r2, r3, r2, r3
 800c826:	0e1b      	lsrs	r3, r3, #24
 800c828:	61fb      	str	r3, [r7, #28]
 800c82a:	e016      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	61fb      	str	r3, [r7, #28]
 800c832:	e012      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c840:	4a28      	ldr	r2, [pc, #160]	; (800c8e4 <HAL_SD_ConfigWideBusOperation+0x224>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d906      	bls.n	800c854 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	4a24      	ldr	r2, [pc, #144]	; (800c8dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c84a:	fba2 2303 	umull	r2, r3, r2, r3
 800c84e:	0e1b      	lsrs	r3, r3, #24
 800c850:	61fb      	str	r3, [r7, #28]
 800c852:	e002      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681d      	ldr	r5, [r3, #0]
 800c864:	466c      	mov	r4, sp
 800c866:	f107 0318 	add.w	r3, r7, #24
 800c86a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c86e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c872:	f107 030c 	add.w	r3, r7, #12
 800c876:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c878:	4628      	mov	r0, r5
 800c87a:	f002 fe2f 	bl	800f4dc <SDMMC_Init>
 800c87e:	e008      	b.n	800c892 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c884:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c89a:	4618      	mov	r0, r3
 800c89c:	f002 fefc 	bl	800f698 <SDMMC_CmdBlockLength>
 800c8a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00c      	beq.n	800c8c2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a0a      	ldr	r2, [pc, #40]	; (800c8d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3730      	adds	r7, #48	; 0x30
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bdb0      	pop	{r4, r5, r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	1fe00fff 	.word	0x1fe00fff
 800c8dc:	55e63b89 	.word	0x55e63b89
 800c8e0:	02faf080 	.word	0x02faf080
 800c8e4:	017d7840 	.word	0x017d7840

0800c8e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c8f4:	f107 030c 	add.w	r3, r7, #12
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fab0 	bl	800ce60 <SD_SendStatus>
 800c900:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	431a      	orrs	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	0a5b      	lsrs	r3, r3, #9
 800c918:	f003 030f 	and.w	r3, r3, #15
 800c91c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c91e:	693b      	ldr	r3, [r7, #16]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c928:	b5b0      	push	{r4, r5, r7, lr}
 800c92a:	b090      	sub	sp, #64	; 0x40
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c930:	2301      	movs	r3, #1
 800c932:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4618      	mov	r0, r3
 800c93a:	f002 fe29 	bl	800f590 <SDMMC_GetPowerState>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d102      	bne.n	800c94a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c944:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c948:	e0a9      	b.n	800ca9e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d02e      	beq.n	800c9b0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4618      	mov	r0, r3
 800c958:	f003 f86e 	bl	800fa38 <SDMMC_CmdSendCID>
 800c95c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <SD_InitCard+0x40>
    {
      return errorstate;
 800c964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c966:	e09a      	b.n	800ca9e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2100      	movs	r1, #0
 800c96e:	4618      	mov	r0, r3
 800c970:	f002 fe53 	bl	800f61a <SDMMC_GetResponse>
 800c974:	4602      	mov	r2, r0
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2104      	movs	r1, #4
 800c980:	4618      	mov	r0, r3
 800c982:	f002 fe4a 	bl	800f61a <SDMMC_GetResponse>
 800c986:	4602      	mov	r2, r0
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2108      	movs	r1, #8
 800c992:	4618      	mov	r0, r3
 800c994:	f002 fe41 	bl	800f61a <SDMMC_GetResponse>
 800c998:	4602      	mov	r2, r0
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	210c      	movs	r1, #12
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f002 fe38 	bl	800f61a <SDMMC_GetResponse>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b4:	2b03      	cmp	r3, #3
 800c9b6:	d00d      	beq.n	800c9d4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f107 020e 	add.w	r2, r7, #14
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f003 f877 	bl	800fab6 <SDMMC_CmdSetRelAdd>
 800c9c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <SD_InitCard+0xac>
    {
      return errorstate;
 800c9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d2:	e064      	b.n	800ca9e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	d036      	beq.n	800ca4a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c9dc:	89fb      	ldrh	r3, [r7, #14]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9ec:	041b      	lsls	r3, r3, #16
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	f003 f840 	bl	800fa76 <SDMMC_CmdSendCSD>
 800c9f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <SD_InitCard+0xda>
    {
      return errorstate;
 800c9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca00:	e04d      	b.n	800ca9e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2100      	movs	r1, #0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f002 fe06 	bl	800f61a <SDMMC_GetResponse>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2104      	movs	r1, #4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f002 fdfd 	bl	800f61a <SDMMC_GetResponse>
 800ca20:	4602      	mov	r2, r0
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2108      	movs	r1, #8
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f002 fdf4 	bl	800f61a <SDMMC_GetResponse>
 800ca32:	4602      	mov	r2, r0
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	210c      	movs	r1, #12
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f002 fdeb 	bl	800f61a <SDMMC_GetResponse>
 800ca44:	4602      	mov	r2, r0
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2104      	movs	r1, #4
 800ca50:	4618      	mov	r0, r3
 800ca52:	f002 fde2 	bl	800f61a <SDMMC_GetResponse>
 800ca56:	4603      	mov	r3, r0
 800ca58:	0d1a      	lsrs	r2, r3, #20
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ca5e:	f107 0310 	add.w	r3, r7, #16
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff fba5 	bl	800c1b4 <HAL_SD_GetCardCSD>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca74:	e013      	b.n	800ca9e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca7e:	041b      	lsls	r3, r3, #16
 800ca80:	2200      	movs	r2, #0
 800ca82:	461c      	mov	r4, r3
 800ca84:	4615      	mov	r5, r2
 800ca86:	4622      	mov	r2, r4
 800ca88:	462b      	mov	r3, r5
 800ca8a:	4608      	mov	r0, r1
 800ca8c:	f002 feea 	bl	800f864 <SDMMC_CmdSelDesel>
 800ca90:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <SD_InitCard+0x174>
  {
    return errorstate;
 800ca98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca9a:	e000      	b.n	800ca9e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3740      	adds	r7, #64	; 0x40
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800caa8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b088      	sub	sp, #32
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800cab4:	2300      	movs	r3, #0
 800cab6:	61fb      	str	r3, [r7, #28]
 800cab8:	2300      	movs	r3, #0
 800caba:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800cabc:	f7f9 f9c2 	bl	8005e44 <HAL_GetTick>
 800cac0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f002 fef0 	bl	800f8ac <SDMMC_CmdGoIdleState>
 800cacc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d001      	beq.n	800cad8 <SD_PowerON+0x30>
  {
    return errorstate;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	e0ed      	b.n	800ccb4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4618      	mov	r0, r3
 800cade:	f002 ff03 	bl	800f8e8 <SDMMC_CmdOperCond>
 800cae2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00d      	beq.n	800cb06 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f002 fed9 	bl	800f8ac <SDMMC_CmdGoIdleState>
 800cafa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d004      	beq.n	800cb0c <SD_PowerON+0x64>
    {
      return errorstate;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	e0d6      	b.n	800ccb4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d137      	bne.n	800cb84 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2100      	movs	r1, #0
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f002 ff04 	bl	800f928 <SDMMC_CmdAppCommand>
 800cb20:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d02d      	beq.n	800cb84 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb2c:	e0c2      	b.n	800ccb4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2100      	movs	r1, #0
 800cb34:	4618      	mov	r0, r3
 800cb36:	f002 fef7 	bl	800f928 <SDMMC_CmdAppCommand>
 800cb3a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d001      	beq.n	800cb46 <SD_PowerON+0x9e>
    {
      return errorstate;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	e0b6      	b.n	800ccb4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	495c      	ldr	r1, [pc, #368]	; (800ccbc <SD_PowerON+0x214>)
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f002 ff0e 	bl	800f96e <SDMMC_CmdAppOperCommand>
 800cb52:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb5e:	e0a9      	b.n	800ccb4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2100      	movs	r1, #0
 800cb66:	4618      	mov	r0, r3
 800cb68:	f002 fd57 	bl	800f61a <SDMMC_GetResponse>
 800cb6c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	0fdb      	lsrs	r3, r3, #31
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d101      	bne.n	800cb7a <SD_PowerON+0xd2>
 800cb76:	2301      	movs	r3, #1
 800cb78:	e000      	b.n	800cb7c <SD_PowerON+0xd4>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61bb      	str	r3, [r7, #24]

    count++;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3301      	adds	r3, #1
 800cb82:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d802      	bhi.n	800cb94 <SD_PowerON+0xec>
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0cc      	beq.n	800cb2e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d902      	bls.n	800cba4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cb9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cba2:	e087      	b.n	800ccb4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d07e      	beq.n	800ccac <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d17a      	bne.n	800ccb2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d075      	beq.n	800ccb2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbcc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f042 0208 	orr.w	r2, r2, #8
 800cbdc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f002 ffce 	bl	800fb84 <SDMMC_CmdVoltageSwitch>
 800cbe8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00c      	beq.n	800cc0a <SD_PowerON+0x162>
        {
          return errorstate;
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	e05f      	b.n	800ccb4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cbf4:	f7f9 f926 	bl	8005e44 <HAL_GetTick>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc02:	d102      	bne.n	800cc0a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800cc04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc08:	e054      	b.n	800ccb4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc18:	d1ec      	bne.n	800cbf4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800cc22:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc32:	d002      	beq.n	800cc3a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800cc34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cc38:	e03c      	b.n	800ccb4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800cc3a:	2001      	movs	r0, #1
 800cc3c:	f000 fa9e 	bl	800d17c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f042 0204 	orr.w	r2, r2, #4
 800cc4e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cc50:	e00a      	b.n	800cc68 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc52:	f7f9 f8f7 	bl	8005e44 <HAL_GetTick>
 800cc56:	4602      	mov	r2, r0
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc60:	d102      	bne.n	800cc68 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800cc62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc66:	e025      	b.n	800ccb4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc76:	d1ec      	bne.n	800cc52 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cc80:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc90:	d102      	bne.n	800cc98 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc96:	e00d      	b.n	800ccb4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2213      	movs	r2, #19
 800cc9e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cca8:	639a      	str	r2, [r3, #56]	; 0x38
 800ccaa:	e002      	b.n	800ccb2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3720      	adds	r7, #32
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	c1100000 	.word	0xc1100000

0800ccc0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08c      	sub	sp, #48	; 0x30
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ccca:	f7f9 f8bb 	bl	8005e44 <HAL_GetTick>
 800ccce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f002 fc9d 	bl	800f61a <SDMMC_GetResponse>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccea:	d102      	bne.n	800ccf2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ccec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccf0:	e0b0      	b.n	800ce54 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2140      	movs	r1, #64	; 0x40
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f002 fccd 	bl	800f698 <SDMMC_CmdBlockLength>
 800ccfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cd0e:	6a3b      	ldr	r3, [r7, #32]
 800cd10:	e0a0      	b.n	800ce54 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd1a:	041b      	lsls	r3, r3, #16
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	4610      	mov	r0, r2
 800cd20:	f002 fe02 	bl	800f928 <SDMMC_CmdAppCommand>
 800cd24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d005      	beq.n	800cd38 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cd34:	6a3b      	ldr	r3, [r7, #32]
 800cd36:	e08d      	b.n	800ce54 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd3c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cd3e:	2340      	movs	r3, #64	; 0x40
 800cd40:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800cd42:	2360      	movs	r3, #96	; 0x60
 800cd44:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd46:	2302      	movs	r3, #2
 800cd48:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f107 0208 	add.w	r2, r7, #8
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f002 fc6f 	bl	800f640 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f002 feea 	bl	800fb40 <SDMMC_CmdStatusRegister>
 800cd6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd6e:	6a3b      	ldr	r3, [r7, #32]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d02b      	beq.n	800cdcc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	e069      	b.n	800ce54 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d013      	beq.n	800cdb6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800cd8e:	2300      	movs	r3, #0
 800cd90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd92:	e00d      	b.n	800cdb0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f002 fbc9 	bl	800f530 <SDMMC_ReadFIFO>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	601a      	str	r2, [r3, #0]
        pData++;
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	3304      	adds	r3, #4
 800cda8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdac:	3301      	adds	r3, #1
 800cdae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb2:	2b07      	cmp	r3, #7
 800cdb4:	d9ee      	bls.n	800cd94 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cdb6:	f7f9 f845 	bl	8005e44 <HAL_GetTick>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdc4:	d102      	bne.n	800cdcc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cdc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdca:	e043      	b.n	800ce54 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0d2      	beq.n	800cd80 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde0:	f003 0308 	and.w	r3, r3, #8
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cde8:	2308      	movs	r3, #8
 800cdea:	e033      	b.n	800ce54 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	e02a      	b.n	800ce54 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce04:	f003 0320 	and.w	r3, r3, #32
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d017      	beq.n	800ce3c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ce0c:	2320      	movs	r3, #32
 800ce0e:	e021      	b.n	800ce54 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f002 fb8b 	bl	800f530 <SDMMC_ReadFIFO>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	601a      	str	r2, [r3, #0]
    pData++;
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	3304      	adds	r3, #4
 800ce24:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ce26:	f7f9 f80d 	bl	8005e44 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce34:	d102      	bne.n	800ce3c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ce36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce3a:	e00b      	b.n	800ce54 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1e2      	bne.n	800ce10 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a03      	ldr	r2, [pc, #12]	; (800ce5c <SD_SendSDStatus+0x19c>)
 800ce50:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3730      	adds	r7, #48	; 0x30
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	18000f3a 	.word	0x18000f3a

0800ce60 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d102      	bne.n	800ce76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ce70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce74:	e018      	b.n	800cea8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce7e:	041b      	lsls	r3, r3, #16
 800ce80:	4619      	mov	r1, r3
 800ce82:	4610      	mov	r0, r2
 800ce84:	f002 fe39 	bl	800fafa <SDMMC_CmdSendStatus>
 800ce88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	e009      	b.n	800cea8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f002 fbbd 	bl	800f61a <SDMMC_GetResponse>
 800cea0:	4602      	mov	r2, r0
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]
 800cebc:	2300      	movs	r3, #0
 800cebe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2100      	movs	r1, #0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f002 fba7 	bl	800f61a <SDMMC_GetResponse>
 800cecc:	4603      	mov	r3, r0
 800cece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ced2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ced6:	d102      	bne.n	800cede <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ced8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cedc:	e02f      	b.n	800cf3e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cede:	f107 030c 	add.w	r3, r7, #12
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f879 	bl	800cfdc <SD_FindSCR>
 800ceea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	e023      	b.n	800cf3e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d01c      	beq.n	800cf3a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf08:	041b      	lsls	r3, r3, #16
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	f002 fd0b 	bl	800f928 <SDMMC_CmdAppCommand>
 800cf12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	e00f      	b.n	800cf3e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2102      	movs	r1, #2
 800cf24:	4618      	mov	r0, r3
 800cf26:	f002 fd42 	bl	800f9ae <SDMMC_CmdBusWidth>
 800cf2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	e003      	b.n	800cf3e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cf36:	2300      	movs	r3, #0
 800cf38:	e001      	b.n	800cf3e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b086      	sub	sp, #24
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	2300      	movs	r3, #0
 800cf54:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f002 fb5c 	bl	800f61a <SDMMC_GetResponse>
 800cf62:	4603      	mov	r3, r0
 800cf64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf6c:	d102      	bne.n	800cf74 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cf6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf72:	e02f      	b.n	800cfd4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cf74:	f107 030c 	add.w	r3, r7, #12
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f82e 	bl	800cfdc <SD_FindSCR>
 800cf80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	e023      	b.n	800cfd4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d01c      	beq.n	800cfd0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf9e:	041b      	lsls	r3, r3, #16
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	f002 fcc0 	bl	800f928 <SDMMC_CmdAppCommand>
 800cfa8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	e00f      	b.n	800cfd4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2100      	movs	r1, #0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f002 fcf7 	bl	800f9ae <SDMMC_CmdBusWidth>
 800cfc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	e003      	b.n	800cfd4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	e001      	b.n	800cfd4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cfd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08e      	sub	sp, #56	; 0x38
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cfe6:	f7f8 ff2d 	bl	8005e44 <HAL_GetTick>
 800cfea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cff0:	2300      	movs	r3, #0
 800cff2:	60bb      	str	r3, [r7, #8]
 800cff4:	2300      	movs	r3, #0
 800cff6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2108      	movs	r1, #8
 800d002:	4618      	mov	r0, r3
 800d004:	f002 fb48 	bl	800f698 <SDMMC_CmdBlockLength>
 800d008:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	e0ad      	b.n	800d170 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d01c:	041b      	lsls	r3, r3, #16
 800d01e:	4619      	mov	r1, r3
 800d020:	4610      	mov	r0, r2
 800d022:	f002 fc81 	bl	800f928 <SDMMC_CmdAppCommand>
 800d026:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d001      	beq.n	800d032 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	e09e      	b.n	800d170 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d036:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d038:	2308      	movs	r3, #8
 800d03a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d03c:	2330      	movs	r3, #48	; 0x30
 800d03e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d040:	2302      	movs	r3, #2
 800d042:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d044:	2300      	movs	r3, #0
 800d046:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d048:	2301      	movs	r3, #1
 800d04a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f107 0210 	add.w	r2, r7, #16
 800d054:	4611      	mov	r1, r2
 800d056:	4618      	mov	r0, r3
 800d058:	f002 faf2 	bl	800f640 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4618      	mov	r0, r3
 800d062:	f002 fcc7 	bl	800f9f4 <SDMMC_CmdSendSCR>
 800d066:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d027      	beq.n	800d0be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	e07e      	b.n	800d170 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d113      	bne.n	800d0a8 <SD_FindSCR+0xcc>
 800d080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d082:	2b00      	cmp	r3, #0
 800d084:	d110      	bne.n	800d0a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f002 fa50 	bl	800f530 <SDMMC_ReadFIFO>
 800d090:	4603      	mov	r3, r0
 800d092:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4618      	mov	r0, r3
 800d09a:	f002 fa49 	bl	800f530 <SDMMC_ReadFIFO>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	60fb      	str	r3, [r7, #12]
      index++;
 800d0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0a8:	f7f8 fecc 	bl	8005e44 <HAL_GetTick>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0b6:	d102      	bne.n	800d0be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d0b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0bc:	e058      	b.n	800d170 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0c4:	f240 532a 	movw	r3, #1322	; 0x52a
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d0d1      	beq.n	800d072 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d4:	f003 0308 	and.w	r3, r3, #8
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d005      	beq.n	800d0e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2208      	movs	r2, #8
 800d0e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d0e4:	2308      	movs	r3, #8
 800d0e6:	e043      	b.n	800d170 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ee:	f003 0302 	and.w	r3, r3, #2
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d005      	beq.n	800d102 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d0fe:	2302      	movs	r3, #2
 800d100:	e036      	b.n	800d170 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d108:	f003 0320 	and.w	r3, r3, #32
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d005      	beq.n	800d11c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2220      	movs	r2, #32
 800d116:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d118:	2320      	movs	r3, #32
 800d11a:	e029      	b.n	800d170 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a15      	ldr	r2, [pc, #84]	; (800d178 <SD_FindSCR+0x19c>)
 800d122:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	061a      	lsls	r2, r3, #24
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d130:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	0a1b      	lsrs	r3, r3, #8
 800d136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d13a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	0e1b      	lsrs	r3, r3, #24
 800d140:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	601a      	str	r2, [r3, #0]
    scr++;
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	3304      	adds	r3, #4
 800d14a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	061a      	lsls	r2, r3, #24
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	021b      	lsls	r3, r3, #8
 800d154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d158:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	0a1b      	lsrs	r3, r3, #8
 800d15e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d162:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	0e1b      	lsrs	r3, r3, #24
 800d168:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3738      	adds	r7, #56	; 0x38
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	18000f3a 	.word	0x18000f3a

0800d17c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	4603      	mov	r3, r0
 800d184:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e095      	b.n	800d2d0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d108      	bne.n	800d1be <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1b4:	d009      	beq.n	800d1ca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	61da      	str	r2, [r3, #28]
 800d1bc:	e005      	b.n	800d1ca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7f6 ff2b 	bl	8004040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d200:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d20a:	d902      	bls.n	800d212 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	e002      	b.n	800d218 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d216:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d220:	d007      	beq.n	800d232 <HAL_SPI_Init+0xa0>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d22a:	d002      	beq.n	800d232 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d242:	431a      	orrs	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	f003 0302 	and.w	r3, r3, #2
 800d24c:	431a      	orrs	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	431a      	orrs	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d260:	431a      	orrs	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d26a:	431a      	orrs	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d274:	ea42 0103 	orr.w	r1, r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	430a      	orrs	r2, r1
 800d286:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	0c1b      	lsrs	r3, r3, #16
 800d28e:	f003 0204 	and.w	r2, r3, #4
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d296:	f003 0310 	and.w	r3, r3, #16
 800d29a:	431a      	orrs	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a0:	f003 0308 	and.w	r3, r3, #8
 800d2a4:	431a      	orrs	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d2ae:	ea42 0103 	orr.w	r1, r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e049      	b.n	800d37e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7f6 fee0 	bl	80040c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2202      	movs	r2, #2
 800d308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3304      	adds	r3, #4
 800d314:	4619      	mov	r1, r3
 800d316:	4610      	mov	r0, r2
 800d318:	f000 fad2 	bl	800d8c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d396:	b2db      	uxtb	r3, r3
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d001      	beq.n	800d3a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e04f      	b.n	800d440 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	68da      	ldr	r2, [r3, #12]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f042 0201 	orr.w	r2, r2, #1
 800d3b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a23      	ldr	r2, [pc, #140]	; (800d44c <HAL_TIM_Base_Start_IT+0xc4>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d01d      	beq.n	800d3fe <HAL_TIM_Base_Start_IT+0x76>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3ca:	d018      	beq.n	800d3fe <HAL_TIM_Base_Start_IT+0x76>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a1f      	ldr	r2, [pc, #124]	; (800d450 <HAL_TIM_Base_Start_IT+0xc8>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d013      	beq.n	800d3fe <HAL_TIM_Base_Start_IT+0x76>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a1e      	ldr	r2, [pc, #120]	; (800d454 <HAL_TIM_Base_Start_IT+0xcc>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d00e      	beq.n	800d3fe <HAL_TIM_Base_Start_IT+0x76>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a1c      	ldr	r2, [pc, #112]	; (800d458 <HAL_TIM_Base_Start_IT+0xd0>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d009      	beq.n	800d3fe <HAL_TIM_Base_Start_IT+0x76>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a1b      	ldr	r2, [pc, #108]	; (800d45c <HAL_TIM_Base_Start_IT+0xd4>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d004      	beq.n	800d3fe <HAL_TIM_Base_Start_IT+0x76>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a19      	ldr	r2, [pc, #100]	; (800d460 <HAL_TIM_Base_Start_IT+0xd8>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d115      	bne.n	800d42a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689a      	ldr	r2, [r3, #8]
 800d404:	4b17      	ldr	r3, [pc, #92]	; (800d464 <HAL_TIM_Base_Start_IT+0xdc>)
 800d406:	4013      	ands	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b06      	cmp	r3, #6
 800d40e:	d015      	beq.n	800d43c <HAL_TIM_Base_Start_IT+0xb4>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d416:	d011      	beq.n	800d43c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f042 0201 	orr.w	r2, r2, #1
 800d426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d428:	e008      	b.n	800d43c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f042 0201 	orr.w	r2, r2, #1
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	e000      	b.n	800d43e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d43c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	40012c00 	.word	0x40012c00
 800d450:	40000400 	.word	0x40000400
 800d454:	40000800 	.word	0x40000800
 800d458:	40000c00 	.word	0x40000c00
 800d45c:	40013400 	.word	0x40013400
 800d460:	40014000 	.word	0x40014000
 800d464:	00010007 	.word	0x00010007

0800d468 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e049      	b.n	800d50e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d106      	bne.n	800d494 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f841 	bl	800d516 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2202      	movs	r2, #2
 800d498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	f000 fa0a 	bl	800d8c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d516:	b480      	push	{r7}
 800d518:	b083      	sub	sp, #12
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b082      	sub	sp, #8
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	f003 0302 	and.w	r3, r3, #2
 800d53c:	2b02      	cmp	r3, #2
 800d53e:	d122      	bne.n	800d586 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	f003 0302 	and.w	r3, r3, #2
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d11b      	bne.n	800d586 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f06f 0202 	mvn.w	r2, #2
 800d556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	f003 0303 	and.w	r3, r3, #3
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f989 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d572:	e005      	b.n	800d580 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f97b 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f98c 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	f003 0304 	and.w	r3, r3, #4
 800d590:	2b04      	cmp	r3, #4
 800d592:	d122      	bne.n	800d5da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	f003 0304 	and.w	r3, r3, #4
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	d11b      	bne.n	800d5da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f06f 0204 	mvn.w	r2, #4
 800d5aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	699b      	ldr	r3, [r3, #24]
 800d5b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d003      	beq.n	800d5c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 f95f 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d5c6:	e005      	b.n	800d5d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f951 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f962 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	f003 0308 	and.w	r3, r3, #8
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d122      	bne.n	800d62e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	f003 0308 	and.w	r3, r3, #8
 800d5f2:	2b08      	cmp	r3, #8
 800d5f4:	d11b      	bne.n	800d62e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f06f 0208 	mvn.w	r2, #8
 800d5fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2204      	movs	r2, #4
 800d604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	69db      	ldr	r3, [r3, #28]
 800d60c:	f003 0303 	and.w	r3, r3, #3
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f935 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d61a:	e005      	b.n	800d628 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f927 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f938 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	f003 0310 	and.w	r3, r3, #16
 800d638:	2b10      	cmp	r3, #16
 800d63a:	d122      	bne.n	800d682 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	f003 0310 	and.w	r3, r3, #16
 800d646:	2b10      	cmp	r3, #16
 800d648:	d11b      	bne.n	800d682 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f06f 0210 	mvn.w	r2, #16
 800d652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2208      	movs	r2, #8
 800d658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 f90b 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d66e:	e005      	b.n	800d67c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f8fd 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f90e 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d10e      	bne.n	800d6ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	f003 0301 	and.w	r3, r3, #1
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d107      	bne.n	800d6ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f06f 0201 	mvn.w	r2, #1
 800d6a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f8d7 	bl	800d85c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b8:	2b80      	cmp	r3, #128	; 0x80
 800d6ba:	d10e      	bne.n	800d6da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6c6:	2b80      	cmp	r3, #128	; 0x80
 800d6c8:	d107      	bne.n	800d6da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d6d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fceb 	bl	800e0b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6e8:	d10e      	bne.n	800d708 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6f4:	2b80      	cmp	r3, #128	; 0x80
 800d6f6:	d107      	bne.n	800d708 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fcde 	bl	800e0c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d712:	2b40      	cmp	r3, #64	; 0x40
 800d714:	d10e      	bne.n	800d734 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d720:	2b40      	cmp	r3, #64	; 0x40
 800d722:	d107      	bne.n	800d734 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f8bc 	bl	800d8ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	f003 0320 	and.w	r3, r3, #32
 800d73e:	2b20      	cmp	r3, #32
 800d740:	d10e      	bne.n	800d760 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	f003 0320 	and.w	r3, r3, #32
 800d74c:	2b20      	cmp	r3, #32
 800d74e:	d107      	bne.n	800d760 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f06f 0220 	mvn.w	r2, #32
 800d758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fc9e 	bl	800e09c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d101      	bne.n	800d786 <HAL_TIM_OC_ConfigChannel+0x1e>
 800d782:	2302      	movs	r3, #2
 800d784:	e066      	b.n	800d854 <HAL_TIM_OC_ConfigChannel+0xec>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b14      	cmp	r3, #20
 800d792:	d857      	bhi.n	800d844 <HAL_TIM_OC_ConfigChannel+0xdc>
 800d794:	a201      	add	r2, pc, #4	; (adr r2, 800d79c <HAL_TIM_OC_ConfigChannel+0x34>)
 800d796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79a:	bf00      	nop
 800d79c:	0800d7f1 	.word	0x0800d7f1
 800d7a0:	0800d845 	.word	0x0800d845
 800d7a4:	0800d845 	.word	0x0800d845
 800d7a8:	0800d845 	.word	0x0800d845
 800d7ac:	0800d7ff 	.word	0x0800d7ff
 800d7b0:	0800d845 	.word	0x0800d845
 800d7b4:	0800d845 	.word	0x0800d845
 800d7b8:	0800d845 	.word	0x0800d845
 800d7bc:	0800d80d 	.word	0x0800d80d
 800d7c0:	0800d845 	.word	0x0800d845
 800d7c4:	0800d845 	.word	0x0800d845
 800d7c8:	0800d845 	.word	0x0800d845
 800d7cc:	0800d81b 	.word	0x0800d81b
 800d7d0:	0800d845 	.word	0x0800d845
 800d7d4:	0800d845 	.word	0x0800d845
 800d7d8:	0800d845 	.word	0x0800d845
 800d7dc:	0800d829 	.word	0x0800d829
 800d7e0:	0800d845 	.word	0x0800d845
 800d7e4:	0800d845 	.word	0x0800d845
 800d7e8:	0800d845 	.word	0x0800d845
 800d7ec:	0800d837 	.word	0x0800d837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68b9      	ldr	r1, [r7, #8]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 f8fc 	bl	800d9f4 <TIM_OC1_SetConfig>
      break;
 800d7fc:	e025      	b.n	800d84a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68b9      	ldr	r1, [r7, #8]
 800d804:	4618      	mov	r0, r3
 800d806:	f000 f985 	bl	800db14 <TIM_OC2_SetConfig>
      break;
 800d80a:	e01e      	b.n	800d84a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68b9      	ldr	r1, [r7, #8]
 800d812:	4618      	mov	r0, r3
 800d814:	f000 fa08 	bl	800dc28 <TIM_OC3_SetConfig>
      break;
 800d818:	e017      	b.n	800d84a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68b9      	ldr	r1, [r7, #8]
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fa89 	bl	800dd38 <TIM_OC4_SetConfig>
      break;
 800d826:	e010      	b.n	800d84a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68b9      	ldr	r1, [r7, #8]
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 faec 	bl	800de0c <TIM_OC5_SetConfig>
      break;
 800d834:	e009      	b.n	800d84a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	68b9      	ldr	r1, [r7, #8]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 fb49 	bl	800ded4 <TIM_OC6_SetConfig>
      break;
 800d842:	e002      	b.n	800d84a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	75fb      	strb	r3, [r7, #23]
      break;
 800d848:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d852:	7dfb      	ldrb	r3, [r7, #23]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8a0:	bf00      	nop
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8b4:	bf00      	nop
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a40      	ldr	r2, [pc, #256]	; (800d9d4 <TIM_Base_SetConfig+0x114>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d013      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8de:	d00f      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a3d      	ldr	r2, [pc, #244]	; (800d9d8 <TIM_Base_SetConfig+0x118>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00b      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a3c      	ldr	r2, [pc, #240]	; (800d9dc <TIM_Base_SetConfig+0x11c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d007      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a3b      	ldr	r2, [pc, #236]	; (800d9e0 <TIM_Base_SetConfig+0x120>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d003      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a3a      	ldr	r2, [pc, #232]	; (800d9e4 <TIM_Base_SetConfig+0x124>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d108      	bne.n	800d912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a2f      	ldr	r2, [pc, #188]	; (800d9d4 <TIM_Base_SetConfig+0x114>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d01f      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d920:	d01b      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a2c      	ldr	r2, [pc, #176]	; (800d9d8 <TIM_Base_SetConfig+0x118>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d017      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a2b      	ldr	r2, [pc, #172]	; (800d9dc <TIM_Base_SetConfig+0x11c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d013      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4a2a      	ldr	r2, [pc, #168]	; (800d9e0 <TIM_Base_SetConfig+0x120>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d00f      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a29      	ldr	r2, [pc, #164]	; (800d9e4 <TIM_Base_SetConfig+0x124>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d00b      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4a28      	ldr	r2, [pc, #160]	; (800d9e8 <TIM_Base_SetConfig+0x128>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d007      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a27      	ldr	r2, [pc, #156]	; (800d9ec <TIM_Base_SetConfig+0x12c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d003      	beq.n	800d95a <TIM_Base_SetConfig+0x9a>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4a26      	ldr	r2, [pc, #152]	; (800d9f0 <TIM_Base_SetConfig+0x130>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d108      	bne.n	800d96c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	4313      	orrs	r3, r2
 800d96a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	695b      	ldr	r3, [r3, #20]
 800d976:	4313      	orrs	r3, r2
 800d978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	689a      	ldr	r2, [r3, #8]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a10      	ldr	r2, [pc, #64]	; (800d9d4 <TIM_Base_SetConfig+0x114>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d00f      	beq.n	800d9b8 <TIM_Base_SetConfig+0xf8>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	4a12      	ldr	r2, [pc, #72]	; (800d9e4 <TIM_Base_SetConfig+0x124>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d00b      	beq.n	800d9b8 <TIM_Base_SetConfig+0xf8>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	4a11      	ldr	r2, [pc, #68]	; (800d9e8 <TIM_Base_SetConfig+0x128>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d007      	beq.n	800d9b8 <TIM_Base_SetConfig+0xf8>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a10      	ldr	r2, [pc, #64]	; (800d9ec <TIM_Base_SetConfig+0x12c>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d003      	beq.n	800d9b8 <TIM_Base_SetConfig+0xf8>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a0f      	ldr	r2, [pc, #60]	; (800d9f0 <TIM_Base_SetConfig+0x130>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d103      	bne.n	800d9c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	691a      	ldr	r2, [r3, #16]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	615a      	str	r2, [r3, #20]
}
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	40012c00 	.word	0x40012c00
 800d9d8:	40000400 	.word	0x40000400
 800d9dc:	40000800 	.word	0x40000800
 800d9e0:	40000c00 	.word	0x40000c00
 800d9e4:	40013400 	.word	0x40013400
 800d9e8:	40014000 	.word	0x40014000
 800d9ec:	40014400 	.word	0x40014400
 800d9f0:	40014800 	.word	0x40014800

0800d9f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b087      	sub	sp, #28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	f023 0201 	bic.w	r2, r3, #1
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f023 0303 	bic.w	r3, r3, #3
 800da2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	4313      	orrs	r3, r2
 800da38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f023 0302 	bic.w	r3, r3, #2
 800da40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	4313      	orrs	r3, r2
 800da4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a2c      	ldr	r2, [pc, #176]	; (800db00 <TIM_OC1_SetConfig+0x10c>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d00f      	beq.n	800da74 <TIM_OC1_SetConfig+0x80>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a2b      	ldr	r2, [pc, #172]	; (800db04 <TIM_OC1_SetConfig+0x110>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d00b      	beq.n	800da74 <TIM_OC1_SetConfig+0x80>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a2a      	ldr	r2, [pc, #168]	; (800db08 <TIM_OC1_SetConfig+0x114>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d007      	beq.n	800da74 <TIM_OC1_SetConfig+0x80>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a29      	ldr	r2, [pc, #164]	; (800db0c <TIM_OC1_SetConfig+0x118>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d003      	beq.n	800da74 <TIM_OC1_SetConfig+0x80>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4a28      	ldr	r2, [pc, #160]	; (800db10 <TIM_OC1_SetConfig+0x11c>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d10c      	bne.n	800da8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	f023 0308 	bic.w	r3, r3, #8
 800da7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	4313      	orrs	r3, r2
 800da84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f023 0304 	bic.w	r3, r3, #4
 800da8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a1b      	ldr	r2, [pc, #108]	; (800db00 <TIM_OC1_SetConfig+0x10c>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d00f      	beq.n	800dab6 <TIM_OC1_SetConfig+0xc2>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a1a      	ldr	r2, [pc, #104]	; (800db04 <TIM_OC1_SetConfig+0x110>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d00b      	beq.n	800dab6 <TIM_OC1_SetConfig+0xc2>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a19      	ldr	r2, [pc, #100]	; (800db08 <TIM_OC1_SetConfig+0x114>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d007      	beq.n	800dab6 <TIM_OC1_SetConfig+0xc2>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a18      	ldr	r2, [pc, #96]	; (800db0c <TIM_OC1_SetConfig+0x118>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d003      	beq.n	800dab6 <TIM_OC1_SetConfig+0xc2>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a17      	ldr	r2, [pc, #92]	; (800db10 <TIM_OC1_SetConfig+0x11c>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d111      	bne.n	800dada <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	693a      	ldr	r2, [r7, #16]
 800dacc:	4313      	orrs	r3, r2
 800dace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	693a      	ldr	r2, [r7, #16]
 800dad6:	4313      	orrs	r3, r2
 800dad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	685a      	ldr	r2, [r3, #4]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	621a      	str	r2, [r3, #32]
}
 800daf4:	bf00      	nop
 800daf6:	371c      	adds	r7, #28
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	40012c00 	.word	0x40012c00
 800db04:	40013400 	.word	0x40013400
 800db08:	40014000 	.word	0x40014000
 800db0c:	40014400 	.word	0x40014400
 800db10:	40014800 	.word	0x40014800

0800db14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db14:	b480      	push	{r7}
 800db16:	b087      	sub	sp, #28
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	f023 0210 	bic.w	r2, r3, #16
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a1b      	ldr	r3, [r3, #32]
 800db2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	699b      	ldr	r3, [r3, #24]
 800db3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	021b      	lsls	r3, r3, #8
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	4313      	orrs	r3, r2
 800db5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f023 0320 	bic.w	r3, r3, #32
 800db62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	011b      	lsls	r3, r3, #4
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a28      	ldr	r2, [pc, #160]	; (800dc14 <TIM_OC2_SetConfig+0x100>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d003      	beq.n	800db80 <TIM_OC2_SetConfig+0x6c>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a27      	ldr	r2, [pc, #156]	; (800dc18 <TIM_OC2_SetConfig+0x104>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d10d      	bne.n	800db9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	4313      	orrs	r3, r2
 800db92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a1d      	ldr	r2, [pc, #116]	; (800dc14 <TIM_OC2_SetConfig+0x100>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d00f      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xb0>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a1c      	ldr	r2, [pc, #112]	; (800dc18 <TIM_OC2_SetConfig+0x104>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d00b      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xb0>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a1b      	ldr	r2, [pc, #108]	; (800dc1c <TIM_OC2_SetConfig+0x108>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d007      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xb0>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a1a      	ldr	r2, [pc, #104]	; (800dc20 <TIM_OC2_SetConfig+0x10c>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d003      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xb0>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a19      	ldr	r2, [pc, #100]	; (800dc24 <TIM_OC2_SetConfig+0x110>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d113      	bne.n	800dbec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	695b      	ldr	r3, [r3, #20]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	699b      	ldr	r3, [r3, #24]
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	693a      	ldr	r2, [r7, #16]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	621a      	str	r2, [r3, #32]
}
 800dc06:	bf00      	nop
 800dc08:	371c      	adds	r7, #28
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	40012c00 	.word	0x40012c00
 800dc18:	40013400 	.word	0x40013400
 800dc1c:	40014000 	.word	0x40014000
 800dc20:	40014400 	.word	0x40014400
 800dc24:	40014800 	.word	0x40014800

0800dc28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	69db      	ldr	r3, [r3, #28]
 800dc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f023 0303 	bic.w	r3, r3, #3
 800dc62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	021b      	lsls	r3, r3, #8
 800dc7c:	697a      	ldr	r2, [r7, #20]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a27      	ldr	r2, [pc, #156]	; (800dd24 <TIM_OC3_SetConfig+0xfc>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d003      	beq.n	800dc92 <TIM_OC3_SetConfig+0x6a>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a26      	ldr	r2, [pc, #152]	; (800dd28 <TIM_OC3_SetConfig+0x100>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d10d      	bne.n	800dcae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	021b      	lsls	r3, r3, #8
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a1c      	ldr	r2, [pc, #112]	; (800dd24 <TIM_OC3_SetConfig+0xfc>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d00f      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xae>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a1b      	ldr	r2, [pc, #108]	; (800dd28 <TIM_OC3_SetConfig+0x100>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d00b      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xae>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a1a      	ldr	r2, [pc, #104]	; (800dd2c <TIM_OC3_SetConfig+0x104>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d007      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xae>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a19      	ldr	r2, [pc, #100]	; (800dd30 <TIM_OC3_SetConfig+0x108>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d003      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xae>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a18      	ldr	r2, [pc, #96]	; (800dd34 <TIM_OC3_SetConfig+0x10c>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d113      	bne.n	800dcfe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	011b      	lsls	r3, r3, #4
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	011b      	lsls	r3, r3, #4
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	621a      	str	r2, [r3, #32]
}
 800dd18:	bf00      	nop
 800dd1a:	371c      	adds	r7, #28
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	40012c00 	.word	0x40012c00
 800dd28:	40013400 	.word	0x40013400
 800dd2c:	40014000 	.word	0x40014000
 800dd30:	40014400 	.word	0x40014400
 800dd34:	40014800 	.word	0x40014800

0800dd38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a1b      	ldr	r3, [r3, #32]
 800dd46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	69db      	ldr	r3, [r3, #28]
 800dd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dd66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	021b      	lsls	r3, r3, #8
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	031b      	lsls	r3, r3, #12
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a18      	ldr	r2, [pc, #96]	; (800ddf8 <TIM_OC4_SetConfig+0xc0>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d00f      	beq.n	800ddbc <TIM_OC4_SetConfig+0x84>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a17      	ldr	r2, [pc, #92]	; (800ddfc <TIM_OC4_SetConfig+0xc4>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00b      	beq.n	800ddbc <TIM_OC4_SetConfig+0x84>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a16      	ldr	r2, [pc, #88]	; (800de00 <TIM_OC4_SetConfig+0xc8>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d007      	beq.n	800ddbc <TIM_OC4_SetConfig+0x84>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a15      	ldr	r2, [pc, #84]	; (800de04 <TIM_OC4_SetConfig+0xcc>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d003      	beq.n	800ddbc <TIM_OC4_SetConfig+0x84>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a14      	ldr	r2, [pc, #80]	; (800de08 <TIM_OC4_SetConfig+0xd0>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d109      	bne.n	800ddd0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ddc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	019b      	lsls	r3, r3, #6
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	693a      	ldr	r2, [r7, #16]
 800dde8:	621a      	str	r2, [r3, #32]
}
 800ddea:	bf00      	nop
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	40012c00 	.word	0x40012c00
 800ddfc:	40013400 	.word	0x40013400
 800de00:	40014000 	.word	0x40014000
 800de04:	40014400 	.word	0x40014400
 800de08:	40014800 	.word	0x40014800

0800de0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b087      	sub	sp, #28
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	4313      	orrs	r3, r2
 800de48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800de50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	041b      	lsls	r3, r3, #16
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a17      	ldr	r2, [pc, #92]	; (800dec0 <TIM_OC5_SetConfig+0xb4>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00f      	beq.n	800de86 <TIM_OC5_SetConfig+0x7a>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a16      	ldr	r2, [pc, #88]	; (800dec4 <TIM_OC5_SetConfig+0xb8>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00b      	beq.n	800de86 <TIM_OC5_SetConfig+0x7a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <TIM_OC5_SetConfig+0xbc>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d007      	beq.n	800de86 <TIM_OC5_SetConfig+0x7a>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a14      	ldr	r2, [pc, #80]	; (800decc <TIM_OC5_SetConfig+0xc0>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d003      	beq.n	800de86 <TIM_OC5_SetConfig+0x7a>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a13      	ldr	r2, [pc, #76]	; (800ded0 <TIM_OC5_SetConfig+0xc4>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d109      	bne.n	800de9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	021b      	lsls	r3, r3, #8
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	4313      	orrs	r3, r2
 800de98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	697a      	ldr	r2, [r7, #20]
 800de9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	621a      	str	r2, [r3, #32]
}
 800deb4:	bf00      	nop
 800deb6:	371c      	adds	r7, #28
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	40012c00 	.word	0x40012c00
 800dec4:	40013400 	.word	0x40013400
 800dec8:	40014000 	.word	0x40014000
 800decc:	40014400 	.word	0x40014400
 800ded0:	40014800 	.word	0x40014800

0800ded4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a1b      	ldr	r3, [r3, #32]
 800dee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800defa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	021b      	lsls	r3, r3, #8
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	4313      	orrs	r3, r2
 800df12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	051b      	lsls	r3, r3, #20
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	4313      	orrs	r3, r2
 800df26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a18      	ldr	r2, [pc, #96]	; (800df8c <TIM_OC6_SetConfig+0xb8>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d00f      	beq.n	800df50 <TIM_OC6_SetConfig+0x7c>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a17      	ldr	r2, [pc, #92]	; (800df90 <TIM_OC6_SetConfig+0xbc>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d00b      	beq.n	800df50 <TIM_OC6_SetConfig+0x7c>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a16      	ldr	r2, [pc, #88]	; (800df94 <TIM_OC6_SetConfig+0xc0>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d007      	beq.n	800df50 <TIM_OC6_SetConfig+0x7c>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a15      	ldr	r2, [pc, #84]	; (800df98 <TIM_OC6_SetConfig+0xc4>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d003      	beq.n	800df50 <TIM_OC6_SetConfig+0x7c>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4a14      	ldr	r2, [pc, #80]	; (800df9c <TIM_OC6_SetConfig+0xc8>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d109      	bne.n	800df64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	695b      	ldr	r3, [r3, #20]
 800df5c:	029b      	lsls	r3, r3, #10
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	4313      	orrs	r3, r2
 800df62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	685a      	ldr	r2, [r3, #4]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	621a      	str	r2, [r3, #32]
}
 800df7e:	bf00      	nop
 800df80:	371c      	adds	r7, #28
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	40012c00 	.word	0x40012c00
 800df90:	40013400 	.word	0x40013400
 800df94:	40014000 	.word	0x40014000
 800df98:	40014400 	.word	0x40014400
 800df9c:	40014800 	.word	0x40014800

0800dfa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d101      	bne.n	800dfbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	e065      	b.n	800e088 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	4313      	orrs	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	4313      	orrs	r3, r2
 800e016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e022:	4313      	orrs	r3, r2
 800e024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	699b      	ldr	r3, [r3, #24]
 800e030:	041b      	lsls	r3, r3, #16
 800e032:	4313      	orrs	r3, r2
 800e034:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a16      	ldr	r2, [pc, #88]	; (800e094 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d004      	beq.n	800e04a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a14      	ldr	r2, [pc, #80]	; (800e098 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d115      	bne.n	800e076 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e054:	051b      	lsls	r3, r3, #20
 800e056:	4313      	orrs	r3, r2
 800e058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	69db      	ldr	r3, [r3, #28]
 800e064:	4313      	orrs	r3, r2
 800e066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	4313      	orrs	r3, r2
 800e074:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2200      	movs	r2, #0
 800e082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr
 800e094:	40012c00 	.word	0x40012c00
 800e098:	40013400 	.word	0x40013400

0800e09c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0b8:	bf00      	nop
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0cc:	bf00      	nop
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e042      	b.n	800e170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d106      	bne.n	800e102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7f6 f801 	bl	8004104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2224      	movs	r2, #36	; 0x24
 800e106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f022 0201 	bic.w	r2, r2, #1
 800e118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 fb64 	bl	800e7e8 <UART_SetConfig>
 800e120:	4603      	mov	r3, r0
 800e122:	2b01      	cmp	r3, #1
 800e124:	d101      	bne.n	800e12a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	e022      	b.n	800e170 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d002      	beq.n	800e138 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fe54 	bl	800ede0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	689a      	ldr	r2, [r3, #8]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f042 0201 	orr.w	r2, r2, #1
 800e166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fedb 	bl	800ef24 <UART_CheckIdleState>
 800e16e:	4603      	mov	r3, r0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b0ba      	sub	sp, #232	; 0xe8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e19e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d11b      	bne.n	800e1ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1b8:	f003 0320 	and.w	r3, r3, #32
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d015      	beq.n	800e1ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1c4:	f003 0320 	and.w	r3, r3, #32
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d105      	bne.n	800e1d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d009      	beq.n	800e1ec <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 82d6 	beq.w	800e78e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	4798      	blx	r3
      }
      return;
 800e1ea:	e2d0      	b.n	800e78e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800e1ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f000 811f 	beq.w	800e434 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e1f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e1fa:	4b8b      	ldr	r3, [pc, #556]	; (800e428 <HAL_UART_IRQHandler+0x2b0>)
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e202:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e206:	4b89      	ldr	r3, [pc, #548]	; (800e42c <HAL_UART_IRQHandler+0x2b4>)
 800e208:	4013      	ands	r3, r2
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f000 8112 	beq.w	800e434 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e214:	f003 0301 	and.w	r3, r3, #1
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d011      	beq.n	800e240 <HAL_UART_IRQHandler+0xc8>
 800e21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00b      	beq.n	800e240 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2201      	movs	r2, #1
 800e22e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e236:	f043 0201 	orr.w	r2, r3, #1
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e244:	f003 0302 	and.w	r3, r3, #2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d011      	beq.n	800e270 <HAL_UART_IRQHandler+0xf8>
 800e24c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e250:	f003 0301 	and.w	r3, r3, #1
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00b      	beq.n	800e270 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2202      	movs	r2, #2
 800e25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e266:	f043 0204 	orr.w	r2, r3, #4
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e274:	f003 0304 	and.w	r3, r3, #4
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d011      	beq.n	800e2a0 <HAL_UART_IRQHandler+0x128>
 800e27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00b      	beq.n	800e2a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2204      	movs	r2, #4
 800e28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e296:	f043 0202 	orr.w	r2, r3, #2
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d017      	beq.n	800e2dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2b0:	f003 0320 	and.w	r3, r3, #32
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d105      	bne.n	800e2c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e2b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e2bc:	4b5a      	ldr	r3, [pc, #360]	; (800e428 <HAL_UART_IRQHandler+0x2b0>)
 800e2be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00b      	beq.n	800e2dc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2208      	movs	r2, #8
 800e2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2d2:	f043 0208 	orr.w	r2, r3, #8
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d012      	beq.n	800e30e <HAL_UART_IRQHandler+0x196>
 800e2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00c      	beq.n	800e30e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e304:	f043 0220 	orr.w	r2, r3, #32
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e314:	2b00      	cmp	r3, #0
 800e316:	f000 823c 	beq.w	800e792 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e31e:	f003 0320 	and.w	r3, r3, #32
 800e322:	2b00      	cmp	r3, #0
 800e324:	d013      	beq.n	800e34e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e32a:	f003 0320 	and.w	r3, r3, #32
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d105      	bne.n	800e33e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d007      	beq.n	800e34e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e342:	2b00      	cmp	r3, #0
 800e344:	d003      	beq.n	800e34e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e362:	2b40      	cmp	r3, #64	; 0x40
 800e364:	d005      	beq.n	800e372 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e36a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d04f      	beq.n	800e412 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fee9 	bl	800f14a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	d141      	bne.n	800e40a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	3308      	adds	r3, #8
 800e38c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e394:	e853 3f00 	ldrex	r3, [r3]
 800e398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e39c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3c2:	e841 2300 	strex	r3, r2, [r1]
 800e3c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1d9      	bne.n	800e386 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d013      	beq.n	800e402 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3de:	4a14      	ldr	r2, [pc, #80]	; (800e430 <HAL_UART_IRQHandler+0x2b8>)
 800e3e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f7 fec9 	bl	800617e <HAL_DMA_Abort_IT>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d017      	beq.n	800e422 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e400:	e00f      	b.n	800e422 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f9da 	bl	800e7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e408:	e00b      	b.n	800e422 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f9d6 	bl	800e7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e410:	e007      	b.n	800e422 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f9d2 	bl	800e7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e420:	e1b7      	b.n	800e792 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e422:	bf00      	nop
    return;
 800e424:	e1b5      	b.n	800e792 <HAL_UART_IRQHandler+0x61a>
 800e426:	bf00      	nop
 800e428:	10000001 	.word	0x10000001
 800e42c:	04000120 	.word	0x04000120
 800e430:	0800f217 	.word	0x0800f217

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e438:	2b01      	cmp	r3, #1
 800e43a:	f040 814a 	bne.w	800e6d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e442:	f003 0310 	and.w	r3, r3, #16
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 8143 	beq.w	800e6d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e450:	f003 0310 	and.w	r3, r3, #16
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 813c 	beq.w	800e6d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2210      	movs	r2, #16
 800e460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e46c:	2b40      	cmp	r3, #64	; 0x40
 800e46e:	f040 80b5 	bne.w	800e5dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e47e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 8187 	beq.w	800e796 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e48e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e492:	429a      	cmp	r2, r3
 800e494:	f080 817f 	bcs.w	800e796 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e49e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f003 0320 	and.w	r3, r3, #32
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f040 8086 	bne.w	800e5c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4c0:	e853 3f00 	ldrex	r3, [r3]
 800e4c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4ee:	e841 2300 	strex	r3, r2, [r1]
 800e4f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1da      	bne.n	800e4b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3308      	adds	r3, #8
 800e504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e508:	e853 3f00 	ldrex	r3, [r3]
 800e50c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e50e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e510:	f023 0301 	bic.w	r3, r3, #1
 800e514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3308      	adds	r3, #8
 800e51e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e52a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e52e:	e841 2300 	strex	r3, r2, [r1]
 800e532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1e1      	bne.n	800e4fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3308      	adds	r3, #8
 800e55a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e55e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e566:	e841 2300 	strex	r3, r2, [r1]
 800e56a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e3      	bne.n	800e53a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2220      	movs	r2, #32
 800e576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e588:	e853 3f00 	ldrex	r3, [r3]
 800e58c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e58e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e590:	f023 0310 	bic.w	r3, r3, #16
 800e594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	461a      	mov	r2, r3
 800e59e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5aa:	e841 2300 	strex	r3, r2, [r1]
 800e5ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1e4      	bne.n	800e580 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7f7 fd83 	bl	80060c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 f8fb 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5da:	e0dc      	b.n	800e796 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 80ce 	beq.w	800e79a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800e5fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 80c9 	beq.w	800e79a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	e853 3f00 	ldrex	r3, [r3]
 800e614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e61c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	461a      	mov	r2, r3
 800e626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e62a:	647b      	str	r3, [r7, #68]	; 0x44
 800e62c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e632:	e841 2300 	strex	r3, r2, [r1]
 800e636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1e4      	bne.n	800e608 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e648:	e853 3f00 	ldrex	r3, [r3]
 800e64c:	623b      	str	r3, [r7, #32]
   return(result);
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e654:	f023 0301 	bic.w	r3, r3, #1
 800e658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	3308      	adds	r3, #8
 800e662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e666:	633a      	str	r2, [r7, #48]	; 0x30
 800e668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e1      	bne.n	800e63e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2220      	movs	r2, #32
 800e67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	e853 3f00 	ldrex	r3, [r3]
 800e69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f023 0310 	bic.w	r3, r3, #16
 800e6a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6b0:	61fb      	str	r3, [r7, #28]
 800e6b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b4:	69b9      	ldr	r1, [r7, #24]
 800e6b6:	69fa      	ldr	r2, [r7, #28]
 800e6b8:	e841 2300 	strex	r3, r2, [r1]
 800e6bc:	617b      	str	r3, [r7, #20]
   return(result);
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1e4      	bne.n	800e68e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 f880 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6d0:	e063      	b.n	800e79a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00e      	beq.n	800e6fc <HAL_UART_IRQHandler+0x584>
 800e6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d008      	beq.n	800e6fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 fdcf 	bl	800f298 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6fa:	e051      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e704:	2b00      	cmp	r3, #0
 800e706:	d014      	beq.n	800e732 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e710:	2b00      	cmp	r3, #0
 800e712:	d105      	bne.n	800e720 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d008      	beq.n	800e732 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e724:	2b00      	cmp	r3, #0
 800e726:	d03a      	beq.n	800e79e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	4798      	blx	r3
    }
    return;
 800e730:	e035      	b.n	800e79e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d009      	beq.n	800e752 <HAL_UART_IRQHandler+0x5da>
 800e73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 fd79 	bl	800f242 <UART_EndTransmit_IT>
    return;
 800e750:	e026      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <HAL_UART_IRQHandler+0x5fa>
 800e75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fda8 	bl	800f2c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e770:	e016      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d010      	beq.n	800e7a0 <HAL_UART_IRQHandler+0x628>
 800e77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e782:	2b00      	cmp	r3, #0
 800e784:	da0c      	bge.n	800e7a0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fd90 	bl	800f2ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e78c:	e008      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
      return;
 800e78e:	bf00      	nop
 800e790:	e006      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
    return;
 800e792:	bf00      	nop
 800e794:	e004      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
      return;
 800e796:	bf00      	nop
 800e798:	e002      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
      return;
 800e79a:	bf00      	nop
 800e79c:	e000      	b.n	800e7a0 <HAL_UART_IRQHandler+0x628>
    return;
 800e79e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800e7a0:	37e8      	adds	r7, #232	; 0xe8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop

0800e7a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7ec:	b08c      	sub	sp, #48	; 0x30
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	689a      	ldr	r2, [r3, #8]
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	431a      	orrs	r2, r3
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	431a      	orrs	r2, r3
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	69db      	ldr	r3, [r3, #28]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	4baa      	ldr	r3, [pc, #680]	; (800eac0 <UART_SetConfig+0x2d8>)
 800e818:	4013      	ands	r3, r2
 800e81a:	697a      	ldr	r2, [r7, #20]
 800e81c:	6812      	ldr	r2, [r2, #0]
 800e81e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e820:	430b      	orrs	r3, r1
 800e822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	68da      	ldr	r2, [r3, #12]
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	430a      	orrs	r2, r1
 800e838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	699b      	ldr	r3, [r3, #24]
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a9f      	ldr	r2, [pc, #636]	; (800eac4 <UART_SetConfig+0x2dc>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d004      	beq.n	800e854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	6a1b      	ldr	r3, [r3, #32]
 800e84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e850:	4313      	orrs	r3, r2
 800e852:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e85e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	6812      	ldr	r2, [r2, #0]
 800e866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e868:	430b      	orrs	r3, r1
 800e86a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e872:	f023 010f 	bic.w	r1, r3, #15
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	430a      	orrs	r2, r1
 800e880:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a90      	ldr	r2, [pc, #576]	; (800eac8 <UART_SetConfig+0x2e0>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d125      	bne.n	800e8d8 <UART_SetConfig+0xf0>
 800e88c:	4b8f      	ldr	r3, [pc, #572]	; (800eacc <UART_SetConfig+0x2e4>)
 800e88e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e892:	f003 0303 	and.w	r3, r3, #3
 800e896:	2b03      	cmp	r3, #3
 800e898:	d81a      	bhi.n	800e8d0 <UART_SetConfig+0xe8>
 800e89a:	a201      	add	r2, pc, #4	; (adr r2, 800e8a0 <UART_SetConfig+0xb8>)
 800e89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a0:	0800e8b1 	.word	0x0800e8b1
 800e8a4:	0800e8c1 	.word	0x0800e8c1
 800e8a8:	0800e8b9 	.word	0x0800e8b9
 800e8ac:	0800e8c9 	.word	0x0800e8c9
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8b6:	e116      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e8b8:	2302      	movs	r3, #2
 800e8ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8be:	e112      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8c6:	e10e      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e8c8:	2308      	movs	r3, #8
 800e8ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8ce:	e10a      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e8d0:	2310      	movs	r3, #16
 800e8d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8d6:	e106      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a7c      	ldr	r2, [pc, #496]	; (800ead0 <UART_SetConfig+0x2e8>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d138      	bne.n	800e954 <UART_SetConfig+0x16c>
 800e8e2:	4b7a      	ldr	r3, [pc, #488]	; (800eacc <UART_SetConfig+0x2e4>)
 800e8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8e8:	f003 030c 	and.w	r3, r3, #12
 800e8ec:	2b0c      	cmp	r3, #12
 800e8ee:	d82d      	bhi.n	800e94c <UART_SetConfig+0x164>
 800e8f0:	a201      	add	r2, pc, #4	; (adr r2, 800e8f8 <UART_SetConfig+0x110>)
 800e8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f6:	bf00      	nop
 800e8f8:	0800e92d 	.word	0x0800e92d
 800e8fc:	0800e94d 	.word	0x0800e94d
 800e900:	0800e94d 	.word	0x0800e94d
 800e904:	0800e94d 	.word	0x0800e94d
 800e908:	0800e93d 	.word	0x0800e93d
 800e90c:	0800e94d 	.word	0x0800e94d
 800e910:	0800e94d 	.word	0x0800e94d
 800e914:	0800e94d 	.word	0x0800e94d
 800e918:	0800e935 	.word	0x0800e935
 800e91c:	0800e94d 	.word	0x0800e94d
 800e920:	0800e94d 	.word	0x0800e94d
 800e924:	0800e94d 	.word	0x0800e94d
 800e928:	0800e945 	.word	0x0800e945
 800e92c:	2300      	movs	r3, #0
 800e92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e932:	e0d8      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e934:	2302      	movs	r3, #2
 800e936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e93a:	e0d4      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e93c:	2304      	movs	r3, #4
 800e93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e942:	e0d0      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e944:	2308      	movs	r3, #8
 800e946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e94a:	e0cc      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e94c:	2310      	movs	r3, #16
 800e94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e952:	e0c8      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a5e      	ldr	r2, [pc, #376]	; (800ead4 <UART_SetConfig+0x2ec>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d125      	bne.n	800e9aa <UART_SetConfig+0x1c2>
 800e95e:	4b5b      	ldr	r3, [pc, #364]	; (800eacc <UART_SetConfig+0x2e4>)
 800e960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e964:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e968:	2b30      	cmp	r3, #48	; 0x30
 800e96a:	d016      	beq.n	800e99a <UART_SetConfig+0x1b2>
 800e96c:	2b30      	cmp	r3, #48	; 0x30
 800e96e:	d818      	bhi.n	800e9a2 <UART_SetConfig+0x1ba>
 800e970:	2b20      	cmp	r3, #32
 800e972:	d00a      	beq.n	800e98a <UART_SetConfig+0x1a2>
 800e974:	2b20      	cmp	r3, #32
 800e976:	d814      	bhi.n	800e9a2 <UART_SetConfig+0x1ba>
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <UART_SetConfig+0x19a>
 800e97c:	2b10      	cmp	r3, #16
 800e97e:	d008      	beq.n	800e992 <UART_SetConfig+0x1aa>
 800e980:	e00f      	b.n	800e9a2 <UART_SetConfig+0x1ba>
 800e982:	2300      	movs	r3, #0
 800e984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e988:	e0ad      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e98a:	2302      	movs	r3, #2
 800e98c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e990:	e0a9      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e992:	2304      	movs	r3, #4
 800e994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e998:	e0a5      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e99a:	2308      	movs	r3, #8
 800e99c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9a0:	e0a1      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e9a2:	2310      	movs	r3, #16
 800e9a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9a8:	e09d      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a4a      	ldr	r2, [pc, #296]	; (800ead8 <UART_SetConfig+0x2f0>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d125      	bne.n	800ea00 <UART_SetConfig+0x218>
 800e9b4:	4b45      	ldr	r3, [pc, #276]	; (800eacc <UART_SetConfig+0x2e4>)
 800e9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e9be:	2bc0      	cmp	r3, #192	; 0xc0
 800e9c0:	d016      	beq.n	800e9f0 <UART_SetConfig+0x208>
 800e9c2:	2bc0      	cmp	r3, #192	; 0xc0
 800e9c4:	d818      	bhi.n	800e9f8 <UART_SetConfig+0x210>
 800e9c6:	2b80      	cmp	r3, #128	; 0x80
 800e9c8:	d00a      	beq.n	800e9e0 <UART_SetConfig+0x1f8>
 800e9ca:	2b80      	cmp	r3, #128	; 0x80
 800e9cc:	d814      	bhi.n	800e9f8 <UART_SetConfig+0x210>
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d002      	beq.n	800e9d8 <UART_SetConfig+0x1f0>
 800e9d2:	2b40      	cmp	r3, #64	; 0x40
 800e9d4:	d008      	beq.n	800e9e8 <UART_SetConfig+0x200>
 800e9d6:	e00f      	b.n	800e9f8 <UART_SetConfig+0x210>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9de:	e082      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9e6:	e07e      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e9e8:	2304      	movs	r3, #4
 800e9ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9ee:	e07a      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e9f0:	2308      	movs	r3, #8
 800e9f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9f6:	e076      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800e9f8:	2310      	movs	r3, #16
 800e9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9fe:	e072      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a35      	ldr	r2, [pc, #212]	; (800eadc <UART_SetConfig+0x2f4>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d12a      	bne.n	800ea60 <UART_SetConfig+0x278>
 800ea0a:	4b30      	ldr	r3, [pc, #192]	; (800eacc <UART_SetConfig+0x2e4>)
 800ea0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea18:	d01a      	beq.n	800ea50 <UART_SetConfig+0x268>
 800ea1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea1e:	d81b      	bhi.n	800ea58 <UART_SetConfig+0x270>
 800ea20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea24:	d00c      	beq.n	800ea40 <UART_SetConfig+0x258>
 800ea26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea2a:	d815      	bhi.n	800ea58 <UART_SetConfig+0x270>
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d003      	beq.n	800ea38 <UART_SetConfig+0x250>
 800ea30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea34:	d008      	beq.n	800ea48 <UART_SetConfig+0x260>
 800ea36:	e00f      	b.n	800ea58 <UART_SetConfig+0x270>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea3e:	e052      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800ea40:	2302      	movs	r3, #2
 800ea42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea46:	e04e      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800ea48:	2304      	movs	r3, #4
 800ea4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea4e:	e04a      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800ea50:	2308      	movs	r3, #8
 800ea52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea56:	e046      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800ea58:	2310      	movs	r3, #16
 800ea5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea5e:	e042      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a17      	ldr	r2, [pc, #92]	; (800eac4 <UART_SetConfig+0x2dc>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d13a      	bne.n	800eae0 <UART_SetConfig+0x2f8>
 800ea6a:	4b18      	ldr	r3, [pc, #96]	; (800eacc <UART_SetConfig+0x2e4>)
 800ea6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ea74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea78:	d01a      	beq.n	800eab0 <UART_SetConfig+0x2c8>
 800ea7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea7e:	d81b      	bhi.n	800eab8 <UART_SetConfig+0x2d0>
 800ea80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea84:	d00c      	beq.n	800eaa0 <UART_SetConfig+0x2b8>
 800ea86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea8a:	d815      	bhi.n	800eab8 <UART_SetConfig+0x2d0>
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <UART_SetConfig+0x2b0>
 800ea90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea94:	d008      	beq.n	800eaa8 <UART_SetConfig+0x2c0>
 800ea96:	e00f      	b.n	800eab8 <UART_SetConfig+0x2d0>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea9e:	e022      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eaa6:	e01e      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800eaa8:	2304      	movs	r3, #4
 800eaaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eaae:	e01a      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800eab0:	2308      	movs	r3, #8
 800eab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eab6:	e016      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800eab8:	2310      	movs	r3, #16
 800eaba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eabe:	e012      	b.n	800eae6 <UART_SetConfig+0x2fe>
 800eac0:	cfff69f3 	.word	0xcfff69f3
 800eac4:	40008000 	.word	0x40008000
 800eac8:	40013800 	.word	0x40013800
 800eacc:	40021000 	.word	0x40021000
 800ead0:	40004400 	.word	0x40004400
 800ead4:	40004800 	.word	0x40004800
 800ead8:	40004c00 	.word	0x40004c00
 800eadc:	40005000 	.word	0x40005000
 800eae0:	2310      	movs	r3, #16
 800eae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4aae      	ldr	r2, [pc, #696]	; (800eda4 <UART_SetConfig+0x5bc>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	f040 8097 	bne.w	800ec20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eaf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eaf6:	2b08      	cmp	r3, #8
 800eaf8:	d823      	bhi.n	800eb42 <UART_SetConfig+0x35a>
 800eafa:	a201      	add	r2, pc, #4	; (adr r2, 800eb00 <UART_SetConfig+0x318>)
 800eafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb00:	0800eb25 	.word	0x0800eb25
 800eb04:	0800eb43 	.word	0x0800eb43
 800eb08:	0800eb2d 	.word	0x0800eb2d
 800eb0c:	0800eb43 	.word	0x0800eb43
 800eb10:	0800eb33 	.word	0x0800eb33
 800eb14:	0800eb43 	.word	0x0800eb43
 800eb18:	0800eb43 	.word	0x0800eb43
 800eb1c:	0800eb43 	.word	0x0800eb43
 800eb20:	0800eb3b 	.word	0x0800eb3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb24:	f7fb f892 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800eb28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eb2a:	e010      	b.n	800eb4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb2c:	4b9e      	ldr	r3, [pc, #632]	; (800eda8 <UART_SetConfig+0x5c0>)
 800eb2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eb30:	e00d      	b.n	800eb4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb32:	f7fa fff3 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800eb36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eb38:	e009      	b.n	800eb4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eb40:	e005      	b.n	800eb4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800eb42:	2300      	movs	r3, #0
 800eb44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800eb46:	2301      	movs	r3, #1
 800eb48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800eb4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f000 8130 	beq.w	800edb6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5a:	4a94      	ldr	r2, [pc, #592]	; (800edac <UART_SetConfig+0x5c4>)
 800eb5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb60:	461a      	mov	r2, r3
 800eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb64:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	005b      	lsls	r3, r3, #1
 800eb72:	4413      	add	r3, r2
 800eb74:	69ba      	ldr	r2, [r7, #24]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d305      	bcc.n	800eb86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb80:	69ba      	ldr	r2, [r7, #24]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d903      	bls.n	800eb8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800eb8c:	e113      	b.n	800edb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb90:	2200      	movs	r2, #0
 800eb92:	60bb      	str	r3, [r7, #8]
 800eb94:	60fa      	str	r2, [r7, #12]
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9a:	4a84      	ldr	r2, [pc, #528]	; (800edac <UART_SetConfig+0x5c4>)
 800eb9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	2200      	movs	r2, #0
 800eba4:	603b      	str	r3, [r7, #0]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ebb0:	f7f2 f862 	bl	8000c78 <__aeabi_uldivmod>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4610      	mov	r0, r2
 800ebba:	4619      	mov	r1, r3
 800ebbc:	f04f 0200 	mov.w	r2, #0
 800ebc0:	f04f 0300 	mov.w	r3, #0
 800ebc4:	020b      	lsls	r3, r1, #8
 800ebc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ebca:	0202      	lsls	r2, r0, #8
 800ebcc:	6979      	ldr	r1, [r7, #20]
 800ebce:	6849      	ldr	r1, [r1, #4]
 800ebd0:	0849      	lsrs	r1, r1, #1
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	eb12 0804 	adds.w	r8, r2, r4
 800ebdc:	eb43 0905 	adc.w	r9, r3, r5
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	469a      	mov	sl, r3
 800ebe8:	4693      	mov	fp, r2
 800ebea:	4652      	mov	r2, sl
 800ebec:	465b      	mov	r3, fp
 800ebee:	4640      	mov	r0, r8
 800ebf0:	4649      	mov	r1, r9
 800ebf2:	f7f2 f841 	bl	8000c78 <__aeabi_uldivmod>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ebfe:	6a3b      	ldr	r3, [r7, #32]
 800ec00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec04:	d308      	bcc.n	800ec18 <UART_SetConfig+0x430>
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec0c:	d204      	bcs.n	800ec18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	6a3a      	ldr	r2, [r7, #32]
 800ec14:	60da      	str	r2, [r3, #12]
 800ec16:	e0ce      	b.n	800edb6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ec1e:	e0ca      	b.n	800edb6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	69db      	ldr	r3, [r3, #28]
 800ec24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec28:	d166      	bne.n	800ecf8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ec2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec2e:	2b08      	cmp	r3, #8
 800ec30:	d827      	bhi.n	800ec82 <UART_SetConfig+0x49a>
 800ec32:	a201      	add	r2, pc, #4	; (adr r2, 800ec38 <UART_SetConfig+0x450>)
 800ec34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec38:	0800ec5d 	.word	0x0800ec5d
 800ec3c:	0800ec65 	.word	0x0800ec65
 800ec40:	0800ec6d 	.word	0x0800ec6d
 800ec44:	0800ec83 	.word	0x0800ec83
 800ec48:	0800ec73 	.word	0x0800ec73
 800ec4c:	0800ec83 	.word	0x0800ec83
 800ec50:	0800ec83 	.word	0x0800ec83
 800ec54:	0800ec83 	.word	0x0800ec83
 800ec58:	0800ec7b 	.word	0x0800ec7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec5c:	f7fa fff6 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800ec60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec62:	e014      	b.n	800ec8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec64:	f7fb f808 	bl	8009c78 <HAL_RCC_GetPCLK2Freq>
 800ec68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec6a:	e010      	b.n	800ec8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec6c:	4b4e      	ldr	r3, [pc, #312]	; (800eda8 <UART_SetConfig+0x5c0>)
 800ec6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ec70:	e00d      	b.n	800ec8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec72:	f7fa ff53 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ec76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec78:	e009      	b.n	800ec8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ec80:	e005      	b.n	800ec8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ec86:	2301      	movs	r3, #1
 800ec88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ec8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 8090 	beq.w	800edb6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9a:	4a44      	ldr	r2, [pc, #272]	; (800edac <UART_SetConfig+0x5c4>)
 800ec9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eca0:	461a      	mov	r2, r3
 800eca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eca8:	005a      	lsls	r2, r3, #1
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	085b      	lsrs	r3, r3, #1
 800ecb0:	441a      	add	r2, r3
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
 800ecbe:	2b0f      	cmp	r3, #15
 800ecc0:	d916      	bls.n	800ecf0 <UART_SetConfig+0x508>
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecc8:	d212      	bcs.n	800ecf0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	f023 030f 	bic.w	r3, r3, #15
 800ecd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	085b      	lsrs	r3, r3, #1
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	f003 0307 	and.w	r3, r3, #7
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	8bfb      	ldrh	r3, [r7, #30]
 800ece2:	4313      	orrs	r3, r2
 800ece4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	8bfa      	ldrh	r2, [r7, #30]
 800ecec:	60da      	str	r2, [r3, #12]
 800ecee:	e062      	b.n	800edb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ecf6:	e05e      	b.n	800edb6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ecf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ecfc:	2b08      	cmp	r3, #8
 800ecfe:	d828      	bhi.n	800ed52 <UART_SetConfig+0x56a>
 800ed00:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <UART_SetConfig+0x520>)
 800ed02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed06:	bf00      	nop
 800ed08:	0800ed2d 	.word	0x0800ed2d
 800ed0c:	0800ed35 	.word	0x0800ed35
 800ed10:	0800ed3d 	.word	0x0800ed3d
 800ed14:	0800ed53 	.word	0x0800ed53
 800ed18:	0800ed43 	.word	0x0800ed43
 800ed1c:	0800ed53 	.word	0x0800ed53
 800ed20:	0800ed53 	.word	0x0800ed53
 800ed24:	0800ed53 	.word	0x0800ed53
 800ed28:	0800ed4b 	.word	0x0800ed4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed2c:	f7fa ff8e 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800ed30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed32:	e014      	b.n	800ed5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed34:	f7fa ffa0 	bl	8009c78 <HAL_RCC_GetPCLK2Freq>
 800ed38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed3a:	e010      	b.n	800ed5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed3c:	4b1a      	ldr	r3, [pc, #104]	; (800eda8 <UART_SetConfig+0x5c0>)
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ed40:	e00d      	b.n	800ed5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed42:	f7fa feeb 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800ed46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed48:	e009      	b.n	800ed5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ed50:	e005      	b.n	800ed5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ed52:	2300      	movs	r3, #0
 800ed54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ed5c:	bf00      	nop
    }

    if (pclk != 0U)
 800ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d028      	beq.n	800edb6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed68:	4a10      	ldr	r2, [pc, #64]	; (800edac <UART_SetConfig+0x5c4>)
 800ed6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed6e:	461a      	mov	r2, r3
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	085b      	lsrs	r3, r3, #1
 800ed7c:	441a      	add	r2, r3
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed86:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	2b0f      	cmp	r3, #15
 800ed8c:	d910      	bls.n	800edb0 <UART_SetConfig+0x5c8>
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed94:	d20c      	bcs.n	800edb0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60da      	str	r2, [r3, #12]
 800eda0:	e009      	b.n	800edb6 <UART_SetConfig+0x5ce>
 800eda2:	bf00      	nop
 800eda4:	40008000 	.word	0x40008000
 800eda8:	00f42400 	.word	0x00f42400
 800edac:	0801a090 	.word	0x0801a090
      }
      else
      {
        ret = HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	2201      	movs	r2, #1
 800edba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2200      	movs	r2, #0
 800edca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	2200      	movs	r2, #0
 800edd0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800edd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3730      	adds	r7, #48	; 0x30
 800edda:	46bd      	mov	sp, r7
 800eddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ede0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edec:	f003 0301 	and.w	r3, r3, #1
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00a      	beq.n	800ee0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	430a      	orrs	r2, r1
 800ee08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0e:	f003 0302 	and.w	r3, r3, #2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00a      	beq.n	800ee2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee30:	f003 0304 	and.w	r3, r3, #4
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00a      	beq.n	800ee4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	430a      	orrs	r2, r1
 800ee4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee52:	f003 0308 	and.w	r3, r3, #8
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00a      	beq.n	800ee70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	430a      	orrs	r2, r1
 800ee6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee74:	f003 0310 	and.w	r3, r3, #16
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00a      	beq.n	800ee92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	430a      	orrs	r2, r1
 800ee90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee96:	f003 0320 	and.w	r3, r3, #32
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00a      	beq.n	800eeb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	430a      	orrs	r2, r1
 800eeb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d01a      	beq.n	800eef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	430a      	orrs	r2, r1
 800eed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eede:	d10a      	bne.n	800eef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	430a      	orrs	r2, r1
 800eef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eefa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00a      	beq.n	800ef18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	430a      	orrs	r2, r1
 800ef16:	605a      	str	r2, [r3, #4]
  }
}
 800ef18:	bf00      	nop
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af02      	add	r7, sp, #8
 800ef2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef34:	f7f6 ff86 	bl	8005e44 <HAL_GetTick>
 800ef38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f003 0308 	and.w	r3, r3, #8
 800ef44:	2b08      	cmp	r3, #8
 800ef46:	d10e      	bne.n	800ef66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef4c:	9300      	str	r3, [sp, #0]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f82f 	bl	800efba <UART_WaitOnFlagUntilTimeout>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d001      	beq.n	800ef66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef62:	2303      	movs	r3, #3
 800ef64:	e025      	b.n	800efb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f003 0304 	and.w	r3, r3, #4
 800ef70:	2b04      	cmp	r3, #4
 800ef72:	d10e      	bne.n	800ef92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f819 	bl	800efba <UART_WaitOnFlagUntilTimeout>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef8e:	2303      	movs	r3, #3
 800ef90:	e00f      	b.n	800efb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2220      	movs	r2, #32
 800ef96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2220      	movs	r2, #32
 800ef9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800efb0:	2300      	movs	r3, #0
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b09c      	sub	sp, #112	; 0x70
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	60f8      	str	r0, [r7, #12]
 800efc2:	60b9      	str	r1, [r7, #8]
 800efc4:	603b      	str	r3, [r7, #0]
 800efc6:	4613      	mov	r3, r2
 800efc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efca:	e0a9      	b.n	800f120 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efd2:	f000 80a5 	beq.w	800f120 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efd6:	f7f6 ff35 	bl	8005e44 <HAL_GetTick>
 800efda:	4602      	mov	r2, r0
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d302      	bcc.n	800efec <UART_WaitOnFlagUntilTimeout+0x32>
 800efe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d140      	bne.n	800f06e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff4:	e853 3f00 	ldrex	r3, [r3]
 800eff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800effa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800effc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f000:	667b      	str	r3, [r7, #100]	; 0x64
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	461a      	mov	r2, r3
 800f008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f00a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f00c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f010:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f012:	e841 2300 	strex	r3, r2, [r1]
 800f016:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1e6      	bne.n	800efec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3308      	adds	r3, #8
 800f024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f028:	e853 3f00 	ldrex	r3, [r3]
 800f02c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f030:	f023 0301 	bic.w	r3, r3, #1
 800f034:	663b      	str	r3, [r7, #96]	; 0x60
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3308      	adds	r3, #8
 800f03c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f03e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f046:	e841 2300 	strex	r3, r2, [r1]
 800f04a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e5      	bne.n	800f01e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2220      	movs	r2, #32
 800f056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2220      	movs	r2, #32
 800f05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f06a:	2303      	movs	r3, #3
 800f06c:	e069      	b.n	800f142 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f003 0304 	and.w	r3, r3, #4
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d051      	beq.n	800f120 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	69db      	ldr	r3, [r3, #28]
 800f082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f08a:	d149      	bne.n	800f120 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f094:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	e853 3f00 	ldrex	r3, [r3]
 800f0a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f0aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800f0b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0bc:	e841 2300 	strex	r3, r2, [r1]
 800f0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1e6      	bne.n	800f096 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	e853 3f00 	ldrex	r3, [r3]
 800f0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	f023 0301 	bic.w	r3, r3, #1
 800f0de:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f0e8:	623a      	str	r2, [r7, #32]
 800f0ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ec:	69f9      	ldr	r1, [r7, #28]
 800f0ee:	6a3a      	ldr	r2, [r7, #32]
 800f0f0:	e841 2300 	strex	r3, r2, [r1]
 800f0f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e5      	bne.n	800f0c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2220      	movs	r2, #32
 800f100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2220      	movs	r2, #32
 800f108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2220      	movs	r2, #32
 800f110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f11c:	2303      	movs	r3, #3
 800f11e:	e010      	b.n	800f142 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	69da      	ldr	r2, [r3, #28]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	4013      	ands	r3, r2
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	bf0c      	ite	eq
 800f130:	2301      	moveq	r3, #1
 800f132:	2300      	movne	r3, #0
 800f134:	b2db      	uxtb	r3, r3
 800f136:	461a      	mov	r2, r3
 800f138:	79fb      	ldrb	r3, [r7, #7]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	f43f af46 	beq.w	800efcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3770      	adds	r7, #112	; 0x70
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f14a:	b480      	push	{r7}
 800f14c:	b095      	sub	sp, #84	; 0x54
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15a:	e853 3f00 	ldrex	r3, [r3]
 800f15e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f166:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	461a      	mov	r2, r3
 800f16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f170:	643b      	str	r3, [r7, #64]	; 0x40
 800f172:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f174:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f178:	e841 2300 	strex	r3, r2, [r1]
 800f17c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1e6      	bne.n	800f152 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	3308      	adds	r3, #8
 800f18a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18c:	6a3b      	ldr	r3, [r7, #32]
 800f18e:	e853 3f00 	ldrex	r3, [r3]
 800f192:	61fb      	str	r3, [r7, #28]
   return(result);
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f19a:	f023 0301 	bic.w	r3, r3, #1
 800f19e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	3308      	adds	r3, #8
 800f1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1b0:	e841 2300 	strex	r3, r2, [r1]
 800f1b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1e3      	bne.n	800f184 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d118      	bne.n	800f1f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	e853 3f00 	ldrex	r3, [r3]
 800f1d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	f023 0310 	bic.w	r3, r3, #16
 800f1d8:	647b      	str	r3, [r7, #68]	; 0x44
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1e2:	61bb      	str	r3, [r7, #24]
 800f1e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e6:	6979      	ldr	r1, [r7, #20]
 800f1e8:	69ba      	ldr	r2, [r7, #24]
 800f1ea:	e841 2300 	strex	r3, r2, [r1]
 800f1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1e6      	bne.n	800f1c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2220      	movs	r2, #32
 800f1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f20a:	bf00      	nop
 800f20c:	3754      	adds	r7, #84	; 0x54
 800f20e:	46bd      	mov	sp, r7
 800f210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f214:	4770      	bx	lr

0800f216 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f222:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2200      	movs	r2, #0
 800f228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f7ff fac1 	bl	800e7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f23a:	bf00      	nop
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}

0800f242 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b088      	sub	sp, #32
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	e853 3f00 	ldrex	r3, [r3]
 800f256:	60bb      	str	r3, [r7, #8]
   return(result);
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f25e:	61fb      	str	r3, [r7, #28]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	461a      	mov	r2, r3
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	61bb      	str	r3, [r7, #24]
 800f26a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f26c:	6979      	ldr	r1, [r7, #20]
 800f26e:	69ba      	ldr	r2, [r7, #24]
 800f270:	e841 2300 	strex	r3, r2, [r1]
 800f274:	613b      	str	r3, [r7, #16]
   return(result);
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1e6      	bne.n	800f24a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2220      	movs	r2, #32
 800f280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7ff fa8c 	bl	800e7a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f290:	bf00      	nop
 800f292:	3720      	adds	r7, #32
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d101      	bne.n	800f2ea <HAL_UARTEx_DisableFifoMode+0x16>
 800f2e6:	2302      	movs	r3, #2
 800f2e8:	e027      	b.n	800f33a <HAL_UARTEx_DisableFifoMode+0x66>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2224      	movs	r2, #36	; 0x24
 800f2f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f022 0201 	bic.w	r2, r2, #1
 800f310:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f318:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2220      	movs	r2, #32
 800f32c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f338:	2300      	movs	r3, #0
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3714      	adds	r7, #20
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr

0800f346 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b084      	sub	sp, #16
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f356:	2b01      	cmp	r3, #1
 800f358:	d101      	bne.n	800f35e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f35a:	2302      	movs	r3, #2
 800f35c:	e02d      	b.n	800f3ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2201      	movs	r2, #1
 800f362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2224      	movs	r2, #36	; 0x24
 800f36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f022 0201 	bic.w	r2, r2, #1
 800f384:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f850 	bl	800f440 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2220      	movs	r2, #32
 800f3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d101      	bne.n	800f3da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	e02d      	b.n	800f436 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2224      	movs	r2, #36	; 0x24
 800f3e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f022 0201 	bic.w	r2, r2, #1
 800f400:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	683a      	ldr	r2, [r7, #0]
 800f412:	430a      	orrs	r2, r1
 800f414:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 f812 	bl	800f440 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2220      	movs	r2, #32
 800f428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
	...

0800f440 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f440:	b480      	push	{r7}
 800f442:	b085      	sub	sp, #20
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d108      	bne.n	800f462 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2201      	movs	r2, #1
 800f454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2201      	movs	r2, #1
 800f45c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f460:	e031      	b.n	800f4c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f462:	2308      	movs	r3, #8
 800f464:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f466:	2308      	movs	r3, #8
 800f468:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	689b      	ldr	r3, [r3, #8]
 800f470:	0e5b      	lsrs	r3, r3, #25
 800f472:	b2db      	uxtb	r3, r3
 800f474:	f003 0307 	and.w	r3, r3, #7
 800f478:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	0f5b      	lsrs	r3, r3, #29
 800f482:	b2db      	uxtb	r3, r3
 800f484:	f003 0307 	and.w	r3, r3, #7
 800f488:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f48a:	7bbb      	ldrb	r3, [r7, #14]
 800f48c:	7b3a      	ldrb	r2, [r7, #12]
 800f48e:	4911      	ldr	r1, [pc, #68]	; (800f4d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f490:	5c8a      	ldrb	r2, [r1, r2]
 800f492:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f496:	7b3a      	ldrb	r2, [r7, #12]
 800f498:	490f      	ldr	r1, [pc, #60]	; (800f4d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f49a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f49c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
 800f4aa:	7b7a      	ldrb	r2, [r7, #13]
 800f4ac:	4909      	ldr	r1, [pc, #36]	; (800f4d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f4ae:	5c8a      	ldrb	r2, [r1, r2]
 800f4b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f4b4:	7b7a      	ldrb	r2, [r7, #13]
 800f4b6:	4908      	ldr	r1, [pc, #32]	; (800f4d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f4b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f4ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f4c6:	bf00      	nop
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	0801a0a8 	.word	0x0801a0a8
 800f4d8:	0801a0b0 	.word	0x0801a0b0

0800f4dc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f4dc:	b084      	sub	sp, #16
 800f4de:	b480      	push	{r7}
 800f4e0:	b085      	sub	sp, #20
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
 800f4e6:	f107 001c 	add.w	r0, r7, #28
 800f4ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800f4f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800f4f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f4f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800f4fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800f4fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800f502:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	4313      	orrs	r3, r2
 800f508:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	4b07      	ldr	r3, [pc, #28]	; (800f52c <SDMMC_Init+0x50>)
 800f510:	4013      	ands	r3, r2
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	431a      	orrs	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f51a:	2300      	movs	r3, #0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3714      	adds	r7, #20
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	b004      	add	sp, #16
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	ffc02c00 	.word	0xffc02c00

0800f530 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f53e:	4618      	mov	r0, r3
 800f540:	370c      	adds	r7, #12
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr

0800f54a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f54a:	b480      	push	{r7}
 800f54c:	b083      	sub	sp, #12
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
 800f552:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	681a      	ldr	r2, [r3, #0]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f043 0203 	orr.w	r2, r3, #3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f580:	2002      	movs	r0, #2
 800f582:	f7f6 fc6b 	bl	8005e5c <HAL_Delay>

  return HAL_OK;
 800f586:	2300      	movs	r3, #0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f003 0303 	and.w	r3, r3, #3
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f5d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f5d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68da      	ldr	r2, [r3, #12]
 800f5e2:	4b06      	ldr	r3, [pc, #24]	; (800f5fc <SDMMC_SendCommand+0x50>)
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	68fa      	ldr	r2, [r7, #12]
 800f5e8:	431a      	orrs	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3714      	adds	r7, #20
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	fffee0c0 	.word	0xfffee0c0

0800f600 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	b2db      	uxtb	r3, r3
}
 800f60e:	4618      	mov	r0, r3
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr

0800f61a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f61a:	b480      	push	{r7}
 800f61c:	b085      	sub	sp, #20
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	3314      	adds	r3, #20
 800f628:	461a      	mov	r2, r3
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	4413      	add	r3, r2
 800f62e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3714      	adds	r7, #20
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	685a      	ldr	r2, [r3, #4]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f666:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f66c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f672:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	4313      	orrs	r3, r2
 800f678:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f67e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	431a      	orrs	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f68a:	2300      	movs	r3, #0

}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3714      	adds	r7, #20
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b088      	sub	sp, #32
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f6a6:	2310      	movs	r3, #16
 800f6a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f6b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6ba:	f107 0308 	add.w	r3, r7, #8
 800f6be:	4619      	mov	r1, r3
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7ff ff73 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6ca:	2110      	movs	r1, #16
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 fa7b 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f6d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6d4:	69fb      	ldr	r3, [r7, #28]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3720      	adds	r7, #32
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b088      	sub	sp, #32
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f6ec:	2311      	movs	r3, #17
 800f6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f6fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f700:	f107 0308 	add.w	r3, r7, #8
 800f704:	4619      	mov	r1, r3
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7ff ff50 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f710:	2111      	movs	r1, #17
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 fa58 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f71a:	69fb      	ldr	r3, [r7, #28]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3720      	adds	r7, #32
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f732:	2312      	movs	r3, #18
 800f734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f73a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f73c:	2300      	movs	r3, #0
 800f73e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f746:	f107 0308 	add.w	r3, r7, #8
 800f74a:	4619      	mov	r1, r3
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff ff2d 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f752:	f241 3288 	movw	r2, #5000	; 0x1388
 800f756:	2112      	movs	r1, #18
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 fa35 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f75e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f760:	69fb      	ldr	r3, [r7, #28]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3720      	adds	r7, #32
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b088      	sub	sp, #32
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f778:	2318      	movs	r3, #24
 800f77a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f77c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f782:	2300      	movs	r3, #0
 800f784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f78a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f78c:	f107 0308 	add.w	r3, r7, #8
 800f790:	4619      	mov	r1, r3
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7ff ff0a 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f798:	f241 3288 	movw	r2, #5000	; 0x1388
 800f79c:	2118      	movs	r1, #24
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fa12 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f7a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7a6:	69fb      	ldr	r3, [r7, #28]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3720      	adds	r7, #32
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b088      	sub	sp, #32
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f7be:	2319      	movs	r3, #25
 800f7c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7d2:	f107 0308 	add.w	r3, r7, #8
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff fee7 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f7de:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7e2:	2119      	movs	r1, #25
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 f9ef 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f7ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7ec:	69fb      	ldr	r3, [r7, #28]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3720      	adds	r7, #32
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b088      	sub	sp, #32
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f800:	2300      	movs	r3, #0
 800f802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f804:	230c      	movs	r3, #12
 800f806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f80e:	2300      	movs	r3, #0
 800f810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f816:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f830:	f107 0308 	add.w	r3, r7, #8
 800f834:	4619      	mov	r1, r3
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7ff feb8 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f83c:	4a08      	ldr	r2, [pc, #32]	; (800f860 <SDMMC_CmdStopTransfer+0x68>)
 800f83e:	210c      	movs	r1, #12
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 f9c1 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f846:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800f854:	69fb      	ldr	r3, [r7, #28]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3720      	adds	r7, #32
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	05f5e100 	.word	0x05f5e100

0800f864 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08a      	sub	sp, #40	; 0x28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f874:	2307      	movs	r3, #7
 800f876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f87c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f87e:	2300      	movs	r3, #0
 800f880:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f886:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f888:	f107 0310 	add.w	r3, r7, #16
 800f88c:	4619      	mov	r1, r3
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f7ff fe8c 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f894:	f241 3288 	movw	r2, #5000	; 0x1388
 800f898:	2107      	movs	r1, #7
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f000 f994 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f8a0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3728      	adds	r7, #40	; 0x28
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8ca:	f107 0308 	add.w	r3, r7, #8
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7ff fe6b 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fbb8 	bl	801004c <SDMMC_GetCmdError>
 800f8dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8de:	69fb      	ldr	r3, [r7, #28]
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3720      	adds	r7, #32
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b088      	sub	sp, #32
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f8f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f8f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f8f6:	2308      	movs	r3, #8
 800f8f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f900:	2300      	movs	r3, #0
 800f902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f90a:	f107 0308 	add.w	r3, r7, #8
 800f90e:	4619      	mov	r1, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7ff fe4b 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 fb4a 	bl	800ffb0 <SDMMC_GetCmdResp7>
 800f91c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f91e:	69fb      	ldr	r3, [r7, #28]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3720      	adds	r7, #32
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b088      	sub	sp, #32
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f936:	2337      	movs	r3, #55	; 0x37
 800f938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f93a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f93e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f940:	2300      	movs	r3, #0
 800f942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f948:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f94a:	f107 0308 	add.w	r3, r7, #8
 800f94e:	4619      	mov	r1, r3
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff fe2b 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f956:	f241 3288 	movw	r2, #5000	; 0x1388
 800f95a:	2137      	movs	r1, #55	; 0x37
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 f933 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f964:	69fb      	ldr	r3, [r7, #28]
}
 800f966:	4618      	mov	r0, r3
 800f968:	3720      	adds	r7, #32
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f96e:	b580      	push	{r7, lr}
 800f970:	b088      	sub	sp, #32
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f97c:	2329      	movs	r3, #41	; 0x29
 800f97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f980:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f986:	2300      	movs	r3, #0
 800f988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f98a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f98e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f990:	f107 0308 	add.w	r3, r7, #8
 800f994:	4619      	mov	r1, r3
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7ff fe08 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 fa4f 	bl	800fe40 <SDMMC_GetCmdResp3>
 800f9a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9a4:	69fb      	ldr	r3, [r7, #28]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3720      	adds	r7, #32
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b088      	sub	sp, #32
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f9bc:	2306      	movs	r3, #6
 800f9be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9d0:	f107 0308 	add.w	r3, r7, #8
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7ff fde8 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9e0:	2106      	movs	r1, #6
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f8f0 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800f9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9ea:	69fb      	ldr	r3, [r7, #28]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3720      	adds	r7, #32
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fa00:	2333      	movs	r3, #51	; 0x33
 800fa02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa14:	f107 0308 	add.w	r3, r7, #8
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff fdc6 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fa20:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa24:	2133      	movs	r1, #51	; 0x33
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 f8ce 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800fa2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa2e:	69fb      	ldr	r3, [r7, #28]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3720      	adds	r7, #32
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b088      	sub	sp, #32
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fa40:	2300      	movs	r3, #0
 800fa42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fa44:	2302      	movs	r3, #2
 800fa46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fa48:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa58:	f107 0308 	add.w	r3, r7, #8
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7ff fda4 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f9a1 	bl	800fdac <SDMMC_GetCmdResp2>
 800fa6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa6c:	69fb      	ldr	r3, [r7, #28]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3720      	adds	r7, #32
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b088      	sub	sp, #32
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fa84:	2309      	movs	r3, #9
 800fa86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fa88:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fa8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa98:	f107 0308 	add.w	r3, r7, #8
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f7ff fd84 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 f981 	bl	800fdac <SDMMC_GetCmdResp2>
 800faaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faac:	69fb      	ldr	r3, [r7, #28]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3720      	adds	r7, #32
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b088      	sub	sp, #32
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
 800fabe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fac0:	2300      	movs	r3, #0
 800fac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fac4:	2303      	movs	r3, #3
 800fac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800facc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800face:	2300      	movs	r3, #0
 800fad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fad6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fad8:	f107 0308 	add.w	r3, r7, #8
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fd64 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fae4:	683a      	ldr	r2, [r7, #0]
 800fae6:	2103      	movs	r1, #3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f9e9 	bl	800fec0 <SDMMC_GetCmdResp6>
 800faee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faf0:	69fb      	ldr	r3, [r7, #28]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3720      	adds	r7, #32
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b088      	sub	sp, #32
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fb08:	230d      	movs	r3, #13
 800fb0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb12:	2300      	movs	r3, #0
 800fb14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb1c:	f107 0308 	add.w	r3, r7, #8
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff fd42 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fb28:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb2c:	210d      	movs	r1, #13
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f84a 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800fb34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb36:	69fb      	ldr	r3, [r7, #28]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3720      	adds	r7, #32
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b088      	sub	sp, #32
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800fb4c:	230d      	movs	r3, #13
 800fb4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb56:	2300      	movs	r3, #0
 800fb58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb60:	f107 0308 	add.w	r3, r7, #8
 800fb64:	4619      	mov	r1, r3
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7ff fd20 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800fb6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb70:	210d      	movs	r1, #13
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f828 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800fb78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb7a:	69fb      	ldr	r3, [r7, #28]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3720      	adds	r7, #32
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b088      	sub	sp, #32
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800fb90:	230b      	movs	r3, #11
 800fb92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fba4:	f107 0308 	add.w	r3, r7, #8
 800fba8:	4619      	mov	r1, r3
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f7ff fcfe 	bl	800f5ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800fbb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbb4:	210b      	movs	r1, #11
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f806 	bl	800fbc8 <SDMMC_GetCmdResp1>
 800fbbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbbe:	69fb      	ldr	r3, [r7, #28]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3720      	adds	r7, #32
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fbd6:	4b70      	ldr	r3, [pc, #448]	; (800fd98 <SDMMC_GetCmdResp1+0x1d0>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4a70      	ldr	r2, [pc, #448]	; (800fd9c <SDMMC_GetCmdResp1+0x1d4>)
 800fbdc:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe0:	0a5a      	lsrs	r2, r3, #9
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	fb02 f303 	mul.w	r3, r2, r3
 800fbe8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	1e5a      	subs	r2, r3, #1
 800fbee:	61fa      	str	r2, [r7, #28]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d102      	bne.n	800fbfa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fbf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fbf8:	e0c9      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbfe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800fc00:	69ba      	ldr	r2, [r7, #24]
 800fc02:	4b67      	ldr	r3, [pc, #412]	; (800fda0 <SDMMC_GetCmdResp1+0x1d8>)
 800fc04:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d0ef      	beq.n	800fbea <SDMMC_GetCmdResp1+0x22>
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d1ea      	bne.n	800fbea <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc18:	f003 0304 	and.w	r3, r3, #4
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2204      	movs	r2, #4
 800fc24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc26:	2304      	movs	r3, #4
 800fc28:	e0b1      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc2e:	f003 0301 	and.w	r3, r3, #1
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d004      	beq.n	800fc40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e0a6      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	4a58      	ldr	r2, [pc, #352]	; (800fda4 <SDMMC_GetCmdResp1+0x1dc>)
 800fc44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f7ff fcda 	bl	800f600 <SDMMC_GetCommandResponse>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	461a      	mov	r2, r3
 800fc50:	7afb      	ldrb	r3, [r7, #11]
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d001      	beq.n	800fc5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc56:	2301      	movs	r3, #1
 800fc58:	e099      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7ff fcdc 	bl	800f61a <SDMMC_GetResponse>
 800fc62:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fc64:	697a      	ldr	r2, [r7, #20]
 800fc66:	4b50      	ldr	r3, [pc, #320]	; (800fda8 <SDMMC_GetCmdResp1+0x1e0>)
 800fc68:	4013      	ands	r3, r2
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d101      	bne.n	800fc72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	e08d      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	da02      	bge.n	800fc7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fc78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fc7c:	e087      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fc88:	2340      	movs	r3, #64	; 0x40
 800fc8a:	e080      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d001      	beq.n	800fc9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fc96:	2380      	movs	r3, #128	; 0x80
 800fc98:	e079      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d002      	beq.n	800fcaa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fca8:	e071      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d002      	beq.n	800fcba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fcb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcb8:	e069      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d002      	beq.n	800fcca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fcc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcc8:	e061      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d002      	beq.n	800fcda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fcd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fcd8:	e059      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fce8:	e051      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fcf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fcf8:	e049      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d002      	beq.n	800fd0a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fd04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd08:	e041      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d002      	beq.n	800fd1a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fd14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd18:	e039      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d002      	beq.n	800fd2a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fd24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fd28:	e031      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fd34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fd38:	e029      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d002      	beq.n	800fd4a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fd44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd48:	e021      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d002      	beq.n	800fd5a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fd54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fd58:	e019      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d002      	beq.n	800fd6a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fd64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fd68:	e011      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d002      	beq.n	800fd7a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fd74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fd78:	e009      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	f003 0308 	and.w	r3, r3, #8
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d002      	beq.n	800fd8a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fd84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fd88:	e001      	b.n	800fd8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fd8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3720      	adds	r7, #32
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	20000004 	.word	0x20000004
 800fd9c:	10624dd3 	.word	0x10624dd3
 800fda0:	00200045 	.word	0x00200045
 800fda4:	002000c5 	.word	0x002000c5
 800fda8:	fdffe008 	.word	0xfdffe008

0800fdac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fdb4:	4b1f      	ldr	r3, [pc, #124]	; (800fe34 <SDMMC_GetCmdResp2+0x88>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a1f      	ldr	r2, [pc, #124]	; (800fe38 <SDMMC_GetCmdResp2+0x8c>)
 800fdba:	fba2 2303 	umull	r2, r3, r2, r3
 800fdbe:	0a5b      	lsrs	r3, r3, #9
 800fdc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdc4:	fb02 f303 	mul.w	r3, r2, r3
 800fdc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	1e5a      	subs	r2, r3, #1
 800fdce:	60fa      	str	r2, [r7, #12]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d102      	bne.n	800fdda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fdd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdd8:	e026      	b.n	800fe28 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d0ef      	beq.n	800fdca <SDMMC_GetCmdResp2+0x1e>
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d1ea      	bne.n	800fdca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdf8:	f003 0304 	and.w	r3, r3, #4
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d004      	beq.n	800fe0a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2204      	movs	r2, #4
 800fe04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe06:	2304      	movs	r3, #4
 800fe08:	e00e      	b.n	800fe28 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe0e:	f003 0301 	and.w	r3, r3, #1
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d004      	beq.n	800fe20 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	e003      	b.n	800fe28 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	4a06      	ldr	r2, [pc, #24]	; (800fe3c <SDMMC_GetCmdResp2+0x90>)
 800fe24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3714      	adds	r7, #20
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr
 800fe34:	20000004 	.word	0x20000004
 800fe38:	10624dd3 	.word	0x10624dd3
 800fe3c:	002000c5 	.word	0x002000c5

0800fe40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe48:	4b1a      	ldr	r3, [pc, #104]	; (800feb4 <SDMMC_GetCmdResp3+0x74>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a1a      	ldr	r2, [pc, #104]	; (800feb8 <SDMMC_GetCmdResp3+0x78>)
 800fe4e:	fba2 2303 	umull	r2, r3, r2, r3
 800fe52:	0a5b      	lsrs	r3, r3, #9
 800fe54:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe58:	fb02 f303 	mul.w	r3, r2, r3
 800fe5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	1e5a      	subs	r2, r3, #1
 800fe62:	60fa      	str	r2, [r7, #12]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d102      	bne.n	800fe6e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe6c:	e01b      	b.n	800fea6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d0ef      	beq.n	800fe5e <SDMMC_GetCmdResp3+0x1e>
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d1ea      	bne.n	800fe5e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe8c:	f003 0304 	and.w	r3, r3, #4
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d004      	beq.n	800fe9e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2204      	movs	r2, #4
 800fe98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe9a:	2304      	movs	r3, #4
 800fe9c:	e003      	b.n	800fea6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4a06      	ldr	r2, [pc, #24]	; (800febc <SDMMC_GetCmdResp3+0x7c>)
 800fea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3714      	adds	r7, #20
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	20000004 	.word	0x20000004
 800feb8:	10624dd3 	.word	0x10624dd3
 800febc:	002000c5 	.word	0x002000c5

0800fec0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b088      	sub	sp, #32
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	460b      	mov	r3, r1
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fece:	4b35      	ldr	r3, [pc, #212]	; (800ffa4 <SDMMC_GetCmdResp6+0xe4>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	4a35      	ldr	r2, [pc, #212]	; (800ffa8 <SDMMC_GetCmdResp6+0xe8>)
 800fed4:	fba2 2303 	umull	r2, r3, r2, r3
 800fed8:	0a5b      	lsrs	r3, r3, #9
 800feda:	f241 3288 	movw	r2, #5000	; 0x1388
 800fede:	fb02 f303 	mul.w	r3, r2, r3
 800fee2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	1e5a      	subs	r2, r3, #1
 800fee8:	61fa      	str	r2, [r7, #28]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d102      	bne.n	800fef4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800feee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fef2:	e052      	b.n	800ff9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fef8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d0ef      	beq.n	800fee4 <SDMMC_GetCmdResp6+0x24>
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1ea      	bne.n	800fee4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff12:	f003 0304 	and.w	r3, r3, #4
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d004      	beq.n	800ff24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2204      	movs	r2, #4
 800ff1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff20:	2304      	movs	r3, #4
 800ff22:	e03a      	b.n	800ff9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d004      	beq.n	800ff3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2201      	movs	r2, #1
 800ff34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff36:	2301      	movs	r3, #1
 800ff38:	e02f      	b.n	800ff9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f7ff fb60 	bl	800f600 <SDMMC_GetCommandResponse>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
 800ff44:	7afb      	ldrb	r3, [r7, #11]
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d001      	beq.n	800ff4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e025      	b.n	800ff9a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	4a16      	ldr	r2, [pc, #88]	; (800ffac <SDMMC_GetCmdResp6+0xec>)
 800ff52:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ff54:	2100      	movs	r1, #0
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7ff fb5f 	bl	800f61a <SDMMC_GetResponse>
 800ff5c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d106      	bne.n	800ff76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	0c1b      	lsrs	r3, r3, #16
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ff72:	2300      	movs	r3, #0
 800ff74:	e011      	b.n	800ff9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d002      	beq.n	800ff86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ff80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff84:	e009      	b.n	800ff9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d002      	beq.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ff90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff94:	e001      	b.n	800ff9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ff96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3720      	adds	r7, #32
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20000004 	.word	0x20000004
 800ffa8:	10624dd3 	.word	0x10624dd3
 800ffac:	002000c5 	.word	0x002000c5

0800ffb0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffb8:	4b22      	ldr	r3, [pc, #136]	; (8010044 <SDMMC_GetCmdResp7+0x94>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a22      	ldr	r2, [pc, #136]	; (8010048 <SDMMC_GetCmdResp7+0x98>)
 800ffbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ffc2:	0a5b      	lsrs	r3, r3, #9
 800ffc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffc8:	fb02 f303 	mul.w	r3, r2, r3
 800ffcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	1e5a      	subs	r2, r3, #1
 800ffd2:	60fa      	str	r2, [r7, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffdc:	e02c      	b.n	8010038 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffe2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d0ef      	beq.n	800ffce <SDMMC_GetCmdResp7+0x1e>
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1ea      	bne.n	800ffce <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fffc:	f003 0304 	and.w	r3, r3, #4
 8010000:	2b00      	cmp	r3, #0
 8010002:	d004      	beq.n	801000e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2204      	movs	r2, #4
 8010008:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801000a:	2304      	movs	r3, #4
 801000c:	e014      	b.n	8010038 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010012:	f003 0301 	and.w	r3, r3, #1
 8010016:	2b00      	cmp	r3, #0
 8010018:	d004      	beq.n	8010024 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2201      	movs	r2, #1
 801001e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010020:	2301      	movs	r3, #1
 8010022:	e009      	b.n	8010038 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801002c:	2b00      	cmp	r3, #0
 801002e:	d002      	beq.n	8010036 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2240      	movs	r2, #64	; 0x40
 8010034:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010036:	2300      	movs	r3, #0

}
 8010038:	4618      	mov	r0, r3
 801003a:	3714      	adds	r7, #20
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	20000004 	.word	0x20000004
 8010048:	10624dd3 	.word	0x10624dd3

0801004c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801004c:	b480      	push	{r7}
 801004e:	b085      	sub	sp, #20
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010054:	4b11      	ldr	r3, [pc, #68]	; (801009c <SDMMC_GetCmdError+0x50>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a11      	ldr	r2, [pc, #68]	; (80100a0 <SDMMC_GetCmdError+0x54>)
 801005a:	fba2 2303 	umull	r2, r3, r2, r3
 801005e:	0a5b      	lsrs	r3, r3, #9
 8010060:	f241 3288 	movw	r2, #5000	; 0x1388
 8010064:	fb02 f303 	mul.w	r3, r2, r3
 8010068:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	1e5a      	subs	r2, r3, #1
 801006e:	60fa      	str	r2, [r7, #12]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010078:	e009      	b.n	801008e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801007e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010082:	2b00      	cmp	r3, #0
 8010084:	d0f1      	beq.n	801006a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4a06      	ldr	r2, [pc, #24]	; (80100a4 <SDMMC_GetCmdError+0x58>)
 801008a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801008c:	2300      	movs	r3, #0
}
 801008e:	4618      	mov	r0, r3
 8010090:	3714      	adds	r7, #20
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	20000004 	.word	0x20000004
 80100a0:	10624dd3 	.word	0x10624dd3
 80100a4:	002000c5 	.word	0x002000c5

080100a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80100a8:	b084      	sub	sp, #16
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b084      	sub	sp, #16
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	f107 001c 	add.w	r0, r7, #28
 80100b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f001 faf6 	bl	80116b8 <USB_CoreReset>
 80100cc:	4603      	mov	r3, r0
 80100ce:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80100d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d106      	bne.n	80100e4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	639a      	str	r2, [r3, #56]	; 0x38
 80100e2:	e005      	b.n	80100f0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80100fc:	b004      	add	sp, #16
 80100fe:	4770      	bx	lr

08010100 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010100:	b480      	push	{r7}
 8010102:	b087      	sub	sp, #28
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	4613      	mov	r3, r2
 801010c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	2b02      	cmp	r3, #2
 8010112:	d165      	bne.n	80101e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	4a3e      	ldr	r2, [pc, #248]	; (8010210 <USB_SetTurnaroundTime+0x110>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d906      	bls.n	801012a <USB_SetTurnaroundTime+0x2a>
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	4a3d      	ldr	r2, [pc, #244]	; (8010214 <USB_SetTurnaroundTime+0x114>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d202      	bcs.n	801012a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010124:	230f      	movs	r3, #15
 8010126:	617b      	str	r3, [r7, #20]
 8010128:	e05c      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	4a39      	ldr	r2, [pc, #228]	; (8010214 <USB_SetTurnaroundTime+0x114>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d306      	bcc.n	8010140 <USB_SetTurnaroundTime+0x40>
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	4a38      	ldr	r2, [pc, #224]	; (8010218 <USB_SetTurnaroundTime+0x118>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d202      	bcs.n	8010140 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801013a:	230e      	movs	r3, #14
 801013c:	617b      	str	r3, [r7, #20]
 801013e:	e051      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	4a35      	ldr	r2, [pc, #212]	; (8010218 <USB_SetTurnaroundTime+0x118>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d306      	bcc.n	8010156 <USB_SetTurnaroundTime+0x56>
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	4a34      	ldr	r2, [pc, #208]	; (801021c <USB_SetTurnaroundTime+0x11c>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d202      	bcs.n	8010156 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010150:	230d      	movs	r3, #13
 8010152:	617b      	str	r3, [r7, #20]
 8010154:	e046      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	4a30      	ldr	r2, [pc, #192]	; (801021c <USB_SetTurnaroundTime+0x11c>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d306      	bcc.n	801016c <USB_SetTurnaroundTime+0x6c>
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	4a2f      	ldr	r2, [pc, #188]	; (8010220 <USB_SetTurnaroundTime+0x120>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d802      	bhi.n	801016c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010166:	230c      	movs	r3, #12
 8010168:	617b      	str	r3, [r7, #20]
 801016a:	e03b      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	4a2c      	ldr	r2, [pc, #176]	; (8010220 <USB_SetTurnaroundTime+0x120>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d906      	bls.n	8010182 <USB_SetTurnaroundTime+0x82>
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	4a2b      	ldr	r2, [pc, #172]	; (8010224 <USB_SetTurnaroundTime+0x124>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d802      	bhi.n	8010182 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801017c:	230b      	movs	r3, #11
 801017e:	617b      	str	r3, [r7, #20]
 8010180:	e030      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	4a27      	ldr	r2, [pc, #156]	; (8010224 <USB_SetTurnaroundTime+0x124>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d906      	bls.n	8010198 <USB_SetTurnaroundTime+0x98>
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	4a26      	ldr	r2, [pc, #152]	; (8010228 <USB_SetTurnaroundTime+0x128>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d802      	bhi.n	8010198 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010192:	230a      	movs	r3, #10
 8010194:	617b      	str	r3, [r7, #20]
 8010196:	e025      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	4a23      	ldr	r2, [pc, #140]	; (8010228 <USB_SetTurnaroundTime+0x128>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d906      	bls.n	80101ae <USB_SetTurnaroundTime+0xae>
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	4a22      	ldr	r2, [pc, #136]	; (801022c <USB_SetTurnaroundTime+0x12c>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d202      	bcs.n	80101ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80101a8:	2309      	movs	r3, #9
 80101aa:	617b      	str	r3, [r7, #20]
 80101ac:	e01a      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	4a1e      	ldr	r2, [pc, #120]	; (801022c <USB_SetTurnaroundTime+0x12c>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d306      	bcc.n	80101c4 <USB_SetTurnaroundTime+0xc4>
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	4a1d      	ldr	r2, [pc, #116]	; (8010230 <USB_SetTurnaroundTime+0x130>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d802      	bhi.n	80101c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80101be:	2308      	movs	r3, #8
 80101c0:	617b      	str	r3, [r7, #20]
 80101c2:	e00f      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	4a1a      	ldr	r2, [pc, #104]	; (8010230 <USB_SetTurnaroundTime+0x130>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d906      	bls.n	80101da <USB_SetTurnaroundTime+0xda>
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	4a19      	ldr	r2, [pc, #100]	; (8010234 <USB_SetTurnaroundTime+0x134>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d202      	bcs.n	80101da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80101d4:	2307      	movs	r3, #7
 80101d6:	617b      	str	r3, [r7, #20]
 80101d8:	e004      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80101da:	2306      	movs	r3, #6
 80101dc:	617b      	str	r3, [r7, #20]
 80101de:	e001      	b.n	80101e4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80101e0:	2309      	movs	r3, #9
 80101e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	68da      	ldr	r2, [r3, #12]
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	029b      	lsls	r3, r3, #10
 80101f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80101fc:	431a      	orrs	r2, r3
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	371c      	adds	r7, #28
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	00d8acbf 	.word	0x00d8acbf
 8010214:	00e4e1c0 	.word	0x00e4e1c0
 8010218:	00f42400 	.word	0x00f42400
 801021c:	01067380 	.word	0x01067380
 8010220:	011a499f 	.word	0x011a499f
 8010224:	01312cff 	.word	0x01312cff
 8010228:	014ca43f 	.word	0x014ca43f
 801022c:	016e3600 	.word	0x016e3600
 8010230:	01a6ab1f 	.word	0x01a6ab1f
 8010234:	01e84800 	.word	0x01e84800

08010238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	689b      	ldr	r3, [r3, #8]
 8010244:	f043 0201 	orr.w	r2, r3, #1
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801025a:	b480      	push	{r7}
 801025c:	b083      	sub	sp, #12
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	f023 0201 	bic.w	r2, r3, #1
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	460b      	mov	r3, r1
 8010286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010288:	2300      	movs	r3, #0
 801028a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010298:	78fb      	ldrb	r3, [r7, #3]
 801029a:	2b01      	cmp	r3, #1
 801029c:	d115      	bne.n	80102ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80102aa:	2001      	movs	r0, #1
 80102ac:	f7f5 fdd6 	bl	8005e5c <HAL_Delay>
      ms++;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	3301      	adds	r3, #1
 80102b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f001 f985 	bl	80115c6 <USB_GetMode>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d01e      	beq.n	8010300 <USB_SetCurrentMode+0x84>
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2b31      	cmp	r3, #49	; 0x31
 80102c6:	d9f0      	bls.n	80102aa <USB_SetCurrentMode+0x2e>
 80102c8:	e01a      	b.n	8010300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80102ca:	78fb      	ldrb	r3, [r7, #3]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d115      	bne.n	80102fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80102dc:	2001      	movs	r0, #1
 80102de:	f7f5 fdbd 	bl	8005e5c <HAL_Delay>
      ms++;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	3301      	adds	r3, #1
 80102e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f001 f96c 	bl	80115c6 <USB_GetMode>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d005      	beq.n	8010300 <USB_SetCurrentMode+0x84>
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b31      	cmp	r3, #49	; 0x31
 80102f8:	d9f0      	bls.n	80102dc <USB_SetCurrentMode+0x60>
 80102fa:	e001      	b.n	8010300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80102fc:	2301      	movs	r3, #1
 80102fe:	e005      	b.n	801030c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b32      	cmp	r3, #50	; 0x32
 8010304:	d101      	bne.n	801030a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010306:	2301      	movs	r3, #1
 8010308:	e000      	b.n	801030c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010314:	b084      	sub	sp, #16
 8010316:	b580      	push	{r7, lr}
 8010318:	b086      	sub	sp, #24
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
 801031e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010326:	2300      	movs	r3, #0
 8010328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801032e:	2300      	movs	r3, #0
 8010330:	613b      	str	r3, [r7, #16]
 8010332:	e009      	b.n	8010348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	3340      	adds	r3, #64	; 0x40
 801033a:	009b      	lsls	r3, r3, #2
 801033c:	4413      	add	r3, r2
 801033e:	2200      	movs	r2, #0
 8010340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	3301      	adds	r3, #1
 8010346:	613b      	str	r3, [r7, #16]
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	2b0e      	cmp	r3, #14
 801034c:	d9f2      	bls.n	8010334 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801034e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010350:	2b00      	cmp	r3, #0
 8010352:	d11c      	bne.n	801038e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	68fa      	ldr	r2, [r7, #12]
 801035e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010362:	f043 0302 	orr.w	r3, r3, #2
 8010366:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	601a      	str	r2, [r3, #0]
 801038c:	e005      	b.n	801039a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010392:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103a0:	461a      	mov	r2, r3
 80103a2:	2300      	movs	r3, #0
 80103a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ac:	4619      	mov	r1, r3
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103b4:	461a      	mov	r2, r3
 80103b6:	680b      	ldr	r3, [r1, #0]
 80103b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80103ba:	2103      	movs	r1, #3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 f959 	bl	8010674 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80103c2:	2110      	movs	r1, #16
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f000 f8f1 	bl	80105ac <USB_FlushTxFifo>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80103d0:	2301      	movs	r3, #1
 80103d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f000 f91d 	bl	8010614 <USB_FlushRxFifo>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d001      	beq.n	80103e4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80103e0:	2301      	movs	r3, #1
 80103e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ea:	461a      	mov	r2, r3
 80103ec:	2300      	movs	r3, #0
 80103ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103f6:	461a      	mov	r2, r3
 80103f8:	2300      	movs	r3, #0
 80103fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010402:	461a      	mov	r2, r3
 8010404:	2300      	movs	r3, #0
 8010406:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010408:	2300      	movs	r3, #0
 801040a:	613b      	str	r3, [r7, #16]
 801040c:	e043      	b.n	8010496 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	015a      	lsls	r2, r3, #5
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	4413      	add	r3, r2
 8010416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010424:	d118      	bne.n	8010458 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d10a      	bne.n	8010442 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	015a      	lsls	r2, r3, #5
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4413      	add	r3, r2
 8010434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010438:	461a      	mov	r2, r3
 801043a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801043e:	6013      	str	r3, [r2, #0]
 8010440:	e013      	b.n	801046a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	015a      	lsls	r2, r3, #5
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	4413      	add	r3, r2
 801044a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801044e:	461a      	mov	r2, r3
 8010450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010454:	6013      	str	r3, [r2, #0]
 8010456:	e008      	b.n	801046a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	015a      	lsls	r2, r3, #5
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	4413      	add	r3, r2
 8010460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010464:	461a      	mov	r2, r3
 8010466:	2300      	movs	r3, #0
 8010468:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	015a      	lsls	r2, r3, #5
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	4413      	add	r3, r2
 8010472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010476:	461a      	mov	r2, r3
 8010478:	2300      	movs	r3, #0
 801047a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	015a      	lsls	r2, r3, #5
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	4413      	add	r3, r2
 8010484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010488:	461a      	mov	r2, r3
 801048a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801048e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	3301      	adds	r3, #1
 8010494:	613b      	str	r3, [r7, #16]
 8010496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010498:	693a      	ldr	r2, [r7, #16]
 801049a:	429a      	cmp	r2, r3
 801049c:	d3b7      	bcc.n	801040e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801049e:	2300      	movs	r3, #0
 80104a0:	613b      	str	r3, [r7, #16]
 80104a2:	e043      	b.n	801052c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	015a      	lsls	r2, r3, #5
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	4413      	add	r3, r2
 80104ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104ba:	d118      	bne.n	80104ee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10a      	bne.n	80104d8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	015a      	lsls	r2, r3, #5
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	4413      	add	r3, r2
 80104ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ce:	461a      	mov	r2, r3
 80104d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80104d4:	6013      	str	r3, [r2, #0]
 80104d6:	e013      	b.n	8010500 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	015a      	lsls	r2, r3, #5
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	4413      	add	r3, r2
 80104e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e4:	461a      	mov	r2, r3
 80104e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	e008      	b.n	8010500 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	015a      	lsls	r2, r3, #5
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	4413      	add	r3, r2
 80104f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104fa:	461a      	mov	r2, r3
 80104fc:	2300      	movs	r3, #0
 80104fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	015a      	lsls	r2, r3, #5
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	4413      	add	r3, r2
 8010508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801050c:	461a      	mov	r2, r3
 801050e:	2300      	movs	r3, #0
 8010510:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	015a      	lsls	r2, r3, #5
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	4413      	add	r3, r2
 801051a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051e:	461a      	mov	r2, r3
 8010520:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010524:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	3301      	adds	r3, #1
 801052a:	613b      	str	r3, [r7, #16]
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	693a      	ldr	r2, [r7, #16]
 8010530:	429a      	cmp	r2, r3
 8010532:	d3b7      	bcc.n	80104a4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801053a:	691b      	ldr	r3, [r3, #16]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010546:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010554:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	699b      	ldr	r3, [r3, #24]
 801055a:	f043 0210 	orr.w	r2, r3, #16
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	699a      	ldr	r2, [r3, #24]
 8010566:	4b10      	ldr	r3, [pc, #64]	; (80105a8 <USB_DevInit+0x294>)
 8010568:	4313      	orrs	r3, r2
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801056e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010570:	2b00      	cmp	r3, #0
 8010572:	d005      	beq.n	8010580 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	699b      	ldr	r3, [r3, #24]
 8010578:	f043 0208 	orr.w	r2, r3, #8
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010582:	2b01      	cmp	r3, #1
 8010584:	d107      	bne.n	8010596 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801058e:	f043 0304 	orr.w	r3, r3, #4
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010596:	7dfb      	ldrb	r3, [r7, #23]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3718      	adds	r7, #24
 801059c:	46bd      	mov	sp, r7
 801059e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80105a2:	b004      	add	sp, #16
 80105a4:	4770      	bx	lr
 80105a6:	bf00      	nop
 80105a8:	803c3800 	.word	0x803c3800

080105ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80105b6:	2300      	movs	r3, #0
 80105b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	3301      	adds	r3, #1
 80105be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	4a13      	ldr	r2, [pc, #76]	; (8010610 <USB_FlushTxFifo+0x64>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d901      	bls.n	80105cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80105c8:	2303      	movs	r3, #3
 80105ca:	e01b      	b.n	8010604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	691b      	ldr	r3, [r3, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	daf2      	bge.n	80105ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80105d4:	2300      	movs	r3, #0
 80105d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	019b      	lsls	r3, r3, #6
 80105dc:	f043 0220 	orr.w	r2, r3, #32
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	3301      	adds	r3, #1
 80105e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	4a08      	ldr	r2, [pc, #32]	; (8010610 <USB_FlushTxFifo+0x64>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d901      	bls.n	80105f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80105f2:	2303      	movs	r3, #3
 80105f4:	e006      	b.n	8010604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	f003 0320 	and.w	r3, r3, #32
 80105fe:	2b20      	cmp	r3, #32
 8010600:	d0f0      	beq.n	80105e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010602:	2300      	movs	r3, #0
}
 8010604:	4618      	mov	r0, r3
 8010606:	3714      	adds	r7, #20
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr
 8010610:	00030d40 	.word	0x00030d40

08010614 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801061c:	2300      	movs	r3, #0
 801061e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	3301      	adds	r3, #1
 8010624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	4a11      	ldr	r2, [pc, #68]	; (8010670 <USB_FlushRxFifo+0x5c>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d901      	bls.n	8010632 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801062e:	2303      	movs	r3, #3
 8010630:	e018      	b.n	8010664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	2b00      	cmp	r3, #0
 8010638:	daf2      	bge.n	8010620 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801063a:	2300      	movs	r3, #0
 801063c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2210      	movs	r2, #16
 8010642:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	3301      	adds	r3, #1
 8010648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	4a08      	ldr	r2, [pc, #32]	; (8010670 <USB_FlushRxFifo+0x5c>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d901      	bls.n	8010656 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010652:	2303      	movs	r3, #3
 8010654:	e006      	b.n	8010664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	691b      	ldr	r3, [r3, #16]
 801065a:	f003 0310 	and.w	r3, r3, #16
 801065e:	2b10      	cmp	r3, #16
 8010660:	d0f0      	beq.n	8010644 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010662:	2300      	movs	r3, #0
}
 8010664:	4618      	mov	r0, r3
 8010666:	3714      	adds	r7, #20
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr
 8010670:	00030d40 	.word	0x00030d40

08010674 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010674:	b480      	push	{r7}
 8010676:	b085      	sub	sp, #20
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	460b      	mov	r3, r1
 801067e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	78fb      	ldrb	r3, [r7, #3]
 801068e:	68f9      	ldr	r1, [r7, #12]
 8010690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010694:	4313      	orrs	r3, r2
 8010696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr

080106a6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80106a6:	b480      	push	{r7}
 80106a8:	b087      	sub	sp, #28
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	f003 0306 	and.w	r3, r3, #6
 80106be:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d002      	beq.n	80106cc <USB_GetDevSpeed+0x26>
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2b06      	cmp	r3, #6
 80106ca:	d102      	bne.n	80106d2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80106cc:	2302      	movs	r3, #2
 80106ce:	75fb      	strb	r3, [r7, #23]
 80106d0:	e001      	b.n	80106d6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80106d2:	230f      	movs	r3, #15
 80106d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80106d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	371c      	adds	r7, #28
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	785b      	ldrb	r3, [r3, #1]
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d13a      	bne.n	8010776 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010706:	69da      	ldr	r2, [r3, #28]
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	f003 030f 	and.w	r3, r3, #15
 8010710:	2101      	movs	r1, #1
 8010712:	fa01 f303 	lsl.w	r3, r1, r3
 8010716:	b29b      	uxth	r3, r3
 8010718:	68f9      	ldr	r1, [r7, #12]
 801071a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801071e:	4313      	orrs	r3, r2
 8010720:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	015a      	lsls	r2, r3, #5
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	4413      	add	r3, r2
 801072a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d155      	bne.n	80107e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	015a      	lsls	r2, r3, #5
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	4413      	add	r3, r2
 8010740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	791b      	ldrb	r3, [r3, #4]
 8010752:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010754:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	059b      	lsls	r3, r3, #22
 801075a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801075c:	4313      	orrs	r3, r2
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	0151      	lsls	r1, r2, #5
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	440a      	add	r2, r1
 8010766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801076e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010772:	6013      	str	r3, [r2, #0]
 8010774:	e036      	b.n	80107e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801077c:	69da      	ldr	r2, [r3, #28]
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	f003 030f 	and.w	r3, r3, #15
 8010786:	2101      	movs	r1, #1
 8010788:	fa01 f303 	lsl.w	r3, r1, r3
 801078c:	041b      	lsls	r3, r3, #16
 801078e:	68f9      	ldr	r1, [r7, #12]
 8010790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010794:	4313      	orrs	r3, r2
 8010796:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	015a      	lsls	r2, r3, #5
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	4413      	add	r3, r2
 80107a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d11a      	bne.n	80107e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	015a      	lsls	r2, r3, #5
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	4413      	add	r3, r2
 80107b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	791b      	ldrb	r3, [r3, #4]
 80107c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80107ca:	430b      	orrs	r3, r1
 80107cc:	4313      	orrs	r3, r2
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	0151      	lsls	r1, r2, #5
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	440a      	add	r2, r1
 80107d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3714      	adds	r7, #20
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
	...

080107f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	785b      	ldrb	r3, [r3, #1]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d161      	bne.n	80108d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010826:	d11f      	bne.n	8010868 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	015a      	lsls	r2, r3, #5
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	4413      	add	r3, r2
 8010830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	68ba      	ldr	r2, [r7, #8]
 8010838:	0151      	lsls	r1, r2, #5
 801083a:	68fa      	ldr	r2, [r7, #12]
 801083c:	440a      	add	r2, r1
 801083e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010846:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	015a      	lsls	r2, r3, #5
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	4413      	add	r3, r2
 8010850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	68ba      	ldr	r2, [r7, #8]
 8010858:	0151      	lsls	r1, r2, #5
 801085a:	68fa      	ldr	r2, [r7, #12]
 801085c:	440a      	add	r2, r1
 801085e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801086e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	f003 030f 	and.w	r3, r3, #15
 8010878:	2101      	movs	r1, #1
 801087a:	fa01 f303 	lsl.w	r3, r1, r3
 801087e:	b29b      	uxth	r3, r3
 8010880:	43db      	mvns	r3, r3
 8010882:	68f9      	ldr	r1, [r7, #12]
 8010884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010888:	4013      	ands	r3, r2
 801088a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010892:	69da      	ldr	r2, [r3, #28]
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	f003 030f 	and.w	r3, r3, #15
 801089c:	2101      	movs	r1, #1
 801089e:	fa01 f303 	lsl.w	r3, r1, r3
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	43db      	mvns	r3, r3
 80108a6:	68f9      	ldr	r1, [r7, #12]
 80108a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80108ac:	4013      	ands	r3, r2
 80108ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	015a      	lsls	r2, r3, #5
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	4413      	add	r3, r2
 80108b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	0159      	lsls	r1, r3, #5
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	440b      	add	r3, r1
 80108c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ca:	4619      	mov	r1, r3
 80108cc:	4b35      	ldr	r3, [pc, #212]	; (80109a4 <USB_DeactivateEndpoint+0x1b0>)
 80108ce:	4013      	ands	r3, r2
 80108d0:	600b      	str	r3, [r1, #0]
 80108d2:	e060      	b.n	8010996 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	015a      	lsls	r2, r3, #5
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	4413      	add	r3, r2
 80108dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80108e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108ea:	d11f      	bne.n	801092c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	015a      	lsls	r2, r3, #5
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	4413      	add	r3, r2
 80108f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	68ba      	ldr	r2, [r7, #8]
 80108fc:	0151      	lsls	r1, r2, #5
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	440a      	add	r2, r1
 8010902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801090a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	015a      	lsls	r2, r3, #5
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	4413      	add	r3, r2
 8010914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	0151      	lsls	r1, r2, #5
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	440a      	add	r2, r1
 8010922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801092a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	f003 030f 	and.w	r3, r3, #15
 801093c:	2101      	movs	r1, #1
 801093e:	fa01 f303 	lsl.w	r3, r1, r3
 8010942:	041b      	lsls	r3, r3, #16
 8010944:	43db      	mvns	r3, r3
 8010946:	68f9      	ldr	r1, [r7, #12]
 8010948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801094c:	4013      	ands	r3, r2
 801094e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010956:	69da      	ldr	r2, [r3, #28]
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	f003 030f 	and.w	r3, r3, #15
 8010960:	2101      	movs	r1, #1
 8010962:	fa01 f303 	lsl.w	r3, r1, r3
 8010966:	041b      	lsls	r3, r3, #16
 8010968:	43db      	mvns	r3, r3
 801096a:	68f9      	ldr	r1, [r7, #12]
 801096c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010970:	4013      	ands	r3, r2
 8010972:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	015a      	lsls	r2, r3, #5
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	4413      	add	r3, r2
 801097c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	0159      	lsls	r1, r3, #5
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	440b      	add	r3, r1
 801098a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801098e:	4619      	mov	r1, r3
 8010990:	4b05      	ldr	r3, [pc, #20]	; (80109a8 <USB_DeactivateEndpoint+0x1b4>)
 8010992:	4013      	ands	r3, r2
 8010994:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr
 80109a4:	ec337800 	.word	0xec337800
 80109a8:	eff37800 	.word	0xeff37800

080109ac <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b086      	sub	sp, #24
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	785b      	ldrb	r3, [r3, #1]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	f040 810a 	bne.w	8010bde <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	699b      	ldr	r3, [r3, #24]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d132      	bne.n	8010a38 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	015a      	lsls	r2, r3, #5
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	4413      	add	r3, r2
 80109da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109de:	691b      	ldr	r3, [r3, #16]
 80109e0:	693a      	ldr	r2, [r7, #16]
 80109e2:	0151      	lsls	r1, r2, #5
 80109e4:	697a      	ldr	r2, [r7, #20]
 80109e6:	440a      	add	r2, r1
 80109e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80109f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80109f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	015a      	lsls	r2, r3, #5
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	4413      	add	r3, r2
 80109fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	693a      	ldr	r2, [r7, #16]
 8010a06:	0151      	lsls	r1, r2, #5
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	440a      	add	r2, r1
 8010a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	015a      	lsls	r2, r3, #5
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	693a      	ldr	r2, [r7, #16]
 8010a26:	0151      	lsls	r1, r2, #5
 8010a28:	697a      	ldr	r2, [r7, #20]
 8010a2a:	440a      	add	r2, r1
 8010a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a30:	0cdb      	lsrs	r3, r3, #19
 8010a32:	04db      	lsls	r3, r3, #19
 8010a34:	6113      	str	r3, [r2, #16]
 8010a36:	e074      	b.n	8010b22 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	015a      	lsls	r2, r3, #5
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	4413      	add	r3, r2
 8010a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	693a      	ldr	r2, [r7, #16]
 8010a48:	0151      	lsls	r1, r2, #5
 8010a4a:	697a      	ldr	r2, [r7, #20]
 8010a4c:	440a      	add	r2, r1
 8010a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a52:	0cdb      	lsrs	r3, r3, #19
 8010a54:	04db      	lsls	r3, r3, #19
 8010a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	015a      	lsls	r2, r3, #5
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	4413      	add	r3, r2
 8010a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	693a      	ldr	r2, [r7, #16]
 8010a68:	0151      	lsls	r1, r2, #5
 8010a6a:	697a      	ldr	r2, [r7, #20]
 8010a6c:	440a      	add	r2, r1
 8010a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	015a      	lsls	r2, r3, #5
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	4413      	add	r3, r2
 8010a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	6999      	ldr	r1, [r3, #24]
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	440b      	add	r3, r1
 8010a94:	1e59      	subs	r1, r3, #1
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8010a9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010aa0:	4b9e      	ldr	r3, [pc, #632]	; (8010d1c <USB_EPStartXfer+0x370>)
 8010aa2:	400b      	ands	r3, r1
 8010aa4:	6939      	ldr	r1, [r7, #16]
 8010aa6:	0148      	lsls	r0, r1, #5
 8010aa8:	6979      	ldr	r1, [r7, #20]
 8010aaa:	4401      	add	r1, r0
 8010aac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	015a      	lsls	r2, r3, #5
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	4413      	add	r3, r2
 8010abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ac0:	691a      	ldr	r2, [r3, #16]
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	699b      	ldr	r3, [r3, #24]
 8010ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010aca:	6939      	ldr	r1, [r7, #16]
 8010acc:	0148      	lsls	r0, r1, #5
 8010ace:	6979      	ldr	r1, [r7, #20]
 8010ad0:	4401      	add	r1, r0
 8010ad2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	791b      	ldrb	r3, [r3, #4]
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d11f      	bne.n	8010b22 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	015a      	lsls	r2, r3, #5
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	4413      	add	r3, r2
 8010aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010aee:	691b      	ldr	r3, [r3, #16]
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	0151      	lsls	r1, r2, #5
 8010af4:	697a      	ldr	r2, [r7, #20]
 8010af6:	440a      	add	r2, r1
 8010af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010afc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010b00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	015a      	lsls	r2, r3, #5
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	4413      	add	r3, r2
 8010b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b0e:	691b      	ldr	r3, [r3, #16]
 8010b10:	693a      	ldr	r2, [r7, #16]
 8010b12:	0151      	lsls	r1, r2, #5
 8010b14:	697a      	ldr	r2, [r7, #20]
 8010b16:	440a      	add	r2, r1
 8010b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b20:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	015a      	lsls	r2, r3, #5
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	4413      	add	r3, r2
 8010b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	693a      	ldr	r2, [r7, #16]
 8010b32:	0151      	lsls	r1, r2, #5
 8010b34:	697a      	ldr	r2, [r7, #20]
 8010b36:	440a      	add	r2, r1
 8010b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b40:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	791b      	ldrb	r3, [r3, #4]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d015      	beq.n	8010b76 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	699b      	ldr	r3, [r3, #24]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	f000 8106 	beq.w	8010d60 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	f003 030f 	and.w	r3, r3, #15
 8010b64:	2101      	movs	r1, #1
 8010b66:	fa01 f303 	lsl.w	r3, r1, r3
 8010b6a:	6979      	ldr	r1, [r7, #20]
 8010b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b70:	4313      	orrs	r3, r2
 8010b72:	634b      	str	r3, [r1, #52]	; 0x34
 8010b74:	e0f4      	b.n	8010d60 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d110      	bne.n	8010ba8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	015a      	lsls	r2, r3, #5
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	693a      	ldr	r2, [r7, #16]
 8010b96:	0151      	lsls	r1, r2, #5
 8010b98:	697a      	ldr	r2, [r7, #20]
 8010b9a:	440a      	add	r2, r1
 8010b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010ba4:	6013      	str	r3, [r2, #0]
 8010ba6:	e00f      	b.n	8010bc8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	015a      	lsls	r2, r3, #5
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	4413      	add	r3, r2
 8010bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	693a      	ldr	r2, [r7, #16]
 8010bb8:	0151      	lsls	r1, r2, #5
 8010bba:	697a      	ldr	r2, [r7, #20]
 8010bbc:	440a      	add	r2, r1
 8010bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bc6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	6919      	ldr	r1, [r3, #16]
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	781a      	ldrb	r2, [r3, #0]
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	699b      	ldr	r3, [r3, #24]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f000 fa94 	bl	8011104 <USB_WritePacket>
 8010bdc:	e0c0      	b.n	8010d60 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	015a      	lsls	r2, r3, #5
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	4413      	add	r3, r2
 8010be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bea:	691b      	ldr	r3, [r3, #16]
 8010bec:	693a      	ldr	r2, [r7, #16]
 8010bee:	0151      	lsls	r1, r2, #5
 8010bf0:	697a      	ldr	r2, [r7, #20]
 8010bf2:	440a      	add	r2, r1
 8010bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bf8:	0cdb      	lsrs	r3, r3, #19
 8010bfa:	04db      	lsls	r3, r3, #19
 8010bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	015a      	lsls	r2, r3, #5
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	4413      	add	r3, r2
 8010c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	0151      	lsls	r1, r2, #5
 8010c10:	697a      	ldr	r2, [r7, #20]
 8010c12:	440a      	add	r2, r1
 8010c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	699b      	ldr	r3, [r3, #24]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d123      	bne.n	8010c72 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	015a      	lsls	r2, r3, #5
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	4413      	add	r3, r2
 8010c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c36:	691a      	ldr	r2, [r3, #16]
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c40:	6939      	ldr	r1, [r7, #16]
 8010c42:	0148      	lsls	r0, r1, #5
 8010c44:	6979      	ldr	r1, [r7, #20]
 8010c46:	4401      	add	r1, r0
 8010c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	015a      	lsls	r2, r3, #5
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	4413      	add	r3, r2
 8010c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	693a      	ldr	r2, [r7, #16]
 8010c60:	0151      	lsls	r1, r2, #5
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	440a      	add	r2, r1
 8010c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c6e:	6113      	str	r3, [r2, #16]
 8010c70:	e037      	b.n	8010ce2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	699a      	ldr	r2, [r3, #24]
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	1e5a      	subs	r2, r3, #1
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c86:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	89fa      	ldrh	r2, [r7, #14]
 8010c8e:	fb03 f202 	mul.w	r2, r3, r2
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	015a      	lsls	r2, r3, #5
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ca2:	691a      	ldr	r2, [r3, #16]
 8010ca4:	89fb      	ldrh	r3, [r7, #14]
 8010ca6:	04d9      	lsls	r1, r3, #19
 8010ca8:	4b1c      	ldr	r3, [pc, #112]	; (8010d1c <USB_EPStartXfer+0x370>)
 8010caa:	400b      	ands	r3, r1
 8010cac:	6939      	ldr	r1, [r7, #16]
 8010cae:	0148      	lsls	r0, r1, #5
 8010cb0:	6979      	ldr	r1, [r7, #20]
 8010cb2:	4401      	add	r1, r0
 8010cb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	015a      	lsls	r2, r3, #5
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cc8:	691a      	ldr	r2, [r3, #16]
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010cd2:	6939      	ldr	r1, [r7, #16]
 8010cd4:	0148      	lsls	r0, r1, #5
 8010cd6:	6979      	ldr	r1, [r7, #20]
 8010cd8:	4401      	add	r1, r0
 8010cda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	791b      	ldrb	r3, [r3, #4]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d12a      	bne.n	8010d40 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d112      	bne.n	8010d20 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	015a      	lsls	r2, r3, #5
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	4413      	add	r3, r2
 8010d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	693a      	ldr	r2, [r7, #16]
 8010d0a:	0151      	lsls	r1, r2, #5
 8010d0c:	697a      	ldr	r2, [r7, #20]
 8010d0e:	440a      	add	r2, r1
 8010d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010d18:	6013      	str	r3, [r2, #0]
 8010d1a:	e011      	b.n	8010d40 <USB_EPStartXfer+0x394>
 8010d1c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	015a      	lsls	r2, r3, #5
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	4413      	add	r3, r2
 8010d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	0151      	lsls	r1, r2, #5
 8010d32:	697a      	ldr	r2, [r7, #20]
 8010d34:	440a      	add	r2, r1
 8010d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	015a      	lsls	r2, r3, #5
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	4413      	add	r3, r2
 8010d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	693a      	ldr	r2, [r7, #16]
 8010d50:	0151      	lsls	r1, r2, #5
 8010d52:	697a      	ldr	r2, [r7, #20]
 8010d54:	440a      	add	r2, r1
 8010d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010d60:	2300      	movs	r3, #0
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3718      	adds	r7, #24
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop

08010d6c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	785b      	ldrb	r3, [r3, #1]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	f040 80ab 	bne.w	8010ee0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	699b      	ldr	r3, [r3, #24]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d132      	bne.n	8010df8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	015a      	lsls	r2, r3, #5
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	4413      	add	r3, r2
 8010d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	0151      	lsls	r1, r2, #5
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	440a      	add	r2, r1
 8010da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010db0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010db4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	015a      	lsls	r2, r3, #5
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dc2:	691b      	ldr	r3, [r3, #16]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	0151      	lsls	r1, r2, #5
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	440a      	add	r2, r1
 8010dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	015a      	lsls	r2, r3, #5
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	4413      	add	r3, r2
 8010dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	0151      	lsls	r1, r2, #5
 8010de8:	68fa      	ldr	r2, [r7, #12]
 8010dea:	440a      	add	r2, r1
 8010dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010df0:	0cdb      	lsrs	r3, r3, #19
 8010df2:	04db      	lsls	r3, r3, #19
 8010df4:	6113      	str	r3, [r2, #16]
 8010df6:	e04e      	b.n	8010e96 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	015a      	lsls	r2, r3, #5
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	4413      	add	r3, r2
 8010e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e04:	691b      	ldr	r3, [r3, #16]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	0151      	lsls	r1, r2, #5
 8010e0a:	68fa      	ldr	r2, [r7, #12]
 8010e0c:	440a      	add	r2, r1
 8010e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e12:	0cdb      	lsrs	r3, r3, #19
 8010e14:	04db      	lsls	r3, r3, #19
 8010e16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	0151      	lsls	r1, r2, #5
 8010e2a:	68fa      	ldr	r2, [r7, #12]
 8010e2c:	440a      	add	r2, r1
 8010e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010e36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010e3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	699a      	ldr	r2, [r3, #24]
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d903      	bls.n	8010e50 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	68da      	ldr	r2, [r3, #12]
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	015a      	lsls	r2, r3, #5
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	4413      	add	r3, r2
 8010e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e5c:	691b      	ldr	r3, [r3, #16]
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	0151      	lsls	r1, r2, #5
 8010e62:	68fa      	ldr	r2, [r7, #12]
 8010e64:	440a      	add	r2, r1
 8010e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	015a      	lsls	r2, r3, #5
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	4413      	add	r3, r2
 8010e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e7c:	691a      	ldr	r2, [r3, #16]
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	699b      	ldr	r3, [r3, #24]
 8010e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e86:	68b9      	ldr	r1, [r7, #8]
 8010e88:	0148      	lsls	r0, r1, #5
 8010e8a:	68f9      	ldr	r1, [r7, #12]
 8010e8c:	4401      	add	r1, r0
 8010e8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010e92:	4313      	orrs	r3, r2
 8010e94:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	015a      	lsls	r2, r3, #5
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	68ba      	ldr	r2, [r7, #8]
 8010ea6:	0151      	lsls	r1, r2, #5
 8010ea8:	68fa      	ldr	r2, [r7, #12]
 8010eaa:	440a      	add	r2, r1
 8010eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010eb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010eb4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	699b      	ldr	r3, [r3, #24]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d071      	beq.n	8010fa2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	f003 030f 	and.w	r3, r3, #15
 8010ece:	2101      	movs	r1, #1
 8010ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ed4:	68f9      	ldr	r1, [r7, #12]
 8010ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010eda:	4313      	orrs	r3, r2
 8010edc:	634b      	str	r3, [r1, #52]	; 0x34
 8010ede:	e060      	b.n	8010fa2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	015a      	lsls	r2, r3, #5
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eec:	691b      	ldr	r3, [r3, #16]
 8010eee:	68ba      	ldr	r2, [r7, #8]
 8010ef0:	0151      	lsls	r1, r2, #5
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	440a      	add	r2, r1
 8010ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010efa:	0cdb      	lsrs	r3, r3, #19
 8010efc:	04db      	lsls	r3, r3, #19
 8010efe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	015a      	lsls	r2, r3, #5
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	4413      	add	r3, r2
 8010f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	68ba      	ldr	r2, [r7, #8]
 8010f10:	0151      	lsls	r1, r2, #5
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	440a      	add	r2, r1
 8010f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010f1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010f22:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	699b      	ldr	r3, [r3, #24]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d003      	beq.n	8010f34 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	68da      	ldr	r2, [r3, #12]
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	68da      	ldr	r2, [r3, #12]
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	015a      	lsls	r2, r3, #5
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	4413      	add	r3, r2
 8010f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f48:	691b      	ldr	r3, [r3, #16]
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	0151      	lsls	r1, r2, #5
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	440a      	add	r2, r1
 8010f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010f5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	015a      	lsls	r2, r3, #5
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	4413      	add	r3, r2
 8010f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f68:	691a      	ldr	r2, [r3, #16]
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	69db      	ldr	r3, [r3, #28]
 8010f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010f72:	68b9      	ldr	r1, [r7, #8]
 8010f74:	0148      	lsls	r0, r1, #5
 8010f76:	68f9      	ldr	r1, [r7, #12]
 8010f78:	4401      	add	r1, r0
 8010f7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	015a      	lsls	r2, r3, #5
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	4413      	add	r3, r2
 8010f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	0151      	lsls	r1, r2, #5
 8010f94:	68fa      	ldr	r2, [r7, #12]
 8010f96:	440a      	add	r2, r1
 8010f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010fa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010fa2:	2300      	movs	r3, #0
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3714      	adds	r7, #20
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr

08010fb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b087      	sub	sp, #28
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	785b      	ldrb	r3, [r3, #1]
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d14a      	bne.n	8011064 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	015a      	lsls	r2, r3, #5
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fe6:	f040 8086 	bne.w	80110f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	015a      	lsls	r2, r3, #5
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	683a      	ldr	r2, [r7, #0]
 8010ffc:	7812      	ldrb	r2, [r2, #0]
 8010ffe:	0151      	lsls	r1, r2, #5
 8011000:	693a      	ldr	r2, [r7, #16]
 8011002:	440a      	add	r2, r1
 8011004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011008:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801100c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	015a      	lsls	r2, r3, #5
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	4413      	add	r3, r2
 8011018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	7812      	ldrb	r2, [r2, #0]
 8011022:	0151      	lsls	r1, r2, #5
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	440a      	add	r2, r1
 8011028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801102c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011030:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	3301      	adds	r3, #1
 8011036:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f242 7210 	movw	r2, #10000	; 0x2710
 801103e:	4293      	cmp	r3, r2
 8011040:	d902      	bls.n	8011048 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011042:	2301      	movs	r3, #1
 8011044:	75fb      	strb	r3, [r7, #23]
          break;
 8011046:	e056      	b.n	80110f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	015a      	lsls	r2, r3, #5
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	4413      	add	r3, r2
 8011052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801105c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011060:	d0e7      	beq.n	8011032 <USB_EPStopXfer+0x82>
 8011062:	e048      	b.n	80110f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	015a      	lsls	r2, r3, #5
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	4413      	add	r3, r2
 801106e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801107c:	d13b      	bne.n	80110f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	015a      	lsls	r2, r3, #5
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	4413      	add	r3, r2
 8011088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	683a      	ldr	r2, [r7, #0]
 8011090:	7812      	ldrb	r2, [r2, #0]
 8011092:	0151      	lsls	r1, r2, #5
 8011094:	693a      	ldr	r2, [r7, #16]
 8011096:	440a      	add	r2, r1
 8011098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801109c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80110a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	015a      	lsls	r2, r3, #5
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	4413      	add	r3, r2
 80110ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	683a      	ldr	r2, [r7, #0]
 80110b4:	7812      	ldrb	r2, [r2, #0]
 80110b6:	0151      	lsls	r1, r2, #5
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	440a      	add	r2, r1
 80110bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80110c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3301      	adds	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d902      	bls.n	80110dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80110d6:	2301      	movs	r3, #1
 80110d8:	75fb      	strb	r3, [r7, #23]
          break;
 80110da:	e00c      	b.n	80110f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	015a      	lsls	r2, r3, #5
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	4413      	add	r3, r2
 80110e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80110f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110f4:	d0e7      	beq.n	80110c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80110f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	371c      	adds	r7, #28
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr

08011104 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011104:	b480      	push	{r7}
 8011106:	b089      	sub	sp, #36	; 0x24
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	4611      	mov	r1, r2
 8011110:	461a      	mov	r2, r3
 8011112:	460b      	mov	r3, r1
 8011114:	71fb      	strb	r3, [r7, #7]
 8011116:	4613      	mov	r3, r2
 8011118:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011122:	88bb      	ldrh	r3, [r7, #4]
 8011124:	3303      	adds	r3, #3
 8011126:	089b      	lsrs	r3, r3, #2
 8011128:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801112a:	2300      	movs	r3, #0
 801112c:	61bb      	str	r3, [r7, #24]
 801112e:	e018      	b.n	8011162 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011130:	79fb      	ldrb	r3, [r7, #7]
 8011132:	031a      	lsls	r2, r3, #12
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	4413      	add	r3, r2
 8011138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801113c:	461a      	mov	r2, r3
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	3301      	adds	r3, #1
 8011148:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801114a:	69fb      	ldr	r3, [r7, #28]
 801114c:	3301      	adds	r3, #1
 801114e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	3301      	adds	r3, #1
 8011154:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	3301      	adds	r3, #1
 801115a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801115c:	69bb      	ldr	r3, [r7, #24]
 801115e:	3301      	adds	r3, #1
 8011160:	61bb      	str	r3, [r7, #24]
 8011162:	69ba      	ldr	r2, [r7, #24]
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	429a      	cmp	r2, r3
 8011168:	d3e2      	bcc.n	8011130 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 801116a:	2300      	movs	r3, #0
}
 801116c:	4618      	mov	r0, r3
 801116e:	3724      	adds	r7, #36	; 0x24
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr

08011178 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011178:	b480      	push	{r7}
 801117a:	b08b      	sub	sp, #44	; 0x2c
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	4613      	mov	r3, r2
 8011184:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801118e:	88fb      	ldrh	r3, [r7, #6]
 8011190:	089b      	lsrs	r3, r3, #2
 8011192:	b29b      	uxth	r3, r3
 8011194:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011196:	88fb      	ldrh	r3, [r7, #6]
 8011198:	f003 0303 	and.w	r3, r3, #3
 801119c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801119e:	2300      	movs	r3, #0
 80111a0:	623b      	str	r3, [r7, #32]
 80111a2:	e014      	b.n	80111ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80111b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b2:	3301      	adds	r3, #1
 80111b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80111b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b8:	3301      	adds	r3, #1
 80111ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80111bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111be:	3301      	adds	r3, #1
 80111c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80111c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c4:	3301      	adds	r3, #1
 80111c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80111c8:	6a3b      	ldr	r3, [r7, #32]
 80111ca:	3301      	adds	r3, #1
 80111cc:	623b      	str	r3, [r7, #32]
 80111ce:	6a3a      	ldr	r2, [r7, #32]
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d3e6      	bcc.n	80111a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80111d6:	8bfb      	ldrh	r3, [r7, #30]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d01e      	beq.n	801121a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80111dc:	2300      	movs	r3, #0
 80111de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80111e0:	69bb      	ldr	r3, [r7, #24]
 80111e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111e6:	461a      	mov	r2, r3
 80111e8:	f107 0310 	add.w	r3, r7, #16
 80111ec:	6812      	ldr	r2, [r2, #0]
 80111ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80111f0:	693a      	ldr	r2, [r7, #16]
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	00db      	lsls	r3, r3, #3
 80111f8:	fa22 f303 	lsr.w	r3, r2, r3
 80111fc:	b2da      	uxtb	r2, r3
 80111fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011200:	701a      	strb	r2, [r3, #0]
      i++;
 8011202:	6a3b      	ldr	r3, [r7, #32]
 8011204:	3301      	adds	r3, #1
 8011206:	623b      	str	r3, [r7, #32]
      pDest++;
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	3301      	adds	r3, #1
 801120c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801120e:	8bfb      	ldrh	r3, [r7, #30]
 8011210:	3b01      	subs	r3, #1
 8011212:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011214:	8bfb      	ldrh	r3, [r7, #30]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1ea      	bne.n	80111f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801121c:	4618      	mov	r0, r3
 801121e:	372c      	adds	r7, #44	; 0x2c
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011228:	b480      	push	{r7}
 801122a:	b085      	sub	sp, #20
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	785b      	ldrb	r3, [r3, #1]
 8011240:	2b01      	cmp	r3, #1
 8011242:	d12c      	bne.n	801129e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	015a      	lsls	r2, r3, #5
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	4413      	add	r3, r2
 801124c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	db12      	blt.n	801127c <USB_EPSetStall+0x54>
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d00f      	beq.n	801127c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	015a      	lsls	r2, r3, #5
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	4413      	add	r3, r2
 8011264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	0151      	lsls	r1, r2, #5
 801126e:	68fa      	ldr	r2, [r7, #12]
 8011270:	440a      	add	r2, r1
 8011272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011276:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801127a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	015a      	lsls	r2, r3, #5
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	4413      	add	r3, r2
 8011284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	68ba      	ldr	r2, [r7, #8]
 801128c:	0151      	lsls	r1, r2, #5
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	440a      	add	r2, r1
 8011292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801129a:	6013      	str	r3, [r2, #0]
 801129c:	e02b      	b.n	80112f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	015a      	lsls	r2, r3, #5
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	4413      	add	r3, r2
 80112a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	db12      	blt.n	80112d6 <USB_EPSetStall+0xae>
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d00f      	beq.n	80112d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	015a      	lsls	r2, r3, #5
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	4413      	add	r3, r2
 80112be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	0151      	lsls	r1, r2, #5
 80112c8:	68fa      	ldr	r2, [r7, #12]
 80112ca:	440a      	add	r2, r1
 80112cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80112d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	015a      	lsls	r2, r3, #5
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	4413      	add	r3, r2
 80112de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	0151      	lsls	r1, r2, #5
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	440a      	add	r2, r1
 80112ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80112f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80112f6:	2300      	movs	r3, #0
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3714      	adds	r7, #20
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011304:	b480      	push	{r7}
 8011306:	b085      	sub	sp, #20
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	785b      	ldrb	r3, [r3, #1]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d128      	bne.n	8011372 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	015a      	lsls	r2, r3, #5
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	4413      	add	r3, r2
 8011328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	68ba      	ldr	r2, [r7, #8]
 8011330:	0151      	lsls	r1, r2, #5
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	440a      	add	r2, r1
 8011336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801133a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801133e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	791b      	ldrb	r3, [r3, #4]
 8011344:	2b03      	cmp	r3, #3
 8011346:	d003      	beq.n	8011350 <USB_EPClearStall+0x4c>
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	791b      	ldrb	r3, [r3, #4]
 801134c:	2b02      	cmp	r3, #2
 801134e:	d138      	bne.n	80113c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	015a      	lsls	r2, r3, #5
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	4413      	add	r3, r2
 8011358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	0151      	lsls	r1, r2, #5
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	440a      	add	r2, r1
 8011366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801136a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801136e:	6013      	str	r3, [r2, #0]
 8011370:	e027      	b.n	80113c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	015a      	lsls	r2, r3, #5
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	4413      	add	r3, r2
 801137a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	0151      	lsls	r1, r2, #5
 8011384:	68fa      	ldr	r2, [r7, #12]
 8011386:	440a      	add	r2, r1
 8011388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801138c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011390:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	791b      	ldrb	r3, [r3, #4]
 8011396:	2b03      	cmp	r3, #3
 8011398:	d003      	beq.n	80113a2 <USB_EPClearStall+0x9e>
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	791b      	ldrb	r3, [r3, #4]
 801139e:	2b02      	cmp	r3, #2
 80113a0:	d10f      	bne.n	80113c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	015a      	lsls	r2, r3, #5
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	4413      	add	r3, r2
 80113aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	0151      	lsls	r1, r2, #5
 80113b4:	68fa      	ldr	r2, [r7, #12]
 80113b6:	440a      	add	r2, r1
 80113b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80113c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80113c2:	2300      	movs	r3, #0
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3714      	adds	r7, #20
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	460b      	mov	r3, r1
 80113da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80113f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	78fb      	ldrb	r3, [r7, #3]
 80113fe:	011b      	lsls	r3, r3, #4
 8011400:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011404:	68f9      	ldr	r1, [r7, #12]
 8011406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801140a:	4313      	orrs	r3, r2
 801140c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801140e:	2300      	movs	r3, #0
}
 8011410:	4618      	mov	r0, r3
 8011412:	3714      	adds	r7, #20
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr

0801141c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801141c:	b480      	push	{r7}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011436:	f023 0303 	bic.w	r3, r3, #3
 801143a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011442:	685b      	ldr	r3, [r3, #4]
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801144a:	f023 0302 	bic.w	r3, r3, #2
 801144e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011450:	2300      	movs	r3, #0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3714      	adds	r7, #20
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr

0801145e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801145e:	b480      	push	{r7}
 8011460:	b085      	sub	sp, #20
 8011462:	af00      	add	r7, sp, #0
 8011464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	68fa      	ldr	r2, [r7, #12]
 8011474:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011478:	f023 0303 	bic.w	r3, r3, #3
 801147c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	68fa      	ldr	r2, [r7, #12]
 8011488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801148c:	f043 0302 	orr.w	r3, r3, #2
 8011490:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011492:	2300      	movs	r3, #0
}
 8011494:	4618      	mov	r0, r3
 8011496:	3714      	adds	r7, #20
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b085      	sub	sp, #20
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	695b      	ldr	r3, [r3, #20]
 80114ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	699b      	ldr	r3, [r3, #24]
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	4013      	ands	r3, r2
 80114b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80114b8:	68fb      	ldr	r3, [r7, #12]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3714      	adds	r7, #20
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr

080114c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80114c6:	b480      	push	{r7}
 80114c8:	b085      	sub	sp, #20
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114d8:	699b      	ldr	r3, [r3, #24]
 80114da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114e2:	69db      	ldr	r3, [r3, #28]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	4013      	ands	r3, r2
 80114e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	0c1b      	lsrs	r3, r3, #16
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3714      	adds	r7, #20
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr

080114fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80114fa:	b480      	push	{r7}
 80114fc:	b085      	sub	sp, #20
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801150c:	699b      	ldr	r3, [r3, #24]
 801150e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011516:	69db      	ldr	r3, [r3, #28]
 8011518:	68ba      	ldr	r2, [r7, #8]
 801151a:	4013      	ands	r3, r2
 801151c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	b29b      	uxth	r3, r3
}
 8011522:	4618      	mov	r0, r3
 8011524:	3714      	adds	r7, #20
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr

0801152e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801152e:	b480      	push	{r7}
 8011530:	b085      	sub	sp, #20
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
 8011536:	460b      	mov	r3, r1
 8011538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801153e:	78fb      	ldrb	r3, [r7, #3]
 8011540:	015a      	lsls	r2, r3, #5
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	4413      	add	r3, r2
 8011546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011554:	695b      	ldr	r3, [r3, #20]
 8011556:	68ba      	ldr	r2, [r7, #8]
 8011558:	4013      	ands	r3, r2
 801155a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801155c:	68bb      	ldr	r3, [r7, #8]
}
 801155e:	4618      	mov	r0, r3
 8011560:	3714      	adds	r7, #20
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801156a:	b480      	push	{r7}
 801156c:	b087      	sub	sp, #28
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	460b      	mov	r3, r1
 8011574:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011580:	691b      	ldr	r3, [r3, #16]
 8011582:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801158c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801158e:	78fb      	ldrb	r3, [r7, #3]
 8011590:	f003 030f 	and.w	r3, r3, #15
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	fa22 f303 	lsr.w	r3, r2, r3
 801159a:	01db      	lsls	r3, r3, #7
 801159c:	b2db      	uxtb	r3, r3
 801159e:	693a      	ldr	r2, [r7, #16]
 80115a0:	4313      	orrs	r3, r2
 80115a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80115a4:	78fb      	ldrb	r3, [r7, #3]
 80115a6:	015a      	lsls	r2, r3, #5
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	4413      	add	r3, r2
 80115ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115b0:	689b      	ldr	r3, [r3, #8]
 80115b2:	693a      	ldr	r2, [r7, #16]
 80115b4:	4013      	ands	r3, r2
 80115b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80115b8:	68bb      	ldr	r3, [r7, #8]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	371c      	adds	r7, #28
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80115c6:	b480      	push	{r7}
 80115c8:	b083      	sub	sp, #12
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	695b      	ldr	r3, [r3, #20]
 80115d2:	f003 0301 	and.w	r3, r3, #1
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	370c      	adds	r7, #12
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr

080115e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80115e2:	b480      	push	{r7}
 80115e4:	b085      	sub	sp, #20
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011600:	f023 0307 	bic.w	r3, r3, #7
 8011604:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	68fa      	ldr	r2, [r7, #12]
 8011610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011618:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3714      	adds	r7, #20
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr

08011628 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011628:	b480      	push	{r7}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	333c      	adds	r3, #60	; 0x3c
 801163a:	3304      	adds	r3, #4
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	4a1c      	ldr	r2, [pc, #112]	; (80116b4 <USB_EP0_OutStart+0x8c>)
 8011644:	4293      	cmp	r3, r2
 8011646:	d90a      	bls.n	801165e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011658:	d101      	bne.n	801165e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 801165a:	2300      	movs	r3, #0
 801165c:	e024      	b.n	80116a8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011664:	461a      	mov	r2, r3
 8011666:	2300      	movs	r3, #0
 8011668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801167c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011684:	691b      	ldr	r3, [r3, #16]
 8011686:	68fa      	ldr	r2, [r7, #12]
 8011688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801168c:	f043 0318 	orr.w	r3, r3, #24
 8011690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80116a4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80116a6:	2300      	movs	r3, #0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr
 80116b4:	4f54300a 	.word	0x4f54300a

080116b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80116b8:	b480      	push	{r7}
 80116ba:	b085      	sub	sp, #20
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80116c0:	2300      	movs	r3, #0
 80116c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	3301      	adds	r3, #1
 80116c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	4a13      	ldr	r2, [pc, #76]	; (801171c <USB_CoreReset+0x64>)
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d901      	bls.n	80116d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80116d2:	2303      	movs	r3, #3
 80116d4:	e01b      	b.n	801170e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	691b      	ldr	r3, [r3, #16]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	daf2      	bge.n	80116c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80116de:	2300      	movs	r3, #0
 80116e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	691b      	ldr	r3, [r3, #16]
 80116e6:	f043 0201 	orr.w	r2, r3, #1
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	3301      	adds	r3, #1
 80116f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	4a09      	ldr	r2, [pc, #36]	; (801171c <USB_CoreReset+0x64>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d901      	bls.n	8011700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80116fc:	2303      	movs	r3, #3
 80116fe:	e006      	b.n	801170e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	691b      	ldr	r3, [r3, #16]
 8011704:	f003 0301 	and.w	r3, r3, #1
 8011708:	2b01      	cmp	r3, #1
 801170a:	d0f0      	beq.n	80116ee <USB_CoreReset+0x36>

  return HAL_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
 801171a:	bf00      	nop
 801171c:	00030d40 	.word	0x00030d40

08011720 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011724:	4904      	ldr	r1, [pc, #16]	; (8011738 <MX_FATFS_Init+0x18>)
 8011726:	4805      	ldr	r0, [pc, #20]	; (801173c <MX_FATFS_Init+0x1c>)
 8011728:	f004 fd46 	bl	80161b8 <FATFS_LinkDriver>
 801172c:	4603      	mov	r3, r0
 801172e:	461a      	mov	r2, r3
 8011730:	4b03      	ldr	r3, [pc, #12]	; (8011740 <MX_FATFS_Init+0x20>)
 8011732:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011734:	bf00      	nop
 8011736:	bd80      	pop	{r7, pc}
 8011738:	20000ec8 	.word	0x20000ec8
 801173c:	0801a0b8 	.word	0x0801a0b8
 8011740:	20000ec4 	.word	0x20000ec4

08011744 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011744:	b480      	push	{r7}
 8011746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011748:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801174a:	4618      	mov	r0, r3
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801175a:	2300      	movs	r3, #0
 801175c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801175e:	f000 f879 	bl	8011854 <BSP_SD_IsDetected>
 8011762:	4603      	mov	r3, r0
 8011764:	2b01      	cmp	r3, #1
 8011766:	d001      	beq.n	801176c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011768:	2302      	movs	r3, #2
 801176a:	e012      	b.n	8011792 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801176c:	480b      	ldr	r0, [pc, #44]	; (801179c <BSP_SD_Init+0x48>)
 801176e:	f7fa f8d1 	bl	800b914 <HAL_SD_Init>
 8011772:	4603      	mov	r3, r0
 8011774:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011776:	79fb      	ldrb	r3, [r7, #7]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d109      	bne.n	8011790 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801177c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011780:	4806      	ldr	r0, [pc, #24]	; (801179c <BSP_SD_Init+0x48>)
 8011782:	f7fa ff9d 	bl	800c6c0 <HAL_SD_ConfigWideBusOperation>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d001      	beq.n	8011790 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801178c:	2301      	movs	r3, #1
 801178e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011790:	79fb      	ldrb	r3, [r7, #7]
}
 8011792:	4618      	mov	r0, r3
 8011794:	3708      	adds	r7, #8
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	20000620 	.word	0x20000620

080117a0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b088      	sub	sp, #32
 80117a4:	af02      	add	r7, sp, #8
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80117ae:	2300      	movs	r3, #0
 80117b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	68ba      	ldr	r2, [r7, #8]
 80117ba:	68f9      	ldr	r1, [r7, #12]
 80117bc:	4806      	ldr	r0, [pc, #24]	; (80117d8 <BSP_SD_ReadBlocks+0x38>)
 80117be:	f7fa f9d1 	bl	800bb64 <HAL_SD_ReadBlocks>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d001      	beq.n	80117cc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80117c8:	2301      	movs	r3, #1
 80117ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80117cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3718      	adds	r7, #24
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	20000620 	.word	0x20000620

080117dc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af02      	add	r7, sp, #8
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
 80117e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68ba      	ldr	r2, [r7, #8]
 80117f6:	68f9      	ldr	r1, [r7, #12]
 80117f8:	4806      	ldr	r0, [pc, #24]	; (8011814 <BSP_SD_WriteBlocks+0x38>)
 80117fa:	f7fa fb45 	bl	800be88 <HAL_SD_WriteBlocks>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d001      	beq.n	8011808 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011804:	2301      	movs	r3, #1
 8011806:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011808:	7dfb      	ldrb	r3, [r7, #23]
}
 801180a:	4618      	mov	r0, r3
 801180c:	3718      	adds	r7, #24
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	20000620 	.word	0x20000620

08011818 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801181c:	4805      	ldr	r0, [pc, #20]	; (8011834 <BSP_SD_GetCardState+0x1c>)
 801181e:	f7fb f863 	bl	800c8e8 <HAL_SD_GetCardState>
 8011822:	4603      	mov	r3, r0
 8011824:	2b04      	cmp	r3, #4
 8011826:	bf14      	ite	ne
 8011828:	2301      	movne	r3, #1
 801182a:	2300      	moveq	r3, #0
 801182c:	b2db      	uxtb	r3, r3
}
 801182e:	4618      	mov	r0, r3
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	20000620 	.word	0x20000620

08011838 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011840:	6879      	ldr	r1, [r7, #4]
 8011842:	4803      	ldr	r0, [pc, #12]	; (8011850 <BSP_SD_GetCardInfo+0x18>)
 8011844:	f7fa ff10 	bl	800c668 <HAL_SD_GetCardInfo>
}
 8011848:	bf00      	nop
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	20000620 	.word	0x20000620

08011854 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801185a:	2301      	movs	r3, #1
 801185c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801185e:	f000 f80b 	bl	8011878 <BSP_PlatformIsDetected>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d101      	bne.n	801186c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011868:	2300      	movs	r3, #0
 801186a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801186c:	79fb      	ldrb	r3, [r7, #7]
 801186e:	b2db      	uxtb	r3, r3
}
 8011870:	4618      	mov	r0, r3
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801187e:	2301      	movs	r3, #1
 8011880:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801188a:	f7f4 ff5b 	bl	8006744 <HAL_GPIO_ReadPin>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8011894:	2300      	movs	r3, #0
 8011896:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011898:	79fb      	ldrb	r3, [r7, #7]
}
 801189a:	4618      	mov	r0, r3
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
	...

080118a4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	4603      	mov	r3, r0
 80118ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80118ae:	4b0b      	ldr	r3, [pc, #44]	; (80118dc <SD_CheckStatus+0x38>)
 80118b0:	2201      	movs	r2, #1
 80118b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80118b4:	f7ff ffb0 	bl	8011818 <BSP_SD_GetCardState>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d107      	bne.n	80118ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80118be:	4b07      	ldr	r3, [pc, #28]	; (80118dc <SD_CheckStatus+0x38>)
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	f023 0301 	bic.w	r3, r3, #1
 80118c8:	b2da      	uxtb	r2, r3
 80118ca:	4b04      	ldr	r3, [pc, #16]	; (80118dc <SD_CheckStatus+0x38>)
 80118cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80118ce:	4b03      	ldr	r3, [pc, #12]	; (80118dc <SD_CheckStatus+0x38>)
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	b2db      	uxtb	r3, r3
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3708      	adds	r7, #8
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	2000000d 	.word	0x2000000d

080118e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	4603      	mov	r3, r0
 80118e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80118ea:	4b0b      	ldr	r3, [pc, #44]	; (8011918 <SD_initialize+0x38>)
 80118ec:	2201      	movs	r2, #1
 80118ee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80118f0:	f7ff ff30 	bl	8011754 <BSP_SD_Init>
 80118f4:	4603      	mov	r3, r0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d107      	bne.n	801190a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80118fa:	79fb      	ldrb	r3, [r7, #7]
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7ff ffd1 	bl	80118a4 <SD_CheckStatus>
 8011902:	4603      	mov	r3, r0
 8011904:	461a      	mov	r2, r3
 8011906:	4b04      	ldr	r3, [pc, #16]	; (8011918 <SD_initialize+0x38>)
 8011908:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801190a:	4b03      	ldr	r3, [pc, #12]	; (8011918 <SD_initialize+0x38>)
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	b2db      	uxtb	r3, r3
}
 8011910:	4618      	mov	r0, r3
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	2000000d 	.word	0x2000000d

0801191c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	4603      	mov	r3, r0
 8011924:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011926:	79fb      	ldrb	r3, [r7, #7]
 8011928:	4618      	mov	r0, r3
 801192a:	f7ff ffbb 	bl	80118a4 <SD_CheckStatus>
 801192e:	4603      	mov	r3, r0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b086      	sub	sp, #24
 801193c:	af00      	add	r7, sp, #0
 801193e:	60b9      	str	r1, [r7, #8]
 8011940:	607a      	str	r2, [r7, #4]
 8011942:	603b      	str	r3, [r7, #0]
 8011944:	4603      	mov	r3, r0
 8011946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011948:	2301      	movs	r3, #1
 801194a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801194c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011950:	683a      	ldr	r2, [r7, #0]
 8011952:	6879      	ldr	r1, [r7, #4]
 8011954:	68b8      	ldr	r0, [r7, #8]
 8011956:	f7ff ff23 	bl	80117a0 <BSP_SD_ReadBlocks>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d107      	bne.n	8011970 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011960:	bf00      	nop
 8011962:	f7ff ff59 	bl	8011818 <BSP_SD_GetCardState>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1fa      	bne.n	8011962 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801196c:	2300      	movs	r3, #0
 801196e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011970:	7dfb      	ldrb	r3, [r7, #23]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3718      	adds	r7, #24
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801197a:	b580      	push	{r7, lr}
 801197c:	b086      	sub	sp, #24
 801197e:	af00      	add	r7, sp, #0
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	607a      	str	r2, [r7, #4]
 8011984:	603b      	str	r3, [r7, #0]
 8011986:	4603      	mov	r3, r0
 8011988:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801198a:	2301      	movs	r3, #1
 801198c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801198e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011992:	683a      	ldr	r2, [r7, #0]
 8011994:	6879      	ldr	r1, [r7, #4]
 8011996:	68b8      	ldr	r0, [r7, #8]
 8011998:	f7ff ff20 	bl	80117dc <BSP_SD_WriteBlocks>
 801199c:	4603      	mov	r3, r0
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d107      	bne.n	80119b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80119a2:	bf00      	nop
 80119a4:	f7ff ff38 	bl	8011818 <BSP_SD_GetCardState>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d1fa      	bne.n	80119a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80119ae:	2300      	movs	r3, #0
 80119b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80119b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3718      	adds	r7, #24
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b08c      	sub	sp, #48	; 0x30
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	4603      	mov	r3, r0
 80119c4:	603a      	str	r2, [r7, #0]
 80119c6:	71fb      	strb	r3, [r7, #7]
 80119c8:	460b      	mov	r3, r1
 80119ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80119cc:	2301      	movs	r3, #1
 80119ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80119d2:	4b25      	ldr	r3, [pc, #148]	; (8011a68 <SD_ioctl+0xac>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	f003 0301 	and.w	r3, r3, #1
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d001      	beq.n	80119e4 <SD_ioctl+0x28>
 80119e0:	2303      	movs	r3, #3
 80119e2:	e03c      	b.n	8011a5e <SD_ioctl+0xa2>

  switch (cmd)
 80119e4:	79bb      	ldrb	r3, [r7, #6]
 80119e6:	2b03      	cmp	r3, #3
 80119e8:	d834      	bhi.n	8011a54 <SD_ioctl+0x98>
 80119ea:	a201      	add	r2, pc, #4	; (adr r2, 80119f0 <SD_ioctl+0x34>)
 80119ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f0:	08011a01 	.word	0x08011a01
 80119f4:	08011a09 	.word	0x08011a09
 80119f8:	08011a21 	.word	0x08011a21
 80119fc:	08011a3b 	.word	0x08011a3b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011a00:	2300      	movs	r3, #0
 8011a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a06:	e028      	b.n	8011a5a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a08:	f107 0308 	add.w	r3, r7, #8
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7ff ff13 	bl	8011838 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011a12:	6a3a      	ldr	r2, [r7, #32]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a1e:	e01c      	b.n	8011a5a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a20:	f107 0308 	add.w	r3, r7, #8
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7ff ff07 	bl	8011838 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011a32:	2300      	movs	r3, #0
 8011a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a38:	e00f      	b.n	8011a5a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a3a:	f107 0308 	add.w	r3, r7, #8
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7ff fefa 	bl	8011838 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a46:	0a5a      	lsrs	r2, r3, #9
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a52:	e002      	b.n	8011a5a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011a54:	2304      	movs	r3, #4
 8011a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3730      	adds	r7, #48	; 0x30
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	2000000d 	.word	0x2000000d

08011a6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	460b      	mov	r3, r1
 8011a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011a78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011a7c:	f005 f978 	bl	8016d70 <USBD_static_malloc>
 8011a80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d105      	bne.n	8011a94 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011a90:	2302      	movs	r3, #2
 8011a92:	e066      	b.n	8011b62 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7c1b      	ldrb	r3, [r3, #16]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d119      	bne.n	8011ad8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	2181      	movs	r1, #129	; 0x81
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f004 ff99 	bl	80169e4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2201      	movs	r2, #1
 8011ab6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011abc:	2202      	movs	r2, #2
 8011abe:	2101      	movs	r1, #1
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f004 ff8f 	bl	80169e4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2201      	movs	r2, #1
 8011aca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2210      	movs	r2, #16
 8011ad2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011ad6:	e016      	b.n	8011b06 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011ad8:	2340      	movs	r3, #64	; 0x40
 8011ada:	2202      	movs	r2, #2
 8011adc:	2181      	movs	r1, #129	; 0x81
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f004 ff80 	bl	80169e4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011aea:	2340      	movs	r3, #64	; 0x40
 8011aec:	2202      	movs	r2, #2
 8011aee:	2101      	movs	r1, #1
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f004 ff77 	bl	80169e4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2201      	movs	r2, #1
 8011afa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2210      	movs	r2, #16
 8011b02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011b06:	2308      	movs	r3, #8
 8011b08:	2203      	movs	r2, #3
 8011b0a:	2182      	movs	r1, #130	; 0x82
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f004 ff69 	bl	80169e4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	7c1b      	ldrb	r3, [r3, #16]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d109      	bne.n	8011b50 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b46:	2101      	movs	r1, #1
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f005 f8c5 	bl	8016cd8 <USBD_LL_PrepareReceive>
 8011b4e:	e007      	b.n	8011b60 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b56:	2340      	movs	r3, #64	; 0x40
 8011b58:	2101      	movs	r1, #1
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f005 f8bc 	bl	8016cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b082      	sub	sp, #8
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	460b      	mov	r3, r1
 8011b74:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011b76:	2181      	movs	r1, #129	; 0x81
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f004 ff71 	bl	8016a60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2200      	movs	r2, #0
 8011b82:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011b84:	2101      	movs	r1, #1
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f004 ff6a 	bl	8016a60 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011b94:	2182      	movs	r1, #130	; 0x82
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f004 ff62 	bl	8016a60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00e      	beq.n	8011bd4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f005 f8e0 	bl	8016d8c <USBD_static_free>
    pdev->pClassData = NULL;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
	...

08011be0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b086      	sub	sp, #24
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d101      	bne.n	8011c08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011c04:	2303      	movs	r3, #3
 8011c06:	e0af      	b.n	8011d68 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d03f      	beq.n	8011c94 <USBD_CDC_Setup+0xb4>
 8011c14:	2b20      	cmp	r3, #32
 8011c16:	f040 809f 	bne.w	8011d58 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	88db      	ldrh	r3, [r3, #6]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d02e      	beq.n	8011c80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	b25b      	sxtb	r3, r3
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	da16      	bge.n	8011c5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c32:	689b      	ldr	r3, [r3, #8]
 8011c34:	683a      	ldr	r2, [r7, #0]
 8011c36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011c38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011c3a:	683a      	ldr	r2, [r7, #0]
 8011c3c:	88d2      	ldrh	r2, [r2, #6]
 8011c3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	88db      	ldrh	r3, [r3, #6]
 8011c44:	2b07      	cmp	r3, #7
 8011c46:	bf28      	it	cs
 8011c48:	2307      	movcs	r3, #7
 8011c4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	89fa      	ldrh	r2, [r7, #14]
 8011c50:	4619      	mov	r1, r3
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f001 fb19 	bl	801328a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011c58:	e085      	b.n	8011d66 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	785a      	ldrb	r2, [r3, #1]
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	88db      	ldrh	r3, [r3, #6]
 8011c68:	b2da      	uxtb	r2, r3
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011c70:	6939      	ldr	r1, [r7, #16]
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	88db      	ldrh	r3, [r3, #6]
 8011c76:	461a      	mov	r2, r3
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f001 fb32 	bl	80132e2 <USBD_CtlPrepareRx>
      break;
 8011c7e:	e072      	b.n	8011d66 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c86:	689b      	ldr	r3, [r3, #8]
 8011c88:	683a      	ldr	r2, [r7, #0]
 8011c8a:	7850      	ldrb	r0, [r2, #1]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	4798      	blx	r3
      break;
 8011c92:	e068      	b.n	8011d66 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	785b      	ldrb	r3, [r3, #1]
 8011c98:	2b0b      	cmp	r3, #11
 8011c9a:	d852      	bhi.n	8011d42 <USBD_CDC_Setup+0x162>
 8011c9c:	a201      	add	r2, pc, #4	; (adr r2, 8011ca4 <USBD_CDC_Setup+0xc4>)
 8011c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ca2:	bf00      	nop
 8011ca4:	08011cd5 	.word	0x08011cd5
 8011ca8:	08011d51 	.word	0x08011d51
 8011cac:	08011d43 	.word	0x08011d43
 8011cb0:	08011d43 	.word	0x08011d43
 8011cb4:	08011d43 	.word	0x08011d43
 8011cb8:	08011d43 	.word	0x08011d43
 8011cbc:	08011d43 	.word	0x08011d43
 8011cc0:	08011d43 	.word	0x08011d43
 8011cc4:	08011d43 	.word	0x08011d43
 8011cc8:	08011d43 	.word	0x08011d43
 8011ccc:	08011cff 	.word	0x08011cff
 8011cd0:	08011d29 	.word	0x08011d29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b03      	cmp	r3, #3
 8011cde:	d107      	bne.n	8011cf0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011ce0:	f107 030a 	add.w	r3, r7, #10
 8011ce4:	2202      	movs	r2, #2
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f001 face 	bl	801328a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011cee:	e032      	b.n	8011d56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011cf0:	6839      	ldr	r1, [r7, #0]
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f001 fa58 	bl	80131a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011cf8:	2303      	movs	r3, #3
 8011cfa:	75fb      	strb	r3, [r7, #23]
          break;
 8011cfc:	e02b      	b.n	8011d56 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	2b03      	cmp	r3, #3
 8011d08:	d107      	bne.n	8011d1a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011d0a:	f107 030d 	add.w	r3, r7, #13
 8011d0e:	2201      	movs	r2, #1
 8011d10:	4619      	mov	r1, r3
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f001 fab9 	bl	801328a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d18:	e01d      	b.n	8011d56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011d1a:	6839      	ldr	r1, [r7, #0]
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f001 fa43 	bl	80131a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011d22:	2303      	movs	r3, #3
 8011d24:	75fb      	strb	r3, [r7, #23]
          break;
 8011d26:	e016      	b.n	8011d56 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	2b03      	cmp	r3, #3
 8011d32:	d00f      	beq.n	8011d54 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f001 fa36 	bl	80131a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011d3c:	2303      	movs	r3, #3
 8011d3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011d40:	e008      	b.n	8011d54 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011d42:	6839      	ldr	r1, [r7, #0]
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f001 fa2f 	bl	80131a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8011d4a:	2303      	movs	r3, #3
 8011d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8011d4e:	e002      	b.n	8011d56 <USBD_CDC_Setup+0x176>
          break;
 8011d50:	bf00      	nop
 8011d52:	e008      	b.n	8011d66 <USBD_CDC_Setup+0x186>
          break;
 8011d54:	bf00      	nop
      }
      break;
 8011d56:	e006      	b.n	8011d66 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011d58:	6839      	ldr	r1, [r7, #0]
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f001 fa24 	bl	80131a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8011d60:	2303      	movs	r3, #3
 8011d62:	75fb      	strb	r3, [r7, #23]
      break;
 8011d64:	bf00      	nop
  }

  return (uint8_t)ret;
 8011d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3718      	adds	r7, #24
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d101      	bne.n	8011d92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011d8e:	2303      	movs	r3, #3
 8011d90:	e04f      	b.n	8011e32 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011d9a:	78fa      	ldrb	r2, [r7, #3]
 8011d9c:	6879      	ldr	r1, [r7, #4]
 8011d9e:	4613      	mov	r3, r2
 8011da0:	009b      	lsls	r3, r3, #2
 8011da2:	4413      	add	r3, r2
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	440b      	add	r3, r1
 8011da8:	3318      	adds	r3, #24
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d029      	beq.n	8011e04 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011db0:	78fa      	ldrb	r2, [r7, #3]
 8011db2:	6879      	ldr	r1, [r7, #4]
 8011db4:	4613      	mov	r3, r2
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	4413      	add	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	440b      	add	r3, r1
 8011dbe:	3318      	adds	r3, #24
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	78f9      	ldrb	r1, [r7, #3]
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	00db      	lsls	r3, r3, #3
 8011dca:	440b      	add	r3, r1
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	4403      	add	r3, r0
 8011dd0:	3348      	adds	r3, #72	; 0x48
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8011dd8:	fb01 f303 	mul.w	r3, r1, r3
 8011ddc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d110      	bne.n	8011e04 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011de2:	78fa      	ldrb	r2, [r7, #3]
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	4613      	mov	r3, r2
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	4413      	add	r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	440b      	add	r3, r1
 8011df0:	3318      	adds	r3, #24
 8011df2:	2200      	movs	r2, #0
 8011df4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011df6:	78f9      	ldrb	r1, [r7, #3]
 8011df8:	2300      	movs	r3, #0
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f004 ff33 	bl	8016c68 <USBD_LL_Transmit>
 8011e02:	e015      	b.n	8011e30 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	2200      	movs	r2, #0
 8011e08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e12:	691b      	ldr	r3, [r3, #16]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d00b      	beq.n	8011e30 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e1e:	691b      	ldr	r3, [r3, #16]
 8011e20:	68ba      	ldr	r2, [r7, #8]
 8011e22:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011e26:	68ba      	ldr	r2, [r7, #8]
 8011e28:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011e2c:	78fa      	ldrb	r2, [r7, #3]
 8011e2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3710      	adds	r7, #16
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}

08011e3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b084      	sub	sp, #16
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
 8011e42:	460b      	mov	r3, r1
 8011e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011e58:	2303      	movs	r3, #3
 8011e5a:	e015      	b.n	8011e88 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011e5c:	78fb      	ldrb	r3, [r7, #3]
 8011e5e:	4619      	mov	r1, r3
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f004 ff71 	bl	8016d48 <USBD_LL_GetRxDataSize>
 8011e66:	4602      	mov	r2, r0
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011e82:	4611      	mov	r1, r2
 8011e84:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011e86:	2300      	movs	r3, #0
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3710      	adds	r7, #16
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d101      	bne.n	8011eaa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011ea6:	2303      	movs	r3, #3
 8011ea8:	e01b      	b.n	8011ee2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d015      	beq.n	8011ee0 <USBD_CDC_EP0_RxReady+0x50>
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011eba:	2bff      	cmp	r3, #255	; 0xff
 8011ebc:	d010      	beq.n	8011ee0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011ec4:	689b      	ldr	r3, [r3, #8]
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011ecc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011ed4:	b292      	uxth	r2, r2
 8011ed6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	22ff      	movs	r2, #255	; 0xff
 8011edc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011ee0:	2300      	movs	r3, #0
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
	...

08011eec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2243      	movs	r2, #67	; 0x43
 8011ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011efa:	4b03      	ldr	r3, [pc, #12]	; (8011f08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr
 8011f08:	20000098 	.word	0x20000098

08011f0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b083      	sub	sp, #12
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2243      	movs	r2, #67	; 0x43
 8011f18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011f1a:	4b03      	ldr	r3, [pc, #12]	; (8011f28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr
 8011f28:	20000054 	.word	0x20000054

08011f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2243      	movs	r2, #67	; 0x43
 8011f38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011f3a:	4b03      	ldr	r3, [pc, #12]	; (8011f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	370c      	adds	r7, #12
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr
 8011f48:	200000dc 	.word	0x200000dc

08011f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	220a      	movs	r2, #10
 8011f58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011f5a:	4b03      	ldr	r3, [pc, #12]	; (8011f68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr
 8011f68:	20000010 	.word	0x20000010

08011f6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d101      	bne.n	8011f80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011f7c:	2303      	movs	r3, #3
 8011f7e:	e004      	b.n	8011f8a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	683a      	ldr	r2, [r7, #0]
 8011f84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	370c      	adds	r7, #12
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f94:	4770      	bx	lr

08011f96 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011f96:	b480      	push	{r7}
 8011f98:	b087      	sub	sp, #28
 8011f9a:	af00      	add	r7, sp, #0
 8011f9c:	60f8      	str	r0, [r7, #12]
 8011f9e:	60b9      	str	r1, [r7, #8]
 8011fa0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fa8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d101      	bne.n	8011fb4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011fb0:	2303      	movs	r3, #3
 8011fb2:	e008      	b.n	8011fc6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011fc4:	2300      	movs	r3, #0
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	371c      	adds	r7, #28
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr

08011fd2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011fd2:	b480      	push	{r7}
 8011fd4:	b085      	sub	sp, #20
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
 8011fda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fe2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d101      	bne.n	8011fee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011fea:	2303      	movs	r3, #3
 8011fec:	e004      	b.n	8011ff8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	683a      	ldr	r2, [r7, #0]
 8011ff2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011ff6:	2300      	movs	r3, #0
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3714      	adds	r7, #20
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr

08012004 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012012:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8012014:	2301      	movs	r3, #1
 8012016:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801201e:	2b00      	cmp	r3, #0
 8012020:	d101      	bne.n	8012026 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012022:	2303      	movs	r3, #3
 8012024:	e01a      	b.n	801205c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801202c:	2b00      	cmp	r3, #0
 801202e:	d114      	bne.n	801205a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	2201      	movs	r2, #1
 8012034:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801204e:	2181      	movs	r1, #129	; 0x81
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f004 fe09 	bl	8016c68 <USBD_LL_Transmit>

    ret = USBD_OK;
 8012056:	2300      	movs	r3, #0
 8012058:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801205a:	7bfb      	ldrb	r3, [r7, #15]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012072:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801207a:	2b00      	cmp	r3, #0
 801207c:	d101      	bne.n	8012082 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801207e:	2303      	movs	r3, #3
 8012080:	e016      	b.n	80120b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	7c1b      	ldrb	r3, [r3, #16]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d109      	bne.n	801209e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012094:	2101      	movs	r1, #1
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f004 fe1e 	bl	8016cd8 <USBD_LL_PrepareReceive>
 801209c:	e007      	b.n	80120ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80120a4:	2340      	movs	r3, #64	; 0x40
 80120a6:	2101      	movs	r1, #1
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f004 fe15 	bl	8016cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80120ae:	2300      	movs	r3, #0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3710      	adds	r7, #16
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	4613      	mov	r3, r2
 80120c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d101      	bne.n	80120d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80120cc:	2303      	movs	r3, #3
 80120ce:	e01f      	b.n	8012110 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2200      	movs	r2, #0
 80120d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	2200      	movs	r2, #0
 80120dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2200      	movs	r2, #0
 80120e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d003      	beq.n	80120f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	68ba      	ldr	r2, [r7, #8]
 80120f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2201      	movs	r2, #1
 80120fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	79fa      	ldrb	r2, [r7, #7]
 8012102:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	f004 fbf1 	bl	80168ec <USBD_LL_Init>
 801210a:	4603      	mov	r3, r0
 801210c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801210e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012110:	4618      	mov	r0, r3
 8012112:	3718      	adds	r7, #24
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012122:	2300      	movs	r3, #0
 8012124:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d101      	bne.n	8012130 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801212c:	2303      	movs	r3, #3
 801212e:	e016      	b.n	801215e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	683a      	ldr	r2, [r7, #0]
 8012134:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012140:	2b00      	cmp	r3, #0
 8012142:	d00b      	beq.n	801215c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801214c:	f107 020e 	add.w	r2, r7, #14
 8012150:	4610      	mov	r0, r2
 8012152:	4798      	blx	r3
 8012154:	4602      	mov	r2, r0
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801215c:	2300      	movs	r3, #0
}
 801215e:	4618      	mov	r0, r3
 8012160:	3710      	adds	r7, #16
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b082      	sub	sp, #8
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f004 fc06 	bl	8016980 <USBD_LL_Start>
 8012174:	4603      	mov	r3, r0
}
 8012176:	4618      	mov	r0, r3
 8012178:	3708      	adds	r7, #8
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801217e:	b480      	push	{r7}
 8012180:	b083      	sub	sp, #12
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012186:	2300      	movs	r3, #0
}
 8012188:	4618      	mov	r0, r3
 801218a:	370c      	adds	r7, #12
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr

08012194 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	460b      	mov	r3, r1
 801219e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80121a0:	2303      	movs	r3, #3
 80121a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d009      	beq.n	80121c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	78fa      	ldrb	r2, [r7, #3]
 80121b8:	4611      	mov	r1, r2
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	4798      	blx	r3
 80121be:	4603      	mov	r3, r0
 80121c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80121c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	460b      	mov	r3, r1
 80121d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d007      	beq.n	80121f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	78fa      	ldrb	r2, [r7, #3]
 80121ec:	4611      	mov	r1, r2
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	4798      	blx	r3
  }

  return USBD_OK;
 80121f2:	2300      	movs	r3, #0
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	4618      	mov	r0, r3
 8012210:	f000 ff90 	bl	8013134 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2201      	movs	r2, #1
 8012218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012222:	461a      	mov	r2, r3
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012230:	f003 031f 	and.w	r3, r3, #31
 8012234:	2b02      	cmp	r3, #2
 8012236:	d01a      	beq.n	801226e <USBD_LL_SetupStage+0x72>
 8012238:	2b02      	cmp	r3, #2
 801223a:	d822      	bhi.n	8012282 <USBD_LL_SetupStage+0x86>
 801223c:	2b00      	cmp	r3, #0
 801223e:	d002      	beq.n	8012246 <USBD_LL_SetupStage+0x4a>
 8012240:	2b01      	cmp	r3, #1
 8012242:	d00a      	beq.n	801225a <USBD_LL_SetupStage+0x5e>
 8012244:	e01d      	b.n	8012282 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801224c:	4619      	mov	r1, r3
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 fa62 	bl	8012718 <USBD_StdDevReq>
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
      break;
 8012258:	e020      	b.n	801229c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012260:	4619      	mov	r1, r3
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 fac6 	bl	80127f4 <USBD_StdItfReq>
 8012268:	4603      	mov	r3, r0
 801226a:	73fb      	strb	r3, [r7, #15]
      break;
 801226c:	e016      	b.n	801229c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012274:	4619      	mov	r1, r3
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 fb05 	bl	8012886 <USBD_StdEPReq>
 801227c:	4603      	mov	r3, r0
 801227e:	73fb      	strb	r3, [r7, #15]
      break;
 8012280:	e00c      	b.n	801229c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801228c:	b2db      	uxtb	r3, r3
 801228e:	4619      	mov	r1, r3
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f004 fc1b 	bl	8016acc <USBD_LL_StallEP>
 8012296:	4603      	mov	r3, r0
 8012298:	73fb      	strb	r3, [r7, #15]
      break;
 801229a:	bf00      	nop
  }

  return ret;
 801229c:	7bfb      	ldrb	r3, [r7, #15]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b086      	sub	sp, #24
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	60f8      	str	r0, [r7, #12]
 80122ae:	460b      	mov	r3, r1
 80122b0:	607a      	str	r2, [r7, #4]
 80122b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80122b4:	7afb      	ldrb	r3, [r7, #11]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d138      	bne.n	801232c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80122c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80122c8:	2b03      	cmp	r3, #3
 80122ca:	d14a      	bne.n	8012362 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	689a      	ldr	r2, [r3, #8]
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d913      	bls.n	8012300 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	689a      	ldr	r2, [r3, #8]
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	1ad2      	subs	r2, r2, r3
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	68da      	ldr	r2, [r3, #12]
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	4293      	cmp	r3, r2
 80122f0:	bf28      	it	cs
 80122f2:	4613      	movcs	r3, r2
 80122f4:	461a      	mov	r2, r3
 80122f6:	6879      	ldr	r1, [r7, #4]
 80122f8:	68f8      	ldr	r0, [r7, #12]
 80122fa:	f001 f80f 	bl	801331c <USBD_CtlContinueRx>
 80122fe:	e030      	b.n	8012362 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012306:	b2db      	uxtb	r3, r3
 8012308:	2b03      	cmp	r3, #3
 801230a:	d10b      	bne.n	8012324 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d005      	beq.n	8012324 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801231e:	691b      	ldr	r3, [r3, #16]
 8012320:	68f8      	ldr	r0, [r7, #12]
 8012322:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f001 f80a 	bl	801333e <USBD_CtlSendStatus>
 801232a:	e01a      	b.n	8012362 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012332:	b2db      	uxtb	r3, r3
 8012334:	2b03      	cmp	r3, #3
 8012336:	d114      	bne.n	8012362 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801233e:	699b      	ldr	r3, [r3, #24]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00e      	beq.n	8012362 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801234a:	699b      	ldr	r3, [r3, #24]
 801234c:	7afa      	ldrb	r2, [r7, #11]
 801234e:	4611      	mov	r1, r2
 8012350:	68f8      	ldr	r0, [r7, #12]
 8012352:	4798      	blx	r3
 8012354:	4603      	mov	r3, r0
 8012356:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012358:	7dfb      	ldrb	r3, [r7, #23]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801235e:	7dfb      	ldrb	r3, [r7, #23]
 8012360:	e000      	b.n	8012364 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012362:	2300      	movs	r3, #0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3718      	adds	r7, #24
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	460b      	mov	r3, r1
 8012376:	607a      	str	r2, [r7, #4]
 8012378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801237a:	7afb      	ldrb	r3, [r7, #11]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d16b      	bne.n	8012458 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	3314      	adds	r3, #20
 8012384:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801238c:	2b02      	cmp	r3, #2
 801238e:	d156      	bne.n	801243e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	689a      	ldr	r2, [r3, #8]
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	429a      	cmp	r2, r3
 801239a:	d914      	bls.n	80123c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	689a      	ldr	r2, [r3, #8]
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	1ad2      	subs	r2, r2, r3
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	689b      	ldr	r3, [r3, #8]
 80123ae:	461a      	mov	r2, r3
 80123b0:	6879      	ldr	r1, [r7, #4]
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	f000 ff84 	bl	80132c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80123b8:	2300      	movs	r3, #0
 80123ba:	2200      	movs	r2, #0
 80123bc:	2100      	movs	r1, #0
 80123be:	68f8      	ldr	r0, [r7, #12]
 80123c0:	f004 fc8a 	bl	8016cd8 <USBD_LL_PrepareReceive>
 80123c4:	e03b      	b.n	801243e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	68da      	ldr	r2, [r3, #12]
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	689b      	ldr	r3, [r3, #8]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d11c      	bne.n	801240c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	685a      	ldr	r2, [r3, #4]
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80123da:	429a      	cmp	r2, r3
 80123dc:	d316      	bcc.n	801240c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	685a      	ldr	r2, [r3, #4]
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d20f      	bcs.n	801240c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80123ec:	2200      	movs	r2, #0
 80123ee:	2100      	movs	r1, #0
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f000 ff65 	bl	80132c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80123fe:	2300      	movs	r3, #0
 8012400:	2200      	movs	r2, #0
 8012402:	2100      	movs	r1, #0
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f004 fc67 	bl	8016cd8 <USBD_LL_PrepareReceive>
 801240a:	e018      	b.n	801243e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012412:	b2db      	uxtb	r3, r3
 8012414:	2b03      	cmp	r3, #3
 8012416:	d10b      	bne.n	8012430 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801241e:	68db      	ldr	r3, [r3, #12]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d005      	beq.n	8012430 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012430:	2180      	movs	r1, #128	; 0x80
 8012432:	68f8      	ldr	r0, [r7, #12]
 8012434:	f004 fb4a 	bl	8016acc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f000 ff93 	bl	8013364 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012444:	2b01      	cmp	r3, #1
 8012446:	d122      	bne.n	801248e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012448:	68f8      	ldr	r0, [r7, #12]
 801244a:	f7ff fe98 	bl	801217e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	2200      	movs	r2, #0
 8012452:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012456:	e01a      	b.n	801248e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801245e:	b2db      	uxtb	r3, r3
 8012460:	2b03      	cmp	r3, #3
 8012462:	d114      	bne.n	801248e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801246a:	695b      	ldr	r3, [r3, #20]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00e      	beq.n	801248e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012476:	695b      	ldr	r3, [r3, #20]
 8012478:	7afa      	ldrb	r2, [r7, #11]
 801247a:	4611      	mov	r1, r2
 801247c:	68f8      	ldr	r0, [r7, #12]
 801247e:	4798      	blx	r3
 8012480:	4603      	mov	r3, r0
 8012482:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012484:	7dfb      	ldrb	r3, [r7, #23]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d001      	beq.n	801248e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801248a:	7dfb      	ldrb	r3, [r7, #23]
 801248c:	e000      	b.n	8012490 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3718      	adds	r7, #24
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2201      	movs	r2, #1
 80124a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2200      	movs	r2, #0
 80124ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d101      	bne.n	80124cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80124c8:	2303      	movs	r3, #3
 80124ca:	e02f      	b.n	801252c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00f      	beq.n	80124f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d009      	beq.n	80124f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	6852      	ldr	r2, [r2, #4]
 80124ee:	b2d2      	uxtb	r2, r2
 80124f0:	4611      	mov	r1, r2
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80124f6:	2340      	movs	r3, #64	; 0x40
 80124f8:	2200      	movs	r2, #0
 80124fa:	2100      	movs	r1, #0
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f004 fa71 	bl	80169e4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2201      	movs	r2, #1
 8012506:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2240      	movs	r2, #64	; 0x40
 801250e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012512:	2340      	movs	r3, #64	; 0x40
 8012514:	2200      	movs	r2, #0
 8012516:	2180      	movs	r1, #128	; 0x80
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f004 fa63 	bl	80169e4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2201      	movs	r2, #1
 8012522:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2240      	movs	r2, #64	; 0x40
 8012528:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	3708      	adds	r7, #8
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	460b      	mov	r3, r1
 801253e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	78fa      	ldrb	r2, [r7, #3]
 8012544:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012546:	2300      	movs	r3, #0
}
 8012548:	4618      	mov	r0, r3
 801254a:	370c      	adds	r7, #12
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr

08012554 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012562:	b2da      	uxtb	r2, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2204      	movs	r2, #4
 801256e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	370c      	adds	r7, #12
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr

08012580 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801258e:	b2db      	uxtb	r3, r3
 8012590:	2b04      	cmp	r3, #4
 8012592:	d106      	bne.n	80125a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801259a:	b2da      	uxtb	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80125a2:	2300      	movs	r3, #0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	370c      	adds	r7, #12
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d101      	bne.n	80125c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80125c2:	2303      	movs	r3, #3
 80125c4:	e012      	b.n	80125ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	2b03      	cmp	r3, #3
 80125d0:	d10b      	bne.n	80125ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125d8:	69db      	ldr	r3, [r3, #28]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d005      	beq.n	80125ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125e4:	69db      	ldr	r3, [r3, #28]
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80125ea:	2300      	movs	r3, #0
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	460b      	mov	r3, r1
 80125fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012606:	2b00      	cmp	r3, #0
 8012608:	d101      	bne.n	801260e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801260a:	2303      	movs	r3, #3
 801260c:	e014      	b.n	8012638 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012614:	b2db      	uxtb	r3, r3
 8012616:	2b03      	cmp	r3, #3
 8012618:	d10d      	bne.n	8012636 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012620:	6a1b      	ldr	r3, [r3, #32]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d007      	beq.n	8012636 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801262c:	6a1b      	ldr	r3, [r3, #32]
 801262e:	78fa      	ldrb	r2, [r7, #3]
 8012630:	4611      	mov	r1, r2
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	4618      	mov	r0, r3
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	460b      	mov	r3, r1
 801264a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012652:	2b00      	cmp	r3, #0
 8012654:	d101      	bne.n	801265a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012656:	2303      	movs	r3, #3
 8012658:	e014      	b.n	8012684 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012660:	b2db      	uxtb	r3, r3
 8012662:	2b03      	cmp	r3, #3
 8012664:	d10d      	bne.n	8012682 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266e:	2b00      	cmp	r3, #0
 8012670:	d007      	beq.n	8012682 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267a:	78fa      	ldrb	r2, [r7, #3]
 801267c:	4611      	mov	r1, r2
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012694:	2300      	movs	r3, #0
}
 8012696:	4618      	mov	r0, r3
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b082      	sub	sp, #8
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2201      	movs	r2, #1
 80126ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d009      	beq.n	80126d0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	6852      	ldr	r2, [r2, #4]
 80126c8:	b2d2      	uxtb	r2, r2
 80126ca:	4611      	mov	r1, r2
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	4798      	blx	r3
  }

  return USBD_OK;
 80126d0:	2300      	movs	r3, #0
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80126da:	b480      	push	{r7}
 80126dc:	b087      	sub	sp, #28
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	3301      	adds	r3, #1
 80126f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80126f8:	8a3b      	ldrh	r3, [r7, #16]
 80126fa:	021b      	lsls	r3, r3, #8
 80126fc:	b21a      	sxth	r2, r3
 80126fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012702:	4313      	orrs	r3, r2
 8012704:	b21b      	sxth	r3, r3
 8012706:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012708:	89fb      	ldrh	r3, [r7, #14]
}
 801270a:	4618      	mov	r0, r3
 801270c:	371c      	adds	r7, #28
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr
	...

08012718 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801272e:	2b40      	cmp	r3, #64	; 0x40
 8012730:	d005      	beq.n	801273e <USBD_StdDevReq+0x26>
 8012732:	2b40      	cmp	r3, #64	; 0x40
 8012734:	d853      	bhi.n	80127de <USBD_StdDevReq+0xc6>
 8012736:	2b00      	cmp	r3, #0
 8012738:	d00b      	beq.n	8012752 <USBD_StdDevReq+0x3a>
 801273a:	2b20      	cmp	r3, #32
 801273c:	d14f      	bne.n	80127de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	6839      	ldr	r1, [r7, #0]
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	4798      	blx	r3
 801274c:	4603      	mov	r3, r0
 801274e:	73fb      	strb	r3, [r7, #15]
      break;
 8012750:	e04a      	b.n	80127e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	785b      	ldrb	r3, [r3, #1]
 8012756:	2b09      	cmp	r3, #9
 8012758:	d83b      	bhi.n	80127d2 <USBD_StdDevReq+0xba>
 801275a:	a201      	add	r2, pc, #4	; (adr r2, 8012760 <USBD_StdDevReq+0x48>)
 801275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012760:	080127b5 	.word	0x080127b5
 8012764:	080127c9 	.word	0x080127c9
 8012768:	080127d3 	.word	0x080127d3
 801276c:	080127bf 	.word	0x080127bf
 8012770:	080127d3 	.word	0x080127d3
 8012774:	08012793 	.word	0x08012793
 8012778:	08012789 	.word	0x08012789
 801277c:	080127d3 	.word	0x080127d3
 8012780:	080127ab 	.word	0x080127ab
 8012784:	0801279d 	.word	0x0801279d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012788:	6839      	ldr	r1, [r7, #0]
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f000 f9de 	bl	8012b4c <USBD_GetDescriptor>
          break;
 8012790:	e024      	b.n	80127dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012792:	6839      	ldr	r1, [r7, #0]
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 fb43 	bl	8012e20 <USBD_SetAddress>
          break;
 801279a:	e01f      	b.n	80127dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801279c:	6839      	ldr	r1, [r7, #0]
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f000 fb82 	bl	8012ea8 <USBD_SetConfig>
 80127a4:	4603      	mov	r3, r0
 80127a6:	73fb      	strb	r3, [r7, #15]
          break;
 80127a8:	e018      	b.n	80127dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80127aa:	6839      	ldr	r1, [r7, #0]
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f000 fc21 	bl	8012ff4 <USBD_GetConfig>
          break;
 80127b2:	e013      	b.n	80127dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 fc52 	bl	8013060 <USBD_GetStatus>
          break;
 80127bc:	e00e      	b.n	80127dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80127be:	6839      	ldr	r1, [r7, #0]
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 fc81 	bl	80130c8 <USBD_SetFeature>
          break;
 80127c6:	e009      	b.n	80127dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80127c8:	6839      	ldr	r1, [r7, #0]
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 fc90 	bl	80130f0 <USBD_ClrFeature>
          break;
 80127d0:	e004      	b.n	80127dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80127d2:	6839      	ldr	r1, [r7, #0]
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f000 fce7 	bl	80131a8 <USBD_CtlError>
          break;
 80127da:	bf00      	nop
      }
      break;
 80127dc:	e004      	b.n	80127e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80127de:	6839      	ldr	r1, [r7, #0]
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f000 fce1 	bl	80131a8 <USBD_CtlError>
      break;
 80127e6:	bf00      	nop
  }

  return ret;
 80127e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop

080127f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80127fe:	2300      	movs	r3, #0
 8012800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801280a:	2b40      	cmp	r3, #64	; 0x40
 801280c:	d005      	beq.n	801281a <USBD_StdItfReq+0x26>
 801280e:	2b40      	cmp	r3, #64	; 0x40
 8012810:	d82f      	bhi.n	8012872 <USBD_StdItfReq+0x7e>
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <USBD_StdItfReq+0x26>
 8012816:	2b20      	cmp	r3, #32
 8012818:	d12b      	bne.n	8012872 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012820:	b2db      	uxtb	r3, r3
 8012822:	3b01      	subs	r3, #1
 8012824:	2b02      	cmp	r3, #2
 8012826:	d81d      	bhi.n	8012864 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	889b      	ldrh	r3, [r3, #4]
 801282c:	b2db      	uxtb	r3, r3
 801282e:	2b01      	cmp	r3, #1
 8012830:	d813      	bhi.n	801285a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012838:	689b      	ldr	r3, [r3, #8]
 801283a:	6839      	ldr	r1, [r7, #0]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	4798      	blx	r3
 8012840:	4603      	mov	r3, r0
 8012842:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	88db      	ldrh	r3, [r3, #6]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d110      	bne.n	801286e <USBD_StdItfReq+0x7a>
 801284c:	7bfb      	ldrb	r3, [r7, #15]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d10d      	bne.n	801286e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 fd73 	bl	801333e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012858:	e009      	b.n	801286e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801285a:	6839      	ldr	r1, [r7, #0]
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f000 fca3 	bl	80131a8 <USBD_CtlError>
          break;
 8012862:	e004      	b.n	801286e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012864:	6839      	ldr	r1, [r7, #0]
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f000 fc9e 	bl	80131a8 <USBD_CtlError>
          break;
 801286c:	e000      	b.n	8012870 <USBD_StdItfReq+0x7c>
          break;
 801286e:	bf00      	nop
      }
      break;
 8012870:	e004      	b.n	801287c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012872:	6839      	ldr	r1, [r7, #0]
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f000 fc97 	bl	80131a8 <USBD_CtlError>
      break;
 801287a:	bf00      	nop
  }

  return ret;
 801287c:	7bfb      	ldrb	r3, [r7, #15]
}
 801287e:	4618      	mov	r0, r3
 8012880:	3710      	adds	r7, #16
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}

08012886 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012886:	b580      	push	{r7, lr}
 8012888:	b084      	sub	sp, #16
 801288a:	af00      	add	r7, sp, #0
 801288c:	6078      	str	r0, [r7, #4]
 801288e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	889b      	ldrh	r3, [r3, #4]
 8012898:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80128a2:	2b40      	cmp	r3, #64	; 0x40
 80128a4:	d007      	beq.n	80128b6 <USBD_StdEPReq+0x30>
 80128a6:	2b40      	cmp	r3, #64	; 0x40
 80128a8:	f200 8145 	bhi.w	8012b36 <USBD_StdEPReq+0x2b0>
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00c      	beq.n	80128ca <USBD_StdEPReq+0x44>
 80128b0:	2b20      	cmp	r3, #32
 80128b2:	f040 8140 	bne.w	8012b36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128bc:	689b      	ldr	r3, [r3, #8]
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	4798      	blx	r3
 80128c4:	4603      	mov	r3, r0
 80128c6:	73fb      	strb	r3, [r7, #15]
      break;
 80128c8:	e13a      	b.n	8012b40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	785b      	ldrb	r3, [r3, #1]
 80128ce:	2b03      	cmp	r3, #3
 80128d0:	d007      	beq.n	80128e2 <USBD_StdEPReq+0x5c>
 80128d2:	2b03      	cmp	r3, #3
 80128d4:	f300 8129 	bgt.w	8012b2a <USBD_StdEPReq+0x2a4>
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d07f      	beq.n	80129dc <USBD_StdEPReq+0x156>
 80128dc:	2b01      	cmp	r3, #1
 80128de:	d03c      	beq.n	801295a <USBD_StdEPReq+0xd4>
 80128e0:	e123      	b.n	8012b2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	2b02      	cmp	r3, #2
 80128ec:	d002      	beq.n	80128f4 <USBD_StdEPReq+0x6e>
 80128ee:	2b03      	cmp	r3, #3
 80128f0:	d016      	beq.n	8012920 <USBD_StdEPReq+0x9a>
 80128f2:	e02c      	b.n	801294e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80128f4:	7bbb      	ldrb	r3, [r7, #14]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00d      	beq.n	8012916 <USBD_StdEPReq+0x90>
 80128fa:	7bbb      	ldrb	r3, [r7, #14]
 80128fc:	2b80      	cmp	r3, #128	; 0x80
 80128fe:	d00a      	beq.n	8012916 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012900:	7bbb      	ldrb	r3, [r7, #14]
 8012902:	4619      	mov	r1, r3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f004 f8e1 	bl	8016acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801290a:	2180      	movs	r1, #128	; 0x80
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f004 f8dd 	bl	8016acc <USBD_LL_StallEP>
 8012912:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012914:	e020      	b.n	8012958 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012916:	6839      	ldr	r1, [r7, #0]
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f000 fc45 	bl	80131a8 <USBD_CtlError>
              break;
 801291e:	e01b      	b.n	8012958 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	885b      	ldrh	r3, [r3, #2]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d10e      	bne.n	8012946 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012928:	7bbb      	ldrb	r3, [r7, #14]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d00b      	beq.n	8012946 <USBD_StdEPReq+0xc0>
 801292e:	7bbb      	ldrb	r3, [r7, #14]
 8012930:	2b80      	cmp	r3, #128	; 0x80
 8012932:	d008      	beq.n	8012946 <USBD_StdEPReq+0xc0>
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	88db      	ldrh	r3, [r3, #6]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d104      	bne.n	8012946 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801293c:	7bbb      	ldrb	r3, [r7, #14]
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f004 f8c3 	bl	8016acc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f000 fcf9 	bl	801333e <USBD_CtlSendStatus>

              break;
 801294c:	e004      	b.n	8012958 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801294e:	6839      	ldr	r1, [r7, #0]
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 fc29 	bl	80131a8 <USBD_CtlError>
              break;
 8012956:	bf00      	nop
          }
          break;
 8012958:	e0ec      	b.n	8012b34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012960:	b2db      	uxtb	r3, r3
 8012962:	2b02      	cmp	r3, #2
 8012964:	d002      	beq.n	801296c <USBD_StdEPReq+0xe6>
 8012966:	2b03      	cmp	r3, #3
 8012968:	d016      	beq.n	8012998 <USBD_StdEPReq+0x112>
 801296a:	e030      	b.n	80129ce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801296c:	7bbb      	ldrb	r3, [r7, #14]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d00d      	beq.n	801298e <USBD_StdEPReq+0x108>
 8012972:	7bbb      	ldrb	r3, [r7, #14]
 8012974:	2b80      	cmp	r3, #128	; 0x80
 8012976:	d00a      	beq.n	801298e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012978:	7bbb      	ldrb	r3, [r7, #14]
 801297a:	4619      	mov	r1, r3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f004 f8a5 	bl	8016acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012982:	2180      	movs	r1, #128	; 0x80
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f004 f8a1 	bl	8016acc <USBD_LL_StallEP>
 801298a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801298c:	e025      	b.n	80129da <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801298e:	6839      	ldr	r1, [r7, #0]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fc09 	bl	80131a8 <USBD_CtlError>
              break;
 8012996:	e020      	b.n	80129da <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	885b      	ldrh	r3, [r3, #2]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d11b      	bne.n	80129d8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80129a0:	7bbb      	ldrb	r3, [r7, #14]
 80129a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d004      	beq.n	80129b4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80129aa:	7bbb      	ldrb	r3, [r7, #14]
 80129ac:	4619      	mov	r1, r3
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f004 f8c2 	bl	8016b38 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 fcc2 	bl	801333e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129c0:	689b      	ldr	r3, [r3, #8]
 80129c2:	6839      	ldr	r1, [r7, #0]
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	4798      	blx	r3
 80129c8:	4603      	mov	r3, r0
 80129ca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80129cc:	e004      	b.n	80129d8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80129ce:	6839      	ldr	r1, [r7, #0]
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 fbe9 	bl	80131a8 <USBD_CtlError>
              break;
 80129d6:	e000      	b.n	80129da <USBD_StdEPReq+0x154>
              break;
 80129d8:	bf00      	nop
          }
          break;
 80129da:	e0ab      	b.n	8012b34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	2b02      	cmp	r3, #2
 80129e6:	d002      	beq.n	80129ee <USBD_StdEPReq+0x168>
 80129e8:	2b03      	cmp	r3, #3
 80129ea:	d032      	beq.n	8012a52 <USBD_StdEPReq+0x1cc>
 80129ec:	e097      	b.n	8012b1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80129ee:	7bbb      	ldrb	r3, [r7, #14]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d007      	beq.n	8012a04 <USBD_StdEPReq+0x17e>
 80129f4:	7bbb      	ldrb	r3, [r7, #14]
 80129f6:	2b80      	cmp	r3, #128	; 0x80
 80129f8:	d004      	beq.n	8012a04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80129fa:	6839      	ldr	r1, [r7, #0]
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 fbd3 	bl	80131a8 <USBD_CtlError>
                break;
 8012a02:	e091      	b.n	8012b28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	da0b      	bge.n	8012a24 <USBD_StdEPReq+0x19e>
 8012a0c:	7bbb      	ldrb	r3, [r7, #14]
 8012a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a12:	4613      	mov	r3, r2
 8012a14:	009b      	lsls	r3, r3, #2
 8012a16:	4413      	add	r3, r2
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	3310      	adds	r3, #16
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	4413      	add	r3, r2
 8012a20:	3304      	adds	r3, #4
 8012a22:	e00b      	b.n	8012a3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a24:	7bbb      	ldrb	r3, [r7, #14]
 8012a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	009b      	lsls	r3, r3, #2
 8012a2e:	4413      	add	r3, r2
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	4413      	add	r3, r2
 8012a3a:	3304      	adds	r3, #4
 8012a3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	2200      	movs	r2, #0
 8012a42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	2202      	movs	r2, #2
 8012a48:	4619      	mov	r1, r3
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f000 fc1d 	bl	801328a <USBD_CtlSendData>
              break;
 8012a50:	e06a      	b.n	8012b28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	da11      	bge.n	8012a7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012a5a:	7bbb      	ldrb	r3, [r7, #14]
 8012a5c:	f003 020f 	and.w	r2, r3, #15
 8012a60:	6879      	ldr	r1, [r7, #4]
 8012a62:	4613      	mov	r3, r2
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	440b      	add	r3, r1
 8012a6c:	3324      	adds	r3, #36	; 0x24
 8012a6e:	881b      	ldrh	r3, [r3, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d117      	bne.n	8012aa4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012a74:	6839      	ldr	r1, [r7, #0]
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f000 fb96 	bl	80131a8 <USBD_CtlError>
                  break;
 8012a7c:	e054      	b.n	8012b28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012a7e:	7bbb      	ldrb	r3, [r7, #14]
 8012a80:	f003 020f 	and.w	r2, r3, #15
 8012a84:	6879      	ldr	r1, [r7, #4]
 8012a86:	4613      	mov	r3, r2
 8012a88:	009b      	lsls	r3, r3, #2
 8012a8a:	4413      	add	r3, r2
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	440b      	add	r3, r1
 8012a90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d104      	bne.n	8012aa4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012a9a:	6839      	ldr	r1, [r7, #0]
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f000 fb83 	bl	80131a8 <USBD_CtlError>
                  break;
 8012aa2:	e041      	b.n	8012b28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	da0b      	bge.n	8012ac4 <USBD_StdEPReq+0x23e>
 8012aac:	7bbb      	ldrb	r3, [r7, #14]
 8012aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	3310      	adds	r3, #16
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	4413      	add	r3, r2
 8012ac0:	3304      	adds	r3, #4
 8012ac2:	e00b      	b.n	8012adc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012ac4:	7bbb      	ldrb	r3, [r7, #14]
 8012ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012aca:	4613      	mov	r3, r2
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	4413      	add	r3, r2
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	4413      	add	r3, r2
 8012ada:	3304      	adds	r3, #4
 8012adc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012ade:	7bbb      	ldrb	r3, [r7, #14]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d002      	beq.n	8012aea <USBD_StdEPReq+0x264>
 8012ae4:	7bbb      	ldrb	r3, [r7, #14]
 8012ae6:	2b80      	cmp	r3, #128	; 0x80
 8012ae8:	d103      	bne.n	8012af2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	2200      	movs	r2, #0
 8012aee:	601a      	str	r2, [r3, #0]
 8012af0:	e00e      	b.n	8012b10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012af2:	7bbb      	ldrb	r3, [r7, #14]
 8012af4:	4619      	mov	r1, r3
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f004 f854 	bl	8016ba4 <USBD_LL_IsStallEP>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d003      	beq.n	8012b0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	2201      	movs	r2, #1
 8012b06:	601a      	str	r2, [r3, #0]
 8012b08:	e002      	b.n	8012b10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	2202      	movs	r2, #2
 8012b14:	4619      	mov	r1, r3
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f000 fbb7 	bl	801328a <USBD_CtlSendData>
              break;
 8012b1c:	e004      	b.n	8012b28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012b1e:	6839      	ldr	r1, [r7, #0]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f000 fb41 	bl	80131a8 <USBD_CtlError>
              break;
 8012b26:	bf00      	nop
          }
          break;
 8012b28:	e004      	b.n	8012b34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012b2a:	6839      	ldr	r1, [r7, #0]
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f000 fb3b 	bl	80131a8 <USBD_CtlError>
          break;
 8012b32:	bf00      	nop
      }
      break;
 8012b34:	e004      	b.n	8012b40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012b36:	6839      	ldr	r1, [r7, #0]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 fb35 	bl	80131a8 <USBD_CtlError>
      break;
 8012b3e:	bf00      	nop
  }

  return ret;
 8012b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3710      	adds	r7, #16
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
	...

08012b4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b084      	sub	sp, #16
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
 8012b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012b56:	2300      	movs	r3, #0
 8012b58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	885b      	ldrh	r3, [r3, #2]
 8012b66:	0a1b      	lsrs	r3, r3, #8
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	2b06      	cmp	r3, #6
 8012b6e:	f200 8128 	bhi.w	8012dc2 <USBD_GetDescriptor+0x276>
 8012b72:	a201      	add	r2, pc, #4	; (adr r2, 8012b78 <USBD_GetDescriptor+0x2c>)
 8012b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b78:	08012b95 	.word	0x08012b95
 8012b7c:	08012bad 	.word	0x08012bad
 8012b80:	08012bed 	.word	0x08012bed
 8012b84:	08012dc3 	.word	0x08012dc3
 8012b88:	08012dc3 	.word	0x08012dc3
 8012b8c:	08012d63 	.word	0x08012d63
 8012b90:	08012d8f 	.word	0x08012d8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	7c12      	ldrb	r2, [r2, #16]
 8012ba0:	f107 0108 	add.w	r1, r7, #8
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	4798      	blx	r3
 8012ba8:	60f8      	str	r0, [r7, #12]
      break;
 8012baa:	e112      	b.n	8012dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	7c1b      	ldrb	r3, [r3, #16]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d10d      	bne.n	8012bd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bbc:	f107 0208 	add.w	r2, r7, #8
 8012bc0:	4610      	mov	r0, r2
 8012bc2:	4798      	blx	r3
 8012bc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	2202      	movs	r2, #2
 8012bcc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012bce:	e100      	b.n	8012dd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd8:	f107 0208 	add.w	r2, r7, #8
 8012bdc:	4610      	mov	r0, r2
 8012bde:	4798      	blx	r3
 8012be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	3301      	adds	r3, #1
 8012be6:	2202      	movs	r2, #2
 8012be8:	701a      	strb	r2, [r3, #0]
      break;
 8012bea:	e0f2      	b.n	8012dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	885b      	ldrh	r3, [r3, #2]
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b05      	cmp	r3, #5
 8012bf4:	f200 80ac 	bhi.w	8012d50 <USBD_GetDescriptor+0x204>
 8012bf8:	a201      	add	r2, pc, #4	; (adr r2, 8012c00 <USBD_GetDescriptor+0xb4>)
 8012bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bfe:	bf00      	nop
 8012c00:	08012c19 	.word	0x08012c19
 8012c04:	08012c4d 	.word	0x08012c4d
 8012c08:	08012c81 	.word	0x08012c81
 8012c0c:	08012cb5 	.word	0x08012cb5
 8012c10:	08012ce9 	.word	0x08012ce9
 8012c14:	08012d1d 	.word	0x08012d1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00b      	beq.n	8012c3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	7c12      	ldrb	r2, [r2, #16]
 8012c30:	f107 0108 	add.w	r1, r7, #8
 8012c34:	4610      	mov	r0, r2
 8012c36:	4798      	blx	r3
 8012c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c3a:	e091      	b.n	8012d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c3c:	6839      	ldr	r1, [r7, #0]
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 fab2 	bl	80131a8 <USBD_CtlError>
            err++;
 8012c44:	7afb      	ldrb	r3, [r7, #11]
 8012c46:	3301      	adds	r3, #1
 8012c48:	72fb      	strb	r3, [r7, #11]
          break;
 8012c4a:	e089      	b.n	8012d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c52:	689b      	ldr	r3, [r3, #8]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00b      	beq.n	8012c70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c5e:	689b      	ldr	r3, [r3, #8]
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	7c12      	ldrb	r2, [r2, #16]
 8012c64:	f107 0108 	add.w	r1, r7, #8
 8012c68:	4610      	mov	r0, r2
 8012c6a:	4798      	blx	r3
 8012c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c6e:	e077      	b.n	8012d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c70:	6839      	ldr	r1, [r7, #0]
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 fa98 	bl	80131a8 <USBD_CtlError>
            err++;
 8012c78:	7afb      	ldrb	r3, [r7, #11]
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c7e:	e06f      	b.n	8012d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00b      	beq.n	8012ca4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	7c12      	ldrb	r2, [r2, #16]
 8012c98:	f107 0108 	add.w	r1, r7, #8
 8012c9c:	4610      	mov	r0, r2
 8012c9e:	4798      	blx	r3
 8012ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ca2:	e05d      	b.n	8012d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012ca4:	6839      	ldr	r1, [r7, #0]
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f000 fa7e 	bl	80131a8 <USBD_CtlError>
            err++;
 8012cac:	7afb      	ldrb	r3, [r7, #11]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8012cb2:	e055      	b.n	8012d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cba:	691b      	ldr	r3, [r3, #16]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d00b      	beq.n	8012cd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cc6:	691b      	ldr	r3, [r3, #16]
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	7c12      	ldrb	r2, [r2, #16]
 8012ccc:	f107 0108 	add.w	r1, r7, #8
 8012cd0:	4610      	mov	r0, r2
 8012cd2:	4798      	blx	r3
 8012cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cd6:	e043      	b.n	8012d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012cd8:	6839      	ldr	r1, [r7, #0]
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 fa64 	bl	80131a8 <USBD_CtlError>
            err++;
 8012ce0:	7afb      	ldrb	r3, [r7, #11]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ce6:	e03b      	b.n	8012d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cee:	695b      	ldr	r3, [r3, #20]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d00b      	beq.n	8012d0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cfa:	695b      	ldr	r3, [r3, #20]
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	7c12      	ldrb	r2, [r2, #16]
 8012d00:	f107 0108 	add.w	r1, r7, #8
 8012d04:	4610      	mov	r0, r2
 8012d06:	4798      	blx	r3
 8012d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d0a:	e029      	b.n	8012d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012d0c:	6839      	ldr	r1, [r7, #0]
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 fa4a 	bl	80131a8 <USBD_CtlError>
            err++;
 8012d14:	7afb      	ldrb	r3, [r7, #11]
 8012d16:	3301      	adds	r3, #1
 8012d18:	72fb      	strb	r3, [r7, #11]
          break;
 8012d1a:	e021      	b.n	8012d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d22:	699b      	ldr	r3, [r3, #24]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d00b      	beq.n	8012d40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d2e:	699b      	ldr	r3, [r3, #24]
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	7c12      	ldrb	r2, [r2, #16]
 8012d34:	f107 0108 	add.w	r1, r7, #8
 8012d38:	4610      	mov	r0, r2
 8012d3a:	4798      	blx	r3
 8012d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d3e:	e00f      	b.n	8012d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012d40:	6839      	ldr	r1, [r7, #0]
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f000 fa30 	bl	80131a8 <USBD_CtlError>
            err++;
 8012d48:	7afb      	ldrb	r3, [r7, #11]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8012d4e:	e007      	b.n	8012d60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012d50:	6839      	ldr	r1, [r7, #0]
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f000 fa28 	bl	80131a8 <USBD_CtlError>
          err++;
 8012d58:	7afb      	ldrb	r3, [r7, #11]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012d5e:	bf00      	nop
      }
      break;
 8012d60:	e037      	b.n	8012dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	7c1b      	ldrb	r3, [r3, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d109      	bne.n	8012d7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d72:	f107 0208 	add.w	r2, r7, #8
 8012d76:	4610      	mov	r0, r2
 8012d78:	4798      	blx	r3
 8012d7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d7c:	e029      	b.n	8012dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012d7e:	6839      	ldr	r1, [r7, #0]
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 fa11 	bl	80131a8 <USBD_CtlError>
        err++;
 8012d86:	7afb      	ldrb	r3, [r7, #11]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8012d8c:	e021      	b.n	8012dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	7c1b      	ldrb	r3, [r3, #16]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d10d      	bne.n	8012db2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d9e:	f107 0208 	add.w	r2, r7, #8
 8012da2:	4610      	mov	r0, r2
 8012da4:	4798      	blx	r3
 8012da6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	3301      	adds	r3, #1
 8012dac:	2207      	movs	r2, #7
 8012dae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012db0:	e00f      	b.n	8012dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012db2:	6839      	ldr	r1, [r7, #0]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 f9f7 	bl	80131a8 <USBD_CtlError>
        err++;
 8012dba:	7afb      	ldrb	r3, [r7, #11]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8012dc0:	e007      	b.n	8012dd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012dc2:	6839      	ldr	r1, [r7, #0]
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f000 f9ef 	bl	80131a8 <USBD_CtlError>
      err++;
 8012dca:	7afb      	ldrb	r3, [r7, #11]
 8012dcc:	3301      	adds	r3, #1
 8012dce:	72fb      	strb	r3, [r7, #11]
      break;
 8012dd0:	bf00      	nop
  }

  if (err != 0U)
 8012dd2:	7afb      	ldrb	r3, [r7, #11]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d11e      	bne.n	8012e16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	88db      	ldrh	r3, [r3, #6]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d016      	beq.n	8012e0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012de0:	893b      	ldrh	r3, [r7, #8]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00e      	beq.n	8012e04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	88da      	ldrh	r2, [r3, #6]
 8012dea:	893b      	ldrh	r3, [r7, #8]
 8012dec:	4293      	cmp	r3, r2
 8012dee:	bf28      	it	cs
 8012df0:	4613      	movcs	r3, r2
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012df6:	893b      	ldrh	r3, [r7, #8]
 8012df8:	461a      	mov	r2, r3
 8012dfa:	68f9      	ldr	r1, [r7, #12]
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f000 fa44 	bl	801328a <USBD_CtlSendData>
 8012e02:	e009      	b.n	8012e18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012e04:	6839      	ldr	r1, [r7, #0]
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f000 f9ce 	bl	80131a8 <USBD_CtlError>
 8012e0c:	e004      	b.n	8012e18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f000 fa95 	bl	801333e <USBD_CtlSendStatus>
 8012e14:	e000      	b.n	8012e18 <USBD_GetDescriptor+0x2cc>
    return;
 8012e16:	bf00      	nop
  }
}
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop

08012e20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	889b      	ldrh	r3, [r3, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d131      	bne.n	8012e96 <USBD_SetAddress+0x76>
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	88db      	ldrh	r3, [r3, #6]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d12d      	bne.n	8012e96 <USBD_SetAddress+0x76>
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	885b      	ldrh	r3, [r3, #2]
 8012e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8012e40:	d829      	bhi.n	8012e96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	885b      	ldrh	r3, [r3, #2]
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	2b03      	cmp	r3, #3
 8012e58:	d104      	bne.n	8012e64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 f9a3 	bl	80131a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e62:	e01d      	b.n	8012ea0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	7bfa      	ldrb	r2, [r7, #15]
 8012e68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012e6c:	7bfb      	ldrb	r3, [r7, #15]
 8012e6e:	4619      	mov	r1, r3
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f003 fec3 	bl	8016bfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 fa61 	bl	801333e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012e7c:	7bfb      	ldrb	r3, [r7, #15]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d004      	beq.n	8012e8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2202      	movs	r2, #2
 8012e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e8a:	e009      	b.n	8012ea0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2201      	movs	r2, #1
 8012e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e94:	e004      	b.n	8012ea0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012e96:	6839      	ldr	r1, [r7, #0]
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f000 f985 	bl	80131a8 <USBD_CtlError>
  }
}
 8012e9e:	bf00      	nop
 8012ea0:	bf00      	nop
 8012ea2:	3710      	adds	r7, #16
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	885b      	ldrh	r3, [r3, #2]
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	4b4c      	ldr	r3, [pc, #304]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012ec0:	4b4b      	ldr	r3, [pc, #300]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	2b01      	cmp	r3, #1
 8012ec6:	d905      	bls.n	8012ed4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012ec8:	6839      	ldr	r1, [r7, #0]
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f000 f96c 	bl	80131a8 <USBD_CtlError>
    return USBD_FAIL;
 8012ed0:	2303      	movs	r3, #3
 8012ed2:	e088      	b.n	8012fe6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	2b02      	cmp	r3, #2
 8012ede:	d002      	beq.n	8012ee6 <USBD_SetConfig+0x3e>
 8012ee0:	2b03      	cmp	r3, #3
 8012ee2:	d025      	beq.n	8012f30 <USBD_SetConfig+0x88>
 8012ee4:	e071      	b.n	8012fca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012ee6:	4b42      	ldr	r3, [pc, #264]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d01c      	beq.n	8012f28 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012eee:	4b40      	ldr	r3, [pc, #256]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ef8:	4b3d      	ldr	r3, [pc, #244]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	4619      	mov	r1, r3
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f7ff f948 	bl	8012194 <USBD_SetClassConfig>
 8012f04:	4603      	mov	r3, r0
 8012f06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012f08:	7bfb      	ldrb	r3, [r7, #15]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d004      	beq.n	8012f18 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012f0e:	6839      	ldr	r1, [r7, #0]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 f949 	bl	80131a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f16:	e065      	b.n	8012fe4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f000 fa10 	bl	801333e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2203      	movs	r2, #3
 8012f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012f26:	e05d      	b.n	8012fe4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f000 fa08 	bl	801333e <USBD_CtlSendStatus>
      break;
 8012f2e:	e059      	b.n	8012fe4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012f30:	4b2f      	ldr	r3, [pc, #188]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d112      	bne.n	8012f5e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2202      	movs	r2, #2
 8012f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012f40:	4b2b      	ldr	r3, [pc, #172]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	461a      	mov	r2, r3
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f4a:	4b29      	ldr	r3, [pc, #164]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	4619      	mov	r1, r3
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f7ff f93b 	bl	80121cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 f9f1 	bl	801333e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f5c:	e042      	b.n	8012fe4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012f5e:	4b24      	ldr	r3, [pc, #144]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	461a      	mov	r2, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d02a      	beq.n	8012fc2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	b2db      	uxtb	r3, r3
 8012f72:	4619      	mov	r1, r3
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff f929 	bl	80121cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012f7a:	4b1d      	ldr	r3, [pc, #116]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	461a      	mov	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012f84:	4b1a      	ldr	r3, [pc, #104]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7ff f902 	bl	8012194 <USBD_SetClassConfig>
 8012f90:	4603      	mov	r3, r0
 8012f92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012f94:	7bfb      	ldrb	r3, [r7, #15]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00f      	beq.n	8012fba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012f9a:	6839      	ldr	r1, [r7, #0]
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 f903 	bl	80131a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7ff f90e 	bl	80121cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2202      	movs	r2, #2
 8012fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012fb8:	e014      	b.n	8012fe4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f000 f9bf 	bl	801333e <USBD_CtlSendStatus>
      break;
 8012fc0:	e010      	b.n	8012fe4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f9bb 	bl	801333e <USBD_CtlSendStatus>
      break;
 8012fc8:	e00c      	b.n	8012fe4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012fca:	6839      	ldr	r1, [r7, #0]
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 f8eb 	bl	80131a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012fd2:	4b07      	ldr	r3, [pc, #28]	; (8012ff0 <USBD_SetConfig+0x148>)
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f7ff f8f7 	bl	80121cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012fde:	2303      	movs	r3, #3
 8012fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8012fe2:	bf00      	nop
  }

  return ret;
 8012fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	2000132c 	.word	0x2000132c

08012ff4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	88db      	ldrh	r3, [r3, #6]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d004      	beq.n	8013010 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013006:	6839      	ldr	r1, [r7, #0]
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f000 f8cd 	bl	80131a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801300e:	e023      	b.n	8013058 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013016:	b2db      	uxtb	r3, r3
 8013018:	2b02      	cmp	r3, #2
 801301a:	dc02      	bgt.n	8013022 <USBD_GetConfig+0x2e>
 801301c:	2b00      	cmp	r3, #0
 801301e:	dc03      	bgt.n	8013028 <USBD_GetConfig+0x34>
 8013020:	e015      	b.n	801304e <USBD_GetConfig+0x5a>
 8013022:	2b03      	cmp	r3, #3
 8013024:	d00b      	beq.n	801303e <USBD_GetConfig+0x4a>
 8013026:	e012      	b.n	801304e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2200      	movs	r2, #0
 801302c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	3308      	adds	r3, #8
 8013032:	2201      	movs	r2, #1
 8013034:	4619      	mov	r1, r3
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f000 f927 	bl	801328a <USBD_CtlSendData>
        break;
 801303c:	e00c      	b.n	8013058 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	3304      	adds	r3, #4
 8013042:	2201      	movs	r2, #1
 8013044:	4619      	mov	r1, r3
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f000 f91f 	bl	801328a <USBD_CtlSendData>
        break;
 801304c:	e004      	b.n	8013058 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801304e:	6839      	ldr	r1, [r7, #0]
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f000 f8a9 	bl	80131a8 <USBD_CtlError>
        break;
 8013056:	bf00      	nop
}
 8013058:	bf00      	nop
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}

08013060 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013070:	b2db      	uxtb	r3, r3
 8013072:	3b01      	subs	r3, #1
 8013074:	2b02      	cmp	r3, #2
 8013076:	d81e      	bhi.n	80130b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	88db      	ldrh	r3, [r3, #6]
 801307c:	2b02      	cmp	r3, #2
 801307e:	d004      	beq.n	801308a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013080:	6839      	ldr	r1, [r7, #0]
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 f890 	bl	80131a8 <USBD_CtlError>
        break;
 8013088:	e01a      	b.n	80130c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2201      	movs	r2, #1
 801308e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013096:	2b00      	cmp	r3, #0
 8013098:	d005      	beq.n	80130a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	f043 0202 	orr.w	r2, r3, #2
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	330c      	adds	r3, #12
 80130aa:	2202      	movs	r2, #2
 80130ac:	4619      	mov	r1, r3
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 f8eb 	bl	801328a <USBD_CtlSendData>
      break;
 80130b4:	e004      	b.n	80130c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80130b6:	6839      	ldr	r1, [r7, #0]
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 f875 	bl	80131a8 <USBD_CtlError>
      break;
 80130be:	bf00      	nop
  }
}
 80130c0:	bf00      	nop
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	885b      	ldrh	r3, [r3, #2]
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	d106      	bne.n	80130e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2201      	movs	r2, #1
 80130de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 f92b 	bl	801333e <USBD_CtlSendStatus>
  }
}
 80130e8:	bf00      	nop
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b082      	sub	sp, #8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013100:	b2db      	uxtb	r3, r3
 8013102:	3b01      	subs	r3, #1
 8013104:	2b02      	cmp	r3, #2
 8013106:	d80b      	bhi.n	8013120 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	885b      	ldrh	r3, [r3, #2]
 801310c:	2b01      	cmp	r3, #1
 801310e:	d10c      	bne.n	801312a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f000 f910 	bl	801333e <USBD_CtlSendStatus>
      }
      break;
 801311e:	e004      	b.n	801312a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013120:	6839      	ldr	r1, [r7, #0]
 8013122:	6878      	ldr	r0, [r7, #4]
 8013124:	f000 f840 	bl	80131a8 <USBD_CtlError>
      break;
 8013128:	e000      	b.n	801312c <USBD_ClrFeature+0x3c>
      break;
 801312a:	bf00      	nop
  }
}
 801312c:	bf00      	nop
 801312e:	3708      	adds	r7, #8
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	781a      	ldrb	r2, [r3, #0]
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	3301      	adds	r3, #1
 801314e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	781a      	ldrb	r2, [r3, #0]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	3301      	adds	r3, #1
 801315c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801315e:	68f8      	ldr	r0, [r7, #12]
 8013160:	f7ff fabb 	bl	80126da <SWAPBYTE>
 8013164:	4603      	mov	r3, r0
 8013166:	461a      	mov	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	3301      	adds	r3, #1
 8013170:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	3301      	adds	r3, #1
 8013176:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013178:	68f8      	ldr	r0, [r7, #12]
 801317a:	f7ff faae 	bl	80126da <SWAPBYTE>
 801317e:	4603      	mov	r3, r0
 8013180:	461a      	mov	r2, r3
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	3301      	adds	r3, #1
 801318a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	3301      	adds	r3, #1
 8013190:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013192:	68f8      	ldr	r0, [r7, #12]
 8013194:	f7ff faa1 	bl	80126da <SWAPBYTE>
 8013198:	4603      	mov	r3, r0
 801319a:	461a      	mov	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	80da      	strh	r2, [r3, #6]
}
 80131a0:	bf00      	nop
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80131b2:	2180      	movs	r1, #128	; 0x80
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f003 fc89 	bl	8016acc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80131ba:	2100      	movs	r1, #0
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f003 fc85 	bl	8016acc <USBD_LL_StallEP>
}
 80131c2:	bf00      	nop
 80131c4:	3708      	adds	r7, #8
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}

080131ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80131ca:	b580      	push	{r7, lr}
 80131cc:	b086      	sub	sp, #24
 80131ce:	af00      	add	r7, sp, #0
 80131d0:	60f8      	str	r0, [r7, #12]
 80131d2:	60b9      	str	r1, [r7, #8]
 80131d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80131d6:	2300      	movs	r3, #0
 80131d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d036      	beq.n	801324e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80131e4:	6938      	ldr	r0, [r7, #16]
 80131e6:	f000 f836 	bl	8013256 <USBD_GetLen>
 80131ea:	4603      	mov	r3, r0
 80131ec:	3301      	adds	r3, #1
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	005b      	lsls	r3, r3, #1
 80131f2:	b29a      	uxth	r2, r3
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	4413      	add	r3, r2
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	7812      	ldrb	r2, [r2, #0]
 8013202:	701a      	strb	r2, [r3, #0]
  idx++;
 8013204:	7dfb      	ldrb	r3, [r7, #23]
 8013206:	3301      	adds	r3, #1
 8013208:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801320a:	7dfb      	ldrb	r3, [r7, #23]
 801320c:	68ba      	ldr	r2, [r7, #8]
 801320e:	4413      	add	r3, r2
 8013210:	2203      	movs	r2, #3
 8013212:	701a      	strb	r2, [r3, #0]
  idx++;
 8013214:	7dfb      	ldrb	r3, [r7, #23]
 8013216:	3301      	adds	r3, #1
 8013218:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801321a:	e013      	b.n	8013244 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801321c:	7dfb      	ldrb	r3, [r7, #23]
 801321e:	68ba      	ldr	r2, [r7, #8]
 8013220:	4413      	add	r3, r2
 8013222:	693a      	ldr	r2, [r7, #16]
 8013224:	7812      	ldrb	r2, [r2, #0]
 8013226:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	3301      	adds	r3, #1
 801322c:	613b      	str	r3, [r7, #16]
    idx++;
 801322e:	7dfb      	ldrb	r3, [r7, #23]
 8013230:	3301      	adds	r3, #1
 8013232:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013234:	7dfb      	ldrb	r3, [r7, #23]
 8013236:	68ba      	ldr	r2, [r7, #8]
 8013238:	4413      	add	r3, r2
 801323a:	2200      	movs	r2, #0
 801323c:	701a      	strb	r2, [r3, #0]
    idx++;
 801323e:	7dfb      	ldrb	r3, [r7, #23]
 8013240:	3301      	adds	r3, #1
 8013242:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d1e7      	bne.n	801321c <USBD_GetString+0x52>
 801324c:	e000      	b.n	8013250 <USBD_GetString+0x86>
    return;
 801324e:	bf00      	nop
  }
}
 8013250:	3718      	adds	r7, #24
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}

08013256 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013256:	b480      	push	{r7}
 8013258:	b085      	sub	sp, #20
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801325e:	2300      	movs	r3, #0
 8013260:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013266:	e005      	b.n	8013274 <USBD_GetLen+0x1e>
  {
    len++;
 8013268:	7bfb      	ldrb	r3, [r7, #15]
 801326a:	3301      	adds	r3, #1
 801326c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	3301      	adds	r3, #1
 8013272:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d1f5      	bne.n	8013268 <USBD_GetLen+0x12>
  }

  return len;
 801327c:	7bfb      	ldrb	r3, [r7, #15]
}
 801327e:	4618      	mov	r0, r3
 8013280:	3714      	adds	r7, #20
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr

0801328a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801328a:	b580      	push	{r7, lr}
 801328c:	b084      	sub	sp, #16
 801328e:	af00      	add	r7, sp, #0
 8013290:	60f8      	str	r0, [r7, #12]
 8013292:	60b9      	str	r1, [r7, #8]
 8013294:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2202      	movs	r2, #2
 801329a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	68ba      	ldr	r2, [r7, #8]
 80132ae:	2100      	movs	r1, #0
 80132b0:	68f8      	ldr	r0, [r7, #12]
 80132b2:	f003 fcd9 	bl	8016c68 <USBD_LL_Transmit>

  return USBD_OK;
 80132b6:	2300      	movs	r3, #0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	68ba      	ldr	r2, [r7, #8]
 80132d0:	2100      	movs	r1, #0
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f003 fcc8 	bl	8016c68 <USBD_LL_Transmit>

  return USBD_OK;
 80132d8:	2300      	movs	r3, #0
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b084      	sub	sp, #16
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	60f8      	str	r0, [r7, #12]
 80132ea:	60b9      	str	r1, [r7, #8]
 80132ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2203      	movs	r2, #3
 80132f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	68ba      	ldr	r2, [r7, #8]
 801330a:	2100      	movs	r1, #0
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	f003 fce3 	bl	8016cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013312:	2300      	movs	r3, #0
}
 8013314:	4618      	mov	r0, r3
 8013316:	3710      	adds	r7, #16
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	68ba      	ldr	r2, [r7, #8]
 801332c:	2100      	movs	r1, #0
 801332e:	68f8      	ldr	r0, [r7, #12]
 8013330:	f003 fcd2 	bl	8016cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013334:	2300      	movs	r3, #0
}
 8013336:	4618      	mov	r0, r3
 8013338:	3710      	adds	r7, #16
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}

0801333e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801333e:	b580      	push	{r7, lr}
 8013340:	b082      	sub	sp, #8
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2204      	movs	r2, #4
 801334a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801334e:	2300      	movs	r3, #0
 8013350:	2200      	movs	r2, #0
 8013352:	2100      	movs	r1, #0
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f003 fc87 	bl	8016c68 <USBD_LL_Transmit>

  return USBD_OK;
 801335a:	2300      	movs	r3, #0
}
 801335c:	4618      	mov	r0, r3
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}

08013364 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2205      	movs	r2, #5
 8013370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013374:	2300      	movs	r3, #0
 8013376:	2200      	movs	r2, #0
 8013378:	2100      	movs	r1, #0
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f003 fcac 	bl	8016cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013380:	2300      	movs	r3, #0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	4603      	mov	r3, r0
 8013394:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013396:	79fb      	ldrb	r3, [r7, #7]
 8013398:	4a08      	ldr	r2, [pc, #32]	; (80133bc <disk_status+0x30>)
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	4413      	add	r3, r2
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	79fa      	ldrb	r2, [r7, #7]
 80133a4:	4905      	ldr	r1, [pc, #20]	; (80133bc <disk_status+0x30>)
 80133a6:	440a      	add	r2, r1
 80133a8:	7a12      	ldrb	r2, [r2, #8]
 80133aa:	4610      	mov	r0, r2
 80133ac:	4798      	blx	r3
 80133ae:	4603      	mov	r3, r0
 80133b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80133b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3710      	adds	r7, #16
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	20001358 	.word	0x20001358

080133c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	4603      	mov	r3, r0
 80133c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80133ca:	2300      	movs	r3, #0
 80133cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80133ce:	79fb      	ldrb	r3, [r7, #7]
 80133d0:	4a0d      	ldr	r2, [pc, #52]	; (8013408 <disk_initialize+0x48>)
 80133d2:	5cd3      	ldrb	r3, [r2, r3]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d111      	bne.n	80133fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80133d8:	79fb      	ldrb	r3, [r7, #7]
 80133da:	4a0b      	ldr	r2, [pc, #44]	; (8013408 <disk_initialize+0x48>)
 80133dc:	2101      	movs	r1, #1
 80133de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80133e0:	79fb      	ldrb	r3, [r7, #7]
 80133e2:	4a09      	ldr	r2, [pc, #36]	; (8013408 <disk_initialize+0x48>)
 80133e4:	009b      	lsls	r3, r3, #2
 80133e6:	4413      	add	r3, r2
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	79fa      	ldrb	r2, [r7, #7]
 80133ee:	4906      	ldr	r1, [pc, #24]	; (8013408 <disk_initialize+0x48>)
 80133f0:	440a      	add	r2, r1
 80133f2:	7a12      	ldrb	r2, [r2, #8]
 80133f4:	4610      	mov	r0, r2
 80133f6:	4798      	blx	r3
 80133f8:	4603      	mov	r3, r0
 80133fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80133fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3710      	adds	r7, #16
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	20001358 	.word	0x20001358

0801340c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801340c:	b590      	push	{r4, r7, lr}
 801340e:	b087      	sub	sp, #28
 8013410:	af00      	add	r7, sp, #0
 8013412:	60b9      	str	r1, [r7, #8]
 8013414:	607a      	str	r2, [r7, #4]
 8013416:	603b      	str	r3, [r7, #0]
 8013418:	4603      	mov	r3, r0
 801341a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801341c:	7bfb      	ldrb	r3, [r7, #15]
 801341e:	4a0a      	ldr	r2, [pc, #40]	; (8013448 <disk_read+0x3c>)
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	4413      	add	r3, r2
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	689c      	ldr	r4, [r3, #8]
 8013428:	7bfb      	ldrb	r3, [r7, #15]
 801342a:	4a07      	ldr	r2, [pc, #28]	; (8013448 <disk_read+0x3c>)
 801342c:	4413      	add	r3, r2
 801342e:	7a18      	ldrb	r0, [r3, #8]
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	68b9      	ldr	r1, [r7, #8]
 8013436:	47a0      	blx	r4
 8013438:	4603      	mov	r3, r0
 801343a:	75fb      	strb	r3, [r7, #23]
  return res;
 801343c:	7dfb      	ldrb	r3, [r7, #23]
}
 801343e:	4618      	mov	r0, r3
 8013440:	371c      	adds	r7, #28
 8013442:	46bd      	mov	sp, r7
 8013444:	bd90      	pop	{r4, r7, pc}
 8013446:	bf00      	nop
 8013448:	20001358 	.word	0x20001358

0801344c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801344c:	b590      	push	{r4, r7, lr}
 801344e:	b087      	sub	sp, #28
 8013450:	af00      	add	r7, sp, #0
 8013452:	60b9      	str	r1, [r7, #8]
 8013454:	607a      	str	r2, [r7, #4]
 8013456:	603b      	str	r3, [r7, #0]
 8013458:	4603      	mov	r3, r0
 801345a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801345c:	7bfb      	ldrb	r3, [r7, #15]
 801345e:	4a0a      	ldr	r2, [pc, #40]	; (8013488 <disk_write+0x3c>)
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	4413      	add	r3, r2
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	68dc      	ldr	r4, [r3, #12]
 8013468:	7bfb      	ldrb	r3, [r7, #15]
 801346a:	4a07      	ldr	r2, [pc, #28]	; (8013488 <disk_write+0x3c>)
 801346c:	4413      	add	r3, r2
 801346e:	7a18      	ldrb	r0, [r3, #8]
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	687a      	ldr	r2, [r7, #4]
 8013474:	68b9      	ldr	r1, [r7, #8]
 8013476:	47a0      	blx	r4
 8013478:	4603      	mov	r3, r0
 801347a:	75fb      	strb	r3, [r7, #23]
  return res;
 801347c:	7dfb      	ldrb	r3, [r7, #23]
}
 801347e:	4618      	mov	r0, r3
 8013480:	371c      	adds	r7, #28
 8013482:	46bd      	mov	sp, r7
 8013484:	bd90      	pop	{r4, r7, pc}
 8013486:	bf00      	nop
 8013488:	20001358 	.word	0x20001358

0801348c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	4603      	mov	r3, r0
 8013494:	603a      	str	r2, [r7, #0]
 8013496:	71fb      	strb	r3, [r7, #7]
 8013498:	460b      	mov	r3, r1
 801349a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801349c:	79fb      	ldrb	r3, [r7, #7]
 801349e:	4a09      	ldr	r2, [pc, #36]	; (80134c4 <disk_ioctl+0x38>)
 80134a0:	009b      	lsls	r3, r3, #2
 80134a2:	4413      	add	r3, r2
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	691b      	ldr	r3, [r3, #16]
 80134a8:	79fa      	ldrb	r2, [r7, #7]
 80134aa:	4906      	ldr	r1, [pc, #24]	; (80134c4 <disk_ioctl+0x38>)
 80134ac:	440a      	add	r2, r1
 80134ae:	7a10      	ldrb	r0, [r2, #8]
 80134b0:	79b9      	ldrb	r1, [r7, #6]
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	4798      	blx	r3
 80134b6:	4603      	mov	r3, r0
 80134b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80134ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	20001358 	.word	0x20001358

080134c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80134c8:	b480      	push	{r7}
 80134ca:	b085      	sub	sp, #20
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	3301      	adds	r3, #1
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80134d8:	89fb      	ldrh	r3, [r7, #14]
 80134da:	021b      	lsls	r3, r3, #8
 80134dc:	b21a      	sxth	r2, r3
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	781b      	ldrb	r3, [r3, #0]
 80134e2:	b21b      	sxth	r3, r3
 80134e4:	4313      	orrs	r3, r2
 80134e6:	b21b      	sxth	r3, r3
 80134e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80134ea:	89fb      	ldrh	r3, [r7, #14]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3714      	adds	r7, #20
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr

080134f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	3303      	adds	r3, #3
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	021b      	lsls	r3, r3, #8
 801350c:	687a      	ldr	r2, [r7, #4]
 801350e:	3202      	adds	r2, #2
 8013510:	7812      	ldrb	r2, [r2, #0]
 8013512:	4313      	orrs	r3, r2
 8013514:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	021b      	lsls	r3, r3, #8
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	3201      	adds	r2, #1
 801351e:	7812      	ldrb	r2, [r2, #0]
 8013520:	4313      	orrs	r3, r2
 8013522:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	021b      	lsls	r3, r3, #8
 8013528:	687a      	ldr	r2, [r7, #4]
 801352a:	7812      	ldrb	r2, [r2, #0]
 801352c:	4313      	orrs	r3, r2
 801352e:	60fb      	str	r3, [r7, #12]
	return rv;
 8013530:	68fb      	ldr	r3, [r7, #12]
}
 8013532:	4618      	mov	r0, r3
 8013534:	3714      	adds	r7, #20
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr

0801353e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801353e:	b480      	push	{r7}
 8013540:	b083      	sub	sp, #12
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
 8013546:	460b      	mov	r3, r1
 8013548:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	1c5a      	adds	r2, r3, #1
 801354e:	607a      	str	r2, [r7, #4]
 8013550:	887a      	ldrh	r2, [r7, #2]
 8013552:	b2d2      	uxtb	r2, r2
 8013554:	701a      	strb	r2, [r3, #0]
 8013556:	887b      	ldrh	r3, [r7, #2]
 8013558:	0a1b      	lsrs	r3, r3, #8
 801355a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	1c5a      	adds	r2, r3, #1
 8013560:	607a      	str	r2, [r7, #4]
 8013562:	887a      	ldrh	r2, [r7, #2]
 8013564:	b2d2      	uxtb	r2, r2
 8013566:	701a      	strb	r2, [r3, #0]
}
 8013568:	bf00      	nop
 801356a:	370c      	adds	r7, #12
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	1c5a      	adds	r2, r3, #1
 8013582:	607a      	str	r2, [r7, #4]
 8013584:	683a      	ldr	r2, [r7, #0]
 8013586:	b2d2      	uxtb	r2, r2
 8013588:	701a      	strb	r2, [r3, #0]
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	0a1b      	lsrs	r3, r3, #8
 801358e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	1c5a      	adds	r2, r3, #1
 8013594:	607a      	str	r2, [r7, #4]
 8013596:	683a      	ldr	r2, [r7, #0]
 8013598:	b2d2      	uxtb	r2, r2
 801359a:	701a      	strb	r2, [r3, #0]
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	0a1b      	lsrs	r3, r3, #8
 80135a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	1c5a      	adds	r2, r3, #1
 80135a6:	607a      	str	r2, [r7, #4]
 80135a8:	683a      	ldr	r2, [r7, #0]
 80135aa:	b2d2      	uxtb	r2, r2
 80135ac:	701a      	strb	r2, [r3, #0]
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	0a1b      	lsrs	r3, r3, #8
 80135b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	1c5a      	adds	r2, r3, #1
 80135b8:	607a      	str	r2, [r7, #4]
 80135ba:	683a      	ldr	r2, [r7, #0]
 80135bc:	b2d2      	uxtb	r2, r2
 80135be:	701a      	strb	r2, [r3, #0]
}
 80135c0:	bf00      	nop
 80135c2:	370c      	adds	r7, #12
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80135cc:	b480      	push	{r7}
 80135ce:	b087      	sub	sp, #28
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d00d      	beq.n	8013602 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	1c53      	adds	r3, r2, #1
 80135ea:	613b      	str	r3, [r7, #16]
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	1c59      	adds	r1, r3, #1
 80135f0:	6179      	str	r1, [r7, #20]
 80135f2:	7812      	ldrb	r2, [r2, #0]
 80135f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	3b01      	subs	r3, #1
 80135fa:	607b      	str	r3, [r7, #4]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d1f1      	bne.n	80135e6 <mem_cpy+0x1a>
	}
}
 8013602:	bf00      	nop
 8013604:	371c      	adds	r7, #28
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr

0801360e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801360e:	b480      	push	{r7}
 8013610:	b087      	sub	sp, #28
 8013612:	af00      	add	r7, sp, #0
 8013614:	60f8      	str	r0, [r7, #12]
 8013616:	60b9      	str	r1, [r7, #8]
 8013618:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	1c5a      	adds	r2, r3, #1
 8013622:	617a      	str	r2, [r7, #20]
 8013624:	68ba      	ldr	r2, [r7, #8]
 8013626:	b2d2      	uxtb	r2, r2
 8013628:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	3b01      	subs	r3, #1
 801362e:	607b      	str	r3, [r7, #4]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1f3      	bne.n	801361e <mem_set+0x10>
}
 8013636:	bf00      	nop
 8013638:	bf00      	nop
 801363a:	371c      	adds	r7, #28
 801363c:	46bd      	mov	sp, r7
 801363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013642:	4770      	bx	lr

08013644 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013644:	b480      	push	{r7}
 8013646:	b089      	sub	sp, #36	; 0x24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	61fb      	str	r3, [r7, #28]
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013658:	2300      	movs	r3, #0
 801365a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	1c5a      	adds	r2, r3, #1
 8013660:	61fa      	str	r2, [r7, #28]
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	4619      	mov	r1, r3
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	1c5a      	adds	r2, r3, #1
 801366a:	61ba      	str	r2, [r7, #24]
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	1acb      	subs	r3, r1, r3
 8013670:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	3b01      	subs	r3, #1
 8013676:	607b      	str	r3, [r7, #4]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d002      	beq.n	8013684 <mem_cmp+0x40>
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d0eb      	beq.n	801365c <mem_cmp+0x18>

	return r;
 8013684:	697b      	ldr	r3, [r7, #20]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3724      	adds	r7, #36	; 0x24
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr

08013692 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013692:	b480      	push	{r7}
 8013694:	b083      	sub	sp, #12
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
 801369a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801369c:	e002      	b.n	80136a4 <chk_chr+0x12>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	3301      	adds	r3, #1
 80136a2:	607b      	str	r3, [r7, #4]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d005      	beq.n	80136b8 <chk_chr+0x26>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	461a      	mov	r2, r3
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	4293      	cmp	r3, r2
 80136b6:	d1f2      	bne.n	801369e <chk_chr+0xc>
	return *str;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	781b      	ldrb	r3, [r3, #0]
}
 80136bc:	4618      	mov	r0, r3
 80136be:	370c      	adds	r7, #12
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80136d2:	2300      	movs	r3, #0
 80136d4:	60bb      	str	r3, [r7, #8]
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	60fb      	str	r3, [r7, #12]
 80136da:	e029      	b.n	8013730 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80136dc:	4a27      	ldr	r2, [pc, #156]	; (801377c <chk_lock+0xb4>)
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	011b      	lsls	r3, r3, #4
 80136e2:	4413      	add	r3, r2
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d01d      	beq.n	8013726 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80136ea:	4a24      	ldr	r2, [pc, #144]	; (801377c <chk_lock+0xb4>)
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	011b      	lsls	r3, r3, #4
 80136f0:	4413      	add	r3, r2
 80136f2:	681a      	ldr	r2, [r3, #0]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d116      	bne.n	801372a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80136fc:	4a1f      	ldr	r2, [pc, #124]	; (801377c <chk_lock+0xb4>)
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	011b      	lsls	r3, r3, #4
 8013702:	4413      	add	r3, r2
 8013704:	3304      	adds	r3, #4
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801370c:	429a      	cmp	r2, r3
 801370e:	d10c      	bne.n	801372a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013710:	4a1a      	ldr	r2, [pc, #104]	; (801377c <chk_lock+0xb4>)
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	011b      	lsls	r3, r3, #4
 8013716:	4413      	add	r3, r2
 8013718:	3308      	adds	r3, #8
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013720:	429a      	cmp	r2, r3
 8013722:	d102      	bne.n	801372a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013724:	e007      	b.n	8013736 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013726:	2301      	movs	r3, #1
 8013728:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	3301      	adds	r3, #1
 801372e:	60fb      	str	r3, [r7, #12]
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2b01      	cmp	r3, #1
 8013734:	d9d2      	bls.n	80136dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2b02      	cmp	r3, #2
 801373a:	d109      	bne.n	8013750 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d102      	bne.n	8013748 <chk_lock+0x80>
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b02      	cmp	r3, #2
 8013746:	d101      	bne.n	801374c <chk_lock+0x84>
 8013748:	2300      	movs	r3, #0
 801374a:	e010      	b.n	801376e <chk_lock+0xa6>
 801374c:	2312      	movs	r3, #18
 801374e:	e00e      	b.n	801376e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d108      	bne.n	8013768 <chk_lock+0xa0>
 8013756:	4a09      	ldr	r2, [pc, #36]	; (801377c <chk_lock+0xb4>)
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	011b      	lsls	r3, r3, #4
 801375c:	4413      	add	r3, r2
 801375e:	330c      	adds	r3, #12
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013766:	d101      	bne.n	801376c <chk_lock+0xa4>
 8013768:	2310      	movs	r3, #16
 801376a:	e000      	b.n	801376e <chk_lock+0xa6>
 801376c:	2300      	movs	r3, #0
}
 801376e:	4618      	mov	r0, r3
 8013770:	3714      	adds	r7, #20
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr
 801377a:	bf00      	nop
 801377c:	20001338 	.word	0x20001338

08013780 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013786:	2300      	movs	r3, #0
 8013788:	607b      	str	r3, [r7, #4]
 801378a:	e002      	b.n	8013792 <enq_lock+0x12>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	3301      	adds	r3, #1
 8013790:	607b      	str	r3, [r7, #4]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2b01      	cmp	r3, #1
 8013796:	d806      	bhi.n	80137a6 <enq_lock+0x26>
 8013798:	4a09      	ldr	r2, [pc, #36]	; (80137c0 <enq_lock+0x40>)
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	011b      	lsls	r3, r3, #4
 801379e:	4413      	add	r3, r2
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d1f2      	bne.n	801378c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2b02      	cmp	r3, #2
 80137aa:	bf14      	ite	ne
 80137ac:	2301      	movne	r3, #1
 80137ae:	2300      	moveq	r3, #0
 80137b0:	b2db      	uxtb	r3, r3
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	370c      	adds	r7, #12
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	20001338 	.word	0x20001338

080137c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b085      	sub	sp, #20
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80137ce:	2300      	movs	r3, #0
 80137d0:	60fb      	str	r3, [r7, #12]
 80137d2:	e01f      	b.n	8013814 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80137d4:	4a41      	ldr	r2, [pc, #260]	; (80138dc <inc_lock+0x118>)
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	011b      	lsls	r3, r3, #4
 80137da:	4413      	add	r3, r2
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d113      	bne.n	801380e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80137e6:	4a3d      	ldr	r2, [pc, #244]	; (80138dc <inc_lock+0x118>)
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	011b      	lsls	r3, r3, #4
 80137ec:	4413      	add	r3, r2
 80137ee:	3304      	adds	r3, #4
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d109      	bne.n	801380e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80137fa:	4a38      	ldr	r2, [pc, #224]	; (80138dc <inc_lock+0x118>)
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	011b      	lsls	r3, r3, #4
 8013800:	4413      	add	r3, r2
 8013802:	3308      	adds	r3, #8
 8013804:	681a      	ldr	r2, [r3, #0]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801380a:	429a      	cmp	r2, r3
 801380c:	d006      	beq.n	801381c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	3301      	adds	r3, #1
 8013812:	60fb      	str	r3, [r7, #12]
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2b01      	cmp	r3, #1
 8013818:	d9dc      	bls.n	80137d4 <inc_lock+0x10>
 801381a:	e000      	b.n	801381e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801381c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2b02      	cmp	r3, #2
 8013822:	d132      	bne.n	801388a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013824:	2300      	movs	r3, #0
 8013826:	60fb      	str	r3, [r7, #12]
 8013828:	e002      	b.n	8013830 <inc_lock+0x6c>
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	3301      	adds	r3, #1
 801382e:	60fb      	str	r3, [r7, #12]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2b01      	cmp	r3, #1
 8013834:	d806      	bhi.n	8013844 <inc_lock+0x80>
 8013836:	4a29      	ldr	r2, [pc, #164]	; (80138dc <inc_lock+0x118>)
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	011b      	lsls	r3, r3, #4
 801383c:	4413      	add	r3, r2
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d1f2      	bne.n	801382a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	2b02      	cmp	r3, #2
 8013848:	d101      	bne.n	801384e <inc_lock+0x8a>
 801384a:	2300      	movs	r3, #0
 801384c:	e040      	b.n	80138d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	4922      	ldr	r1, [pc, #136]	; (80138dc <inc_lock+0x118>)
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	011b      	lsls	r3, r3, #4
 8013858:	440b      	add	r3, r1
 801385a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	689a      	ldr	r2, [r3, #8]
 8013860:	491e      	ldr	r1, [pc, #120]	; (80138dc <inc_lock+0x118>)
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	011b      	lsls	r3, r3, #4
 8013866:	440b      	add	r3, r1
 8013868:	3304      	adds	r3, #4
 801386a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	695a      	ldr	r2, [r3, #20]
 8013870:	491a      	ldr	r1, [pc, #104]	; (80138dc <inc_lock+0x118>)
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	011b      	lsls	r3, r3, #4
 8013876:	440b      	add	r3, r1
 8013878:	3308      	adds	r3, #8
 801387a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801387c:	4a17      	ldr	r2, [pc, #92]	; (80138dc <inc_lock+0x118>)
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	011b      	lsls	r3, r3, #4
 8013882:	4413      	add	r3, r2
 8013884:	330c      	adds	r3, #12
 8013886:	2200      	movs	r2, #0
 8013888:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d009      	beq.n	80138a4 <inc_lock+0xe0>
 8013890:	4a12      	ldr	r2, [pc, #72]	; (80138dc <inc_lock+0x118>)
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	011b      	lsls	r3, r3, #4
 8013896:	4413      	add	r3, r2
 8013898:	330c      	adds	r3, #12
 801389a:	881b      	ldrh	r3, [r3, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d001      	beq.n	80138a4 <inc_lock+0xe0>
 80138a0:	2300      	movs	r3, #0
 80138a2:	e015      	b.n	80138d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d108      	bne.n	80138bc <inc_lock+0xf8>
 80138aa:	4a0c      	ldr	r2, [pc, #48]	; (80138dc <inc_lock+0x118>)
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	011b      	lsls	r3, r3, #4
 80138b0:	4413      	add	r3, r2
 80138b2:	330c      	adds	r3, #12
 80138b4:	881b      	ldrh	r3, [r3, #0]
 80138b6:	3301      	adds	r3, #1
 80138b8:	b29a      	uxth	r2, r3
 80138ba:	e001      	b.n	80138c0 <inc_lock+0xfc>
 80138bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138c0:	4906      	ldr	r1, [pc, #24]	; (80138dc <inc_lock+0x118>)
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	011b      	lsls	r3, r3, #4
 80138c6:	440b      	add	r3, r1
 80138c8:	330c      	adds	r3, #12
 80138ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	3301      	adds	r3, #1
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3714      	adds	r7, #20
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr
 80138dc:	20001338 	.word	0x20001338

080138e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80138e0:	b480      	push	{r7}
 80138e2:	b085      	sub	sp, #20
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	3b01      	subs	r3, #1
 80138ec:	607b      	str	r3, [r7, #4]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d825      	bhi.n	8013940 <dec_lock+0x60>
		n = Files[i].ctr;
 80138f4:	4a17      	ldr	r2, [pc, #92]	; (8013954 <dec_lock+0x74>)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	011b      	lsls	r3, r3, #4
 80138fa:	4413      	add	r3, r2
 80138fc:	330c      	adds	r3, #12
 80138fe:	881b      	ldrh	r3, [r3, #0]
 8013900:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013902:	89fb      	ldrh	r3, [r7, #14]
 8013904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013908:	d101      	bne.n	801390e <dec_lock+0x2e>
 801390a:	2300      	movs	r3, #0
 801390c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801390e:	89fb      	ldrh	r3, [r7, #14]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d002      	beq.n	801391a <dec_lock+0x3a>
 8013914:	89fb      	ldrh	r3, [r7, #14]
 8013916:	3b01      	subs	r3, #1
 8013918:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801391a:	4a0e      	ldr	r2, [pc, #56]	; (8013954 <dec_lock+0x74>)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	011b      	lsls	r3, r3, #4
 8013920:	4413      	add	r3, r2
 8013922:	330c      	adds	r3, #12
 8013924:	89fa      	ldrh	r2, [r7, #14]
 8013926:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013928:	89fb      	ldrh	r3, [r7, #14]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d105      	bne.n	801393a <dec_lock+0x5a>
 801392e:	4a09      	ldr	r2, [pc, #36]	; (8013954 <dec_lock+0x74>)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	011b      	lsls	r3, r3, #4
 8013934:	4413      	add	r3, r2
 8013936:	2200      	movs	r2, #0
 8013938:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801393a:	2300      	movs	r3, #0
 801393c:	737b      	strb	r3, [r7, #13]
 801393e:	e001      	b.n	8013944 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013940:	2302      	movs	r3, #2
 8013942:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013944:	7b7b      	ldrb	r3, [r7, #13]
}
 8013946:	4618      	mov	r0, r3
 8013948:	3714      	adds	r7, #20
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	20001338 	.word	0x20001338

08013958 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013958:	b480      	push	{r7}
 801395a:	b085      	sub	sp, #20
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013960:	2300      	movs	r3, #0
 8013962:	60fb      	str	r3, [r7, #12]
 8013964:	e010      	b.n	8013988 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013966:	4a0d      	ldr	r2, [pc, #52]	; (801399c <clear_lock+0x44>)
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	011b      	lsls	r3, r3, #4
 801396c:	4413      	add	r3, r2
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	429a      	cmp	r2, r3
 8013974:	d105      	bne.n	8013982 <clear_lock+0x2a>
 8013976:	4a09      	ldr	r2, [pc, #36]	; (801399c <clear_lock+0x44>)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	011b      	lsls	r3, r3, #4
 801397c:	4413      	add	r3, r2
 801397e:	2200      	movs	r2, #0
 8013980:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	3301      	adds	r3, #1
 8013986:	60fb      	str	r3, [r7, #12]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	2b01      	cmp	r3, #1
 801398c:	d9eb      	bls.n	8013966 <clear_lock+0xe>
	}
}
 801398e:	bf00      	nop
 8013990:	bf00      	nop
 8013992:	3714      	adds	r7, #20
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr
 801399c:	20001338 	.word	0x20001338

080139a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b086      	sub	sp, #24
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80139a8:	2300      	movs	r3, #0
 80139aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	78db      	ldrb	r3, [r3, #3]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d034      	beq.n	8013a1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	7858      	ldrb	r0, [r3, #1]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139c4:	2301      	movs	r3, #1
 80139c6:	697a      	ldr	r2, [r7, #20]
 80139c8:	f7ff fd40 	bl	801344c <disk_write>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d002      	beq.n	80139d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80139d2:	2301      	movs	r3, #1
 80139d4:	73fb      	strb	r3, [r7, #15]
 80139d6:	e022      	b.n	8013a1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2200      	movs	r2, #0
 80139dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6a1b      	ldr	r3, [r3, #32]
 80139e2:	697a      	ldr	r2, [r7, #20]
 80139e4:	1ad2      	subs	r2, r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	699b      	ldr	r3, [r3, #24]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d217      	bcs.n	8013a1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	789b      	ldrb	r3, [r3, #2]
 80139f2:	613b      	str	r3, [r7, #16]
 80139f4:	e010      	b.n	8013a18 <sync_window+0x78>
					wsect += fs->fsize;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	699b      	ldr	r3, [r3, #24]
 80139fa:	697a      	ldr	r2, [r7, #20]
 80139fc:	4413      	add	r3, r2
 80139fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	7858      	ldrb	r0, [r3, #1]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	697a      	ldr	r2, [r7, #20]
 8013a0e:	f7ff fd1d 	bl	801344c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	3b01      	subs	r3, #1
 8013a16:	613b      	str	r3, [r7, #16]
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d8eb      	bhi.n	80139f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	3718      	adds	r7, #24
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}

08013a28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013a32:	2300      	movs	r3, #0
 8013a34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a3a:	683a      	ldr	r2, [r7, #0]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d01b      	beq.n	8013a78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7ff ffad 	bl	80139a0 <sync_window>
 8013a46:	4603      	mov	r3, r0
 8013a48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013a4a:	7bfb      	ldrb	r3, [r7, #15]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d113      	bne.n	8013a78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	7858      	ldrb	r0, [r3, #1]
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	683a      	ldr	r2, [r7, #0]
 8013a5e:	f7ff fcd5 	bl	801340c <disk_read>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d004      	beq.n	8013a72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	683a      	ldr	r2, [r7, #0]
 8013a76:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8013a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
	...

08013a84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b084      	sub	sp, #16
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff ff87 	bl	80139a0 <sync_window>
 8013a92:	4603      	mov	r3, r0
 8013a94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013a96:	7bfb      	ldrb	r3, [r7, #15]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d158      	bne.n	8013b4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	2b03      	cmp	r3, #3
 8013aa2:	d148      	bne.n	8013b36 <sync_fs+0xb2>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	791b      	ldrb	r3, [r3, #4]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d144      	bne.n	8013b36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	3330      	adds	r3, #48	; 0x30
 8013ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ff fda9 	bl	801360e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	3330      	adds	r3, #48	; 0x30
 8013ac0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013ac4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f7ff fd38 	bl	801353e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	3330      	adds	r3, #48	; 0x30
 8013ad2:	4921      	ldr	r1, [pc, #132]	; (8013b58 <sync_fs+0xd4>)
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7ff fd4d 	bl	8013574 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	3330      	adds	r3, #48	; 0x30
 8013ade:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013ae2:	491e      	ldr	r1, [pc, #120]	; (8013b5c <sync_fs+0xd8>)
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7ff fd45 	bl	8013574 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	3330      	adds	r3, #48	; 0x30
 8013aee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	691b      	ldr	r3, [r3, #16]
 8013af6:	4619      	mov	r1, r3
 8013af8:	4610      	mov	r0, r2
 8013afa:	f7ff fd3b 	bl	8013574 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	3330      	adds	r3, #48	; 0x30
 8013b02:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	4610      	mov	r0, r2
 8013b0e:	f7ff fd31 	bl	8013574 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	69db      	ldr	r3, [r3, #28]
 8013b16:	1c5a      	adds	r2, r3, #1
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	7858      	ldrb	r0, [r3, #1]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	f7ff fc8e 	bl	801344c <disk_write>
			fs->fsi_flag = 0;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2200      	movs	r2, #0
 8013b34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	785b      	ldrb	r3, [r3, #1]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	2100      	movs	r1, #0
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7ff fca4 	bl	801348c <disk_ioctl>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d001      	beq.n	8013b4e <sync_fs+0xca>
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3710      	adds	r7, #16
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	41615252 	.word	0x41615252
 8013b5c:	61417272 	.word	0x61417272

08013b60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	3b02      	subs	r3, #2
 8013b6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	695b      	ldr	r3, [r3, #20]
 8013b74:	3b02      	subs	r3, #2
 8013b76:	683a      	ldr	r2, [r7, #0]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d301      	bcc.n	8013b80 <clust2sect+0x20>
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	e008      	b.n	8013b92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	895b      	ldrh	r3, [r3, #10]
 8013b84:	461a      	mov	r2, r3
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	fb03 f202 	mul.w	r2, r3, r2
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b90:	4413      	add	r3, r2
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	370c      	adds	r7, #12
 8013b96:	46bd      	mov	sp, r7
 8013b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9c:	4770      	bx	lr

08013b9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013b9e:	b580      	push	{r7, lr}
 8013ba0:	b086      	sub	sp, #24
 8013ba2:	af00      	add	r7, sp, #0
 8013ba4:	6078      	str	r0, [r7, #4]
 8013ba6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d904      	bls.n	8013bbe <get_fat+0x20>
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	695b      	ldr	r3, [r3, #20]
 8013bb8:	683a      	ldr	r2, [r7, #0]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d302      	bcc.n	8013bc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	617b      	str	r3, [r7, #20]
 8013bc2:	e08f      	b.n	8013ce4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	2b03      	cmp	r3, #3
 8013bd0:	d062      	beq.n	8013c98 <get_fat+0xfa>
 8013bd2:	2b03      	cmp	r3, #3
 8013bd4:	dc7c      	bgt.n	8013cd0 <get_fat+0x132>
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d002      	beq.n	8013be0 <get_fat+0x42>
 8013bda:	2b02      	cmp	r3, #2
 8013bdc:	d042      	beq.n	8013c64 <get_fat+0xc6>
 8013bde:	e077      	b.n	8013cd0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	60fb      	str	r3, [r7, #12]
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	085b      	lsrs	r3, r3, #1
 8013be8:	68fa      	ldr	r2, [r7, #12]
 8013bea:	4413      	add	r3, r2
 8013bec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	6a1a      	ldr	r2, [r3, #32]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	0a5b      	lsrs	r3, r3, #9
 8013bf6:	4413      	add	r3, r2
 8013bf8:	4619      	mov	r1, r3
 8013bfa:	6938      	ldr	r0, [r7, #16]
 8013bfc:	f7ff ff14 	bl	8013a28 <move_window>
 8013c00:	4603      	mov	r3, r0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d167      	bne.n	8013cd6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	1c5a      	adds	r2, r3, #1
 8013c0a:	60fa      	str	r2, [r7, #12]
 8013c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c10:	693a      	ldr	r2, [r7, #16]
 8013c12:	4413      	add	r3, r2
 8013c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	6a1a      	ldr	r2, [r3, #32]
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	0a5b      	lsrs	r3, r3, #9
 8013c22:	4413      	add	r3, r2
 8013c24:	4619      	mov	r1, r3
 8013c26:	6938      	ldr	r0, [r7, #16]
 8013c28:	f7ff fefe 	bl	8013a28 <move_window>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d153      	bne.n	8013cda <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c38:	693a      	ldr	r2, [r7, #16]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c40:	021b      	lsls	r3, r3, #8
 8013c42:	461a      	mov	r2, r3
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	4313      	orrs	r3, r2
 8013c48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	f003 0301 	and.w	r3, r3, #1
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d002      	beq.n	8013c5a <get_fat+0xbc>
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	091b      	lsrs	r3, r3, #4
 8013c58:	e002      	b.n	8013c60 <get_fat+0xc2>
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013c60:	617b      	str	r3, [r7, #20]
			break;
 8013c62:	e03f      	b.n	8013ce4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	6a1a      	ldr	r2, [r3, #32]
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	0a1b      	lsrs	r3, r3, #8
 8013c6c:	4413      	add	r3, r2
 8013c6e:	4619      	mov	r1, r3
 8013c70:	6938      	ldr	r0, [r7, #16]
 8013c72:	f7ff fed9 	bl	8013a28 <move_window>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d130      	bne.n	8013cde <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	005b      	lsls	r3, r3, #1
 8013c86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013c8a:	4413      	add	r3, r2
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7ff fc1b 	bl	80134c8 <ld_word>
 8013c92:	4603      	mov	r3, r0
 8013c94:	617b      	str	r3, [r7, #20]
			break;
 8013c96:	e025      	b.n	8013ce4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	6a1a      	ldr	r2, [r3, #32]
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	09db      	lsrs	r3, r3, #7
 8013ca0:	4413      	add	r3, r2
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	6938      	ldr	r0, [r7, #16]
 8013ca6:	f7ff febf 	bl	8013a28 <move_window>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d118      	bne.n	8013ce2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013cb0:	693b      	ldr	r3, [r7, #16]
 8013cb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013cbe:	4413      	add	r3, r2
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7ff fc19 	bl	80134f8 <ld_dword>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013ccc:	617b      	str	r3, [r7, #20]
			break;
 8013cce:	e009      	b.n	8013ce4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	617b      	str	r3, [r7, #20]
 8013cd4:	e006      	b.n	8013ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013cd6:	bf00      	nop
 8013cd8:	e004      	b.n	8013ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013cda:	bf00      	nop
 8013cdc:	e002      	b.n	8013ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013cde:	bf00      	nop
 8013ce0:	e000      	b.n	8013ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013ce2:	bf00      	nop
		}
	}

	return val;
 8013ce4:	697b      	ldr	r3, [r7, #20]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3718      	adds	r7, #24
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013cee:	b590      	push	{r4, r7, lr}
 8013cf0:	b089      	sub	sp, #36	; 0x24
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	60f8      	str	r0, [r7, #12]
 8013cf6:	60b9      	str	r1, [r7, #8]
 8013cf8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013cfa:	2302      	movs	r3, #2
 8013cfc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	f240 80d2 	bls.w	8013eaa <put_fat+0x1bc>
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	695b      	ldr	r3, [r3, #20]
 8013d0a:	68ba      	ldr	r2, [r7, #8]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	f080 80cc 	bcs.w	8013eaa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	2b03      	cmp	r3, #3
 8013d18:	f000 8096 	beq.w	8013e48 <put_fat+0x15a>
 8013d1c:	2b03      	cmp	r3, #3
 8013d1e:	f300 80cd 	bgt.w	8013ebc <put_fat+0x1ce>
 8013d22:	2b01      	cmp	r3, #1
 8013d24:	d002      	beq.n	8013d2c <put_fat+0x3e>
 8013d26:	2b02      	cmp	r3, #2
 8013d28:	d06e      	beq.n	8013e08 <put_fat+0x11a>
 8013d2a:	e0c7      	b.n	8013ebc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	61bb      	str	r3, [r7, #24]
 8013d30:	69bb      	ldr	r3, [r7, #24]
 8013d32:	085b      	lsrs	r3, r3, #1
 8013d34:	69ba      	ldr	r2, [r7, #24]
 8013d36:	4413      	add	r3, r2
 8013d38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	6a1a      	ldr	r2, [r3, #32]
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	0a5b      	lsrs	r3, r3, #9
 8013d42:	4413      	add	r3, r2
 8013d44:	4619      	mov	r1, r3
 8013d46:	68f8      	ldr	r0, [r7, #12]
 8013d48:	f7ff fe6e 	bl	8013a28 <move_window>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d50:	7ffb      	ldrb	r3, [r7, #31]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	f040 80ab 	bne.w	8013eae <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	1c59      	adds	r1, r3, #1
 8013d62:	61b9      	str	r1, [r7, #24]
 8013d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d68:	4413      	add	r3, r2
 8013d6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	f003 0301 	and.w	r3, r3, #1
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00d      	beq.n	8013d92 <put_fat+0xa4>
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	b25b      	sxtb	r3, r3
 8013d7c:	f003 030f 	and.w	r3, r3, #15
 8013d80:	b25a      	sxtb	r2, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	b2db      	uxtb	r3, r3
 8013d86:	011b      	lsls	r3, r3, #4
 8013d88:	b25b      	sxtb	r3, r3
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	b25b      	sxtb	r3, r3
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	e001      	b.n	8013d96 <put_fat+0xa8>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	697a      	ldr	r2, [r7, #20]
 8013d98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	6a1a      	ldr	r2, [r3, #32]
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	0a5b      	lsrs	r3, r3, #9
 8013da8:	4413      	add	r3, r2
 8013daa:	4619      	mov	r1, r3
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	f7ff fe3b 	bl	8013a28 <move_window>
 8013db2:	4603      	mov	r3, r0
 8013db4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013db6:	7ffb      	ldrb	r3, [r7, #31]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d17a      	bne.n	8013eb2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dc8:	4413      	add	r3, r2
 8013dca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	f003 0301 	and.w	r3, r3, #1
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d003      	beq.n	8013dde <put_fat+0xf0>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	091b      	lsrs	r3, r3, #4
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	e00e      	b.n	8013dfc <put_fat+0x10e>
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	b25b      	sxtb	r3, r3
 8013de4:	f023 030f 	bic.w	r3, r3, #15
 8013de8:	b25a      	sxtb	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	0a1b      	lsrs	r3, r3, #8
 8013dee:	b25b      	sxtb	r3, r3
 8013df0:	f003 030f 	and.w	r3, r3, #15
 8013df4:	b25b      	sxtb	r3, r3
 8013df6:	4313      	orrs	r3, r2
 8013df8:	b25b      	sxtb	r3, r3
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	697a      	ldr	r2, [r7, #20]
 8013dfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2201      	movs	r2, #1
 8013e04:	70da      	strb	r2, [r3, #3]
			break;
 8013e06:	e059      	b.n	8013ebc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6a1a      	ldr	r2, [r3, #32]
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	0a1b      	lsrs	r3, r3, #8
 8013e10:	4413      	add	r3, r2
 8013e12:	4619      	mov	r1, r3
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f7ff fe07 	bl	8013a28 <move_window>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013e1e:	7ffb      	ldrb	r3, [r7, #31]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d148      	bne.n	8013eb6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013e32:	4413      	add	r3, r2
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	b292      	uxth	r2, r2
 8013e38:	4611      	mov	r1, r2
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7ff fb7f 	bl	801353e <st_word>
			fs->wflag = 1;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2201      	movs	r2, #1
 8013e44:	70da      	strb	r2, [r3, #3]
			break;
 8013e46:	e039      	b.n	8013ebc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	6a1a      	ldr	r2, [r3, #32]
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	09db      	lsrs	r3, r3, #7
 8013e50:	4413      	add	r3, r2
 8013e52:	4619      	mov	r1, r3
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7ff fde7 	bl	8013a28 <move_window>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013e5e:	7ffb      	ldrb	r3, [r7, #31]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d12a      	bne.n	8013eba <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013e78:	4413      	add	r3, r2
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7ff fb3c 	bl	80134f8 <ld_dword>
 8013e80:	4603      	mov	r3, r0
 8013e82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013e86:	4323      	orrs	r3, r4
 8013e88:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013e98:	4413      	add	r3, r2
 8013e9a:	6879      	ldr	r1, [r7, #4]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7ff fb69 	bl	8013574 <st_dword>
			fs->wflag = 1;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	70da      	strb	r2, [r3, #3]
			break;
 8013ea8:	e008      	b.n	8013ebc <put_fat+0x1ce>
		}
	}
 8013eaa:	bf00      	nop
 8013eac:	e006      	b.n	8013ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013eae:	bf00      	nop
 8013eb0:	e004      	b.n	8013ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013eb2:	bf00      	nop
 8013eb4:	e002      	b.n	8013ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013eb6:	bf00      	nop
 8013eb8:	e000      	b.n	8013ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013eba:	bf00      	nop
	return res;
 8013ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	3724      	adds	r7, #36	; 0x24
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd90      	pop	{r4, r7, pc}

08013ec6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013ec6:	b580      	push	{r7, lr}
 8013ec8:	b088      	sub	sp, #32
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	60f8      	str	r0, [r7, #12]
 8013ece:	60b9      	str	r1, [r7, #8]
 8013ed0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	d904      	bls.n	8013eec <remove_chain+0x26>
 8013ee2:	69bb      	ldr	r3, [r7, #24]
 8013ee4:	695b      	ldr	r3, [r3, #20]
 8013ee6:	68ba      	ldr	r2, [r7, #8]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d301      	bcc.n	8013ef0 <remove_chain+0x2a>
 8013eec:	2302      	movs	r3, #2
 8013eee:	e04b      	b.n	8013f88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d00c      	beq.n	8013f10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013efa:	6879      	ldr	r1, [r7, #4]
 8013efc:	69b8      	ldr	r0, [r7, #24]
 8013efe:	f7ff fef6 	bl	8013cee <put_fat>
 8013f02:	4603      	mov	r3, r0
 8013f04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013f06:	7ffb      	ldrb	r3, [r7, #31]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d001      	beq.n	8013f10 <remove_chain+0x4a>
 8013f0c:	7ffb      	ldrb	r3, [r7, #31]
 8013f0e:	e03b      	b.n	8013f88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013f10:	68b9      	ldr	r1, [r7, #8]
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f7ff fe43 	bl	8013b9e <get_fat>
 8013f18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d031      	beq.n	8013f84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	2b01      	cmp	r3, #1
 8013f24:	d101      	bne.n	8013f2a <remove_chain+0x64>
 8013f26:	2302      	movs	r3, #2
 8013f28:	e02e      	b.n	8013f88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f30:	d101      	bne.n	8013f36 <remove_chain+0x70>
 8013f32:	2301      	movs	r3, #1
 8013f34:	e028      	b.n	8013f88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013f36:	2200      	movs	r2, #0
 8013f38:	68b9      	ldr	r1, [r7, #8]
 8013f3a:	69b8      	ldr	r0, [r7, #24]
 8013f3c:	f7ff fed7 	bl	8013cee <put_fat>
 8013f40:	4603      	mov	r3, r0
 8013f42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013f44:	7ffb      	ldrb	r3, [r7, #31]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d001      	beq.n	8013f4e <remove_chain+0x88>
 8013f4a:	7ffb      	ldrb	r3, [r7, #31]
 8013f4c:	e01c      	b.n	8013f88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013f4e:	69bb      	ldr	r3, [r7, #24]
 8013f50:	691a      	ldr	r2, [r3, #16]
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	695b      	ldr	r3, [r3, #20]
 8013f56:	3b02      	subs	r3, #2
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d20b      	bcs.n	8013f74 <remove_chain+0xae>
			fs->free_clst++;
 8013f5c:	69bb      	ldr	r3, [r7, #24]
 8013f5e:	691b      	ldr	r3, [r3, #16]
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013f66:	69bb      	ldr	r3, [r7, #24]
 8013f68:	791b      	ldrb	r3, [r3, #4]
 8013f6a:	f043 0301 	orr.w	r3, r3, #1
 8013f6e:	b2da      	uxtb	r2, r3
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	695b      	ldr	r3, [r3, #20]
 8013f7c:	68ba      	ldr	r2, [r7, #8]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d3c6      	bcc.n	8013f10 <remove_chain+0x4a>
 8013f82:	e000      	b.n	8013f86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013f84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013f86:	2300      	movs	r3, #0
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3720      	adds	r7, #32
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b088      	sub	sp, #32
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d10d      	bne.n	8013fc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d004      	beq.n	8013fbc <create_chain+0x2c>
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	695b      	ldr	r3, [r3, #20]
 8013fb6:	69ba      	ldr	r2, [r7, #24]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d31b      	bcc.n	8013ff4 <create_chain+0x64>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	61bb      	str	r3, [r7, #24]
 8013fc0:	e018      	b.n	8013ff4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013fc2:	6839      	ldr	r1, [r7, #0]
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f7ff fdea 	bl	8013b9e <get_fat>
 8013fca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2b01      	cmp	r3, #1
 8013fd0:	d801      	bhi.n	8013fd6 <create_chain+0x46>
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	e070      	b.n	80140b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fdc:	d101      	bne.n	8013fe2 <create_chain+0x52>
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	e06a      	b.n	80140b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	695b      	ldr	r3, [r3, #20]
 8013fe6:	68fa      	ldr	r2, [r7, #12]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d201      	bcs.n	8013ff0 <create_chain+0x60>
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	e063      	b.n	80140b8 <create_chain+0x128>
		scl = clst;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013ff8:	69fb      	ldr	r3, [r7, #28]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013ffe:	693b      	ldr	r3, [r7, #16]
 8014000:	695b      	ldr	r3, [r3, #20]
 8014002:	69fa      	ldr	r2, [r7, #28]
 8014004:	429a      	cmp	r2, r3
 8014006:	d307      	bcc.n	8014018 <create_chain+0x88>
				ncl = 2;
 8014008:	2302      	movs	r3, #2
 801400a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801400c:	69fa      	ldr	r2, [r7, #28]
 801400e:	69bb      	ldr	r3, [r7, #24]
 8014010:	429a      	cmp	r2, r3
 8014012:	d901      	bls.n	8014018 <create_chain+0x88>
 8014014:	2300      	movs	r3, #0
 8014016:	e04f      	b.n	80140b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014018:	69f9      	ldr	r1, [r7, #28]
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ff fdbf 	bl	8013b9e <get_fat>
 8014020:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d00e      	beq.n	8014046 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	2b01      	cmp	r3, #1
 801402c:	d003      	beq.n	8014036 <create_chain+0xa6>
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014034:	d101      	bne.n	801403a <create_chain+0xaa>
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	e03e      	b.n	80140b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801403a:	69fa      	ldr	r2, [r7, #28]
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	429a      	cmp	r2, r3
 8014040:	d1da      	bne.n	8013ff8 <create_chain+0x68>
 8014042:	2300      	movs	r3, #0
 8014044:	e038      	b.n	80140b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014046:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801404c:	69f9      	ldr	r1, [r7, #28]
 801404e:	6938      	ldr	r0, [r7, #16]
 8014050:	f7ff fe4d 	bl	8013cee <put_fat>
 8014054:	4603      	mov	r3, r0
 8014056:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014058:	7dfb      	ldrb	r3, [r7, #23]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d109      	bne.n	8014072 <create_chain+0xe2>
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d006      	beq.n	8014072 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014064:	69fa      	ldr	r2, [r7, #28]
 8014066:	6839      	ldr	r1, [r7, #0]
 8014068:	6938      	ldr	r0, [r7, #16]
 801406a:	f7ff fe40 	bl	8013cee <put_fat>
 801406e:	4603      	mov	r3, r0
 8014070:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014072:	7dfb      	ldrb	r3, [r7, #23]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d116      	bne.n	80140a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	69fa      	ldr	r2, [r7, #28]
 801407c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	691a      	ldr	r2, [r3, #16]
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	695b      	ldr	r3, [r3, #20]
 8014086:	3b02      	subs	r3, #2
 8014088:	429a      	cmp	r2, r3
 801408a:	d804      	bhi.n	8014096 <create_chain+0x106>
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	691b      	ldr	r3, [r3, #16]
 8014090:	1e5a      	subs	r2, r3, #1
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	791b      	ldrb	r3, [r3, #4]
 801409a:	f043 0301 	orr.w	r3, r3, #1
 801409e:	b2da      	uxtb	r2, r3
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	711a      	strb	r2, [r3, #4]
 80140a4:	e007      	b.n	80140b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80140a6:	7dfb      	ldrb	r3, [r7, #23]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d102      	bne.n	80140b2 <create_chain+0x122>
 80140ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140b0:	e000      	b.n	80140b4 <create_chain+0x124>
 80140b2:	2301      	movs	r3, #1
 80140b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80140b6:	69fb      	ldr	r3, [r7, #28]
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3720      	adds	r7, #32
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}

080140c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80140c0:	b480      	push	{r7}
 80140c2:	b087      	sub	sp, #28
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d4:	3304      	adds	r3, #4
 80140d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	0a5b      	lsrs	r3, r3, #9
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	8952      	ldrh	r2, [r2, #10]
 80140e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80140e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	1d1a      	adds	r2, r3, #4
 80140ea:	613a      	str	r2, [r7, #16]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d101      	bne.n	80140fa <clmt_clust+0x3a>
 80140f6:	2300      	movs	r3, #0
 80140f8:	e010      	b.n	801411c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80140fa:	697a      	ldr	r2, [r7, #20]
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	429a      	cmp	r2, r3
 8014100:	d307      	bcc.n	8014112 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014102:	697a      	ldr	r2, [r7, #20]
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	617b      	str	r3, [r7, #20]
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	3304      	adds	r3, #4
 801410e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014110:	e7e9      	b.n	80140e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014112:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	681a      	ldr	r2, [r3, #0]
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	4413      	add	r3, r2
}
 801411c:	4618      	mov	r0, r3
 801411e:	371c      	adds	r7, #28
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr

08014128 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801413e:	d204      	bcs.n	801414a <dir_sdi+0x22>
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	f003 031f 	and.w	r3, r3, #31
 8014146:	2b00      	cmp	r3, #0
 8014148:	d001      	beq.n	801414e <dir_sdi+0x26>
		return FR_INT_ERR;
 801414a:	2302      	movs	r3, #2
 801414c:	e063      	b.n	8014216 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	683a      	ldr	r2, [r7, #0]
 8014152:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	689b      	ldr	r3, [r3, #8]
 8014158:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d106      	bne.n	801416e <dir_sdi+0x46>
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	2b02      	cmp	r3, #2
 8014166:	d902      	bls.n	801416e <dir_sdi+0x46>
		clst = fs->dirbase;
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801416c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d10c      	bne.n	801418e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	095b      	lsrs	r3, r3, #5
 8014178:	693a      	ldr	r2, [r7, #16]
 801417a:	8912      	ldrh	r2, [r2, #8]
 801417c:	4293      	cmp	r3, r2
 801417e:	d301      	bcc.n	8014184 <dir_sdi+0x5c>
 8014180:	2302      	movs	r3, #2
 8014182:	e048      	b.n	8014216 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	61da      	str	r2, [r3, #28]
 801418c:	e029      	b.n	80141e2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801418e:	693b      	ldr	r3, [r7, #16]
 8014190:	895b      	ldrh	r3, [r3, #10]
 8014192:	025b      	lsls	r3, r3, #9
 8014194:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014196:	e019      	b.n	80141cc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6979      	ldr	r1, [r7, #20]
 801419c:	4618      	mov	r0, r3
 801419e:	f7ff fcfe 	bl	8013b9e <get_fat>
 80141a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141aa:	d101      	bne.n	80141b0 <dir_sdi+0x88>
 80141ac:	2301      	movs	r3, #1
 80141ae:	e032      	b.n	8014216 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d904      	bls.n	80141c0 <dir_sdi+0x98>
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	695b      	ldr	r3, [r3, #20]
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	429a      	cmp	r2, r3
 80141be:	d301      	bcc.n	80141c4 <dir_sdi+0x9c>
 80141c0:	2302      	movs	r3, #2
 80141c2:	e028      	b.n	8014216 <dir_sdi+0xee>
			ofs -= csz;
 80141c4:	683a      	ldr	r2, [r7, #0]
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80141cc:	683a      	ldr	r2, [r7, #0]
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d2e1      	bcs.n	8014198 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80141d4:	6979      	ldr	r1, [r7, #20]
 80141d6:	6938      	ldr	r0, [r7, #16]
 80141d8:	f7ff fcc2 	bl	8013b60 <clust2sect>
 80141dc:	4602      	mov	r2, r0
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	697a      	ldr	r2, [r7, #20]
 80141e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	69db      	ldr	r3, [r3, #28]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d101      	bne.n	80141f4 <dir_sdi+0xcc>
 80141f0:	2302      	movs	r3, #2
 80141f2:	e010      	b.n	8014216 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	69da      	ldr	r2, [r3, #28]
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	0a5b      	lsrs	r3, r3, #9
 80141fc:	441a      	add	r2, r3
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801420e:	441a      	add	r2, r3
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014214:	2300      	movs	r3, #0
}
 8014216:	4618      	mov	r0, r3
 8014218:	3718      	adds	r7, #24
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b086      	sub	sp, #24
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
 8014226:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	695b      	ldr	r3, [r3, #20]
 8014232:	3320      	adds	r3, #32
 8014234:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	69db      	ldr	r3, [r3, #28]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d003      	beq.n	8014246 <dir_next+0x28>
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014244:	d301      	bcc.n	801424a <dir_next+0x2c>
 8014246:	2304      	movs	r3, #4
 8014248:	e0aa      	b.n	80143a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014250:	2b00      	cmp	r3, #0
 8014252:	f040 8098 	bne.w	8014386 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	69db      	ldr	r3, [r3, #28]
 801425a:	1c5a      	adds	r2, r3, #1
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	699b      	ldr	r3, [r3, #24]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d10b      	bne.n	8014280 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	095b      	lsrs	r3, r3, #5
 801426c:	68fa      	ldr	r2, [r7, #12]
 801426e:	8912      	ldrh	r2, [r2, #8]
 8014270:	4293      	cmp	r3, r2
 8014272:	f0c0 8088 	bcc.w	8014386 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	61da      	str	r2, [r3, #28]
 801427c:	2304      	movs	r3, #4
 801427e:	e08f      	b.n	80143a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	0a5b      	lsrs	r3, r3, #9
 8014284:	68fa      	ldr	r2, [r7, #12]
 8014286:	8952      	ldrh	r2, [r2, #10]
 8014288:	3a01      	subs	r2, #1
 801428a:	4013      	ands	r3, r2
 801428c:	2b00      	cmp	r3, #0
 801428e:	d17a      	bne.n	8014386 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	699b      	ldr	r3, [r3, #24]
 8014296:	4619      	mov	r1, r3
 8014298:	4610      	mov	r0, r2
 801429a:	f7ff fc80 	bl	8013b9e <get_fat>
 801429e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	2b01      	cmp	r3, #1
 80142a4:	d801      	bhi.n	80142aa <dir_next+0x8c>
 80142a6:	2302      	movs	r3, #2
 80142a8:	e07a      	b.n	80143a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142b0:	d101      	bne.n	80142b6 <dir_next+0x98>
 80142b2:	2301      	movs	r3, #1
 80142b4:	e074      	b.n	80143a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	695b      	ldr	r3, [r3, #20]
 80142ba:	697a      	ldr	r2, [r7, #20]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d358      	bcc.n	8014372 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d104      	bne.n	80142d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2200      	movs	r2, #0
 80142ca:	61da      	str	r2, [r3, #28]
 80142cc:	2304      	movs	r3, #4
 80142ce:	e067      	b.n	80143a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	4619      	mov	r1, r3
 80142d8:	4610      	mov	r0, r2
 80142da:	f7ff fe59 	bl	8013f90 <create_chain>
 80142de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d101      	bne.n	80142ea <dir_next+0xcc>
 80142e6:	2307      	movs	r3, #7
 80142e8:	e05a      	b.n	80143a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d101      	bne.n	80142f4 <dir_next+0xd6>
 80142f0:	2302      	movs	r3, #2
 80142f2:	e055      	b.n	80143a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142fa:	d101      	bne.n	8014300 <dir_next+0xe2>
 80142fc:	2301      	movs	r3, #1
 80142fe:	e04f      	b.n	80143a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	f7ff fb4d 	bl	80139a0 <sync_window>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d001      	beq.n	8014310 <dir_next+0xf2>
 801430c:	2301      	movs	r3, #1
 801430e:	e047      	b.n	80143a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	3330      	adds	r3, #48	; 0x30
 8014314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014318:	2100      	movs	r1, #0
 801431a:	4618      	mov	r0, r3
 801431c:	f7ff f977 	bl	801360e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014320:	2300      	movs	r3, #0
 8014322:	613b      	str	r3, [r7, #16]
 8014324:	6979      	ldr	r1, [r7, #20]
 8014326:	68f8      	ldr	r0, [r7, #12]
 8014328:	f7ff fc1a 	bl	8013b60 <clust2sect>
 801432c:	4602      	mov	r2, r0
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	62da      	str	r2, [r3, #44]	; 0x2c
 8014332:	e012      	b.n	801435a <dir_next+0x13c>
						fs->wflag = 1;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2201      	movs	r2, #1
 8014338:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801433a:	68f8      	ldr	r0, [r7, #12]
 801433c:	f7ff fb30 	bl	80139a0 <sync_window>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d001      	beq.n	801434a <dir_next+0x12c>
 8014346:	2301      	movs	r3, #1
 8014348:	e02a      	b.n	80143a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	3301      	adds	r3, #1
 801434e:	613b      	str	r3, [r7, #16]
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014354:	1c5a      	adds	r2, r3, #1
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	62da      	str	r2, [r3, #44]	; 0x2c
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	895b      	ldrh	r3, [r3, #10]
 801435e:	461a      	mov	r2, r3
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	4293      	cmp	r3, r2
 8014364:	d3e6      	bcc.n	8014334 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	1ad2      	subs	r2, r2, r3
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	697a      	ldr	r2, [r7, #20]
 8014376:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014378:	6979      	ldr	r1, [r7, #20]
 801437a:	68f8      	ldr	r0, [r7, #12]
 801437c:	f7ff fbf0 	bl	8013b60 <clust2sect>
 8014380:	4602      	mov	r2, r0
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	68ba      	ldr	r2, [r7, #8]
 801438a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014398:	441a      	add	r2, r3
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801439e:	2300      	movs	r3, #0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3718      	adds	r7, #24
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b086      	sub	sp, #24
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80143b8:	2100      	movs	r1, #0
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f7ff feb4 	bl	8014128 <dir_sdi>
 80143c0:	4603      	mov	r3, r0
 80143c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80143c4:	7dfb      	ldrb	r3, [r7, #23]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d12b      	bne.n	8014422 <dir_alloc+0x7a>
		n = 0;
 80143ca:	2300      	movs	r3, #0
 80143cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	69db      	ldr	r3, [r3, #28]
 80143d2:	4619      	mov	r1, r3
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f7ff fb27 	bl	8013a28 <move_window>
 80143da:	4603      	mov	r3, r0
 80143dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80143de:	7dfb      	ldrb	r3, [r7, #23]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d11d      	bne.n	8014420 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6a1b      	ldr	r3, [r3, #32]
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	2be5      	cmp	r3, #229	; 0xe5
 80143ec:	d004      	beq.n	80143f8 <dir_alloc+0x50>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6a1b      	ldr	r3, [r3, #32]
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d107      	bne.n	8014408 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	3301      	adds	r3, #1
 80143fc:	613b      	str	r3, [r7, #16]
 80143fe:	693a      	ldr	r2, [r7, #16]
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	429a      	cmp	r2, r3
 8014404:	d102      	bne.n	801440c <dir_alloc+0x64>
 8014406:	e00c      	b.n	8014422 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014408:	2300      	movs	r3, #0
 801440a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801440c:	2101      	movs	r1, #1
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f7ff ff05 	bl	801421e <dir_next>
 8014414:	4603      	mov	r3, r0
 8014416:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014418:	7dfb      	ldrb	r3, [r7, #23]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d0d7      	beq.n	80143ce <dir_alloc+0x26>
 801441e:	e000      	b.n	8014422 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014420:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014422:	7dfb      	ldrb	r3, [r7, #23]
 8014424:	2b04      	cmp	r3, #4
 8014426:	d101      	bne.n	801442c <dir_alloc+0x84>
 8014428:	2307      	movs	r3, #7
 801442a:	75fb      	strb	r3, [r7, #23]
	return res;
 801442c:	7dfb      	ldrb	r3, [r7, #23]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3718      	adds	r7, #24
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}

08014436 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014436:	b580      	push	{r7, lr}
 8014438:	b084      	sub	sp, #16
 801443a:	af00      	add	r7, sp, #0
 801443c:	6078      	str	r0, [r7, #4]
 801443e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	331a      	adds	r3, #26
 8014444:	4618      	mov	r0, r3
 8014446:	f7ff f83f 	bl	80134c8 <ld_word>
 801444a:	4603      	mov	r3, r0
 801444c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	781b      	ldrb	r3, [r3, #0]
 8014452:	2b03      	cmp	r3, #3
 8014454:	d109      	bne.n	801446a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	3314      	adds	r3, #20
 801445a:	4618      	mov	r0, r3
 801445c:	f7ff f834 	bl	80134c8 <ld_word>
 8014460:	4603      	mov	r3, r0
 8014462:	041b      	lsls	r3, r3, #16
 8014464:	68fa      	ldr	r2, [r7, #12]
 8014466:	4313      	orrs	r3, r2
 8014468:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801446a:	68fb      	ldr	r3, [r7, #12]
}
 801446c:	4618      	mov	r0, r3
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	60f8      	str	r0, [r7, #12]
 801447c:	60b9      	str	r1, [r7, #8]
 801447e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	331a      	adds	r3, #26
 8014484:	687a      	ldr	r2, [r7, #4]
 8014486:	b292      	uxth	r2, r2
 8014488:	4611      	mov	r1, r2
 801448a:	4618      	mov	r0, r3
 801448c:	f7ff f857 	bl	801353e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	2b03      	cmp	r3, #3
 8014496:	d109      	bne.n	80144ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	f103 0214 	add.w	r2, r3, #20
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	0c1b      	lsrs	r3, r3, #16
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	4619      	mov	r1, r3
 80144a6:	4610      	mov	r0, r2
 80144a8:	f7ff f849 	bl	801353e <st_word>
	}
}
 80144ac:	bf00      	nop
 80144ae:	3710      	adds	r7, #16
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b086      	sub	sp, #24
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80144c2:	2100      	movs	r1, #0
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f7ff fe2f 	bl	8014128 <dir_sdi>
 80144ca:	4603      	mov	r3, r0
 80144cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80144ce:	7dfb      	ldrb	r3, [r7, #23]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d001      	beq.n	80144d8 <dir_find+0x24>
 80144d4:	7dfb      	ldrb	r3, [r7, #23]
 80144d6:	e03e      	b.n	8014556 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	69db      	ldr	r3, [r3, #28]
 80144dc:	4619      	mov	r1, r3
 80144de:	6938      	ldr	r0, [r7, #16]
 80144e0:	f7ff faa2 	bl	8013a28 <move_window>
 80144e4:	4603      	mov	r3, r0
 80144e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80144e8:	7dfb      	ldrb	r3, [r7, #23]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d12f      	bne.n	801454e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6a1b      	ldr	r3, [r3, #32]
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80144f6:	7bfb      	ldrb	r3, [r7, #15]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d102      	bne.n	8014502 <dir_find+0x4e>
 80144fc:	2304      	movs	r3, #4
 80144fe:	75fb      	strb	r3, [r7, #23]
 8014500:	e028      	b.n	8014554 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6a1b      	ldr	r3, [r3, #32]
 8014506:	330b      	adds	r3, #11
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801450e:	b2da      	uxtb	r2, r3
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6a1b      	ldr	r3, [r3, #32]
 8014518:	330b      	adds	r3, #11
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	f003 0308 	and.w	r3, r3, #8
 8014520:	2b00      	cmp	r3, #0
 8014522:	d10a      	bne.n	801453a <dir_find+0x86>
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6a18      	ldr	r0, [r3, #32]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	3324      	adds	r3, #36	; 0x24
 801452c:	220b      	movs	r2, #11
 801452e:	4619      	mov	r1, r3
 8014530:	f7ff f888 	bl	8013644 <mem_cmp>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d00b      	beq.n	8014552 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801453a:	2100      	movs	r1, #0
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7ff fe6e 	bl	801421e <dir_next>
 8014542:	4603      	mov	r3, r0
 8014544:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014546:	7dfb      	ldrb	r3, [r7, #23]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d0c5      	beq.n	80144d8 <dir_find+0x24>
 801454c:	e002      	b.n	8014554 <dir_find+0xa0>
		if (res != FR_OK) break;
 801454e:	bf00      	nop
 8014550:	e000      	b.n	8014554 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014552:	bf00      	nop

	return res;
 8014554:	7dfb      	ldrb	r3, [r7, #23]
}
 8014556:	4618      	mov	r0, r3
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}

0801455e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801455e:	b580      	push	{r7, lr}
 8014560:	b084      	sub	sp, #16
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801456c:	2101      	movs	r1, #1
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f7ff ff1a 	bl	80143a8 <dir_alloc>
 8014574:	4603      	mov	r3, r0
 8014576:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014578:	7bfb      	ldrb	r3, [r7, #15]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d11c      	bne.n	80145b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	69db      	ldr	r3, [r3, #28]
 8014582:	4619      	mov	r1, r3
 8014584:	68b8      	ldr	r0, [r7, #8]
 8014586:	f7ff fa4f 	bl	8013a28 <move_window>
 801458a:	4603      	mov	r3, r0
 801458c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801458e:	7bfb      	ldrb	r3, [r7, #15]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d111      	bne.n	80145b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a1b      	ldr	r3, [r3, #32]
 8014598:	2220      	movs	r2, #32
 801459a:	2100      	movs	r1, #0
 801459c:	4618      	mov	r0, r3
 801459e:	f7ff f836 	bl	801360e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6a18      	ldr	r0, [r3, #32]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	3324      	adds	r3, #36	; 0x24
 80145aa:	220b      	movs	r2, #11
 80145ac:	4619      	mov	r1, r3
 80145ae:	f7ff f80d 	bl	80135cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	2201      	movs	r2, #1
 80145b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80145b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3710      	adds	r7, #16
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
	...

080145c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b088      	sub	sp, #32
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	60fb      	str	r3, [r7, #12]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	3324      	adds	r3, #36	; 0x24
 80145d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80145da:	220b      	movs	r2, #11
 80145dc:	2120      	movs	r1, #32
 80145de:	68b8      	ldr	r0, [r7, #8]
 80145e0:	f7ff f815 	bl	801360e <mem_set>
	si = i = 0; ni = 8;
 80145e4:	2300      	movs	r3, #0
 80145e6:	613b      	str	r3, [r7, #16]
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	61fb      	str	r3, [r7, #28]
 80145ec:	2308      	movs	r3, #8
 80145ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	1c5a      	adds	r2, r3, #1
 80145f4:	61fa      	str	r2, [r7, #28]
 80145f6:	68fa      	ldr	r2, [r7, #12]
 80145f8:	4413      	add	r3, r2
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80145fe:	7efb      	ldrb	r3, [r7, #27]
 8014600:	2b20      	cmp	r3, #32
 8014602:	d94e      	bls.n	80146a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014604:	7efb      	ldrb	r3, [r7, #27]
 8014606:	2b2f      	cmp	r3, #47	; 0x2f
 8014608:	d006      	beq.n	8014618 <create_name+0x54>
 801460a:	7efb      	ldrb	r3, [r7, #27]
 801460c:	2b5c      	cmp	r3, #92	; 0x5c
 801460e:	d110      	bne.n	8014632 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014610:	e002      	b.n	8014618 <create_name+0x54>
 8014612:	69fb      	ldr	r3, [r7, #28]
 8014614:	3301      	adds	r3, #1
 8014616:	61fb      	str	r3, [r7, #28]
 8014618:	68fa      	ldr	r2, [r7, #12]
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	4413      	add	r3, r2
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	2b2f      	cmp	r3, #47	; 0x2f
 8014622:	d0f6      	beq.n	8014612 <create_name+0x4e>
 8014624:	68fa      	ldr	r2, [r7, #12]
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	4413      	add	r3, r2
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	2b5c      	cmp	r3, #92	; 0x5c
 801462e:	d0f0      	beq.n	8014612 <create_name+0x4e>
			break;
 8014630:	e038      	b.n	80146a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8014632:	7efb      	ldrb	r3, [r7, #27]
 8014634:	2b2e      	cmp	r3, #46	; 0x2e
 8014636:	d003      	beq.n	8014640 <create_name+0x7c>
 8014638:	693a      	ldr	r2, [r7, #16]
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	429a      	cmp	r2, r3
 801463e:	d30c      	bcc.n	801465a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	2b0b      	cmp	r3, #11
 8014644:	d002      	beq.n	801464c <create_name+0x88>
 8014646:	7efb      	ldrb	r3, [r7, #27]
 8014648:	2b2e      	cmp	r3, #46	; 0x2e
 801464a:	d001      	beq.n	8014650 <create_name+0x8c>
 801464c:	2306      	movs	r3, #6
 801464e:	e044      	b.n	80146da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014650:	2308      	movs	r3, #8
 8014652:	613b      	str	r3, [r7, #16]
 8014654:	230b      	movs	r3, #11
 8014656:	617b      	str	r3, [r7, #20]
			continue;
 8014658:	e022      	b.n	80146a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801465a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801465e:	2b00      	cmp	r3, #0
 8014660:	da04      	bge.n	801466c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8014662:	7efb      	ldrb	r3, [r7, #27]
 8014664:	3b80      	subs	r3, #128	; 0x80
 8014666:	4a1f      	ldr	r2, [pc, #124]	; (80146e4 <create_name+0x120>)
 8014668:	5cd3      	ldrb	r3, [r2, r3]
 801466a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801466c:	7efb      	ldrb	r3, [r7, #27]
 801466e:	4619      	mov	r1, r3
 8014670:	481d      	ldr	r0, [pc, #116]	; (80146e8 <create_name+0x124>)
 8014672:	f7ff f80e 	bl	8013692 <chk_chr>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	d001      	beq.n	8014680 <create_name+0xbc>
 801467c:	2306      	movs	r3, #6
 801467e:	e02c      	b.n	80146da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014680:	7efb      	ldrb	r3, [r7, #27]
 8014682:	2b60      	cmp	r3, #96	; 0x60
 8014684:	d905      	bls.n	8014692 <create_name+0xce>
 8014686:	7efb      	ldrb	r3, [r7, #27]
 8014688:	2b7a      	cmp	r3, #122	; 0x7a
 801468a:	d802      	bhi.n	8014692 <create_name+0xce>
 801468c:	7efb      	ldrb	r3, [r7, #27]
 801468e:	3b20      	subs	r3, #32
 8014690:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8014692:	693b      	ldr	r3, [r7, #16]
 8014694:	1c5a      	adds	r2, r3, #1
 8014696:	613a      	str	r2, [r7, #16]
 8014698:	68ba      	ldr	r2, [r7, #8]
 801469a:	4413      	add	r3, r2
 801469c:	7efa      	ldrb	r2, [r7, #27]
 801469e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80146a0:	e7a6      	b.n	80145f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80146a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	441a      	add	r2, r3
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80146ae:	693b      	ldr	r3, [r7, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d101      	bne.n	80146b8 <create_name+0xf4>
 80146b4:	2306      	movs	r3, #6
 80146b6:	e010      	b.n	80146da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	2be5      	cmp	r3, #229	; 0xe5
 80146be:	d102      	bne.n	80146c6 <create_name+0x102>
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	2205      	movs	r2, #5
 80146c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80146c6:	7efb      	ldrb	r3, [r7, #27]
 80146c8:	2b20      	cmp	r3, #32
 80146ca:	d801      	bhi.n	80146d0 <create_name+0x10c>
 80146cc:	2204      	movs	r2, #4
 80146ce:	e000      	b.n	80146d2 <create_name+0x10e>
 80146d0:	2200      	movs	r2, #0
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	330b      	adds	r3, #11
 80146d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80146d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3720      	adds	r7, #32
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	0801a0cc 	.word	0x0801a0cc
 80146e8:	08019fbc 	.word	0x08019fbc

080146ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b086      	sub	sp, #24
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014700:	e002      	b.n	8014708 <follow_path+0x1c>
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	3301      	adds	r3, #1
 8014706:	603b      	str	r3, [r7, #0]
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	2b2f      	cmp	r3, #47	; 0x2f
 801470e:	d0f8      	beq.n	8014702 <follow_path+0x16>
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b5c      	cmp	r3, #92	; 0x5c
 8014716:	d0f4      	beq.n	8014702 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	2200      	movs	r2, #0
 801471c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	2b1f      	cmp	r3, #31
 8014724:	d80a      	bhi.n	801473c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2280      	movs	r2, #128	; 0x80
 801472a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801472e:	2100      	movs	r1, #0
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7ff fcf9 	bl	8014128 <dir_sdi>
 8014736:	4603      	mov	r3, r0
 8014738:	75fb      	strb	r3, [r7, #23]
 801473a:	e043      	b.n	80147c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801473c:	463b      	mov	r3, r7
 801473e:	4619      	mov	r1, r3
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f7ff ff3f 	bl	80145c4 <create_name>
 8014746:	4603      	mov	r3, r0
 8014748:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801474a:	7dfb      	ldrb	r3, [r7, #23]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d134      	bne.n	80147ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f7ff feaf 	bl	80144b4 <dir_find>
 8014756:	4603      	mov	r3, r0
 8014758:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014760:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014762:	7dfb      	ldrb	r3, [r7, #23]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d00a      	beq.n	801477e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014768:	7dfb      	ldrb	r3, [r7, #23]
 801476a:	2b04      	cmp	r3, #4
 801476c:	d127      	bne.n	80147be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801476e:	7afb      	ldrb	r3, [r7, #11]
 8014770:	f003 0304 	and.w	r3, r3, #4
 8014774:	2b00      	cmp	r3, #0
 8014776:	d122      	bne.n	80147be <follow_path+0xd2>
 8014778:	2305      	movs	r3, #5
 801477a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801477c:	e01f      	b.n	80147be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801477e:	7afb      	ldrb	r3, [r7, #11]
 8014780:	f003 0304 	and.w	r3, r3, #4
 8014784:	2b00      	cmp	r3, #0
 8014786:	d11c      	bne.n	80147c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014788:	693b      	ldr	r3, [r7, #16]
 801478a:	799b      	ldrb	r3, [r3, #6]
 801478c:	f003 0310 	and.w	r3, r3, #16
 8014790:	2b00      	cmp	r3, #0
 8014792:	d102      	bne.n	801479a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014794:	2305      	movs	r3, #5
 8014796:	75fb      	strb	r3, [r7, #23]
 8014798:	e014      	b.n	80147c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	695b      	ldr	r3, [r3, #20]
 80147a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147a8:	4413      	add	r3, r2
 80147aa:	4619      	mov	r1, r3
 80147ac:	68f8      	ldr	r0, [r7, #12]
 80147ae:	f7ff fe42 	bl	8014436 <ld_clust>
 80147b2:	4602      	mov	r2, r0
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80147b8:	e7c0      	b.n	801473c <follow_path+0x50>
			if (res != FR_OK) break;
 80147ba:	bf00      	nop
 80147bc:	e002      	b.n	80147c4 <follow_path+0xd8>
				break;
 80147be:	bf00      	nop
 80147c0:	e000      	b.n	80147c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80147c2:	bf00      	nop
			}
		}
	}

	return res;
 80147c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3718      	adds	r7, #24
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}

080147ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80147ce:	b480      	push	{r7}
 80147d0:	b087      	sub	sp, #28
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80147d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d031      	beq.n	8014848 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	617b      	str	r3, [r7, #20]
 80147ea:	e002      	b.n	80147f2 <get_ldnumber+0x24>
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	3301      	adds	r3, #1
 80147f0:	617b      	str	r3, [r7, #20]
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	2b20      	cmp	r3, #32
 80147f8:	d903      	bls.n	8014802 <get_ldnumber+0x34>
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	2b3a      	cmp	r3, #58	; 0x3a
 8014800:	d1f4      	bne.n	80147ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	2b3a      	cmp	r3, #58	; 0x3a
 8014808:	d11c      	bne.n	8014844 <get_ldnumber+0x76>
			tp = *path;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	1c5a      	adds	r2, r3, #1
 8014814:	60fa      	str	r2, [r7, #12]
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	3b30      	subs	r3, #48	; 0x30
 801481a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	2b09      	cmp	r3, #9
 8014820:	d80e      	bhi.n	8014840 <get_ldnumber+0x72>
 8014822:	68fa      	ldr	r2, [r7, #12]
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	429a      	cmp	r2, r3
 8014828:	d10a      	bne.n	8014840 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d107      	bne.n	8014840 <get_ldnumber+0x72>
					vol = (int)i;
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	3301      	adds	r3, #1
 8014838:	617b      	str	r3, [r7, #20]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	697a      	ldr	r2, [r7, #20]
 801483e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	e002      	b.n	801484a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014844:	2300      	movs	r3, #0
 8014846:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014848:	693b      	ldr	r3, [r7, #16]
}
 801484a:	4618      	mov	r0, r3
 801484c:	371c      	adds	r7, #28
 801484e:	46bd      	mov	sp, r7
 8014850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014854:	4770      	bx	lr
	...

08014858 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b082      	sub	sp, #8
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2200      	movs	r2, #0
 8014866:	70da      	strb	r2, [r3, #3]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801486e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014870:	6839      	ldr	r1, [r7, #0]
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7ff f8d8 	bl	8013a28 <move_window>
 8014878:	4603      	mov	r3, r0
 801487a:	2b00      	cmp	r3, #0
 801487c:	d001      	beq.n	8014882 <check_fs+0x2a>
 801487e:	2304      	movs	r3, #4
 8014880:	e038      	b.n	80148f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	3330      	adds	r3, #48	; 0x30
 8014886:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801488a:	4618      	mov	r0, r3
 801488c:	f7fe fe1c 	bl	80134c8 <ld_word>
 8014890:	4603      	mov	r3, r0
 8014892:	461a      	mov	r2, r3
 8014894:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014898:	429a      	cmp	r2, r3
 801489a:	d001      	beq.n	80148a0 <check_fs+0x48>
 801489c:	2303      	movs	r3, #3
 801489e:	e029      	b.n	80148f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148a6:	2be9      	cmp	r3, #233	; 0xe9
 80148a8:	d009      	beq.n	80148be <check_fs+0x66>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148b0:	2beb      	cmp	r3, #235	; 0xeb
 80148b2:	d11e      	bne.n	80148f2 <check_fs+0x9a>
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80148ba:	2b90      	cmp	r3, #144	; 0x90
 80148bc:	d119      	bne.n	80148f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	3330      	adds	r3, #48	; 0x30
 80148c2:	3336      	adds	r3, #54	; 0x36
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fe fe17 	bl	80134f8 <ld_dword>
 80148ca:	4603      	mov	r3, r0
 80148cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80148d0:	4a0a      	ldr	r2, [pc, #40]	; (80148fc <check_fs+0xa4>)
 80148d2:	4293      	cmp	r3, r2
 80148d4:	d101      	bne.n	80148da <check_fs+0x82>
 80148d6:	2300      	movs	r3, #0
 80148d8:	e00c      	b.n	80148f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	3330      	adds	r3, #48	; 0x30
 80148de:	3352      	adds	r3, #82	; 0x52
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7fe fe09 	bl	80134f8 <ld_dword>
 80148e6:	4603      	mov	r3, r0
 80148e8:	4a05      	ldr	r2, [pc, #20]	; (8014900 <check_fs+0xa8>)
 80148ea:	4293      	cmp	r3, r2
 80148ec:	d101      	bne.n	80148f2 <check_fs+0x9a>
 80148ee:	2300      	movs	r3, #0
 80148f0:	e000      	b.n	80148f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80148f2:	2302      	movs	r3, #2
}
 80148f4:	4618      	mov	r0, r3
 80148f6:	3708      	adds	r7, #8
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	00544146 	.word	0x00544146
 8014900:	33544146 	.word	0x33544146

08014904 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b096      	sub	sp, #88	; 0x58
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	4613      	mov	r3, r2
 8014910:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	2200      	movs	r2, #0
 8014916:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014918:	68f8      	ldr	r0, [r7, #12]
 801491a:	f7ff ff58 	bl	80147ce <get_ldnumber>
 801491e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014922:	2b00      	cmp	r3, #0
 8014924:	da01      	bge.n	801492a <find_volume+0x26>
 8014926:	230b      	movs	r3, #11
 8014928:	e22d      	b.n	8014d86 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801492a:	4aa1      	ldr	r2, [pc, #644]	; (8014bb0 <find_volume+0x2ac>)
 801492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014932:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014936:	2b00      	cmp	r3, #0
 8014938:	d101      	bne.n	801493e <find_volume+0x3a>
 801493a:	230c      	movs	r3, #12
 801493c:	e223      	b.n	8014d86 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014942:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014944:	79fb      	ldrb	r3, [r7, #7]
 8014946:	f023 0301 	bic.w	r3, r3, #1
 801494a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d01a      	beq.n	801498a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014956:	785b      	ldrb	r3, [r3, #1]
 8014958:	4618      	mov	r0, r3
 801495a:	f7fe fd17 	bl	801338c <disk_status>
 801495e:	4603      	mov	r3, r0
 8014960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014968:	f003 0301 	and.w	r3, r3, #1
 801496c:	2b00      	cmp	r3, #0
 801496e:	d10c      	bne.n	801498a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014970:	79fb      	ldrb	r3, [r7, #7]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d007      	beq.n	8014986 <find_volume+0x82>
 8014976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801497a:	f003 0304 	and.w	r3, r3, #4
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014982:	230a      	movs	r3, #10
 8014984:	e1ff      	b.n	8014d86 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8014986:	2300      	movs	r3, #0
 8014988:	e1fd      	b.n	8014d86 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801498c:	2200      	movs	r2, #0
 801498e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014992:	b2da      	uxtb	r2, r3
 8014994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014996:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499a:	785b      	ldrb	r3, [r3, #1]
 801499c:	4618      	mov	r0, r3
 801499e:	f7fe fd0f 	bl	80133c0 <disk_initialize>
 80149a2:	4603      	mov	r3, r0
 80149a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80149a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80149ac:	f003 0301 	and.w	r3, r3, #1
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d001      	beq.n	80149b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80149b4:	2303      	movs	r3, #3
 80149b6:	e1e6      	b.n	8014d86 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80149b8:	79fb      	ldrb	r3, [r7, #7]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d007      	beq.n	80149ce <find_volume+0xca>
 80149be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80149c2:	f003 0304 	and.w	r3, r3, #4
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d001      	beq.n	80149ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80149ca:	230a      	movs	r3, #10
 80149cc:	e1db      	b.n	8014d86 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80149ce:	2300      	movs	r3, #0
 80149d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80149d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80149d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80149d6:	f7ff ff3f 	bl	8014858 <check_fs>
 80149da:	4603      	mov	r3, r0
 80149dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80149e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80149e4:	2b02      	cmp	r3, #2
 80149e6:	d149      	bne.n	8014a7c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80149e8:	2300      	movs	r3, #0
 80149ea:	643b      	str	r3, [r7, #64]	; 0x40
 80149ec:	e01e      	b.n	8014a2c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80149ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80149f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149f6:	011b      	lsls	r3, r3, #4
 80149f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80149fc:	4413      	add	r3, r2
 80149fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a02:	3304      	adds	r3, #4
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d006      	beq.n	8014a18 <find_volume+0x114>
 8014a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0c:	3308      	adds	r3, #8
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fe fd72 	bl	80134f8 <ld_dword>
 8014a14:	4602      	mov	r2, r0
 8014a16:	e000      	b.n	8014a1a <find_volume+0x116>
 8014a18:	2200      	movs	r2, #0
 8014a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	3358      	adds	r3, #88	; 0x58
 8014a20:	443b      	add	r3, r7
 8014a22:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a28:	3301      	adds	r3, #1
 8014a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8014a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a2e:	2b03      	cmp	r3, #3
 8014a30:	d9dd      	bls.n	80149ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014a32:	2300      	movs	r3, #0
 8014a34:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <find_volume+0x13e>
 8014a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a3e:	3b01      	subs	r3, #1
 8014a40:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a44:	009b      	lsls	r3, r3, #2
 8014a46:	3358      	adds	r3, #88	; 0x58
 8014a48:	443b      	add	r3, r7
 8014a4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014a4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d005      	beq.n	8014a62 <find_volume+0x15e>
 8014a56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a5a:	f7ff fefd 	bl	8014858 <check_fs>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	e000      	b.n	8014a64 <find_volume+0x160>
 8014a62:	2303      	movs	r3, #3
 8014a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d905      	bls.n	8014a7c <find_volume+0x178>
 8014a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a72:	3301      	adds	r3, #1
 8014a74:	643b      	str	r3, [r7, #64]	; 0x40
 8014a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a78:	2b03      	cmp	r3, #3
 8014a7a:	d9e2      	bls.n	8014a42 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a80:	2b04      	cmp	r3, #4
 8014a82:	d101      	bne.n	8014a88 <find_volume+0x184>
 8014a84:	2301      	movs	r3, #1
 8014a86:	e17e      	b.n	8014d86 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a8c:	2b01      	cmp	r3, #1
 8014a8e:	d901      	bls.n	8014a94 <find_volume+0x190>
 8014a90:	230d      	movs	r3, #13
 8014a92:	e178      	b.n	8014d86 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a96:	3330      	adds	r3, #48	; 0x30
 8014a98:	330b      	adds	r3, #11
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fe fd14 	bl	80134c8 <ld_word>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014aa6:	d001      	beq.n	8014aac <find_volume+0x1a8>
 8014aa8:	230d      	movs	r3, #13
 8014aaa:	e16c      	b.n	8014d86 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aae:	3330      	adds	r3, #48	; 0x30
 8014ab0:	3316      	adds	r3, #22
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fe fd08 	bl	80134c8 <ld_word>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d106      	bne.n	8014ad0 <find_volume+0x1cc>
 8014ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac4:	3330      	adds	r3, #48	; 0x30
 8014ac6:	3324      	adds	r3, #36	; 0x24
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7fe fd15 	bl	80134f8 <ld_dword>
 8014ace:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ad4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ade:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae2:	789b      	ldrb	r3, [r3, #2]
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d005      	beq.n	8014af4 <find_volume+0x1f0>
 8014ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aea:	789b      	ldrb	r3, [r3, #2]
 8014aec:	2b02      	cmp	r3, #2
 8014aee:	d001      	beq.n	8014af4 <find_volume+0x1f0>
 8014af0:	230d      	movs	r3, #13
 8014af2:	e148      	b.n	8014d86 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af6:	789b      	ldrb	r3, [r3, #2]
 8014af8:	461a      	mov	r2, r3
 8014afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014afc:	fb02 f303 	mul.w	r3, r2, r3
 8014b00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014b08:	b29a      	uxth	r2, r3
 8014b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b10:	895b      	ldrh	r3, [r3, #10]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d008      	beq.n	8014b28 <find_volume+0x224>
 8014b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b18:	895b      	ldrh	r3, [r3, #10]
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b1e:	895b      	ldrh	r3, [r3, #10]
 8014b20:	3b01      	subs	r3, #1
 8014b22:	4013      	ands	r3, r2
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d001      	beq.n	8014b2c <find_volume+0x228>
 8014b28:	230d      	movs	r3, #13
 8014b2a:	e12c      	b.n	8014d86 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b2e:	3330      	adds	r3, #48	; 0x30
 8014b30:	3311      	adds	r3, #17
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fe fcc8 	bl	80134c8 <ld_word>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b42:	891b      	ldrh	r3, [r3, #8]
 8014b44:	f003 030f 	and.w	r3, r3, #15
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d001      	beq.n	8014b52 <find_volume+0x24e>
 8014b4e:	230d      	movs	r3, #13
 8014b50:	e119      	b.n	8014d86 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b54:	3330      	adds	r3, #48	; 0x30
 8014b56:	3313      	adds	r3, #19
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7fe fcb5 	bl	80134c8 <ld_word>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d106      	bne.n	8014b76 <find_volume+0x272>
 8014b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b6a:	3330      	adds	r3, #48	; 0x30
 8014b6c:	3320      	adds	r3, #32
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe fcc2 	bl	80134f8 <ld_dword>
 8014b74:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b78:	3330      	adds	r3, #48	; 0x30
 8014b7a:	330e      	adds	r3, #14
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7fe fca3 	bl	80134c8 <ld_word>
 8014b82:	4603      	mov	r3, r0
 8014b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014b86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d101      	bne.n	8014b90 <find_volume+0x28c>
 8014b8c:	230d      	movs	r3, #13
 8014b8e:	e0fa      	b.n	8014d86 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014b90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b94:	4413      	add	r3, r2
 8014b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b98:	8912      	ldrh	r2, [r2, #8]
 8014b9a:	0912      	lsrs	r2, r2, #4
 8014b9c:	b292      	uxth	r2, r2
 8014b9e:	4413      	add	r3, r2
 8014ba0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d204      	bcs.n	8014bb4 <find_volume+0x2b0>
 8014baa:	230d      	movs	r3, #13
 8014bac:	e0eb      	b.n	8014d86 <find_volume+0x482>
 8014bae:	bf00      	nop
 8014bb0:	20001330 	.word	0x20001330
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014bbc:	8952      	ldrh	r2, [r2, #10]
 8014bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8014bc2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d101      	bne.n	8014bce <find_volume+0x2ca>
 8014bca:	230d      	movs	r3, #13
 8014bcc:	e0db      	b.n	8014d86 <find_volume+0x482>
		fmt = FS_FAT32;
 8014bce:	2303      	movs	r3, #3
 8014bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014bda:	4293      	cmp	r3, r2
 8014bdc:	d802      	bhi.n	8014be4 <find_volume+0x2e0>
 8014bde:	2302      	movs	r3, #2
 8014be0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014bea:	4293      	cmp	r3, r2
 8014bec:	d802      	bhi.n	8014bf4 <find_volume+0x2f0>
 8014bee:	2301      	movs	r3, #1
 8014bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf6:	1c9a      	adds	r2, r3, #2
 8014bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8014bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c00:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014c02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c06:	441a      	add	r2, r3
 8014c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c0a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c10:	441a      	add	r2, r3
 8014c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c14:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8014c16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014c1a:	2b03      	cmp	r3, #3
 8014c1c:	d11e      	bne.n	8014c5c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c20:	3330      	adds	r3, #48	; 0x30
 8014c22:	332a      	adds	r3, #42	; 0x2a
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7fe fc4f 	bl	80134c8 <ld_word>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d001      	beq.n	8014c34 <find_volume+0x330>
 8014c30:	230d      	movs	r3, #13
 8014c32:	e0a8      	b.n	8014d86 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c36:	891b      	ldrh	r3, [r3, #8]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d001      	beq.n	8014c40 <find_volume+0x33c>
 8014c3c:	230d      	movs	r3, #13
 8014c3e:	e0a2      	b.n	8014d86 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c42:	3330      	adds	r3, #48	; 0x30
 8014c44:	332c      	adds	r3, #44	; 0x2c
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7fe fc56 	bl	80134f8 <ld_dword>
 8014c4c:	4602      	mov	r2, r0
 8014c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c50:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c54:	695b      	ldr	r3, [r3, #20]
 8014c56:	009b      	lsls	r3, r3, #2
 8014c58:	647b      	str	r3, [r7, #68]	; 0x44
 8014c5a:	e01f      	b.n	8014c9c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c5e:	891b      	ldrh	r3, [r3, #8]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d101      	bne.n	8014c68 <find_volume+0x364>
 8014c64:	230d      	movs	r3, #13
 8014c66:	e08e      	b.n	8014d86 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c6a:	6a1a      	ldr	r2, [r3, #32]
 8014c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c6e:	441a      	add	r2, r3
 8014c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c72:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014c74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014c78:	2b02      	cmp	r3, #2
 8014c7a:	d103      	bne.n	8014c84 <find_volume+0x380>
 8014c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c7e:	695b      	ldr	r3, [r3, #20]
 8014c80:	005b      	lsls	r3, r3, #1
 8014c82:	e00a      	b.n	8014c9a <find_volume+0x396>
 8014c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c86:	695a      	ldr	r2, [r3, #20]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	005b      	lsls	r3, r3, #1
 8014c8c:	4413      	add	r3, r2
 8014c8e:	085a      	lsrs	r2, r3, #1
 8014c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c92:	695b      	ldr	r3, [r3, #20]
 8014c94:	f003 0301 	and.w	r3, r3, #1
 8014c98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014c9a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9e:	699a      	ldr	r2, [r3, #24]
 8014ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ca2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014ca6:	0a5b      	lsrs	r3, r3, #9
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	d201      	bcs.n	8014cb0 <find_volume+0x3ac>
 8014cac:	230d      	movs	r3, #13
 8014cae:	e06a      	b.n	8014d86 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014cb6:	611a      	str	r2, [r3, #16]
 8014cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cba:	691a      	ldr	r2, [r3, #16]
 8014cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cbe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc2:	2280      	movs	r2, #128	; 0x80
 8014cc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014cca:	2b03      	cmp	r3, #3
 8014ccc:	d149      	bne.n	8014d62 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cd0:	3330      	adds	r3, #48	; 0x30
 8014cd2:	3330      	adds	r3, #48	; 0x30
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7fe fbf7 	bl	80134c8 <ld_word>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d140      	bne.n	8014d62 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ce8:	f7fe fe9e 	bl	8013a28 <move_window>
 8014cec:	4603      	mov	r3, r0
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d137      	bne.n	8014d62 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cfa:	3330      	adds	r3, #48	; 0x30
 8014cfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7fe fbe1 	bl	80134c8 <ld_word>
 8014d06:	4603      	mov	r3, r0
 8014d08:	461a      	mov	r2, r3
 8014d0a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d127      	bne.n	8014d62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d14:	3330      	adds	r3, #48	; 0x30
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fe fbee 	bl	80134f8 <ld_dword>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	4a1c      	ldr	r2, [pc, #112]	; (8014d90 <find_volume+0x48c>)
 8014d20:	4293      	cmp	r3, r2
 8014d22:	d11e      	bne.n	8014d62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d26:	3330      	adds	r3, #48	; 0x30
 8014d28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7fe fbe3 	bl	80134f8 <ld_dword>
 8014d32:	4603      	mov	r3, r0
 8014d34:	4a17      	ldr	r2, [pc, #92]	; (8014d94 <find_volume+0x490>)
 8014d36:	4293      	cmp	r3, r2
 8014d38:	d113      	bne.n	8014d62 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d3c:	3330      	adds	r3, #48	; 0x30
 8014d3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7fe fbd8 	bl	80134f8 <ld_dword>
 8014d48:	4602      	mov	r2, r0
 8014d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d4c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d50:	3330      	adds	r3, #48	; 0x30
 8014d52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fe fbce 	bl	80134f8 <ld_dword>
 8014d5c:	4602      	mov	r2, r0
 8014d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d60:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d64:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014d68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014d6a:	4b0b      	ldr	r3, [pc, #44]	; (8014d98 <find_volume+0x494>)
 8014d6c:	881b      	ldrh	r3, [r3, #0]
 8014d6e:	3301      	adds	r3, #1
 8014d70:	b29a      	uxth	r2, r3
 8014d72:	4b09      	ldr	r3, [pc, #36]	; (8014d98 <find_volume+0x494>)
 8014d74:	801a      	strh	r2, [r3, #0]
 8014d76:	4b08      	ldr	r3, [pc, #32]	; (8014d98 <find_volume+0x494>)
 8014d78:	881a      	ldrh	r2, [r3, #0]
 8014d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014d7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014d80:	f7fe fdea 	bl	8013958 <clear_lock>
#endif
	return FR_OK;
 8014d84:	2300      	movs	r3, #0
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3758      	adds	r7, #88	; 0x58
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	41615252 	.word	0x41615252
 8014d94:	61417272 	.word	0x61417272
 8014d98:	20001334 	.word	0x20001334

08014d9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b084      	sub	sp, #16
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014da6:	2309      	movs	r3, #9
 8014da8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d01c      	beq.n	8014dea <validate+0x4e>
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d018      	beq.n	8014dea <validate+0x4e>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d013      	beq.n	8014dea <validate+0x4e>
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	889a      	ldrh	r2, [r3, #4]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	88db      	ldrh	r3, [r3, #6]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d10c      	bne.n	8014dea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	785b      	ldrb	r3, [r3, #1]
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7fe fad8 	bl	801338c <disk_status>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	f003 0301 	and.w	r3, r3, #1
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d101      	bne.n	8014dea <validate+0x4e>
			res = FR_OK;
 8014de6:	2300      	movs	r3, #0
 8014de8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014dea:	7bfb      	ldrb	r3, [r7, #15]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d102      	bne.n	8014df6 <validate+0x5a>
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	e000      	b.n	8014df8 <validate+0x5c>
 8014df6:	2300      	movs	r3, #0
 8014df8:	683a      	ldr	r2, [r7, #0]
 8014dfa:	6013      	str	r3, [r2, #0]
	return res;
 8014dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3710      	adds	r7, #16
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
	...

08014e08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b088      	sub	sp, #32
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	4613      	mov	r3, r2
 8014e14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014e1a:	f107 0310 	add.w	r3, r7, #16
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7ff fcd5 	bl	80147ce <get_ldnumber>
 8014e24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014e26:	69fb      	ldr	r3, [r7, #28]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	da01      	bge.n	8014e30 <f_mount+0x28>
 8014e2c:	230b      	movs	r3, #11
 8014e2e:	e02b      	b.n	8014e88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014e30:	4a17      	ldr	r2, [pc, #92]	; (8014e90 <f_mount+0x88>)
 8014e32:	69fb      	ldr	r3, [r7, #28]
 8014e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d005      	beq.n	8014e4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014e40:	69b8      	ldr	r0, [r7, #24]
 8014e42:	f7fe fd89 	bl	8013958 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d002      	beq.n	8014e58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2200      	movs	r2, #0
 8014e56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014e58:	68fa      	ldr	r2, [r7, #12]
 8014e5a:	490d      	ldr	r1, [pc, #52]	; (8014e90 <f_mount+0x88>)
 8014e5c:	69fb      	ldr	r3, [r7, #28]
 8014e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d002      	beq.n	8014e6e <f_mount+0x66>
 8014e68:	79fb      	ldrb	r3, [r7, #7]
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	d001      	beq.n	8014e72 <f_mount+0x6a>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	e00a      	b.n	8014e88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014e72:	f107 010c 	add.w	r1, r7, #12
 8014e76:	f107 0308 	add.w	r3, r7, #8
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7ff fd41 	bl	8014904 <find_volume>
 8014e82:	4603      	mov	r3, r0
 8014e84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3720      	adds	r7, #32
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	20001330 	.word	0x20001330

08014e94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b09a      	sub	sp, #104	; 0x68
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	60f8      	str	r0, [r7, #12]
 8014e9c:	60b9      	str	r1, [r7, #8]
 8014e9e:	4613      	mov	r3, r2
 8014ea0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d101      	bne.n	8014eac <f_open+0x18>
 8014ea8:	2309      	movs	r3, #9
 8014eaa:	e1ad      	b.n	8015208 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014eac:	79fb      	ldrb	r3, [r7, #7]
 8014eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014eb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014eb4:	79fa      	ldrb	r2, [r7, #7]
 8014eb6:	f107 0114 	add.w	r1, r7, #20
 8014eba:	f107 0308 	add.w	r3, r7, #8
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7ff fd20 	bl	8014904 <find_volume>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014eca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	f040 8191 	bne.w	80151f6 <f_open+0x362>
		dj.obj.fs = fs;
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014ed8:	68ba      	ldr	r2, [r7, #8]
 8014eda:	f107 0318 	add.w	r3, r7, #24
 8014ede:	4611      	mov	r1, r2
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7ff fc03 	bl	80146ec <follow_path>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014eec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d11a      	bne.n	8014f2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014ef8:	b25b      	sxtb	r3, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	da03      	bge.n	8014f06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8014efe:	2306      	movs	r3, #6
 8014f00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014f04:	e011      	b.n	8014f2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014f06:	79fb      	ldrb	r3, [r7, #7]
 8014f08:	f023 0301 	bic.w	r3, r3, #1
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	bf14      	ite	ne
 8014f10:	2301      	movne	r3, #1
 8014f12:	2300      	moveq	r3, #0
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	461a      	mov	r2, r3
 8014f18:	f107 0318 	add.w	r3, r7, #24
 8014f1c:	4611      	mov	r1, r2
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7fe fbd2 	bl	80136c8 <chk_lock>
 8014f24:	4603      	mov	r3, r0
 8014f26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014f2a:	79fb      	ldrb	r3, [r7, #7]
 8014f2c:	f003 031c 	and.w	r3, r3, #28
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d07f      	beq.n	8015034 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014f34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d017      	beq.n	8014f6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f40:	2b04      	cmp	r3, #4
 8014f42:	d10e      	bne.n	8014f62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014f44:	f7fe fc1c 	bl	8013780 <enq_lock>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d006      	beq.n	8014f5c <f_open+0xc8>
 8014f4e:	f107 0318 	add.w	r3, r7, #24
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7ff fb03 	bl	801455e <dir_register>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	e000      	b.n	8014f5e <f_open+0xca>
 8014f5c:	2312      	movs	r3, #18
 8014f5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014f62:	79fb      	ldrb	r3, [r7, #7]
 8014f64:	f043 0308 	orr.w	r3, r3, #8
 8014f68:	71fb      	strb	r3, [r7, #7]
 8014f6a:	e010      	b.n	8014f8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014f6c:	7fbb      	ldrb	r3, [r7, #30]
 8014f6e:	f003 0311 	and.w	r3, r3, #17
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d003      	beq.n	8014f7e <f_open+0xea>
					res = FR_DENIED;
 8014f76:	2307      	movs	r3, #7
 8014f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014f7c:	e007      	b.n	8014f8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014f7e:	79fb      	ldrb	r3, [r7, #7]
 8014f80:	f003 0304 	and.w	r3, r3, #4
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d002      	beq.n	8014f8e <f_open+0xfa>
 8014f88:	2308      	movs	r3, #8
 8014f8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014f8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d168      	bne.n	8015068 <f_open+0x1d4>
 8014f96:	79fb      	ldrb	r3, [r7, #7]
 8014f98:	f003 0308 	and.w	r3, r3, #8
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d063      	beq.n	8015068 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014fa0:	f7fc fbd0 	bl	8011744 <get_fattime>
 8014fa4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa8:	330e      	adds	r3, #14
 8014faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7fe fae1 	bl	8013574 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fb4:	3316      	adds	r3, #22
 8014fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7fe fadb 	bl	8013574 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fc0:	330b      	adds	r3, #11
 8014fc2:	2220      	movs	r2, #32
 8014fc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014fca:	4611      	mov	r1, r2
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7ff fa32 	bl	8014436 <ld_clust>
 8014fd2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014fd8:	2200      	movs	r2, #0
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7ff fa4a 	bl	8014474 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe2:	331c      	adds	r3, #28
 8014fe4:	2100      	movs	r1, #0
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7fe fac4 	bl	8013574 <st_dword>
					fs->wflag = 1;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	2201      	movs	r2, #1
 8014ff0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d037      	beq.n	8015068 <f_open+0x1d4>
						dw = fs->winsect;
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ffc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014ffe:	f107 0318 	add.w	r3, r7, #24
 8015002:	2200      	movs	r2, #0
 8015004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015006:	4618      	mov	r0, r3
 8015008:	f7fe ff5d 	bl	8013ec6 <remove_chain>
 801500c:	4603      	mov	r3, r0
 801500e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8015012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015016:	2b00      	cmp	r3, #0
 8015018:	d126      	bne.n	8015068 <f_open+0x1d4>
							res = move_window(fs, dw);
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801501e:	4618      	mov	r0, r3
 8015020:	f7fe fd02 	bl	8013a28 <move_window>
 8015024:	4603      	mov	r3, r0
 8015026:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801502e:	3a01      	subs	r2, #1
 8015030:	60da      	str	r2, [r3, #12]
 8015032:	e019      	b.n	8015068 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015034:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015038:	2b00      	cmp	r3, #0
 801503a:	d115      	bne.n	8015068 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801503c:	7fbb      	ldrb	r3, [r7, #30]
 801503e:	f003 0310 	and.w	r3, r3, #16
 8015042:	2b00      	cmp	r3, #0
 8015044:	d003      	beq.n	801504e <f_open+0x1ba>
					res = FR_NO_FILE;
 8015046:	2304      	movs	r3, #4
 8015048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801504c:	e00c      	b.n	8015068 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801504e:	79fb      	ldrb	r3, [r7, #7]
 8015050:	f003 0302 	and.w	r3, r3, #2
 8015054:	2b00      	cmp	r3, #0
 8015056:	d007      	beq.n	8015068 <f_open+0x1d4>
 8015058:	7fbb      	ldrb	r3, [r7, #30]
 801505a:	f003 0301 	and.w	r3, r3, #1
 801505e:	2b00      	cmp	r3, #0
 8015060:	d002      	beq.n	8015068 <f_open+0x1d4>
						res = FR_DENIED;
 8015062:	2307      	movs	r3, #7
 8015064:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8015068:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801506c:	2b00      	cmp	r3, #0
 801506e:	d128      	bne.n	80150c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015070:	79fb      	ldrb	r3, [r7, #7]
 8015072:	f003 0308 	and.w	r3, r3, #8
 8015076:	2b00      	cmp	r3, #0
 8015078:	d003      	beq.n	8015082 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801507a:	79fb      	ldrb	r3, [r7, #7]
 801507c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015080:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801508a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015090:	79fb      	ldrb	r3, [r7, #7]
 8015092:	f023 0301 	bic.w	r3, r3, #1
 8015096:	2b00      	cmp	r3, #0
 8015098:	bf14      	ite	ne
 801509a:	2301      	movne	r3, #1
 801509c:	2300      	moveq	r3, #0
 801509e:	b2db      	uxtb	r3, r3
 80150a0:	461a      	mov	r2, r3
 80150a2:	f107 0318 	add.w	r3, r7, #24
 80150a6:	4611      	mov	r1, r2
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7fe fb8b 	bl	80137c4 <inc_lock>
 80150ae:	4602      	mov	r2, r0
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	691b      	ldr	r3, [r3, #16]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d102      	bne.n	80150c2 <f_open+0x22e>
 80150bc:	2302      	movs	r3, #2
 80150be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80150c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f040 8095 	bne.w	80151f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80150cc:	697b      	ldr	r3, [r7, #20]
 80150ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150d0:	4611      	mov	r1, r2
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7ff f9af 	bl	8014436 <ld_clust>
 80150d8:	4602      	mov	r2, r0
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80150de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e0:	331c      	adds	r3, #28
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7fe fa08 	bl	80134f8 <ld_dword>
 80150e8:	4602      	mov	r2, r0
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2200      	movs	r2, #0
 80150f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80150f4:	697a      	ldr	r2, [r7, #20]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	88da      	ldrh	r2, [r3, #6]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	79fa      	ldrb	r2, [r7, #7]
 8015106:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	2200      	movs	r2, #0
 801510c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2200      	movs	r2, #0
 8015112:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2200      	movs	r2, #0
 8015118:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	3330      	adds	r3, #48	; 0x30
 801511e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015122:	2100      	movs	r1, #0
 8015124:	4618      	mov	r0, r3
 8015126:	f7fe fa72 	bl	801360e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801512a:	79fb      	ldrb	r3, [r7, #7]
 801512c:	f003 0320 	and.w	r3, r3, #32
 8015130:	2b00      	cmp	r3, #0
 8015132:	d060      	beq.n	80151f6 <f_open+0x362>
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	68db      	ldr	r3, [r3, #12]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d05c      	beq.n	80151f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	68da      	ldr	r2, [r3, #12]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	895b      	ldrh	r3, [r3, #10]
 8015148:	025b      	lsls	r3, r3, #9
 801514a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	68db      	ldr	r3, [r3, #12]
 8015156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015158:	e016      	b.n	8015188 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801515e:	4618      	mov	r0, r3
 8015160:	f7fe fd1d 	bl	8013b9e <get_fat>
 8015164:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8015166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015168:	2b01      	cmp	r3, #1
 801516a:	d802      	bhi.n	8015172 <f_open+0x2de>
 801516c:	2302      	movs	r3, #2
 801516e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015178:	d102      	bne.n	8015180 <f_open+0x2ec>
 801517a:	2301      	movs	r3, #1
 801517c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015184:	1ad3      	subs	r3, r2, r3
 8015186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015188:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801518c:	2b00      	cmp	r3, #0
 801518e:	d103      	bne.n	8015198 <f_open+0x304>
 8015190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015194:	429a      	cmp	r2, r3
 8015196:	d8e0      	bhi.n	801515a <f_open+0x2c6>
				}
				fp->clust = clst;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801519c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801519e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d127      	bne.n	80151f6 <f_open+0x362>
 80151a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d022      	beq.n	80151f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fe fcd3 	bl	8013b60 <clust2sect>
 80151ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80151bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d103      	bne.n	80151ca <f_open+0x336>
						res = FR_INT_ERR;
 80151c2:	2302      	movs	r3, #2
 80151c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80151c8:	e015      	b.n	80151f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80151ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151cc:	0a5a      	lsrs	r2, r3, #9
 80151ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151d0:	441a      	add	r2, r3
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	7858      	ldrb	r0, [r3, #1]
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	6a1a      	ldr	r2, [r3, #32]
 80151e4:	2301      	movs	r3, #1
 80151e6:	f7fe f911 	bl	801340c <disk_read>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d002      	beq.n	80151f6 <f_open+0x362>
 80151f0:	2301      	movs	r3, #1
 80151f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80151f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d002      	beq.n	8015204 <f_open+0x370>
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2200      	movs	r2, #0
 8015202:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8015208:	4618      	mov	r0, r3
 801520a:	3768      	adds	r7, #104	; 0x68
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b08e      	sub	sp, #56	; 0x38
 8015214:	af00      	add	r7, sp, #0
 8015216:	60f8      	str	r0, [r7, #12]
 8015218:	60b9      	str	r1, [r7, #8]
 801521a:	607a      	str	r2, [r7, #4]
 801521c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	2200      	movs	r2, #0
 8015226:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	f107 0214 	add.w	r2, r7, #20
 801522e:	4611      	mov	r1, r2
 8015230:	4618      	mov	r0, r3
 8015232:	f7ff fdb3 	bl	8014d9c <validate>
 8015236:	4603      	mov	r3, r0
 8015238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801523c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015240:	2b00      	cmp	r3, #0
 8015242:	d107      	bne.n	8015254 <f_read+0x44>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	7d5b      	ldrb	r3, [r3, #21]
 8015248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801524c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015250:	2b00      	cmp	r3, #0
 8015252:	d002      	beq.n	801525a <f_read+0x4a>
 8015254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015258:	e115      	b.n	8015486 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	7d1b      	ldrb	r3, [r3, #20]
 801525e:	f003 0301 	and.w	r3, r3, #1
 8015262:	2b00      	cmp	r3, #0
 8015264:	d101      	bne.n	801526a <f_read+0x5a>
 8015266:	2307      	movs	r3, #7
 8015268:	e10d      	b.n	8015486 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	68da      	ldr	r2, [r3, #12]
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	699b      	ldr	r3, [r3, #24]
 8015272:	1ad3      	subs	r3, r2, r3
 8015274:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8015276:	687a      	ldr	r2, [r7, #4]
 8015278:	6a3b      	ldr	r3, [r7, #32]
 801527a:	429a      	cmp	r2, r3
 801527c:	f240 80fe 	bls.w	801547c <f_read+0x26c>
 8015280:	6a3b      	ldr	r3, [r7, #32]
 8015282:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8015284:	e0fa      	b.n	801547c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	699b      	ldr	r3, [r3, #24]
 801528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801528e:	2b00      	cmp	r3, #0
 8015290:	f040 80c6 	bne.w	8015420 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	699b      	ldr	r3, [r3, #24]
 8015298:	0a5b      	lsrs	r3, r3, #9
 801529a:	697a      	ldr	r2, [r7, #20]
 801529c:	8952      	ldrh	r2, [r2, #10]
 801529e:	3a01      	subs	r2, #1
 80152a0:	4013      	ands	r3, r2
 80152a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d12f      	bne.n	801530a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	699b      	ldr	r3, [r3, #24]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d103      	bne.n	80152ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	689b      	ldr	r3, [r3, #8]
 80152b6:	633b      	str	r3, [r7, #48]	; 0x30
 80152b8:	e013      	b.n	80152e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d007      	beq.n	80152d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	699b      	ldr	r3, [r3, #24]
 80152c6:	4619      	mov	r1, r3
 80152c8:	68f8      	ldr	r0, [r7, #12]
 80152ca:	f7fe fef9 	bl	80140c0 <clmt_clust>
 80152ce:	6338      	str	r0, [r7, #48]	; 0x30
 80152d0:	e007      	b.n	80152e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	69db      	ldr	r3, [r3, #28]
 80152d8:	4619      	mov	r1, r3
 80152da:	4610      	mov	r0, r2
 80152dc:	f7fe fc5f 	bl	8013b9e <get_fat>
 80152e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80152e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	d804      	bhi.n	80152f2 <f_read+0xe2>
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	2202      	movs	r2, #2
 80152ec:	755a      	strb	r2, [r3, #21]
 80152ee:	2302      	movs	r3, #2
 80152f0:	e0c9      	b.n	8015486 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80152f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152f8:	d104      	bne.n	8015304 <f_read+0xf4>
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	2201      	movs	r2, #1
 80152fe:	755a      	strb	r2, [r3, #21]
 8015300:	2301      	movs	r3, #1
 8015302:	e0c0      	b.n	8015486 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015308:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801530a:	697a      	ldr	r2, [r7, #20]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	69db      	ldr	r3, [r3, #28]
 8015310:	4619      	mov	r1, r3
 8015312:	4610      	mov	r0, r2
 8015314:	f7fe fc24 	bl	8013b60 <clust2sect>
 8015318:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801531a:	69bb      	ldr	r3, [r7, #24]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d104      	bne.n	801532a <f_read+0x11a>
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	2202      	movs	r2, #2
 8015324:	755a      	strb	r2, [r3, #21]
 8015326:	2302      	movs	r3, #2
 8015328:	e0ad      	b.n	8015486 <f_read+0x276>
			sect += csect;
 801532a:	69ba      	ldr	r2, [r7, #24]
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	4413      	add	r3, r2
 8015330:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	0a5b      	lsrs	r3, r3, #9
 8015336:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8015338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533a:	2b00      	cmp	r3, #0
 801533c:	d039      	beq.n	80153b2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801533e:	69fa      	ldr	r2, [r7, #28]
 8015340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015342:	4413      	add	r3, r2
 8015344:	697a      	ldr	r2, [r7, #20]
 8015346:	8952      	ldrh	r2, [r2, #10]
 8015348:	4293      	cmp	r3, r2
 801534a:	d905      	bls.n	8015358 <f_read+0x148>
					cc = fs->csize - csect;
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	895b      	ldrh	r3, [r3, #10]
 8015350:	461a      	mov	r2, r3
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	1ad3      	subs	r3, r2, r3
 8015356:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	7858      	ldrb	r0, [r3, #1]
 801535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535e:	69ba      	ldr	r2, [r7, #24]
 8015360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015362:	f7fe f853 	bl	801340c <disk_read>
 8015366:	4603      	mov	r3, r0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d004      	beq.n	8015376 <f_read+0x166>
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2201      	movs	r2, #1
 8015370:	755a      	strb	r2, [r3, #21]
 8015372:	2301      	movs	r3, #1
 8015374:	e087      	b.n	8015486 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	7d1b      	ldrb	r3, [r3, #20]
 801537a:	b25b      	sxtb	r3, r3
 801537c:	2b00      	cmp	r3, #0
 801537e:	da14      	bge.n	80153aa <f_read+0x19a>
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	6a1a      	ldr	r2, [r3, #32]
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	1ad3      	subs	r3, r2, r3
 8015388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801538a:	429a      	cmp	r2, r3
 801538c:	d90d      	bls.n	80153aa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	6a1a      	ldr	r2, [r3, #32]
 8015392:	69bb      	ldr	r3, [r7, #24]
 8015394:	1ad3      	subs	r3, r2, r3
 8015396:	025b      	lsls	r3, r3, #9
 8015398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801539a:	18d0      	adds	r0, r2, r3
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	3330      	adds	r3, #48	; 0x30
 80153a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153a4:	4619      	mov	r1, r3
 80153a6:	f7fe f911 	bl	80135cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80153aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ac:	025b      	lsls	r3, r3, #9
 80153ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80153b0:	e050      	b.n	8015454 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	6a1b      	ldr	r3, [r3, #32]
 80153b6:	69ba      	ldr	r2, [r7, #24]
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d02e      	beq.n	801541a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	7d1b      	ldrb	r3, [r3, #20]
 80153c0:	b25b      	sxtb	r3, r3
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	da18      	bge.n	80153f8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	7858      	ldrb	r0, [r3, #1]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	6a1a      	ldr	r2, [r3, #32]
 80153d4:	2301      	movs	r3, #1
 80153d6:	f7fe f839 	bl	801344c <disk_write>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d004      	beq.n	80153ea <f_read+0x1da>
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2201      	movs	r2, #1
 80153e4:	755a      	strb	r2, [r3, #21]
 80153e6:	2301      	movs	r3, #1
 80153e8:	e04d      	b.n	8015486 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	7d1b      	ldrb	r3, [r3, #20]
 80153ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153f2:	b2da      	uxtb	r2, r3
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	7858      	ldrb	r0, [r3, #1]
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015402:	2301      	movs	r3, #1
 8015404:	69ba      	ldr	r2, [r7, #24]
 8015406:	f7fe f801 	bl	801340c <disk_read>
 801540a:	4603      	mov	r3, r0
 801540c:	2b00      	cmp	r3, #0
 801540e:	d004      	beq.n	801541a <f_read+0x20a>
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2201      	movs	r2, #1
 8015414:	755a      	strb	r2, [r3, #21]
 8015416:	2301      	movs	r3, #1
 8015418:	e035      	b.n	8015486 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	69ba      	ldr	r2, [r7, #24]
 801541e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	699b      	ldr	r3, [r3, #24]
 8015424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015428:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801542c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	429a      	cmp	r2, r3
 8015434:	d901      	bls.n	801543a <f_read+0x22a>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	699b      	ldr	r3, [r3, #24]
 8015444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015448:	4413      	add	r3, r2
 801544a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801544c:	4619      	mov	r1, r3
 801544e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015450:	f7fe f8bc 	bl	80135cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015458:	4413      	add	r3, r2
 801545a:	627b      	str	r3, [r7, #36]	; 0x24
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	699a      	ldr	r2, [r3, #24]
 8015460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015462:	441a      	add	r2, r3
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	619a      	str	r2, [r3, #24]
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801546e:	441a      	add	r2, r3
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	601a      	str	r2, [r3, #0]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015478:	1ad3      	subs	r3, r2, r3
 801547a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	f47f af01 	bne.w	8015286 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8015484:	2300      	movs	r3, #0
}
 8015486:	4618      	mov	r0, r3
 8015488:	3738      	adds	r7, #56	; 0x38
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}

0801548e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801548e:	b580      	push	{r7, lr}
 8015490:	b08c      	sub	sp, #48	; 0x30
 8015492:	af00      	add	r7, sp, #0
 8015494:	60f8      	str	r0, [r7, #12]
 8015496:	60b9      	str	r1, [r7, #8]
 8015498:	607a      	str	r2, [r7, #4]
 801549a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	2200      	movs	r2, #0
 80154a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	f107 0210 	add.w	r2, r7, #16
 80154ac:	4611      	mov	r1, r2
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7ff fc74 	bl	8014d9c <validate>
 80154b4:	4603      	mov	r3, r0
 80154b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80154ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d107      	bne.n	80154d2 <f_write+0x44>
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	7d5b      	ldrb	r3, [r3, #21]
 80154c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80154ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d002      	beq.n	80154d8 <f_write+0x4a>
 80154d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80154d6:	e14b      	b.n	8015770 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	7d1b      	ldrb	r3, [r3, #20]
 80154dc:	f003 0302 	and.w	r3, r3, #2
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d101      	bne.n	80154e8 <f_write+0x5a>
 80154e4:	2307      	movs	r3, #7
 80154e6:	e143      	b.n	8015770 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	699a      	ldr	r2, [r3, #24]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	441a      	add	r2, r3
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	699b      	ldr	r3, [r3, #24]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	f080 812d 	bcs.w	8015754 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	699b      	ldr	r3, [r3, #24]
 80154fe:	43db      	mvns	r3, r3
 8015500:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015502:	e127      	b.n	8015754 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	699b      	ldr	r3, [r3, #24]
 8015508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801550c:	2b00      	cmp	r3, #0
 801550e:	f040 80e3 	bne.w	80156d8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	699b      	ldr	r3, [r3, #24]
 8015516:	0a5b      	lsrs	r3, r3, #9
 8015518:	693a      	ldr	r2, [r7, #16]
 801551a:	8952      	ldrh	r2, [r2, #10]
 801551c:	3a01      	subs	r2, #1
 801551e:	4013      	ands	r3, r2
 8015520:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d143      	bne.n	80155b0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	699b      	ldr	r3, [r3, #24]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d10c      	bne.n	801554a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	689b      	ldr	r3, [r3, #8]
 8015534:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015538:	2b00      	cmp	r3, #0
 801553a:	d11a      	bne.n	8015572 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2100      	movs	r1, #0
 8015540:	4618      	mov	r0, r3
 8015542:	f7fe fd25 	bl	8013f90 <create_chain>
 8015546:	62b8      	str	r0, [r7, #40]	; 0x28
 8015548:	e013      	b.n	8015572 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801554e:	2b00      	cmp	r3, #0
 8015550:	d007      	beq.n	8015562 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	699b      	ldr	r3, [r3, #24]
 8015556:	4619      	mov	r1, r3
 8015558:	68f8      	ldr	r0, [r7, #12]
 801555a:	f7fe fdb1 	bl	80140c0 <clmt_clust>
 801555e:	62b8      	str	r0, [r7, #40]	; 0x28
 8015560:	e007      	b.n	8015572 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015562:	68fa      	ldr	r2, [r7, #12]
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	69db      	ldr	r3, [r3, #28]
 8015568:	4619      	mov	r1, r3
 801556a:	4610      	mov	r0, r2
 801556c:	f7fe fd10 	bl	8013f90 <create_chain>
 8015570:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015574:	2b00      	cmp	r3, #0
 8015576:	f000 80f2 	beq.w	801575e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557c:	2b01      	cmp	r3, #1
 801557e:	d104      	bne.n	801558a <f_write+0xfc>
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2202      	movs	r2, #2
 8015584:	755a      	strb	r2, [r3, #21]
 8015586:	2302      	movs	r3, #2
 8015588:	e0f2      	b.n	8015770 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015590:	d104      	bne.n	801559c <f_write+0x10e>
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	2201      	movs	r2, #1
 8015596:	755a      	strb	r2, [r3, #21]
 8015598:	2301      	movs	r3, #1
 801559a:	e0e9      	b.n	8015770 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	689b      	ldr	r3, [r3, #8]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d102      	bne.n	80155b0 <f_write+0x122>
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	7d1b      	ldrb	r3, [r3, #20]
 80155b4:	b25b      	sxtb	r3, r3
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	da18      	bge.n	80155ec <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	7858      	ldrb	r0, [r3, #1]
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	6a1a      	ldr	r2, [r3, #32]
 80155c8:	2301      	movs	r3, #1
 80155ca:	f7fd ff3f 	bl	801344c <disk_write>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d004      	beq.n	80155de <f_write+0x150>
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2201      	movs	r2, #1
 80155d8:	755a      	strb	r2, [r3, #21]
 80155da:	2301      	movs	r3, #1
 80155dc:	e0c8      	b.n	8015770 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	7d1b      	ldrb	r3, [r3, #20]
 80155e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155e6:	b2da      	uxtb	r2, r3
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80155ec:	693a      	ldr	r2, [r7, #16]
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	69db      	ldr	r3, [r3, #28]
 80155f2:	4619      	mov	r1, r3
 80155f4:	4610      	mov	r0, r2
 80155f6:	f7fe fab3 	bl	8013b60 <clust2sect>
 80155fa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d104      	bne.n	801560c <f_write+0x17e>
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	2202      	movs	r2, #2
 8015606:	755a      	strb	r2, [r3, #21]
 8015608:	2302      	movs	r3, #2
 801560a:	e0b1      	b.n	8015770 <f_write+0x2e2>
			sect += csect;
 801560c:	697a      	ldr	r2, [r7, #20]
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	4413      	add	r3, r2
 8015612:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	0a5b      	lsrs	r3, r3, #9
 8015618:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801561a:	6a3b      	ldr	r3, [r7, #32]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d03c      	beq.n	801569a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015620:	69ba      	ldr	r2, [r7, #24]
 8015622:	6a3b      	ldr	r3, [r7, #32]
 8015624:	4413      	add	r3, r2
 8015626:	693a      	ldr	r2, [r7, #16]
 8015628:	8952      	ldrh	r2, [r2, #10]
 801562a:	4293      	cmp	r3, r2
 801562c:	d905      	bls.n	801563a <f_write+0x1ac>
					cc = fs->csize - csect;
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	895b      	ldrh	r3, [r3, #10]
 8015632:	461a      	mov	r2, r3
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	1ad3      	subs	r3, r2, r3
 8015638:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801563a:	693b      	ldr	r3, [r7, #16]
 801563c:	7858      	ldrb	r0, [r3, #1]
 801563e:	6a3b      	ldr	r3, [r7, #32]
 8015640:	697a      	ldr	r2, [r7, #20]
 8015642:	69f9      	ldr	r1, [r7, #28]
 8015644:	f7fd ff02 	bl	801344c <disk_write>
 8015648:	4603      	mov	r3, r0
 801564a:	2b00      	cmp	r3, #0
 801564c:	d004      	beq.n	8015658 <f_write+0x1ca>
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	2201      	movs	r2, #1
 8015652:	755a      	strb	r2, [r3, #21]
 8015654:	2301      	movs	r3, #1
 8015656:	e08b      	b.n	8015770 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	6a1a      	ldr	r2, [r3, #32]
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	1ad3      	subs	r3, r2, r3
 8015660:	6a3a      	ldr	r2, [r7, #32]
 8015662:	429a      	cmp	r2, r3
 8015664:	d915      	bls.n	8015692 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	6a1a      	ldr	r2, [r3, #32]
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	1ad3      	subs	r3, r2, r3
 8015674:	025b      	lsls	r3, r3, #9
 8015676:	69fa      	ldr	r2, [r7, #28]
 8015678:	4413      	add	r3, r2
 801567a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801567e:	4619      	mov	r1, r3
 8015680:	f7fd ffa4 	bl	80135cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	7d1b      	ldrb	r3, [r3, #20]
 8015688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801568c:	b2da      	uxtb	r2, r3
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015692:	6a3b      	ldr	r3, [r7, #32]
 8015694:	025b      	lsls	r3, r3, #9
 8015696:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015698:	e03f      	b.n	801571a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	6a1b      	ldr	r3, [r3, #32]
 801569e:	697a      	ldr	r2, [r7, #20]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d016      	beq.n	80156d2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	699a      	ldr	r2, [r3, #24]
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d210      	bcs.n	80156d2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80156b0:	693b      	ldr	r3, [r7, #16]
 80156b2:	7858      	ldrb	r0, [r3, #1]
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80156ba:	2301      	movs	r3, #1
 80156bc:	697a      	ldr	r2, [r7, #20]
 80156be:	f7fd fea5 	bl	801340c <disk_read>
 80156c2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d004      	beq.n	80156d2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2201      	movs	r2, #1
 80156cc:	755a      	strb	r2, [r3, #21]
 80156ce:	2301      	movs	r3, #1
 80156d0:	e04e      	b.n	8015770 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	697a      	ldr	r2, [r7, #20]
 80156d6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	699b      	ldr	r3, [r3, #24]
 80156dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80156e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80156e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d901      	bls.n	80156f2 <f_write+0x264>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	699b      	ldr	r3, [r3, #24]
 80156fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015700:	4413      	add	r3, r2
 8015702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015704:	69f9      	ldr	r1, [r7, #28]
 8015706:	4618      	mov	r0, r3
 8015708:	f7fd ff60 	bl	80135cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	7d1b      	ldrb	r3, [r3, #20]
 8015710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015714:	b2da      	uxtb	r2, r3
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801571a:	69fa      	ldr	r2, [r7, #28]
 801571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571e:	4413      	add	r3, r2
 8015720:	61fb      	str	r3, [r7, #28]
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	699a      	ldr	r2, [r3, #24]
 8015726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015728:	441a      	add	r2, r3
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	619a      	str	r2, [r3, #24]
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	68da      	ldr	r2, [r3, #12]
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	699b      	ldr	r3, [r3, #24]
 8015736:	429a      	cmp	r2, r3
 8015738:	bf38      	it	cc
 801573a:	461a      	movcc	r2, r3
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	60da      	str	r2, [r3, #12]
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015746:	441a      	add	r2, r3
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	601a      	str	r2, [r3, #0]
 801574c:	687a      	ldr	r2, [r7, #4]
 801574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015750:	1ad3      	subs	r3, r2, r3
 8015752:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2b00      	cmp	r3, #0
 8015758:	f47f aed4 	bne.w	8015504 <f_write+0x76>
 801575c:	e000      	b.n	8015760 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801575e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	7d1b      	ldrb	r3, [r3, #20]
 8015764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015768:	b2da      	uxtb	r2, r3
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801576e:	2300      	movs	r3, #0
}
 8015770:	4618      	mov	r0, r3
 8015772:	3730      	adds	r7, #48	; 0x30
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b086      	sub	sp, #24
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f107 0208 	add.w	r2, r7, #8
 8015786:	4611      	mov	r1, r2
 8015788:	4618      	mov	r0, r3
 801578a:	f7ff fb07 	bl	8014d9c <validate>
 801578e:	4603      	mov	r3, r0
 8015790:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015792:	7dfb      	ldrb	r3, [r7, #23]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d168      	bne.n	801586a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	7d1b      	ldrb	r3, [r3, #20]
 801579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d062      	beq.n	801586a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	7d1b      	ldrb	r3, [r3, #20]
 80157a8:	b25b      	sxtb	r3, r3
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	da15      	bge.n	80157da <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	7858      	ldrb	r0, [r3, #1]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	6a1a      	ldr	r2, [r3, #32]
 80157bc:	2301      	movs	r3, #1
 80157be:	f7fd fe45 	bl	801344c <disk_write>
 80157c2:	4603      	mov	r3, r0
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d001      	beq.n	80157cc <f_sync+0x54>
 80157c8:	2301      	movs	r3, #1
 80157ca:	e04f      	b.n	801586c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	7d1b      	ldrb	r3, [r3, #20]
 80157d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157d4:	b2da      	uxtb	r2, r3
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80157da:	f7fb ffb3 	bl	8011744 <get_fattime>
 80157de:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80157e0:	68ba      	ldr	r2, [r7, #8]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e6:	4619      	mov	r1, r3
 80157e8:	4610      	mov	r0, r2
 80157ea:	f7fe f91d 	bl	8013a28 <move_window>
 80157ee:	4603      	mov	r3, r0
 80157f0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80157f2:	7dfb      	ldrb	r3, [r7, #23]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d138      	bne.n	801586a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157fc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	330b      	adds	r3, #11
 8015802:	781a      	ldrb	r2, [r3, #0]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	330b      	adds	r3, #11
 8015808:	f042 0220 	orr.w	r2, r2, #32
 801580c:	b2d2      	uxtb	r2, r2
 801580e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6818      	ldr	r0, [r3, #0]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	689b      	ldr	r3, [r3, #8]
 8015818:	461a      	mov	r2, r3
 801581a:	68f9      	ldr	r1, [r7, #12]
 801581c:	f7fe fe2a 	bl	8014474 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	f103 021c 	add.w	r2, r3, #28
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	4619      	mov	r1, r3
 801582c:	4610      	mov	r0, r2
 801582e:	f7fd fea1 	bl	8013574 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	3316      	adds	r3, #22
 8015836:	6939      	ldr	r1, [r7, #16]
 8015838:	4618      	mov	r0, r3
 801583a:	f7fd fe9b 	bl	8013574 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	3312      	adds	r3, #18
 8015842:	2100      	movs	r1, #0
 8015844:	4618      	mov	r0, r3
 8015846:	f7fd fe7a 	bl	801353e <st_word>
					fs->wflag = 1;
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	2201      	movs	r2, #1
 801584e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	4618      	mov	r0, r3
 8015854:	f7fe f916 	bl	8013a84 <sync_fs>
 8015858:	4603      	mov	r3, r0
 801585a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	7d1b      	ldrb	r3, [r3, #20]
 8015860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015864:	b2da      	uxtb	r2, r3
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801586a:	7dfb      	ldrb	r3, [r7, #23]
}
 801586c:	4618      	mov	r0, r3
 801586e:	3718      	adds	r7, #24
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f7ff ff7b 	bl	8015778 <f_sync>
 8015882:	4603      	mov	r3, r0
 8015884:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015886:	7bfb      	ldrb	r3, [r7, #15]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d118      	bne.n	80158be <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f107 0208 	add.w	r2, r7, #8
 8015892:	4611      	mov	r1, r2
 8015894:	4618      	mov	r0, r3
 8015896:	f7ff fa81 	bl	8014d9c <validate>
 801589a:	4603      	mov	r3, r0
 801589c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801589e:	7bfb      	ldrb	r3, [r7, #15]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d10c      	bne.n	80158be <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	691b      	ldr	r3, [r3, #16]
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7fe f819 	bl	80138e0 <dec_lock>
 80158ae:	4603      	mov	r3, r0
 80158b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80158b2:	7bfb      	ldrb	r3, [r7, #15]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d102      	bne.n	80158be <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2200      	movs	r2, #0
 80158bc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80158be:	7bfb      	ldrb	r3, [r7, #15]
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3710      	adds	r7, #16
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80158c8:	b590      	push	{r4, r7, lr}
 80158ca:	b09d      	sub	sp, #116	; 0x74
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	607a      	str	r2, [r7, #4]
 80158d2:	603b      	str	r3, [r7, #0]
 80158d4:	460b      	mov	r3, r1
 80158d6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80158d8:	2301      	movs	r3, #1
 80158da:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80158dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80158e0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80158e2:	f107 030c 	add.w	r3, r7, #12
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7fe ff71 	bl	80147ce <get_ldnumber>
 80158ec:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80158ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	da02      	bge.n	80158fa <f_mkfs+0x32>
 80158f4:	230b      	movs	r3, #11
 80158f6:	f000 bc0d 	b.w	8016114 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80158fa:	4a94      	ldr	r2, [pc, #592]	; (8015b4c <f_mkfs+0x284>)
 80158fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d005      	beq.n	8015912 <f_mkfs+0x4a>
 8015906:	4a91      	ldr	r2, [pc, #580]	; (8015b4c <f_mkfs+0x284>)
 8015908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801590a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801590e:	2200      	movs	r2, #0
 8015910:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8015912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015914:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8015918:	2300      	movs	r3, #0
 801591a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801591e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015922:	4618      	mov	r0, r3
 8015924:	f7fd fd4c 	bl	80133c0 <disk_initialize>
 8015928:	4603      	mov	r3, r0
 801592a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801592e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015932:	f003 0301 	and.w	r3, r3, #1
 8015936:	2b00      	cmp	r3, #0
 8015938:	d001      	beq.n	801593e <f_mkfs+0x76>
 801593a:	2303      	movs	r3, #3
 801593c:	e3ea      	b.n	8016114 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801593e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015942:	f003 0304 	and.w	r3, r3, #4
 8015946:	2b00      	cmp	r3, #0
 8015948:	d001      	beq.n	801594e <f_mkfs+0x86>
 801594a:	230a      	movs	r3, #10
 801594c:	e3e2      	b.n	8016114 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801594e:	f107 0214 	add.w	r2, r7, #20
 8015952:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015956:	2103      	movs	r1, #3
 8015958:	4618      	mov	r0, r3
 801595a:	f7fd fd97 	bl	801348c <disk_ioctl>
 801595e:	4603      	mov	r3, r0
 8015960:	2b00      	cmp	r3, #0
 8015962:	d10c      	bne.n	801597e <f_mkfs+0xb6>
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d009      	beq.n	801597e <f_mkfs+0xb6>
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015970:	d805      	bhi.n	801597e <f_mkfs+0xb6>
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	1e5a      	subs	r2, r3, #1
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	4013      	ands	r3, r2
 801597a:	2b00      	cmp	r3, #0
 801597c:	d001      	beq.n	8015982 <f_mkfs+0xba>
 801597e:	2301      	movs	r3, #1
 8015980:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8015982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015986:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d003      	beq.n	8015996 <f_mkfs+0xce>
 801598e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	429a      	cmp	r2, r3
 8015994:	d309      	bcc.n	80159aa <f_mkfs+0xe2>
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801599c:	d805      	bhi.n	80159aa <f_mkfs+0xe2>
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	1e5a      	subs	r2, r3, #1
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	4013      	ands	r3, r2
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d001      	beq.n	80159ae <f_mkfs+0xe6>
 80159aa:	2313      	movs	r3, #19
 80159ac:	e3b2      	b.n	8016114 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80159ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80159b6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80159bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80159be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80159c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80159c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80159c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80159ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159cc:	fb02 f303 	mul.w	r3, r2, r3
 80159d0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80159d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d101      	bne.n	80159dc <f_mkfs+0x114>
 80159d8:	230e      	movs	r3, #14
 80159da:	e39b      	b.n	8016114 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80159dc:	f107 0210 	add.w	r2, r7, #16
 80159e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80159e4:	2101      	movs	r1, #1
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7fd fd50 	bl	801348c <disk_ioctl>
 80159ec:	4603      	mov	r3, r0
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d001      	beq.n	80159f6 <f_mkfs+0x12e>
 80159f2:	2301      	movs	r3, #1
 80159f4:	e38e      	b.n	8016114 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80159f6:	7afb      	ldrb	r3, [r7, #11]
 80159f8:	f003 0308 	and.w	r3, r3, #8
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d001      	beq.n	8015a04 <f_mkfs+0x13c>
 8015a00:	2300      	movs	r3, #0
 8015a02:	e000      	b.n	8015a06 <f_mkfs+0x13e>
 8015a04:	233f      	movs	r3, #63	; 0x3f
 8015a06:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d901      	bls.n	8015a14 <f_mkfs+0x14c>
 8015a10:	230e      	movs	r3, #14
 8015a12:	e37f      	b.n	8016114 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8015a14:	693a      	ldr	r2, [r7, #16]
 8015a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a18:	1ad3      	subs	r3, r2, r3
 8015a1a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8015a20:	d801      	bhi.n	8015a26 <f_mkfs+0x15e>
 8015a22:	230e      	movs	r3, #14
 8015a24:	e376      	b.n	8016114 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2b80      	cmp	r3, #128	; 0x80
 8015a2a:	d901      	bls.n	8015a30 <f_mkfs+0x168>
 8015a2c:	2313      	movs	r3, #19
 8015a2e:	e371      	b.n	8016114 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8015a30:	7afb      	ldrb	r3, [r7, #11]
 8015a32:	f003 0302 	and.w	r3, r3, #2
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00d      	beq.n	8015a56 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8015a3a:	7afb      	ldrb	r3, [r7, #11]
 8015a3c:	f003 0307 	and.w	r3, r3, #7
 8015a40:	2b02      	cmp	r3, #2
 8015a42:	d004      	beq.n	8015a4e <f_mkfs+0x186>
 8015a44:	7afb      	ldrb	r3, [r7, #11]
 8015a46:	f003 0301 	and.w	r3, r3, #1
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d103      	bne.n	8015a56 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8015a4e:	2303      	movs	r3, #3
 8015a50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015a54:	e009      	b.n	8015a6a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8015a56:	7afb      	ldrb	r3, [r7, #11]
 8015a58:	f003 0301 	and.w	r3, r3, #1
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d101      	bne.n	8015a64 <f_mkfs+0x19c>
 8015a60:	2313      	movs	r3, #19
 8015a62:	e357      	b.n	8016114 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8015a64:	2302      	movs	r3, #2
 8015a66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8015a6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015a72:	2b03      	cmp	r3, #3
 8015a74:	d13c      	bne.n	8015af0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8015a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d11b      	bne.n	8015ab4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	0c5b      	lsrs	r3, r3, #17
 8015a80:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015a82:	2300      	movs	r3, #0
 8015a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8015a86:	2301      	movs	r3, #1
 8015a88:	653b      	str	r3, [r7, #80]	; 0x50
 8015a8a:	e005      	b.n	8015a98 <f_mkfs+0x1d0>
 8015a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a8e:	3301      	adds	r3, #1
 8015a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8015a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	653b      	str	r3, [r7, #80]	; 0x50
 8015a98:	4a2d      	ldr	r2, [pc, #180]	; (8015b50 <f_mkfs+0x288>)
 8015a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d007      	beq.n	8015ab4 <f_mkfs+0x1ec>
 8015aa4:	4a2a      	ldr	r2, [pc, #168]	; (8015b50 <f_mkfs+0x288>)
 8015aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015aac:	461a      	mov	r2, r3
 8015aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ab0:	4293      	cmp	r3, r2
 8015ab2:	d2eb      	bcs.n	8015a8c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8015ab4:	693a      	ldr	r2, [r7, #16]
 8015ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015abc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8015abe:	6a3b      	ldr	r3, [r7, #32]
 8015ac0:	3302      	adds	r3, #2
 8015ac2:	009a      	lsls	r2, r3, #2
 8015ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ac6:	4413      	add	r3, r2
 8015ac8:	1e5a      	subs	r2, r3, #1
 8015aca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ad0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8015ad2:	2320      	movs	r3, #32
 8015ad4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8015ada:	6a3b      	ldr	r3, [r7, #32]
 8015adc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015ae0:	4293      	cmp	r3, r2
 8015ae2:	d903      	bls.n	8015aec <f_mkfs+0x224>
 8015ae4:	6a3b      	ldr	r3, [r7, #32]
 8015ae6:	4a1b      	ldr	r2, [pc, #108]	; (8015b54 <f_mkfs+0x28c>)
 8015ae8:	4293      	cmp	r3, r2
 8015aea:	d952      	bls.n	8015b92 <f_mkfs+0x2ca>
 8015aec:	230e      	movs	r3, #14
 8015aee:	e311      	b.n	8016114 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8015af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d11b      	bne.n	8015b2e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	0b1b      	lsrs	r3, r3, #12
 8015afa:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015afc:	2300      	movs	r3, #0
 8015afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8015b00:	2301      	movs	r3, #1
 8015b02:	653b      	str	r3, [r7, #80]	; 0x50
 8015b04:	e005      	b.n	8015b12 <f_mkfs+0x24a>
 8015b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b08:	3301      	adds	r3, #1
 8015b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8015b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b0e:	005b      	lsls	r3, r3, #1
 8015b10:	653b      	str	r3, [r7, #80]	; 0x50
 8015b12:	4a11      	ldr	r2, [pc, #68]	; (8015b58 <f_mkfs+0x290>)
 8015b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d007      	beq.n	8015b2e <f_mkfs+0x266>
 8015b1e:	4a0e      	ldr	r2, [pc, #56]	; (8015b58 <f_mkfs+0x290>)
 8015b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b26:	461a      	mov	r2, r3
 8015b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b2a:	4293      	cmp	r3, r2
 8015b2c:	d2eb      	bcs.n	8015b06 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8015b2e:	693a      	ldr	r2, [r7, #16]
 8015b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b36:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8015b38:	6a3b      	ldr	r3, [r7, #32]
 8015b3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	d90c      	bls.n	8015b5c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8015b42:	6a3b      	ldr	r3, [r7, #32]
 8015b44:	3302      	adds	r3, #2
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015b4a:	e012      	b.n	8015b72 <f_mkfs+0x2aa>
 8015b4c:	20001330 	.word	0x20001330
 8015b50:	0801a14c 	.word	0x0801a14c
 8015b54:	0ffffff5 	.word	0x0ffffff5
 8015b58:	0801a15c 	.word	0x0801a15c
				} else {
					fmt = FS_FAT12;
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8015b62:	6a3a      	ldr	r2, [r7, #32]
 8015b64:	4613      	mov	r3, r2
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	4413      	add	r3, r2
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	085b      	lsrs	r3, r3, #1
 8015b6e:	3303      	adds	r3, #3
 8015b70:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8015b72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b76:	4413      	add	r3, r2
 8015b78:	1e5a      	subs	r2, r3, #1
 8015b7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b80:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8015b82:	2301      	movs	r3, #1
 8015b84:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8015b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b88:	015a      	lsls	r2, r3, #5
 8015b8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b90:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b96:	4413      	add	r3, r2
 8015b98:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8015b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b9e:	fb03 f202 	mul.w	r2, r3, r2
 8015ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015ba4:	4413      	add	r3, r2
 8015ba6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015ba8:	4413      	add	r3, r2
 8015baa:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8015bac:	697a      	ldr	r2, [r7, #20]
 8015bae:	69fb      	ldr	r3, [r7, #28]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	1e5a      	subs	r2, r3, #1
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	425b      	negs	r3, r3
 8015bb8:	401a      	ands	r2, r3
 8015bba:	69fb      	ldr	r3, [r7, #28]
 8015bbc:	1ad3      	subs	r3, r2, r3
 8015bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8015bc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015bc4:	2b03      	cmp	r3, #3
 8015bc6:	d108      	bne.n	8015bda <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8015bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015bcc:	4413      	add	r3, r2
 8015bce:	657b      	str	r3, [r7, #84]	; 0x54
 8015bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015bd4:	4413      	add	r3, r2
 8015bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8015bd8:	e006      	b.n	8015be8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8015bda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8015be2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015be4:	4413      	add	r3, r2
 8015be6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8015be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bea:	011a      	lsls	r2, r3, #4
 8015bec:	69fb      	ldr	r3, [r7, #28]
 8015bee:	441a      	add	r2, r3
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf2:	1ad2      	subs	r2, r2, r3
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d901      	bls.n	8015bfe <f_mkfs+0x336>
 8015bfa:	230e      	movs	r3, #14
 8015bfc:	e28a      	b.n	8016114 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8015bfe:	693a      	ldr	r2, [r7, #16]
 8015c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c02:	1ad2      	subs	r2, r2, r3
 8015c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015c08:	fb01 f303 	mul.w	r3, r1, r3
 8015c0c:	1ad2      	subs	r2, r2, r3
 8015c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015c10:	1ad2      	subs	r2, r2, r3
 8015c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c18:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8015c1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c1e:	2b03      	cmp	r3, #3
 8015c20:	d10f      	bne.n	8015c42 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8015c22:	6a3b      	ldr	r3, [r7, #32]
 8015c24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	d80a      	bhi.n	8015c42 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d105      	bne.n	8015c3e <f_mkfs+0x376>
 8015c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c34:	085b      	lsrs	r3, r3, #1
 8015c36:	607b      	str	r3, [r7, #4]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d144      	bne.n	8015cc8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8015c3e:	230e      	movs	r3, #14
 8015c40:	e268      	b.n	8016114 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8015c42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c46:	2b02      	cmp	r3, #2
 8015c48:	d133      	bne.n	8015cb2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015c4a:	6a3b      	ldr	r3, [r7, #32]
 8015c4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015c50:	4293      	cmp	r3, r2
 8015c52:	d91e      	bls.n	8015c92 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d107      	bne.n	8015c6a <f_mkfs+0x3a2>
 8015c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	2b40      	cmp	r3, #64	; 0x40
 8015c60:	d803      	bhi.n	8015c6a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8015c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c64:	005b      	lsls	r3, r3, #1
 8015c66:	607b      	str	r3, [r7, #4]
 8015c68:	e033      	b.n	8015cd2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8015c6a:	7afb      	ldrb	r3, [r7, #11]
 8015c6c:	f003 0302 	and.w	r3, r3, #2
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d003      	beq.n	8015c7c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8015c74:	2303      	movs	r3, #3
 8015c76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015c7a:	e02a      	b.n	8015cd2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d105      	bne.n	8015c8e <f_mkfs+0x3c6>
 8015c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	607b      	str	r3, [r7, #4]
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2b80      	cmp	r3, #128	; 0x80
 8015c8c:	d91e      	bls.n	8015ccc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8015c8e:	230e      	movs	r3, #14
 8015c90:	e240      	b.n	8016114 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8015c92:	6a3b      	ldr	r3, [r7, #32]
 8015c94:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	d80a      	bhi.n	8015cb2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d105      	bne.n	8015cae <f_mkfs+0x3e6>
 8015ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ca4:	005b      	lsls	r3, r3, #1
 8015ca6:	607b      	str	r3, [r7, #4]
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2b80      	cmp	r3, #128	; 0x80
 8015cac:	d910      	bls.n	8015cd0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8015cae:	230e      	movs	r3, #14
 8015cb0:	e230      	b.n	8016114 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015cb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015cb6:	2b01      	cmp	r3, #1
 8015cb8:	d10c      	bne.n	8015cd4 <f_mkfs+0x40c>
 8015cba:	6a3b      	ldr	r3, [r7, #32]
 8015cbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d907      	bls.n	8015cd4 <f_mkfs+0x40c>
 8015cc4:	230e      	movs	r3, #14
 8015cc6:	e225      	b.n	8016114 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015cc8:	bf00      	nop
 8015cca:	e6ce      	b.n	8015a6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015ccc:	bf00      	nop
 8015cce:	e6cc      	b.n	8015a6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015cd0:	bf00      	nop
			pau = au;
 8015cd2:	e6ca      	b.n	8015a6a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8015cd4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8015cd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015cd8:	461a      	mov	r2, r3
 8015cda:	2100      	movs	r1, #0
 8015cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cde:	f7fd fc96 	bl	801360e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015ce2:	220b      	movs	r2, #11
 8015ce4:	49b2      	ldr	r1, [pc, #712]	; (8015fb0 <f_mkfs+0x6e8>)
 8015ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce8:	f7fd fc70 	bl	80135cc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8015cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cee:	330b      	adds	r3, #11
 8015cf0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015cf2:	4611      	mov	r1, r2
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7fd fc22 	bl	801353e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	330d      	adds	r3, #13
 8015cfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015d00:	b2d2      	uxtb	r2, r2
 8015d02:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8015d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d06:	330e      	adds	r3, #14
 8015d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d0a:	b292      	uxth	r2, r2
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7fd fc15 	bl	801353e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8015d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d16:	3310      	adds	r3, #16
 8015d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d1a:	b2d2      	uxtb	r2, r2
 8015d1c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8015d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d20:	f103 0211 	add.w	r2, r3, #17
 8015d24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015d28:	2b03      	cmp	r3, #3
 8015d2a:	d002      	beq.n	8015d32 <f_mkfs+0x46a>
 8015d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d2e:	b29b      	uxth	r3, r3
 8015d30:	e000      	b.n	8015d34 <f_mkfs+0x46c>
 8015d32:	2300      	movs	r3, #0
 8015d34:	4619      	mov	r1, r3
 8015d36:	4610      	mov	r0, r2
 8015d38:	f7fd fc01 	bl	801353e <st_word>
		if (sz_vol < 0x10000) {
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d42:	d208      	bcs.n	8015d56 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8015d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d46:	3313      	adds	r3, #19
 8015d48:	693a      	ldr	r2, [r7, #16]
 8015d4a:	b292      	uxth	r2, r2
 8015d4c:	4611      	mov	r1, r2
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7fd fbf5 	bl	801353e <st_word>
 8015d54:	e006      	b.n	8015d64 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8015d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d58:	3320      	adds	r3, #32
 8015d5a:	693a      	ldr	r2, [r7, #16]
 8015d5c:	4611      	mov	r1, r2
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7fd fc08 	bl	8013574 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d66:	3315      	adds	r3, #21
 8015d68:	22f8      	movs	r2, #248	; 0xf8
 8015d6a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8015d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d6e:	3318      	adds	r3, #24
 8015d70:	213f      	movs	r1, #63	; 0x3f
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7fd fbe3 	bl	801353e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8015d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d7a:	331a      	adds	r3, #26
 8015d7c:	21ff      	movs	r1, #255	; 0xff
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fd fbdd 	bl	801353e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8015d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d86:	331c      	adds	r3, #28
 8015d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fd fbf2 	bl	8013574 <st_dword>
		if (fmt == FS_FAT32) {
 8015d90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015d94:	2b03      	cmp	r3, #3
 8015d96:	d131      	bne.n	8015dfc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8015d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8015d9e:	f7fb fcd1 	bl	8011744 <get_fattime>
 8015da2:	4603      	mov	r3, r0
 8015da4:	4619      	mov	r1, r3
 8015da6:	4620      	mov	r0, r4
 8015da8:	f7fd fbe4 	bl	8013574 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	3324      	adds	r3, #36	; 0x24
 8015db0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7fd fbde 	bl	8013574 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8015db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dba:	332c      	adds	r3, #44	; 0x2c
 8015dbc:	2102      	movs	r1, #2
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7fd fbd8 	bl	8013574 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8015dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc6:	3330      	adds	r3, #48	; 0x30
 8015dc8:	2101      	movs	r1, #1
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7fd fbb7 	bl	801353e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd2:	3332      	adds	r3, #50	; 0x32
 8015dd4:	2106      	movs	r1, #6
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7fd fbb1 	bl	801353e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dde:	3340      	adds	r3, #64	; 0x40
 8015de0:	2280      	movs	r2, #128	; 0x80
 8015de2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de6:	3342      	adds	r3, #66	; 0x42
 8015de8:	2229      	movs	r2, #41	; 0x29
 8015dea:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dee:	3347      	adds	r3, #71	; 0x47
 8015df0:	2213      	movs	r2, #19
 8015df2:	4970      	ldr	r1, [pc, #448]	; (8015fb4 <f_mkfs+0x6ec>)
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fd fbe9 	bl	80135cc <mem_cpy>
 8015dfa:	e020      	b.n	8015e3e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8015dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfe:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8015e02:	f7fb fc9f 	bl	8011744 <get_fattime>
 8015e06:	4603      	mov	r3, r0
 8015e08:	4619      	mov	r1, r3
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f7fd fbb2 	bl	8013574 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e12:	3316      	adds	r3, #22
 8015e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015e16:	b292      	uxth	r2, r2
 8015e18:	4611      	mov	r1, r2
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7fd fb8f 	bl	801353e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8015e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e22:	3324      	adds	r3, #36	; 0x24
 8015e24:	2280      	movs	r2, #128	; 0x80
 8015e26:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8015e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e2a:	3326      	adds	r3, #38	; 0x26
 8015e2c:	2229      	movs	r2, #41	; 0x29
 8015e2e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8015e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e32:	332b      	adds	r3, #43	; 0x2b
 8015e34:	2213      	movs	r2, #19
 8015e36:	4960      	ldr	r1, [pc, #384]	; (8015fb8 <f_mkfs+0x6f0>)
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f7fd fbc7 	bl	80135cc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8015e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015e44:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7fd fb78 	bl	801353e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8015e4e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015e52:	2301      	movs	r3, #1
 8015e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e58:	f7fd faf8 	bl	801344c <disk_write>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d001      	beq.n	8015e66 <f_mkfs+0x59e>
 8015e62:	2301      	movs	r3, #1
 8015e64:	e156      	b.n	8016114 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8015e66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015e6a:	2b03      	cmp	r3, #3
 8015e6c:	d140      	bne.n	8015ef0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8015e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e70:	1d9a      	adds	r2, r3, #6
 8015e72:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015e76:	2301      	movs	r3, #1
 8015e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e7a:	f7fd fae7 	bl	801344c <disk_write>
			mem_set(buf, 0, ss);
 8015e7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015e80:	461a      	mov	r2, r3
 8015e82:	2100      	movs	r1, #0
 8015e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e86:	f7fd fbc2 	bl	801360e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8015e8a:	494c      	ldr	r1, [pc, #304]	; (8015fbc <f_mkfs+0x6f4>)
 8015e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e8e:	f7fd fb71 	bl	8013574 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8015e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015e98:	4949      	ldr	r1, [pc, #292]	; (8015fc0 <f_mkfs+0x6f8>)
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7fd fb6a 	bl	8013574 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015ea6:	6a3b      	ldr	r3, [r7, #32]
 8015ea8:	3b01      	subs	r3, #1
 8015eaa:	4619      	mov	r1, r3
 8015eac:	4610      	mov	r0, r2
 8015eae:	f7fd fb61 	bl	8013574 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8015eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015eb8:	2102      	movs	r1, #2
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f7fd fb5a 	bl	8013574 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8015ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015ec6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fd fb37 	bl	801353e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	1dda      	adds	r2, r3, #7
 8015ed4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015ed8:	2301      	movs	r3, #1
 8015eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015edc:	f7fd fab6 	bl	801344c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee2:	1c5a      	adds	r2, r3, #1
 8015ee4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015ee8:	2301      	movs	r3, #1
 8015eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015eec:	f7fd faae 	bl	801344c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8015ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ef6:	f7fd fb8a 	bl	801360e <mem_set>
		sect = b_fat;		/* FAT start sector */
 8015efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015efc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015efe:	2300      	movs	r3, #0
 8015f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8015f02:	e04b      	b.n	8015f9c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8015f04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f08:	2b03      	cmp	r3, #3
 8015f0a:	d113      	bne.n	8015f34 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8015f0c:	f06f 0107 	mvn.w	r1, #7
 8015f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f12:	f7fd fb2f 	bl	8013574 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8015f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f18:	3304      	adds	r3, #4
 8015f1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7fd fb28 	bl	8013574 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8015f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f26:	3308      	adds	r3, #8
 8015f28:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7fd fb21 	bl	8013574 <st_dword>
 8015f32:	e00b      	b.n	8015f4c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8015f34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f38:	2b01      	cmp	r3, #1
 8015f3a:	d101      	bne.n	8015f40 <f_mkfs+0x678>
 8015f3c:	4b21      	ldr	r3, [pc, #132]	; (8015fc4 <f_mkfs+0x6fc>)
 8015f3e:	e001      	b.n	8015f44 <f_mkfs+0x67c>
 8015f40:	f06f 0307 	mvn.w	r3, #7
 8015f44:	4619      	mov	r1, r3
 8015f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f48:	f7fd fb14 	bl	8013574 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8015f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f4e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8015f50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f54:	4293      	cmp	r3, r2
 8015f56:	bf28      	it	cs
 8015f58:	4613      	movcs	r3, r2
 8015f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015f5c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f66:	f7fd fa71 	bl	801344c <disk_write>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d001      	beq.n	8015f74 <f_mkfs+0x6ac>
 8015f70:	2301      	movs	r3, #1
 8015f72:	e0cf      	b.n	8016114 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8015f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015f76:	461a      	mov	r2, r3
 8015f78:	2100      	movs	r1, #0
 8015f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f7c:	f7fd fb47 	bl	801360e <mem_set>
				sect += n; nsect -= n;
 8015f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f84:	4413      	add	r3, r2
 8015f86:	667b      	str	r3, [r7, #100]	; 0x64
 8015f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f8c:	1ad3      	subs	r3, r2, r3
 8015f8e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8015f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d1dc      	bne.n	8015f50 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f98:	3301      	adds	r3, #1
 8015f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8015f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d3af      	bcc.n	8015f04 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8015fa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015fa8:	2b03      	cmp	r3, #3
 8015faa:	d10d      	bne.n	8015fc8 <f_mkfs+0x700>
 8015fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fae:	e00c      	b.n	8015fca <f_mkfs+0x702>
 8015fb0:	08019fcc 	.word	0x08019fcc
 8015fb4:	08019fd8 	.word	0x08019fd8
 8015fb8:	08019fec 	.word	0x08019fec
 8015fbc:	41615252 	.word	0x41615252
 8015fc0:	61417272 	.word	0x61417272
 8015fc4:	00fffff8 	.word	0x00fffff8
 8015fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015fca:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	bf28      	it	cs
 8015fd4:	4613      	movcs	r3, r2
 8015fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015fd8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015fde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015fe2:	f7fd fa33 	bl	801344c <disk_write>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d001      	beq.n	8015ff0 <f_mkfs+0x728>
 8015fec:	2301      	movs	r3, #1
 8015fee:	e091      	b.n	8016114 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8015ff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ff4:	4413      	add	r3, r2
 8015ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8015ff8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ffc:	1ad3      	subs	r3, r2, r3
 8015ffe:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8016000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016002:	2b00      	cmp	r3, #0
 8016004:	d1e2      	bne.n	8015fcc <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8016006:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801600a:	2b03      	cmp	r3, #3
 801600c:	d103      	bne.n	8016016 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 801600e:	230c      	movs	r3, #12
 8016010:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8016014:	e010      	b.n	8016038 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801601c:	d303      	bcc.n	8016026 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 801601e:	2306      	movs	r3, #6
 8016020:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8016024:	e008      	b.n	8016038 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8016026:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801602a:	2b02      	cmp	r3, #2
 801602c:	d101      	bne.n	8016032 <f_mkfs+0x76a>
 801602e:	2304      	movs	r3, #4
 8016030:	e000      	b.n	8016034 <f_mkfs+0x76c>
 8016032:	2301      	movs	r3, #1
 8016034:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8016038:	7afb      	ldrb	r3, [r7, #11]
 801603a:	f003 0308 	and.w	r3, r3, #8
 801603e:	2b00      	cmp	r3, #0
 8016040:	d15b      	bne.n	80160fa <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8016042:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016044:	461a      	mov	r2, r3
 8016046:	2100      	movs	r1, #0
 8016048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801604a:	f7fd fae0 	bl	801360e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016050:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016054:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016058:	4618      	mov	r0, r3
 801605a:	f7fd fa70 	bl	801353e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016060:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016064:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8016066:	69bb      	ldr	r3, [r7, #24]
 8016068:	2200      	movs	r2, #0
 801606a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801606c:	69bb      	ldr	r3, [r7, #24]
 801606e:	3301      	adds	r3, #1
 8016070:	2201      	movs	r2, #1
 8016072:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	3302      	adds	r3, #2
 8016078:	2201      	movs	r2, #1
 801607a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801607c:	69bb      	ldr	r3, [r7, #24]
 801607e:	3303      	adds	r3, #3
 8016080:	2200      	movs	r2, #0
 8016082:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	3304      	adds	r3, #4
 8016088:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 801608c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801608e:	693a      	ldr	r2, [r7, #16]
 8016090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016092:	441a      	add	r2, r3
 8016094:	4b21      	ldr	r3, [pc, #132]	; (801611c <f_mkfs+0x854>)
 8016096:	fba3 1302 	umull	r1, r3, r3, r2
 801609a:	1ad2      	subs	r2, r2, r3
 801609c:	0852      	lsrs	r2, r2, #1
 801609e:	4413      	add	r3, r2
 80160a0:	0b5b      	lsrs	r3, r3, #13
 80160a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80160a4:	69bb      	ldr	r3, [r7, #24]
 80160a6:	3305      	adds	r3, #5
 80160a8:	22fe      	movs	r2, #254	; 0xfe
 80160aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80160ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160ae:	089b      	lsrs	r3, r3, #2
 80160b0:	b2da      	uxtb	r2, r3
 80160b2:	69bb      	ldr	r3, [r7, #24]
 80160b4:	3306      	adds	r3, #6
 80160b6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80160ba:	b2d2      	uxtb	r2, r2
 80160bc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80160be:	69bb      	ldr	r3, [r7, #24]
 80160c0:	3307      	adds	r3, #7
 80160c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80160c4:	b2d2      	uxtb	r2, r2
 80160c6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80160c8:	69bb      	ldr	r3, [r7, #24]
 80160ca:	3308      	adds	r3, #8
 80160cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7fd fa50 	bl	8013574 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80160d4:	69bb      	ldr	r3, [r7, #24]
 80160d6:	330c      	adds	r3, #12
 80160d8:	693a      	ldr	r2, [r7, #16]
 80160da:	4611      	mov	r1, r2
 80160dc:	4618      	mov	r0, r3
 80160de:	f7fd fa49 	bl	8013574 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80160e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80160e6:	2301      	movs	r3, #1
 80160e8:	2200      	movs	r2, #0
 80160ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160ec:	f7fd f9ae 	bl	801344c <disk_write>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d001      	beq.n	80160fa <f_mkfs+0x832>
 80160f6:	2301      	movs	r3, #1
 80160f8:	e00c      	b.n	8016114 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80160fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80160fe:	2200      	movs	r2, #0
 8016100:	2100      	movs	r1, #0
 8016102:	4618      	mov	r0, r3
 8016104:	f7fd f9c2 	bl	801348c <disk_ioctl>
 8016108:	4603      	mov	r3, r0
 801610a:	2b00      	cmp	r3, #0
 801610c:	d001      	beq.n	8016112 <f_mkfs+0x84a>
 801610e:	2301      	movs	r3, #1
 8016110:	e000      	b.n	8016114 <f_mkfs+0x84c>

	return FR_OK;
 8016112:	2300      	movs	r3, #0
}
 8016114:	4618      	mov	r0, r3
 8016116:	3774      	adds	r7, #116	; 0x74
 8016118:	46bd      	mov	sp, r7
 801611a:	bd90      	pop	{r4, r7, pc}
 801611c:	0515565b 	.word	0x0515565b

08016120 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016120:	b480      	push	{r7}
 8016122:	b087      	sub	sp, #28
 8016124:	af00      	add	r7, sp, #0
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	4613      	mov	r3, r2
 801612c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801612e:	2301      	movs	r3, #1
 8016130:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016132:	2300      	movs	r3, #0
 8016134:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016136:	4b1f      	ldr	r3, [pc, #124]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 8016138:	7a5b      	ldrb	r3, [r3, #9]
 801613a:	b2db      	uxtb	r3, r3
 801613c:	2b00      	cmp	r3, #0
 801613e:	d131      	bne.n	80161a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016140:	4b1c      	ldr	r3, [pc, #112]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 8016142:	7a5b      	ldrb	r3, [r3, #9]
 8016144:	b2db      	uxtb	r3, r3
 8016146:	461a      	mov	r2, r3
 8016148:	4b1a      	ldr	r3, [pc, #104]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 801614a:	2100      	movs	r1, #0
 801614c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801614e:	4b19      	ldr	r3, [pc, #100]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 8016150:	7a5b      	ldrb	r3, [r3, #9]
 8016152:	b2db      	uxtb	r3, r3
 8016154:	4a17      	ldr	r2, [pc, #92]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 8016156:	009b      	lsls	r3, r3, #2
 8016158:	4413      	add	r3, r2
 801615a:	68fa      	ldr	r2, [r7, #12]
 801615c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801615e:	4b15      	ldr	r3, [pc, #84]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 8016160:	7a5b      	ldrb	r3, [r3, #9]
 8016162:	b2db      	uxtb	r3, r3
 8016164:	461a      	mov	r2, r3
 8016166:	4b13      	ldr	r3, [pc, #76]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 8016168:	4413      	add	r3, r2
 801616a:	79fa      	ldrb	r2, [r7, #7]
 801616c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801616e:	4b11      	ldr	r3, [pc, #68]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 8016170:	7a5b      	ldrb	r3, [r3, #9]
 8016172:	b2db      	uxtb	r3, r3
 8016174:	1c5a      	adds	r2, r3, #1
 8016176:	b2d1      	uxtb	r1, r2
 8016178:	4a0e      	ldr	r2, [pc, #56]	; (80161b4 <FATFS_LinkDriverEx+0x94>)
 801617a:	7251      	strb	r1, [r2, #9]
 801617c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801617e:	7dbb      	ldrb	r3, [r7, #22]
 8016180:	3330      	adds	r3, #48	; 0x30
 8016182:	b2da      	uxtb	r2, r3
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	3301      	adds	r3, #1
 801618c:	223a      	movs	r2, #58	; 0x3a
 801618e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	3302      	adds	r3, #2
 8016194:	222f      	movs	r2, #47	; 0x2f
 8016196:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	3303      	adds	r3, #3
 801619c:	2200      	movs	r2, #0
 801619e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80161a0:	2300      	movs	r3, #0
 80161a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80161a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	371c      	adds	r7, #28
 80161aa:	46bd      	mov	sp, r7
 80161ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b0:	4770      	bx	lr
 80161b2:	bf00      	nop
 80161b4:	20001358 	.word	0x20001358

080161b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80161c2:	2200      	movs	r2, #0
 80161c4:	6839      	ldr	r1, [r7, #0]
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	f7ff ffaa 	bl	8016120 <FATFS_LinkDriverEx>
 80161cc:	4603      	mov	r3, r0
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3708      	adds	r7, #8
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}
	...

080161d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80161dc:	2200      	movs	r2, #0
 80161de:	4912      	ldr	r1, [pc, #72]	; (8016228 <MX_USB_DEVICE_Init+0x50>)
 80161e0:	4812      	ldr	r0, [pc, #72]	; (801622c <MX_USB_DEVICE_Init+0x54>)
 80161e2:	f7fb ff69 	bl	80120b8 <USBD_Init>
 80161e6:	4603      	mov	r3, r0
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d001      	beq.n	80161f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80161ec:	f7ed fdf6 	bl	8003ddc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80161f0:	490f      	ldr	r1, [pc, #60]	; (8016230 <MX_USB_DEVICE_Init+0x58>)
 80161f2:	480e      	ldr	r0, [pc, #56]	; (801622c <MX_USB_DEVICE_Init+0x54>)
 80161f4:	f7fb ff90 	bl	8012118 <USBD_RegisterClass>
 80161f8:	4603      	mov	r3, r0
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d001      	beq.n	8016202 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80161fe:	f7ed fded 	bl	8003ddc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016202:	490c      	ldr	r1, [pc, #48]	; (8016234 <MX_USB_DEVICE_Init+0x5c>)
 8016204:	4809      	ldr	r0, [pc, #36]	; (801622c <MX_USB_DEVICE_Init+0x54>)
 8016206:	f7fb feb1 	bl	8011f6c <USBD_CDC_RegisterInterface>
 801620a:	4603      	mov	r3, r0
 801620c:	2b00      	cmp	r3, #0
 801620e:	d001      	beq.n	8016214 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016210:	f7ed fde4 	bl	8003ddc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016214:	4805      	ldr	r0, [pc, #20]	; (801622c <MX_USB_DEVICE_Init+0x54>)
 8016216:	f7fb ffa6 	bl	8012166 <USBD_Start>
 801621a:	4603      	mov	r3, r0
 801621c:	2b00      	cmp	r3, #0
 801621e:	d001      	beq.n	8016224 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016220:	f7ed fddc 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016224:	bf00      	nop
 8016226:	bd80      	pop	{r7, pc}
 8016228:	20000134 	.word	0x20000134
 801622c:	20001364 	.word	0x20001364
 8016230:	2000001c 	.word	0x2000001c
 8016234:	20000120 	.word	0x20000120

08016238 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801623c:	2200      	movs	r2, #0
 801623e:	4905      	ldr	r1, [pc, #20]	; (8016254 <CDC_Init_FS+0x1c>)
 8016240:	4805      	ldr	r0, [pc, #20]	; (8016258 <CDC_Init_FS+0x20>)
 8016242:	f7fb fea8 	bl	8011f96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016246:	4905      	ldr	r1, [pc, #20]	; (801625c <CDC_Init_FS+0x24>)
 8016248:	4803      	ldr	r0, [pc, #12]	; (8016258 <CDC_Init_FS+0x20>)
 801624a:	f7fb fec2 	bl	8011fd2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801624e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016250:	4618      	mov	r0, r3
 8016252:	bd80      	pop	{r7, pc}
 8016254:	20001e34 	.word	0x20001e34
 8016258:	20001364 	.word	0x20001364
 801625c:	20001634 	.word	0x20001634

08016260 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016260:	b480      	push	{r7}
 8016262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016264:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016266:	4618      	mov	r0, r3
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	4603      	mov	r3, r0
 8016278:	6039      	str	r1, [r7, #0]
 801627a:	71fb      	strb	r3, [r7, #7]
 801627c:	4613      	mov	r3, r2
 801627e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016280:	79fb      	ldrb	r3, [r7, #7]
 8016282:	2b23      	cmp	r3, #35	; 0x23
 8016284:	d84a      	bhi.n	801631c <CDC_Control_FS+0xac>
 8016286:	a201      	add	r2, pc, #4	; (adr r2, 801628c <CDC_Control_FS+0x1c>)
 8016288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801628c:	0801631d 	.word	0x0801631d
 8016290:	0801631d 	.word	0x0801631d
 8016294:	0801631d 	.word	0x0801631d
 8016298:	0801631d 	.word	0x0801631d
 801629c:	0801631d 	.word	0x0801631d
 80162a0:	0801631d 	.word	0x0801631d
 80162a4:	0801631d 	.word	0x0801631d
 80162a8:	0801631d 	.word	0x0801631d
 80162ac:	0801631d 	.word	0x0801631d
 80162b0:	0801631d 	.word	0x0801631d
 80162b4:	0801631d 	.word	0x0801631d
 80162b8:	0801631d 	.word	0x0801631d
 80162bc:	0801631d 	.word	0x0801631d
 80162c0:	0801631d 	.word	0x0801631d
 80162c4:	0801631d 	.word	0x0801631d
 80162c8:	0801631d 	.word	0x0801631d
 80162cc:	0801631d 	.word	0x0801631d
 80162d0:	0801631d 	.word	0x0801631d
 80162d4:	0801631d 	.word	0x0801631d
 80162d8:	0801631d 	.word	0x0801631d
 80162dc:	0801631d 	.word	0x0801631d
 80162e0:	0801631d 	.word	0x0801631d
 80162e4:	0801631d 	.word	0x0801631d
 80162e8:	0801631d 	.word	0x0801631d
 80162ec:	0801631d 	.word	0x0801631d
 80162f0:	0801631d 	.word	0x0801631d
 80162f4:	0801631d 	.word	0x0801631d
 80162f8:	0801631d 	.word	0x0801631d
 80162fc:	0801631d 	.word	0x0801631d
 8016300:	0801631d 	.word	0x0801631d
 8016304:	0801631d 	.word	0x0801631d
 8016308:	0801631d 	.word	0x0801631d
 801630c:	0801631d 	.word	0x0801631d
 8016310:	0801631d 	.word	0x0801631d
 8016314:	0801631d 	.word	0x0801631d
 8016318:	0801631d 	.word	0x0801631d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801631c:	bf00      	nop
  }

  return (USBD_OK);
 801631e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016320:	4618      	mov	r0, r3
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr

0801632c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b082      	sub	sp, #8
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
 8016334:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016336:	6879      	ldr	r1, [r7, #4]
 8016338:	4805      	ldr	r0, [pc, #20]	; (8016350 <CDC_Receive_FS+0x24>)
 801633a:	f7fb fe4a 	bl	8011fd2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801633e:	4804      	ldr	r0, [pc, #16]	; (8016350 <CDC_Receive_FS+0x24>)
 8016340:	f7fb fe90 	bl	8012064 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016344:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016346:	4618      	mov	r0, r3
 8016348:	3708      	adds	r7, #8
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}
 801634e:	bf00      	nop
 8016350:	20001364 	.word	0x20001364

08016354 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	460b      	mov	r3, r1
 801635e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016360:	2300      	movs	r3, #0
 8016362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016364:	4b0d      	ldr	r3, [pc, #52]	; (801639c <CDC_Transmit_FS+0x48>)
 8016366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801636a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801636c:	68bb      	ldr	r3, [r7, #8]
 801636e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016372:	2b00      	cmp	r3, #0
 8016374:	d001      	beq.n	801637a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016376:	2301      	movs	r3, #1
 8016378:	e00b      	b.n	8016392 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801637a:	887b      	ldrh	r3, [r7, #2]
 801637c:	461a      	mov	r2, r3
 801637e:	6879      	ldr	r1, [r7, #4]
 8016380:	4806      	ldr	r0, [pc, #24]	; (801639c <CDC_Transmit_FS+0x48>)
 8016382:	f7fb fe08 	bl	8011f96 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016386:	4805      	ldr	r0, [pc, #20]	; (801639c <CDC_Transmit_FS+0x48>)
 8016388:	f7fb fe3c 	bl	8012004 <USBD_CDC_TransmitPacket>
 801638c:	4603      	mov	r3, r0
 801638e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016390:	7bfb      	ldrb	r3, [r7, #15]
}
 8016392:	4618      	mov	r0, r3
 8016394:	3710      	adds	r7, #16
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
 801639a:	bf00      	nop
 801639c:	20001364 	.word	0x20001364

080163a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80163a0:	b480      	push	{r7}
 80163a2:	b087      	sub	sp, #28
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	60f8      	str	r0, [r7, #12]
 80163a8:	60b9      	str	r1, [r7, #8]
 80163aa:	4613      	mov	r3, r2
 80163ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80163ae:	2300      	movs	r3, #0
 80163b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80163b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163b6:	4618      	mov	r0, r3
 80163b8:	371c      	adds	r7, #28
 80163ba:	46bd      	mov	sp, r7
 80163bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c0:	4770      	bx	lr
	...

080163c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	4603      	mov	r3, r0
 80163cc:	6039      	str	r1, [r7, #0]
 80163ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	2212      	movs	r2, #18
 80163d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80163d6:	4b03      	ldr	r3, [pc, #12]	; (80163e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80163d8:	4618      	mov	r0, r3
 80163da:	370c      	adds	r7, #12
 80163dc:	46bd      	mov	sp, r7
 80163de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e2:	4770      	bx	lr
 80163e4:	20000150 	.word	0x20000150

080163e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	4603      	mov	r3, r0
 80163f0:	6039      	str	r1, [r7, #0]
 80163f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	2204      	movs	r2, #4
 80163f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80163fa:	4b03      	ldr	r3, [pc, #12]	; (8016408 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	370c      	adds	r7, #12
 8016400:	46bd      	mov	sp, r7
 8016402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016406:	4770      	bx	lr
 8016408:	20000164 	.word	0x20000164

0801640c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b082      	sub	sp, #8
 8016410:	af00      	add	r7, sp, #0
 8016412:	4603      	mov	r3, r0
 8016414:	6039      	str	r1, [r7, #0]
 8016416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016418:	79fb      	ldrb	r3, [r7, #7]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d105      	bne.n	801642a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801641e:	683a      	ldr	r2, [r7, #0]
 8016420:	4907      	ldr	r1, [pc, #28]	; (8016440 <USBD_FS_ProductStrDescriptor+0x34>)
 8016422:	4808      	ldr	r0, [pc, #32]	; (8016444 <USBD_FS_ProductStrDescriptor+0x38>)
 8016424:	f7fc fed1 	bl	80131ca <USBD_GetString>
 8016428:	e004      	b.n	8016434 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801642a:	683a      	ldr	r2, [r7, #0]
 801642c:	4904      	ldr	r1, [pc, #16]	; (8016440 <USBD_FS_ProductStrDescriptor+0x34>)
 801642e:	4805      	ldr	r0, [pc, #20]	; (8016444 <USBD_FS_ProductStrDescriptor+0x38>)
 8016430:	f7fc fecb 	bl	80131ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8016434:	4b02      	ldr	r3, [pc, #8]	; (8016440 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016436:	4618      	mov	r0, r3
 8016438:	3708      	adds	r7, #8
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	20002634 	.word	0x20002634
 8016444:	0801a000 	.word	0x0801a000

08016448 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	4603      	mov	r3, r0
 8016450:	6039      	str	r1, [r7, #0]
 8016452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016454:	683a      	ldr	r2, [r7, #0]
 8016456:	4904      	ldr	r1, [pc, #16]	; (8016468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016458:	4804      	ldr	r0, [pc, #16]	; (801646c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801645a:	f7fc feb6 	bl	80131ca <USBD_GetString>
  return USBD_StrDesc;
 801645e:	4b02      	ldr	r3, [pc, #8]	; (8016468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016460:	4618      	mov	r0, r3
 8016462:	3708      	adds	r7, #8
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}
 8016468:	20002634 	.word	0x20002634
 801646c:	0801a018 	.word	0x0801a018

08016470 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	4603      	mov	r3, r0
 8016478:	6039      	str	r1, [r7, #0]
 801647a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	221a      	movs	r2, #26
 8016480:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016482:	f000 f843 	bl	801650c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016486:	4b02      	ldr	r3, [pc, #8]	; (8016490 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016488:	4618      	mov	r0, r3
 801648a:	3708      	adds	r7, #8
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}
 8016490:	20000168 	.word	0x20000168

08016494 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	4603      	mov	r3, r0
 801649c:	6039      	str	r1, [r7, #0]
 801649e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80164a0:	79fb      	ldrb	r3, [r7, #7]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d105      	bne.n	80164b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164a6:	683a      	ldr	r2, [r7, #0]
 80164a8:	4907      	ldr	r1, [pc, #28]	; (80164c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80164aa:	4808      	ldr	r0, [pc, #32]	; (80164cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80164ac:	f7fc fe8d 	bl	80131ca <USBD_GetString>
 80164b0:	e004      	b.n	80164bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164b2:	683a      	ldr	r2, [r7, #0]
 80164b4:	4904      	ldr	r1, [pc, #16]	; (80164c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80164b6:	4805      	ldr	r0, [pc, #20]	; (80164cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80164b8:	f7fc fe87 	bl	80131ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80164bc:	4b02      	ldr	r3, [pc, #8]	; (80164c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3708      	adds	r7, #8
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	20002634 	.word	0x20002634
 80164cc:	0801a02c 	.word	0x0801a02c

080164d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	4603      	mov	r3, r0
 80164d8:	6039      	str	r1, [r7, #0]
 80164da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80164dc:	79fb      	ldrb	r3, [r7, #7]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d105      	bne.n	80164ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80164e2:	683a      	ldr	r2, [r7, #0]
 80164e4:	4907      	ldr	r1, [pc, #28]	; (8016504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80164e6:	4808      	ldr	r0, [pc, #32]	; (8016508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80164e8:	f7fc fe6f 	bl	80131ca <USBD_GetString>
 80164ec:	e004      	b.n	80164f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80164ee:	683a      	ldr	r2, [r7, #0]
 80164f0:	4904      	ldr	r1, [pc, #16]	; (8016504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80164f2:	4805      	ldr	r0, [pc, #20]	; (8016508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80164f4:	f7fc fe69 	bl	80131ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80164f8:	4b02      	ldr	r3, [pc, #8]	; (8016504 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3708      	adds	r7, #8
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	20002634 	.word	0x20002634
 8016508:	0801a038 	.word	0x0801a038

0801650c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016512:	4b0f      	ldr	r3, [pc, #60]	; (8016550 <Get_SerialNum+0x44>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016518:	4b0e      	ldr	r3, [pc, #56]	; (8016554 <Get_SerialNum+0x48>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801651e:	4b0e      	ldr	r3, [pc, #56]	; (8016558 <Get_SerialNum+0x4c>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016524:	68fa      	ldr	r2, [r7, #12]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	4413      	add	r3, r2
 801652a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d009      	beq.n	8016546 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016532:	2208      	movs	r2, #8
 8016534:	4909      	ldr	r1, [pc, #36]	; (801655c <Get_SerialNum+0x50>)
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f000 f814 	bl	8016564 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801653c:	2204      	movs	r2, #4
 801653e:	4908      	ldr	r1, [pc, #32]	; (8016560 <Get_SerialNum+0x54>)
 8016540:	68b8      	ldr	r0, [r7, #8]
 8016542:	f000 f80f 	bl	8016564 <IntToUnicode>
  }
}
 8016546:	bf00      	nop
 8016548:	3710      	adds	r7, #16
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}
 801654e:	bf00      	nop
 8016550:	1fff7590 	.word	0x1fff7590
 8016554:	1fff7594 	.word	0x1fff7594
 8016558:	1fff7598 	.word	0x1fff7598
 801655c:	2000016a 	.word	0x2000016a
 8016560:	2000017a 	.word	0x2000017a

08016564 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016564:	b480      	push	{r7}
 8016566:	b087      	sub	sp, #28
 8016568:	af00      	add	r7, sp, #0
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	4613      	mov	r3, r2
 8016570:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016572:	2300      	movs	r3, #0
 8016574:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016576:	2300      	movs	r3, #0
 8016578:	75fb      	strb	r3, [r7, #23]
 801657a:	e027      	b.n	80165cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	0f1b      	lsrs	r3, r3, #28
 8016580:	2b09      	cmp	r3, #9
 8016582:	d80b      	bhi.n	801659c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	0f1b      	lsrs	r3, r3, #28
 8016588:	b2da      	uxtb	r2, r3
 801658a:	7dfb      	ldrb	r3, [r7, #23]
 801658c:	005b      	lsls	r3, r3, #1
 801658e:	4619      	mov	r1, r3
 8016590:	68bb      	ldr	r3, [r7, #8]
 8016592:	440b      	add	r3, r1
 8016594:	3230      	adds	r2, #48	; 0x30
 8016596:	b2d2      	uxtb	r2, r2
 8016598:	701a      	strb	r2, [r3, #0]
 801659a:	e00a      	b.n	80165b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	0f1b      	lsrs	r3, r3, #28
 80165a0:	b2da      	uxtb	r2, r3
 80165a2:	7dfb      	ldrb	r3, [r7, #23]
 80165a4:	005b      	lsls	r3, r3, #1
 80165a6:	4619      	mov	r1, r3
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	440b      	add	r3, r1
 80165ac:	3237      	adds	r2, #55	; 0x37
 80165ae:	b2d2      	uxtb	r2, r2
 80165b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	011b      	lsls	r3, r3, #4
 80165b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80165b8:	7dfb      	ldrb	r3, [r7, #23]
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	3301      	adds	r3, #1
 80165be:	68ba      	ldr	r2, [r7, #8]
 80165c0:	4413      	add	r3, r2
 80165c2:	2200      	movs	r2, #0
 80165c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80165c6:	7dfb      	ldrb	r3, [r7, #23]
 80165c8:	3301      	adds	r3, #1
 80165ca:	75fb      	strb	r3, [r7, #23]
 80165cc:	7dfa      	ldrb	r2, [r7, #23]
 80165ce:	79fb      	ldrb	r3, [r7, #7]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d3d3      	bcc.n	801657c <IntToUnicode+0x18>
  }
}
 80165d4:	bf00      	nop
 80165d6:	bf00      	nop
 80165d8:	371c      	adds	r7, #28
 80165da:	46bd      	mov	sp, r7
 80165dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e0:	4770      	bx	lr
	...

080165e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b0b0      	sub	sp, #192	; 0xc0
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80165ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165f0:	2200      	movs	r2, #0
 80165f2:	601a      	str	r2, [r3, #0]
 80165f4:	605a      	str	r2, [r3, #4]
 80165f6:	609a      	str	r2, [r3, #8]
 80165f8:	60da      	str	r2, [r3, #12]
 80165fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80165fc:	f107 0318 	add.w	r3, r7, #24
 8016600:	2294      	movs	r2, #148	; 0x94
 8016602:	2100      	movs	r1, #0
 8016604:	4618      	mov	r0, r3
 8016606:	f000 fc0b 	bl	8016e20 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016612:	d163      	bne.n	80166dc <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016618:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801661a:	2300      	movs	r3, #0
 801661c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8016620:	f107 0318 	add.w	r3, r7, #24
 8016624:	4618      	mov	r0, r3
 8016626:	f7f3 fc29 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 801662a:	4603      	mov	r3, r0
 801662c:	2b00      	cmp	r3, #0
 801662e:	d001      	beq.n	8016634 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8016630:	f7ed fbd4 	bl	8003ddc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016634:	4b2b      	ldr	r3, [pc, #172]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 8016636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016638:	4a2a      	ldr	r2, [pc, #168]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 801663a:	f043 0301 	orr.w	r3, r3, #1
 801663e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016640:	4b28      	ldr	r3, [pc, #160]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 8016642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016644:	f003 0301 	and.w	r3, r3, #1
 8016648:	617b      	str	r3, [r7, #20]
 801664a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801664c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016654:	2302      	movs	r3, #2
 8016656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801665a:	2300      	movs	r3, #0
 801665c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016660:	2303      	movs	r3, #3
 8016662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016666:	230a      	movs	r3, #10
 8016668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801666c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016670:	4619      	mov	r1, r3
 8016672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016676:	f7ef fde1 	bl	800623c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801667a:	4b1a      	ldr	r3, [pc, #104]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 801667c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801667e:	4a19      	ldr	r2, [pc, #100]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 8016680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016686:	4b17      	ldr	r3, [pc, #92]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 8016688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801668a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801668e:	613b      	str	r3, [r7, #16]
 8016690:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016692:	4b14      	ldr	r3, [pc, #80]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 8016694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801669a:	2b00      	cmp	r3, #0
 801669c:	d114      	bne.n	80166c8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801669e:	4b11      	ldr	r3, [pc, #68]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 80166a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166a2:	4a10      	ldr	r2, [pc, #64]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 80166a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80166a8:	6593      	str	r3, [r2, #88]	; 0x58
 80166aa:	4b0e      	ldr	r3, [pc, #56]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 80166ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80166b2:	60fb      	str	r3, [r7, #12]
 80166b4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80166b6:	f7f2 fccd 	bl	8009054 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80166ba:	4b0a      	ldr	r3, [pc, #40]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 80166bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166be:	4a09      	ldr	r2, [pc, #36]	; (80166e4 <HAL_PCD_MspInit+0x100>)
 80166c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80166c4:	6593      	str	r3, [r2, #88]	; 0x58
 80166c6:	e001      	b.n	80166cc <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80166c8:	f7f2 fcc4 	bl	8009054 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80166cc:	2200      	movs	r2, #0
 80166ce:	2100      	movs	r1, #0
 80166d0:	2043      	movs	r0, #67	; 0x43
 80166d2:	f7ef fcc2 	bl	800605a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80166d6:	2043      	movs	r0, #67	; 0x43
 80166d8:	f7ef fcdb 	bl	8006092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80166dc:	bf00      	nop
 80166de:	37c0      	adds	r7, #192	; 0xc0
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd80      	pop	{r7, pc}
 80166e4:	40021000 	.word	0x40021000

080166e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80166fc:	4619      	mov	r1, r3
 80166fe:	4610      	mov	r0, r2
 8016700:	f7fb fd7c 	bl	80121fc <USBD_LL_SetupStage>
}
 8016704:	bf00      	nop
 8016706:	3708      	adds	r7, #8
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}

0801670c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	460b      	mov	r3, r1
 8016716:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801671e:	78fa      	ldrb	r2, [r7, #3]
 8016720:	6879      	ldr	r1, [r7, #4]
 8016722:	4613      	mov	r3, r2
 8016724:	00db      	lsls	r3, r3, #3
 8016726:	4413      	add	r3, r2
 8016728:	009b      	lsls	r3, r3, #2
 801672a:	440b      	add	r3, r1
 801672c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	78fb      	ldrb	r3, [r7, #3]
 8016734:	4619      	mov	r1, r3
 8016736:	f7fb fdb6 	bl	80122a6 <USBD_LL_DataOutStage>
}
 801673a:	bf00      	nop
 801673c:	3708      	adds	r7, #8
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}

08016742 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016742:	b580      	push	{r7, lr}
 8016744:	b082      	sub	sp, #8
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]
 801674a:	460b      	mov	r3, r1
 801674c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016754:	78fa      	ldrb	r2, [r7, #3]
 8016756:	6879      	ldr	r1, [r7, #4]
 8016758:	4613      	mov	r3, r2
 801675a:	00db      	lsls	r3, r3, #3
 801675c:	4413      	add	r3, r2
 801675e:	009b      	lsls	r3, r3, #2
 8016760:	440b      	add	r3, r1
 8016762:	334c      	adds	r3, #76	; 0x4c
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	78fb      	ldrb	r3, [r7, #3]
 8016768:	4619      	mov	r1, r3
 801676a:	f7fb fdff 	bl	801236c <USBD_LL_DataInStage>
}
 801676e:	bf00      	nop
 8016770:	3708      	adds	r7, #8
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}

08016776 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016776:	b580      	push	{r7, lr}
 8016778:	b082      	sub	sp, #8
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016784:	4618      	mov	r0, r3
 8016786:	f7fb ff13 	bl	80125b0 <USBD_LL_SOF>
}
 801678a:	bf00      	nop
 801678c:	3708      	adds	r7, #8
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016792:	b580      	push	{r7, lr}
 8016794:	b084      	sub	sp, #16
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801679a:	2301      	movs	r3, #1
 801679c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	68db      	ldr	r3, [r3, #12]
 80167a2:	2b02      	cmp	r3, #2
 80167a4:	d001      	beq.n	80167aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80167a6:	f7ed fb19 	bl	8003ddc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167b0:	7bfa      	ldrb	r2, [r7, #15]
 80167b2:	4611      	mov	r1, r2
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7fb febd 	bl	8012534 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7fb fe69 	bl	8012498 <USBD_LL_Reset>
}
 80167c6:	bf00      	nop
 80167c8:	3710      	adds	r7, #16
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
	...

080167d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	6812      	ldr	r2, [r2, #0]
 80167e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80167ea:	f043 0301 	orr.w	r3, r3, #1
 80167ee:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fb feac 	bl	8012554 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6a1b      	ldr	r3, [r3, #32]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d005      	beq.n	8016810 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016804:	4b04      	ldr	r3, [pc, #16]	; (8016818 <HAL_PCD_SuspendCallback+0x48>)
 8016806:	691b      	ldr	r3, [r3, #16]
 8016808:	4a03      	ldr	r2, [pc, #12]	; (8016818 <HAL_PCD_SuspendCallback+0x48>)
 801680a:	f043 0306 	orr.w	r3, r3, #6
 801680e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016810:	bf00      	nop
 8016812:	3708      	adds	r7, #8
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	e000ed00 	.word	0xe000ed00

0801681c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	687a      	ldr	r2, [r7, #4]
 8016830:	6812      	ldr	r2, [r2, #0]
 8016832:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016836:	f023 0301 	bic.w	r3, r3, #1
 801683a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6a1b      	ldr	r3, [r3, #32]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d007      	beq.n	8016854 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016844:	4b08      	ldr	r3, [pc, #32]	; (8016868 <HAL_PCD_ResumeCallback+0x4c>)
 8016846:	691b      	ldr	r3, [r3, #16]
 8016848:	4a07      	ldr	r2, [pc, #28]	; (8016868 <HAL_PCD_ResumeCallback+0x4c>)
 801684a:	f023 0306 	bic.w	r3, r3, #6
 801684e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8016850:	f000 faa6 	bl	8016da0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801685a:	4618      	mov	r0, r3
 801685c:	f7fb fe90 	bl	8012580 <USBD_LL_Resume>
}
 8016860:	bf00      	nop
 8016862:	3708      	adds	r7, #8
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}
 8016868:	e000ed00 	.word	0xe000ed00

0801686c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	460b      	mov	r3, r1
 8016876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801687e:	78fa      	ldrb	r2, [r7, #3]
 8016880:	4611      	mov	r1, r2
 8016882:	4618      	mov	r0, r3
 8016884:	f7fb fedc 	bl	8012640 <USBD_LL_IsoOUTIncomplete>
}
 8016888:	bf00      	nop
 801688a:	3708      	adds	r7, #8
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}

08016890 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	460b      	mov	r3, r1
 801689a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168a2:	78fa      	ldrb	r2, [r7, #3]
 80168a4:	4611      	mov	r1, r2
 80168a6:	4618      	mov	r0, r3
 80168a8:	f7fb fea4 	bl	80125f4 <USBD_LL_IsoINIncomplete>
}
 80168ac:	bf00      	nop
 80168ae:	3708      	adds	r7, #8
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}

080168b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b082      	sub	sp, #8
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7fb fee2 	bl	801268c <USBD_LL_DevConnected>
}
 80168c8:	bf00      	nop
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168de:	4618      	mov	r0, r3
 80168e0:	f7fb fedf 	bl	80126a2 <USBD_LL_DevDisconnected>
}
 80168e4:	bf00      	nop
 80168e6:	3708      	adds	r7, #8
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	781b      	ldrb	r3, [r3, #0]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d139      	bne.n	8016970 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80168fc:	4a1f      	ldr	r2, [pc, #124]	; (801697c <USBD_LL_Init+0x90>)
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	4a1d      	ldr	r2, [pc, #116]	; (801697c <USBD_LL_Init+0x90>)
 8016908:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801690c:	4b1b      	ldr	r3, [pc, #108]	; (801697c <USBD_LL_Init+0x90>)
 801690e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016914:	4b19      	ldr	r3, [pc, #100]	; (801697c <USBD_LL_Init+0x90>)
 8016916:	2206      	movs	r2, #6
 8016918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801691a:	4b18      	ldr	r3, [pc, #96]	; (801697c <USBD_LL_Init+0x90>)
 801691c:	2202      	movs	r2, #2
 801691e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016920:	4b16      	ldr	r3, [pc, #88]	; (801697c <USBD_LL_Init+0x90>)
 8016922:	2200      	movs	r2, #0
 8016924:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016926:	4b15      	ldr	r3, [pc, #84]	; (801697c <USBD_LL_Init+0x90>)
 8016928:	2200      	movs	r2, #0
 801692a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801692c:	4b13      	ldr	r3, [pc, #76]	; (801697c <USBD_LL_Init+0x90>)
 801692e:	2200      	movs	r2, #0
 8016930:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016932:	4b12      	ldr	r3, [pc, #72]	; (801697c <USBD_LL_Init+0x90>)
 8016934:	2200      	movs	r2, #0
 8016936:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016938:	4b10      	ldr	r3, [pc, #64]	; (801697c <USBD_LL_Init+0x90>)
 801693a:	2200      	movs	r2, #0
 801693c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801693e:	4b0f      	ldr	r3, [pc, #60]	; (801697c <USBD_LL_Init+0x90>)
 8016940:	2200      	movs	r2, #0
 8016942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016944:	480d      	ldr	r0, [pc, #52]	; (801697c <USBD_LL_Init+0x90>)
 8016946:	f7f1 f8f6 	bl	8007b36 <HAL_PCD_Init>
 801694a:	4603      	mov	r3, r0
 801694c:	2b00      	cmp	r3, #0
 801694e:	d001      	beq.n	8016954 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8016950:	f7ed fa44 	bl	8003ddc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016954:	2180      	movs	r1, #128	; 0x80
 8016956:	4809      	ldr	r0, [pc, #36]	; (801697c <USBD_LL_Init+0x90>)
 8016958:	f7f2 fa77 	bl	8008e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801695c:	2240      	movs	r2, #64	; 0x40
 801695e:	2100      	movs	r1, #0
 8016960:	4806      	ldr	r0, [pc, #24]	; (801697c <USBD_LL_Init+0x90>)
 8016962:	f7f2 fa2b 	bl	8008dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016966:	2280      	movs	r2, #128	; 0x80
 8016968:	2101      	movs	r1, #1
 801696a:	4804      	ldr	r0, [pc, #16]	; (801697c <USBD_LL_Init+0x90>)
 801696c:	f7f2 fa26 	bl	8008dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016970:	2300      	movs	r3, #0
}
 8016972:	4618      	mov	r0, r3
 8016974:	3708      	adds	r7, #8
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}
 801697a:	bf00      	nop
 801697c:	20002834 	.word	0x20002834

08016980 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b084      	sub	sp, #16
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016988:	2300      	movs	r3, #0
 801698a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801698c:	2300      	movs	r3, #0
 801698e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016996:	4618      	mov	r0, r3
 8016998:	f7f1 f9f1 	bl	8007d7e <HAL_PCD_Start>
 801699c:	4603      	mov	r3, r0
 801699e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80169a0:	7bbb      	ldrb	r3, [r7, #14]
 80169a2:	2b03      	cmp	r3, #3
 80169a4:	d816      	bhi.n	80169d4 <USBD_LL_Start+0x54>
 80169a6:	a201      	add	r2, pc, #4	; (adr r2, 80169ac <USBD_LL_Start+0x2c>)
 80169a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169ac:	080169bd 	.word	0x080169bd
 80169b0:	080169c3 	.word	0x080169c3
 80169b4:	080169c9 	.word	0x080169c9
 80169b8:	080169cf 	.word	0x080169cf
    case HAL_OK :
      usb_status = USBD_OK;
 80169bc:	2300      	movs	r3, #0
 80169be:	73fb      	strb	r3, [r7, #15]
    break;
 80169c0:	e00b      	b.n	80169da <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80169c2:	2303      	movs	r3, #3
 80169c4:	73fb      	strb	r3, [r7, #15]
    break;
 80169c6:	e008      	b.n	80169da <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80169c8:	2301      	movs	r3, #1
 80169ca:	73fb      	strb	r3, [r7, #15]
    break;
 80169cc:	e005      	b.n	80169da <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80169ce:	2303      	movs	r3, #3
 80169d0:	73fb      	strb	r3, [r7, #15]
    break;
 80169d2:	e002      	b.n	80169da <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80169d4:	2303      	movs	r3, #3
 80169d6:	73fb      	strb	r3, [r7, #15]
    break;
 80169d8:	bf00      	nop
  }
  return usb_status;
 80169da:	7bfb      	ldrb	r3, [r7, #15]
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	4608      	mov	r0, r1
 80169ee:	4611      	mov	r1, r2
 80169f0:	461a      	mov	r2, r3
 80169f2:	4603      	mov	r3, r0
 80169f4:	70fb      	strb	r3, [r7, #3]
 80169f6:	460b      	mov	r3, r1
 80169f8:	70bb      	strb	r3, [r7, #2]
 80169fa:	4613      	mov	r3, r2
 80169fc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169fe:	2300      	movs	r3, #0
 8016a00:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a02:	2300      	movs	r3, #0
 8016a04:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016a0c:	78bb      	ldrb	r3, [r7, #2]
 8016a0e:	883a      	ldrh	r2, [r7, #0]
 8016a10:	78f9      	ldrb	r1, [r7, #3]
 8016a12:	f7f1 fe9b 	bl	800874c <HAL_PCD_EP_Open>
 8016a16:	4603      	mov	r3, r0
 8016a18:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016a1a:	7bbb      	ldrb	r3, [r7, #14]
 8016a1c:	2b03      	cmp	r3, #3
 8016a1e:	d817      	bhi.n	8016a50 <USBD_LL_OpenEP+0x6c>
 8016a20:	a201      	add	r2, pc, #4	; (adr r2, 8016a28 <USBD_LL_OpenEP+0x44>)
 8016a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a26:	bf00      	nop
 8016a28:	08016a39 	.word	0x08016a39
 8016a2c:	08016a3f 	.word	0x08016a3f
 8016a30:	08016a45 	.word	0x08016a45
 8016a34:	08016a4b 	.word	0x08016a4b
    case HAL_OK :
      usb_status = USBD_OK;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8016a3c:	e00b      	b.n	8016a56 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016a3e:	2303      	movs	r3, #3
 8016a40:	73fb      	strb	r3, [r7, #15]
    break;
 8016a42:	e008      	b.n	8016a56 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016a44:	2301      	movs	r3, #1
 8016a46:	73fb      	strb	r3, [r7, #15]
    break;
 8016a48:	e005      	b.n	8016a56 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016a4a:	2303      	movs	r3, #3
 8016a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8016a4e:	e002      	b.n	8016a56 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8016a50:	2303      	movs	r3, #3
 8016a52:	73fb      	strb	r3, [r7, #15]
    break;
 8016a54:	bf00      	nop
  }
  return usb_status;
 8016a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a58:	4618      	mov	r0, r3
 8016a5a:	3710      	adds	r7, #16
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bd80      	pop	{r7, pc}

08016a60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b084      	sub	sp, #16
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
 8016a68:	460b      	mov	r3, r1
 8016a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a70:	2300      	movs	r3, #0
 8016a72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a7a:	78fa      	ldrb	r2, [r7, #3]
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7f1 fecc 	bl	800881c <HAL_PCD_EP_Close>
 8016a84:	4603      	mov	r3, r0
 8016a86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016a88:	7bbb      	ldrb	r3, [r7, #14]
 8016a8a:	2b03      	cmp	r3, #3
 8016a8c:	d816      	bhi.n	8016abc <USBD_LL_CloseEP+0x5c>
 8016a8e:	a201      	add	r2, pc, #4	; (adr r2, 8016a94 <USBD_LL_CloseEP+0x34>)
 8016a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a94:	08016aa5 	.word	0x08016aa5
 8016a98:	08016aab 	.word	0x08016aab
 8016a9c:	08016ab1 	.word	0x08016ab1
 8016aa0:	08016ab7 	.word	0x08016ab7
    case HAL_OK :
      usb_status = USBD_OK;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8016aa8:	e00b      	b.n	8016ac2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016aaa:	2303      	movs	r3, #3
 8016aac:	73fb      	strb	r3, [r7, #15]
    break;
 8016aae:	e008      	b.n	8016ac2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ab4:	e005      	b.n	8016ac2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ab6:	2303      	movs	r3, #3
 8016ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8016aba:	e002      	b.n	8016ac2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016abc:	2303      	movs	r3, #3
 8016abe:	73fb      	strb	r3, [r7, #15]
    break;
 8016ac0:	bf00      	nop
  }
  return usb_status;
 8016ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3710      	adds	r7, #16
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}

08016acc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b084      	sub	sp, #16
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016adc:	2300      	movs	r3, #0
 8016ade:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ae6:	78fa      	ldrb	r2, [r7, #3]
 8016ae8:	4611      	mov	r1, r2
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7f1 ff73 	bl	80089d6 <HAL_PCD_EP_SetStall>
 8016af0:	4603      	mov	r3, r0
 8016af2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016af4:	7bbb      	ldrb	r3, [r7, #14]
 8016af6:	2b03      	cmp	r3, #3
 8016af8:	d816      	bhi.n	8016b28 <USBD_LL_StallEP+0x5c>
 8016afa:	a201      	add	r2, pc, #4	; (adr r2, 8016b00 <USBD_LL_StallEP+0x34>)
 8016afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b00:	08016b11 	.word	0x08016b11
 8016b04:	08016b17 	.word	0x08016b17
 8016b08:	08016b1d 	.word	0x08016b1d
 8016b0c:	08016b23 	.word	0x08016b23
    case HAL_OK :
      usb_status = USBD_OK;
 8016b10:	2300      	movs	r3, #0
 8016b12:	73fb      	strb	r3, [r7, #15]
    break;
 8016b14:	e00b      	b.n	8016b2e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016b16:	2303      	movs	r3, #3
 8016b18:	73fb      	strb	r3, [r7, #15]
    break;
 8016b1a:	e008      	b.n	8016b2e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8016b20:	e005      	b.n	8016b2e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016b22:	2303      	movs	r3, #3
 8016b24:	73fb      	strb	r3, [r7, #15]
    break;
 8016b26:	e002      	b.n	8016b2e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016b28:	2303      	movs	r3, #3
 8016b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8016b2c:	bf00      	nop
  }
  return usb_status;
 8016b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b30:	4618      	mov	r0, r3
 8016b32:	3710      	adds	r7, #16
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}

08016b38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b084      	sub	sp, #16
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	460b      	mov	r3, r1
 8016b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b44:	2300      	movs	r3, #0
 8016b46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b52:	78fa      	ldrb	r2, [r7, #3]
 8016b54:	4611      	mov	r1, r2
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7f1 ff9f 	bl	8008a9a <HAL_PCD_EP_ClrStall>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016b60:	7bbb      	ldrb	r3, [r7, #14]
 8016b62:	2b03      	cmp	r3, #3
 8016b64:	d816      	bhi.n	8016b94 <USBD_LL_ClearStallEP+0x5c>
 8016b66:	a201      	add	r2, pc, #4	; (adr r2, 8016b6c <USBD_LL_ClearStallEP+0x34>)
 8016b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b6c:	08016b7d 	.word	0x08016b7d
 8016b70:	08016b83 	.word	0x08016b83
 8016b74:	08016b89 	.word	0x08016b89
 8016b78:	08016b8f 	.word	0x08016b8f
    case HAL_OK :
      usb_status = USBD_OK;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8016b80:	e00b      	b.n	8016b9a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016b82:	2303      	movs	r3, #3
 8016b84:	73fb      	strb	r3, [r7, #15]
    break;
 8016b86:	e008      	b.n	8016b9a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016b88:	2301      	movs	r3, #1
 8016b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8016b8c:	e005      	b.n	8016b9a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016b8e:	2303      	movs	r3, #3
 8016b90:	73fb      	strb	r3, [r7, #15]
    break;
 8016b92:	e002      	b.n	8016b9a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016b94:	2303      	movs	r3, #3
 8016b96:	73fb      	strb	r3, [r7, #15]
    break;
 8016b98:	bf00      	nop
  }
  return usb_status;
 8016b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3710      	adds	r7, #16
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b085      	sub	sp, #20
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	460b      	mov	r3, r1
 8016bae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	da0b      	bge.n	8016bd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016bc0:	78fb      	ldrb	r3, [r7, #3]
 8016bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bc6:	68f9      	ldr	r1, [r7, #12]
 8016bc8:	4613      	mov	r3, r2
 8016bca:	00db      	lsls	r3, r3, #3
 8016bcc:	4413      	add	r3, r2
 8016bce:	009b      	lsls	r3, r3, #2
 8016bd0:	440b      	add	r3, r1
 8016bd2:	333e      	adds	r3, #62	; 0x3e
 8016bd4:	781b      	ldrb	r3, [r3, #0]
 8016bd6:	e00b      	b.n	8016bf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016bd8:	78fb      	ldrb	r3, [r7, #3]
 8016bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bde:	68f9      	ldr	r1, [r7, #12]
 8016be0:	4613      	mov	r3, r2
 8016be2:	00db      	lsls	r3, r3, #3
 8016be4:	4413      	add	r3, r2
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	440b      	add	r3, r1
 8016bea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016bee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	3714      	adds	r7, #20
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfa:	4770      	bx	lr

08016bfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	460b      	mov	r3, r1
 8016c06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c16:	78fa      	ldrb	r2, [r7, #3]
 8016c18:	4611      	mov	r1, r2
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7f1 fd71 	bl	8008702 <HAL_PCD_SetAddress>
 8016c20:	4603      	mov	r3, r0
 8016c22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016c24:	7bbb      	ldrb	r3, [r7, #14]
 8016c26:	2b03      	cmp	r3, #3
 8016c28:	d816      	bhi.n	8016c58 <USBD_LL_SetUSBAddress+0x5c>
 8016c2a:	a201      	add	r2, pc, #4	; (adr r2, 8016c30 <USBD_LL_SetUSBAddress+0x34>)
 8016c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c30:	08016c41 	.word	0x08016c41
 8016c34:	08016c47 	.word	0x08016c47
 8016c38:	08016c4d 	.word	0x08016c4d
 8016c3c:	08016c53 	.word	0x08016c53
    case HAL_OK :
      usb_status = USBD_OK;
 8016c40:	2300      	movs	r3, #0
 8016c42:	73fb      	strb	r3, [r7, #15]
    break;
 8016c44:	e00b      	b.n	8016c5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c46:	2303      	movs	r3, #3
 8016c48:	73fb      	strb	r3, [r7, #15]
    break;
 8016c4a:	e008      	b.n	8016c5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8016c50:	e005      	b.n	8016c5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016c52:	2303      	movs	r3, #3
 8016c54:	73fb      	strb	r3, [r7, #15]
    break;
 8016c56:	e002      	b.n	8016c5e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8016c58:	2303      	movs	r3, #3
 8016c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8016c5c:	bf00      	nop
  }
  return usb_status;
 8016c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3710      	adds	r7, #16
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}

08016c68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b086      	sub	sp, #24
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	60f8      	str	r0, [r7, #12]
 8016c70:	607a      	str	r2, [r7, #4]
 8016c72:	603b      	str	r3, [r7, #0]
 8016c74:	460b      	mov	r3, r1
 8016c76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c78:	2300      	movs	r3, #0
 8016c7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c86:	7af9      	ldrb	r1, [r7, #11]
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	687a      	ldr	r2, [r7, #4]
 8016c8c:	f7f1 fe66 	bl	800895c <HAL_PCD_EP_Transmit>
 8016c90:	4603      	mov	r3, r0
 8016c92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8016c94:	7dbb      	ldrb	r3, [r7, #22]
 8016c96:	2b03      	cmp	r3, #3
 8016c98:	d816      	bhi.n	8016cc8 <USBD_LL_Transmit+0x60>
 8016c9a:	a201      	add	r2, pc, #4	; (adr r2, 8016ca0 <USBD_LL_Transmit+0x38>)
 8016c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ca0:	08016cb1 	.word	0x08016cb1
 8016ca4:	08016cb7 	.word	0x08016cb7
 8016ca8:	08016cbd 	.word	0x08016cbd
 8016cac:	08016cc3 	.word	0x08016cc3
    case HAL_OK :
      usb_status = USBD_OK;
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	75fb      	strb	r3, [r7, #23]
    break;
 8016cb4:	e00b      	b.n	8016cce <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016cb6:	2303      	movs	r3, #3
 8016cb8:	75fb      	strb	r3, [r7, #23]
    break;
 8016cba:	e008      	b.n	8016cce <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	75fb      	strb	r3, [r7, #23]
    break;
 8016cc0:	e005      	b.n	8016cce <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016cc2:	2303      	movs	r3, #3
 8016cc4:	75fb      	strb	r3, [r7, #23]
    break;
 8016cc6:	e002      	b.n	8016cce <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8016cc8:	2303      	movs	r3, #3
 8016cca:	75fb      	strb	r3, [r7, #23]
    break;
 8016ccc:	bf00      	nop
  }
  return usb_status;
 8016cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3718      	adds	r7, #24
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b086      	sub	sp, #24
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	607a      	str	r2, [r7, #4]
 8016ce2:	603b      	str	r3, [r7, #0]
 8016ce4:	460b      	mov	r3, r1
 8016ce6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cec:	2300      	movs	r3, #0
 8016cee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016cf6:	7af9      	ldrb	r1, [r7, #11]
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	f7f1 fdd8 	bl	80088b0 <HAL_PCD_EP_Receive>
 8016d00:	4603      	mov	r3, r0
 8016d02:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8016d04:	7dbb      	ldrb	r3, [r7, #22]
 8016d06:	2b03      	cmp	r3, #3
 8016d08:	d816      	bhi.n	8016d38 <USBD_LL_PrepareReceive+0x60>
 8016d0a:	a201      	add	r2, pc, #4	; (adr r2, 8016d10 <USBD_LL_PrepareReceive+0x38>)
 8016d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d10:	08016d21 	.word	0x08016d21
 8016d14:	08016d27 	.word	0x08016d27
 8016d18:	08016d2d 	.word	0x08016d2d
 8016d1c:	08016d33 	.word	0x08016d33
    case HAL_OK :
      usb_status = USBD_OK;
 8016d20:	2300      	movs	r3, #0
 8016d22:	75fb      	strb	r3, [r7, #23]
    break;
 8016d24:	e00b      	b.n	8016d3e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016d26:	2303      	movs	r3, #3
 8016d28:	75fb      	strb	r3, [r7, #23]
    break;
 8016d2a:	e008      	b.n	8016d3e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	75fb      	strb	r3, [r7, #23]
    break;
 8016d30:	e005      	b.n	8016d3e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016d32:	2303      	movs	r3, #3
 8016d34:	75fb      	strb	r3, [r7, #23]
    break;
 8016d36:	e002      	b.n	8016d3e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8016d38:	2303      	movs	r3, #3
 8016d3a:	75fb      	strb	r3, [r7, #23]
    break;
 8016d3c:	bf00      	nop
  }
  return usb_status;
 8016d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	3718      	adds	r7, #24
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	460b      	mov	r3, r1
 8016d52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d5a:	78fa      	ldrb	r2, [r7, #3]
 8016d5c:	4611      	mov	r1, r2
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f7f1 fde4 	bl	800892c <HAL_PCD_EP_GetRxCount>
 8016d64:	4603      	mov	r3, r0
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3708      	adds	r7, #8
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
	...

08016d70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016d70:	b480      	push	{r7}
 8016d72:	b083      	sub	sp, #12
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016d78:	4b03      	ldr	r3, [pc, #12]	; (8016d88 <USBD_static_malloc+0x18>)
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	370c      	adds	r7, #12
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d84:	4770      	bx	lr
 8016d86:	bf00      	nop
 8016d88:	20002d40 	.word	0x20002d40

08016d8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016d8c:	b480      	push	{r7}
 8016d8e:	b083      	sub	sp, #12
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]

}
 8016d94:	bf00      	nop
 8016d96:	370c      	adds	r7, #12
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9e:	4770      	bx	lr

08016da0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016da4:	f7ec fd30 	bl	8003808 <SystemClock_Config>
}
 8016da8:	bf00      	nop
 8016daa:	bd80      	pop	{r7, pc}

08016dac <__libc_init_array>:
 8016dac:	b570      	push	{r4, r5, r6, lr}
 8016dae:	4d0d      	ldr	r5, [pc, #52]	; (8016de4 <__libc_init_array+0x38>)
 8016db0:	4c0d      	ldr	r4, [pc, #52]	; (8016de8 <__libc_init_array+0x3c>)
 8016db2:	1b64      	subs	r4, r4, r5
 8016db4:	10a4      	asrs	r4, r4, #2
 8016db6:	2600      	movs	r6, #0
 8016db8:	42a6      	cmp	r6, r4
 8016dba:	d109      	bne.n	8016dd0 <__libc_init_array+0x24>
 8016dbc:	4d0b      	ldr	r5, [pc, #44]	; (8016dec <__libc_init_array+0x40>)
 8016dbe:	4c0c      	ldr	r4, [pc, #48]	; (8016df0 <__libc_init_array+0x44>)
 8016dc0:	f002 ff6e 	bl	8019ca0 <_init>
 8016dc4:	1b64      	subs	r4, r4, r5
 8016dc6:	10a4      	asrs	r4, r4, #2
 8016dc8:	2600      	movs	r6, #0
 8016dca:	42a6      	cmp	r6, r4
 8016dcc:	d105      	bne.n	8016dda <__libc_init_array+0x2e>
 8016dce:	bd70      	pop	{r4, r5, r6, pc}
 8016dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dd4:	4798      	blx	r3
 8016dd6:	3601      	adds	r6, #1
 8016dd8:	e7ee      	b.n	8016db8 <__libc_init_array+0xc>
 8016dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dde:	4798      	blx	r3
 8016de0:	3601      	adds	r6, #1
 8016de2:	e7f2      	b.n	8016dca <__libc_init_array+0x1e>
 8016de4:	0801a558 	.word	0x0801a558
 8016de8:	0801a558 	.word	0x0801a558
 8016dec:	0801a558 	.word	0x0801a558
 8016df0:	0801a55c 	.word	0x0801a55c

08016df4 <malloc>:
 8016df4:	4b02      	ldr	r3, [pc, #8]	; (8016e00 <malloc+0xc>)
 8016df6:	4601      	mov	r1, r0
 8016df8:	6818      	ldr	r0, [r3, #0]
 8016dfa:	f000 b885 	b.w	8016f08 <_malloc_r>
 8016dfe:	bf00      	nop
 8016e00:	20000184 	.word	0x20000184

08016e04 <memcpy>:
 8016e04:	440a      	add	r2, r1
 8016e06:	4291      	cmp	r1, r2
 8016e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016e0c:	d100      	bne.n	8016e10 <memcpy+0xc>
 8016e0e:	4770      	bx	lr
 8016e10:	b510      	push	{r4, lr}
 8016e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e1a:	4291      	cmp	r1, r2
 8016e1c:	d1f9      	bne.n	8016e12 <memcpy+0xe>
 8016e1e:	bd10      	pop	{r4, pc}

08016e20 <memset>:
 8016e20:	4402      	add	r2, r0
 8016e22:	4603      	mov	r3, r0
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d100      	bne.n	8016e2a <memset+0xa>
 8016e28:	4770      	bx	lr
 8016e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8016e2e:	e7f9      	b.n	8016e24 <memset+0x4>

08016e30 <_free_r>:
 8016e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e32:	2900      	cmp	r1, #0
 8016e34:	d044      	beq.n	8016ec0 <_free_r+0x90>
 8016e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e3a:	9001      	str	r0, [sp, #4]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8016e42:	bfb8      	it	lt
 8016e44:	18e4      	addlt	r4, r4, r3
 8016e46:	f001 fd3f 	bl	80188c8 <__malloc_lock>
 8016e4a:	4a1e      	ldr	r2, [pc, #120]	; (8016ec4 <_free_r+0x94>)
 8016e4c:	9801      	ldr	r0, [sp, #4]
 8016e4e:	6813      	ldr	r3, [r2, #0]
 8016e50:	b933      	cbnz	r3, 8016e60 <_free_r+0x30>
 8016e52:	6063      	str	r3, [r4, #4]
 8016e54:	6014      	str	r4, [r2, #0]
 8016e56:	b003      	add	sp, #12
 8016e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e5c:	f001 bd3a 	b.w	80188d4 <__malloc_unlock>
 8016e60:	42a3      	cmp	r3, r4
 8016e62:	d908      	bls.n	8016e76 <_free_r+0x46>
 8016e64:	6825      	ldr	r5, [r4, #0]
 8016e66:	1961      	adds	r1, r4, r5
 8016e68:	428b      	cmp	r3, r1
 8016e6a:	bf01      	itttt	eq
 8016e6c:	6819      	ldreq	r1, [r3, #0]
 8016e6e:	685b      	ldreq	r3, [r3, #4]
 8016e70:	1949      	addeq	r1, r1, r5
 8016e72:	6021      	streq	r1, [r4, #0]
 8016e74:	e7ed      	b.n	8016e52 <_free_r+0x22>
 8016e76:	461a      	mov	r2, r3
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	b10b      	cbz	r3, 8016e80 <_free_r+0x50>
 8016e7c:	42a3      	cmp	r3, r4
 8016e7e:	d9fa      	bls.n	8016e76 <_free_r+0x46>
 8016e80:	6811      	ldr	r1, [r2, #0]
 8016e82:	1855      	adds	r5, r2, r1
 8016e84:	42a5      	cmp	r5, r4
 8016e86:	d10b      	bne.n	8016ea0 <_free_r+0x70>
 8016e88:	6824      	ldr	r4, [r4, #0]
 8016e8a:	4421      	add	r1, r4
 8016e8c:	1854      	adds	r4, r2, r1
 8016e8e:	42a3      	cmp	r3, r4
 8016e90:	6011      	str	r1, [r2, #0]
 8016e92:	d1e0      	bne.n	8016e56 <_free_r+0x26>
 8016e94:	681c      	ldr	r4, [r3, #0]
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	6053      	str	r3, [r2, #4]
 8016e9a:	4421      	add	r1, r4
 8016e9c:	6011      	str	r1, [r2, #0]
 8016e9e:	e7da      	b.n	8016e56 <_free_r+0x26>
 8016ea0:	d902      	bls.n	8016ea8 <_free_r+0x78>
 8016ea2:	230c      	movs	r3, #12
 8016ea4:	6003      	str	r3, [r0, #0]
 8016ea6:	e7d6      	b.n	8016e56 <_free_r+0x26>
 8016ea8:	6825      	ldr	r5, [r4, #0]
 8016eaa:	1961      	adds	r1, r4, r5
 8016eac:	428b      	cmp	r3, r1
 8016eae:	bf04      	itt	eq
 8016eb0:	6819      	ldreq	r1, [r3, #0]
 8016eb2:	685b      	ldreq	r3, [r3, #4]
 8016eb4:	6063      	str	r3, [r4, #4]
 8016eb6:	bf04      	itt	eq
 8016eb8:	1949      	addeq	r1, r1, r5
 8016eba:	6021      	streq	r1, [r4, #0]
 8016ebc:	6054      	str	r4, [r2, #4]
 8016ebe:	e7ca      	b.n	8016e56 <_free_r+0x26>
 8016ec0:	b003      	add	sp, #12
 8016ec2:	bd30      	pop	{r4, r5, pc}
 8016ec4:	20002f60 	.word	0x20002f60

08016ec8 <sbrk_aligned>:
 8016ec8:	b570      	push	{r4, r5, r6, lr}
 8016eca:	4e0e      	ldr	r6, [pc, #56]	; (8016f04 <sbrk_aligned+0x3c>)
 8016ecc:	460c      	mov	r4, r1
 8016ece:	6831      	ldr	r1, [r6, #0]
 8016ed0:	4605      	mov	r5, r0
 8016ed2:	b911      	cbnz	r1, 8016eda <sbrk_aligned+0x12>
 8016ed4:	f000 fd0e 	bl	80178f4 <_sbrk_r>
 8016ed8:	6030      	str	r0, [r6, #0]
 8016eda:	4621      	mov	r1, r4
 8016edc:	4628      	mov	r0, r5
 8016ede:	f000 fd09 	bl	80178f4 <_sbrk_r>
 8016ee2:	1c43      	adds	r3, r0, #1
 8016ee4:	d00a      	beq.n	8016efc <sbrk_aligned+0x34>
 8016ee6:	1cc4      	adds	r4, r0, #3
 8016ee8:	f024 0403 	bic.w	r4, r4, #3
 8016eec:	42a0      	cmp	r0, r4
 8016eee:	d007      	beq.n	8016f00 <sbrk_aligned+0x38>
 8016ef0:	1a21      	subs	r1, r4, r0
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	f000 fcfe 	bl	80178f4 <_sbrk_r>
 8016ef8:	3001      	adds	r0, #1
 8016efa:	d101      	bne.n	8016f00 <sbrk_aligned+0x38>
 8016efc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016f00:	4620      	mov	r0, r4
 8016f02:	bd70      	pop	{r4, r5, r6, pc}
 8016f04:	20002f64 	.word	0x20002f64

08016f08 <_malloc_r>:
 8016f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f0c:	1ccd      	adds	r5, r1, #3
 8016f0e:	f025 0503 	bic.w	r5, r5, #3
 8016f12:	3508      	adds	r5, #8
 8016f14:	2d0c      	cmp	r5, #12
 8016f16:	bf38      	it	cc
 8016f18:	250c      	movcc	r5, #12
 8016f1a:	2d00      	cmp	r5, #0
 8016f1c:	4607      	mov	r7, r0
 8016f1e:	db01      	blt.n	8016f24 <_malloc_r+0x1c>
 8016f20:	42a9      	cmp	r1, r5
 8016f22:	d905      	bls.n	8016f30 <_malloc_r+0x28>
 8016f24:	230c      	movs	r3, #12
 8016f26:	603b      	str	r3, [r7, #0]
 8016f28:	2600      	movs	r6, #0
 8016f2a:	4630      	mov	r0, r6
 8016f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f30:	4e2e      	ldr	r6, [pc, #184]	; (8016fec <_malloc_r+0xe4>)
 8016f32:	f001 fcc9 	bl	80188c8 <__malloc_lock>
 8016f36:	6833      	ldr	r3, [r6, #0]
 8016f38:	461c      	mov	r4, r3
 8016f3a:	bb34      	cbnz	r4, 8016f8a <_malloc_r+0x82>
 8016f3c:	4629      	mov	r1, r5
 8016f3e:	4638      	mov	r0, r7
 8016f40:	f7ff ffc2 	bl	8016ec8 <sbrk_aligned>
 8016f44:	1c43      	adds	r3, r0, #1
 8016f46:	4604      	mov	r4, r0
 8016f48:	d14d      	bne.n	8016fe6 <_malloc_r+0xde>
 8016f4a:	6834      	ldr	r4, [r6, #0]
 8016f4c:	4626      	mov	r6, r4
 8016f4e:	2e00      	cmp	r6, #0
 8016f50:	d140      	bne.n	8016fd4 <_malloc_r+0xcc>
 8016f52:	6823      	ldr	r3, [r4, #0]
 8016f54:	4631      	mov	r1, r6
 8016f56:	4638      	mov	r0, r7
 8016f58:	eb04 0803 	add.w	r8, r4, r3
 8016f5c:	f000 fcca 	bl	80178f4 <_sbrk_r>
 8016f60:	4580      	cmp	r8, r0
 8016f62:	d13a      	bne.n	8016fda <_malloc_r+0xd2>
 8016f64:	6821      	ldr	r1, [r4, #0]
 8016f66:	3503      	adds	r5, #3
 8016f68:	1a6d      	subs	r5, r5, r1
 8016f6a:	f025 0503 	bic.w	r5, r5, #3
 8016f6e:	3508      	adds	r5, #8
 8016f70:	2d0c      	cmp	r5, #12
 8016f72:	bf38      	it	cc
 8016f74:	250c      	movcc	r5, #12
 8016f76:	4629      	mov	r1, r5
 8016f78:	4638      	mov	r0, r7
 8016f7a:	f7ff ffa5 	bl	8016ec8 <sbrk_aligned>
 8016f7e:	3001      	adds	r0, #1
 8016f80:	d02b      	beq.n	8016fda <_malloc_r+0xd2>
 8016f82:	6823      	ldr	r3, [r4, #0]
 8016f84:	442b      	add	r3, r5
 8016f86:	6023      	str	r3, [r4, #0]
 8016f88:	e00e      	b.n	8016fa8 <_malloc_r+0xa0>
 8016f8a:	6822      	ldr	r2, [r4, #0]
 8016f8c:	1b52      	subs	r2, r2, r5
 8016f8e:	d41e      	bmi.n	8016fce <_malloc_r+0xc6>
 8016f90:	2a0b      	cmp	r2, #11
 8016f92:	d916      	bls.n	8016fc2 <_malloc_r+0xba>
 8016f94:	1961      	adds	r1, r4, r5
 8016f96:	42a3      	cmp	r3, r4
 8016f98:	6025      	str	r5, [r4, #0]
 8016f9a:	bf18      	it	ne
 8016f9c:	6059      	strne	r1, [r3, #4]
 8016f9e:	6863      	ldr	r3, [r4, #4]
 8016fa0:	bf08      	it	eq
 8016fa2:	6031      	streq	r1, [r6, #0]
 8016fa4:	5162      	str	r2, [r4, r5]
 8016fa6:	604b      	str	r3, [r1, #4]
 8016fa8:	4638      	mov	r0, r7
 8016faa:	f104 060b 	add.w	r6, r4, #11
 8016fae:	f001 fc91 	bl	80188d4 <__malloc_unlock>
 8016fb2:	f026 0607 	bic.w	r6, r6, #7
 8016fb6:	1d23      	adds	r3, r4, #4
 8016fb8:	1af2      	subs	r2, r6, r3
 8016fba:	d0b6      	beq.n	8016f2a <_malloc_r+0x22>
 8016fbc:	1b9b      	subs	r3, r3, r6
 8016fbe:	50a3      	str	r3, [r4, r2]
 8016fc0:	e7b3      	b.n	8016f2a <_malloc_r+0x22>
 8016fc2:	6862      	ldr	r2, [r4, #4]
 8016fc4:	42a3      	cmp	r3, r4
 8016fc6:	bf0c      	ite	eq
 8016fc8:	6032      	streq	r2, [r6, #0]
 8016fca:	605a      	strne	r2, [r3, #4]
 8016fcc:	e7ec      	b.n	8016fa8 <_malloc_r+0xa0>
 8016fce:	4623      	mov	r3, r4
 8016fd0:	6864      	ldr	r4, [r4, #4]
 8016fd2:	e7b2      	b.n	8016f3a <_malloc_r+0x32>
 8016fd4:	4634      	mov	r4, r6
 8016fd6:	6876      	ldr	r6, [r6, #4]
 8016fd8:	e7b9      	b.n	8016f4e <_malloc_r+0x46>
 8016fda:	230c      	movs	r3, #12
 8016fdc:	603b      	str	r3, [r7, #0]
 8016fde:	4638      	mov	r0, r7
 8016fe0:	f001 fc78 	bl	80188d4 <__malloc_unlock>
 8016fe4:	e7a1      	b.n	8016f2a <_malloc_r+0x22>
 8016fe6:	6025      	str	r5, [r4, #0]
 8016fe8:	e7de      	b.n	8016fa8 <_malloc_r+0xa0>
 8016fea:	bf00      	nop
 8016fec:	20002f60 	.word	0x20002f60

08016ff0 <__cvt>:
 8016ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ff4:	ec55 4b10 	vmov	r4, r5, d0
 8016ff8:	2d00      	cmp	r5, #0
 8016ffa:	460e      	mov	r6, r1
 8016ffc:	4619      	mov	r1, r3
 8016ffe:	462b      	mov	r3, r5
 8017000:	bfbb      	ittet	lt
 8017002:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017006:	461d      	movlt	r5, r3
 8017008:	2300      	movge	r3, #0
 801700a:	232d      	movlt	r3, #45	; 0x2d
 801700c:	700b      	strb	r3, [r1, #0]
 801700e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017010:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017014:	4691      	mov	r9, r2
 8017016:	f023 0820 	bic.w	r8, r3, #32
 801701a:	bfbc      	itt	lt
 801701c:	4622      	movlt	r2, r4
 801701e:	4614      	movlt	r4, r2
 8017020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017024:	d005      	beq.n	8017032 <__cvt+0x42>
 8017026:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801702a:	d100      	bne.n	801702e <__cvt+0x3e>
 801702c:	3601      	adds	r6, #1
 801702e:	2102      	movs	r1, #2
 8017030:	e000      	b.n	8017034 <__cvt+0x44>
 8017032:	2103      	movs	r1, #3
 8017034:	ab03      	add	r3, sp, #12
 8017036:	9301      	str	r3, [sp, #4]
 8017038:	ab02      	add	r3, sp, #8
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	ec45 4b10 	vmov	d0, r4, r5
 8017040:	4653      	mov	r3, sl
 8017042:	4632      	mov	r2, r6
 8017044:	f000 fd30 	bl	8017aa8 <_dtoa_r>
 8017048:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801704c:	4607      	mov	r7, r0
 801704e:	d102      	bne.n	8017056 <__cvt+0x66>
 8017050:	f019 0f01 	tst.w	r9, #1
 8017054:	d022      	beq.n	801709c <__cvt+0xac>
 8017056:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801705a:	eb07 0906 	add.w	r9, r7, r6
 801705e:	d110      	bne.n	8017082 <__cvt+0x92>
 8017060:	783b      	ldrb	r3, [r7, #0]
 8017062:	2b30      	cmp	r3, #48	; 0x30
 8017064:	d10a      	bne.n	801707c <__cvt+0x8c>
 8017066:	2200      	movs	r2, #0
 8017068:	2300      	movs	r3, #0
 801706a:	4620      	mov	r0, r4
 801706c:	4629      	mov	r1, r5
 801706e:	f7e9 fd43 	bl	8000af8 <__aeabi_dcmpeq>
 8017072:	b918      	cbnz	r0, 801707c <__cvt+0x8c>
 8017074:	f1c6 0601 	rsb	r6, r6, #1
 8017078:	f8ca 6000 	str.w	r6, [sl]
 801707c:	f8da 3000 	ldr.w	r3, [sl]
 8017080:	4499      	add	r9, r3
 8017082:	2200      	movs	r2, #0
 8017084:	2300      	movs	r3, #0
 8017086:	4620      	mov	r0, r4
 8017088:	4629      	mov	r1, r5
 801708a:	f7e9 fd35 	bl	8000af8 <__aeabi_dcmpeq>
 801708e:	b108      	cbz	r0, 8017094 <__cvt+0xa4>
 8017090:	f8cd 900c 	str.w	r9, [sp, #12]
 8017094:	2230      	movs	r2, #48	; 0x30
 8017096:	9b03      	ldr	r3, [sp, #12]
 8017098:	454b      	cmp	r3, r9
 801709a:	d307      	bcc.n	80170ac <__cvt+0xbc>
 801709c:	9b03      	ldr	r3, [sp, #12]
 801709e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170a0:	1bdb      	subs	r3, r3, r7
 80170a2:	4638      	mov	r0, r7
 80170a4:	6013      	str	r3, [r2, #0]
 80170a6:	b004      	add	sp, #16
 80170a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170ac:	1c59      	adds	r1, r3, #1
 80170ae:	9103      	str	r1, [sp, #12]
 80170b0:	701a      	strb	r2, [r3, #0]
 80170b2:	e7f0      	b.n	8017096 <__cvt+0xa6>

080170b4 <__exponent>:
 80170b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170b6:	4603      	mov	r3, r0
 80170b8:	2900      	cmp	r1, #0
 80170ba:	bfb8      	it	lt
 80170bc:	4249      	neglt	r1, r1
 80170be:	f803 2b02 	strb.w	r2, [r3], #2
 80170c2:	bfb4      	ite	lt
 80170c4:	222d      	movlt	r2, #45	; 0x2d
 80170c6:	222b      	movge	r2, #43	; 0x2b
 80170c8:	2909      	cmp	r1, #9
 80170ca:	7042      	strb	r2, [r0, #1]
 80170cc:	dd2a      	ble.n	8017124 <__exponent+0x70>
 80170ce:	f10d 0407 	add.w	r4, sp, #7
 80170d2:	46a4      	mov	ip, r4
 80170d4:	270a      	movs	r7, #10
 80170d6:	46a6      	mov	lr, r4
 80170d8:	460a      	mov	r2, r1
 80170da:	fb91 f6f7 	sdiv	r6, r1, r7
 80170de:	fb07 1516 	mls	r5, r7, r6, r1
 80170e2:	3530      	adds	r5, #48	; 0x30
 80170e4:	2a63      	cmp	r2, #99	; 0x63
 80170e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80170ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80170ee:	4631      	mov	r1, r6
 80170f0:	dcf1      	bgt.n	80170d6 <__exponent+0x22>
 80170f2:	3130      	adds	r1, #48	; 0x30
 80170f4:	f1ae 0502 	sub.w	r5, lr, #2
 80170f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80170fc:	1c44      	adds	r4, r0, #1
 80170fe:	4629      	mov	r1, r5
 8017100:	4561      	cmp	r1, ip
 8017102:	d30a      	bcc.n	801711a <__exponent+0x66>
 8017104:	f10d 0209 	add.w	r2, sp, #9
 8017108:	eba2 020e 	sub.w	r2, r2, lr
 801710c:	4565      	cmp	r5, ip
 801710e:	bf88      	it	hi
 8017110:	2200      	movhi	r2, #0
 8017112:	4413      	add	r3, r2
 8017114:	1a18      	subs	r0, r3, r0
 8017116:	b003      	add	sp, #12
 8017118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801711a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801711e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017122:	e7ed      	b.n	8017100 <__exponent+0x4c>
 8017124:	2330      	movs	r3, #48	; 0x30
 8017126:	3130      	adds	r1, #48	; 0x30
 8017128:	7083      	strb	r3, [r0, #2]
 801712a:	70c1      	strb	r1, [r0, #3]
 801712c:	1d03      	adds	r3, r0, #4
 801712e:	e7f1      	b.n	8017114 <__exponent+0x60>

08017130 <_printf_float>:
 8017130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017134:	ed2d 8b02 	vpush	{d8}
 8017138:	b08d      	sub	sp, #52	; 0x34
 801713a:	460c      	mov	r4, r1
 801713c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017140:	4616      	mov	r6, r2
 8017142:	461f      	mov	r7, r3
 8017144:	4605      	mov	r5, r0
 8017146:	f001 fba5 	bl	8018894 <_localeconv_r>
 801714a:	f8d0 a000 	ldr.w	sl, [r0]
 801714e:	4650      	mov	r0, sl
 8017150:	f7e9 f856 	bl	8000200 <strlen>
 8017154:	2300      	movs	r3, #0
 8017156:	930a      	str	r3, [sp, #40]	; 0x28
 8017158:	6823      	ldr	r3, [r4, #0]
 801715a:	9305      	str	r3, [sp, #20]
 801715c:	f8d8 3000 	ldr.w	r3, [r8]
 8017160:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017164:	3307      	adds	r3, #7
 8017166:	f023 0307 	bic.w	r3, r3, #7
 801716a:	f103 0208 	add.w	r2, r3, #8
 801716e:	f8c8 2000 	str.w	r2, [r8]
 8017172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017176:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801717a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801717e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017182:	9307      	str	r3, [sp, #28]
 8017184:	f8cd 8018 	str.w	r8, [sp, #24]
 8017188:	ee08 0a10 	vmov	s16, r0
 801718c:	4b9f      	ldr	r3, [pc, #636]	; (801740c <_printf_float+0x2dc>)
 801718e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017196:	f7e9 fce1 	bl	8000b5c <__aeabi_dcmpun>
 801719a:	bb88      	cbnz	r0, 8017200 <_printf_float+0xd0>
 801719c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80171a0:	4b9a      	ldr	r3, [pc, #616]	; (801740c <_printf_float+0x2dc>)
 80171a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80171a6:	f7e9 fcbb 	bl	8000b20 <__aeabi_dcmple>
 80171aa:	bb48      	cbnz	r0, 8017200 <_printf_float+0xd0>
 80171ac:	2200      	movs	r2, #0
 80171ae:	2300      	movs	r3, #0
 80171b0:	4640      	mov	r0, r8
 80171b2:	4649      	mov	r1, r9
 80171b4:	f7e9 fcaa 	bl	8000b0c <__aeabi_dcmplt>
 80171b8:	b110      	cbz	r0, 80171c0 <_printf_float+0x90>
 80171ba:	232d      	movs	r3, #45	; 0x2d
 80171bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171c0:	4b93      	ldr	r3, [pc, #588]	; (8017410 <_printf_float+0x2e0>)
 80171c2:	4894      	ldr	r0, [pc, #592]	; (8017414 <_printf_float+0x2e4>)
 80171c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80171c8:	bf94      	ite	ls
 80171ca:	4698      	movls	r8, r3
 80171cc:	4680      	movhi	r8, r0
 80171ce:	2303      	movs	r3, #3
 80171d0:	6123      	str	r3, [r4, #16]
 80171d2:	9b05      	ldr	r3, [sp, #20]
 80171d4:	f023 0204 	bic.w	r2, r3, #4
 80171d8:	6022      	str	r2, [r4, #0]
 80171da:	f04f 0900 	mov.w	r9, #0
 80171de:	9700      	str	r7, [sp, #0]
 80171e0:	4633      	mov	r3, r6
 80171e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80171e4:	4621      	mov	r1, r4
 80171e6:	4628      	mov	r0, r5
 80171e8:	f000 f9d8 	bl	801759c <_printf_common>
 80171ec:	3001      	adds	r0, #1
 80171ee:	f040 8090 	bne.w	8017312 <_printf_float+0x1e2>
 80171f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171f6:	b00d      	add	sp, #52	; 0x34
 80171f8:	ecbd 8b02 	vpop	{d8}
 80171fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017200:	4642      	mov	r2, r8
 8017202:	464b      	mov	r3, r9
 8017204:	4640      	mov	r0, r8
 8017206:	4649      	mov	r1, r9
 8017208:	f7e9 fca8 	bl	8000b5c <__aeabi_dcmpun>
 801720c:	b140      	cbz	r0, 8017220 <_printf_float+0xf0>
 801720e:	464b      	mov	r3, r9
 8017210:	2b00      	cmp	r3, #0
 8017212:	bfbc      	itt	lt
 8017214:	232d      	movlt	r3, #45	; 0x2d
 8017216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801721a:	487f      	ldr	r0, [pc, #508]	; (8017418 <_printf_float+0x2e8>)
 801721c:	4b7f      	ldr	r3, [pc, #508]	; (801741c <_printf_float+0x2ec>)
 801721e:	e7d1      	b.n	80171c4 <_printf_float+0x94>
 8017220:	6863      	ldr	r3, [r4, #4]
 8017222:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017226:	9206      	str	r2, [sp, #24]
 8017228:	1c5a      	adds	r2, r3, #1
 801722a:	d13f      	bne.n	80172ac <_printf_float+0x17c>
 801722c:	2306      	movs	r3, #6
 801722e:	6063      	str	r3, [r4, #4]
 8017230:	9b05      	ldr	r3, [sp, #20]
 8017232:	6861      	ldr	r1, [r4, #4]
 8017234:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017238:	2300      	movs	r3, #0
 801723a:	9303      	str	r3, [sp, #12]
 801723c:	ab0a      	add	r3, sp, #40	; 0x28
 801723e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017242:	ab09      	add	r3, sp, #36	; 0x24
 8017244:	ec49 8b10 	vmov	d0, r8, r9
 8017248:	9300      	str	r3, [sp, #0]
 801724a:	6022      	str	r2, [r4, #0]
 801724c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017250:	4628      	mov	r0, r5
 8017252:	f7ff fecd 	bl	8016ff0 <__cvt>
 8017256:	9b06      	ldr	r3, [sp, #24]
 8017258:	9909      	ldr	r1, [sp, #36]	; 0x24
 801725a:	2b47      	cmp	r3, #71	; 0x47
 801725c:	4680      	mov	r8, r0
 801725e:	d108      	bne.n	8017272 <_printf_float+0x142>
 8017260:	1cc8      	adds	r0, r1, #3
 8017262:	db02      	blt.n	801726a <_printf_float+0x13a>
 8017264:	6863      	ldr	r3, [r4, #4]
 8017266:	4299      	cmp	r1, r3
 8017268:	dd41      	ble.n	80172ee <_printf_float+0x1be>
 801726a:	f1ab 0b02 	sub.w	fp, fp, #2
 801726e:	fa5f fb8b 	uxtb.w	fp, fp
 8017272:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017276:	d820      	bhi.n	80172ba <_printf_float+0x18a>
 8017278:	3901      	subs	r1, #1
 801727a:	465a      	mov	r2, fp
 801727c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017280:	9109      	str	r1, [sp, #36]	; 0x24
 8017282:	f7ff ff17 	bl	80170b4 <__exponent>
 8017286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017288:	1813      	adds	r3, r2, r0
 801728a:	2a01      	cmp	r2, #1
 801728c:	4681      	mov	r9, r0
 801728e:	6123      	str	r3, [r4, #16]
 8017290:	dc02      	bgt.n	8017298 <_printf_float+0x168>
 8017292:	6822      	ldr	r2, [r4, #0]
 8017294:	07d2      	lsls	r2, r2, #31
 8017296:	d501      	bpl.n	801729c <_printf_float+0x16c>
 8017298:	3301      	adds	r3, #1
 801729a:	6123      	str	r3, [r4, #16]
 801729c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d09c      	beq.n	80171de <_printf_float+0xae>
 80172a4:	232d      	movs	r3, #45	; 0x2d
 80172a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172aa:	e798      	b.n	80171de <_printf_float+0xae>
 80172ac:	9a06      	ldr	r2, [sp, #24]
 80172ae:	2a47      	cmp	r2, #71	; 0x47
 80172b0:	d1be      	bne.n	8017230 <_printf_float+0x100>
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d1bc      	bne.n	8017230 <_printf_float+0x100>
 80172b6:	2301      	movs	r3, #1
 80172b8:	e7b9      	b.n	801722e <_printf_float+0xfe>
 80172ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80172be:	d118      	bne.n	80172f2 <_printf_float+0x1c2>
 80172c0:	2900      	cmp	r1, #0
 80172c2:	6863      	ldr	r3, [r4, #4]
 80172c4:	dd0b      	ble.n	80172de <_printf_float+0x1ae>
 80172c6:	6121      	str	r1, [r4, #16]
 80172c8:	b913      	cbnz	r3, 80172d0 <_printf_float+0x1a0>
 80172ca:	6822      	ldr	r2, [r4, #0]
 80172cc:	07d0      	lsls	r0, r2, #31
 80172ce:	d502      	bpl.n	80172d6 <_printf_float+0x1a6>
 80172d0:	3301      	adds	r3, #1
 80172d2:	440b      	add	r3, r1
 80172d4:	6123      	str	r3, [r4, #16]
 80172d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80172d8:	f04f 0900 	mov.w	r9, #0
 80172dc:	e7de      	b.n	801729c <_printf_float+0x16c>
 80172de:	b913      	cbnz	r3, 80172e6 <_printf_float+0x1b6>
 80172e0:	6822      	ldr	r2, [r4, #0]
 80172e2:	07d2      	lsls	r2, r2, #31
 80172e4:	d501      	bpl.n	80172ea <_printf_float+0x1ba>
 80172e6:	3302      	adds	r3, #2
 80172e8:	e7f4      	b.n	80172d4 <_printf_float+0x1a4>
 80172ea:	2301      	movs	r3, #1
 80172ec:	e7f2      	b.n	80172d4 <_printf_float+0x1a4>
 80172ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80172f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172f4:	4299      	cmp	r1, r3
 80172f6:	db05      	blt.n	8017304 <_printf_float+0x1d4>
 80172f8:	6823      	ldr	r3, [r4, #0]
 80172fa:	6121      	str	r1, [r4, #16]
 80172fc:	07d8      	lsls	r0, r3, #31
 80172fe:	d5ea      	bpl.n	80172d6 <_printf_float+0x1a6>
 8017300:	1c4b      	adds	r3, r1, #1
 8017302:	e7e7      	b.n	80172d4 <_printf_float+0x1a4>
 8017304:	2900      	cmp	r1, #0
 8017306:	bfd4      	ite	le
 8017308:	f1c1 0202 	rsble	r2, r1, #2
 801730c:	2201      	movgt	r2, #1
 801730e:	4413      	add	r3, r2
 8017310:	e7e0      	b.n	80172d4 <_printf_float+0x1a4>
 8017312:	6823      	ldr	r3, [r4, #0]
 8017314:	055a      	lsls	r2, r3, #21
 8017316:	d407      	bmi.n	8017328 <_printf_float+0x1f8>
 8017318:	6923      	ldr	r3, [r4, #16]
 801731a:	4642      	mov	r2, r8
 801731c:	4631      	mov	r1, r6
 801731e:	4628      	mov	r0, r5
 8017320:	47b8      	blx	r7
 8017322:	3001      	adds	r0, #1
 8017324:	d12c      	bne.n	8017380 <_printf_float+0x250>
 8017326:	e764      	b.n	80171f2 <_printf_float+0xc2>
 8017328:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801732c:	f240 80e0 	bls.w	80174f0 <_printf_float+0x3c0>
 8017330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017334:	2200      	movs	r2, #0
 8017336:	2300      	movs	r3, #0
 8017338:	f7e9 fbde 	bl	8000af8 <__aeabi_dcmpeq>
 801733c:	2800      	cmp	r0, #0
 801733e:	d034      	beq.n	80173aa <_printf_float+0x27a>
 8017340:	4a37      	ldr	r2, [pc, #220]	; (8017420 <_printf_float+0x2f0>)
 8017342:	2301      	movs	r3, #1
 8017344:	4631      	mov	r1, r6
 8017346:	4628      	mov	r0, r5
 8017348:	47b8      	blx	r7
 801734a:	3001      	adds	r0, #1
 801734c:	f43f af51 	beq.w	80171f2 <_printf_float+0xc2>
 8017350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017354:	429a      	cmp	r2, r3
 8017356:	db02      	blt.n	801735e <_printf_float+0x22e>
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	07d8      	lsls	r0, r3, #31
 801735c:	d510      	bpl.n	8017380 <_printf_float+0x250>
 801735e:	ee18 3a10 	vmov	r3, s16
 8017362:	4652      	mov	r2, sl
 8017364:	4631      	mov	r1, r6
 8017366:	4628      	mov	r0, r5
 8017368:	47b8      	blx	r7
 801736a:	3001      	adds	r0, #1
 801736c:	f43f af41 	beq.w	80171f2 <_printf_float+0xc2>
 8017370:	f04f 0800 	mov.w	r8, #0
 8017374:	f104 091a 	add.w	r9, r4, #26
 8017378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801737a:	3b01      	subs	r3, #1
 801737c:	4543      	cmp	r3, r8
 801737e:	dc09      	bgt.n	8017394 <_printf_float+0x264>
 8017380:	6823      	ldr	r3, [r4, #0]
 8017382:	079b      	lsls	r3, r3, #30
 8017384:	f100 8105 	bmi.w	8017592 <_printf_float+0x462>
 8017388:	68e0      	ldr	r0, [r4, #12]
 801738a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801738c:	4298      	cmp	r0, r3
 801738e:	bfb8      	it	lt
 8017390:	4618      	movlt	r0, r3
 8017392:	e730      	b.n	80171f6 <_printf_float+0xc6>
 8017394:	2301      	movs	r3, #1
 8017396:	464a      	mov	r2, r9
 8017398:	4631      	mov	r1, r6
 801739a:	4628      	mov	r0, r5
 801739c:	47b8      	blx	r7
 801739e:	3001      	adds	r0, #1
 80173a0:	f43f af27 	beq.w	80171f2 <_printf_float+0xc2>
 80173a4:	f108 0801 	add.w	r8, r8, #1
 80173a8:	e7e6      	b.n	8017378 <_printf_float+0x248>
 80173aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	dc39      	bgt.n	8017424 <_printf_float+0x2f4>
 80173b0:	4a1b      	ldr	r2, [pc, #108]	; (8017420 <_printf_float+0x2f0>)
 80173b2:	2301      	movs	r3, #1
 80173b4:	4631      	mov	r1, r6
 80173b6:	4628      	mov	r0, r5
 80173b8:	47b8      	blx	r7
 80173ba:	3001      	adds	r0, #1
 80173bc:	f43f af19 	beq.w	80171f2 <_printf_float+0xc2>
 80173c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80173c4:	4313      	orrs	r3, r2
 80173c6:	d102      	bne.n	80173ce <_printf_float+0x29e>
 80173c8:	6823      	ldr	r3, [r4, #0]
 80173ca:	07d9      	lsls	r1, r3, #31
 80173cc:	d5d8      	bpl.n	8017380 <_printf_float+0x250>
 80173ce:	ee18 3a10 	vmov	r3, s16
 80173d2:	4652      	mov	r2, sl
 80173d4:	4631      	mov	r1, r6
 80173d6:	4628      	mov	r0, r5
 80173d8:	47b8      	blx	r7
 80173da:	3001      	adds	r0, #1
 80173dc:	f43f af09 	beq.w	80171f2 <_printf_float+0xc2>
 80173e0:	f04f 0900 	mov.w	r9, #0
 80173e4:	f104 0a1a 	add.w	sl, r4, #26
 80173e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ea:	425b      	negs	r3, r3
 80173ec:	454b      	cmp	r3, r9
 80173ee:	dc01      	bgt.n	80173f4 <_printf_float+0x2c4>
 80173f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173f2:	e792      	b.n	801731a <_printf_float+0x1ea>
 80173f4:	2301      	movs	r3, #1
 80173f6:	4652      	mov	r2, sl
 80173f8:	4631      	mov	r1, r6
 80173fa:	4628      	mov	r0, r5
 80173fc:	47b8      	blx	r7
 80173fe:	3001      	adds	r0, #1
 8017400:	f43f aef7 	beq.w	80171f2 <_printf_float+0xc2>
 8017404:	f109 0901 	add.w	r9, r9, #1
 8017408:	e7ee      	b.n	80173e8 <_printf_float+0x2b8>
 801740a:	bf00      	nop
 801740c:	7fefffff 	.word	0x7fefffff
 8017410:	0801a170 	.word	0x0801a170
 8017414:	0801a174 	.word	0x0801a174
 8017418:	0801a17c 	.word	0x0801a17c
 801741c:	0801a178 	.word	0x0801a178
 8017420:	0801a180 	.word	0x0801a180
 8017424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017426:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017428:	429a      	cmp	r2, r3
 801742a:	bfa8      	it	ge
 801742c:	461a      	movge	r2, r3
 801742e:	2a00      	cmp	r2, #0
 8017430:	4691      	mov	r9, r2
 8017432:	dc37      	bgt.n	80174a4 <_printf_float+0x374>
 8017434:	f04f 0b00 	mov.w	fp, #0
 8017438:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801743c:	f104 021a 	add.w	r2, r4, #26
 8017440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017442:	9305      	str	r3, [sp, #20]
 8017444:	eba3 0309 	sub.w	r3, r3, r9
 8017448:	455b      	cmp	r3, fp
 801744a:	dc33      	bgt.n	80174b4 <_printf_float+0x384>
 801744c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017450:	429a      	cmp	r2, r3
 8017452:	db3b      	blt.n	80174cc <_printf_float+0x39c>
 8017454:	6823      	ldr	r3, [r4, #0]
 8017456:	07da      	lsls	r2, r3, #31
 8017458:	d438      	bmi.n	80174cc <_printf_float+0x39c>
 801745a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801745c:	9a05      	ldr	r2, [sp, #20]
 801745e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017460:	1a9a      	subs	r2, r3, r2
 8017462:	eba3 0901 	sub.w	r9, r3, r1
 8017466:	4591      	cmp	r9, r2
 8017468:	bfa8      	it	ge
 801746a:	4691      	movge	r9, r2
 801746c:	f1b9 0f00 	cmp.w	r9, #0
 8017470:	dc35      	bgt.n	80174de <_printf_float+0x3ae>
 8017472:	f04f 0800 	mov.w	r8, #0
 8017476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801747a:	f104 0a1a 	add.w	sl, r4, #26
 801747e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017482:	1a9b      	subs	r3, r3, r2
 8017484:	eba3 0309 	sub.w	r3, r3, r9
 8017488:	4543      	cmp	r3, r8
 801748a:	f77f af79 	ble.w	8017380 <_printf_float+0x250>
 801748e:	2301      	movs	r3, #1
 8017490:	4652      	mov	r2, sl
 8017492:	4631      	mov	r1, r6
 8017494:	4628      	mov	r0, r5
 8017496:	47b8      	blx	r7
 8017498:	3001      	adds	r0, #1
 801749a:	f43f aeaa 	beq.w	80171f2 <_printf_float+0xc2>
 801749e:	f108 0801 	add.w	r8, r8, #1
 80174a2:	e7ec      	b.n	801747e <_printf_float+0x34e>
 80174a4:	4613      	mov	r3, r2
 80174a6:	4631      	mov	r1, r6
 80174a8:	4642      	mov	r2, r8
 80174aa:	4628      	mov	r0, r5
 80174ac:	47b8      	blx	r7
 80174ae:	3001      	adds	r0, #1
 80174b0:	d1c0      	bne.n	8017434 <_printf_float+0x304>
 80174b2:	e69e      	b.n	80171f2 <_printf_float+0xc2>
 80174b4:	2301      	movs	r3, #1
 80174b6:	4631      	mov	r1, r6
 80174b8:	4628      	mov	r0, r5
 80174ba:	9205      	str	r2, [sp, #20]
 80174bc:	47b8      	blx	r7
 80174be:	3001      	adds	r0, #1
 80174c0:	f43f ae97 	beq.w	80171f2 <_printf_float+0xc2>
 80174c4:	9a05      	ldr	r2, [sp, #20]
 80174c6:	f10b 0b01 	add.w	fp, fp, #1
 80174ca:	e7b9      	b.n	8017440 <_printf_float+0x310>
 80174cc:	ee18 3a10 	vmov	r3, s16
 80174d0:	4652      	mov	r2, sl
 80174d2:	4631      	mov	r1, r6
 80174d4:	4628      	mov	r0, r5
 80174d6:	47b8      	blx	r7
 80174d8:	3001      	adds	r0, #1
 80174da:	d1be      	bne.n	801745a <_printf_float+0x32a>
 80174dc:	e689      	b.n	80171f2 <_printf_float+0xc2>
 80174de:	9a05      	ldr	r2, [sp, #20]
 80174e0:	464b      	mov	r3, r9
 80174e2:	4442      	add	r2, r8
 80174e4:	4631      	mov	r1, r6
 80174e6:	4628      	mov	r0, r5
 80174e8:	47b8      	blx	r7
 80174ea:	3001      	adds	r0, #1
 80174ec:	d1c1      	bne.n	8017472 <_printf_float+0x342>
 80174ee:	e680      	b.n	80171f2 <_printf_float+0xc2>
 80174f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174f2:	2a01      	cmp	r2, #1
 80174f4:	dc01      	bgt.n	80174fa <_printf_float+0x3ca>
 80174f6:	07db      	lsls	r3, r3, #31
 80174f8:	d538      	bpl.n	801756c <_printf_float+0x43c>
 80174fa:	2301      	movs	r3, #1
 80174fc:	4642      	mov	r2, r8
 80174fe:	4631      	mov	r1, r6
 8017500:	4628      	mov	r0, r5
 8017502:	47b8      	blx	r7
 8017504:	3001      	adds	r0, #1
 8017506:	f43f ae74 	beq.w	80171f2 <_printf_float+0xc2>
 801750a:	ee18 3a10 	vmov	r3, s16
 801750e:	4652      	mov	r2, sl
 8017510:	4631      	mov	r1, r6
 8017512:	4628      	mov	r0, r5
 8017514:	47b8      	blx	r7
 8017516:	3001      	adds	r0, #1
 8017518:	f43f ae6b 	beq.w	80171f2 <_printf_float+0xc2>
 801751c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017520:	2200      	movs	r2, #0
 8017522:	2300      	movs	r3, #0
 8017524:	f7e9 fae8 	bl	8000af8 <__aeabi_dcmpeq>
 8017528:	b9d8      	cbnz	r0, 8017562 <_printf_float+0x432>
 801752a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801752c:	f108 0201 	add.w	r2, r8, #1
 8017530:	3b01      	subs	r3, #1
 8017532:	4631      	mov	r1, r6
 8017534:	4628      	mov	r0, r5
 8017536:	47b8      	blx	r7
 8017538:	3001      	adds	r0, #1
 801753a:	d10e      	bne.n	801755a <_printf_float+0x42a>
 801753c:	e659      	b.n	80171f2 <_printf_float+0xc2>
 801753e:	2301      	movs	r3, #1
 8017540:	4652      	mov	r2, sl
 8017542:	4631      	mov	r1, r6
 8017544:	4628      	mov	r0, r5
 8017546:	47b8      	blx	r7
 8017548:	3001      	adds	r0, #1
 801754a:	f43f ae52 	beq.w	80171f2 <_printf_float+0xc2>
 801754e:	f108 0801 	add.w	r8, r8, #1
 8017552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017554:	3b01      	subs	r3, #1
 8017556:	4543      	cmp	r3, r8
 8017558:	dcf1      	bgt.n	801753e <_printf_float+0x40e>
 801755a:	464b      	mov	r3, r9
 801755c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017560:	e6dc      	b.n	801731c <_printf_float+0x1ec>
 8017562:	f04f 0800 	mov.w	r8, #0
 8017566:	f104 0a1a 	add.w	sl, r4, #26
 801756a:	e7f2      	b.n	8017552 <_printf_float+0x422>
 801756c:	2301      	movs	r3, #1
 801756e:	4642      	mov	r2, r8
 8017570:	e7df      	b.n	8017532 <_printf_float+0x402>
 8017572:	2301      	movs	r3, #1
 8017574:	464a      	mov	r2, r9
 8017576:	4631      	mov	r1, r6
 8017578:	4628      	mov	r0, r5
 801757a:	47b8      	blx	r7
 801757c:	3001      	adds	r0, #1
 801757e:	f43f ae38 	beq.w	80171f2 <_printf_float+0xc2>
 8017582:	f108 0801 	add.w	r8, r8, #1
 8017586:	68e3      	ldr	r3, [r4, #12]
 8017588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801758a:	1a5b      	subs	r3, r3, r1
 801758c:	4543      	cmp	r3, r8
 801758e:	dcf0      	bgt.n	8017572 <_printf_float+0x442>
 8017590:	e6fa      	b.n	8017388 <_printf_float+0x258>
 8017592:	f04f 0800 	mov.w	r8, #0
 8017596:	f104 0919 	add.w	r9, r4, #25
 801759a:	e7f4      	b.n	8017586 <_printf_float+0x456>

0801759c <_printf_common>:
 801759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175a0:	4616      	mov	r6, r2
 80175a2:	4699      	mov	r9, r3
 80175a4:	688a      	ldr	r2, [r1, #8]
 80175a6:	690b      	ldr	r3, [r1, #16]
 80175a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175ac:	4293      	cmp	r3, r2
 80175ae:	bfb8      	it	lt
 80175b0:	4613      	movlt	r3, r2
 80175b2:	6033      	str	r3, [r6, #0]
 80175b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175b8:	4607      	mov	r7, r0
 80175ba:	460c      	mov	r4, r1
 80175bc:	b10a      	cbz	r2, 80175c2 <_printf_common+0x26>
 80175be:	3301      	adds	r3, #1
 80175c0:	6033      	str	r3, [r6, #0]
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	0699      	lsls	r1, r3, #26
 80175c6:	bf42      	ittt	mi
 80175c8:	6833      	ldrmi	r3, [r6, #0]
 80175ca:	3302      	addmi	r3, #2
 80175cc:	6033      	strmi	r3, [r6, #0]
 80175ce:	6825      	ldr	r5, [r4, #0]
 80175d0:	f015 0506 	ands.w	r5, r5, #6
 80175d4:	d106      	bne.n	80175e4 <_printf_common+0x48>
 80175d6:	f104 0a19 	add.w	sl, r4, #25
 80175da:	68e3      	ldr	r3, [r4, #12]
 80175dc:	6832      	ldr	r2, [r6, #0]
 80175de:	1a9b      	subs	r3, r3, r2
 80175e0:	42ab      	cmp	r3, r5
 80175e2:	dc26      	bgt.n	8017632 <_printf_common+0x96>
 80175e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80175e8:	1e13      	subs	r3, r2, #0
 80175ea:	6822      	ldr	r2, [r4, #0]
 80175ec:	bf18      	it	ne
 80175ee:	2301      	movne	r3, #1
 80175f0:	0692      	lsls	r2, r2, #26
 80175f2:	d42b      	bmi.n	801764c <_printf_common+0xb0>
 80175f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175f8:	4649      	mov	r1, r9
 80175fa:	4638      	mov	r0, r7
 80175fc:	47c0      	blx	r8
 80175fe:	3001      	adds	r0, #1
 8017600:	d01e      	beq.n	8017640 <_printf_common+0xa4>
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	68e5      	ldr	r5, [r4, #12]
 8017606:	6832      	ldr	r2, [r6, #0]
 8017608:	f003 0306 	and.w	r3, r3, #6
 801760c:	2b04      	cmp	r3, #4
 801760e:	bf08      	it	eq
 8017610:	1aad      	subeq	r5, r5, r2
 8017612:	68a3      	ldr	r3, [r4, #8]
 8017614:	6922      	ldr	r2, [r4, #16]
 8017616:	bf0c      	ite	eq
 8017618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801761c:	2500      	movne	r5, #0
 801761e:	4293      	cmp	r3, r2
 8017620:	bfc4      	itt	gt
 8017622:	1a9b      	subgt	r3, r3, r2
 8017624:	18ed      	addgt	r5, r5, r3
 8017626:	2600      	movs	r6, #0
 8017628:	341a      	adds	r4, #26
 801762a:	42b5      	cmp	r5, r6
 801762c:	d11a      	bne.n	8017664 <_printf_common+0xc8>
 801762e:	2000      	movs	r0, #0
 8017630:	e008      	b.n	8017644 <_printf_common+0xa8>
 8017632:	2301      	movs	r3, #1
 8017634:	4652      	mov	r2, sl
 8017636:	4649      	mov	r1, r9
 8017638:	4638      	mov	r0, r7
 801763a:	47c0      	blx	r8
 801763c:	3001      	adds	r0, #1
 801763e:	d103      	bne.n	8017648 <_printf_common+0xac>
 8017640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017648:	3501      	adds	r5, #1
 801764a:	e7c6      	b.n	80175da <_printf_common+0x3e>
 801764c:	18e1      	adds	r1, r4, r3
 801764e:	1c5a      	adds	r2, r3, #1
 8017650:	2030      	movs	r0, #48	; 0x30
 8017652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017656:	4422      	add	r2, r4
 8017658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801765c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017660:	3302      	adds	r3, #2
 8017662:	e7c7      	b.n	80175f4 <_printf_common+0x58>
 8017664:	2301      	movs	r3, #1
 8017666:	4622      	mov	r2, r4
 8017668:	4649      	mov	r1, r9
 801766a:	4638      	mov	r0, r7
 801766c:	47c0      	blx	r8
 801766e:	3001      	adds	r0, #1
 8017670:	d0e6      	beq.n	8017640 <_printf_common+0xa4>
 8017672:	3601      	adds	r6, #1
 8017674:	e7d9      	b.n	801762a <_printf_common+0x8e>
	...

08017678 <_printf_i>:
 8017678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801767c:	7e0f      	ldrb	r7, [r1, #24]
 801767e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017680:	2f78      	cmp	r7, #120	; 0x78
 8017682:	4691      	mov	r9, r2
 8017684:	4680      	mov	r8, r0
 8017686:	460c      	mov	r4, r1
 8017688:	469a      	mov	sl, r3
 801768a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801768e:	d807      	bhi.n	80176a0 <_printf_i+0x28>
 8017690:	2f62      	cmp	r7, #98	; 0x62
 8017692:	d80a      	bhi.n	80176aa <_printf_i+0x32>
 8017694:	2f00      	cmp	r7, #0
 8017696:	f000 80d8 	beq.w	801784a <_printf_i+0x1d2>
 801769a:	2f58      	cmp	r7, #88	; 0x58
 801769c:	f000 80a3 	beq.w	80177e6 <_printf_i+0x16e>
 80176a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80176a8:	e03a      	b.n	8017720 <_printf_i+0xa8>
 80176aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80176ae:	2b15      	cmp	r3, #21
 80176b0:	d8f6      	bhi.n	80176a0 <_printf_i+0x28>
 80176b2:	a101      	add	r1, pc, #4	; (adr r1, 80176b8 <_printf_i+0x40>)
 80176b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80176b8:	08017711 	.word	0x08017711
 80176bc:	08017725 	.word	0x08017725
 80176c0:	080176a1 	.word	0x080176a1
 80176c4:	080176a1 	.word	0x080176a1
 80176c8:	080176a1 	.word	0x080176a1
 80176cc:	080176a1 	.word	0x080176a1
 80176d0:	08017725 	.word	0x08017725
 80176d4:	080176a1 	.word	0x080176a1
 80176d8:	080176a1 	.word	0x080176a1
 80176dc:	080176a1 	.word	0x080176a1
 80176e0:	080176a1 	.word	0x080176a1
 80176e4:	08017831 	.word	0x08017831
 80176e8:	08017755 	.word	0x08017755
 80176ec:	08017813 	.word	0x08017813
 80176f0:	080176a1 	.word	0x080176a1
 80176f4:	080176a1 	.word	0x080176a1
 80176f8:	08017853 	.word	0x08017853
 80176fc:	080176a1 	.word	0x080176a1
 8017700:	08017755 	.word	0x08017755
 8017704:	080176a1 	.word	0x080176a1
 8017708:	080176a1 	.word	0x080176a1
 801770c:	0801781b 	.word	0x0801781b
 8017710:	682b      	ldr	r3, [r5, #0]
 8017712:	1d1a      	adds	r2, r3, #4
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	602a      	str	r2, [r5, #0]
 8017718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801771c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017720:	2301      	movs	r3, #1
 8017722:	e0a3      	b.n	801786c <_printf_i+0x1f4>
 8017724:	6820      	ldr	r0, [r4, #0]
 8017726:	6829      	ldr	r1, [r5, #0]
 8017728:	0606      	lsls	r6, r0, #24
 801772a:	f101 0304 	add.w	r3, r1, #4
 801772e:	d50a      	bpl.n	8017746 <_printf_i+0xce>
 8017730:	680e      	ldr	r6, [r1, #0]
 8017732:	602b      	str	r3, [r5, #0]
 8017734:	2e00      	cmp	r6, #0
 8017736:	da03      	bge.n	8017740 <_printf_i+0xc8>
 8017738:	232d      	movs	r3, #45	; 0x2d
 801773a:	4276      	negs	r6, r6
 801773c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017740:	485e      	ldr	r0, [pc, #376]	; (80178bc <_printf_i+0x244>)
 8017742:	230a      	movs	r3, #10
 8017744:	e019      	b.n	801777a <_printf_i+0x102>
 8017746:	680e      	ldr	r6, [r1, #0]
 8017748:	602b      	str	r3, [r5, #0]
 801774a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801774e:	bf18      	it	ne
 8017750:	b236      	sxthne	r6, r6
 8017752:	e7ef      	b.n	8017734 <_printf_i+0xbc>
 8017754:	682b      	ldr	r3, [r5, #0]
 8017756:	6820      	ldr	r0, [r4, #0]
 8017758:	1d19      	adds	r1, r3, #4
 801775a:	6029      	str	r1, [r5, #0]
 801775c:	0601      	lsls	r1, r0, #24
 801775e:	d501      	bpl.n	8017764 <_printf_i+0xec>
 8017760:	681e      	ldr	r6, [r3, #0]
 8017762:	e002      	b.n	801776a <_printf_i+0xf2>
 8017764:	0646      	lsls	r6, r0, #25
 8017766:	d5fb      	bpl.n	8017760 <_printf_i+0xe8>
 8017768:	881e      	ldrh	r6, [r3, #0]
 801776a:	4854      	ldr	r0, [pc, #336]	; (80178bc <_printf_i+0x244>)
 801776c:	2f6f      	cmp	r7, #111	; 0x6f
 801776e:	bf0c      	ite	eq
 8017770:	2308      	moveq	r3, #8
 8017772:	230a      	movne	r3, #10
 8017774:	2100      	movs	r1, #0
 8017776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801777a:	6865      	ldr	r5, [r4, #4]
 801777c:	60a5      	str	r5, [r4, #8]
 801777e:	2d00      	cmp	r5, #0
 8017780:	bfa2      	ittt	ge
 8017782:	6821      	ldrge	r1, [r4, #0]
 8017784:	f021 0104 	bicge.w	r1, r1, #4
 8017788:	6021      	strge	r1, [r4, #0]
 801778a:	b90e      	cbnz	r6, 8017790 <_printf_i+0x118>
 801778c:	2d00      	cmp	r5, #0
 801778e:	d04d      	beq.n	801782c <_printf_i+0x1b4>
 8017790:	4615      	mov	r5, r2
 8017792:	fbb6 f1f3 	udiv	r1, r6, r3
 8017796:	fb03 6711 	mls	r7, r3, r1, r6
 801779a:	5dc7      	ldrb	r7, [r0, r7]
 801779c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80177a0:	4637      	mov	r7, r6
 80177a2:	42bb      	cmp	r3, r7
 80177a4:	460e      	mov	r6, r1
 80177a6:	d9f4      	bls.n	8017792 <_printf_i+0x11a>
 80177a8:	2b08      	cmp	r3, #8
 80177aa:	d10b      	bne.n	80177c4 <_printf_i+0x14c>
 80177ac:	6823      	ldr	r3, [r4, #0]
 80177ae:	07de      	lsls	r6, r3, #31
 80177b0:	d508      	bpl.n	80177c4 <_printf_i+0x14c>
 80177b2:	6923      	ldr	r3, [r4, #16]
 80177b4:	6861      	ldr	r1, [r4, #4]
 80177b6:	4299      	cmp	r1, r3
 80177b8:	bfde      	ittt	le
 80177ba:	2330      	movle	r3, #48	; 0x30
 80177bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80177c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80177c4:	1b52      	subs	r2, r2, r5
 80177c6:	6122      	str	r2, [r4, #16]
 80177c8:	f8cd a000 	str.w	sl, [sp]
 80177cc:	464b      	mov	r3, r9
 80177ce:	aa03      	add	r2, sp, #12
 80177d0:	4621      	mov	r1, r4
 80177d2:	4640      	mov	r0, r8
 80177d4:	f7ff fee2 	bl	801759c <_printf_common>
 80177d8:	3001      	adds	r0, #1
 80177da:	d14c      	bne.n	8017876 <_printf_i+0x1fe>
 80177dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177e0:	b004      	add	sp, #16
 80177e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177e6:	4835      	ldr	r0, [pc, #212]	; (80178bc <_printf_i+0x244>)
 80177e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80177ec:	6829      	ldr	r1, [r5, #0]
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80177f4:	6029      	str	r1, [r5, #0]
 80177f6:	061d      	lsls	r5, r3, #24
 80177f8:	d514      	bpl.n	8017824 <_printf_i+0x1ac>
 80177fa:	07df      	lsls	r7, r3, #31
 80177fc:	bf44      	itt	mi
 80177fe:	f043 0320 	orrmi.w	r3, r3, #32
 8017802:	6023      	strmi	r3, [r4, #0]
 8017804:	b91e      	cbnz	r6, 801780e <_printf_i+0x196>
 8017806:	6823      	ldr	r3, [r4, #0]
 8017808:	f023 0320 	bic.w	r3, r3, #32
 801780c:	6023      	str	r3, [r4, #0]
 801780e:	2310      	movs	r3, #16
 8017810:	e7b0      	b.n	8017774 <_printf_i+0xfc>
 8017812:	6823      	ldr	r3, [r4, #0]
 8017814:	f043 0320 	orr.w	r3, r3, #32
 8017818:	6023      	str	r3, [r4, #0]
 801781a:	2378      	movs	r3, #120	; 0x78
 801781c:	4828      	ldr	r0, [pc, #160]	; (80178c0 <_printf_i+0x248>)
 801781e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017822:	e7e3      	b.n	80177ec <_printf_i+0x174>
 8017824:	0659      	lsls	r1, r3, #25
 8017826:	bf48      	it	mi
 8017828:	b2b6      	uxthmi	r6, r6
 801782a:	e7e6      	b.n	80177fa <_printf_i+0x182>
 801782c:	4615      	mov	r5, r2
 801782e:	e7bb      	b.n	80177a8 <_printf_i+0x130>
 8017830:	682b      	ldr	r3, [r5, #0]
 8017832:	6826      	ldr	r6, [r4, #0]
 8017834:	6961      	ldr	r1, [r4, #20]
 8017836:	1d18      	adds	r0, r3, #4
 8017838:	6028      	str	r0, [r5, #0]
 801783a:	0635      	lsls	r5, r6, #24
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	d501      	bpl.n	8017844 <_printf_i+0x1cc>
 8017840:	6019      	str	r1, [r3, #0]
 8017842:	e002      	b.n	801784a <_printf_i+0x1d2>
 8017844:	0670      	lsls	r0, r6, #25
 8017846:	d5fb      	bpl.n	8017840 <_printf_i+0x1c8>
 8017848:	8019      	strh	r1, [r3, #0]
 801784a:	2300      	movs	r3, #0
 801784c:	6123      	str	r3, [r4, #16]
 801784e:	4615      	mov	r5, r2
 8017850:	e7ba      	b.n	80177c8 <_printf_i+0x150>
 8017852:	682b      	ldr	r3, [r5, #0]
 8017854:	1d1a      	adds	r2, r3, #4
 8017856:	602a      	str	r2, [r5, #0]
 8017858:	681d      	ldr	r5, [r3, #0]
 801785a:	6862      	ldr	r2, [r4, #4]
 801785c:	2100      	movs	r1, #0
 801785e:	4628      	mov	r0, r5
 8017860:	f7e8 fcd6 	bl	8000210 <memchr>
 8017864:	b108      	cbz	r0, 801786a <_printf_i+0x1f2>
 8017866:	1b40      	subs	r0, r0, r5
 8017868:	6060      	str	r0, [r4, #4]
 801786a:	6863      	ldr	r3, [r4, #4]
 801786c:	6123      	str	r3, [r4, #16]
 801786e:	2300      	movs	r3, #0
 8017870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017874:	e7a8      	b.n	80177c8 <_printf_i+0x150>
 8017876:	6923      	ldr	r3, [r4, #16]
 8017878:	462a      	mov	r2, r5
 801787a:	4649      	mov	r1, r9
 801787c:	4640      	mov	r0, r8
 801787e:	47d0      	blx	sl
 8017880:	3001      	adds	r0, #1
 8017882:	d0ab      	beq.n	80177dc <_printf_i+0x164>
 8017884:	6823      	ldr	r3, [r4, #0]
 8017886:	079b      	lsls	r3, r3, #30
 8017888:	d413      	bmi.n	80178b2 <_printf_i+0x23a>
 801788a:	68e0      	ldr	r0, [r4, #12]
 801788c:	9b03      	ldr	r3, [sp, #12]
 801788e:	4298      	cmp	r0, r3
 8017890:	bfb8      	it	lt
 8017892:	4618      	movlt	r0, r3
 8017894:	e7a4      	b.n	80177e0 <_printf_i+0x168>
 8017896:	2301      	movs	r3, #1
 8017898:	4632      	mov	r2, r6
 801789a:	4649      	mov	r1, r9
 801789c:	4640      	mov	r0, r8
 801789e:	47d0      	blx	sl
 80178a0:	3001      	adds	r0, #1
 80178a2:	d09b      	beq.n	80177dc <_printf_i+0x164>
 80178a4:	3501      	adds	r5, #1
 80178a6:	68e3      	ldr	r3, [r4, #12]
 80178a8:	9903      	ldr	r1, [sp, #12]
 80178aa:	1a5b      	subs	r3, r3, r1
 80178ac:	42ab      	cmp	r3, r5
 80178ae:	dcf2      	bgt.n	8017896 <_printf_i+0x21e>
 80178b0:	e7eb      	b.n	801788a <_printf_i+0x212>
 80178b2:	2500      	movs	r5, #0
 80178b4:	f104 0619 	add.w	r6, r4, #25
 80178b8:	e7f5      	b.n	80178a6 <_printf_i+0x22e>
 80178ba:	bf00      	nop
 80178bc:	0801a182 	.word	0x0801a182
 80178c0:	0801a193 	.word	0x0801a193

080178c4 <iprintf>:
 80178c4:	b40f      	push	{r0, r1, r2, r3}
 80178c6:	4b0a      	ldr	r3, [pc, #40]	; (80178f0 <iprintf+0x2c>)
 80178c8:	b513      	push	{r0, r1, r4, lr}
 80178ca:	681c      	ldr	r4, [r3, #0]
 80178cc:	b124      	cbz	r4, 80178d8 <iprintf+0x14>
 80178ce:	69a3      	ldr	r3, [r4, #24]
 80178d0:	b913      	cbnz	r3, 80178d8 <iprintf+0x14>
 80178d2:	4620      	mov	r0, r4
 80178d4:	f000 ff2e 	bl	8018734 <__sinit>
 80178d8:	ab05      	add	r3, sp, #20
 80178da:	9a04      	ldr	r2, [sp, #16]
 80178dc:	68a1      	ldr	r1, [r4, #8]
 80178de:	9301      	str	r3, [sp, #4]
 80178e0:	4620      	mov	r0, r4
 80178e2:	f001 fd1d 	bl	8019320 <_vfiprintf_r>
 80178e6:	b002      	add	sp, #8
 80178e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178ec:	b004      	add	sp, #16
 80178ee:	4770      	bx	lr
 80178f0:	20000184 	.word	0x20000184

080178f4 <_sbrk_r>:
 80178f4:	b538      	push	{r3, r4, r5, lr}
 80178f6:	4d06      	ldr	r5, [pc, #24]	; (8017910 <_sbrk_r+0x1c>)
 80178f8:	2300      	movs	r3, #0
 80178fa:	4604      	mov	r4, r0
 80178fc:	4608      	mov	r0, r1
 80178fe:	602b      	str	r3, [r5, #0]
 8017900:	f002 f9b6 	bl	8019c70 <_sbrk>
 8017904:	1c43      	adds	r3, r0, #1
 8017906:	d102      	bne.n	801790e <_sbrk_r+0x1a>
 8017908:	682b      	ldr	r3, [r5, #0]
 801790a:	b103      	cbz	r3, 801790e <_sbrk_r+0x1a>
 801790c:	6023      	str	r3, [r4, #0]
 801790e:	bd38      	pop	{r3, r4, r5, pc}
 8017910:	20002f6c 	.word	0x20002f6c

08017914 <siprintf>:
 8017914:	b40e      	push	{r1, r2, r3}
 8017916:	b500      	push	{lr}
 8017918:	b09c      	sub	sp, #112	; 0x70
 801791a:	ab1d      	add	r3, sp, #116	; 0x74
 801791c:	9002      	str	r0, [sp, #8]
 801791e:	9006      	str	r0, [sp, #24]
 8017920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017924:	4809      	ldr	r0, [pc, #36]	; (801794c <siprintf+0x38>)
 8017926:	9107      	str	r1, [sp, #28]
 8017928:	9104      	str	r1, [sp, #16]
 801792a:	4909      	ldr	r1, [pc, #36]	; (8017950 <siprintf+0x3c>)
 801792c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017930:	9105      	str	r1, [sp, #20]
 8017932:	6800      	ldr	r0, [r0, #0]
 8017934:	9301      	str	r3, [sp, #4]
 8017936:	a902      	add	r1, sp, #8
 8017938:	f001 fbc8 	bl	80190cc <_svfiprintf_r>
 801793c:	9b02      	ldr	r3, [sp, #8]
 801793e:	2200      	movs	r2, #0
 8017940:	701a      	strb	r2, [r3, #0]
 8017942:	b01c      	add	sp, #112	; 0x70
 8017944:	f85d eb04 	ldr.w	lr, [sp], #4
 8017948:	b003      	add	sp, #12
 801794a:	4770      	bx	lr
 801794c:	20000184 	.word	0x20000184
 8017950:	ffff0208 	.word	0xffff0208

08017954 <__assert_func>:
 8017954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017956:	4614      	mov	r4, r2
 8017958:	461a      	mov	r2, r3
 801795a:	4b09      	ldr	r3, [pc, #36]	; (8017980 <__assert_func+0x2c>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	4605      	mov	r5, r0
 8017960:	68d8      	ldr	r0, [r3, #12]
 8017962:	b14c      	cbz	r4, 8017978 <__assert_func+0x24>
 8017964:	4b07      	ldr	r3, [pc, #28]	; (8017984 <__assert_func+0x30>)
 8017966:	9100      	str	r1, [sp, #0]
 8017968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801796c:	4906      	ldr	r1, [pc, #24]	; (8017988 <__assert_func+0x34>)
 801796e:	462b      	mov	r3, r5
 8017970:	f000 ff5e 	bl	8018830 <fiprintf>
 8017974:	f001 ff28 	bl	80197c8 <abort>
 8017978:	4b04      	ldr	r3, [pc, #16]	; (801798c <__assert_func+0x38>)
 801797a:	461c      	mov	r4, r3
 801797c:	e7f3      	b.n	8017966 <__assert_func+0x12>
 801797e:	bf00      	nop
 8017980:	20000184 	.word	0x20000184
 8017984:	0801a1a4 	.word	0x0801a1a4
 8017988:	0801a1b1 	.word	0x0801a1b1
 801798c:	0801a1df 	.word	0x0801a1df

08017990 <quorem>:
 8017990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017994:	6903      	ldr	r3, [r0, #16]
 8017996:	690c      	ldr	r4, [r1, #16]
 8017998:	42a3      	cmp	r3, r4
 801799a:	4607      	mov	r7, r0
 801799c:	f2c0 8081 	blt.w	8017aa2 <quorem+0x112>
 80179a0:	3c01      	subs	r4, #1
 80179a2:	f101 0814 	add.w	r8, r1, #20
 80179a6:	f100 0514 	add.w	r5, r0, #20
 80179aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80179ae:	9301      	str	r3, [sp, #4]
 80179b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80179b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80179b8:	3301      	adds	r3, #1
 80179ba:	429a      	cmp	r2, r3
 80179bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80179c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80179c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80179c8:	d331      	bcc.n	8017a2e <quorem+0x9e>
 80179ca:	f04f 0e00 	mov.w	lr, #0
 80179ce:	4640      	mov	r0, r8
 80179d0:	46ac      	mov	ip, r5
 80179d2:	46f2      	mov	sl, lr
 80179d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80179d8:	b293      	uxth	r3, r2
 80179da:	fb06 e303 	mla	r3, r6, r3, lr
 80179de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	ebaa 0303 	sub.w	r3, sl, r3
 80179e8:	f8dc a000 	ldr.w	sl, [ip]
 80179ec:	0c12      	lsrs	r2, r2, #16
 80179ee:	fa13 f38a 	uxtah	r3, r3, sl
 80179f2:	fb06 e202 	mla	r2, r6, r2, lr
 80179f6:	9300      	str	r3, [sp, #0]
 80179f8:	9b00      	ldr	r3, [sp, #0]
 80179fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80179fe:	b292      	uxth	r2, r2
 8017a00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a08:	f8bd 3000 	ldrh.w	r3, [sp]
 8017a0c:	4581      	cmp	r9, r0
 8017a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a12:	f84c 3b04 	str.w	r3, [ip], #4
 8017a16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017a1a:	d2db      	bcs.n	80179d4 <quorem+0x44>
 8017a1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8017a20:	b92b      	cbnz	r3, 8017a2e <quorem+0x9e>
 8017a22:	9b01      	ldr	r3, [sp, #4]
 8017a24:	3b04      	subs	r3, #4
 8017a26:	429d      	cmp	r5, r3
 8017a28:	461a      	mov	r2, r3
 8017a2a:	d32e      	bcc.n	8017a8a <quorem+0xfa>
 8017a2c:	613c      	str	r4, [r7, #16]
 8017a2e:	4638      	mov	r0, r7
 8017a30:	f001 f9d8 	bl	8018de4 <__mcmp>
 8017a34:	2800      	cmp	r0, #0
 8017a36:	db24      	blt.n	8017a82 <quorem+0xf2>
 8017a38:	3601      	adds	r6, #1
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	f04f 0c00 	mov.w	ip, #0
 8017a40:	f858 2b04 	ldr.w	r2, [r8], #4
 8017a44:	f8d0 e000 	ldr.w	lr, [r0]
 8017a48:	b293      	uxth	r3, r2
 8017a4a:	ebac 0303 	sub.w	r3, ip, r3
 8017a4e:	0c12      	lsrs	r2, r2, #16
 8017a50:	fa13 f38e 	uxtah	r3, r3, lr
 8017a54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a5c:	b29b      	uxth	r3, r3
 8017a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a62:	45c1      	cmp	r9, r8
 8017a64:	f840 3b04 	str.w	r3, [r0], #4
 8017a68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017a6c:	d2e8      	bcs.n	8017a40 <quorem+0xb0>
 8017a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017a76:	b922      	cbnz	r2, 8017a82 <quorem+0xf2>
 8017a78:	3b04      	subs	r3, #4
 8017a7a:	429d      	cmp	r5, r3
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	d30a      	bcc.n	8017a96 <quorem+0x106>
 8017a80:	613c      	str	r4, [r7, #16]
 8017a82:	4630      	mov	r0, r6
 8017a84:	b003      	add	sp, #12
 8017a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a8a:	6812      	ldr	r2, [r2, #0]
 8017a8c:	3b04      	subs	r3, #4
 8017a8e:	2a00      	cmp	r2, #0
 8017a90:	d1cc      	bne.n	8017a2c <quorem+0x9c>
 8017a92:	3c01      	subs	r4, #1
 8017a94:	e7c7      	b.n	8017a26 <quorem+0x96>
 8017a96:	6812      	ldr	r2, [r2, #0]
 8017a98:	3b04      	subs	r3, #4
 8017a9a:	2a00      	cmp	r2, #0
 8017a9c:	d1f0      	bne.n	8017a80 <quorem+0xf0>
 8017a9e:	3c01      	subs	r4, #1
 8017aa0:	e7eb      	b.n	8017a7a <quorem+0xea>
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	e7ee      	b.n	8017a84 <quorem+0xf4>
	...

08017aa8 <_dtoa_r>:
 8017aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aac:	ed2d 8b04 	vpush	{d8-d9}
 8017ab0:	ec57 6b10 	vmov	r6, r7, d0
 8017ab4:	b093      	sub	sp, #76	; 0x4c
 8017ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ab8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017abc:	9106      	str	r1, [sp, #24]
 8017abe:	ee10 aa10 	vmov	sl, s0
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8017ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8017ac8:	46bb      	mov	fp, r7
 8017aca:	b975      	cbnz	r5, 8017aea <_dtoa_r+0x42>
 8017acc:	2010      	movs	r0, #16
 8017ace:	f7ff f991 	bl	8016df4 <malloc>
 8017ad2:	4602      	mov	r2, r0
 8017ad4:	6260      	str	r0, [r4, #36]	; 0x24
 8017ad6:	b920      	cbnz	r0, 8017ae2 <_dtoa_r+0x3a>
 8017ad8:	4ba7      	ldr	r3, [pc, #668]	; (8017d78 <_dtoa_r+0x2d0>)
 8017ada:	21ea      	movs	r1, #234	; 0xea
 8017adc:	48a7      	ldr	r0, [pc, #668]	; (8017d7c <_dtoa_r+0x2d4>)
 8017ade:	f7ff ff39 	bl	8017954 <__assert_func>
 8017ae2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ae6:	6005      	str	r5, [r0, #0]
 8017ae8:	60c5      	str	r5, [r0, #12]
 8017aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017aec:	6819      	ldr	r1, [r3, #0]
 8017aee:	b151      	cbz	r1, 8017b06 <_dtoa_r+0x5e>
 8017af0:	685a      	ldr	r2, [r3, #4]
 8017af2:	604a      	str	r2, [r1, #4]
 8017af4:	2301      	movs	r3, #1
 8017af6:	4093      	lsls	r3, r2
 8017af8:	608b      	str	r3, [r1, #8]
 8017afa:	4620      	mov	r0, r4
 8017afc:	f000 ff30 	bl	8018960 <_Bfree>
 8017b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b02:	2200      	movs	r2, #0
 8017b04:	601a      	str	r2, [r3, #0]
 8017b06:	1e3b      	subs	r3, r7, #0
 8017b08:	bfaa      	itet	ge
 8017b0a:	2300      	movge	r3, #0
 8017b0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017b10:	f8c8 3000 	strge.w	r3, [r8]
 8017b14:	4b9a      	ldr	r3, [pc, #616]	; (8017d80 <_dtoa_r+0x2d8>)
 8017b16:	bfbc      	itt	lt
 8017b18:	2201      	movlt	r2, #1
 8017b1a:	f8c8 2000 	strlt.w	r2, [r8]
 8017b1e:	ea33 030b 	bics.w	r3, r3, fp
 8017b22:	d11b      	bne.n	8017b5c <_dtoa_r+0xb4>
 8017b24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b26:	f242 730f 	movw	r3, #9999	; 0x270f
 8017b2a:	6013      	str	r3, [r2, #0]
 8017b2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b30:	4333      	orrs	r3, r6
 8017b32:	f000 8592 	beq.w	801865a <_dtoa_r+0xbb2>
 8017b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b38:	b963      	cbnz	r3, 8017b54 <_dtoa_r+0xac>
 8017b3a:	4b92      	ldr	r3, [pc, #584]	; (8017d84 <_dtoa_r+0x2dc>)
 8017b3c:	e022      	b.n	8017b84 <_dtoa_r+0xdc>
 8017b3e:	4b92      	ldr	r3, [pc, #584]	; (8017d88 <_dtoa_r+0x2e0>)
 8017b40:	9301      	str	r3, [sp, #4]
 8017b42:	3308      	adds	r3, #8
 8017b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017b46:	6013      	str	r3, [r2, #0]
 8017b48:	9801      	ldr	r0, [sp, #4]
 8017b4a:	b013      	add	sp, #76	; 0x4c
 8017b4c:	ecbd 8b04 	vpop	{d8-d9}
 8017b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b54:	4b8b      	ldr	r3, [pc, #556]	; (8017d84 <_dtoa_r+0x2dc>)
 8017b56:	9301      	str	r3, [sp, #4]
 8017b58:	3303      	adds	r3, #3
 8017b5a:	e7f3      	b.n	8017b44 <_dtoa_r+0x9c>
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	2300      	movs	r3, #0
 8017b60:	4650      	mov	r0, sl
 8017b62:	4659      	mov	r1, fp
 8017b64:	f7e8 ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8017b68:	ec4b ab19 	vmov	d9, sl, fp
 8017b6c:	4680      	mov	r8, r0
 8017b6e:	b158      	cbz	r0, 8017b88 <_dtoa_r+0xe0>
 8017b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b72:	2301      	movs	r3, #1
 8017b74:	6013      	str	r3, [r2, #0]
 8017b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	f000 856b 	beq.w	8018654 <_dtoa_r+0xbac>
 8017b7e:	4883      	ldr	r0, [pc, #524]	; (8017d8c <_dtoa_r+0x2e4>)
 8017b80:	6018      	str	r0, [r3, #0]
 8017b82:	1e43      	subs	r3, r0, #1
 8017b84:	9301      	str	r3, [sp, #4]
 8017b86:	e7df      	b.n	8017b48 <_dtoa_r+0xa0>
 8017b88:	ec4b ab10 	vmov	d0, sl, fp
 8017b8c:	aa10      	add	r2, sp, #64	; 0x40
 8017b8e:	a911      	add	r1, sp, #68	; 0x44
 8017b90:	4620      	mov	r0, r4
 8017b92:	f001 f9cd 	bl	8018f30 <__d2b>
 8017b96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017b9a:	ee08 0a10 	vmov	s16, r0
 8017b9e:	2d00      	cmp	r5, #0
 8017ba0:	f000 8084 	beq.w	8017cac <_dtoa_r+0x204>
 8017ba4:	ee19 3a90 	vmov	r3, s19
 8017ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017bac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017bb0:	4656      	mov	r6, sl
 8017bb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017bb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017bba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8017bbe:	4b74      	ldr	r3, [pc, #464]	; (8017d90 <_dtoa_r+0x2e8>)
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	4630      	mov	r0, r6
 8017bc4:	4639      	mov	r1, r7
 8017bc6:	f7e8 fb77 	bl	80002b8 <__aeabi_dsub>
 8017bca:	a365      	add	r3, pc, #404	; (adr r3, 8017d60 <_dtoa_r+0x2b8>)
 8017bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bd0:	f7e8 fd2a 	bl	8000628 <__aeabi_dmul>
 8017bd4:	a364      	add	r3, pc, #400	; (adr r3, 8017d68 <_dtoa_r+0x2c0>)
 8017bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bda:	f7e8 fb6f 	bl	80002bc <__adddf3>
 8017bde:	4606      	mov	r6, r0
 8017be0:	4628      	mov	r0, r5
 8017be2:	460f      	mov	r7, r1
 8017be4:	f7e8 fcb6 	bl	8000554 <__aeabi_i2d>
 8017be8:	a361      	add	r3, pc, #388	; (adr r3, 8017d70 <_dtoa_r+0x2c8>)
 8017bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bee:	f7e8 fd1b 	bl	8000628 <__aeabi_dmul>
 8017bf2:	4602      	mov	r2, r0
 8017bf4:	460b      	mov	r3, r1
 8017bf6:	4630      	mov	r0, r6
 8017bf8:	4639      	mov	r1, r7
 8017bfa:	f7e8 fb5f 	bl	80002bc <__adddf3>
 8017bfe:	4606      	mov	r6, r0
 8017c00:	460f      	mov	r7, r1
 8017c02:	f7e8 ffc1 	bl	8000b88 <__aeabi_d2iz>
 8017c06:	2200      	movs	r2, #0
 8017c08:	9000      	str	r0, [sp, #0]
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	4630      	mov	r0, r6
 8017c0e:	4639      	mov	r1, r7
 8017c10:	f7e8 ff7c 	bl	8000b0c <__aeabi_dcmplt>
 8017c14:	b150      	cbz	r0, 8017c2c <_dtoa_r+0x184>
 8017c16:	9800      	ldr	r0, [sp, #0]
 8017c18:	f7e8 fc9c 	bl	8000554 <__aeabi_i2d>
 8017c1c:	4632      	mov	r2, r6
 8017c1e:	463b      	mov	r3, r7
 8017c20:	f7e8 ff6a 	bl	8000af8 <__aeabi_dcmpeq>
 8017c24:	b910      	cbnz	r0, 8017c2c <_dtoa_r+0x184>
 8017c26:	9b00      	ldr	r3, [sp, #0]
 8017c28:	3b01      	subs	r3, #1
 8017c2a:	9300      	str	r3, [sp, #0]
 8017c2c:	9b00      	ldr	r3, [sp, #0]
 8017c2e:	2b16      	cmp	r3, #22
 8017c30:	d85a      	bhi.n	8017ce8 <_dtoa_r+0x240>
 8017c32:	9a00      	ldr	r2, [sp, #0]
 8017c34:	4b57      	ldr	r3, [pc, #348]	; (8017d94 <_dtoa_r+0x2ec>)
 8017c36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3e:	ec51 0b19 	vmov	r0, r1, d9
 8017c42:	f7e8 ff63 	bl	8000b0c <__aeabi_dcmplt>
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d050      	beq.n	8017cec <_dtoa_r+0x244>
 8017c4a:	9b00      	ldr	r3, [sp, #0]
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	9300      	str	r3, [sp, #0]
 8017c50:	2300      	movs	r3, #0
 8017c52:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c56:	1b5d      	subs	r5, r3, r5
 8017c58:	1e6b      	subs	r3, r5, #1
 8017c5a:	9305      	str	r3, [sp, #20]
 8017c5c:	bf45      	ittet	mi
 8017c5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8017c62:	9304      	strmi	r3, [sp, #16]
 8017c64:	2300      	movpl	r3, #0
 8017c66:	2300      	movmi	r3, #0
 8017c68:	bf4c      	ite	mi
 8017c6a:	9305      	strmi	r3, [sp, #20]
 8017c6c:	9304      	strpl	r3, [sp, #16]
 8017c6e:	9b00      	ldr	r3, [sp, #0]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	db3d      	blt.n	8017cf0 <_dtoa_r+0x248>
 8017c74:	9b05      	ldr	r3, [sp, #20]
 8017c76:	9a00      	ldr	r2, [sp, #0]
 8017c78:	920a      	str	r2, [sp, #40]	; 0x28
 8017c7a:	4413      	add	r3, r2
 8017c7c:	9305      	str	r3, [sp, #20]
 8017c7e:	2300      	movs	r3, #0
 8017c80:	9307      	str	r3, [sp, #28]
 8017c82:	9b06      	ldr	r3, [sp, #24]
 8017c84:	2b09      	cmp	r3, #9
 8017c86:	f200 8089 	bhi.w	8017d9c <_dtoa_r+0x2f4>
 8017c8a:	2b05      	cmp	r3, #5
 8017c8c:	bfc4      	itt	gt
 8017c8e:	3b04      	subgt	r3, #4
 8017c90:	9306      	strgt	r3, [sp, #24]
 8017c92:	9b06      	ldr	r3, [sp, #24]
 8017c94:	f1a3 0302 	sub.w	r3, r3, #2
 8017c98:	bfcc      	ite	gt
 8017c9a:	2500      	movgt	r5, #0
 8017c9c:	2501      	movle	r5, #1
 8017c9e:	2b03      	cmp	r3, #3
 8017ca0:	f200 8087 	bhi.w	8017db2 <_dtoa_r+0x30a>
 8017ca4:	e8df f003 	tbb	[pc, r3]
 8017ca8:	59383a2d 	.word	0x59383a2d
 8017cac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017cb0:	441d      	add	r5, r3
 8017cb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017cb6:	2b20      	cmp	r3, #32
 8017cb8:	bfc1      	itttt	gt
 8017cba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017cbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017cc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8017cc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017cca:	bfda      	itte	le
 8017ccc:	f1c3 0320 	rsble	r3, r3, #32
 8017cd0:	fa06 f003 	lslle.w	r0, r6, r3
 8017cd4:	4318      	orrgt	r0, r3
 8017cd6:	f7e8 fc2d 	bl	8000534 <__aeabi_ui2d>
 8017cda:	2301      	movs	r3, #1
 8017cdc:	4606      	mov	r6, r0
 8017cde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017ce2:	3d01      	subs	r5, #1
 8017ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8017ce6:	e76a      	b.n	8017bbe <_dtoa_r+0x116>
 8017ce8:	2301      	movs	r3, #1
 8017cea:	e7b2      	b.n	8017c52 <_dtoa_r+0x1aa>
 8017cec:	900b      	str	r0, [sp, #44]	; 0x2c
 8017cee:	e7b1      	b.n	8017c54 <_dtoa_r+0x1ac>
 8017cf0:	9b04      	ldr	r3, [sp, #16]
 8017cf2:	9a00      	ldr	r2, [sp, #0]
 8017cf4:	1a9b      	subs	r3, r3, r2
 8017cf6:	9304      	str	r3, [sp, #16]
 8017cf8:	4253      	negs	r3, r2
 8017cfa:	9307      	str	r3, [sp, #28]
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8017d00:	e7bf      	b.n	8017c82 <_dtoa_r+0x1da>
 8017d02:	2300      	movs	r3, #0
 8017d04:	9308      	str	r3, [sp, #32]
 8017d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	dc55      	bgt.n	8017db8 <_dtoa_r+0x310>
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017d12:	461a      	mov	r2, r3
 8017d14:	9209      	str	r2, [sp, #36]	; 0x24
 8017d16:	e00c      	b.n	8017d32 <_dtoa_r+0x28a>
 8017d18:	2301      	movs	r3, #1
 8017d1a:	e7f3      	b.n	8017d04 <_dtoa_r+0x25c>
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d20:	9308      	str	r3, [sp, #32]
 8017d22:	9b00      	ldr	r3, [sp, #0]
 8017d24:	4413      	add	r3, r2
 8017d26:	9302      	str	r3, [sp, #8]
 8017d28:	3301      	adds	r3, #1
 8017d2a:	2b01      	cmp	r3, #1
 8017d2c:	9303      	str	r3, [sp, #12]
 8017d2e:	bfb8      	it	lt
 8017d30:	2301      	movlt	r3, #1
 8017d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017d34:	2200      	movs	r2, #0
 8017d36:	6042      	str	r2, [r0, #4]
 8017d38:	2204      	movs	r2, #4
 8017d3a:	f102 0614 	add.w	r6, r2, #20
 8017d3e:	429e      	cmp	r6, r3
 8017d40:	6841      	ldr	r1, [r0, #4]
 8017d42:	d93d      	bls.n	8017dc0 <_dtoa_r+0x318>
 8017d44:	4620      	mov	r0, r4
 8017d46:	f000 fdcb 	bl	80188e0 <_Balloc>
 8017d4a:	9001      	str	r0, [sp, #4]
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	d13b      	bne.n	8017dc8 <_dtoa_r+0x320>
 8017d50:	4b11      	ldr	r3, [pc, #68]	; (8017d98 <_dtoa_r+0x2f0>)
 8017d52:	4602      	mov	r2, r0
 8017d54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017d58:	e6c0      	b.n	8017adc <_dtoa_r+0x34>
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	e7df      	b.n	8017d1e <_dtoa_r+0x276>
 8017d5e:	bf00      	nop
 8017d60:	636f4361 	.word	0x636f4361
 8017d64:	3fd287a7 	.word	0x3fd287a7
 8017d68:	8b60c8b3 	.word	0x8b60c8b3
 8017d6c:	3fc68a28 	.word	0x3fc68a28
 8017d70:	509f79fb 	.word	0x509f79fb
 8017d74:	3fd34413 	.word	0x3fd34413
 8017d78:	0801a2ee 	.word	0x0801a2ee
 8017d7c:	0801a305 	.word	0x0801a305
 8017d80:	7ff00000 	.word	0x7ff00000
 8017d84:	0801a2ea 	.word	0x0801a2ea
 8017d88:	0801a2e1 	.word	0x0801a2e1
 8017d8c:	0801a181 	.word	0x0801a181
 8017d90:	3ff80000 	.word	0x3ff80000
 8017d94:	0801a468 	.word	0x0801a468
 8017d98:	0801a360 	.word	0x0801a360
 8017d9c:	2501      	movs	r5, #1
 8017d9e:	2300      	movs	r3, #0
 8017da0:	9306      	str	r3, [sp, #24]
 8017da2:	9508      	str	r5, [sp, #32]
 8017da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017da8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017dac:	2200      	movs	r2, #0
 8017dae:	2312      	movs	r3, #18
 8017db0:	e7b0      	b.n	8017d14 <_dtoa_r+0x26c>
 8017db2:	2301      	movs	r3, #1
 8017db4:	9308      	str	r3, [sp, #32]
 8017db6:	e7f5      	b.n	8017da4 <_dtoa_r+0x2fc>
 8017db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017dbe:	e7b8      	b.n	8017d32 <_dtoa_r+0x28a>
 8017dc0:	3101      	adds	r1, #1
 8017dc2:	6041      	str	r1, [r0, #4]
 8017dc4:	0052      	lsls	r2, r2, #1
 8017dc6:	e7b8      	b.n	8017d3a <_dtoa_r+0x292>
 8017dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017dca:	9a01      	ldr	r2, [sp, #4]
 8017dcc:	601a      	str	r2, [r3, #0]
 8017dce:	9b03      	ldr	r3, [sp, #12]
 8017dd0:	2b0e      	cmp	r3, #14
 8017dd2:	f200 809d 	bhi.w	8017f10 <_dtoa_r+0x468>
 8017dd6:	2d00      	cmp	r5, #0
 8017dd8:	f000 809a 	beq.w	8017f10 <_dtoa_r+0x468>
 8017ddc:	9b00      	ldr	r3, [sp, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	dd32      	ble.n	8017e48 <_dtoa_r+0x3a0>
 8017de2:	4ab7      	ldr	r2, [pc, #732]	; (80180c0 <_dtoa_r+0x618>)
 8017de4:	f003 030f 	and.w	r3, r3, #15
 8017de8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017dec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017df0:	9b00      	ldr	r3, [sp, #0]
 8017df2:	05d8      	lsls	r0, r3, #23
 8017df4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017df8:	d516      	bpl.n	8017e28 <_dtoa_r+0x380>
 8017dfa:	4bb2      	ldr	r3, [pc, #712]	; (80180c4 <_dtoa_r+0x61c>)
 8017dfc:	ec51 0b19 	vmov	r0, r1, d9
 8017e00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017e04:	f7e8 fd3a 	bl	800087c <__aeabi_ddiv>
 8017e08:	f007 070f 	and.w	r7, r7, #15
 8017e0c:	4682      	mov	sl, r0
 8017e0e:	468b      	mov	fp, r1
 8017e10:	2503      	movs	r5, #3
 8017e12:	4eac      	ldr	r6, [pc, #688]	; (80180c4 <_dtoa_r+0x61c>)
 8017e14:	b957      	cbnz	r7, 8017e2c <_dtoa_r+0x384>
 8017e16:	4642      	mov	r2, r8
 8017e18:	464b      	mov	r3, r9
 8017e1a:	4650      	mov	r0, sl
 8017e1c:	4659      	mov	r1, fp
 8017e1e:	f7e8 fd2d 	bl	800087c <__aeabi_ddiv>
 8017e22:	4682      	mov	sl, r0
 8017e24:	468b      	mov	fp, r1
 8017e26:	e028      	b.n	8017e7a <_dtoa_r+0x3d2>
 8017e28:	2502      	movs	r5, #2
 8017e2a:	e7f2      	b.n	8017e12 <_dtoa_r+0x36a>
 8017e2c:	07f9      	lsls	r1, r7, #31
 8017e2e:	d508      	bpl.n	8017e42 <_dtoa_r+0x39a>
 8017e30:	4640      	mov	r0, r8
 8017e32:	4649      	mov	r1, r9
 8017e34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017e38:	f7e8 fbf6 	bl	8000628 <__aeabi_dmul>
 8017e3c:	3501      	adds	r5, #1
 8017e3e:	4680      	mov	r8, r0
 8017e40:	4689      	mov	r9, r1
 8017e42:	107f      	asrs	r7, r7, #1
 8017e44:	3608      	adds	r6, #8
 8017e46:	e7e5      	b.n	8017e14 <_dtoa_r+0x36c>
 8017e48:	f000 809b 	beq.w	8017f82 <_dtoa_r+0x4da>
 8017e4c:	9b00      	ldr	r3, [sp, #0]
 8017e4e:	4f9d      	ldr	r7, [pc, #628]	; (80180c4 <_dtoa_r+0x61c>)
 8017e50:	425e      	negs	r6, r3
 8017e52:	4b9b      	ldr	r3, [pc, #620]	; (80180c0 <_dtoa_r+0x618>)
 8017e54:	f006 020f 	and.w	r2, r6, #15
 8017e58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e60:	ec51 0b19 	vmov	r0, r1, d9
 8017e64:	f7e8 fbe0 	bl	8000628 <__aeabi_dmul>
 8017e68:	1136      	asrs	r6, r6, #4
 8017e6a:	4682      	mov	sl, r0
 8017e6c:	468b      	mov	fp, r1
 8017e6e:	2300      	movs	r3, #0
 8017e70:	2502      	movs	r5, #2
 8017e72:	2e00      	cmp	r6, #0
 8017e74:	d17a      	bne.n	8017f6c <_dtoa_r+0x4c4>
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d1d3      	bne.n	8017e22 <_dtoa_r+0x37a>
 8017e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	f000 8082 	beq.w	8017f86 <_dtoa_r+0x4de>
 8017e82:	4b91      	ldr	r3, [pc, #580]	; (80180c8 <_dtoa_r+0x620>)
 8017e84:	2200      	movs	r2, #0
 8017e86:	4650      	mov	r0, sl
 8017e88:	4659      	mov	r1, fp
 8017e8a:	f7e8 fe3f 	bl	8000b0c <__aeabi_dcmplt>
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	d079      	beq.n	8017f86 <_dtoa_r+0x4de>
 8017e92:	9b03      	ldr	r3, [sp, #12]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d076      	beq.n	8017f86 <_dtoa_r+0x4de>
 8017e98:	9b02      	ldr	r3, [sp, #8]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	dd36      	ble.n	8017f0c <_dtoa_r+0x464>
 8017e9e:	9b00      	ldr	r3, [sp, #0]
 8017ea0:	4650      	mov	r0, sl
 8017ea2:	4659      	mov	r1, fp
 8017ea4:	1e5f      	subs	r7, r3, #1
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	4b88      	ldr	r3, [pc, #544]	; (80180cc <_dtoa_r+0x624>)
 8017eaa:	f7e8 fbbd 	bl	8000628 <__aeabi_dmul>
 8017eae:	9e02      	ldr	r6, [sp, #8]
 8017eb0:	4682      	mov	sl, r0
 8017eb2:	468b      	mov	fp, r1
 8017eb4:	3501      	adds	r5, #1
 8017eb6:	4628      	mov	r0, r5
 8017eb8:	f7e8 fb4c 	bl	8000554 <__aeabi_i2d>
 8017ebc:	4652      	mov	r2, sl
 8017ebe:	465b      	mov	r3, fp
 8017ec0:	f7e8 fbb2 	bl	8000628 <__aeabi_dmul>
 8017ec4:	4b82      	ldr	r3, [pc, #520]	; (80180d0 <_dtoa_r+0x628>)
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	f7e8 f9f8 	bl	80002bc <__adddf3>
 8017ecc:	46d0      	mov	r8, sl
 8017ece:	46d9      	mov	r9, fp
 8017ed0:	4682      	mov	sl, r0
 8017ed2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8017ed6:	2e00      	cmp	r6, #0
 8017ed8:	d158      	bne.n	8017f8c <_dtoa_r+0x4e4>
 8017eda:	4b7e      	ldr	r3, [pc, #504]	; (80180d4 <_dtoa_r+0x62c>)
 8017edc:	2200      	movs	r2, #0
 8017ede:	4640      	mov	r0, r8
 8017ee0:	4649      	mov	r1, r9
 8017ee2:	f7e8 f9e9 	bl	80002b8 <__aeabi_dsub>
 8017ee6:	4652      	mov	r2, sl
 8017ee8:	465b      	mov	r3, fp
 8017eea:	4680      	mov	r8, r0
 8017eec:	4689      	mov	r9, r1
 8017eee:	f7e8 fe2b 	bl	8000b48 <__aeabi_dcmpgt>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	f040 8295 	bne.w	8018422 <_dtoa_r+0x97a>
 8017ef8:	4652      	mov	r2, sl
 8017efa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017efe:	4640      	mov	r0, r8
 8017f00:	4649      	mov	r1, r9
 8017f02:	f7e8 fe03 	bl	8000b0c <__aeabi_dcmplt>
 8017f06:	2800      	cmp	r0, #0
 8017f08:	f040 8289 	bne.w	801841e <_dtoa_r+0x976>
 8017f0c:	ec5b ab19 	vmov	sl, fp, d9
 8017f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	f2c0 8148 	blt.w	80181a8 <_dtoa_r+0x700>
 8017f18:	9a00      	ldr	r2, [sp, #0]
 8017f1a:	2a0e      	cmp	r2, #14
 8017f1c:	f300 8144 	bgt.w	80181a8 <_dtoa_r+0x700>
 8017f20:	4b67      	ldr	r3, [pc, #412]	; (80180c0 <_dtoa_r+0x618>)
 8017f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	f280 80d5 	bge.w	80180dc <_dtoa_r+0x634>
 8017f32:	9b03      	ldr	r3, [sp, #12]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	f300 80d1 	bgt.w	80180dc <_dtoa_r+0x634>
 8017f3a:	f040 826f 	bne.w	801841c <_dtoa_r+0x974>
 8017f3e:	4b65      	ldr	r3, [pc, #404]	; (80180d4 <_dtoa_r+0x62c>)
 8017f40:	2200      	movs	r2, #0
 8017f42:	4640      	mov	r0, r8
 8017f44:	4649      	mov	r1, r9
 8017f46:	f7e8 fb6f 	bl	8000628 <__aeabi_dmul>
 8017f4a:	4652      	mov	r2, sl
 8017f4c:	465b      	mov	r3, fp
 8017f4e:	f7e8 fdf1 	bl	8000b34 <__aeabi_dcmpge>
 8017f52:	9e03      	ldr	r6, [sp, #12]
 8017f54:	4637      	mov	r7, r6
 8017f56:	2800      	cmp	r0, #0
 8017f58:	f040 8245 	bne.w	80183e6 <_dtoa_r+0x93e>
 8017f5c:	9d01      	ldr	r5, [sp, #4]
 8017f5e:	2331      	movs	r3, #49	; 0x31
 8017f60:	f805 3b01 	strb.w	r3, [r5], #1
 8017f64:	9b00      	ldr	r3, [sp, #0]
 8017f66:	3301      	adds	r3, #1
 8017f68:	9300      	str	r3, [sp, #0]
 8017f6a:	e240      	b.n	80183ee <_dtoa_r+0x946>
 8017f6c:	07f2      	lsls	r2, r6, #31
 8017f6e:	d505      	bpl.n	8017f7c <_dtoa_r+0x4d4>
 8017f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f74:	f7e8 fb58 	bl	8000628 <__aeabi_dmul>
 8017f78:	3501      	adds	r5, #1
 8017f7a:	2301      	movs	r3, #1
 8017f7c:	1076      	asrs	r6, r6, #1
 8017f7e:	3708      	adds	r7, #8
 8017f80:	e777      	b.n	8017e72 <_dtoa_r+0x3ca>
 8017f82:	2502      	movs	r5, #2
 8017f84:	e779      	b.n	8017e7a <_dtoa_r+0x3d2>
 8017f86:	9f00      	ldr	r7, [sp, #0]
 8017f88:	9e03      	ldr	r6, [sp, #12]
 8017f8a:	e794      	b.n	8017eb6 <_dtoa_r+0x40e>
 8017f8c:	9901      	ldr	r1, [sp, #4]
 8017f8e:	4b4c      	ldr	r3, [pc, #304]	; (80180c0 <_dtoa_r+0x618>)
 8017f90:	4431      	add	r1, r6
 8017f92:	910d      	str	r1, [sp, #52]	; 0x34
 8017f94:	9908      	ldr	r1, [sp, #32]
 8017f96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017f9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017f9e:	2900      	cmp	r1, #0
 8017fa0:	d043      	beq.n	801802a <_dtoa_r+0x582>
 8017fa2:	494d      	ldr	r1, [pc, #308]	; (80180d8 <_dtoa_r+0x630>)
 8017fa4:	2000      	movs	r0, #0
 8017fa6:	f7e8 fc69 	bl	800087c <__aeabi_ddiv>
 8017faa:	4652      	mov	r2, sl
 8017fac:	465b      	mov	r3, fp
 8017fae:	f7e8 f983 	bl	80002b8 <__aeabi_dsub>
 8017fb2:	9d01      	ldr	r5, [sp, #4]
 8017fb4:	4682      	mov	sl, r0
 8017fb6:	468b      	mov	fp, r1
 8017fb8:	4649      	mov	r1, r9
 8017fba:	4640      	mov	r0, r8
 8017fbc:	f7e8 fde4 	bl	8000b88 <__aeabi_d2iz>
 8017fc0:	4606      	mov	r6, r0
 8017fc2:	f7e8 fac7 	bl	8000554 <__aeabi_i2d>
 8017fc6:	4602      	mov	r2, r0
 8017fc8:	460b      	mov	r3, r1
 8017fca:	4640      	mov	r0, r8
 8017fcc:	4649      	mov	r1, r9
 8017fce:	f7e8 f973 	bl	80002b8 <__aeabi_dsub>
 8017fd2:	3630      	adds	r6, #48	; 0x30
 8017fd4:	f805 6b01 	strb.w	r6, [r5], #1
 8017fd8:	4652      	mov	r2, sl
 8017fda:	465b      	mov	r3, fp
 8017fdc:	4680      	mov	r8, r0
 8017fde:	4689      	mov	r9, r1
 8017fe0:	f7e8 fd94 	bl	8000b0c <__aeabi_dcmplt>
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d163      	bne.n	80180b0 <_dtoa_r+0x608>
 8017fe8:	4642      	mov	r2, r8
 8017fea:	464b      	mov	r3, r9
 8017fec:	4936      	ldr	r1, [pc, #216]	; (80180c8 <_dtoa_r+0x620>)
 8017fee:	2000      	movs	r0, #0
 8017ff0:	f7e8 f962 	bl	80002b8 <__aeabi_dsub>
 8017ff4:	4652      	mov	r2, sl
 8017ff6:	465b      	mov	r3, fp
 8017ff8:	f7e8 fd88 	bl	8000b0c <__aeabi_dcmplt>
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	f040 80b5 	bne.w	801816c <_dtoa_r+0x6c4>
 8018002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018004:	429d      	cmp	r5, r3
 8018006:	d081      	beq.n	8017f0c <_dtoa_r+0x464>
 8018008:	4b30      	ldr	r3, [pc, #192]	; (80180cc <_dtoa_r+0x624>)
 801800a:	2200      	movs	r2, #0
 801800c:	4650      	mov	r0, sl
 801800e:	4659      	mov	r1, fp
 8018010:	f7e8 fb0a 	bl	8000628 <__aeabi_dmul>
 8018014:	4b2d      	ldr	r3, [pc, #180]	; (80180cc <_dtoa_r+0x624>)
 8018016:	4682      	mov	sl, r0
 8018018:	468b      	mov	fp, r1
 801801a:	4640      	mov	r0, r8
 801801c:	4649      	mov	r1, r9
 801801e:	2200      	movs	r2, #0
 8018020:	f7e8 fb02 	bl	8000628 <__aeabi_dmul>
 8018024:	4680      	mov	r8, r0
 8018026:	4689      	mov	r9, r1
 8018028:	e7c6      	b.n	8017fb8 <_dtoa_r+0x510>
 801802a:	4650      	mov	r0, sl
 801802c:	4659      	mov	r1, fp
 801802e:	f7e8 fafb 	bl	8000628 <__aeabi_dmul>
 8018032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018034:	9d01      	ldr	r5, [sp, #4]
 8018036:	930f      	str	r3, [sp, #60]	; 0x3c
 8018038:	4682      	mov	sl, r0
 801803a:	468b      	mov	fp, r1
 801803c:	4649      	mov	r1, r9
 801803e:	4640      	mov	r0, r8
 8018040:	f7e8 fda2 	bl	8000b88 <__aeabi_d2iz>
 8018044:	4606      	mov	r6, r0
 8018046:	f7e8 fa85 	bl	8000554 <__aeabi_i2d>
 801804a:	3630      	adds	r6, #48	; 0x30
 801804c:	4602      	mov	r2, r0
 801804e:	460b      	mov	r3, r1
 8018050:	4640      	mov	r0, r8
 8018052:	4649      	mov	r1, r9
 8018054:	f7e8 f930 	bl	80002b8 <__aeabi_dsub>
 8018058:	f805 6b01 	strb.w	r6, [r5], #1
 801805c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801805e:	429d      	cmp	r5, r3
 8018060:	4680      	mov	r8, r0
 8018062:	4689      	mov	r9, r1
 8018064:	f04f 0200 	mov.w	r2, #0
 8018068:	d124      	bne.n	80180b4 <_dtoa_r+0x60c>
 801806a:	4b1b      	ldr	r3, [pc, #108]	; (80180d8 <_dtoa_r+0x630>)
 801806c:	4650      	mov	r0, sl
 801806e:	4659      	mov	r1, fp
 8018070:	f7e8 f924 	bl	80002bc <__adddf3>
 8018074:	4602      	mov	r2, r0
 8018076:	460b      	mov	r3, r1
 8018078:	4640      	mov	r0, r8
 801807a:	4649      	mov	r1, r9
 801807c:	f7e8 fd64 	bl	8000b48 <__aeabi_dcmpgt>
 8018080:	2800      	cmp	r0, #0
 8018082:	d173      	bne.n	801816c <_dtoa_r+0x6c4>
 8018084:	4652      	mov	r2, sl
 8018086:	465b      	mov	r3, fp
 8018088:	4913      	ldr	r1, [pc, #76]	; (80180d8 <_dtoa_r+0x630>)
 801808a:	2000      	movs	r0, #0
 801808c:	f7e8 f914 	bl	80002b8 <__aeabi_dsub>
 8018090:	4602      	mov	r2, r0
 8018092:	460b      	mov	r3, r1
 8018094:	4640      	mov	r0, r8
 8018096:	4649      	mov	r1, r9
 8018098:	f7e8 fd38 	bl	8000b0c <__aeabi_dcmplt>
 801809c:	2800      	cmp	r0, #0
 801809e:	f43f af35 	beq.w	8017f0c <_dtoa_r+0x464>
 80180a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80180a4:	1e6b      	subs	r3, r5, #1
 80180a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80180a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80180ac:	2b30      	cmp	r3, #48	; 0x30
 80180ae:	d0f8      	beq.n	80180a2 <_dtoa_r+0x5fa>
 80180b0:	9700      	str	r7, [sp, #0]
 80180b2:	e049      	b.n	8018148 <_dtoa_r+0x6a0>
 80180b4:	4b05      	ldr	r3, [pc, #20]	; (80180cc <_dtoa_r+0x624>)
 80180b6:	f7e8 fab7 	bl	8000628 <__aeabi_dmul>
 80180ba:	4680      	mov	r8, r0
 80180bc:	4689      	mov	r9, r1
 80180be:	e7bd      	b.n	801803c <_dtoa_r+0x594>
 80180c0:	0801a468 	.word	0x0801a468
 80180c4:	0801a440 	.word	0x0801a440
 80180c8:	3ff00000 	.word	0x3ff00000
 80180cc:	40240000 	.word	0x40240000
 80180d0:	401c0000 	.word	0x401c0000
 80180d4:	40140000 	.word	0x40140000
 80180d8:	3fe00000 	.word	0x3fe00000
 80180dc:	9d01      	ldr	r5, [sp, #4]
 80180de:	4656      	mov	r6, sl
 80180e0:	465f      	mov	r7, fp
 80180e2:	4642      	mov	r2, r8
 80180e4:	464b      	mov	r3, r9
 80180e6:	4630      	mov	r0, r6
 80180e8:	4639      	mov	r1, r7
 80180ea:	f7e8 fbc7 	bl	800087c <__aeabi_ddiv>
 80180ee:	f7e8 fd4b 	bl	8000b88 <__aeabi_d2iz>
 80180f2:	4682      	mov	sl, r0
 80180f4:	f7e8 fa2e 	bl	8000554 <__aeabi_i2d>
 80180f8:	4642      	mov	r2, r8
 80180fa:	464b      	mov	r3, r9
 80180fc:	f7e8 fa94 	bl	8000628 <__aeabi_dmul>
 8018100:	4602      	mov	r2, r0
 8018102:	460b      	mov	r3, r1
 8018104:	4630      	mov	r0, r6
 8018106:	4639      	mov	r1, r7
 8018108:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801810c:	f7e8 f8d4 	bl	80002b8 <__aeabi_dsub>
 8018110:	f805 6b01 	strb.w	r6, [r5], #1
 8018114:	9e01      	ldr	r6, [sp, #4]
 8018116:	9f03      	ldr	r7, [sp, #12]
 8018118:	1bae      	subs	r6, r5, r6
 801811a:	42b7      	cmp	r7, r6
 801811c:	4602      	mov	r2, r0
 801811e:	460b      	mov	r3, r1
 8018120:	d135      	bne.n	801818e <_dtoa_r+0x6e6>
 8018122:	f7e8 f8cb 	bl	80002bc <__adddf3>
 8018126:	4642      	mov	r2, r8
 8018128:	464b      	mov	r3, r9
 801812a:	4606      	mov	r6, r0
 801812c:	460f      	mov	r7, r1
 801812e:	f7e8 fd0b 	bl	8000b48 <__aeabi_dcmpgt>
 8018132:	b9d0      	cbnz	r0, 801816a <_dtoa_r+0x6c2>
 8018134:	4642      	mov	r2, r8
 8018136:	464b      	mov	r3, r9
 8018138:	4630      	mov	r0, r6
 801813a:	4639      	mov	r1, r7
 801813c:	f7e8 fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 8018140:	b110      	cbz	r0, 8018148 <_dtoa_r+0x6a0>
 8018142:	f01a 0f01 	tst.w	sl, #1
 8018146:	d110      	bne.n	801816a <_dtoa_r+0x6c2>
 8018148:	4620      	mov	r0, r4
 801814a:	ee18 1a10 	vmov	r1, s16
 801814e:	f000 fc07 	bl	8018960 <_Bfree>
 8018152:	2300      	movs	r3, #0
 8018154:	9800      	ldr	r0, [sp, #0]
 8018156:	702b      	strb	r3, [r5, #0]
 8018158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801815a:	3001      	adds	r0, #1
 801815c:	6018      	str	r0, [r3, #0]
 801815e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018160:	2b00      	cmp	r3, #0
 8018162:	f43f acf1 	beq.w	8017b48 <_dtoa_r+0xa0>
 8018166:	601d      	str	r5, [r3, #0]
 8018168:	e4ee      	b.n	8017b48 <_dtoa_r+0xa0>
 801816a:	9f00      	ldr	r7, [sp, #0]
 801816c:	462b      	mov	r3, r5
 801816e:	461d      	mov	r5, r3
 8018170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018174:	2a39      	cmp	r2, #57	; 0x39
 8018176:	d106      	bne.n	8018186 <_dtoa_r+0x6de>
 8018178:	9a01      	ldr	r2, [sp, #4]
 801817a:	429a      	cmp	r2, r3
 801817c:	d1f7      	bne.n	801816e <_dtoa_r+0x6c6>
 801817e:	9901      	ldr	r1, [sp, #4]
 8018180:	2230      	movs	r2, #48	; 0x30
 8018182:	3701      	adds	r7, #1
 8018184:	700a      	strb	r2, [r1, #0]
 8018186:	781a      	ldrb	r2, [r3, #0]
 8018188:	3201      	adds	r2, #1
 801818a:	701a      	strb	r2, [r3, #0]
 801818c:	e790      	b.n	80180b0 <_dtoa_r+0x608>
 801818e:	4ba6      	ldr	r3, [pc, #664]	; (8018428 <_dtoa_r+0x980>)
 8018190:	2200      	movs	r2, #0
 8018192:	f7e8 fa49 	bl	8000628 <__aeabi_dmul>
 8018196:	2200      	movs	r2, #0
 8018198:	2300      	movs	r3, #0
 801819a:	4606      	mov	r6, r0
 801819c:	460f      	mov	r7, r1
 801819e:	f7e8 fcab 	bl	8000af8 <__aeabi_dcmpeq>
 80181a2:	2800      	cmp	r0, #0
 80181a4:	d09d      	beq.n	80180e2 <_dtoa_r+0x63a>
 80181a6:	e7cf      	b.n	8018148 <_dtoa_r+0x6a0>
 80181a8:	9a08      	ldr	r2, [sp, #32]
 80181aa:	2a00      	cmp	r2, #0
 80181ac:	f000 80d7 	beq.w	801835e <_dtoa_r+0x8b6>
 80181b0:	9a06      	ldr	r2, [sp, #24]
 80181b2:	2a01      	cmp	r2, #1
 80181b4:	f300 80ba 	bgt.w	801832c <_dtoa_r+0x884>
 80181b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80181ba:	2a00      	cmp	r2, #0
 80181bc:	f000 80b2 	beq.w	8018324 <_dtoa_r+0x87c>
 80181c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80181c4:	9e07      	ldr	r6, [sp, #28]
 80181c6:	9d04      	ldr	r5, [sp, #16]
 80181c8:	9a04      	ldr	r2, [sp, #16]
 80181ca:	441a      	add	r2, r3
 80181cc:	9204      	str	r2, [sp, #16]
 80181ce:	9a05      	ldr	r2, [sp, #20]
 80181d0:	2101      	movs	r1, #1
 80181d2:	441a      	add	r2, r3
 80181d4:	4620      	mov	r0, r4
 80181d6:	9205      	str	r2, [sp, #20]
 80181d8:	f000 fc7a 	bl	8018ad0 <__i2b>
 80181dc:	4607      	mov	r7, r0
 80181de:	2d00      	cmp	r5, #0
 80181e0:	dd0c      	ble.n	80181fc <_dtoa_r+0x754>
 80181e2:	9b05      	ldr	r3, [sp, #20]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	dd09      	ble.n	80181fc <_dtoa_r+0x754>
 80181e8:	42ab      	cmp	r3, r5
 80181ea:	9a04      	ldr	r2, [sp, #16]
 80181ec:	bfa8      	it	ge
 80181ee:	462b      	movge	r3, r5
 80181f0:	1ad2      	subs	r2, r2, r3
 80181f2:	9204      	str	r2, [sp, #16]
 80181f4:	9a05      	ldr	r2, [sp, #20]
 80181f6:	1aed      	subs	r5, r5, r3
 80181f8:	1ad3      	subs	r3, r2, r3
 80181fa:	9305      	str	r3, [sp, #20]
 80181fc:	9b07      	ldr	r3, [sp, #28]
 80181fe:	b31b      	cbz	r3, 8018248 <_dtoa_r+0x7a0>
 8018200:	9b08      	ldr	r3, [sp, #32]
 8018202:	2b00      	cmp	r3, #0
 8018204:	f000 80af 	beq.w	8018366 <_dtoa_r+0x8be>
 8018208:	2e00      	cmp	r6, #0
 801820a:	dd13      	ble.n	8018234 <_dtoa_r+0x78c>
 801820c:	4639      	mov	r1, r7
 801820e:	4632      	mov	r2, r6
 8018210:	4620      	mov	r0, r4
 8018212:	f000 fd1d 	bl	8018c50 <__pow5mult>
 8018216:	ee18 2a10 	vmov	r2, s16
 801821a:	4601      	mov	r1, r0
 801821c:	4607      	mov	r7, r0
 801821e:	4620      	mov	r0, r4
 8018220:	f000 fc6c 	bl	8018afc <__multiply>
 8018224:	ee18 1a10 	vmov	r1, s16
 8018228:	4680      	mov	r8, r0
 801822a:	4620      	mov	r0, r4
 801822c:	f000 fb98 	bl	8018960 <_Bfree>
 8018230:	ee08 8a10 	vmov	s16, r8
 8018234:	9b07      	ldr	r3, [sp, #28]
 8018236:	1b9a      	subs	r2, r3, r6
 8018238:	d006      	beq.n	8018248 <_dtoa_r+0x7a0>
 801823a:	ee18 1a10 	vmov	r1, s16
 801823e:	4620      	mov	r0, r4
 8018240:	f000 fd06 	bl	8018c50 <__pow5mult>
 8018244:	ee08 0a10 	vmov	s16, r0
 8018248:	2101      	movs	r1, #1
 801824a:	4620      	mov	r0, r4
 801824c:	f000 fc40 	bl	8018ad0 <__i2b>
 8018250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018252:	2b00      	cmp	r3, #0
 8018254:	4606      	mov	r6, r0
 8018256:	f340 8088 	ble.w	801836a <_dtoa_r+0x8c2>
 801825a:	461a      	mov	r2, r3
 801825c:	4601      	mov	r1, r0
 801825e:	4620      	mov	r0, r4
 8018260:	f000 fcf6 	bl	8018c50 <__pow5mult>
 8018264:	9b06      	ldr	r3, [sp, #24]
 8018266:	2b01      	cmp	r3, #1
 8018268:	4606      	mov	r6, r0
 801826a:	f340 8081 	ble.w	8018370 <_dtoa_r+0x8c8>
 801826e:	f04f 0800 	mov.w	r8, #0
 8018272:	6933      	ldr	r3, [r6, #16]
 8018274:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018278:	6918      	ldr	r0, [r3, #16]
 801827a:	f000 fbd9 	bl	8018a30 <__hi0bits>
 801827e:	f1c0 0020 	rsb	r0, r0, #32
 8018282:	9b05      	ldr	r3, [sp, #20]
 8018284:	4418      	add	r0, r3
 8018286:	f010 001f 	ands.w	r0, r0, #31
 801828a:	f000 8092 	beq.w	80183b2 <_dtoa_r+0x90a>
 801828e:	f1c0 0320 	rsb	r3, r0, #32
 8018292:	2b04      	cmp	r3, #4
 8018294:	f340 808a 	ble.w	80183ac <_dtoa_r+0x904>
 8018298:	f1c0 001c 	rsb	r0, r0, #28
 801829c:	9b04      	ldr	r3, [sp, #16]
 801829e:	4403      	add	r3, r0
 80182a0:	9304      	str	r3, [sp, #16]
 80182a2:	9b05      	ldr	r3, [sp, #20]
 80182a4:	4403      	add	r3, r0
 80182a6:	4405      	add	r5, r0
 80182a8:	9305      	str	r3, [sp, #20]
 80182aa:	9b04      	ldr	r3, [sp, #16]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	dd07      	ble.n	80182c0 <_dtoa_r+0x818>
 80182b0:	ee18 1a10 	vmov	r1, s16
 80182b4:	461a      	mov	r2, r3
 80182b6:	4620      	mov	r0, r4
 80182b8:	f000 fd24 	bl	8018d04 <__lshift>
 80182bc:	ee08 0a10 	vmov	s16, r0
 80182c0:	9b05      	ldr	r3, [sp, #20]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	dd05      	ble.n	80182d2 <_dtoa_r+0x82a>
 80182c6:	4631      	mov	r1, r6
 80182c8:	461a      	mov	r2, r3
 80182ca:	4620      	mov	r0, r4
 80182cc:	f000 fd1a 	bl	8018d04 <__lshift>
 80182d0:	4606      	mov	r6, r0
 80182d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d06e      	beq.n	80183b6 <_dtoa_r+0x90e>
 80182d8:	ee18 0a10 	vmov	r0, s16
 80182dc:	4631      	mov	r1, r6
 80182de:	f000 fd81 	bl	8018de4 <__mcmp>
 80182e2:	2800      	cmp	r0, #0
 80182e4:	da67      	bge.n	80183b6 <_dtoa_r+0x90e>
 80182e6:	9b00      	ldr	r3, [sp, #0]
 80182e8:	3b01      	subs	r3, #1
 80182ea:	ee18 1a10 	vmov	r1, s16
 80182ee:	9300      	str	r3, [sp, #0]
 80182f0:	220a      	movs	r2, #10
 80182f2:	2300      	movs	r3, #0
 80182f4:	4620      	mov	r0, r4
 80182f6:	f000 fb55 	bl	80189a4 <__multadd>
 80182fa:	9b08      	ldr	r3, [sp, #32]
 80182fc:	ee08 0a10 	vmov	s16, r0
 8018300:	2b00      	cmp	r3, #0
 8018302:	f000 81b1 	beq.w	8018668 <_dtoa_r+0xbc0>
 8018306:	2300      	movs	r3, #0
 8018308:	4639      	mov	r1, r7
 801830a:	220a      	movs	r2, #10
 801830c:	4620      	mov	r0, r4
 801830e:	f000 fb49 	bl	80189a4 <__multadd>
 8018312:	9b02      	ldr	r3, [sp, #8]
 8018314:	2b00      	cmp	r3, #0
 8018316:	4607      	mov	r7, r0
 8018318:	f300 808e 	bgt.w	8018438 <_dtoa_r+0x990>
 801831c:	9b06      	ldr	r3, [sp, #24]
 801831e:	2b02      	cmp	r3, #2
 8018320:	dc51      	bgt.n	80183c6 <_dtoa_r+0x91e>
 8018322:	e089      	b.n	8018438 <_dtoa_r+0x990>
 8018324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801832a:	e74b      	b.n	80181c4 <_dtoa_r+0x71c>
 801832c:	9b03      	ldr	r3, [sp, #12]
 801832e:	1e5e      	subs	r6, r3, #1
 8018330:	9b07      	ldr	r3, [sp, #28]
 8018332:	42b3      	cmp	r3, r6
 8018334:	bfbf      	itttt	lt
 8018336:	9b07      	ldrlt	r3, [sp, #28]
 8018338:	9607      	strlt	r6, [sp, #28]
 801833a:	1af2      	sublt	r2, r6, r3
 801833c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801833e:	bfb6      	itet	lt
 8018340:	189b      	addlt	r3, r3, r2
 8018342:	1b9e      	subge	r6, r3, r6
 8018344:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018346:	9b03      	ldr	r3, [sp, #12]
 8018348:	bfb8      	it	lt
 801834a:	2600      	movlt	r6, #0
 801834c:	2b00      	cmp	r3, #0
 801834e:	bfb7      	itett	lt
 8018350:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8018354:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8018358:	1a9d      	sublt	r5, r3, r2
 801835a:	2300      	movlt	r3, #0
 801835c:	e734      	b.n	80181c8 <_dtoa_r+0x720>
 801835e:	9e07      	ldr	r6, [sp, #28]
 8018360:	9d04      	ldr	r5, [sp, #16]
 8018362:	9f08      	ldr	r7, [sp, #32]
 8018364:	e73b      	b.n	80181de <_dtoa_r+0x736>
 8018366:	9a07      	ldr	r2, [sp, #28]
 8018368:	e767      	b.n	801823a <_dtoa_r+0x792>
 801836a:	9b06      	ldr	r3, [sp, #24]
 801836c:	2b01      	cmp	r3, #1
 801836e:	dc18      	bgt.n	80183a2 <_dtoa_r+0x8fa>
 8018370:	f1ba 0f00 	cmp.w	sl, #0
 8018374:	d115      	bne.n	80183a2 <_dtoa_r+0x8fa>
 8018376:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801837a:	b993      	cbnz	r3, 80183a2 <_dtoa_r+0x8fa>
 801837c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018380:	0d1b      	lsrs	r3, r3, #20
 8018382:	051b      	lsls	r3, r3, #20
 8018384:	b183      	cbz	r3, 80183a8 <_dtoa_r+0x900>
 8018386:	9b04      	ldr	r3, [sp, #16]
 8018388:	3301      	adds	r3, #1
 801838a:	9304      	str	r3, [sp, #16]
 801838c:	9b05      	ldr	r3, [sp, #20]
 801838e:	3301      	adds	r3, #1
 8018390:	9305      	str	r3, [sp, #20]
 8018392:	f04f 0801 	mov.w	r8, #1
 8018396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018398:	2b00      	cmp	r3, #0
 801839a:	f47f af6a 	bne.w	8018272 <_dtoa_r+0x7ca>
 801839e:	2001      	movs	r0, #1
 80183a0:	e76f      	b.n	8018282 <_dtoa_r+0x7da>
 80183a2:	f04f 0800 	mov.w	r8, #0
 80183a6:	e7f6      	b.n	8018396 <_dtoa_r+0x8ee>
 80183a8:	4698      	mov	r8, r3
 80183aa:	e7f4      	b.n	8018396 <_dtoa_r+0x8ee>
 80183ac:	f43f af7d 	beq.w	80182aa <_dtoa_r+0x802>
 80183b0:	4618      	mov	r0, r3
 80183b2:	301c      	adds	r0, #28
 80183b4:	e772      	b.n	801829c <_dtoa_r+0x7f4>
 80183b6:	9b03      	ldr	r3, [sp, #12]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	dc37      	bgt.n	801842c <_dtoa_r+0x984>
 80183bc:	9b06      	ldr	r3, [sp, #24]
 80183be:	2b02      	cmp	r3, #2
 80183c0:	dd34      	ble.n	801842c <_dtoa_r+0x984>
 80183c2:	9b03      	ldr	r3, [sp, #12]
 80183c4:	9302      	str	r3, [sp, #8]
 80183c6:	9b02      	ldr	r3, [sp, #8]
 80183c8:	b96b      	cbnz	r3, 80183e6 <_dtoa_r+0x93e>
 80183ca:	4631      	mov	r1, r6
 80183cc:	2205      	movs	r2, #5
 80183ce:	4620      	mov	r0, r4
 80183d0:	f000 fae8 	bl	80189a4 <__multadd>
 80183d4:	4601      	mov	r1, r0
 80183d6:	4606      	mov	r6, r0
 80183d8:	ee18 0a10 	vmov	r0, s16
 80183dc:	f000 fd02 	bl	8018de4 <__mcmp>
 80183e0:	2800      	cmp	r0, #0
 80183e2:	f73f adbb 	bgt.w	8017f5c <_dtoa_r+0x4b4>
 80183e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183e8:	9d01      	ldr	r5, [sp, #4]
 80183ea:	43db      	mvns	r3, r3
 80183ec:	9300      	str	r3, [sp, #0]
 80183ee:	f04f 0800 	mov.w	r8, #0
 80183f2:	4631      	mov	r1, r6
 80183f4:	4620      	mov	r0, r4
 80183f6:	f000 fab3 	bl	8018960 <_Bfree>
 80183fa:	2f00      	cmp	r7, #0
 80183fc:	f43f aea4 	beq.w	8018148 <_dtoa_r+0x6a0>
 8018400:	f1b8 0f00 	cmp.w	r8, #0
 8018404:	d005      	beq.n	8018412 <_dtoa_r+0x96a>
 8018406:	45b8      	cmp	r8, r7
 8018408:	d003      	beq.n	8018412 <_dtoa_r+0x96a>
 801840a:	4641      	mov	r1, r8
 801840c:	4620      	mov	r0, r4
 801840e:	f000 faa7 	bl	8018960 <_Bfree>
 8018412:	4639      	mov	r1, r7
 8018414:	4620      	mov	r0, r4
 8018416:	f000 faa3 	bl	8018960 <_Bfree>
 801841a:	e695      	b.n	8018148 <_dtoa_r+0x6a0>
 801841c:	2600      	movs	r6, #0
 801841e:	4637      	mov	r7, r6
 8018420:	e7e1      	b.n	80183e6 <_dtoa_r+0x93e>
 8018422:	9700      	str	r7, [sp, #0]
 8018424:	4637      	mov	r7, r6
 8018426:	e599      	b.n	8017f5c <_dtoa_r+0x4b4>
 8018428:	40240000 	.word	0x40240000
 801842c:	9b08      	ldr	r3, [sp, #32]
 801842e:	2b00      	cmp	r3, #0
 8018430:	f000 80ca 	beq.w	80185c8 <_dtoa_r+0xb20>
 8018434:	9b03      	ldr	r3, [sp, #12]
 8018436:	9302      	str	r3, [sp, #8]
 8018438:	2d00      	cmp	r5, #0
 801843a:	dd05      	ble.n	8018448 <_dtoa_r+0x9a0>
 801843c:	4639      	mov	r1, r7
 801843e:	462a      	mov	r2, r5
 8018440:	4620      	mov	r0, r4
 8018442:	f000 fc5f 	bl	8018d04 <__lshift>
 8018446:	4607      	mov	r7, r0
 8018448:	f1b8 0f00 	cmp.w	r8, #0
 801844c:	d05b      	beq.n	8018506 <_dtoa_r+0xa5e>
 801844e:	6879      	ldr	r1, [r7, #4]
 8018450:	4620      	mov	r0, r4
 8018452:	f000 fa45 	bl	80188e0 <_Balloc>
 8018456:	4605      	mov	r5, r0
 8018458:	b928      	cbnz	r0, 8018466 <_dtoa_r+0x9be>
 801845a:	4b87      	ldr	r3, [pc, #540]	; (8018678 <_dtoa_r+0xbd0>)
 801845c:	4602      	mov	r2, r0
 801845e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018462:	f7ff bb3b 	b.w	8017adc <_dtoa_r+0x34>
 8018466:	693a      	ldr	r2, [r7, #16]
 8018468:	3202      	adds	r2, #2
 801846a:	0092      	lsls	r2, r2, #2
 801846c:	f107 010c 	add.w	r1, r7, #12
 8018470:	300c      	adds	r0, #12
 8018472:	f7fe fcc7 	bl	8016e04 <memcpy>
 8018476:	2201      	movs	r2, #1
 8018478:	4629      	mov	r1, r5
 801847a:	4620      	mov	r0, r4
 801847c:	f000 fc42 	bl	8018d04 <__lshift>
 8018480:	9b01      	ldr	r3, [sp, #4]
 8018482:	f103 0901 	add.w	r9, r3, #1
 8018486:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801848a:	4413      	add	r3, r2
 801848c:	9305      	str	r3, [sp, #20]
 801848e:	f00a 0301 	and.w	r3, sl, #1
 8018492:	46b8      	mov	r8, r7
 8018494:	9304      	str	r3, [sp, #16]
 8018496:	4607      	mov	r7, r0
 8018498:	4631      	mov	r1, r6
 801849a:	ee18 0a10 	vmov	r0, s16
 801849e:	f7ff fa77 	bl	8017990 <quorem>
 80184a2:	4641      	mov	r1, r8
 80184a4:	9002      	str	r0, [sp, #8]
 80184a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80184aa:	ee18 0a10 	vmov	r0, s16
 80184ae:	f000 fc99 	bl	8018de4 <__mcmp>
 80184b2:	463a      	mov	r2, r7
 80184b4:	9003      	str	r0, [sp, #12]
 80184b6:	4631      	mov	r1, r6
 80184b8:	4620      	mov	r0, r4
 80184ba:	f000 fcaf 	bl	8018e1c <__mdiff>
 80184be:	68c2      	ldr	r2, [r0, #12]
 80184c0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80184c4:	4605      	mov	r5, r0
 80184c6:	bb02      	cbnz	r2, 801850a <_dtoa_r+0xa62>
 80184c8:	4601      	mov	r1, r0
 80184ca:	ee18 0a10 	vmov	r0, s16
 80184ce:	f000 fc89 	bl	8018de4 <__mcmp>
 80184d2:	4602      	mov	r2, r0
 80184d4:	4629      	mov	r1, r5
 80184d6:	4620      	mov	r0, r4
 80184d8:	9207      	str	r2, [sp, #28]
 80184da:	f000 fa41 	bl	8018960 <_Bfree>
 80184de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80184e2:	ea43 0102 	orr.w	r1, r3, r2
 80184e6:	9b04      	ldr	r3, [sp, #16]
 80184e8:	430b      	orrs	r3, r1
 80184ea:	464d      	mov	r5, r9
 80184ec:	d10f      	bne.n	801850e <_dtoa_r+0xa66>
 80184ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80184f2:	d02a      	beq.n	801854a <_dtoa_r+0xaa2>
 80184f4:	9b03      	ldr	r3, [sp, #12]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	dd02      	ble.n	8018500 <_dtoa_r+0xa58>
 80184fa:	9b02      	ldr	r3, [sp, #8]
 80184fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018500:	f88b a000 	strb.w	sl, [fp]
 8018504:	e775      	b.n	80183f2 <_dtoa_r+0x94a>
 8018506:	4638      	mov	r0, r7
 8018508:	e7ba      	b.n	8018480 <_dtoa_r+0x9d8>
 801850a:	2201      	movs	r2, #1
 801850c:	e7e2      	b.n	80184d4 <_dtoa_r+0xa2c>
 801850e:	9b03      	ldr	r3, [sp, #12]
 8018510:	2b00      	cmp	r3, #0
 8018512:	db04      	blt.n	801851e <_dtoa_r+0xa76>
 8018514:	9906      	ldr	r1, [sp, #24]
 8018516:	430b      	orrs	r3, r1
 8018518:	9904      	ldr	r1, [sp, #16]
 801851a:	430b      	orrs	r3, r1
 801851c:	d122      	bne.n	8018564 <_dtoa_r+0xabc>
 801851e:	2a00      	cmp	r2, #0
 8018520:	ddee      	ble.n	8018500 <_dtoa_r+0xa58>
 8018522:	ee18 1a10 	vmov	r1, s16
 8018526:	2201      	movs	r2, #1
 8018528:	4620      	mov	r0, r4
 801852a:	f000 fbeb 	bl	8018d04 <__lshift>
 801852e:	4631      	mov	r1, r6
 8018530:	ee08 0a10 	vmov	s16, r0
 8018534:	f000 fc56 	bl	8018de4 <__mcmp>
 8018538:	2800      	cmp	r0, #0
 801853a:	dc03      	bgt.n	8018544 <_dtoa_r+0xa9c>
 801853c:	d1e0      	bne.n	8018500 <_dtoa_r+0xa58>
 801853e:	f01a 0f01 	tst.w	sl, #1
 8018542:	d0dd      	beq.n	8018500 <_dtoa_r+0xa58>
 8018544:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018548:	d1d7      	bne.n	80184fa <_dtoa_r+0xa52>
 801854a:	2339      	movs	r3, #57	; 0x39
 801854c:	f88b 3000 	strb.w	r3, [fp]
 8018550:	462b      	mov	r3, r5
 8018552:	461d      	mov	r5, r3
 8018554:	3b01      	subs	r3, #1
 8018556:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801855a:	2a39      	cmp	r2, #57	; 0x39
 801855c:	d071      	beq.n	8018642 <_dtoa_r+0xb9a>
 801855e:	3201      	adds	r2, #1
 8018560:	701a      	strb	r2, [r3, #0]
 8018562:	e746      	b.n	80183f2 <_dtoa_r+0x94a>
 8018564:	2a00      	cmp	r2, #0
 8018566:	dd07      	ble.n	8018578 <_dtoa_r+0xad0>
 8018568:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801856c:	d0ed      	beq.n	801854a <_dtoa_r+0xaa2>
 801856e:	f10a 0301 	add.w	r3, sl, #1
 8018572:	f88b 3000 	strb.w	r3, [fp]
 8018576:	e73c      	b.n	80183f2 <_dtoa_r+0x94a>
 8018578:	9b05      	ldr	r3, [sp, #20]
 801857a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801857e:	4599      	cmp	r9, r3
 8018580:	d047      	beq.n	8018612 <_dtoa_r+0xb6a>
 8018582:	ee18 1a10 	vmov	r1, s16
 8018586:	2300      	movs	r3, #0
 8018588:	220a      	movs	r2, #10
 801858a:	4620      	mov	r0, r4
 801858c:	f000 fa0a 	bl	80189a4 <__multadd>
 8018590:	45b8      	cmp	r8, r7
 8018592:	ee08 0a10 	vmov	s16, r0
 8018596:	f04f 0300 	mov.w	r3, #0
 801859a:	f04f 020a 	mov.w	r2, #10
 801859e:	4641      	mov	r1, r8
 80185a0:	4620      	mov	r0, r4
 80185a2:	d106      	bne.n	80185b2 <_dtoa_r+0xb0a>
 80185a4:	f000 f9fe 	bl	80189a4 <__multadd>
 80185a8:	4680      	mov	r8, r0
 80185aa:	4607      	mov	r7, r0
 80185ac:	f109 0901 	add.w	r9, r9, #1
 80185b0:	e772      	b.n	8018498 <_dtoa_r+0x9f0>
 80185b2:	f000 f9f7 	bl	80189a4 <__multadd>
 80185b6:	4639      	mov	r1, r7
 80185b8:	4680      	mov	r8, r0
 80185ba:	2300      	movs	r3, #0
 80185bc:	220a      	movs	r2, #10
 80185be:	4620      	mov	r0, r4
 80185c0:	f000 f9f0 	bl	80189a4 <__multadd>
 80185c4:	4607      	mov	r7, r0
 80185c6:	e7f1      	b.n	80185ac <_dtoa_r+0xb04>
 80185c8:	9b03      	ldr	r3, [sp, #12]
 80185ca:	9302      	str	r3, [sp, #8]
 80185cc:	9d01      	ldr	r5, [sp, #4]
 80185ce:	ee18 0a10 	vmov	r0, s16
 80185d2:	4631      	mov	r1, r6
 80185d4:	f7ff f9dc 	bl	8017990 <quorem>
 80185d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80185dc:	9b01      	ldr	r3, [sp, #4]
 80185de:	f805 ab01 	strb.w	sl, [r5], #1
 80185e2:	1aea      	subs	r2, r5, r3
 80185e4:	9b02      	ldr	r3, [sp, #8]
 80185e6:	4293      	cmp	r3, r2
 80185e8:	dd09      	ble.n	80185fe <_dtoa_r+0xb56>
 80185ea:	ee18 1a10 	vmov	r1, s16
 80185ee:	2300      	movs	r3, #0
 80185f0:	220a      	movs	r2, #10
 80185f2:	4620      	mov	r0, r4
 80185f4:	f000 f9d6 	bl	80189a4 <__multadd>
 80185f8:	ee08 0a10 	vmov	s16, r0
 80185fc:	e7e7      	b.n	80185ce <_dtoa_r+0xb26>
 80185fe:	9b02      	ldr	r3, [sp, #8]
 8018600:	2b00      	cmp	r3, #0
 8018602:	bfc8      	it	gt
 8018604:	461d      	movgt	r5, r3
 8018606:	9b01      	ldr	r3, [sp, #4]
 8018608:	bfd8      	it	le
 801860a:	2501      	movle	r5, #1
 801860c:	441d      	add	r5, r3
 801860e:	f04f 0800 	mov.w	r8, #0
 8018612:	ee18 1a10 	vmov	r1, s16
 8018616:	2201      	movs	r2, #1
 8018618:	4620      	mov	r0, r4
 801861a:	f000 fb73 	bl	8018d04 <__lshift>
 801861e:	4631      	mov	r1, r6
 8018620:	ee08 0a10 	vmov	s16, r0
 8018624:	f000 fbde 	bl	8018de4 <__mcmp>
 8018628:	2800      	cmp	r0, #0
 801862a:	dc91      	bgt.n	8018550 <_dtoa_r+0xaa8>
 801862c:	d102      	bne.n	8018634 <_dtoa_r+0xb8c>
 801862e:	f01a 0f01 	tst.w	sl, #1
 8018632:	d18d      	bne.n	8018550 <_dtoa_r+0xaa8>
 8018634:	462b      	mov	r3, r5
 8018636:	461d      	mov	r5, r3
 8018638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801863c:	2a30      	cmp	r2, #48	; 0x30
 801863e:	d0fa      	beq.n	8018636 <_dtoa_r+0xb8e>
 8018640:	e6d7      	b.n	80183f2 <_dtoa_r+0x94a>
 8018642:	9a01      	ldr	r2, [sp, #4]
 8018644:	429a      	cmp	r2, r3
 8018646:	d184      	bne.n	8018552 <_dtoa_r+0xaaa>
 8018648:	9b00      	ldr	r3, [sp, #0]
 801864a:	3301      	adds	r3, #1
 801864c:	9300      	str	r3, [sp, #0]
 801864e:	2331      	movs	r3, #49	; 0x31
 8018650:	7013      	strb	r3, [r2, #0]
 8018652:	e6ce      	b.n	80183f2 <_dtoa_r+0x94a>
 8018654:	4b09      	ldr	r3, [pc, #36]	; (801867c <_dtoa_r+0xbd4>)
 8018656:	f7ff ba95 	b.w	8017b84 <_dtoa_r+0xdc>
 801865a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801865c:	2b00      	cmp	r3, #0
 801865e:	f47f aa6e 	bne.w	8017b3e <_dtoa_r+0x96>
 8018662:	4b07      	ldr	r3, [pc, #28]	; (8018680 <_dtoa_r+0xbd8>)
 8018664:	f7ff ba8e 	b.w	8017b84 <_dtoa_r+0xdc>
 8018668:	9b02      	ldr	r3, [sp, #8]
 801866a:	2b00      	cmp	r3, #0
 801866c:	dcae      	bgt.n	80185cc <_dtoa_r+0xb24>
 801866e:	9b06      	ldr	r3, [sp, #24]
 8018670:	2b02      	cmp	r3, #2
 8018672:	f73f aea8 	bgt.w	80183c6 <_dtoa_r+0x91e>
 8018676:	e7a9      	b.n	80185cc <_dtoa_r+0xb24>
 8018678:	0801a360 	.word	0x0801a360
 801867c:	0801a180 	.word	0x0801a180
 8018680:	0801a2e1 	.word	0x0801a2e1

08018684 <std>:
 8018684:	2300      	movs	r3, #0
 8018686:	b510      	push	{r4, lr}
 8018688:	4604      	mov	r4, r0
 801868a:	e9c0 3300 	strd	r3, r3, [r0]
 801868e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018692:	6083      	str	r3, [r0, #8]
 8018694:	8181      	strh	r1, [r0, #12]
 8018696:	6643      	str	r3, [r0, #100]	; 0x64
 8018698:	81c2      	strh	r2, [r0, #14]
 801869a:	6183      	str	r3, [r0, #24]
 801869c:	4619      	mov	r1, r3
 801869e:	2208      	movs	r2, #8
 80186a0:	305c      	adds	r0, #92	; 0x5c
 80186a2:	f7fe fbbd 	bl	8016e20 <memset>
 80186a6:	4b05      	ldr	r3, [pc, #20]	; (80186bc <std+0x38>)
 80186a8:	6263      	str	r3, [r4, #36]	; 0x24
 80186aa:	4b05      	ldr	r3, [pc, #20]	; (80186c0 <std+0x3c>)
 80186ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80186ae:	4b05      	ldr	r3, [pc, #20]	; (80186c4 <std+0x40>)
 80186b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80186b2:	4b05      	ldr	r3, [pc, #20]	; (80186c8 <std+0x44>)
 80186b4:	6224      	str	r4, [r4, #32]
 80186b6:	6323      	str	r3, [r4, #48]	; 0x30
 80186b8:	bd10      	pop	{r4, pc}
 80186ba:	bf00      	nop
 80186bc:	08019581 	.word	0x08019581
 80186c0:	080195a3 	.word	0x080195a3
 80186c4:	080195db 	.word	0x080195db
 80186c8:	080195ff 	.word	0x080195ff

080186cc <_cleanup_r>:
 80186cc:	4901      	ldr	r1, [pc, #4]	; (80186d4 <_cleanup_r+0x8>)
 80186ce:	f000 b8c1 	b.w	8018854 <_fwalk_reent>
 80186d2:	bf00      	nop
 80186d4:	08019905 	.word	0x08019905

080186d8 <__sfmoreglue>:
 80186d8:	b570      	push	{r4, r5, r6, lr}
 80186da:	2268      	movs	r2, #104	; 0x68
 80186dc:	1e4d      	subs	r5, r1, #1
 80186de:	4355      	muls	r5, r2
 80186e0:	460e      	mov	r6, r1
 80186e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80186e6:	f7fe fc0f 	bl	8016f08 <_malloc_r>
 80186ea:	4604      	mov	r4, r0
 80186ec:	b140      	cbz	r0, 8018700 <__sfmoreglue+0x28>
 80186ee:	2100      	movs	r1, #0
 80186f0:	e9c0 1600 	strd	r1, r6, [r0]
 80186f4:	300c      	adds	r0, #12
 80186f6:	60a0      	str	r0, [r4, #8]
 80186f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80186fc:	f7fe fb90 	bl	8016e20 <memset>
 8018700:	4620      	mov	r0, r4
 8018702:	bd70      	pop	{r4, r5, r6, pc}

08018704 <__sfp_lock_acquire>:
 8018704:	4801      	ldr	r0, [pc, #4]	; (801870c <__sfp_lock_acquire+0x8>)
 8018706:	f000 b8ca 	b.w	801889e <__retarget_lock_acquire_recursive>
 801870a:	bf00      	nop
 801870c:	20002f69 	.word	0x20002f69

08018710 <__sfp_lock_release>:
 8018710:	4801      	ldr	r0, [pc, #4]	; (8018718 <__sfp_lock_release+0x8>)
 8018712:	f000 b8c5 	b.w	80188a0 <__retarget_lock_release_recursive>
 8018716:	bf00      	nop
 8018718:	20002f69 	.word	0x20002f69

0801871c <__sinit_lock_acquire>:
 801871c:	4801      	ldr	r0, [pc, #4]	; (8018724 <__sinit_lock_acquire+0x8>)
 801871e:	f000 b8be 	b.w	801889e <__retarget_lock_acquire_recursive>
 8018722:	bf00      	nop
 8018724:	20002f6a 	.word	0x20002f6a

08018728 <__sinit_lock_release>:
 8018728:	4801      	ldr	r0, [pc, #4]	; (8018730 <__sinit_lock_release+0x8>)
 801872a:	f000 b8b9 	b.w	80188a0 <__retarget_lock_release_recursive>
 801872e:	bf00      	nop
 8018730:	20002f6a 	.word	0x20002f6a

08018734 <__sinit>:
 8018734:	b510      	push	{r4, lr}
 8018736:	4604      	mov	r4, r0
 8018738:	f7ff fff0 	bl	801871c <__sinit_lock_acquire>
 801873c:	69a3      	ldr	r3, [r4, #24]
 801873e:	b11b      	cbz	r3, 8018748 <__sinit+0x14>
 8018740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018744:	f7ff bff0 	b.w	8018728 <__sinit_lock_release>
 8018748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801874c:	6523      	str	r3, [r4, #80]	; 0x50
 801874e:	4b13      	ldr	r3, [pc, #76]	; (801879c <__sinit+0x68>)
 8018750:	4a13      	ldr	r2, [pc, #76]	; (80187a0 <__sinit+0x6c>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	62a2      	str	r2, [r4, #40]	; 0x28
 8018756:	42a3      	cmp	r3, r4
 8018758:	bf04      	itt	eq
 801875a:	2301      	moveq	r3, #1
 801875c:	61a3      	streq	r3, [r4, #24]
 801875e:	4620      	mov	r0, r4
 8018760:	f000 f820 	bl	80187a4 <__sfp>
 8018764:	6060      	str	r0, [r4, #4]
 8018766:	4620      	mov	r0, r4
 8018768:	f000 f81c 	bl	80187a4 <__sfp>
 801876c:	60a0      	str	r0, [r4, #8]
 801876e:	4620      	mov	r0, r4
 8018770:	f000 f818 	bl	80187a4 <__sfp>
 8018774:	2200      	movs	r2, #0
 8018776:	60e0      	str	r0, [r4, #12]
 8018778:	2104      	movs	r1, #4
 801877a:	6860      	ldr	r0, [r4, #4]
 801877c:	f7ff ff82 	bl	8018684 <std>
 8018780:	68a0      	ldr	r0, [r4, #8]
 8018782:	2201      	movs	r2, #1
 8018784:	2109      	movs	r1, #9
 8018786:	f7ff ff7d 	bl	8018684 <std>
 801878a:	68e0      	ldr	r0, [r4, #12]
 801878c:	2202      	movs	r2, #2
 801878e:	2112      	movs	r1, #18
 8018790:	f7ff ff78 	bl	8018684 <std>
 8018794:	2301      	movs	r3, #1
 8018796:	61a3      	str	r3, [r4, #24]
 8018798:	e7d2      	b.n	8018740 <__sinit+0xc>
 801879a:	bf00      	nop
 801879c:	0801a16c 	.word	0x0801a16c
 80187a0:	080186cd 	.word	0x080186cd

080187a4 <__sfp>:
 80187a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187a6:	4607      	mov	r7, r0
 80187a8:	f7ff ffac 	bl	8018704 <__sfp_lock_acquire>
 80187ac:	4b1e      	ldr	r3, [pc, #120]	; (8018828 <__sfp+0x84>)
 80187ae:	681e      	ldr	r6, [r3, #0]
 80187b0:	69b3      	ldr	r3, [r6, #24]
 80187b2:	b913      	cbnz	r3, 80187ba <__sfp+0x16>
 80187b4:	4630      	mov	r0, r6
 80187b6:	f7ff ffbd 	bl	8018734 <__sinit>
 80187ba:	3648      	adds	r6, #72	; 0x48
 80187bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80187c0:	3b01      	subs	r3, #1
 80187c2:	d503      	bpl.n	80187cc <__sfp+0x28>
 80187c4:	6833      	ldr	r3, [r6, #0]
 80187c6:	b30b      	cbz	r3, 801880c <__sfp+0x68>
 80187c8:	6836      	ldr	r6, [r6, #0]
 80187ca:	e7f7      	b.n	80187bc <__sfp+0x18>
 80187cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80187d0:	b9d5      	cbnz	r5, 8018808 <__sfp+0x64>
 80187d2:	4b16      	ldr	r3, [pc, #88]	; (801882c <__sfp+0x88>)
 80187d4:	60e3      	str	r3, [r4, #12]
 80187d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80187da:	6665      	str	r5, [r4, #100]	; 0x64
 80187dc:	f000 f85e 	bl	801889c <__retarget_lock_init_recursive>
 80187e0:	f7ff ff96 	bl	8018710 <__sfp_lock_release>
 80187e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80187e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80187ec:	6025      	str	r5, [r4, #0]
 80187ee:	61a5      	str	r5, [r4, #24]
 80187f0:	2208      	movs	r2, #8
 80187f2:	4629      	mov	r1, r5
 80187f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80187f8:	f7fe fb12 	bl	8016e20 <memset>
 80187fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018804:	4620      	mov	r0, r4
 8018806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018808:	3468      	adds	r4, #104	; 0x68
 801880a:	e7d9      	b.n	80187c0 <__sfp+0x1c>
 801880c:	2104      	movs	r1, #4
 801880e:	4638      	mov	r0, r7
 8018810:	f7ff ff62 	bl	80186d8 <__sfmoreglue>
 8018814:	4604      	mov	r4, r0
 8018816:	6030      	str	r0, [r6, #0]
 8018818:	2800      	cmp	r0, #0
 801881a:	d1d5      	bne.n	80187c8 <__sfp+0x24>
 801881c:	f7ff ff78 	bl	8018710 <__sfp_lock_release>
 8018820:	230c      	movs	r3, #12
 8018822:	603b      	str	r3, [r7, #0]
 8018824:	e7ee      	b.n	8018804 <__sfp+0x60>
 8018826:	bf00      	nop
 8018828:	0801a16c 	.word	0x0801a16c
 801882c:	ffff0001 	.word	0xffff0001

08018830 <fiprintf>:
 8018830:	b40e      	push	{r1, r2, r3}
 8018832:	b503      	push	{r0, r1, lr}
 8018834:	4601      	mov	r1, r0
 8018836:	ab03      	add	r3, sp, #12
 8018838:	4805      	ldr	r0, [pc, #20]	; (8018850 <fiprintf+0x20>)
 801883a:	f853 2b04 	ldr.w	r2, [r3], #4
 801883e:	6800      	ldr	r0, [r0, #0]
 8018840:	9301      	str	r3, [sp, #4]
 8018842:	f000 fd6d 	bl	8019320 <_vfiprintf_r>
 8018846:	b002      	add	sp, #8
 8018848:	f85d eb04 	ldr.w	lr, [sp], #4
 801884c:	b003      	add	sp, #12
 801884e:	4770      	bx	lr
 8018850:	20000184 	.word	0x20000184

08018854 <_fwalk_reent>:
 8018854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018858:	4606      	mov	r6, r0
 801885a:	4688      	mov	r8, r1
 801885c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018860:	2700      	movs	r7, #0
 8018862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018866:	f1b9 0901 	subs.w	r9, r9, #1
 801886a:	d505      	bpl.n	8018878 <_fwalk_reent+0x24>
 801886c:	6824      	ldr	r4, [r4, #0]
 801886e:	2c00      	cmp	r4, #0
 8018870:	d1f7      	bne.n	8018862 <_fwalk_reent+0xe>
 8018872:	4638      	mov	r0, r7
 8018874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018878:	89ab      	ldrh	r3, [r5, #12]
 801887a:	2b01      	cmp	r3, #1
 801887c:	d907      	bls.n	801888e <_fwalk_reent+0x3a>
 801887e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018882:	3301      	adds	r3, #1
 8018884:	d003      	beq.n	801888e <_fwalk_reent+0x3a>
 8018886:	4629      	mov	r1, r5
 8018888:	4630      	mov	r0, r6
 801888a:	47c0      	blx	r8
 801888c:	4307      	orrs	r7, r0
 801888e:	3568      	adds	r5, #104	; 0x68
 8018890:	e7e9      	b.n	8018866 <_fwalk_reent+0x12>
	...

08018894 <_localeconv_r>:
 8018894:	4800      	ldr	r0, [pc, #0]	; (8018898 <_localeconv_r+0x4>)
 8018896:	4770      	bx	lr
 8018898:	200002d8 	.word	0x200002d8

0801889c <__retarget_lock_init_recursive>:
 801889c:	4770      	bx	lr

0801889e <__retarget_lock_acquire_recursive>:
 801889e:	4770      	bx	lr

080188a0 <__retarget_lock_release_recursive>:
 80188a0:	4770      	bx	lr

080188a2 <__ascii_mbtowc>:
 80188a2:	b082      	sub	sp, #8
 80188a4:	b901      	cbnz	r1, 80188a8 <__ascii_mbtowc+0x6>
 80188a6:	a901      	add	r1, sp, #4
 80188a8:	b142      	cbz	r2, 80188bc <__ascii_mbtowc+0x1a>
 80188aa:	b14b      	cbz	r3, 80188c0 <__ascii_mbtowc+0x1e>
 80188ac:	7813      	ldrb	r3, [r2, #0]
 80188ae:	600b      	str	r3, [r1, #0]
 80188b0:	7812      	ldrb	r2, [r2, #0]
 80188b2:	1e10      	subs	r0, r2, #0
 80188b4:	bf18      	it	ne
 80188b6:	2001      	movne	r0, #1
 80188b8:	b002      	add	sp, #8
 80188ba:	4770      	bx	lr
 80188bc:	4610      	mov	r0, r2
 80188be:	e7fb      	b.n	80188b8 <__ascii_mbtowc+0x16>
 80188c0:	f06f 0001 	mvn.w	r0, #1
 80188c4:	e7f8      	b.n	80188b8 <__ascii_mbtowc+0x16>
	...

080188c8 <__malloc_lock>:
 80188c8:	4801      	ldr	r0, [pc, #4]	; (80188d0 <__malloc_lock+0x8>)
 80188ca:	f7ff bfe8 	b.w	801889e <__retarget_lock_acquire_recursive>
 80188ce:	bf00      	nop
 80188d0:	20002f68 	.word	0x20002f68

080188d4 <__malloc_unlock>:
 80188d4:	4801      	ldr	r0, [pc, #4]	; (80188dc <__malloc_unlock+0x8>)
 80188d6:	f7ff bfe3 	b.w	80188a0 <__retarget_lock_release_recursive>
 80188da:	bf00      	nop
 80188dc:	20002f68 	.word	0x20002f68

080188e0 <_Balloc>:
 80188e0:	b570      	push	{r4, r5, r6, lr}
 80188e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80188e4:	4604      	mov	r4, r0
 80188e6:	460d      	mov	r5, r1
 80188e8:	b976      	cbnz	r6, 8018908 <_Balloc+0x28>
 80188ea:	2010      	movs	r0, #16
 80188ec:	f7fe fa82 	bl	8016df4 <malloc>
 80188f0:	4602      	mov	r2, r0
 80188f2:	6260      	str	r0, [r4, #36]	; 0x24
 80188f4:	b920      	cbnz	r0, 8018900 <_Balloc+0x20>
 80188f6:	4b18      	ldr	r3, [pc, #96]	; (8018958 <_Balloc+0x78>)
 80188f8:	4818      	ldr	r0, [pc, #96]	; (801895c <_Balloc+0x7c>)
 80188fa:	2166      	movs	r1, #102	; 0x66
 80188fc:	f7ff f82a 	bl	8017954 <__assert_func>
 8018900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018904:	6006      	str	r6, [r0, #0]
 8018906:	60c6      	str	r6, [r0, #12]
 8018908:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801890a:	68f3      	ldr	r3, [r6, #12]
 801890c:	b183      	cbz	r3, 8018930 <_Balloc+0x50>
 801890e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018910:	68db      	ldr	r3, [r3, #12]
 8018912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018916:	b9b8      	cbnz	r0, 8018948 <_Balloc+0x68>
 8018918:	2101      	movs	r1, #1
 801891a:	fa01 f605 	lsl.w	r6, r1, r5
 801891e:	1d72      	adds	r2, r6, #5
 8018920:	0092      	lsls	r2, r2, #2
 8018922:	4620      	mov	r0, r4
 8018924:	f000 fb60 	bl	8018fe8 <_calloc_r>
 8018928:	b160      	cbz	r0, 8018944 <_Balloc+0x64>
 801892a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801892e:	e00e      	b.n	801894e <_Balloc+0x6e>
 8018930:	2221      	movs	r2, #33	; 0x21
 8018932:	2104      	movs	r1, #4
 8018934:	4620      	mov	r0, r4
 8018936:	f000 fb57 	bl	8018fe8 <_calloc_r>
 801893a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801893c:	60f0      	str	r0, [r6, #12]
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d1e4      	bne.n	801890e <_Balloc+0x2e>
 8018944:	2000      	movs	r0, #0
 8018946:	bd70      	pop	{r4, r5, r6, pc}
 8018948:	6802      	ldr	r2, [r0, #0]
 801894a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801894e:	2300      	movs	r3, #0
 8018950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018954:	e7f7      	b.n	8018946 <_Balloc+0x66>
 8018956:	bf00      	nop
 8018958:	0801a2ee 	.word	0x0801a2ee
 801895c:	0801a3de 	.word	0x0801a3de

08018960 <_Bfree>:
 8018960:	b570      	push	{r4, r5, r6, lr}
 8018962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018964:	4605      	mov	r5, r0
 8018966:	460c      	mov	r4, r1
 8018968:	b976      	cbnz	r6, 8018988 <_Bfree+0x28>
 801896a:	2010      	movs	r0, #16
 801896c:	f7fe fa42 	bl	8016df4 <malloc>
 8018970:	4602      	mov	r2, r0
 8018972:	6268      	str	r0, [r5, #36]	; 0x24
 8018974:	b920      	cbnz	r0, 8018980 <_Bfree+0x20>
 8018976:	4b09      	ldr	r3, [pc, #36]	; (801899c <_Bfree+0x3c>)
 8018978:	4809      	ldr	r0, [pc, #36]	; (80189a0 <_Bfree+0x40>)
 801897a:	218a      	movs	r1, #138	; 0x8a
 801897c:	f7fe ffea 	bl	8017954 <__assert_func>
 8018980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018984:	6006      	str	r6, [r0, #0]
 8018986:	60c6      	str	r6, [r0, #12]
 8018988:	b13c      	cbz	r4, 801899a <_Bfree+0x3a>
 801898a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801898c:	6862      	ldr	r2, [r4, #4]
 801898e:	68db      	ldr	r3, [r3, #12]
 8018990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018994:	6021      	str	r1, [r4, #0]
 8018996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801899a:	bd70      	pop	{r4, r5, r6, pc}
 801899c:	0801a2ee 	.word	0x0801a2ee
 80189a0:	0801a3de 	.word	0x0801a3de

080189a4 <__multadd>:
 80189a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189a8:	690d      	ldr	r5, [r1, #16]
 80189aa:	4607      	mov	r7, r0
 80189ac:	460c      	mov	r4, r1
 80189ae:	461e      	mov	r6, r3
 80189b0:	f101 0c14 	add.w	ip, r1, #20
 80189b4:	2000      	movs	r0, #0
 80189b6:	f8dc 3000 	ldr.w	r3, [ip]
 80189ba:	b299      	uxth	r1, r3
 80189bc:	fb02 6101 	mla	r1, r2, r1, r6
 80189c0:	0c1e      	lsrs	r6, r3, #16
 80189c2:	0c0b      	lsrs	r3, r1, #16
 80189c4:	fb02 3306 	mla	r3, r2, r6, r3
 80189c8:	b289      	uxth	r1, r1
 80189ca:	3001      	adds	r0, #1
 80189cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80189d0:	4285      	cmp	r5, r0
 80189d2:	f84c 1b04 	str.w	r1, [ip], #4
 80189d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80189da:	dcec      	bgt.n	80189b6 <__multadd+0x12>
 80189dc:	b30e      	cbz	r6, 8018a22 <__multadd+0x7e>
 80189de:	68a3      	ldr	r3, [r4, #8]
 80189e0:	42ab      	cmp	r3, r5
 80189e2:	dc19      	bgt.n	8018a18 <__multadd+0x74>
 80189e4:	6861      	ldr	r1, [r4, #4]
 80189e6:	4638      	mov	r0, r7
 80189e8:	3101      	adds	r1, #1
 80189ea:	f7ff ff79 	bl	80188e0 <_Balloc>
 80189ee:	4680      	mov	r8, r0
 80189f0:	b928      	cbnz	r0, 80189fe <__multadd+0x5a>
 80189f2:	4602      	mov	r2, r0
 80189f4:	4b0c      	ldr	r3, [pc, #48]	; (8018a28 <__multadd+0x84>)
 80189f6:	480d      	ldr	r0, [pc, #52]	; (8018a2c <__multadd+0x88>)
 80189f8:	21b5      	movs	r1, #181	; 0xb5
 80189fa:	f7fe ffab 	bl	8017954 <__assert_func>
 80189fe:	6922      	ldr	r2, [r4, #16]
 8018a00:	3202      	adds	r2, #2
 8018a02:	f104 010c 	add.w	r1, r4, #12
 8018a06:	0092      	lsls	r2, r2, #2
 8018a08:	300c      	adds	r0, #12
 8018a0a:	f7fe f9fb 	bl	8016e04 <memcpy>
 8018a0e:	4621      	mov	r1, r4
 8018a10:	4638      	mov	r0, r7
 8018a12:	f7ff ffa5 	bl	8018960 <_Bfree>
 8018a16:	4644      	mov	r4, r8
 8018a18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018a1c:	3501      	adds	r5, #1
 8018a1e:	615e      	str	r6, [r3, #20]
 8018a20:	6125      	str	r5, [r4, #16]
 8018a22:	4620      	mov	r0, r4
 8018a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a28:	0801a360 	.word	0x0801a360
 8018a2c:	0801a3de 	.word	0x0801a3de

08018a30 <__hi0bits>:
 8018a30:	0c03      	lsrs	r3, r0, #16
 8018a32:	041b      	lsls	r3, r3, #16
 8018a34:	b9d3      	cbnz	r3, 8018a6c <__hi0bits+0x3c>
 8018a36:	0400      	lsls	r0, r0, #16
 8018a38:	2310      	movs	r3, #16
 8018a3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018a3e:	bf04      	itt	eq
 8018a40:	0200      	lsleq	r0, r0, #8
 8018a42:	3308      	addeq	r3, #8
 8018a44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018a48:	bf04      	itt	eq
 8018a4a:	0100      	lsleq	r0, r0, #4
 8018a4c:	3304      	addeq	r3, #4
 8018a4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018a52:	bf04      	itt	eq
 8018a54:	0080      	lsleq	r0, r0, #2
 8018a56:	3302      	addeq	r3, #2
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	db05      	blt.n	8018a68 <__hi0bits+0x38>
 8018a5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018a60:	f103 0301 	add.w	r3, r3, #1
 8018a64:	bf08      	it	eq
 8018a66:	2320      	moveq	r3, #32
 8018a68:	4618      	mov	r0, r3
 8018a6a:	4770      	bx	lr
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	e7e4      	b.n	8018a3a <__hi0bits+0xa>

08018a70 <__lo0bits>:
 8018a70:	6803      	ldr	r3, [r0, #0]
 8018a72:	f013 0207 	ands.w	r2, r3, #7
 8018a76:	4601      	mov	r1, r0
 8018a78:	d00b      	beq.n	8018a92 <__lo0bits+0x22>
 8018a7a:	07da      	lsls	r2, r3, #31
 8018a7c:	d423      	bmi.n	8018ac6 <__lo0bits+0x56>
 8018a7e:	0798      	lsls	r0, r3, #30
 8018a80:	bf49      	itett	mi
 8018a82:	085b      	lsrmi	r3, r3, #1
 8018a84:	089b      	lsrpl	r3, r3, #2
 8018a86:	2001      	movmi	r0, #1
 8018a88:	600b      	strmi	r3, [r1, #0]
 8018a8a:	bf5c      	itt	pl
 8018a8c:	600b      	strpl	r3, [r1, #0]
 8018a8e:	2002      	movpl	r0, #2
 8018a90:	4770      	bx	lr
 8018a92:	b298      	uxth	r0, r3
 8018a94:	b9a8      	cbnz	r0, 8018ac2 <__lo0bits+0x52>
 8018a96:	0c1b      	lsrs	r3, r3, #16
 8018a98:	2010      	movs	r0, #16
 8018a9a:	b2da      	uxtb	r2, r3
 8018a9c:	b90a      	cbnz	r2, 8018aa2 <__lo0bits+0x32>
 8018a9e:	3008      	adds	r0, #8
 8018aa0:	0a1b      	lsrs	r3, r3, #8
 8018aa2:	071a      	lsls	r2, r3, #28
 8018aa4:	bf04      	itt	eq
 8018aa6:	091b      	lsreq	r3, r3, #4
 8018aa8:	3004      	addeq	r0, #4
 8018aaa:	079a      	lsls	r2, r3, #30
 8018aac:	bf04      	itt	eq
 8018aae:	089b      	lsreq	r3, r3, #2
 8018ab0:	3002      	addeq	r0, #2
 8018ab2:	07da      	lsls	r2, r3, #31
 8018ab4:	d403      	bmi.n	8018abe <__lo0bits+0x4e>
 8018ab6:	085b      	lsrs	r3, r3, #1
 8018ab8:	f100 0001 	add.w	r0, r0, #1
 8018abc:	d005      	beq.n	8018aca <__lo0bits+0x5a>
 8018abe:	600b      	str	r3, [r1, #0]
 8018ac0:	4770      	bx	lr
 8018ac2:	4610      	mov	r0, r2
 8018ac4:	e7e9      	b.n	8018a9a <__lo0bits+0x2a>
 8018ac6:	2000      	movs	r0, #0
 8018ac8:	4770      	bx	lr
 8018aca:	2020      	movs	r0, #32
 8018acc:	4770      	bx	lr
	...

08018ad0 <__i2b>:
 8018ad0:	b510      	push	{r4, lr}
 8018ad2:	460c      	mov	r4, r1
 8018ad4:	2101      	movs	r1, #1
 8018ad6:	f7ff ff03 	bl	80188e0 <_Balloc>
 8018ada:	4602      	mov	r2, r0
 8018adc:	b928      	cbnz	r0, 8018aea <__i2b+0x1a>
 8018ade:	4b05      	ldr	r3, [pc, #20]	; (8018af4 <__i2b+0x24>)
 8018ae0:	4805      	ldr	r0, [pc, #20]	; (8018af8 <__i2b+0x28>)
 8018ae2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018ae6:	f7fe ff35 	bl	8017954 <__assert_func>
 8018aea:	2301      	movs	r3, #1
 8018aec:	6144      	str	r4, [r0, #20]
 8018aee:	6103      	str	r3, [r0, #16]
 8018af0:	bd10      	pop	{r4, pc}
 8018af2:	bf00      	nop
 8018af4:	0801a360 	.word	0x0801a360
 8018af8:	0801a3de 	.word	0x0801a3de

08018afc <__multiply>:
 8018afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b00:	4691      	mov	r9, r2
 8018b02:	690a      	ldr	r2, [r1, #16]
 8018b04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	bfb8      	it	lt
 8018b0c:	460b      	movlt	r3, r1
 8018b0e:	460c      	mov	r4, r1
 8018b10:	bfbc      	itt	lt
 8018b12:	464c      	movlt	r4, r9
 8018b14:	4699      	movlt	r9, r3
 8018b16:	6927      	ldr	r7, [r4, #16]
 8018b18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018b1c:	68a3      	ldr	r3, [r4, #8]
 8018b1e:	6861      	ldr	r1, [r4, #4]
 8018b20:	eb07 060a 	add.w	r6, r7, sl
 8018b24:	42b3      	cmp	r3, r6
 8018b26:	b085      	sub	sp, #20
 8018b28:	bfb8      	it	lt
 8018b2a:	3101      	addlt	r1, #1
 8018b2c:	f7ff fed8 	bl	80188e0 <_Balloc>
 8018b30:	b930      	cbnz	r0, 8018b40 <__multiply+0x44>
 8018b32:	4602      	mov	r2, r0
 8018b34:	4b44      	ldr	r3, [pc, #272]	; (8018c48 <__multiply+0x14c>)
 8018b36:	4845      	ldr	r0, [pc, #276]	; (8018c4c <__multiply+0x150>)
 8018b38:	f240 115d 	movw	r1, #349	; 0x15d
 8018b3c:	f7fe ff0a 	bl	8017954 <__assert_func>
 8018b40:	f100 0514 	add.w	r5, r0, #20
 8018b44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018b48:	462b      	mov	r3, r5
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	4543      	cmp	r3, r8
 8018b4e:	d321      	bcc.n	8018b94 <__multiply+0x98>
 8018b50:	f104 0314 	add.w	r3, r4, #20
 8018b54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018b58:	f109 0314 	add.w	r3, r9, #20
 8018b5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018b60:	9202      	str	r2, [sp, #8]
 8018b62:	1b3a      	subs	r2, r7, r4
 8018b64:	3a15      	subs	r2, #21
 8018b66:	f022 0203 	bic.w	r2, r2, #3
 8018b6a:	3204      	adds	r2, #4
 8018b6c:	f104 0115 	add.w	r1, r4, #21
 8018b70:	428f      	cmp	r7, r1
 8018b72:	bf38      	it	cc
 8018b74:	2204      	movcc	r2, #4
 8018b76:	9201      	str	r2, [sp, #4]
 8018b78:	9a02      	ldr	r2, [sp, #8]
 8018b7a:	9303      	str	r3, [sp, #12]
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	d80c      	bhi.n	8018b9a <__multiply+0x9e>
 8018b80:	2e00      	cmp	r6, #0
 8018b82:	dd03      	ble.n	8018b8c <__multiply+0x90>
 8018b84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d05a      	beq.n	8018c42 <__multiply+0x146>
 8018b8c:	6106      	str	r6, [r0, #16]
 8018b8e:	b005      	add	sp, #20
 8018b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b94:	f843 2b04 	str.w	r2, [r3], #4
 8018b98:	e7d8      	b.n	8018b4c <__multiply+0x50>
 8018b9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8018b9e:	f1ba 0f00 	cmp.w	sl, #0
 8018ba2:	d024      	beq.n	8018bee <__multiply+0xf2>
 8018ba4:	f104 0e14 	add.w	lr, r4, #20
 8018ba8:	46a9      	mov	r9, r5
 8018baa:	f04f 0c00 	mov.w	ip, #0
 8018bae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018bb2:	f8d9 1000 	ldr.w	r1, [r9]
 8018bb6:	fa1f fb82 	uxth.w	fp, r2
 8018bba:	b289      	uxth	r1, r1
 8018bbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8018bc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8018bc8:	4461      	add	r1, ip
 8018bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018bce:	fb0a c20b 	mla	r2, sl, fp, ip
 8018bd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018bd6:	b289      	uxth	r1, r1
 8018bd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018bdc:	4577      	cmp	r7, lr
 8018bde:	f849 1b04 	str.w	r1, [r9], #4
 8018be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018be6:	d8e2      	bhi.n	8018bae <__multiply+0xb2>
 8018be8:	9a01      	ldr	r2, [sp, #4]
 8018bea:	f845 c002 	str.w	ip, [r5, r2]
 8018bee:	9a03      	ldr	r2, [sp, #12]
 8018bf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018bf4:	3304      	adds	r3, #4
 8018bf6:	f1b9 0f00 	cmp.w	r9, #0
 8018bfa:	d020      	beq.n	8018c3e <__multiply+0x142>
 8018bfc:	6829      	ldr	r1, [r5, #0]
 8018bfe:	f104 0c14 	add.w	ip, r4, #20
 8018c02:	46ae      	mov	lr, r5
 8018c04:	f04f 0a00 	mov.w	sl, #0
 8018c08:	f8bc b000 	ldrh.w	fp, [ip]
 8018c0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018c10:	fb09 220b 	mla	r2, r9, fp, r2
 8018c14:	4492      	add	sl, r2
 8018c16:	b289      	uxth	r1, r1
 8018c18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018c1c:	f84e 1b04 	str.w	r1, [lr], #4
 8018c20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018c24:	f8be 1000 	ldrh.w	r1, [lr]
 8018c28:	0c12      	lsrs	r2, r2, #16
 8018c2a:	fb09 1102 	mla	r1, r9, r2, r1
 8018c2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8018c32:	4567      	cmp	r7, ip
 8018c34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018c38:	d8e6      	bhi.n	8018c08 <__multiply+0x10c>
 8018c3a:	9a01      	ldr	r2, [sp, #4]
 8018c3c:	50a9      	str	r1, [r5, r2]
 8018c3e:	3504      	adds	r5, #4
 8018c40:	e79a      	b.n	8018b78 <__multiply+0x7c>
 8018c42:	3e01      	subs	r6, #1
 8018c44:	e79c      	b.n	8018b80 <__multiply+0x84>
 8018c46:	bf00      	nop
 8018c48:	0801a360 	.word	0x0801a360
 8018c4c:	0801a3de 	.word	0x0801a3de

08018c50 <__pow5mult>:
 8018c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c54:	4615      	mov	r5, r2
 8018c56:	f012 0203 	ands.w	r2, r2, #3
 8018c5a:	4606      	mov	r6, r0
 8018c5c:	460f      	mov	r7, r1
 8018c5e:	d007      	beq.n	8018c70 <__pow5mult+0x20>
 8018c60:	4c25      	ldr	r4, [pc, #148]	; (8018cf8 <__pow5mult+0xa8>)
 8018c62:	3a01      	subs	r2, #1
 8018c64:	2300      	movs	r3, #0
 8018c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c6a:	f7ff fe9b 	bl	80189a4 <__multadd>
 8018c6e:	4607      	mov	r7, r0
 8018c70:	10ad      	asrs	r5, r5, #2
 8018c72:	d03d      	beq.n	8018cf0 <__pow5mult+0xa0>
 8018c74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c76:	b97c      	cbnz	r4, 8018c98 <__pow5mult+0x48>
 8018c78:	2010      	movs	r0, #16
 8018c7a:	f7fe f8bb 	bl	8016df4 <malloc>
 8018c7e:	4602      	mov	r2, r0
 8018c80:	6270      	str	r0, [r6, #36]	; 0x24
 8018c82:	b928      	cbnz	r0, 8018c90 <__pow5mult+0x40>
 8018c84:	4b1d      	ldr	r3, [pc, #116]	; (8018cfc <__pow5mult+0xac>)
 8018c86:	481e      	ldr	r0, [pc, #120]	; (8018d00 <__pow5mult+0xb0>)
 8018c88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018c8c:	f7fe fe62 	bl	8017954 <__assert_func>
 8018c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c94:	6004      	str	r4, [r0, #0]
 8018c96:	60c4      	str	r4, [r0, #12]
 8018c98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018ca0:	b94c      	cbnz	r4, 8018cb6 <__pow5mult+0x66>
 8018ca2:	f240 2171 	movw	r1, #625	; 0x271
 8018ca6:	4630      	mov	r0, r6
 8018ca8:	f7ff ff12 	bl	8018ad0 <__i2b>
 8018cac:	2300      	movs	r3, #0
 8018cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	6003      	str	r3, [r0, #0]
 8018cb6:	f04f 0900 	mov.w	r9, #0
 8018cba:	07eb      	lsls	r3, r5, #31
 8018cbc:	d50a      	bpl.n	8018cd4 <__pow5mult+0x84>
 8018cbe:	4639      	mov	r1, r7
 8018cc0:	4622      	mov	r2, r4
 8018cc2:	4630      	mov	r0, r6
 8018cc4:	f7ff ff1a 	bl	8018afc <__multiply>
 8018cc8:	4639      	mov	r1, r7
 8018cca:	4680      	mov	r8, r0
 8018ccc:	4630      	mov	r0, r6
 8018cce:	f7ff fe47 	bl	8018960 <_Bfree>
 8018cd2:	4647      	mov	r7, r8
 8018cd4:	106d      	asrs	r5, r5, #1
 8018cd6:	d00b      	beq.n	8018cf0 <__pow5mult+0xa0>
 8018cd8:	6820      	ldr	r0, [r4, #0]
 8018cda:	b938      	cbnz	r0, 8018cec <__pow5mult+0x9c>
 8018cdc:	4622      	mov	r2, r4
 8018cde:	4621      	mov	r1, r4
 8018ce0:	4630      	mov	r0, r6
 8018ce2:	f7ff ff0b 	bl	8018afc <__multiply>
 8018ce6:	6020      	str	r0, [r4, #0]
 8018ce8:	f8c0 9000 	str.w	r9, [r0]
 8018cec:	4604      	mov	r4, r0
 8018cee:	e7e4      	b.n	8018cba <__pow5mult+0x6a>
 8018cf0:	4638      	mov	r0, r7
 8018cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cf6:	bf00      	nop
 8018cf8:	0801a530 	.word	0x0801a530
 8018cfc:	0801a2ee 	.word	0x0801a2ee
 8018d00:	0801a3de 	.word	0x0801a3de

08018d04 <__lshift>:
 8018d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d08:	460c      	mov	r4, r1
 8018d0a:	6849      	ldr	r1, [r1, #4]
 8018d0c:	6923      	ldr	r3, [r4, #16]
 8018d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018d12:	68a3      	ldr	r3, [r4, #8]
 8018d14:	4607      	mov	r7, r0
 8018d16:	4691      	mov	r9, r2
 8018d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018d1c:	f108 0601 	add.w	r6, r8, #1
 8018d20:	42b3      	cmp	r3, r6
 8018d22:	db0b      	blt.n	8018d3c <__lshift+0x38>
 8018d24:	4638      	mov	r0, r7
 8018d26:	f7ff fddb 	bl	80188e0 <_Balloc>
 8018d2a:	4605      	mov	r5, r0
 8018d2c:	b948      	cbnz	r0, 8018d42 <__lshift+0x3e>
 8018d2e:	4602      	mov	r2, r0
 8018d30:	4b2a      	ldr	r3, [pc, #168]	; (8018ddc <__lshift+0xd8>)
 8018d32:	482b      	ldr	r0, [pc, #172]	; (8018de0 <__lshift+0xdc>)
 8018d34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018d38:	f7fe fe0c 	bl	8017954 <__assert_func>
 8018d3c:	3101      	adds	r1, #1
 8018d3e:	005b      	lsls	r3, r3, #1
 8018d40:	e7ee      	b.n	8018d20 <__lshift+0x1c>
 8018d42:	2300      	movs	r3, #0
 8018d44:	f100 0114 	add.w	r1, r0, #20
 8018d48:	f100 0210 	add.w	r2, r0, #16
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	4553      	cmp	r3, sl
 8018d50:	db37      	blt.n	8018dc2 <__lshift+0xbe>
 8018d52:	6920      	ldr	r0, [r4, #16]
 8018d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d58:	f104 0314 	add.w	r3, r4, #20
 8018d5c:	f019 091f 	ands.w	r9, r9, #31
 8018d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018d68:	d02f      	beq.n	8018dca <__lshift+0xc6>
 8018d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8018d6e:	468a      	mov	sl, r1
 8018d70:	f04f 0c00 	mov.w	ip, #0
 8018d74:	681a      	ldr	r2, [r3, #0]
 8018d76:	fa02 f209 	lsl.w	r2, r2, r9
 8018d7a:	ea42 020c 	orr.w	r2, r2, ip
 8018d7e:	f84a 2b04 	str.w	r2, [sl], #4
 8018d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d86:	4298      	cmp	r0, r3
 8018d88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018d8c:	d8f2      	bhi.n	8018d74 <__lshift+0x70>
 8018d8e:	1b03      	subs	r3, r0, r4
 8018d90:	3b15      	subs	r3, #21
 8018d92:	f023 0303 	bic.w	r3, r3, #3
 8018d96:	3304      	adds	r3, #4
 8018d98:	f104 0215 	add.w	r2, r4, #21
 8018d9c:	4290      	cmp	r0, r2
 8018d9e:	bf38      	it	cc
 8018da0:	2304      	movcc	r3, #4
 8018da2:	f841 c003 	str.w	ip, [r1, r3]
 8018da6:	f1bc 0f00 	cmp.w	ip, #0
 8018daa:	d001      	beq.n	8018db0 <__lshift+0xac>
 8018dac:	f108 0602 	add.w	r6, r8, #2
 8018db0:	3e01      	subs	r6, #1
 8018db2:	4638      	mov	r0, r7
 8018db4:	612e      	str	r6, [r5, #16]
 8018db6:	4621      	mov	r1, r4
 8018db8:	f7ff fdd2 	bl	8018960 <_Bfree>
 8018dbc:	4628      	mov	r0, r5
 8018dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8018dc6:	3301      	adds	r3, #1
 8018dc8:	e7c1      	b.n	8018d4e <__lshift+0x4a>
 8018dca:	3904      	subs	r1, #4
 8018dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8018dd4:	4298      	cmp	r0, r3
 8018dd6:	d8f9      	bhi.n	8018dcc <__lshift+0xc8>
 8018dd8:	e7ea      	b.n	8018db0 <__lshift+0xac>
 8018dda:	bf00      	nop
 8018ddc:	0801a360 	.word	0x0801a360
 8018de0:	0801a3de 	.word	0x0801a3de

08018de4 <__mcmp>:
 8018de4:	b530      	push	{r4, r5, lr}
 8018de6:	6902      	ldr	r2, [r0, #16]
 8018de8:	690c      	ldr	r4, [r1, #16]
 8018dea:	1b12      	subs	r2, r2, r4
 8018dec:	d10e      	bne.n	8018e0c <__mcmp+0x28>
 8018dee:	f100 0314 	add.w	r3, r0, #20
 8018df2:	3114      	adds	r1, #20
 8018df4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018df8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018dfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018e00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018e04:	42a5      	cmp	r5, r4
 8018e06:	d003      	beq.n	8018e10 <__mcmp+0x2c>
 8018e08:	d305      	bcc.n	8018e16 <__mcmp+0x32>
 8018e0a:	2201      	movs	r2, #1
 8018e0c:	4610      	mov	r0, r2
 8018e0e:	bd30      	pop	{r4, r5, pc}
 8018e10:	4283      	cmp	r3, r0
 8018e12:	d3f3      	bcc.n	8018dfc <__mcmp+0x18>
 8018e14:	e7fa      	b.n	8018e0c <__mcmp+0x28>
 8018e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e1a:	e7f7      	b.n	8018e0c <__mcmp+0x28>

08018e1c <__mdiff>:
 8018e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e20:	460c      	mov	r4, r1
 8018e22:	4606      	mov	r6, r0
 8018e24:	4611      	mov	r1, r2
 8018e26:	4620      	mov	r0, r4
 8018e28:	4690      	mov	r8, r2
 8018e2a:	f7ff ffdb 	bl	8018de4 <__mcmp>
 8018e2e:	1e05      	subs	r5, r0, #0
 8018e30:	d110      	bne.n	8018e54 <__mdiff+0x38>
 8018e32:	4629      	mov	r1, r5
 8018e34:	4630      	mov	r0, r6
 8018e36:	f7ff fd53 	bl	80188e0 <_Balloc>
 8018e3a:	b930      	cbnz	r0, 8018e4a <__mdiff+0x2e>
 8018e3c:	4b3a      	ldr	r3, [pc, #232]	; (8018f28 <__mdiff+0x10c>)
 8018e3e:	4602      	mov	r2, r0
 8018e40:	f240 2132 	movw	r1, #562	; 0x232
 8018e44:	4839      	ldr	r0, [pc, #228]	; (8018f2c <__mdiff+0x110>)
 8018e46:	f7fe fd85 	bl	8017954 <__assert_func>
 8018e4a:	2301      	movs	r3, #1
 8018e4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e54:	bfa4      	itt	ge
 8018e56:	4643      	movge	r3, r8
 8018e58:	46a0      	movge	r8, r4
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018e60:	bfa6      	itte	ge
 8018e62:	461c      	movge	r4, r3
 8018e64:	2500      	movge	r5, #0
 8018e66:	2501      	movlt	r5, #1
 8018e68:	f7ff fd3a 	bl	80188e0 <_Balloc>
 8018e6c:	b920      	cbnz	r0, 8018e78 <__mdiff+0x5c>
 8018e6e:	4b2e      	ldr	r3, [pc, #184]	; (8018f28 <__mdiff+0x10c>)
 8018e70:	4602      	mov	r2, r0
 8018e72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018e76:	e7e5      	b.n	8018e44 <__mdiff+0x28>
 8018e78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018e7c:	6926      	ldr	r6, [r4, #16]
 8018e7e:	60c5      	str	r5, [r0, #12]
 8018e80:	f104 0914 	add.w	r9, r4, #20
 8018e84:	f108 0514 	add.w	r5, r8, #20
 8018e88:	f100 0e14 	add.w	lr, r0, #20
 8018e8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018e90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018e94:	f108 0210 	add.w	r2, r8, #16
 8018e98:	46f2      	mov	sl, lr
 8018e9a:	2100      	movs	r1, #0
 8018e9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018ea0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018ea4:	fa1f f883 	uxth.w	r8, r3
 8018ea8:	fa11 f18b 	uxtah	r1, r1, fp
 8018eac:	0c1b      	lsrs	r3, r3, #16
 8018eae:	eba1 0808 	sub.w	r8, r1, r8
 8018eb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018eb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018eba:	fa1f f888 	uxth.w	r8, r8
 8018ebe:	1419      	asrs	r1, r3, #16
 8018ec0:	454e      	cmp	r6, r9
 8018ec2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018ec6:	f84a 3b04 	str.w	r3, [sl], #4
 8018eca:	d8e7      	bhi.n	8018e9c <__mdiff+0x80>
 8018ecc:	1b33      	subs	r3, r6, r4
 8018ece:	3b15      	subs	r3, #21
 8018ed0:	f023 0303 	bic.w	r3, r3, #3
 8018ed4:	3304      	adds	r3, #4
 8018ed6:	3415      	adds	r4, #21
 8018ed8:	42a6      	cmp	r6, r4
 8018eda:	bf38      	it	cc
 8018edc:	2304      	movcc	r3, #4
 8018ede:	441d      	add	r5, r3
 8018ee0:	4473      	add	r3, lr
 8018ee2:	469e      	mov	lr, r3
 8018ee4:	462e      	mov	r6, r5
 8018ee6:	4566      	cmp	r6, ip
 8018ee8:	d30e      	bcc.n	8018f08 <__mdiff+0xec>
 8018eea:	f10c 0203 	add.w	r2, ip, #3
 8018eee:	1b52      	subs	r2, r2, r5
 8018ef0:	f022 0203 	bic.w	r2, r2, #3
 8018ef4:	3d03      	subs	r5, #3
 8018ef6:	45ac      	cmp	ip, r5
 8018ef8:	bf38      	it	cc
 8018efa:	2200      	movcc	r2, #0
 8018efc:	441a      	add	r2, r3
 8018efe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018f02:	b17b      	cbz	r3, 8018f24 <__mdiff+0x108>
 8018f04:	6107      	str	r7, [r0, #16]
 8018f06:	e7a3      	b.n	8018e50 <__mdiff+0x34>
 8018f08:	f856 8b04 	ldr.w	r8, [r6], #4
 8018f0c:	fa11 f288 	uxtah	r2, r1, r8
 8018f10:	1414      	asrs	r4, r2, #16
 8018f12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018f16:	b292      	uxth	r2, r2
 8018f18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018f1c:	f84e 2b04 	str.w	r2, [lr], #4
 8018f20:	1421      	asrs	r1, r4, #16
 8018f22:	e7e0      	b.n	8018ee6 <__mdiff+0xca>
 8018f24:	3f01      	subs	r7, #1
 8018f26:	e7ea      	b.n	8018efe <__mdiff+0xe2>
 8018f28:	0801a360 	.word	0x0801a360
 8018f2c:	0801a3de 	.word	0x0801a3de

08018f30 <__d2b>:
 8018f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f34:	4689      	mov	r9, r1
 8018f36:	2101      	movs	r1, #1
 8018f38:	ec57 6b10 	vmov	r6, r7, d0
 8018f3c:	4690      	mov	r8, r2
 8018f3e:	f7ff fccf 	bl	80188e0 <_Balloc>
 8018f42:	4604      	mov	r4, r0
 8018f44:	b930      	cbnz	r0, 8018f54 <__d2b+0x24>
 8018f46:	4602      	mov	r2, r0
 8018f48:	4b25      	ldr	r3, [pc, #148]	; (8018fe0 <__d2b+0xb0>)
 8018f4a:	4826      	ldr	r0, [pc, #152]	; (8018fe4 <__d2b+0xb4>)
 8018f4c:	f240 310a 	movw	r1, #778	; 0x30a
 8018f50:	f7fe fd00 	bl	8017954 <__assert_func>
 8018f54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018f5c:	bb35      	cbnz	r5, 8018fac <__d2b+0x7c>
 8018f5e:	2e00      	cmp	r6, #0
 8018f60:	9301      	str	r3, [sp, #4]
 8018f62:	d028      	beq.n	8018fb6 <__d2b+0x86>
 8018f64:	4668      	mov	r0, sp
 8018f66:	9600      	str	r6, [sp, #0]
 8018f68:	f7ff fd82 	bl	8018a70 <__lo0bits>
 8018f6c:	9900      	ldr	r1, [sp, #0]
 8018f6e:	b300      	cbz	r0, 8018fb2 <__d2b+0x82>
 8018f70:	9a01      	ldr	r2, [sp, #4]
 8018f72:	f1c0 0320 	rsb	r3, r0, #32
 8018f76:	fa02 f303 	lsl.w	r3, r2, r3
 8018f7a:	430b      	orrs	r3, r1
 8018f7c:	40c2      	lsrs	r2, r0
 8018f7e:	6163      	str	r3, [r4, #20]
 8018f80:	9201      	str	r2, [sp, #4]
 8018f82:	9b01      	ldr	r3, [sp, #4]
 8018f84:	61a3      	str	r3, [r4, #24]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	bf14      	ite	ne
 8018f8a:	2202      	movne	r2, #2
 8018f8c:	2201      	moveq	r2, #1
 8018f8e:	6122      	str	r2, [r4, #16]
 8018f90:	b1d5      	cbz	r5, 8018fc8 <__d2b+0x98>
 8018f92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018f96:	4405      	add	r5, r0
 8018f98:	f8c9 5000 	str.w	r5, [r9]
 8018f9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018fa0:	f8c8 0000 	str.w	r0, [r8]
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	b003      	add	sp, #12
 8018fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018fb0:	e7d5      	b.n	8018f5e <__d2b+0x2e>
 8018fb2:	6161      	str	r1, [r4, #20]
 8018fb4:	e7e5      	b.n	8018f82 <__d2b+0x52>
 8018fb6:	a801      	add	r0, sp, #4
 8018fb8:	f7ff fd5a 	bl	8018a70 <__lo0bits>
 8018fbc:	9b01      	ldr	r3, [sp, #4]
 8018fbe:	6163      	str	r3, [r4, #20]
 8018fc0:	2201      	movs	r2, #1
 8018fc2:	6122      	str	r2, [r4, #16]
 8018fc4:	3020      	adds	r0, #32
 8018fc6:	e7e3      	b.n	8018f90 <__d2b+0x60>
 8018fc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018fd0:	f8c9 0000 	str.w	r0, [r9]
 8018fd4:	6918      	ldr	r0, [r3, #16]
 8018fd6:	f7ff fd2b 	bl	8018a30 <__hi0bits>
 8018fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018fde:	e7df      	b.n	8018fa0 <__d2b+0x70>
 8018fe0:	0801a360 	.word	0x0801a360
 8018fe4:	0801a3de 	.word	0x0801a3de

08018fe8 <_calloc_r>:
 8018fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fea:	fba1 2402 	umull	r2, r4, r1, r2
 8018fee:	b94c      	cbnz	r4, 8019004 <_calloc_r+0x1c>
 8018ff0:	4611      	mov	r1, r2
 8018ff2:	9201      	str	r2, [sp, #4]
 8018ff4:	f7fd ff88 	bl	8016f08 <_malloc_r>
 8018ff8:	9a01      	ldr	r2, [sp, #4]
 8018ffa:	4605      	mov	r5, r0
 8018ffc:	b930      	cbnz	r0, 801900c <_calloc_r+0x24>
 8018ffe:	4628      	mov	r0, r5
 8019000:	b003      	add	sp, #12
 8019002:	bd30      	pop	{r4, r5, pc}
 8019004:	220c      	movs	r2, #12
 8019006:	6002      	str	r2, [r0, #0]
 8019008:	2500      	movs	r5, #0
 801900a:	e7f8      	b.n	8018ffe <_calloc_r+0x16>
 801900c:	4621      	mov	r1, r4
 801900e:	f7fd ff07 	bl	8016e20 <memset>
 8019012:	e7f4      	b.n	8018ffe <_calloc_r+0x16>

08019014 <__ssputs_r>:
 8019014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019018:	688e      	ldr	r6, [r1, #8]
 801901a:	429e      	cmp	r6, r3
 801901c:	4682      	mov	sl, r0
 801901e:	460c      	mov	r4, r1
 8019020:	4690      	mov	r8, r2
 8019022:	461f      	mov	r7, r3
 8019024:	d838      	bhi.n	8019098 <__ssputs_r+0x84>
 8019026:	898a      	ldrh	r2, [r1, #12]
 8019028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801902c:	d032      	beq.n	8019094 <__ssputs_r+0x80>
 801902e:	6825      	ldr	r5, [r4, #0]
 8019030:	6909      	ldr	r1, [r1, #16]
 8019032:	eba5 0901 	sub.w	r9, r5, r1
 8019036:	6965      	ldr	r5, [r4, #20]
 8019038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801903c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019040:	3301      	adds	r3, #1
 8019042:	444b      	add	r3, r9
 8019044:	106d      	asrs	r5, r5, #1
 8019046:	429d      	cmp	r5, r3
 8019048:	bf38      	it	cc
 801904a:	461d      	movcc	r5, r3
 801904c:	0553      	lsls	r3, r2, #21
 801904e:	d531      	bpl.n	80190b4 <__ssputs_r+0xa0>
 8019050:	4629      	mov	r1, r5
 8019052:	f7fd ff59 	bl	8016f08 <_malloc_r>
 8019056:	4606      	mov	r6, r0
 8019058:	b950      	cbnz	r0, 8019070 <__ssputs_r+0x5c>
 801905a:	230c      	movs	r3, #12
 801905c:	f8ca 3000 	str.w	r3, [sl]
 8019060:	89a3      	ldrh	r3, [r4, #12]
 8019062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019066:	81a3      	strh	r3, [r4, #12]
 8019068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019070:	6921      	ldr	r1, [r4, #16]
 8019072:	464a      	mov	r2, r9
 8019074:	f7fd fec6 	bl	8016e04 <memcpy>
 8019078:	89a3      	ldrh	r3, [r4, #12]
 801907a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801907e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019082:	81a3      	strh	r3, [r4, #12]
 8019084:	6126      	str	r6, [r4, #16]
 8019086:	6165      	str	r5, [r4, #20]
 8019088:	444e      	add	r6, r9
 801908a:	eba5 0509 	sub.w	r5, r5, r9
 801908e:	6026      	str	r6, [r4, #0]
 8019090:	60a5      	str	r5, [r4, #8]
 8019092:	463e      	mov	r6, r7
 8019094:	42be      	cmp	r6, r7
 8019096:	d900      	bls.n	801909a <__ssputs_r+0x86>
 8019098:	463e      	mov	r6, r7
 801909a:	6820      	ldr	r0, [r4, #0]
 801909c:	4632      	mov	r2, r6
 801909e:	4641      	mov	r1, r8
 80190a0:	f000 fce4 	bl	8019a6c <memmove>
 80190a4:	68a3      	ldr	r3, [r4, #8]
 80190a6:	1b9b      	subs	r3, r3, r6
 80190a8:	60a3      	str	r3, [r4, #8]
 80190aa:	6823      	ldr	r3, [r4, #0]
 80190ac:	4433      	add	r3, r6
 80190ae:	6023      	str	r3, [r4, #0]
 80190b0:	2000      	movs	r0, #0
 80190b2:	e7db      	b.n	801906c <__ssputs_r+0x58>
 80190b4:	462a      	mov	r2, r5
 80190b6:	f000 fcf3 	bl	8019aa0 <_realloc_r>
 80190ba:	4606      	mov	r6, r0
 80190bc:	2800      	cmp	r0, #0
 80190be:	d1e1      	bne.n	8019084 <__ssputs_r+0x70>
 80190c0:	6921      	ldr	r1, [r4, #16]
 80190c2:	4650      	mov	r0, sl
 80190c4:	f7fd feb4 	bl	8016e30 <_free_r>
 80190c8:	e7c7      	b.n	801905a <__ssputs_r+0x46>
	...

080190cc <_svfiprintf_r>:
 80190cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190d0:	4698      	mov	r8, r3
 80190d2:	898b      	ldrh	r3, [r1, #12]
 80190d4:	061b      	lsls	r3, r3, #24
 80190d6:	b09d      	sub	sp, #116	; 0x74
 80190d8:	4607      	mov	r7, r0
 80190da:	460d      	mov	r5, r1
 80190dc:	4614      	mov	r4, r2
 80190de:	d50e      	bpl.n	80190fe <_svfiprintf_r+0x32>
 80190e0:	690b      	ldr	r3, [r1, #16]
 80190e2:	b963      	cbnz	r3, 80190fe <_svfiprintf_r+0x32>
 80190e4:	2140      	movs	r1, #64	; 0x40
 80190e6:	f7fd ff0f 	bl	8016f08 <_malloc_r>
 80190ea:	6028      	str	r0, [r5, #0]
 80190ec:	6128      	str	r0, [r5, #16]
 80190ee:	b920      	cbnz	r0, 80190fa <_svfiprintf_r+0x2e>
 80190f0:	230c      	movs	r3, #12
 80190f2:	603b      	str	r3, [r7, #0]
 80190f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190f8:	e0d1      	b.n	801929e <_svfiprintf_r+0x1d2>
 80190fa:	2340      	movs	r3, #64	; 0x40
 80190fc:	616b      	str	r3, [r5, #20]
 80190fe:	2300      	movs	r3, #0
 8019100:	9309      	str	r3, [sp, #36]	; 0x24
 8019102:	2320      	movs	r3, #32
 8019104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019108:	f8cd 800c 	str.w	r8, [sp, #12]
 801910c:	2330      	movs	r3, #48	; 0x30
 801910e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80192b8 <_svfiprintf_r+0x1ec>
 8019112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019116:	f04f 0901 	mov.w	r9, #1
 801911a:	4623      	mov	r3, r4
 801911c:	469a      	mov	sl, r3
 801911e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019122:	b10a      	cbz	r2, 8019128 <_svfiprintf_r+0x5c>
 8019124:	2a25      	cmp	r2, #37	; 0x25
 8019126:	d1f9      	bne.n	801911c <_svfiprintf_r+0x50>
 8019128:	ebba 0b04 	subs.w	fp, sl, r4
 801912c:	d00b      	beq.n	8019146 <_svfiprintf_r+0x7a>
 801912e:	465b      	mov	r3, fp
 8019130:	4622      	mov	r2, r4
 8019132:	4629      	mov	r1, r5
 8019134:	4638      	mov	r0, r7
 8019136:	f7ff ff6d 	bl	8019014 <__ssputs_r>
 801913a:	3001      	adds	r0, #1
 801913c:	f000 80aa 	beq.w	8019294 <_svfiprintf_r+0x1c8>
 8019140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019142:	445a      	add	r2, fp
 8019144:	9209      	str	r2, [sp, #36]	; 0x24
 8019146:	f89a 3000 	ldrb.w	r3, [sl]
 801914a:	2b00      	cmp	r3, #0
 801914c:	f000 80a2 	beq.w	8019294 <_svfiprintf_r+0x1c8>
 8019150:	2300      	movs	r3, #0
 8019152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801915a:	f10a 0a01 	add.w	sl, sl, #1
 801915e:	9304      	str	r3, [sp, #16]
 8019160:	9307      	str	r3, [sp, #28]
 8019162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019166:	931a      	str	r3, [sp, #104]	; 0x68
 8019168:	4654      	mov	r4, sl
 801916a:	2205      	movs	r2, #5
 801916c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019170:	4851      	ldr	r0, [pc, #324]	; (80192b8 <_svfiprintf_r+0x1ec>)
 8019172:	f7e7 f84d 	bl	8000210 <memchr>
 8019176:	9a04      	ldr	r2, [sp, #16]
 8019178:	b9d8      	cbnz	r0, 80191b2 <_svfiprintf_r+0xe6>
 801917a:	06d0      	lsls	r0, r2, #27
 801917c:	bf44      	itt	mi
 801917e:	2320      	movmi	r3, #32
 8019180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019184:	0711      	lsls	r1, r2, #28
 8019186:	bf44      	itt	mi
 8019188:	232b      	movmi	r3, #43	; 0x2b
 801918a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801918e:	f89a 3000 	ldrb.w	r3, [sl]
 8019192:	2b2a      	cmp	r3, #42	; 0x2a
 8019194:	d015      	beq.n	80191c2 <_svfiprintf_r+0xf6>
 8019196:	9a07      	ldr	r2, [sp, #28]
 8019198:	4654      	mov	r4, sl
 801919a:	2000      	movs	r0, #0
 801919c:	f04f 0c0a 	mov.w	ip, #10
 80191a0:	4621      	mov	r1, r4
 80191a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191a6:	3b30      	subs	r3, #48	; 0x30
 80191a8:	2b09      	cmp	r3, #9
 80191aa:	d94e      	bls.n	801924a <_svfiprintf_r+0x17e>
 80191ac:	b1b0      	cbz	r0, 80191dc <_svfiprintf_r+0x110>
 80191ae:	9207      	str	r2, [sp, #28]
 80191b0:	e014      	b.n	80191dc <_svfiprintf_r+0x110>
 80191b2:	eba0 0308 	sub.w	r3, r0, r8
 80191b6:	fa09 f303 	lsl.w	r3, r9, r3
 80191ba:	4313      	orrs	r3, r2
 80191bc:	9304      	str	r3, [sp, #16]
 80191be:	46a2      	mov	sl, r4
 80191c0:	e7d2      	b.n	8019168 <_svfiprintf_r+0x9c>
 80191c2:	9b03      	ldr	r3, [sp, #12]
 80191c4:	1d19      	adds	r1, r3, #4
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	9103      	str	r1, [sp, #12]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	bfbb      	ittet	lt
 80191ce:	425b      	neglt	r3, r3
 80191d0:	f042 0202 	orrlt.w	r2, r2, #2
 80191d4:	9307      	strge	r3, [sp, #28]
 80191d6:	9307      	strlt	r3, [sp, #28]
 80191d8:	bfb8      	it	lt
 80191da:	9204      	strlt	r2, [sp, #16]
 80191dc:	7823      	ldrb	r3, [r4, #0]
 80191de:	2b2e      	cmp	r3, #46	; 0x2e
 80191e0:	d10c      	bne.n	80191fc <_svfiprintf_r+0x130>
 80191e2:	7863      	ldrb	r3, [r4, #1]
 80191e4:	2b2a      	cmp	r3, #42	; 0x2a
 80191e6:	d135      	bne.n	8019254 <_svfiprintf_r+0x188>
 80191e8:	9b03      	ldr	r3, [sp, #12]
 80191ea:	1d1a      	adds	r2, r3, #4
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	9203      	str	r2, [sp, #12]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	bfb8      	it	lt
 80191f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80191f8:	3402      	adds	r4, #2
 80191fa:	9305      	str	r3, [sp, #20]
 80191fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80192c8 <_svfiprintf_r+0x1fc>
 8019200:	7821      	ldrb	r1, [r4, #0]
 8019202:	2203      	movs	r2, #3
 8019204:	4650      	mov	r0, sl
 8019206:	f7e7 f803 	bl	8000210 <memchr>
 801920a:	b140      	cbz	r0, 801921e <_svfiprintf_r+0x152>
 801920c:	2340      	movs	r3, #64	; 0x40
 801920e:	eba0 000a 	sub.w	r0, r0, sl
 8019212:	fa03 f000 	lsl.w	r0, r3, r0
 8019216:	9b04      	ldr	r3, [sp, #16]
 8019218:	4303      	orrs	r3, r0
 801921a:	3401      	adds	r4, #1
 801921c:	9304      	str	r3, [sp, #16]
 801921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019222:	4826      	ldr	r0, [pc, #152]	; (80192bc <_svfiprintf_r+0x1f0>)
 8019224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019228:	2206      	movs	r2, #6
 801922a:	f7e6 fff1 	bl	8000210 <memchr>
 801922e:	2800      	cmp	r0, #0
 8019230:	d038      	beq.n	80192a4 <_svfiprintf_r+0x1d8>
 8019232:	4b23      	ldr	r3, [pc, #140]	; (80192c0 <_svfiprintf_r+0x1f4>)
 8019234:	bb1b      	cbnz	r3, 801927e <_svfiprintf_r+0x1b2>
 8019236:	9b03      	ldr	r3, [sp, #12]
 8019238:	3307      	adds	r3, #7
 801923a:	f023 0307 	bic.w	r3, r3, #7
 801923e:	3308      	adds	r3, #8
 8019240:	9303      	str	r3, [sp, #12]
 8019242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019244:	4433      	add	r3, r6
 8019246:	9309      	str	r3, [sp, #36]	; 0x24
 8019248:	e767      	b.n	801911a <_svfiprintf_r+0x4e>
 801924a:	fb0c 3202 	mla	r2, ip, r2, r3
 801924e:	460c      	mov	r4, r1
 8019250:	2001      	movs	r0, #1
 8019252:	e7a5      	b.n	80191a0 <_svfiprintf_r+0xd4>
 8019254:	2300      	movs	r3, #0
 8019256:	3401      	adds	r4, #1
 8019258:	9305      	str	r3, [sp, #20]
 801925a:	4619      	mov	r1, r3
 801925c:	f04f 0c0a 	mov.w	ip, #10
 8019260:	4620      	mov	r0, r4
 8019262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019266:	3a30      	subs	r2, #48	; 0x30
 8019268:	2a09      	cmp	r2, #9
 801926a:	d903      	bls.n	8019274 <_svfiprintf_r+0x1a8>
 801926c:	2b00      	cmp	r3, #0
 801926e:	d0c5      	beq.n	80191fc <_svfiprintf_r+0x130>
 8019270:	9105      	str	r1, [sp, #20]
 8019272:	e7c3      	b.n	80191fc <_svfiprintf_r+0x130>
 8019274:	fb0c 2101 	mla	r1, ip, r1, r2
 8019278:	4604      	mov	r4, r0
 801927a:	2301      	movs	r3, #1
 801927c:	e7f0      	b.n	8019260 <_svfiprintf_r+0x194>
 801927e:	ab03      	add	r3, sp, #12
 8019280:	9300      	str	r3, [sp, #0]
 8019282:	462a      	mov	r2, r5
 8019284:	4b0f      	ldr	r3, [pc, #60]	; (80192c4 <_svfiprintf_r+0x1f8>)
 8019286:	a904      	add	r1, sp, #16
 8019288:	4638      	mov	r0, r7
 801928a:	f7fd ff51 	bl	8017130 <_printf_float>
 801928e:	1c42      	adds	r2, r0, #1
 8019290:	4606      	mov	r6, r0
 8019292:	d1d6      	bne.n	8019242 <_svfiprintf_r+0x176>
 8019294:	89ab      	ldrh	r3, [r5, #12]
 8019296:	065b      	lsls	r3, r3, #25
 8019298:	f53f af2c 	bmi.w	80190f4 <_svfiprintf_r+0x28>
 801929c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801929e:	b01d      	add	sp, #116	; 0x74
 80192a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192a4:	ab03      	add	r3, sp, #12
 80192a6:	9300      	str	r3, [sp, #0]
 80192a8:	462a      	mov	r2, r5
 80192aa:	4b06      	ldr	r3, [pc, #24]	; (80192c4 <_svfiprintf_r+0x1f8>)
 80192ac:	a904      	add	r1, sp, #16
 80192ae:	4638      	mov	r0, r7
 80192b0:	f7fe f9e2 	bl	8017678 <_printf_i>
 80192b4:	e7eb      	b.n	801928e <_svfiprintf_r+0x1c2>
 80192b6:	bf00      	nop
 80192b8:	0801a53c 	.word	0x0801a53c
 80192bc:	0801a546 	.word	0x0801a546
 80192c0:	08017131 	.word	0x08017131
 80192c4:	08019015 	.word	0x08019015
 80192c8:	0801a542 	.word	0x0801a542

080192cc <__sfputc_r>:
 80192cc:	6893      	ldr	r3, [r2, #8]
 80192ce:	3b01      	subs	r3, #1
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	b410      	push	{r4}
 80192d4:	6093      	str	r3, [r2, #8]
 80192d6:	da08      	bge.n	80192ea <__sfputc_r+0x1e>
 80192d8:	6994      	ldr	r4, [r2, #24]
 80192da:	42a3      	cmp	r3, r4
 80192dc:	db01      	blt.n	80192e2 <__sfputc_r+0x16>
 80192de:	290a      	cmp	r1, #10
 80192e0:	d103      	bne.n	80192ea <__sfputc_r+0x1e>
 80192e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192e6:	f000 b98f 	b.w	8019608 <__swbuf_r>
 80192ea:	6813      	ldr	r3, [r2, #0]
 80192ec:	1c58      	adds	r0, r3, #1
 80192ee:	6010      	str	r0, [r2, #0]
 80192f0:	7019      	strb	r1, [r3, #0]
 80192f2:	4608      	mov	r0, r1
 80192f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192f8:	4770      	bx	lr

080192fa <__sfputs_r>:
 80192fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192fc:	4606      	mov	r6, r0
 80192fe:	460f      	mov	r7, r1
 8019300:	4614      	mov	r4, r2
 8019302:	18d5      	adds	r5, r2, r3
 8019304:	42ac      	cmp	r4, r5
 8019306:	d101      	bne.n	801930c <__sfputs_r+0x12>
 8019308:	2000      	movs	r0, #0
 801930a:	e007      	b.n	801931c <__sfputs_r+0x22>
 801930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019310:	463a      	mov	r2, r7
 8019312:	4630      	mov	r0, r6
 8019314:	f7ff ffda 	bl	80192cc <__sfputc_r>
 8019318:	1c43      	adds	r3, r0, #1
 801931a:	d1f3      	bne.n	8019304 <__sfputs_r+0xa>
 801931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019320 <_vfiprintf_r>:
 8019320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019324:	460d      	mov	r5, r1
 8019326:	b09d      	sub	sp, #116	; 0x74
 8019328:	4614      	mov	r4, r2
 801932a:	4698      	mov	r8, r3
 801932c:	4606      	mov	r6, r0
 801932e:	b118      	cbz	r0, 8019338 <_vfiprintf_r+0x18>
 8019330:	6983      	ldr	r3, [r0, #24]
 8019332:	b90b      	cbnz	r3, 8019338 <_vfiprintf_r+0x18>
 8019334:	f7ff f9fe 	bl	8018734 <__sinit>
 8019338:	4b89      	ldr	r3, [pc, #548]	; (8019560 <_vfiprintf_r+0x240>)
 801933a:	429d      	cmp	r5, r3
 801933c:	d11b      	bne.n	8019376 <_vfiprintf_r+0x56>
 801933e:	6875      	ldr	r5, [r6, #4]
 8019340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019342:	07d9      	lsls	r1, r3, #31
 8019344:	d405      	bmi.n	8019352 <_vfiprintf_r+0x32>
 8019346:	89ab      	ldrh	r3, [r5, #12]
 8019348:	059a      	lsls	r2, r3, #22
 801934a:	d402      	bmi.n	8019352 <_vfiprintf_r+0x32>
 801934c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801934e:	f7ff faa6 	bl	801889e <__retarget_lock_acquire_recursive>
 8019352:	89ab      	ldrh	r3, [r5, #12]
 8019354:	071b      	lsls	r3, r3, #28
 8019356:	d501      	bpl.n	801935c <_vfiprintf_r+0x3c>
 8019358:	692b      	ldr	r3, [r5, #16]
 801935a:	b9eb      	cbnz	r3, 8019398 <_vfiprintf_r+0x78>
 801935c:	4629      	mov	r1, r5
 801935e:	4630      	mov	r0, r6
 8019360:	f000 f9c4 	bl	80196ec <__swsetup_r>
 8019364:	b1c0      	cbz	r0, 8019398 <_vfiprintf_r+0x78>
 8019366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019368:	07dc      	lsls	r4, r3, #31
 801936a:	d50e      	bpl.n	801938a <_vfiprintf_r+0x6a>
 801936c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019370:	b01d      	add	sp, #116	; 0x74
 8019372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019376:	4b7b      	ldr	r3, [pc, #492]	; (8019564 <_vfiprintf_r+0x244>)
 8019378:	429d      	cmp	r5, r3
 801937a:	d101      	bne.n	8019380 <_vfiprintf_r+0x60>
 801937c:	68b5      	ldr	r5, [r6, #8]
 801937e:	e7df      	b.n	8019340 <_vfiprintf_r+0x20>
 8019380:	4b79      	ldr	r3, [pc, #484]	; (8019568 <_vfiprintf_r+0x248>)
 8019382:	429d      	cmp	r5, r3
 8019384:	bf08      	it	eq
 8019386:	68f5      	ldreq	r5, [r6, #12]
 8019388:	e7da      	b.n	8019340 <_vfiprintf_r+0x20>
 801938a:	89ab      	ldrh	r3, [r5, #12]
 801938c:	0598      	lsls	r0, r3, #22
 801938e:	d4ed      	bmi.n	801936c <_vfiprintf_r+0x4c>
 8019390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019392:	f7ff fa85 	bl	80188a0 <__retarget_lock_release_recursive>
 8019396:	e7e9      	b.n	801936c <_vfiprintf_r+0x4c>
 8019398:	2300      	movs	r3, #0
 801939a:	9309      	str	r3, [sp, #36]	; 0x24
 801939c:	2320      	movs	r3, #32
 801939e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80193a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80193a6:	2330      	movs	r3, #48	; 0x30
 80193a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801956c <_vfiprintf_r+0x24c>
 80193ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80193b0:	f04f 0901 	mov.w	r9, #1
 80193b4:	4623      	mov	r3, r4
 80193b6:	469a      	mov	sl, r3
 80193b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193bc:	b10a      	cbz	r2, 80193c2 <_vfiprintf_r+0xa2>
 80193be:	2a25      	cmp	r2, #37	; 0x25
 80193c0:	d1f9      	bne.n	80193b6 <_vfiprintf_r+0x96>
 80193c2:	ebba 0b04 	subs.w	fp, sl, r4
 80193c6:	d00b      	beq.n	80193e0 <_vfiprintf_r+0xc0>
 80193c8:	465b      	mov	r3, fp
 80193ca:	4622      	mov	r2, r4
 80193cc:	4629      	mov	r1, r5
 80193ce:	4630      	mov	r0, r6
 80193d0:	f7ff ff93 	bl	80192fa <__sfputs_r>
 80193d4:	3001      	adds	r0, #1
 80193d6:	f000 80aa 	beq.w	801952e <_vfiprintf_r+0x20e>
 80193da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80193dc:	445a      	add	r2, fp
 80193de:	9209      	str	r2, [sp, #36]	; 0x24
 80193e0:	f89a 3000 	ldrb.w	r3, [sl]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	f000 80a2 	beq.w	801952e <_vfiprintf_r+0x20e>
 80193ea:	2300      	movs	r3, #0
 80193ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80193f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193f4:	f10a 0a01 	add.w	sl, sl, #1
 80193f8:	9304      	str	r3, [sp, #16]
 80193fa:	9307      	str	r3, [sp, #28]
 80193fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019400:	931a      	str	r3, [sp, #104]	; 0x68
 8019402:	4654      	mov	r4, sl
 8019404:	2205      	movs	r2, #5
 8019406:	f814 1b01 	ldrb.w	r1, [r4], #1
 801940a:	4858      	ldr	r0, [pc, #352]	; (801956c <_vfiprintf_r+0x24c>)
 801940c:	f7e6 ff00 	bl	8000210 <memchr>
 8019410:	9a04      	ldr	r2, [sp, #16]
 8019412:	b9d8      	cbnz	r0, 801944c <_vfiprintf_r+0x12c>
 8019414:	06d1      	lsls	r1, r2, #27
 8019416:	bf44      	itt	mi
 8019418:	2320      	movmi	r3, #32
 801941a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801941e:	0713      	lsls	r3, r2, #28
 8019420:	bf44      	itt	mi
 8019422:	232b      	movmi	r3, #43	; 0x2b
 8019424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019428:	f89a 3000 	ldrb.w	r3, [sl]
 801942c:	2b2a      	cmp	r3, #42	; 0x2a
 801942e:	d015      	beq.n	801945c <_vfiprintf_r+0x13c>
 8019430:	9a07      	ldr	r2, [sp, #28]
 8019432:	4654      	mov	r4, sl
 8019434:	2000      	movs	r0, #0
 8019436:	f04f 0c0a 	mov.w	ip, #10
 801943a:	4621      	mov	r1, r4
 801943c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019440:	3b30      	subs	r3, #48	; 0x30
 8019442:	2b09      	cmp	r3, #9
 8019444:	d94e      	bls.n	80194e4 <_vfiprintf_r+0x1c4>
 8019446:	b1b0      	cbz	r0, 8019476 <_vfiprintf_r+0x156>
 8019448:	9207      	str	r2, [sp, #28]
 801944a:	e014      	b.n	8019476 <_vfiprintf_r+0x156>
 801944c:	eba0 0308 	sub.w	r3, r0, r8
 8019450:	fa09 f303 	lsl.w	r3, r9, r3
 8019454:	4313      	orrs	r3, r2
 8019456:	9304      	str	r3, [sp, #16]
 8019458:	46a2      	mov	sl, r4
 801945a:	e7d2      	b.n	8019402 <_vfiprintf_r+0xe2>
 801945c:	9b03      	ldr	r3, [sp, #12]
 801945e:	1d19      	adds	r1, r3, #4
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	9103      	str	r1, [sp, #12]
 8019464:	2b00      	cmp	r3, #0
 8019466:	bfbb      	ittet	lt
 8019468:	425b      	neglt	r3, r3
 801946a:	f042 0202 	orrlt.w	r2, r2, #2
 801946e:	9307      	strge	r3, [sp, #28]
 8019470:	9307      	strlt	r3, [sp, #28]
 8019472:	bfb8      	it	lt
 8019474:	9204      	strlt	r2, [sp, #16]
 8019476:	7823      	ldrb	r3, [r4, #0]
 8019478:	2b2e      	cmp	r3, #46	; 0x2e
 801947a:	d10c      	bne.n	8019496 <_vfiprintf_r+0x176>
 801947c:	7863      	ldrb	r3, [r4, #1]
 801947e:	2b2a      	cmp	r3, #42	; 0x2a
 8019480:	d135      	bne.n	80194ee <_vfiprintf_r+0x1ce>
 8019482:	9b03      	ldr	r3, [sp, #12]
 8019484:	1d1a      	adds	r2, r3, #4
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	9203      	str	r2, [sp, #12]
 801948a:	2b00      	cmp	r3, #0
 801948c:	bfb8      	it	lt
 801948e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019492:	3402      	adds	r4, #2
 8019494:	9305      	str	r3, [sp, #20]
 8019496:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801957c <_vfiprintf_r+0x25c>
 801949a:	7821      	ldrb	r1, [r4, #0]
 801949c:	2203      	movs	r2, #3
 801949e:	4650      	mov	r0, sl
 80194a0:	f7e6 feb6 	bl	8000210 <memchr>
 80194a4:	b140      	cbz	r0, 80194b8 <_vfiprintf_r+0x198>
 80194a6:	2340      	movs	r3, #64	; 0x40
 80194a8:	eba0 000a 	sub.w	r0, r0, sl
 80194ac:	fa03 f000 	lsl.w	r0, r3, r0
 80194b0:	9b04      	ldr	r3, [sp, #16]
 80194b2:	4303      	orrs	r3, r0
 80194b4:	3401      	adds	r4, #1
 80194b6:	9304      	str	r3, [sp, #16]
 80194b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194bc:	482c      	ldr	r0, [pc, #176]	; (8019570 <_vfiprintf_r+0x250>)
 80194be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80194c2:	2206      	movs	r2, #6
 80194c4:	f7e6 fea4 	bl	8000210 <memchr>
 80194c8:	2800      	cmp	r0, #0
 80194ca:	d03f      	beq.n	801954c <_vfiprintf_r+0x22c>
 80194cc:	4b29      	ldr	r3, [pc, #164]	; (8019574 <_vfiprintf_r+0x254>)
 80194ce:	bb1b      	cbnz	r3, 8019518 <_vfiprintf_r+0x1f8>
 80194d0:	9b03      	ldr	r3, [sp, #12]
 80194d2:	3307      	adds	r3, #7
 80194d4:	f023 0307 	bic.w	r3, r3, #7
 80194d8:	3308      	adds	r3, #8
 80194da:	9303      	str	r3, [sp, #12]
 80194dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194de:	443b      	add	r3, r7
 80194e0:	9309      	str	r3, [sp, #36]	; 0x24
 80194e2:	e767      	b.n	80193b4 <_vfiprintf_r+0x94>
 80194e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80194e8:	460c      	mov	r4, r1
 80194ea:	2001      	movs	r0, #1
 80194ec:	e7a5      	b.n	801943a <_vfiprintf_r+0x11a>
 80194ee:	2300      	movs	r3, #0
 80194f0:	3401      	adds	r4, #1
 80194f2:	9305      	str	r3, [sp, #20]
 80194f4:	4619      	mov	r1, r3
 80194f6:	f04f 0c0a 	mov.w	ip, #10
 80194fa:	4620      	mov	r0, r4
 80194fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019500:	3a30      	subs	r2, #48	; 0x30
 8019502:	2a09      	cmp	r2, #9
 8019504:	d903      	bls.n	801950e <_vfiprintf_r+0x1ee>
 8019506:	2b00      	cmp	r3, #0
 8019508:	d0c5      	beq.n	8019496 <_vfiprintf_r+0x176>
 801950a:	9105      	str	r1, [sp, #20]
 801950c:	e7c3      	b.n	8019496 <_vfiprintf_r+0x176>
 801950e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019512:	4604      	mov	r4, r0
 8019514:	2301      	movs	r3, #1
 8019516:	e7f0      	b.n	80194fa <_vfiprintf_r+0x1da>
 8019518:	ab03      	add	r3, sp, #12
 801951a:	9300      	str	r3, [sp, #0]
 801951c:	462a      	mov	r2, r5
 801951e:	4b16      	ldr	r3, [pc, #88]	; (8019578 <_vfiprintf_r+0x258>)
 8019520:	a904      	add	r1, sp, #16
 8019522:	4630      	mov	r0, r6
 8019524:	f7fd fe04 	bl	8017130 <_printf_float>
 8019528:	4607      	mov	r7, r0
 801952a:	1c78      	adds	r0, r7, #1
 801952c:	d1d6      	bne.n	80194dc <_vfiprintf_r+0x1bc>
 801952e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019530:	07d9      	lsls	r1, r3, #31
 8019532:	d405      	bmi.n	8019540 <_vfiprintf_r+0x220>
 8019534:	89ab      	ldrh	r3, [r5, #12]
 8019536:	059a      	lsls	r2, r3, #22
 8019538:	d402      	bmi.n	8019540 <_vfiprintf_r+0x220>
 801953a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801953c:	f7ff f9b0 	bl	80188a0 <__retarget_lock_release_recursive>
 8019540:	89ab      	ldrh	r3, [r5, #12]
 8019542:	065b      	lsls	r3, r3, #25
 8019544:	f53f af12 	bmi.w	801936c <_vfiprintf_r+0x4c>
 8019548:	9809      	ldr	r0, [sp, #36]	; 0x24
 801954a:	e711      	b.n	8019370 <_vfiprintf_r+0x50>
 801954c:	ab03      	add	r3, sp, #12
 801954e:	9300      	str	r3, [sp, #0]
 8019550:	462a      	mov	r2, r5
 8019552:	4b09      	ldr	r3, [pc, #36]	; (8019578 <_vfiprintf_r+0x258>)
 8019554:	a904      	add	r1, sp, #16
 8019556:	4630      	mov	r0, r6
 8019558:	f7fe f88e 	bl	8017678 <_printf_i>
 801955c:	e7e4      	b.n	8019528 <_vfiprintf_r+0x208>
 801955e:	bf00      	nop
 8019560:	0801a394 	.word	0x0801a394
 8019564:	0801a3b4 	.word	0x0801a3b4
 8019568:	0801a374 	.word	0x0801a374
 801956c:	0801a53c 	.word	0x0801a53c
 8019570:	0801a546 	.word	0x0801a546
 8019574:	08017131 	.word	0x08017131
 8019578:	080192fb 	.word	0x080192fb
 801957c:	0801a542 	.word	0x0801a542

08019580 <__sread>:
 8019580:	b510      	push	{r4, lr}
 8019582:	460c      	mov	r4, r1
 8019584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019588:	f000 faba 	bl	8019b00 <_read_r>
 801958c:	2800      	cmp	r0, #0
 801958e:	bfab      	itete	ge
 8019590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019592:	89a3      	ldrhlt	r3, [r4, #12]
 8019594:	181b      	addge	r3, r3, r0
 8019596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801959a:	bfac      	ite	ge
 801959c:	6563      	strge	r3, [r4, #84]	; 0x54
 801959e:	81a3      	strhlt	r3, [r4, #12]
 80195a0:	bd10      	pop	{r4, pc}

080195a2 <__swrite>:
 80195a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195a6:	461f      	mov	r7, r3
 80195a8:	898b      	ldrh	r3, [r1, #12]
 80195aa:	05db      	lsls	r3, r3, #23
 80195ac:	4605      	mov	r5, r0
 80195ae:	460c      	mov	r4, r1
 80195b0:	4616      	mov	r6, r2
 80195b2:	d505      	bpl.n	80195c0 <__swrite+0x1e>
 80195b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195b8:	2302      	movs	r3, #2
 80195ba:	2200      	movs	r2, #0
 80195bc:	f000 f9de 	bl	801997c <_lseek_r>
 80195c0:	89a3      	ldrh	r3, [r4, #12]
 80195c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80195ca:	81a3      	strh	r3, [r4, #12]
 80195cc:	4632      	mov	r2, r6
 80195ce:	463b      	mov	r3, r7
 80195d0:	4628      	mov	r0, r5
 80195d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195d6:	f000 b877 	b.w	80196c8 <_write_r>

080195da <__sseek>:
 80195da:	b510      	push	{r4, lr}
 80195dc:	460c      	mov	r4, r1
 80195de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195e2:	f000 f9cb 	bl	801997c <_lseek_r>
 80195e6:	1c43      	adds	r3, r0, #1
 80195e8:	89a3      	ldrh	r3, [r4, #12]
 80195ea:	bf15      	itete	ne
 80195ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80195ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80195f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80195f6:	81a3      	strheq	r3, [r4, #12]
 80195f8:	bf18      	it	ne
 80195fa:	81a3      	strhne	r3, [r4, #12]
 80195fc:	bd10      	pop	{r4, pc}

080195fe <__sclose>:
 80195fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019602:	f000 b8e9 	b.w	80197d8 <_close_r>
	...

08019608 <__swbuf_r>:
 8019608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801960a:	460e      	mov	r6, r1
 801960c:	4614      	mov	r4, r2
 801960e:	4605      	mov	r5, r0
 8019610:	b118      	cbz	r0, 801961a <__swbuf_r+0x12>
 8019612:	6983      	ldr	r3, [r0, #24]
 8019614:	b90b      	cbnz	r3, 801961a <__swbuf_r+0x12>
 8019616:	f7ff f88d 	bl	8018734 <__sinit>
 801961a:	4b21      	ldr	r3, [pc, #132]	; (80196a0 <__swbuf_r+0x98>)
 801961c:	429c      	cmp	r4, r3
 801961e:	d12b      	bne.n	8019678 <__swbuf_r+0x70>
 8019620:	686c      	ldr	r4, [r5, #4]
 8019622:	69a3      	ldr	r3, [r4, #24]
 8019624:	60a3      	str	r3, [r4, #8]
 8019626:	89a3      	ldrh	r3, [r4, #12]
 8019628:	071a      	lsls	r2, r3, #28
 801962a:	d52f      	bpl.n	801968c <__swbuf_r+0x84>
 801962c:	6923      	ldr	r3, [r4, #16]
 801962e:	b36b      	cbz	r3, 801968c <__swbuf_r+0x84>
 8019630:	6923      	ldr	r3, [r4, #16]
 8019632:	6820      	ldr	r0, [r4, #0]
 8019634:	1ac0      	subs	r0, r0, r3
 8019636:	6963      	ldr	r3, [r4, #20]
 8019638:	b2f6      	uxtb	r6, r6
 801963a:	4283      	cmp	r3, r0
 801963c:	4637      	mov	r7, r6
 801963e:	dc04      	bgt.n	801964a <__swbuf_r+0x42>
 8019640:	4621      	mov	r1, r4
 8019642:	4628      	mov	r0, r5
 8019644:	f000 f95e 	bl	8019904 <_fflush_r>
 8019648:	bb30      	cbnz	r0, 8019698 <__swbuf_r+0x90>
 801964a:	68a3      	ldr	r3, [r4, #8]
 801964c:	3b01      	subs	r3, #1
 801964e:	60a3      	str	r3, [r4, #8]
 8019650:	6823      	ldr	r3, [r4, #0]
 8019652:	1c5a      	adds	r2, r3, #1
 8019654:	6022      	str	r2, [r4, #0]
 8019656:	701e      	strb	r6, [r3, #0]
 8019658:	6963      	ldr	r3, [r4, #20]
 801965a:	3001      	adds	r0, #1
 801965c:	4283      	cmp	r3, r0
 801965e:	d004      	beq.n	801966a <__swbuf_r+0x62>
 8019660:	89a3      	ldrh	r3, [r4, #12]
 8019662:	07db      	lsls	r3, r3, #31
 8019664:	d506      	bpl.n	8019674 <__swbuf_r+0x6c>
 8019666:	2e0a      	cmp	r6, #10
 8019668:	d104      	bne.n	8019674 <__swbuf_r+0x6c>
 801966a:	4621      	mov	r1, r4
 801966c:	4628      	mov	r0, r5
 801966e:	f000 f949 	bl	8019904 <_fflush_r>
 8019672:	b988      	cbnz	r0, 8019698 <__swbuf_r+0x90>
 8019674:	4638      	mov	r0, r7
 8019676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019678:	4b0a      	ldr	r3, [pc, #40]	; (80196a4 <__swbuf_r+0x9c>)
 801967a:	429c      	cmp	r4, r3
 801967c:	d101      	bne.n	8019682 <__swbuf_r+0x7a>
 801967e:	68ac      	ldr	r4, [r5, #8]
 8019680:	e7cf      	b.n	8019622 <__swbuf_r+0x1a>
 8019682:	4b09      	ldr	r3, [pc, #36]	; (80196a8 <__swbuf_r+0xa0>)
 8019684:	429c      	cmp	r4, r3
 8019686:	bf08      	it	eq
 8019688:	68ec      	ldreq	r4, [r5, #12]
 801968a:	e7ca      	b.n	8019622 <__swbuf_r+0x1a>
 801968c:	4621      	mov	r1, r4
 801968e:	4628      	mov	r0, r5
 8019690:	f000 f82c 	bl	80196ec <__swsetup_r>
 8019694:	2800      	cmp	r0, #0
 8019696:	d0cb      	beq.n	8019630 <__swbuf_r+0x28>
 8019698:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801969c:	e7ea      	b.n	8019674 <__swbuf_r+0x6c>
 801969e:	bf00      	nop
 80196a0:	0801a394 	.word	0x0801a394
 80196a4:	0801a3b4 	.word	0x0801a3b4
 80196a8:	0801a374 	.word	0x0801a374

080196ac <__ascii_wctomb>:
 80196ac:	b149      	cbz	r1, 80196c2 <__ascii_wctomb+0x16>
 80196ae:	2aff      	cmp	r2, #255	; 0xff
 80196b0:	bf85      	ittet	hi
 80196b2:	238a      	movhi	r3, #138	; 0x8a
 80196b4:	6003      	strhi	r3, [r0, #0]
 80196b6:	700a      	strbls	r2, [r1, #0]
 80196b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80196bc:	bf98      	it	ls
 80196be:	2001      	movls	r0, #1
 80196c0:	4770      	bx	lr
 80196c2:	4608      	mov	r0, r1
 80196c4:	4770      	bx	lr
	...

080196c8 <_write_r>:
 80196c8:	b538      	push	{r3, r4, r5, lr}
 80196ca:	4d07      	ldr	r5, [pc, #28]	; (80196e8 <_write_r+0x20>)
 80196cc:	4604      	mov	r4, r0
 80196ce:	4608      	mov	r0, r1
 80196d0:	4611      	mov	r1, r2
 80196d2:	2200      	movs	r2, #0
 80196d4:	602a      	str	r2, [r5, #0]
 80196d6:	461a      	mov	r2, r3
 80196d8:	f000 fad8 	bl	8019c8c <_write>
 80196dc:	1c43      	adds	r3, r0, #1
 80196de:	d102      	bne.n	80196e6 <_write_r+0x1e>
 80196e0:	682b      	ldr	r3, [r5, #0]
 80196e2:	b103      	cbz	r3, 80196e6 <_write_r+0x1e>
 80196e4:	6023      	str	r3, [r4, #0]
 80196e6:	bd38      	pop	{r3, r4, r5, pc}
 80196e8:	20002f6c 	.word	0x20002f6c

080196ec <__swsetup_r>:
 80196ec:	4b32      	ldr	r3, [pc, #200]	; (80197b8 <__swsetup_r+0xcc>)
 80196ee:	b570      	push	{r4, r5, r6, lr}
 80196f0:	681d      	ldr	r5, [r3, #0]
 80196f2:	4606      	mov	r6, r0
 80196f4:	460c      	mov	r4, r1
 80196f6:	b125      	cbz	r5, 8019702 <__swsetup_r+0x16>
 80196f8:	69ab      	ldr	r3, [r5, #24]
 80196fa:	b913      	cbnz	r3, 8019702 <__swsetup_r+0x16>
 80196fc:	4628      	mov	r0, r5
 80196fe:	f7ff f819 	bl	8018734 <__sinit>
 8019702:	4b2e      	ldr	r3, [pc, #184]	; (80197bc <__swsetup_r+0xd0>)
 8019704:	429c      	cmp	r4, r3
 8019706:	d10f      	bne.n	8019728 <__swsetup_r+0x3c>
 8019708:	686c      	ldr	r4, [r5, #4]
 801970a:	89a3      	ldrh	r3, [r4, #12]
 801970c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019710:	0719      	lsls	r1, r3, #28
 8019712:	d42c      	bmi.n	801976e <__swsetup_r+0x82>
 8019714:	06dd      	lsls	r5, r3, #27
 8019716:	d411      	bmi.n	801973c <__swsetup_r+0x50>
 8019718:	2309      	movs	r3, #9
 801971a:	6033      	str	r3, [r6, #0]
 801971c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019720:	81a3      	strh	r3, [r4, #12]
 8019722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019726:	e03e      	b.n	80197a6 <__swsetup_r+0xba>
 8019728:	4b25      	ldr	r3, [pc, #148]	; (80197c0 <__swsetup_r+0xd4>)
 801972a:	429c      	cmp	r4, r3
 801972c:	d101      	bne.n	8019732 <__swsetup_r+0x46>
 801972e:	68ac      	ldr	r4, [r5, #8]
 8019730:	e7eb      	b.n	801970a <__swsetup_r+0x1e>
 8019732:	4b24      	ldr	r3, [pc, #144]	; (80197c4 <__swsetup_r+0xd8>)
 8019734:	429c      	cmp	r4, r3
 8019736:	bf08      	it	eq
 8019738:	68ec      	ldreq	r4, [r5, #12]
 801973a:	e7e6      	b.n	801970a <__swsetup_r+0x1e>
 801973c:	0758      	lsls	r0, r3, #29
 801973e:	d512      	bpl.n	8019766 <__swsetup_r+0x7a>
 8019740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019742:	b141      	cbz	r1, 8019756 <__swsetup_r+0x6a>
 8019744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019748:	4299      	cmp	r1, r3
 801974a:	d002      	beq.n	8019752 <__swsetup_r+0x66>
 801974c:	4630      	mov	r0, r6
 801974e:	f7fd fb6f 	bl	8016e30 <_free_r>
 8019752:	2300      	movs	r3, #0
 8019754:	6363      	str	r3, [r4, #52]	; 0x34
 8019756:	89a3      	ldrh	r3, [r4, #12]
 8019758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801975c:	81a3      	strh	r3, [r4, #12]
 801975e:	2300      	movs	r3, #0
 8019760:	6063      	str	r3, [r4, #4]
 8019762:	6923      	ldr	r3, [r4, #16]
 8019764:	6023      	str	r3, [r4, #0]
 8019766:	89a3      	ldrh	r3, [r4, #12]
 8019768:	f043 0308 	orr.w	r3, r3, #8
 801976c:	81a3      	strh	r3, [r4, #12]
 801976e:	6923      	ldr	r3, [r4, #16]
 8019770:	b94b      	cbnz	r3, 8019786 <__swsetup_r+0x9a>
 8019772:	89a3      	ldrh	r3, [r4, #12]
 8019774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801977c:	d003      	beq.n	8019786 <__swsetup_r+0x9a>
 801977e:	4621      	mov	r1, r4
 8019780:	4630      	mov	r0, r6
 8019782:	f000 f933 	bl	80199ec <__smakebuf_r>
 8019786:	89a0      	ldrh	r0, [r4, #12]
 8019788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801978c:	f010 0301 	ands.w	r3, r0, #1
 8019790:	d00a      	beq.n	80197a8 <__swsetup_r+0xbc>
 8019792:	2300      	movs	r3, #0
 8019794:	60a3      	str	r3, [r4, #8]
 8019796:	6963      	ldr	r3, [r4, #20]
 8019798:	425b      	negs	r3, r3
 801979a:	61a3      	str	r3, [r4, #24]
 801979c:	6923      	ldr	r3, [r4, #16]
 801979e:	b943      	cbnz	r3, 80197b2 <__swsetup_r+0xc6>
 80197a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80197a4:	d1ba      	bne.n	801971c <__swsetup_r+0x30>
 80197a6:	bd70      	pop	{r4, r5, r6, pc}
 80197a8:	0781      	lsls	r1, r0, #30
 80197aa:	bf58      	it	pl
 80197ac:	6963      	ldrpl	r3, [r4, #20]
 80197ae:	60a3      	str	r3, [r4, #8]
 80197b0:	e7f4      	b.n	801979c <__swsetup_r+0xb0>
 80197b2:	2000      	movs	r0, #0
 80197b4:	e7f7      	b.n	80197a6 <__swsetup_r+0xba>
 80197b6:	bf00      	nop
 80197b8:	20000184 	.word	0x20000184
 80197bc:	0801a394 	.word	0x0801a394
 80197c0:	0801a3b4 	.word	0x0801a3b4
 80197c4:	0801a374 	.word	0x0801a374

080197c8 <abort>:
 80197c8:	b508      	push	{r3, lr}
 80197ca:	2006      	movs	r0, #6
 80197cc:	f000 f9d2 	bl	8019b74 <raise>
 80197d0:	2001      	movs	r0, #1
 80197d2:	f000 fa63 	bl	8019c9c <_exit>
	...

080197d8 <_close_r>:
 80197d8:	b538      	push	{r3, r4, r5, lr}
 80197da:	4d06      	ldr	r5, [pc, #24]	; (80197f4 <_close_r+0x1c>)
 80197dc:	2300      	movs	r3, #0
 80197de:	4604      	mov	r4, r0
 80197e0:	4608      	mov	r0, r1
 80197e2:	602b      	str	r3, [r5, #0]
 80197e4:	f000 fa0c 	bl	8019c00 <_close>
 80197e8:	1c43      	adds	r3, r0, #1
 80197ea:	d102      	bne.n	80197f2 <_close_r+0x1a>
 80197ec:	682b      	ldr	r3, [r5, #0]
 80197ee:	b103      	cbz	r3, 80197f2 <_close_r+0x1a>
 80197f0:	6023      	str	r3, [r4, #0]
 80197f2:	bd38      	pop	{r3, r4, r5, pc}
 80197f4:	20002f6c 	.word	0x20002f6c

080197f8 <__sflush_r>:
 80197f8:	898a      	ldrh	r2, [r1, #12]
 80197fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197fe:	4605      	mov	r5, r0
 8019800:	0710      	lsls	r0, r2, #28
 8019802:	460c      	mov	r4, r1
 8019804:	d458      	bmi.n	80198b8 <__sflush_r+0xc0>
 8019806:	684b      	ldr	r3, [r1, #4]
 8019808:	2b00      	cmp	r3, #0
 801980a:	dc05      	bgt.n	8019818 <__sflush_r+0x20>
 801980c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801980e:	2b00      	cmp	r3, #0
 8019810:	dc02      	bgt.n	8019818 <__sflush_r+0x20>
 8019812:	2000      	movs	r0, #0
 8019814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801981a:	2e00      	cmp	r6, #0
 801981c:	d0f9      	beq.n	8019812 <__sflush_r+0x1a>
 801981e:	2300      	movs	r3, #0
 8019820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019824:	682f      	ldr	r7, [r5, #0]
 8019826:	602b      	str	r3, [r5, #0]
 8019828:	d032      	beq.n	8019890 <__sflush_r+0x98>
 801982a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801982c:	89a3      	ldrh	r3, [r4, #12]
 801982e:	075a      	lsls	r2, r3, #29
 8019830:	d505      	bpl.n	801983e <__sflush_r+0x46>
 8019832:	6863      	ldr	r3, [r4, #4]
 8019834:	1ac0      	subs	r0, r0, r3
 8019836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019838:	b10b      	cbz	r3, 801983e <__sflush_r+0x46>
 801983a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801983c:	1ac0      	subs	r0, r0, r3
 801983e:	2300      	movs	r3, #0
 8019840:	4602      	mov	r2, r0
 8019842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019844:	6a21      	ldr	r1, [r4, #32]
 8019846:	4628      	mov	r0, r5
 8019848:	47b0      	blx	r6
 801984a:	1c43      	adds	r3, r0, #1
 801984c:	89a3      	ldrh	r3, [r4, #12]
 801984e:	d106      	bne.n	801985e <__sflush_r+0x66>
 8019850:	6829      	ldr	r1, [r5, #0]
 8019852:	291d      	cmp	r1, #29
 8019854:	d82c      	bhi.n	80198b0 <__sflush_r+0xb8>
 8019856:	4a2a      	ldr	r2, [pc, #168]	; (8019900 <__sflush_r+0x108>)
 8019858:	40ca      	lsrs	r2, r1
 801985a:	07d6      	lsls	r6, r2, #31
 801985c:	d528      	bpl.n	80198b0 <__sflush_r+0xb8>
 801985e:	2200      	movs	r2, #0
 8019860:	6062      	str	r2, [r4, #4]
 8019862:	04d9      	lsls	r1, r3, #19
 8019864:	6922      	ldr	r2, [r4, #16]
 8019866:	6022      	str	r2, [r4, #0]
 8019868:	d504      	bpl.n	8019874 <__sflush_r+0x7c>
 801986a:	1c42      	adds	r2, r0, #1
 801986c:	d101      	bne.n	8019872 <__sflush_r+0x7a>
 801986e:	682b      	ldr	r3, [r5, #0]
 8019870:	b903      	cbnz	r3, 8019874 <__sflush_r+0x7c>
 8019872:	6560      	str	r0, [r4, #84]	; 0x54
 8019874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019876:	602f      	str	r7, [r5, #0]
 8019878:	2900      	cmp	r1, #0
 801987a:	d0ca      	beq.n	8019812 <__sflush_r+0x1a>
 801987c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019880:	4299      	cmp	r1, r3
 8019882:	d002      	beq.n	801988a <__sflush_r+0x92>
 8019884:	4628      	mov	r0, r5
 8019886:	f7fd fad3 	bl	8016e30 <_free_r>
 801988a:	2000      	movs	r0, #0
 801988c:	6360      	str	r0, [r4, #52]	; 0x34
 801988e:	e7c1      	b.n	8019814 <__sflush_r+0x1c>
 8019890:	6a21      	ldr	r1, [r4, #32]
 8019892:	2301      	movs	r3, #1
 8019894:	4628      	mov	r0, r5
 8019896:	47b0      	blx	r6
 8019898:	1c41      	adds	r1, r0, #1
 801989a:	d1c7      	bne.n	801982c <__sflush_r+0x34>
 801989c:	682b      	ldr	r3, [r5, #0]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d0c4      	beq.n	801982c <__sflush_r+0x34>
 80198a2:	2b1d      	cmp	r3, #29
 80198a4:	d001      	beq.n	80198aa <__sflush_r+0xb2>
 80198a6:	2b16      	cmp	r3, #22
 80198a8:	d101      	bne.n	80198ae <__sflush_r+0xb6>
 80198aa:	602f      	str	r7, [r5, #0]
 80198ac:	e7b1      	b.n	8019812 <__sflush_r+0x1a>
 80198ae:	89a3      	ldrh	r3, [r4, #12]
 80198b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198b4:	81a3      	strh	r3, [r4, #12]
 80198b6:	e7ad      	b.n	8019814 <__sflush_r+0x1c>
 80198b8:	690f      	ldr	r7, [r1, #16]
 80198ba:	2f00      	cmp	r7, #0
 80198bc:	d0a9      	beq.n	8019812 <__sflush_r+0x1a>
 80198be:	0793      	lsls	r3, r2, #30
 80198c0:	680e      	ldr	r6, [r1, #0]
 80198c2:	bf08      	it	eq
 80198c4:	694b      	ldreq	r3, [r1, #20]
 80198c6:	600f      	str	r7, [r1, #0]
 80198c8:	bf18      	it	ne
 80198ca:	2300      	movne	r3, #0
 80198cc:	eba6 0807 	sub.w	r8, r6, r7
 80198d0:	608b      	str	r3, [r1, #8]
 80198d2:	f1b8 0f00 	cmp.w	r8, #0
 80198d6:	dd9c      	ble.n	8019812 <__sflush_r+0x1a>
 80198d8:	6a21      	ldr	r1, [r4, #32]
 80198da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80198dc:	4643      	mov	r3, r8
 80198de:	463a      	mov	r2, r7
 80198e0:	4628      	mov	r0, r5
 80198e2:	47b0      	blx	r6
 80198e4:	2800      	cmp	r0, #0
 80198e6:	dc06      	bgt.n	80198f6 <__sflush_r+0xfe>
 80198e8:	89a3      	ldrh	r3, [r4, #12]
 80198ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198ee:	81a3      	strh	r3, [r4, #12]
 80198f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80198f4:	e78e      	b.n	8019814 <__sflush_r+0x1c>
 80198f6:	4407      	add	r7, r0
 80198f8:	eba8 0800 	sub.w	r8, r8, r0
 80198fc:	e7e9      	b.n	80198d2 <__sflush_r+0xda>
 80198fe:	bf00      	nop
 8019900:	20400001 	.word	0x20400001

08019904 <_fflush_r>:
 8019904:	b538      	push	{r3, r4, r5, lr}
 8019906:	690b      	ldr	r3, [r1, #16]
 8019908:	4605      	mov	r5, r0
 801990a:	460c      	mov	r4, r1
 801990c:	b913      	cbnz	r3, 8019914 <_fflush_r+0x10>
 801990e:	2500      	movs	r5, #0
 8019910:	4628      	mov	r0, r5
 8019912:	bd38      	pop	{r3, r4, r5, pc}
 8019914:	b118      	cbz	r0, 801991e <_fflush_r+0x1a>
 8019916:	6983      	ldr	r3, [r0, #24]
 8019918:	b90b      	cbnz	r3, 801991e <_fflush_r+0x1a>
 801991a:	f7fe ff0b 	bl	8018734 <__sinit>
 801991e:	4b14      	ldr	r3, [pc, #80]	; (8019970 <_fflush_r+0x6c>)
 8019920:	429c      	cmp	r4, r3
 8019922:	d11b      	bne.n	801995c <_fflush_r+0x58>
 8019924:	686c      	ldr	r4, [r5, #4]
 8019926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d0ef      	beq.n	801990e <_fflush_r+0xa>
 801992e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019930:	07d0      	lsls	r0, r2, #31
 8019932:	d404      	bmi.n	801993e <_fflush_r+0x3a>
 8019934:	0599      	lsls	r1, r3, #22
 8019936:	d402      	bmi.n	801993e <_fflush_r+0x3a>
 8019938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801993a:	f7fe ffb0 	bl	801889e <__retarget_lock_acquire_recursive>
 801993e:	4628      	mov	r0, r5
 8019940:	4621      	mov	r1, r4
 8019942:	f7ff ff59 	bl	80197f8 <__sflush_r>
 8019946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019948:	07da      	lsls	r2, r3, #31
 801994a:	4605      	mov	r5, r0
 801994c:	d4e0      	bmi.n	8019910 <_fflush_r+0xc>
 801994e:	89a3      	ldrh	r3, [r4, #12]
 8019950:	059b      	lsls	r3, r3, #22
 8019952:	d4dd      	bmi.n	8019910 <_fflush_r+0xc>
 8019954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019956:	f7fe ffa3 	bl	80188a0 <__retarget_lock_release_recursive>
 801995a:	e7d9      	b.n	8019910 <_fflush_r+0xc>
 801995c:	4b05      	ldr	r3, [pc, #20]	; (8019974 <_fflush_r+0x70>)
 801995e:	429c      	cmp	r4, r3
 8019960:	d101      	bne.n	8019966 <_fflush_r+0x62>
 8019962:	68ac      	ldr	r4, [r5, #8]
 8019964:	e7df      	b.n	8019926 <_fflush_r+0x22>
 8019966:	4b04      	ldr	r3, [pc, #16]	; (8019978 <_fflush_r+0x74>)
 8019968:	429c      	cmp	r4, r3
 801996a:	bf08      	it	eq
 801996c:	68ec      	ldreq	r4, [r5, #12]
 801996e:	e7da      	b.n	8019926 <_fflush_r+0x22>
 8019970:	0801a394 	.word	0x0801a394
 8019974:	0801a3b4 	.word	0x0801a3b4
 8019978:	0801a374 	.word	0x0801a374

0801997c <_lseek_r>:
 801997c:	b538      	push	{r3, r4, r5, lr}
 801997e:	4d07      	ldr	r5, [pc, #28]	; (801999c <_lseek_r+0x20>)
 8019980:	4604      	mov	r4, r0
 8019982:	4608      	mov	r0, r1
 8019984:	4611      	mov	r1, r2
 8019986:	2200      	movs	r2, #0
 8019988:	602a      	str	r2, [r5, #0]
 801998a:	461a      	mov	r2, r3
 801998c:	f000 f960 	bl	8019c50 <_lseek>
 8019990:	1c43      	adds	r3, r0, #1
 8019992:	d102      	bne.n	801999a <_lseek_r+0x1e>
 8019994:	682b      	ldr	r3, [r5, #0]
 8019996:	b103      	cbz	r3, 801999a <_lseek_r+0x1e>
 8019998:	6023      	str	r3, [r4, #0]
 801999a:	bd38      	pop	{r3, r4, r5, pc}
 801999c:	20002f6c 	.word	0x20002f6c

080199a0 <__swhatbuf_r>:
 80199a0:	b570      	push	{r4, r5, r6, lr}
 80199a2:	460e      	mov	r6, r1
 80199a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199a8:	2900      	cmp	r1, #0
 80199aa:	b096      	sub	sp, #88	; 0x58
 80199ac:	4614      	mov	r4, r2
 80199ae:	461d      	mov	r5, r3
 80199b0:	da08      	bge.n	80199c4 <__swhatbuf_r+0x24>
 80199b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80199b6:	2200      	movs	r2, #0
 80199b8:	602a      	str	r2, [r5, #0]
 80199ba:	061a      	lsls	r2, r3, #24
 80199bc:	d410      	bmi.n	80199e0 <__swhatbuf_r+0x40>
 80199be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199c2:	e00e      	b.n	80199e2 <__swhatbuf_r+0x42>
 80199c4:	466a      	mov	r2, sp
 80199c6:	f000 f8f1 	bl	8019bac <_fstat_r>
 80199ca:	2800      	cmp	r0, #0
 80199cc:	dbf1      	blt.n	80199b2 <__swhatbuf_r+0x12>
 80199ce:	9a01      	ldr	r2, [sp, #4]
 80199d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80199d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80199d8:	425a      	negs	r2, r3
 80199da:	415a      	adcs	r2, r3
 80199dc:	602a      	str	r2, [r5, #0]
 80199de:	e7ee      	b.n	80199be <__swhatbuf_r+0x1e>
 80199e0:	2340      	movs	r3, #64	; 0x40
 80199e2:	2000      	movs	r0, #0
 80199e4:	6023      	str	r3, [r4, #0]
 80199e6:	b016      	add	sp, #88	; 0x58
 80199e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080199ec <__smakebuf_r>:
 80199ec:	898b      	ldrh	r3, [r1, #12]
 80199ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199f0:	079d      	lsls	r5, r3, #30
 80199f2:	4606      	mov	r6, r0
 80199f4:	460c      	mov	r4, r1
 80199f6:	d507      	bpl.n	8019a08 <__smakebuf_r+0x1c>
 80199f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80199fc:	6023      	str	r3, [r4, #0]
 80199fe:	6123      	str	r3, [r4, #16]
 8019a00:	2301      	movs	r3, #1
 8019a02:	6163      	str	r3, [r4, #20]
 8019a04:	b002      	add	sp, #8
 8019a06:	bd70      	pop	{r4, r5, r6, pc}
 8019a08:	ab01      	add	r3, sp, #4
 8019a0a:	466a      	mov	r2, sp
 8019a0c:	f7ff ffc8 	bl	80199a0 <__swhatbuf_r>
 8019a10:	9900      	ldr	r1, [sp, #0]
 8019a12:	4605      	mov	r5, r0
 8019a14:	4630      	mov	r0, r6
 8019a16:	f7fd fa77 	bl	8016f08 <_malloc_r>
 8019a1a:	b948      	cbnz	r0, 8019a30 <__smakebuf_r+0x44>
 8019a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a20:	059a      	lsls	r2, r3, #22
 8019a22:	d4ef      	bmi.n	8019a04 <__smakebuf_r+0x18>
 8019a24:	f023 0303 	bic.w	r3, r3, #3
 8019a28:	f043 0302 	orr.w	r3, r3, #2
 8019a2c:	81a3      	strh	r3, [r4, #12]
 8019a2e:	e7e3      	b.n	80199f8 <__smakebuf_r+0xc>
 8019a30:	4b0d      	ldr	r3, [pc, #52]	; (8019a68 <__smakebuf_r+0x7c>)
 8019a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a34:	89a3      	ldrh	r3, [r4, #12]
 8019a36:	6020      	str	r0, [r4, #0]
 8019a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a3c:	81a3      	strh	r3, [r4, #12]
 8019a3e:	9b00      	ldr	r3, [sp, #0]
 8019a40:	6163      	str	r3, [r4, #20]
 8019a42:	9b01      	ldr	r3, [sp, #4]
 8019a44:	6120      	str	r0, [r4, #16]
 8019a46:	b15b      	cbz	r3, 8019a60 <__smakebuf_r+0x74>
 8019a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a4c:	4630      	mov	r0, r6
 8019a4e:	f000 f8bf 	bl	8019bd0 <_isatty_r>
 8019a52:	b128      	cbz	r0, 8019a60 <__smakebuf_r+0x74>
 8019a54:	89a3      	ldrh	r3, [r4, #12]
 8019a56:	f023 0303 	bic.w	r3, r3, #3
 8019a5a:	f043 0301 	orr.w	r3, r3, #1
 8019a5e:	81a3      	strh	r3, [r4, #12]
 8019a60:	89a0      	ldrh	r0, [r4, #12]
 8019a62:	4305      	orrs	r5, r0
 8019a64:	81a5      	strh	r5, [r4, #12]
 8019a66:	e7cd      	b.n	8019a04 <__smakebuf_r+0x18>
 8019a68:	080186cd 	.word	0x080186cd

08019a6c <memmove>:
 8019a6c:	4288      	cmp	r0, r1
 8019a6e:	b510      	push	{r4, lr}
 8019a70:	eb01 0402 	add.w	r4, r1, r2
 8019a74:	d902      	bls.n	8019a7c <memmove+0x10>
 8019a76:	4284      	cmp	r4, r0
 8019a78:	4623      	mov	r3, r4
 8019a7a:	d807      	bhi.n	8019a8c <memmove+0x20>
 8019a7c:	1e43      	subs	r3, r0, #1
 8019a7e:	42a1      	cmp	r1, r4
 8019a80:	d008      	beq.n	8019a94 <memmove+0x28>
 8019a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a8a:	e7f8      	b.n	8019a7e <memmove+0x12>
 8019a8c:	4402      	add	r2, r0
 8019a8e:	4601      	mov	r1, r0
 8019a90:	428a      	cmp	r2, r1
 8019a92:	d100      	bne.n	8019a96 <memmove+0x2a>
 8019a94:	bd10      	pop	{r4, pc}
 8019a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a9e:	e7f7      	b.n	8019a90 <memmove+0x24>

08019aa0 <_realloc_r>:
 8019aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aa4:	4680      	mov	r8, r0
 8019aa6:	4614      	mov	r4, r2
 8019aa8:	460e      	mov	r6, r1
 8019aaa:	b921      	cbnz	r1, 8019ab6 <_realloc_r+0x16>
 8019aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ab0:	4611      	mov	r1, r2
 8019ab2:	f7fd ba29 	b.w	8016f08 <_malloc_r>
 8019ab6:	b92a      	cbnz	r2, 8019ac4 <_realloc_r+0x24>
 8019ab8:	f7fd f9ba 	bl	8016e30 <_free_r>
 8019abc:	4625      	mov	r5, r4
 8019abe:	4628      	mov	r0, r5
 8019ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ac4:	f000 f894 	bl	8019bf0 <_malloc_usable_size_r>
 8019ac8:	4284      	cmp	r4, r0
 8019aca:	4607      	mov	r7, r0
 8019acc:	d802      	bhi.n	8019ad4 <_realloc_r+0x34>
 8019ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019ad2:	d812      	bhi.n	8019afa <_realloc_r+0x5a>
 8019ad4:	4621      	mov	r1, r4
 8019ad6:	4640      	mov	r0, r8
 8019ad8:	f7fd fa16 	bl	8016f08 <_malloc_r>
 8019adc:	4605      	mov	r5, r0
 8019ade:	2800      	cmp	r0, #0
 8019ae0:	d0ed      	beq.n	8019abe <_realloc_r+0x1e>
 8019ae2:	42bc      	cmp	r4, r7
 8019ae4:	4622      	mov	r2, r4
 8019ae6:	4631      	mov	r1, r6
 8019ae8:	bf28      	it	cs
 8019aea:	463a      	movcs	r2, r7
 8019aec:	f7fd f98a 	bl	8016e04 <memcpy>
 8019af0:	4631      	mov	r1, r6
 8019af2:	4640      	mov	r0, r8
 8019af4:	f7fd f99c 	bl	8016e30 <_free_r>
 8019af8:	e7e1      	b.n	8019abe <_realloc_r+0x1e>
 8019afa:	4635      	mov	r5, r6
 8019afc:	e7df      	b.n	8019abe <_realloc_r+0x1e>
	...

08019b00 <_read_r>:
 8019b00:	b538      	push	{r3, r4, r5, lr}
 8019b02:	4d07      	ldr	r5, [pc, #28]	; (8019b20 <_read_r+0x20>)
 8019b04:	4604      	mov	r4, r0
 8019b06:	4608      	mov	r0, r1
 8019b08:	4611      	mov	r1, r2
 8019b0a:	2200      	movs	r2, #0
 8019b0c:	602a      	str	r2, [r5, #0]
 8019b0e:	461a      	mov	r2, r3
 8019b10:	f000 f8a6 	bl	8019c60 <_read>
 8019b14:	1c43      	adds	r3, r0, #1
 8019b16:	d102      	bne.n	8019b1e <_read_r+0x1e>
 8019b18:	682b      	ldr	r3, [r5, #0]
 8019b1a:	b103      	cbz	r3, 8019b1e <_read_r+0x1e>
 8019b1c:	6023      	str	r3, [r4, #0]
 8019b1e:	bd38      	pop	{r3, r4, r5, pc}
 8019b20:	20002f6c 	.word	0x20002f6c

08019b24 <_raise_r>:
 8019b24:	291f      	cmp	r1, #31
 8019b26:	b538      	push	{r3, r4, r5, lr}
 8019b28:	4604      	mov	r4, r0
 8019b2a:	460d      	mov	r5, r1
 8019b2c:	d904      	bls.n	8019b38 <_raise_r+0x14>
 8019b2e:	2316      	movs	r3, #22
 8019b30:	6003      	str	r3, [r0, #0]
 8019b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b36:	bd38      	pop	{r3, r4, r5, pc}
 8019b38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019b3a:	b112      	cbz	r2, 8019b42 <_raise_r+0x1e>
 8019b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b40:	b94b      	cbnz	r3, 8019b56 <_raise_r+0x32>
 8019b42:	4620      	mov	r0, r4
 8019b44:	f000 f830 	bl	8019ba8 <_getpid_r>
 8019b48:	462a      	mov	r2, r5
 8019b4a:	4601      	mov	r1, r0
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b52:	f000 b817 	b.w	8019b84 <_kill_r>
 8019b56:	2b01      	cmp	r3, #1
 8019b58:	d00a      	beq.n	8019b70 <_raise_r+0x4c>
 8019b5a:	1c59      	adds	r1, r3, #1
 8019b5c:	d103      	bne.n	8019b66 <_raise_r+0x42>
 8019b5e:	2316      	movs	r3, #22
 8019b60:	6003      	str	r3, [r0, #0]
 8019b62:	2001      	movs	r0, #1
 8019b64:	e7e7      	b.n	8019b36 <_raise_r+0x12>
 8019b66:	2400      	movs	r4, #0
 8019b68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019b6c:	4628      	mov	r0, r5
 8019b6e:	4798      	blx	r3
 8019b70:	2000      	movs	r0, #0
 8019b72:	e7e0      	b.n	8019b36 <_raise_r+0x12>

08019b74 <raise>:
 8019b74:	4b02      	ldr	r3, [pc, #8]	; (8019b80 <raise+0xc>)
 8019b76:	4601      	mov	r1, r0
 8019b78:	6818      	ldr	r0, [r3, #0]
 8019b7a:	f7ff bfd3 	b.w	8019b24 <_raise_r>
 8019b7e:	bf00      	nop
 8019b80:	20000184 	.word	0x20000184

08019b84 <_kill_r>:
 8019b84:	b538      	push	{r3, r4, r5, lr}
 8019b86:	4d07      	ldr	r5, [pc, #28]	; (8019ba4 <_kill_r+0x20>)
 8019b88:	2300      	movs	r3, #0
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	4608      	mov	r0, r1
 8019b8e:	4611      	mov	r1, r2
 8019b90:	602b      	str	r3, [r5, #0]
 8019b92:	f000 f855 	bl	8019c40 <_kill>
 8019b96:	1c43      	adds	r3, r0, #1
 8019b98:	d102      	bne.n	8019ba0 <_kill_r+0x1c>
 8019b9a:	682b      	ldr	r3, [r5, #0]
 8019b9c:	b103      	cbz	r3, 8019ba0 <_kill_r+0x1c>
 8019b9e:	6023      	str	r3, [r4, #0]
 8019ba0:	bd38      	pop	{r3, r4, r5, pc}
 8019ba2:	bf00      	nop
 8019ba4:	20002f6c 	.word	0x20002f6c

08019ba8 <_getpid_r>:
 8019ba8:	f000 b83a 	b.w	8019c20 <_getpid>

08019bac <_fstat_r>:
 8019bac:	b538      	push	{r3, r4, r5, lr}
 8019bae:	4d07      	ldr	r5, [pc, #28]	; (8019bcc <_fstat_r+0x20>)
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	4608      	mov	r0, r1
 8019bb6:	4611      	mov	r1, r2
 8019bb8:	602b      	str	r3, [r5, #0]
 8019bba:	f000 f829 	bl	8019c10 <_fstat>
 8019bbe:	1c43      	adds	r3, r0, #1
 8019bc0:	d102      	bne.n	8019bc8 <_fstat_r+0x1c>
 8019bc2:	682b      	ldr	r3, [r5, #0]
 8019bc4:	b103      	cbz	r3, 8019bc8 <_fstat_r+0x1c>
 8019bc6:	6023      	str	r3, [r4, #0]
 8019bc8:	bd38      	pop	{r3, r4, r5, pc}
 8019bca:	bf00      	nop
 8019bcc:	20002f6c 	.word	0x20002f6c

08019bd0 <_isatty_r>:
 8019bd0:	b538      	push	{r3, r4, r5, lr}
 8019bd2:	4d06      	ldr	r5, [pc, #24]	; (8019bec <_isatty_r+0x1c>)
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	4604      	mov	r4, r0
 8019bd8:	4608      	mov	r0, r1
 8019bda:	602b      	str	r3, [r5, #0]
 8019bdc:	f000 f828 	bl	8019c30 <_isatty>
 8019be0:	1c43      	adds	r3, r0, #1
 8019be2:	d102      	bne.n	8019bea <_isatty_r+0x1a>
 8019be4:	682b      	ldr	r3, [r5, #0]
 8019be6:	b103      	cbz	r3, 8019bea <_isatty_r+0x1a>
 8019be8:	6023      	str	r3, [r4, #0]
 8019bea:	bd38      	pop	{r3, r4, r5, pc}
 8019bec:	20002f6c 	.word	0x20002f6c

08019bf0 <_malloc_usable_size_r>:
 8019bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bf4:	1f18      	subs	r0, r3, #4
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	bfbc      	itt	lt
 8019bfa:	580b      	ldrlt	r3, [r1, r0]
 8019bfc:	18c0      	addlt	r0, r0, r3
 8019bfe:	4770      	bx	lr

08019c00 <_close>:
 8019c00:	4b02      	ldr	r3, [pc, #8]	; (8019c0c <_close+0xc>)
 8019c02:	2258      	movs	r2, #88	; 0x58
 8019c04:	601a      	str	r2, [r3, #0]
 8019c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c0a:	4770      	bx	lr
 8019c0c:	20002f6c 	.word	0x20002f6c

08019c10 <_fstat>:
 8019c10:	4b02      	ldr	r3, [pc, #8]	; (8019c1c <_fstat+0xc>)
 8019c12:	2258      	movs	r2, #88	; 0x58
 8019c14:	601a      	str	r2, [r3, #0]
 8019c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c1a:	4770      	bx	lr
 8019c1c:	20002f6c 	.word	0x20002f6c

08019c20 <_getpid>:
 8019c20:	4b02      	ldr	r3, [pc, #8]	; (8019c2c <_getpid+0xc>)
 8019c22:	2258      	movs	r2, #88	; 0x58
 8019c24:	601a      	str	r2, [r3, #0]
 8019c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c2a:	4770      	bx	lr
 8019c2c:	20002f6c 	.word	0x20002f6c

08019c30 <_isatty>:
 8019c30:	4b02      	ldr	r3, [pc, #8]	; (8019c3c <_isatty+0xc>)
 8019c32:	2258      	movs	r2, #88	; 0x58
 8019c34:	601a      	str	r2, [r3, #0]
 8019c36:	2000      	movs	r0, #0
 8019c38:	4770      	bx	lr
 8019c3a:	bf00      	nop
 8019c3c:	20002f6c 	.word	0x20002f6c

08019c40 <_kill>:
 8019c40:	4b02      	ldr	r3, [pc, #8]	; (8019c4c <_kill+0xc>)
 8019c42:	2258      	movs	r2, #88	; 0x58
 8019c44:	601a      	str	r2, [r3, #0]
 8019c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c4a:	4770      	bx	lr
 8019c4c:	20002f6c 	.word	0x20002f6c

08019c50 <_lseek>:
 8019c50:	4b02      	ldr	r3, [pc, #8]	; (8019c5c <_lseek+0xc>)
 8019c52:	2258      	movs	r2, #88	; 0x58
 8019c54:	601a      	str	r2, [r3, #0]
 8019c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c5a:	4770      	bx	lr
 8019c5c:	20002f6c 	.word	0x20002f6c

08019c60 <_read>:
 8019c60:	4b02      	ldr	r3, [pc, #8]	; (8019c6c <_read+0xc>)
 8019c62:	2258      	movs	r2, #88	; 0x58
 8019c64:	601a      	str	r2, [r3, #0]
 8019c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c6a:	4770      	bx	lr
 8019c6c:	20002f6c 	.word	0x20002f6c

08019c70 <_sbrk>:
 8019c70:	4a04      	ldr	r2, [pc, #16]	; (8019c84 <_sbrk+0x14>)
 8019c72:	6811      	ldr	r1, [r2, #0]
 8019c74:	4603      	mov	r3, r0
 8019c76:	b909      	cbnz	r1, 8019c7c <_sbrk+0xc>
 8019c78:	4903      	ldr	r1, [pc, #12]	; (8019c88 <_sbrk+0x18>)
 8019c7a:	6011      	str	r1, [r2, #0]
 8019c7c:	6810      	ldr	r0, [r2, #0]
 8019c7e:	4403      	add	r3, r0
 8019c80:	6013      	str	r3, [r2, #0]
 8019c82:	4770      	bx	lr
 8019c84:	20002f70 	.word	0x20002f70
 8019c88:	20002f78 	.word	0x20002f78

08019c8c <_write>:
 8019c8c:	4b02      	ldr	r3, [pc, #8]	; (8019c98 <_write+0xc>)
 8019c8e:	2258      	movs	r2, #88	; 0x58
 8019c90:	601a      	str	r2, [r3, #0]
 8019c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c96:	4770      	bx	lr
 8019c98:	20002f6c 	.word	0x20002f6c

08019c9c <_exit>:
 8019c9c:	e7fe      	b.n	8019c9c <_exit>
	...

08019ca0 <_init>:
 8019ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ca2:	bf00      	nop
 8019ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ca6:	bc08      	pop	{r3}
 8019ca8:	469e      	mov	lr, r3
 8019caa:	4770      	bx	lr

08019cac <_fini>:
 8019cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cae:	bf00      	nop
 8019cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cb2:	bc08      	pop	{r3}
 8019cb4:	469e      	mov	lr, r3
 8019cb6:	4770      	bx	lr
