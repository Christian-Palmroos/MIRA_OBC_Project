
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5f0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d878  0800d878  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d878  0800d878  0001d878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d880  0800d880  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d880  0800d880  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d884  0800d884  0001d884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f2c  20000190  0800da18  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  0800da18  000220bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027dfe  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe6  00000000  00000000  00047fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  0004cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e68  00000000  00000000  0004f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000319d2  00000000  00000000  00050e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a3b8  00000000  00000000  00082862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119d6c  00000000  00000000  000acc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c6986  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089a4  00000000  00000000  001c69d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d794 	.word	0x0800d794

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800d794 	.word	0x0800d794

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fe49 	bl	800119a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f84e 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa98 	bl	8000a40 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000510:	f000 f8a8 	bl	8000664 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000514:	f000 f8e6 	bl	80006e4 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000518:	f000 f924 	bl	8000764 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800051c:	f000 f944 	bl	80007a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000520:	f000 f9f6 	bl	8000910 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fa40 	bl	80009a8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000528:	f00a fc60 	bl	800adec <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800052c:	f00c fae2 	bl	800caf4 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000530:	f000 f978 	bl	8000824 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000534:	f000 f88a 	bl	800064c <MX_NVIC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000538:	2108      	movs	r1, #8
 800053a:	481a      	ldr	r0, [pc, #104]	; (80005a4 <main+0xa4>)
 800053c:	f001 f99a 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f000 fe9e 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000548:	2110      	movs	r1, #16
 800054a:	4816      	ldr	r0, [pc, #88]	; (80005a4 <main+0xa4>)
 800054c:	f001 f992 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000554:	f000 fe96 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000558:	2120      	movs	r1, #32
 800055a:	4812      	ldr	r0, [pc, #72]	; (80005a4 <main+0xa4>)
 800055c:	f001 f98a 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 fe8e 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	480e      	ldr	r0, [pc, #56]	; (80005a4 <main+0xa4>)
 800056c:	f001 f982 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000574:	f000 fe86 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000578:	2108      	movs	r1, #8
 800057a:	480a      	ldr	r0, [pc, #40]	; (80005a4 <main+0xa4>)
 800057c:	f001 f97a 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000580:	2110      	movs	r1, #16
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <main+0xa4>)
 8000584:	f001 f976 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000588:	2120      	movs	r1, #32
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0xa4>)
 800058c:	f001 f972 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <main+0xa4>)
 8000594:	f001 f96e 	bl	8001874 <HAL_GPIO_TogglePin>
	  HAL_Delay (2000);
 8000598:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800059c:	f000 fe72 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80005a0:	e7ca      	b.n	8000538 <main+0x38>
 80005a2:	bf00      	nop
 80005a4:	48000c00 	.word	0x48000c00

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00d f8e4 	bl	800d784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f002 fc72 	bl	8002eb4 <HAL_PWREx_ControlVoltageScaling>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005d6:	f000 fb11 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005da:	2321      	movs	r3, #33	; 0x21
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ec:	2303      	movs	r3, #3
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005f4:	231e      	movs	r3, #30
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 80005f8:	2314      	movs	r3, #20
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fd07 	bl	800301c <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000614:	f000 faf2 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2303      	movs	r3, #3
 800061e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	2105      	movs	r1, #5
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f90d 	bl	8003850 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800063c:	f000 fade 	bl	8000bfc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000640:	f003 fb04 	bl	8003c4c <HAL_RCC_EnableCSS>
}
 8000644:	bf00      	nop
 8000646:	3758      	adds	r7, #88	; 0x58
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	201a      	movs	r0, #26
 8000656:	f000 ff14 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800065a:	201a      	movs	r0, #26
 800065c:	f000 ff2d 	bl	80014ba <HAL_NVIC_EnableIRQ>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	f001 f902 	bl	80018a8 <HAL_I2C_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 faa7 	bl	8000bfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006b2:	f001 f988 	bl	80019c6 <HAL_I2CEx_ConfigAnalogFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 fa9e 	bl	8000bfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006c4:	f001 f9ca 	bl	8001a5c <HAL_I2CEx_ConfigDigitalFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 fa95 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001ac 	.word	0x200001ac
 80006dc:	40005400 	.word	0x40005400
 80006e0:	307075b1 	.word	0x307075b1

080006e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_I2C2_Init+0x74>)
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <MX_I2C2_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_I2C2_Init+0x74>)
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <MX_I2C2_Init+0x7c>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_I2C2_Init+0x74>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_I2C2_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_I2C2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_I2C2_Init+0x74>)
 8000720:	f001 f8c2 	bl	80018a8 <HAL_I2C_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800072a:	f000 fa67 	bl	8000bfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <MX_I2C2_Init+0x74>)
 8000732:	f001 f948 	bl	80019c6 <HAL_I2CEx_ConfigAnalogFilter>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800073c:	f000 fa5e 	bl	8000bfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_I2C2_Init+0x74>)
 8000744:	f001 f98a 	bl	8001a5c <HAL_I2CEx_ConfigDigitalFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 fa55 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000200 	.word	0x20000200
 800075c:	40005800 	.word	0x40005800
 8000760:	307075b1 	.word	0x307075b1

08000764 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_SDMMC1_SD_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <MX_SDMMC1_SD_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SDMMC1_SD_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_SDMMC1_SD_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SDMMC1_SD_Init+0x3c>)
 800077c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000780:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_SDMMC1_SD_Init+0x3c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MX_SDMMC1_SD_Init+0x3c>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <MX_SDMMC1_SD_Init+0x3c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000254 	.word	0x20000254
 80007a4:	50062400 	.word	0x50062400

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_SPI1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_SPI1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_SPI1_Init+0x74>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI1_Init+0x74>)
 80007c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI1_Init+0x74>)
 80007d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI1_Init+0x74>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI1_Init+0x74>)
 8000802:	2208      	movs	r2, #8
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_SPI1_Init+0x74>)
 8000808:	f006 fc97 	bl	800713a <HAL_SPI_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f9f3 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002d4 	.word	0x200002d4
 8000820:	40013000 	.word	0x40013000

08000824 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b092      	sub	sp, #72	; 0x48
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	222c      	movs	r2, #44	; 0x2c
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f00c ff9d 	bl	800d784 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_TIM17_Init+0xe4>)
 800084c:	4a2f      	ldr	r2, [pc, #188]	; (800090c <MX_TIM17_Init+0xe8>)
 800084e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_TIM17_Init+0xe4>)
 8000852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000856:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <MX_TIM17_Init+0xe4>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_TIM17_Init+0xe4>)
 8000860:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000864:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_TIM17_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_TIM17_Init+0xe4>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_TIM17_Init+0xe4>)
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000878:	4823      	ldr	r0, [pc, #140]	; (8000908 <MX_TIM17_Init+0xe4>)
 800087a:	f006 fd01 	bl	8007280 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000884:	f000 f9ba 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000888:	481f      	ldr	r0, [pc, #124]	; (8000908 <MX_TIM17_Init+0xe4>)
 800088a:	f006 fd50 	bl	800732e <HAL_TIM_OC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000894:	f000 f9b2 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	2300      	movs	r3, #0
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_TIM17_Init+0xe4>)
 80008be:	f006 feb7 	bl	8007630 <HAL_TIM_OC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80008c8:	f000 f998 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_TIM17_Init+0xe4>)
 80008f0:	f007 faba 	bl	8007e68 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80008fa:	f000 f97f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3748      	adds	r7, #72	; 0x48
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000338 	.word	0x20000338
 800090c:	40014800 	.word	0x40014800

08000910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_USART1_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800095a:	f007 fb21 	bl	8007fa0 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f94a 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800096c:	f008 f852 	bl	8008a14 <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 f941 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800097e:	f008 f887 	bl	8008a90 <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 f938 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_USART1_UART_Init+0x90>)
 800098e:	f008 f808 	bl	80089a2 <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 f930 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000384 	.word	0x20000384
 80009a4:	40013800 	.word	0x40013800

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_USART2_UART_Init+0x94>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 80009f2:	f007 fad5 	bl	8007fa0 <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009fc:	f000 f8fe 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 8000a04:	f008 f806 	bl	8008a14 <HAL_UARTEx_SetTxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0e:	f000 f8f5 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 8000a16:	f008 f83b 	bl	8008a90 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 f8ec 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_USART2_UART_Init+0x90>)
 8000a26:	f007 ffbc 	bl	80089a2 <HAL_UARTEx_DisableFifoMode>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 f8e4 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000414 	.word	0x20000414
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a63      	ldr	r2, [pc, #396]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b61      	ldr	r3, [pc, #388]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b5e      	ldr	r3, [pc, #376]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a5d      	ldr	r2, [pc, #372]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b5b      	ldr	r3, [pc, #364]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	4b58      	ldr	r3, [pc, #352]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a57      	ldr	r2, [pc, #348]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b55      	ldr	r3, [pc, #340]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b52      	ldr	r3, [pc, #328]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a51      	ldr	r2, [pc, #324]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a4b      	ldr	r2, [pc, #300]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4b46      	ldr	r3, [pc, #280]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <MX_GPIO_Init+0x1a8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f641 013c 	movw	r1, #6204	; 0x183c
 8000aec:	483f      	ldr	r0, [pc, #252]	; (8000bec <MX_GPIO_Init+0x1ac>)
 8000aee:	f000 fea9 	bl	8001844 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2130      	movs	r1, #48	; 0x30
 8000af6:	483e      	ldr	r0, [pc, #248]	; (8000bf0 <MX_GPIO_Init+0x1b0>)
 8000af8:	f000 fea4 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2178      	movs	r1, #120	; 0x78
 8000b00:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <MX_GPIO_Init+0x1b4>)
 8000b02:	f000 fe9f 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000b06:	f641 033c 	movw	r3, #6204	; 0x183c
 8000b0a:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4833      	ldr	r0, [pc, #204]	; (8000bec <MX_GPIO_Init+0x1ac>)
 8000b20:	f000 fce6 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	482d      	ldr	r0, [pc, #180]	; (8000bf0 <MX_GPIO_Init+0x1b0>)
 8000b3a:	f000 fcd9 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fccc 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000b58:	2330      	movs	r3, #48	; 0x30
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <MX_GPIO_Init+0x1b0>)
 8000b70:	f000 fcbe 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4818      	ldr	r0, [pc, #96]	; (8000bec <MX_GPIO_Init+0x1ac>)
 8000b8a:	f000 fcb1 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 fca3 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000baa:	2378      	movs	r3, #120	; 0x78
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <MX_GPIO_Init+0x1b4>)
 8000bc2:	f000 fc95 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000bc6:	2320      	movs	r3, #32
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_GPIO_Init+0x1b8>)
 8000bda:	f000 fc89 	bl	80014f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3730      	adds	r7, #48	; 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48001000 	.word	0x48001000
 8000bf0:	48000800 	.word	0x48000800
 8000bf4:	48000c00 	.word	0x48000c00
 8000bf8:	48000400 	.word	0x48000400

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x44>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6593      	str	r3, [r2, #88]	; 0x58
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x44>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b0      	sub	sp, #192	; 0xc0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	2294      	movs	r2, #148	; 0x94
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f00c fd87 	bl	800d784 <memset>
  if(hi2c->Instance==I2C1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a42      	ldr	r2, [pc, #264]	; (8000d84 <HAL_I2C_MspInit+0x134>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13b      	bne.n	8000cf8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 f8c9 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c98:	f7ff ffb0 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a39      	ldr	r2, [pc, #228]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb4:	23c0      	movs	r3, #192	; 0xc0
 8000cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482c      	ldr	r0, [pc, #176]	; (8000d8c <HAL_I2C_MspInit+0x13c>)
 8000cda:	f000 fc09 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a29      	ldr	r2, [pc, #164]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cf6:	e040      	b.n	8000d7a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <HAL_I2C_MspInit+0x140>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d13b      	bne.n	8000d7a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 f888 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000d1a:	f7ff ff6f 	bl	8000bfc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3e:	2312      	movs	r3, #18
 8000d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d50:	2304      	movs	r3, #4
 8000d52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <HAL_I2C_MspInit+0x13c>)
 8000d5e:	f000 fbc7 	bl	80014f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_I2C_MspInit+0x138>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
}
 8000d7a:	bf00      	nop
 8000d7c:	37c0      	adds	r7, #192	; 0xc0
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	40005800 	.word	0x40005800

08000d94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b0      	sub	sp, #192	; 0xc0
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	2294      	movs	r2, #148	; 0x94
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00c fce5 	bl	800d784 <memset>
  if(hsd->Instance==SDMMC1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <HAL_SD_MspInit+0xf8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d15f      	bne.n	8000e84 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000dc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000dca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 f824 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000de2:	f7ff ff0b 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_SD_MspInit+0xfc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e2e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e52:	4619      	mov	r1, r3
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <HAL_SD_MspInit+0x100>)
 8000e56:	f000 fb4b 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e72:	230c      	movs	r3, #12
 8000e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HAL_SD_MspInit+0x104>)
 8000e80:	f000 fb36 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	37c0      	adds	r7, #192	; 0xc0
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	50062400 	.word	0x50062400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000c00 	.word	0x48000c00

08000e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x7c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d128      	bne.n	8000f10 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_SPI_MspInit+0x80>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eee:	23f0      	movs	r3, #240	; 0xf0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efe:	2305      	movs	r3, #5
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f000 faf0 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40013000 	.word	0x40013000
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_TIM_Base_MspInit+0x38>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10b      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_TIM_Base_MspInit+0x3c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_TIM_Base_MspInit+0x3c>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_TIM_Base_MspInit+0x3c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40014800 	.word	0x40014800
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0b0      	sub	sp, #192	; 0xc0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	2294      	movs	r2, #148	; 0x94
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00c fbff 	bl	800d784 <memset>
  if(huart->Instance==USART1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a43      	ldr	r2, [pc, #268]	; (8001098 <HAL_UART_MspInit+0x138>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13d      	bne.n	800100c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f94:	2300      	movs	r3, #0
 8000f96:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 ff41 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fa8:	f7ff fe28 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <HAL_UART_MspInit+0x13c>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	4a3a      	ldr	r2, [pc, #232]	; (800109c <HAL_UART_MspInit+0x13c>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_UART_MspInit+0x13c>)
 8000fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <HAL_UART_MspInit+0x13c>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	4a34      	ldr	r2, [pc, #208]	; (800109c <HAL_UART_MspInit+0x13c>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <HAL_UART_MspInit+0x13c>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000fdc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f000 fa73 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	e040      	b.n	800108e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <HAL_UART_MspInit+0x140>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d13b      	bne.n	800108e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800101a:	2300      	movs	r3, #0
 800101c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fefe 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800102e:	f7ff fde5 	bl	8000bfc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_UART_MspInit+0x13c>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_UART_MspInit+0x13c>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_UART_MspInit+0x13c>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_UART_MspInit+0x13c>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <HAL_UART_MspInit+0x13c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_UART_MspInit+0x13c>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001062:	230c      	movs	r3, #12
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107a:	2307      	movs	r3, #7
 800107c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 fa31 	bl	80014f0 <HAL_GPIO_Init>
}
 800108e:	bf00      	nop
 8001090:	37c0      	adds	r7, #192	; 0xc0
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40013800 	.word	0x40013800
 800109c:	40021000 	.word	0x40021000
 80010a0:	40004400 	.word	0x40004400

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80010a8:	f002 fde0 	bl	8003c6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <NMI_Handler+0x8>

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f8a6 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001102:	f006 f975 	bl	80073f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000338 	.word	0x20000338

08001110 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <OTG_FS_IRQHandler+0x10>)
 8001116:	f000 fe40 	bl	8001d9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20001990 	.word	0x20001990

08001124 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <SystemInit+0x20>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <SystemInit+0x20>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800114c:	f7ff ffea 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001176:	f00c fae1 	bl	800d73c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117a:	f7ff f9c1 	bl	8000500 <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001180:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800118c:	0800d888 	.word	0x0800d888
  ldr r2, =_sbss
 8001190:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001194:	200020bc 	.word	0x200020bc

08001198 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_IRQHandler>

0800119a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f961 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f80e 	bl	80011cc <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e001      	b.n	80011c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011bc:	f7ff fd24 	bl	8000c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_InitTick+0x6c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d023      	beq.n	8001228 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_InitTick+0x70>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_InitTick+0x6c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f96d 	bl	80014d6 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10f      	bne.n	8001222 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d809      	bhi.n	800121c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001210:	f000 f937 	bl	8001482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_InitTick+0x74>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e007      	b.n	800122c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e004      	b.n	800122c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e001      	b.n	800122c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	200004a4 	.word	0x200004a4

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200004a4 	.word	0x200004a4

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff3e 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff31 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	e166      	b.n	80017ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8158 	beq.w	80017c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d005      	beq.n	8001530 <HAL_GPIO_Init+0x40>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d130      	bne.n	8001592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001566:	2201      	movs	r2, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 0201 	and.w	r2, r3, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b03      	cmp	r3, #3
 800159c:	d017      	beq.n	80015ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d123      	bne.n	8001622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0203 	and.w	r2, r3, #3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80b2 	beq.w	80017c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001664:	4b61      	ldr	r3, [pc, #388]	; (80017ec <HAL_GPIO_Init+0x2fc>)
 8001666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001668:	4a60      	ldr	r2, [pc, #384]	; (80017ec <HAL_GPIO_Init+0x2fc>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6613      	str	r3, [r2, #96]	; 0x60
 8001670:	4b5e      	ldr	r3, [pc, #376]	; (80017ec <HAL_GPIO_Init+0x2fc>)
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800167c:	4a5c      	ldr	r2, [pc, #368]	; (80017f0 <HAL_GPIO_Init+0x300>)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016a6:	d02b      	beq.n	8001700 <HAL_GPIO_Init+0x210>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_GPIO_Init+0x304>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d025      	beq.n	80016fc <HAL_GPIO_Init+0x20c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a51      	ldr	r2, [pc, #324]	; (80017f8 <HAL_GPIO_Init+0x308>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d01f      	beq.n	80016f8 <HAL_GPIO_Init+0x208>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a50      	ldr	r2, [pc, #320]	; (80017fc <HAL_GPIO_Init+0x30c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d019      	beq.n	80016f4 <HAL_GPIO_Init+0x204>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4f      	ldr	r2, [pc, #316]	; (8001800 <HAL_GPIO_Init+0x310>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d013      	beq.n	80016f0 <HAL_GPIO_Init+0x200>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <HAL_GPIO_Init+0x314>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00d      	beq.n	80016ec <HAL_GPIO_Init+0x1fc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x318>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0x1f8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_GPIO_Init+0x31c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_GPIO_Init+0x1f4>
 80016e0:	2307      	movs	r3, #7
 80016e2:	e00e      	b.n	8001702 <HAL_GPIO_Init+0x212>
 80016e4:	2308      	movs	r3, #8
 80016e6:	e00c      	b.n	8001702 <HAL_GPIO_Init+0x212>
 80016e8:	2306      	movs	r3, #6
 80016ea:	e00a      	b.n	8001702 <HAL_GPIO_Init+0x212>
 80016ec:	2305      	movs	r3, #5
 80016ee:	e008      	b.n	8001702 <HAL_GPIO_Init+0x212>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x212>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x212>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x212>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x212>
 8001700:	2300      	movs	r3, #0
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001712:	4937      	ldr	r1, [pc, #220]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001720:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_GPIO_Init+0x320>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_GPIO_Init+0x320>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_GPIO_Init+0x320>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800176e:	4a28      	ldr	r2, [pc, #160]	; (8001810 <HAL_GPIO_Init+0x320>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_GPIO_Init+0x320>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_GPIO_Init+0x320>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_GPIO_Init+0x320>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <HAL_GPIO_Init+0x320>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f ae91 	bne.w	8001500 <HAL_GPIO_Init+0x10>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	48000400 	.word	0x48000400
 80017f8:	48000800 	.word	0x48000800
 80017fc:	48000c00 	.word	0x48000c00
 8001800:	48001000 	.word	0x48001000
 8001804:	48001400 	.word	0x48001400
 8001808:	48001800 	.word	0x48001800
 800180c:	48001c00 	.word	0x48001c00
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001860:	e002      	b.n	8001868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	041a      	lsls	r2, r3, #16
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43d9      	mvns	r1, r3
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	400b      	ands	r3, r1
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e081      	b.n	80019be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff f9be 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2224      	movs	r2, #36	; 0x24
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	e006      	b.n	8001930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800192e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d104      	bne.n	8001942 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69d9      	ldr	r1, [r3, #28]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d138      	bne.n	8001a4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e032      	b.n	8001a50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2224      	movs	r2, #36	; 0x24
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d139      	bne.n	8001ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e033      	b.n	8001ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2224      	movs	r2, #36	; 0x24
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b08f      	sub	sp, #60	; 0x3c
 8001af8:	af0a      	add	r7, sp, #40	; 0x28
 8001afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e116      	b.n	8001d34 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f00b f9d9 	bl	800ced8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f007 feee 	bl	8009926 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	687e      	ldr	r6, [r7, #4]
 8001b52:	466d      	mov	r5, sp
 8001b54:	f106 0410 	add.w	r4, r6, #16
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b68:	1d33      	adds	r3, r6, #4
 8001b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6c:	6838      	ldr	r0, [r7, #0]
 8001b6e:	f007 fe01 	bl	8009774 <USB_CoreInit>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0d7      	b.n	8001d34 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f007 fedc 	bl	8009948 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e04a      	b.n	8001c2c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	333d      	adds	r3, #61	; 0x3d
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	333c      	adds	r3, #60	; 0x3c
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	b298      	uxth	r0, r3
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3344      	adds	r3, #68	; 0x44
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	3340      	adds	r3, #64	; 0x40
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3348      	adds	r3, #72	; 0x48
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	334c      	adds	r3, #76	; 0x4c
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	3354      	adds	r3, #84	; 0x54
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3af      	bcc.n	8001b96 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	e044      	b.n	8001cc6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3b5      	bcc.n	8001c3c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	687e      	ldr	r6, [r7, #4]
 8001cd8:	466d      	mov	r5, sp
 8001cda:	f106 0410 	add.w	r4, r6, #16
 8001cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cee:	1d33      	adds	r3, r6, #4
 8001cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	f007 fe74 	bl	80099e0 <USB_DevInit>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e014      	b.n	8001d34 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f001 f882 	bl	8002e2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 fefc 	bl	800ab2a <USB_DevDisconnect>

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_Start+0x1c>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e01c      	b.n	8001d92 <HAL_PCD_Start+0x56>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f007 fdc3 	bl	8009904 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f008 feb0 	bl	800aae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b08d      	sub	sp, #52	; 0x34
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f008 ff6e 	bl	800ac92 <USB_GetMode>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f040 847e 	bne.w	80026ba <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f008 fed2 	bl	800ab6c <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8474 	beq.w	80026b8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f008 febf 	bl	800ab6c <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d107      	bne.n	8001e08 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f002 0202 	and.w	r2, r2, #2
 8001e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f008 fead 	bl	800ab6c <USB_ReadInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d161      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0210 	bic.w	r2, r2, #16
 8001e2a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	0c5b      	lsrs	r3, r3, #17
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d124      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d035      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	6a38      	ldr	r0, [r7, #32]
 8001e78:	f008 fce4 	bl	800a844 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e88:	441a      	add	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e9a:	441a      	add	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	621a      	str	r2, [r3, #32]
 8001ea0:	e016      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	0c5b      	lsrs	r3, r3, #17
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d110      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6a38      	ldr	r0, [r7, #32]
 8001eba:	f008 fcc3 	bl	800a844 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eca:	441a      	add	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0210 	orr.w	r2, r2, #16
 8001ede:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f008 fe41 	bl	800ab6c <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ef4:	f040 80a7 	bne.w	8002046 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f008 fe46 	bl	800ab92 <USB_ReadDevAllOutEpInterrupt>
 8001f06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f08:	e099      	b.n	800203e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 808e 	beq.w	8002032 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f008 fe6a 	bl	800abfa <USB_ReadDevOutEPInterrupt>
 8001f26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00c      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2301      	movs	r3, #1
 8001f42:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fe96 	bl	8002c78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f62:	461a      	mov	r2, r3
 8001f64:	2308      	movs	r3, #8
 8001f66:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fed2 	bl	8002d14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f86:	461a      	mov	r2, r3
 8001f88:	2310      	movs	r3, #16
 8001f8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d030      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	2b80      	cmp	r3, #128	; 0x80
 8001fa0:	d109      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f00b f8bd 	bl	800d160 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200e:	461a      	mov	r2, r3
 8002010:	2320      	movs	r3, #32
 8002012:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002030:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	3301      	adds	r3, #1
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	f47f af62 	bne.w	8001f0a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f008 fd8e 	bl	800ab6c <USB_ReadInterrupts>
 8002050:	4603      	mov	r3, r0
 8002052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800205a:	f040 80a4 	bne.w	80021a6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f008 fdaf 	bl	800abc6 <USB_ReadDevAllInEpInterrupt>
 8002068:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800206e:	e096      	b.n	800219e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 808b 	beq.w	8002192 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f008 fdd5 	bl	800ac36 <USB_ReadDevInEPInterrupt>
 800208c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	2201      	movs	r2, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69f9      	ldr	r1, [r7, #28]
 80020b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020b8:	4013      	ands	r3, r2
 80020ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c8:	461a      	mov	r2, r3
 80020ca:	2301      	movs	r3, #1
 80020cc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f00a ffae 	bl	800d036 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f0:	461a      	mov	r2, r3
 80020f2:	2308      	movs	r3, #8
 80020f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800210c:	461a      	mov	r2, r3
 800210e:	2310      	movs	r3, #16
 8002110:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002128:	461a      	mov	r2, r3
 800212a:	2340      	movs	r3, #64	; 0x40
 800212c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d023      	beq.n	8002180 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213a:	6a38      	ldr	r0, [r7, #32]
 800213c:	f007 fd9c 	bl	8009c78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3338      	adds	r3, #56	; 0x38
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	78db      	ldrb	r3, [r3, #3]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d108      	bne.n	800216e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2200      	movs	r2, #0
 8002160:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f00b f80b 	bl	800d184 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800217a:	461a      	mov	r2, r3
 800217c:	2302      	movs	r3, #2
 800217e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800218a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fcea 	bl	8002b66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	3301      	adds	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f af65 	bne.w	8002070 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f008 fcde 	bl	800ab6c <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ba:	d122      	bne.n	8002202 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f00b fa3d 	bl	800d664 <HAL_PCDEx_LPM_Callback>
 80021ea:	e002      	b.n	80021f2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f00a ff8f 	bl	800d110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f008 fcb0 	bl	800ab6c <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002216:	d112      	bne.n	800223e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d102      	bne.n	800222e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f00a ff4b 	bl	800d0c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800223c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f008 fc92 	bl	800ab6c <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800224e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002252:	d121      	bne.n	8002298 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002262:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d111      	bne.n	8002292 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002288:	2101      	movs	r1, #1
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f00b f9ea 	bl	800d664 <HAL_PCDEx_LPM_Callback>
 8002290:	e002      	b.n	8002298 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f00a ff16 	bl	800d0c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f008 fc65 	bl	800ab6c <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ac:	f040 80b5 	bne.w	800241a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2110      	movs	r1, #16
 80022ca:	4618      	mov	r0, r3
 80022cc:	f007 fcd4 	bl	8009c78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d4:	e046      	b.n	8002364 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e2:	461a      	mov	r2, r3
 80022e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fa:	0151      	lsls	r1, r2, #5
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	440a      	add	r2, r1
 8002300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800231c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232e:	0151      	lsls	r1, r2, #5
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	440a      	add	r2, r1
 8002334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002338:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800233c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234e:	0151      	lsls	r1, r2, #5
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	440a      	add	r2, r1
 8002354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800235c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	3301      	adds	r3, #1
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236a:	429a      	cmp	r2, r3
 800236c:	d3b3      	bcc.n	80022d6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002380:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239a:	f043 030b 	orr.w	r3, r3, #11
 800239e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b0:	f043 030b 	orr.w	r3, r3, #11
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	e015      	b.n	80023e4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023de:	f043 030b 	orr.w	r3, r3, #11
 80023e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f008 fc75 	bl	800acf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f008 fba4 	bl	800ab6c <USB_ReadInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	d124      	bne.n	800247a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f008 fc3a 	bl	800acae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f007 fc97 	bl	8009d72 <USB_GetDevSpeed>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681c      	ldr	r4, [r3, #0]
 8002450:	f001 fbc4 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8002454:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4620      	mov	r0, r4
 8002460:	f007 f9b4 	bl	80097cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f00a fe0e 	bl	800d086 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002478:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f008 fb74 	bl	800ab6c <USB_ReadInterrupts>
 8002484:	4603      	mov	r3, r0
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b08      	cmp	r3, #8
 800248c:	d10a      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f00a fdeb 	bl	800d06a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f002 0208 	and.w	r2, r2, #8
 80024a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f008 fb5f 	bl	800ab6c <USB_ReadInterrupts>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d122      	bne.n	80024fe <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	e014      	b.n	80024f4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d105      	bne.n	80024ee <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fb0b 	bl	8002b04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3301      	adds	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3e5      	bcc.n	80024ca <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f008 fb32 	bl	800ab6c <USB_ReadInterrupts>
 8002508:	4603      	mov	r3, r0
 800250a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002512:	d13b      	bne.n	800258c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
 8002518:	e02b      	b.n	8002572 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3340      	adds	r3, #64	; 0x40
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d115      	bne.n	800256c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002540:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	da12      	bge.n	800256c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	333f      	adds	r3, #63	; 0x3f
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 facc 	bl	8002b04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	3301      	adds	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	429a      	cmp	r2, r3
 800257a:	d3ce      	bcc.n	800251a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f008 faeb 	bl	800ab6c <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a0:	d155      	bne.n	800264e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025a2:	2301      	movs	r3, #1
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
 80025a6:	e045      	b.n	8002634 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d12e      	bne.n	800262e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da2b      	bge.n	800262e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d121      	bne.n	800262e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262a:	6053      	str	r3, [r2, #4]
            break;
 800262c:	e007      	b.n	800263e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	3301      	adds	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	429a      	cmp	r2, r3
 800263c:	d3b4      	bcc.n	80025a8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f008 fa8a 	bl	800ab6c <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002662:	d10a      	bne.n	800267a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f00a fd9f 	bl	800d1a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f008 fa74 	bl	800ab6c <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b04      	cmp	r3, #4
 800268c:	d115      	bne.n	80026ba <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f00a fd8f 	bl	800d1c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	e000      	b.n	80026ba <HAL_PCD_IRQHandler+0x920>
      return;
 80026b8:	bf00      	nop
    }
  }
}
 80026ba:	3734      	adds	r7, #52	; 0x34
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}

080026c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_PCD_SetAddress+0x1a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e013      	b.n	8002702 <HAL_PCD_SetAddress+0x42>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f008 f9d2 	bl	800aa9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	4608      	mov	r0, r1
 8002714:	4611      	mov	r1, r2
 8002716:	461a      	mov	r2, r3
 8002718:	4603      	mov	r3, r0
 800271a:	70fb      	strb	r3, [r7, #3]
 800271c:	460b      	mov	r3, r1
 800271e:	803b      	strh	r3, [r7, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272c:	2b00      	cmp	r3, #0
 800272e:	da0f      	bge.n	8002750 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	3338      	adds	r3, #56	; 0x38
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	3304      	adds	r3, #4
 8002746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	705a      	strb	r2, [r3, #1]
 800274e:	e00f      	b.n	8002770 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 020f 	and.w	r2, r3, #15
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	3304      	adds	r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800277c:	883a      	ldrh	r2, [r7, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	78ba      	ldrb	r2, [r7, #2]
 8002786:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800279a:	78bb      	ldrb	r3, [r7, #2]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_PCD_EP_Open+0xaa>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e00e      	b.n	80027d2 <HAL_PCD_EP_Open+0xc8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f007 faf4 	bl	8009db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027d0:	7afb      	ldrb	r3, [r7, #11]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da0f      	bge.n	800280e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	3338      	adds	r3, #56	; 0x38
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	705a      	strb	r2, [r3, #1]
 800280c:	e00f      	b.n	800282e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f003 020f 	and.w	r2, r3, #15
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_PCD_EP_Close+0x6e>
 8002844:	2302      	movs	r3, #2
 8002846:	e00e      	b.n	8002866 <HAL_PCD_EP_Close+0x8c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	4618      	mov	r0, r3
 8002858:	f007 fb32 	bl	8009ec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	460b      	mov	r3, r1
 800287c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287e:	7afb      	ldrb	r3, [r7, #11]
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	3304      	adds	r3, #4
 8002896:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b0:	7afb      	ldrb	r3, [r7, #11]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028bc:	7afb      	ldrb	r3, [r7, #11]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6979      	ldr	r1, [r7, #20]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f007 fdb3 	bl	800a438 <USB_EP0StartXfer>
 80028d2:	e005      	b.n	80028e0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6979      	ldr	r1, [r7, #20]
 80028da:	4618      	mov	r0, r3
 80028dc:	f007 fbcc 	bl	800a078 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800290c:	681b      	ldr	r3, [r3, #0]
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	460b      	mov	r3, r1
 8002928:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292a:	7afb      	ldrb	r3, [r7, #11]
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	3338      	adds	r3, #56	; 0x38
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2201      	movs	r2, #1
 8002958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800295a:	7afb      	ldrb	r3, [r7, #11]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	b2da      	uxtb	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6979      	ldr	r1, [r7, #20]
 8002976:	4618      	mov	r0, r3
 8002978:	f007 fd5e 	bl	800a438 <USB_EP0StartXfer>
 800297c:	e005      	b.n	800298a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6979      	ldr	r1, [r7, #20]
 8002984:	4618      	mov	r0, r3
 8002986:	f007 fb77 	bl	800a078 <USB_EPStartXfer>
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 020f 	and.w	r2, r3, #15
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d901      	bls.n	80029b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e04e      	b.n	8002a50 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0f      	bge.n	80029da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3338      	adds	r3, #56	; 0x38
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
 80029d8:	e00d      	b.n	80029f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_EP_SetStall+0x82>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e01c      	b.n	8002a50 <HAL_PCD_EP_SetStall+0xbc>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f007 ff65 	bl	800a8f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d108      	bne.n	8002a46 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f008 f957 	bl	800acf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d901      	bls.n	8002a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e042      	b.n	8002afc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0f      	bge.n	8002a9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3338      	adds	r3, #56	; 0x38
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_PCD_EP_ClrStall+0x86>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e00e      	b.n	8002afc <HAL_PCD_EP_ClrStall+0xa4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f007 ff6f 	bl	800a9d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	da0c      	bge.n	8002b32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	3338      	adds	r3, #56	; 0x38
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e00c      	b.n	8002b4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68f9      	ldr	r1, [r7, #12]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f007 fd92 	bl	800a67c <USB_EPStopXfer>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b088      	sub	sp, #32
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	3338      	adds	r3, #56	; 0x38
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d901      	bls.n	8002b9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e067      	b.n	8002c6e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d902      	bls.n	8002bba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3303      	adds	r3, #3
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bc2:	e026      	b.n	8002c12 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d902      	bls.n	8002be0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3303      	adds	r3, #3
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6919      	ldr	r1, [r3, #16]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	6978      	ldr	r0, [r7, #20]
 8002bf6:	f007 fdeb 	bl	800a7d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	441a      	add	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	441a      	add	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d809      	bhi.n	8002c3c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d203      	bcs.n	8002c3c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1c3      	bne.n	8002bc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d811      	bhi.n	8002c6c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	2201      	movs	r2, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	6939      	ldr	r1, [r7, #16]
 8002c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c68:	4013      	ands	r3, r2
 8002c6a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	333c      	adds	r3, #60	; 0x3c
 8002c90:	3304      	adds	r3, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <PCD_EP_OutXfrComplete_int+0x98>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d124      	bne.n	8002cf8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	e01a      	b.n	8002d04 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f00a f985 	bl	800d000 <HAL_PCD_DataOutStageCallback>
 8002cf6:	e005      	b.n	8002d04 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f00a f97e 	bl	800d000 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	4f54310a 	.word	0x4f54310a

08002d14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	333c      	adds	r3, #60	; 0x3c
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <PCD_EP_OutSetupPacket_int+0x64>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d90e      	bls.n	8002d68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d60:	461a      	mov	r2, r3
 8002d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f00a f937 	bl	800cfdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	4f54300a 	.word	0x4f54300a

08002d7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d9a:	883b      	ldrh	r3, [r7, #0]
 8002d9c:	0419      	lsls	r1, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
 8002da8:	e028      	b.n	8002dfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e00d      	b.n	8002dda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3340      	adds	r3, #64	; 0x40
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d3ec      	bcc.n	8002dbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002de4:	883b      	ldrh	r3, [r7, #0]
 8002de6:	0418      	lsls	r0, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4302      	orrs	r2, r0
 8002df4:	3340      	adds	r3, #64	; 0x40
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	f043 0303 	orr.w	r3, r3, #3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e84:	d102      	bne.n	8002e8c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8a:	e00b      	b.n	8002ea4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea0:	e000      	b.n	8002ea4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002ea2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d141      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ec2:	4b4b      	ldr	r3, [pc, #300]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d131      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed0:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed6:	4a46      	ldr	r2, [pc, #280]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee8:	4a41      	ldr	r2, [pc, #260]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ef0:	4b40      	ldr	r3, [pc, #256]	; (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2232      	movs	r2, #50	; 0x32
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a3f      	ldr	r2, [pc, #252]	; (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	0c9b      	lsrs	r3, r3, #18
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f06:	e002      	b.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0e:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d102      	bne.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f2      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f22:	4b33      	ldr	r3, [pc, #204]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	d158      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e057      	b.n	8002fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f34:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f44:	e04d      	b.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4c:	d141      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4e:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5a:	d131      	bne.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f62:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f6c:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f74:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2232      	movs	r2, #50	; 0x32
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	0c9b      	lsrs	r3, r3, #18
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f92:	e002      	b.n	8002f9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa6:	d102      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f2      	bne.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d112      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e011      	b.n	8002fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fd0:	e007      	b.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fda:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fe0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	431bde83 	.word	0x431bde83

08002ffc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300a:	6053      	str	r3, [r2, #4]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f000 bc08 	b.w	8003840 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003030:	4b96      	ldr	r3, [pc, #600]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303a:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80e4 	beq.w	800321a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_RCC_OscConfig+0x4c>
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	f040 808b 	bne.w	8003176 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	f040 8087 	bne.w	8003176 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003068:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_OscConfig+0x64>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e3df      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_RCC_OscConfig+0x7e>
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003098:	e005      	b.n	80030a6 <HAL_RCC_OscConfig+0x8a>
 800309a:	4b7c      	ldr	r3, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d223      	bcs.n	80030f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fdf8 	bl	8003ca4 <RCC_SetFlashLatencyFromMSIRange>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e3c0      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a72      	ldr	r2, [pc, #456]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	496d      	ldr	r1, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030dc:	4b6b      	ldr	r3, [pc, #428]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4968      	ldr	r1, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
 80030f0:	e025      	b.n	800313e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f2:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4960      	ldr	r1, [pc, #384]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003110:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	495b      	ldr	r1, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fdb8 	bl	8003ca4 <RCC_SetFlashLatencyFromMSIRange>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e380      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800313e:	f000 fcc1 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b51      	ldr	r3, [pc, #324]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4950      	ldr	r1, [pc, #320]	; (8003290 <HAL_RCC_OscConfig+0x274>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_RCC_OscConfig+0x278>)
 800315c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800315e:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe f832 	bl	80011cc <HAL_InitTick>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d052      	beq.n	8003218 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	e364      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d032      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800318a:	f7fe f86f 	bl	800126c <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003192:	f7fe f86b 	bl	800126c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e34d      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b6:	f043 0308 	orr.w	r3, r3, #8
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b33      	ldr	r3, [pc, #204]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4930      	ldr	r1, [pc, #192]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	492b      	ldr	r1, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
 80031e2:	e01a      	b.n	800321a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f0:	f7fe f83c 	bl	800126c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f8:	f7fe f838 	bl	800126c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e31a      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1dc>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d073      	beq.n	800330e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x21c>
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d10e      	bne.n	8003250 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d10b      	bne.n	8003250 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d063      	beq.n	800330c <HAL_RCC_OscConfig+0x2f0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d15f      	bne.n	800330c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e2f7      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d106      	bne.n	8003268 <HAL_RCC_OscConfig+0x24c>
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e025      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003270:	d114      	bne.n	800329c <HAL_RCC_OscConfig+0x280>
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e013      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 800328c:	40021000 	.word	0x40021000
 8003290:	0800d7f4 	.word	0x0800d7f4
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004
 800329c:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a9f      	ldr	r2, [pc, #636]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a9c      	ldr	r2, [pc, #624]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd ffd6 	bl	800126c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fd ffd2 	bl	800126c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e2b4      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2a8>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd ffc2 	bl	800126c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fd ffbe 	bl	800126c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e2a0      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fe:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d0>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d060      	beq.n	80033dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x310>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d119      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d116      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332c:	4b7c      	ldr	r3, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x328>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e27d      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	4973      	ldr	r1, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	e040      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d023      	beq.n	80033aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fd ff7d 	bl	800126c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003376:	f7fd ff79 	bl	800126c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e25b      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	495f      	ldr	r1, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	e018      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fd ff59 	bl	800126c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7fd ff55 	bl	800126c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e237      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d03c      	beq.n	8003462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01c      	beq.n	800342a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f0:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fd ff34 	bl	800126c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003408:	f7fd ff30 	bl	800126c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e212      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ef      	beq.n	8003408 <HAL_RCC_OscConfig+0x3ec>
 8003428:	e01b      	b.n	8003462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003430:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fd ff17 	bl	800126c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003442:	f7fd ff13 	bl	800126c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1f5      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a6 	beq.w	80035bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003498:	2301      	movs	r3, #1
 800349a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d118      	bne.n	80034da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b4:	f7fd feda 	bl	800126c <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fd fed6 	bl	800126c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1b8      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d108      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4d8>
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f2:	e029      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d115      	bne.n	8003528 <HAL_RCC_OscConfig+0x50c>
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a03      	ldr	r2, [pc, #12]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	4b9d      	ldr	r3, [pc, #628]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a9c      	ldr	r2, [pc, #624]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003538:	4b99      	ldr	r3, [pc, #612]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a98      	ldr	r2, [pc, #608]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d016      	beq.n	800357e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd fe8c 	bl	800126c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fd fe88 	bl	800126c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e168      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ed      	beq.n	8003558 <HAL_RCC_OscConfig+0x53c>
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fd fe75 	bl	800126c <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fd fe71 	bl	800126c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e151      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ed      	bne.n	8003586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b0:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d6:	4a72      	ldr	r2, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fd fe44 	bl	800126c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e8:	f7fd fe40 	bl	800126c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e122      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fa:	4b69      	ldr	r3, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5cc>
 8003608:	e01b      	b.n	8003642 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800360a:	4b65      	ldr	r3, [pc, #404]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800360c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003610:	4a63      	ldr	r2, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fd fe27 	bl	800126c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003622:	f7fd fe23 	bl	800126c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e105      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003634:	4b5a      	ldr	r3, [pc, #360]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80f9 	beq.w	800383e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	2b02      	cmp	r3, #2
 8003652:	f040 80cf 	bne.w	80037f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003656:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0203 	and.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	429a      	cmp	r2, r3
 8003668:	d12c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	3b01      	subs	r3, #1
 8003676:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d123      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d11b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d113      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	3b01      	subs	r3, #1
 80036aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d109      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	3b01      	subs	r3, #1
 80036be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d071      	beq.n	80037a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d068      	beq.n	800379c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036ca:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036d6:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0ac      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f2:	f7fd fdbb 	bl	800126c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fd fdb7 	bl	800126c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e099      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <HAL_RCC_OscConfig+0x788>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003728:	3a01      	subs	r2, #1
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003732:	0212      	lsls	r2, r2, #8
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800373a:	0852      	lsrs	r2, r2, #1
 800373c:	3a01      	subs	r2, #1
 800373e:	0552      	lsls	r2, r2, #21
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003746:	0852      	lsrs	r2, r2, #1
 8003748:	3a01      	subs	r2, #1
 800374a:	0652      	lsls	r2, r2, #25
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003752:	06d2      	lsls	r2, r2, #27
 8003754:	430a      	orrs	r2, r1
 8003756:	4912      	ldr	r1, [pc, #72]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003758:	4313      	orrs	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003774:	f7fd fd7a 	bl	800126c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fd76 	bl	800126c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e058      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379a:	e050      	b.n	800383e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04f      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d144      	bne.n	800383e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037cc:	f7fd fd4e 	bl	800126c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd fd4a 	bl	800126c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e02c      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x7b8>
 80037f2:	e024      	b.n	800383e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d01f      	beq.n	800383a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 8003800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fd fd31 	bl	800126c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380e:	f7fd fd2d 	bl	800126c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e00f      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4905      	ldr	r1, [pc, #20]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_OscConfig+0x830>)
 8003834:	4013      	ands	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
 8003838:	e001      	b.n	800383e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	feeefffc 	.word	0xfeeefffc

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e11d      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b90      	ldr	r3, [pc, #576]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 020f 	bic.w	r2, r3, #15
 800387e:	498b      	ldr	r1, [pc, #556]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e105      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d908      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	497b      	ldr	r1, [pc, #492]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d079      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d11e      	bne.n	8003918 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0dc      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038ea:	f000 fa35 	bl	8003d58 <RCC_GetSysClockFreqFromPLLSource>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4a70      	ldr	r2, [pc, #448]	; (8003ab4 <HAL_RCC_ClockConfig+0x264>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d946      	bls.n	8003984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038f6:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d140      	bne.n	8003984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003902:	4b6b      	ldr	r3, [pc, #428]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390a:	4a69      	ldr	r2, [pc, #420]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800390c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003910:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e035      	b.n	8003984 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d107      	bne.n	8003930 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003920:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d115      	bne.n	8003958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b9      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003938:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ad      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0a5      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003958:	f000 f8b4 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 800395c:	4603      	mov	r3, r0
 800395e:	4a55      	ldr	r2, [pc, #340]	; (8003ab4 <HAL_RCC_ClockConfig+0x264>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d90f      	bls.n	8003984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003964:	4b52      	ldr	r3, [pc, #328]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003978:	4a4d      	ldr	r2, [pc, #308]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003984:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 0203 	bic.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4947      	ldr	r1, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003996:	f7fd fc69 	bl	800126c <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399e:	f7fd fc65 	bl	800126c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e077      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 020c 	and.w	r2, r3, #12
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d1eb      	bne.n	800399e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a37      	ldr	r2, [pc, #220]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b31      	ldr	r3, [pc, #196]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d208      	bcs.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	492b      	ldr	r1, [pc, #172]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a06:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d210      	bcs.n	8003a36 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 020f 	bic.w	r2, r3, #15
 8003a1c:	4923      	ldr	r1, [pc, #140]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e036      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4918      	ldr	r1, [pc, #96]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4910      	ldr	r1, [pc, #64]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a74:	f000 f826 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <HAL_RCC_ClockConfig+0x268>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x26c>)
 8003a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_RCC_ClockConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fb97 	bl	80011cc <HAL_InitTick>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	04c4b400 	.word	0x04c4b400
 8003ab8:	0800d7f4 	.word	0x0800d7f4
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	20000004 	.word	0x20000004

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad2:	4b3e      	ldr	r3, [pc, #248]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003adc:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d121      	bne.n	8003b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11e      	bne.n	8003b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af8:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e005      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b20:	4a2b      	ldr	r2, [pc, #172]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10d      	bne.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e004      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d134      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d003      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0xac>
 8003b68:	e005      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b6c:	617b      	str	r3, [r7, #20]
      break;
 8003b6e:	e005      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b72:	617b      	str	r3, [r7, #20]
      break;
 8003b74:	e002      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	617b      	str	r3, [r7, #20]
      break;
 8003b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	fb03 f202 	mul.w	r2, r3, r2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	0e5b      	lsrs	r3, r3, #25
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	3301      	adds	r3, #1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	0800d80c 	.word	0x0800d80c
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200

08003bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf8:	f7ff fff0 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4904      	ldr	r1, [pc, #16]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	0800d804 	.word	0x0800d804

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c24:	f7ff ffda 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0adb      	lsrs	r3, r3, #11
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	0800d804 	.word	0x0800d804

08003c4c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_EnableCSS+0x1c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <HAL_RCC_EnableCSS+0x1c>)
 8003c56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000

08003c6c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7c:	d105      	bne.n	8003c8a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003c7e:	f000 f809 	bl	8003c94 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003c82:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c88:	621a      	str	r2, [r3, #32]
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000

08003c94 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cbc:	f7ff f8da 	bl	8002e74 <HAL_PWREx_GetVoltageRange>
 8003cc0:	6178      	str	r0, [r7, #20]
 8003cc2:	e014      	b.n	8003cee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cdc:	f7ff f8ca 	bl	8002e74 <HAL_PWREx_GetVoltageRange>
 8003ce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf4:	d10b      	bne.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d913      	bls.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8003d00:	d902      	bls.n	8003d08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d02:	2302      	movs	r3, #2
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e00d      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d08:	2301      	movs	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e00a      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b7f      	cmp	r3, #127	; 0x7f
 8003d12:	d902      	bls.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d14:	2302      	movs	r3, #2
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e004      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b70      	cmp	r3, #112	; 0x70
 8003d1e:	d101      	bne.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 020f 	bic.w	r2, r3, #15
 8003d2c:	4909      	ldr	r1, [pc, #36]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40022000 	.word	0x40022000

08003d58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5e:	4b2d      	ldr	r3, [pc, #180]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d00b      	beq.n	8003d86 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d825      	bhi.n	8003dc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d008      	beq.n	8003d8c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d11f      	bne.n	8003dc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d82:	613b      	str	r3, [r7, #16]
    break;
 8003d84:	e01f      	b.n	8003dc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d86:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d88:	613b      	str	r3, [r7, #16]
    break;
 8003d8a:	e01c      	b.n	8003dc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e005      	b.n	8003db4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	613b      	str	r3, [r7, #16]
    break;
 8003dbe:	e002      	b.n	8003dc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
    break;
 8003dc4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	fb03 f202 	mul.w	r2, r3, r2
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0e5b      	lsrs	r3, r3, #25
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	3301      	adds	r3, #1
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e06:	683b      	ldr	r3, [r7, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40021000 	.word	0x40021000
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200
 8003e20:	0800d80c 	.word	0x0800d80c

08003e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e30:	2300      	movs	r3, #0
 8003e32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d040      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e44:	2b80      	cmp	r3, #128	; 0x80
 8003e46:	d02a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d825      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e4c:	2b60      	cmp	r3, #96	; 0x60
 8003e4e:	d026      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e50:	2b60      	cmp	r3, #96	; 0x60
 8003e52:	d821      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d006      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d81d      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d010      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e64:	e018      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e66:	4b89      	ldr	r3, [pc, #548]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a88      	ldr	r2, [pc, #544]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e72:	e015      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fa24 	bl	80052c8 <RCCEx_PLLSAI1_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3320      	adds	r3, #32
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fb0f 	bl	80054b0 <RCCEx_PLLSAI2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	74fb      	strb	r3, [r7, #19]
      break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ea6:	4b79      	ldr	r3, [pc, #484]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb4:	4975      	ldr	r1, [pc, #468]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ebc:	e001      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d047      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed6:	d030      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	d82a      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee2:	d02a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee8:	d824      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eee:	d008      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef4:	d81e      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f00:	e018      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f02:	4b62      	ldr	r3, [pc, #392]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4a61      	ldr	r2, [pc, #388]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f0e:	e015      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 f9d6 	bl	80052c8 <RCCEx_PLLSAI1_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f20:	e00c      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3320      	adds	r3, #32
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fac1 	bl	80054b0 <RCCEx_PLLSAI2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	74fb      	strb	r3, [r7, #19]
      break;
 8003f38:	e000      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f42:	4b52      	ldr	r3, [pc, #328]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	494e      	ldr	r1, [pc, #312]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f58:	e001      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 809f 	beq.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f80:	2300      	movs	r3, #0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	4a40      	ldr	r2, [pc, #256]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6593      	str	r3, [r2, #88]	; 0x58
 8003f92:	4b3e      	ldr	r3, [pc, #248]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fae:	f7fd f95d 	bl	800126c <HAL_GetTick>
 8003fb2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fb4:	e009      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fd f959 	bl	800126c <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d902      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ef      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d15b      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01f      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d019      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	4a1f      	ldr	r2, [pc, #124]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004016:	4b1d      	ldr	r3, [pc, #116]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004026:	4a19      	ldr	r2, [pc, #100]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d016      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd f918 	bl	800126c <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403e:	e00b      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fd f914 	bl	800126c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d902      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	74fb      	strb	r3, [r7, #19]
            break;
 8004056:	e006      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ec      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004066:	7cfb      	ldrb	r3, [r7, #19]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10c      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	4903      	ldr	r1, [pc, #12]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004084:	e008      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	74bb      	strb	r3, [r7, #18]
 800408a:	e005      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004098:	7c7b      	ldrb	r3, [r7, #17]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4ba0      	ldr	r3, [pc, #640]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	4a9f      	ldr	r2, [pc, #636]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b6:	4b9a      	ldr	r3, [pc, #616]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	f023 0203 	bic.w	r2, r3, #3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	4996      	ldr	r1, [pc, #600]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d8:	4b91      	ldr	r3, [pc, #580]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 020c 	bic.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	498e      	ldr	r1, [pc, #568]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040fa:	4b89      	ldr	r3, [pc, #548]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	4985      	ldr	r1, [pc, #532]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800411c:	4b80      	ldr	r3, [pc, #512]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	497d      	ldr	r1, [pc, #500]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800413e:	4b78      	ldr	r3, [pc, #480]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414c:	4974      	ldr	r1, [pc, #464]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004160:	4b6f      	ldr	r3, [pc, #444]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416e:	496c      	ldr	r1, [pc, #432]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004182:	4b67      	ldr	r3, [pc, #412]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004190:	4963      	ldr	r1, [pc, #396]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a4:	4b5e      	ldr	r3, [pc, #376]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b2:	495b      	ldr	r1, [pc, #364]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c6:	4b56      	ldr	r3, [pc, #344]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	4952      	ldr	r1, [pc, #328]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	494a      	ldr	r1, [pc, #296]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800420a:	4b45      	ldr	r3, [pc, #276]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	4941      	ldr	r1, [pc, #260]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800422c:	4b3c      	ldr	r3, [pc, #240]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423a:	4939      	ldr	r1, [pc, #228]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d028      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424e:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425c:	4930      	ldr	r1, [pc, #192]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426c:	d106      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800426e:	4b2c      	ldr	r3, [pc, #176]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004278:	60d3      	str	r3, [r2, #12]
 800427a:	e011      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	2101      	movs	r1, #1
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f81b 	bl	80052c8 <RCCEx_PLLSAI1_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d04d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b4:	d108      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80042b6:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042bc:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042c6:	e012      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ce:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e6:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f6:	d106      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004302:	60d3      	str	r3, [r2, #12]
 8004304:	e020      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430e:	d109      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a02      	ldr	r2, [pc, #8]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	60d3      	str	r3, [r2, #12]
 800431c:	e014      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 ffc7 	bl	80052c8 <RCCEx_PLLSAI1_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d028      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004354:	4b4a      	ldr	r3, [pc, #296]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004362:	4947      	ldr	r1, [pc, #284]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004372:	d106      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004374:	4b42      	ldr	r3, [pc, #264]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a41      	ldr	r2, [pc, #260]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437e:	60d3      	str	r3, [r2, #12]
 8004380:	e011      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438a:	d10c      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f000 ff98 	bl	80052c8 <RCCEx_PLLSAI1_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01e      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b2:	4b33      	ldr	r3, [pc, #204]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	492f      	ldr	r1, [pc, #188]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3304      	adds	r3, #4
 80043da:	2102      	movs	r1, #2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 ff73 	bl	80052c8 <RCCEx_PLLSAI1_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e6:	7cfb      	ldrb	r3, [r7, #19]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043fc:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004402:	f023 0204 	bic.w	r2, r3, #4
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440c:	491c      	ldr	r1, [pc, #112]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004426:	f023 0218 	bic.w	r2, r3, #24
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	4913      	ldr	r1, [pc, #76]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800444a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004454:	490a      	ldr	r1, [pc, #40]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004466:	d105      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004472:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004474:	7cbb      	ldrb	r3, [r7, #18]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000

08004484 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004496:	d13e      	bne.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004498:	4bb6      	ldr	r3, [pc, #728]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044aa:	d028      	beq.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b2:	f200 86f4 	bhi.w	800529e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044bc:	d005      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c4:	d00e      	beq.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80044c6:	f000 beea 	b.w	800529e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044ca:	4baa      	ldr	r3, [pc, #680]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	f040 86e4 	bne.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	61fb      	str	r3, [r7, #28]
      break;
 80044e0:	f000 bedf 	b.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044e4:	4ba3      	ldr	r3, [pc, #652]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	f040 86d9 	bne.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80044f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044f8:	61fb      	str	r3, [r7, #28]
      break;
 80044fa:	f000 bed4 	b.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044fe:	4b9d      	ldr	r3, [pc, #628]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800450a:	f040 86ce 	bne.w	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800450e:	4b9a      	ldr	r3, [pc, #616]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004510:	61fb      	str	r3, [r7, #28]
      break;
 8004512:	f000 beca 	b.w	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004516:	4b97      	ldr	r3, [pc, #604]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d036      	beq.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d840      	bhi.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d003      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d020      	beq.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004538:	e039      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800453a:	4b8e      	ldr	r3, [pc, #568]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d116      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004546:	4b8b      	ldr	r3, [pc, #556]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004552:	4b88      	ldr	r3, [pc, #544]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	e005      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800455e:	4b85      	ldr	r3, [pc, #532]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	4a84      	ldr	r2, [pc, #528]	; (800477c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004570:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004572:	e01f      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
      break;
 8004578:	e01c      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800457a:	4b7e      	ldr	r3, [pc, #504]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d102      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004588:	4b7d      	ldr	r3, [pc, #500]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800458a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800458c:	e012      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
      break;
 8004592:	e00f      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004594:	4b77      	ldr	r3, [pc, #476]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a0:	d102      	bne.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80045a2:	4b78      	ldr	r3, [pc, #480]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80045a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045a6:	e005      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
      break;
 80045ac:	e002      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
      break;
 80045b2:	bf00      	nop
    }

    switch(PeriphClk)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ba:	f000 8606 	beq.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c4:	f200 8673 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ce:	f000 8469 	beq.w	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d8:	f200 8669 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e2:	f000 8531 	beq.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ec:	f200 865f 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045f6:	f000 8187 	beq.w	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004600:	f200 8655 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800460a:	f000 80cd 	beq.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004614:	f200 864b 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461e:	f000 8430 	beq.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	f200 8641 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004632:	f000 83e4 	beq.w	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800463c:	f200 8637 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	f000 80af 	beq.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004650:	f200 862d 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	f000 809d 	beq.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	f200 8623 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466e:	f000 808b 	beq.w	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004678:	f200 8619 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	f000 8554 	beq.w	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468c:	f200 860f 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004696:	f000 8500 	beq.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	f200 8605 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	f000 84a1 	beq.w	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b4:	f200 85fb 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	f000 846c 	beq.w	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	f200 85f3 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d84c      	bhi.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 85ec 	beq.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3b01      	subs	r3, #1
 80046da:	2b1f      	cmp	r3, #31
 80046dc:	f200 85e7 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	08004afd 	.word	0x08004afd
 80046ec:	08004b6b 	.word	0x08004b6b
 80046f0:	080052af 	.word	0x080052af
 80046f4:	08004bff 	.word	0x08004bff
 80046f8:	080052af 	.word	0x080052af
 80046fc:	080052af 	.word	0x080052af
 8004700:	080052af 	.word	0x080052af
 8004704:	08004c77 	.word	0x08004c77
 8004708:	080052af 	.word	0x080052af
 800470c:	080052af 	.word	0x080052af
 8004710:	080052af 	.word	0x080052af
 8004714:	080052af 	.word	0x080052af
 8004718:	080052af 	.word	0x080052af
 800471c:	080052af 	.word	0x080052af
 8004720:	080052af 	.word	0x080052af
 8004724:	08004cfb 	.word	0x08004cfb
 8004728:	080052af 	.word	0x080052af
 800472c:	080052af 	.word	0x080052af
 8004730:	080052af 	.word	0x080052af
 8004734:	080052af 	.word	0x080052af
 8004738:	080052af 	.word	0x080052af
 800473c:	080052af 	.word	0x080052af
 8004740:	080052af 	.word	0x080052af
 8004744:	080052af 	.word	0x080052af
 8004748:	080052af 	.word	0x080052af
 800474c:	080052af 	.word	0x080052af
 8004750:	080052af 	.word	0x080052af
 8004754:	080052af 	.word	0x080052af
 8004758:	080052af 	.word	0x080052af
 800475c:	080052af 	.word	0x080052af
 8004760:	080052af 	.word	0x080052af
 8004764:	08004d7d 	.word	0x08004d7d
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	f000 83e8 	beq.w	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004770:	f000 bd9d 	b.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004774:	40021000 	.word	0x40021000
 8004778:	0003d090 	.word	0x0003d090
 800477c:	0800d80c 	.word	0x0800d80c
 8004780:	00f42400 	.word	0x00f42400
 8004784:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800478e:	f000 ff83 	bl	8005698 <RCCEx_GetSAIxPeriphCLKFreq>
 8004792:	61f8      	str	r0, [r7, #28]
      break;
 8004794:	f000 bd8e 	b.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800479e:	f000 ff7b 	bl	8005698 <RCCEx_GetSAIxPeriphCLKFreq>
 80047a2:	61f8      	str	r0, [r7, #28]
      break;
 80047a4:	f000 bd86 	b.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80047a8:	4b9a      	ldr	r3, [pc, #616]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047ba:	d015      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047c2:	f200 8092 	bhi.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047cc:	d029      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d4:	f200 8089 	bhi.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d07b      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e4:	d04a      	beq.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80047e6:	e080      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80047e8:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d17d      	bne.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80047f4:	4b87      	ldr	r3, [pc, #540]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004800:	4b84      	ldr	r3, [pc, #528]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	e005      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800480c:	4b81      	ldr	r3, [pc, #516]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800480e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	4a7f      	ldr	r2, [pc, #508]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800481a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481e:	61fb      	str	r3, [r7, #28]
          break;
 8004820:	e066      	b.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004822:	4b7c      	ldr	r3, [pc, #496]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800482e:	d162      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004830:	4b78      	ldr	r3, [pc, #480]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483c:	d15b      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800483e:	4b75      	ldr	r3, [pc, #468]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004848:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	fb03 f202 	mul.w	r2, r3, r2
 8004852:	4b70      	ldr	r3, [pc, #448]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	3301      	adds	r3, #1
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004864:	4b6b      	ldr	r3, [pc, #428]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	0d5b      	lsrs	r3, r3, #21
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	3301      	adds	r3, #1
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	61fb      	str	r3, [r7, #28]
          break;
 800487a:	e03c      	b.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800487c:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004888:	d138      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800488a:	4b62      	ldr	r3, [pc, #392]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004896:	d131      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004898:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	fb03 f202 	mul.w	r2, r3, r2
 80048ac:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3301      	adds	r3, #1
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80048be:	4b55      	ldr	r3, [pc, #340]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	0d5b      	lsrs	r3, r3, #21
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	3301      	adds	r3, #1
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	61fb      	str	r3, [r7, #28]
          break;
 80048d4:	e012      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80048d6:	4b4f      	ldr	r3, [pc, #316]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d10e      	bne.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80048e4:	4b4d      	ldr	r3, [pc, #308]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048e6:	61fb      	str	r3, [r7, #28]
          break;
 80048e8:	e00b      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80048ea:	bf00      	nop
 80048ec:	f000 bce2 	b.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048f0:	bf00      	nop
 80048f2:	f000 bcdf 	b.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048f6:	bf00      	nop
 80048f8:	f000 bcdc 	b.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048fc:	bf00      	nop
 80048fe:	f000 bcd9 	b.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004902:	bf00      	nop
        break;
 8004904:	f000 bcd6 	b.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800490a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800490e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004916:	d13d      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004918:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004924:	f040 84c5 	bne.w	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004928:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	f040 84bd 	bne.w	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004942:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	fb03 f202 	mul.w	r2, r3, r2
 800494c:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	3301      	adds	r3, #1
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800495e:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	0edb      	lsrs	r3, r3, #27
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004970:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800497c:	2311      	movs	r3, #17
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	e001      	b.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8004982:	2307      	movs	r3, #7
 8004984:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fbb2 f3f3 	udiv	r3, r2, r3
 800498e:	61fb      	str	r3, [r7, #28]
      break;
 8004990:	f000 bc8f 	b.w	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049a6:	d016      	beq.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049ae:	f200 809b 	bhi.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b8:	d032      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c0:	f200 8092 	bhi.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8084 	beq.w	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d2:	d052      	beq.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80049d4:	e088      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	f040 8084 	bne.w	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	e005      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0e:	61fb      	str	r3, [r7, #28]
          break;
 8004a10:	e06c      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	0800d80c 	.word	0x0800d80c
 8004a1c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a20:	4ba5      	ldr	r3, [pc, #660]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a2c:	d160      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a2e:	4ba2      	ldr	r3, [pc, #648]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3a:	d159      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a3c:	4b9e      	ldr	r3, [pc, #632]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a46:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	fb03 f202 	mul.w	r2, r3, r2
 8004a50:	4b99      	ldr	r3, [pc, #612]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004a62:	4b95      	ldr	r3, [pc, #596]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	0d5b      	lsrs	r3, r3, #21
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	61fb      	str	r3, [r7, #28]
          break;
 8004a78:	e03a      	b.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004a7a:	4b8f      	ldr	r3, [pc, #572]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a86:	d135      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004a88:	4b8b      	ldr	r3, [pc, #556]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a94:	d12e      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a96:	4b88      	ldr	r3, [pc, #544]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	fb03 f202 	mul.w	r2, r3, r2
 8004aaa:	4b83      	ldr	r3, [pc, #524]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004abc:	4b7e      	ldr	r3, [pc, #504]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	0d5b      	lsrs	r3, r3, #21
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	61fb      	str	r3, [r7, #28]
          break;
 8004ad2:	e00f      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004ad4:	4b78      	ldr	r3, [pc, #480]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d10a      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004ae2:	4b76      	ldr	r3, [pc, #472]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004ae4:	61fb      	str	r3, [r7, #28]
          break;
 8004ae6:	e007      	b.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004ae8:	bf00      	nop
 8004aea:	e3e2      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004aec:	bf00      	nop
 8004aee:	e3e0      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004af0:	bf00      	nop
 8004af2:	e3de      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004af4:	bf00      	nop
 8004af6:	e3dc      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004af8:	bf00      	nop
      break;
 8004afa:	e3da      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004afc:	4b6e      	ldr	r3, [pc, #440]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d827      	bhi.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b2d 	.word	0x08004b2d
 8004b1c:	08004b35 	.word	0x08004b35
 8004b20:	08004b49 	.word	0x08004b49
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7ff f87c 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8004b28:	61f8      	str	r0, [r7, #28]
          break;
 8004b2a:	e01d      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b2c:	f7fe ffca 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004b30:	61f8      	str	r0, [r7, #28]
          break;
 8004b32:	e019      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b34:	4b60      	ldr	r3, [pc, #384]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d10f      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004b42:	4b5f      	ldr	r3, [pc, #380]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b44:	61fb      	str	r3, [r7, #28]
          break;
 8004b46:	e00c      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b48:	4b5b      	ldr	r3, [pc, #364]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d107      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	61fb      	str	r3, [r7, #28]
          break;
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004b5e:	bf00      	nop
 8004b60:	e3a8      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b62:	bf00      	nop
 8004b64:	e3a6      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b66:	bf00      	nop
        break;
 8004b68:	e3a4      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b6a:	4b53      	ldr	r3, [pc, #332]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b0c      	cmp	r3, #12
 8004b7a:	d83a      	bhi.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bf3 	.word	0x08004bf3
 8004b8c:	08004bf3 	.word	0x08004bf3
 8004b90:	08004bf3 	.word	0x08004bf3
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bf3 	.word	0x08004bf3
 8004b9c:	08004bf3 	.word	0x08004bf3
 8004ba0:	08004bf3 	.word	0x08004bf3
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bf3 	.word	0x08004bf3
 8004bac:	08004bf3 	.word	0x08004bf3
 8004bb0:	08004bf3 	.word	0x08004bf3
 8004bb4:	08004bdd 	.word	0x08004bdd
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bb8:	f7ff f81c 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004bbc:	61f8      	str	r0, [r7, #28]
          break;
 8004bbe:	e01d      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bc0:	f7fe ff80 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004bc4:	61f8      	str	r0, [r7, #28]
          break;
 8004bc6:	e019      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bc8:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004bd6:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bd8:	61fb      	str	r3, [r7, #28]
          break;
 8004bda:	e00c      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bdc:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d107      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	61fb      	str	r3, [r7, #28]
          break;
 8004bf0:	e003      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004bf2:	bf00      	nop
 8004bf4:	e35e      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bf6:	bf00      	nop
 8004bf8:	e35c      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bfa:	bf00      	nop
        break;
 8004bfc:	e35a      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b30      	cmp	r3, #48	; 0x30
 8004c0e:	d021      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b30      	cmp	r3, #48	; 0x30
 8004c14:	d829      	bhi.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d011      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d823      	bhi.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d004      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8004c2e:	e01c      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fe ffe0 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004c34:	61f8      	str	r0, [r7, #28]
          break;
 8004c36:	e01d      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c38:	f7fe ff44 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004c3c:	61f8      	str	r0, [r7, #28]
          break;
 8004c3e:	e019      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c40:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d10f      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c50:	61fb      	str	r3, [r7, #28]
          break;
 8004c52:	e00c      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d107      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8004c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c66:	61fb      	str	r3, [r7, #28]
          break;
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004c6a:	bf00      	nop
 8004c6c:	e322      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c6e:	bf00      	nop
 8004c70:	e320      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c72:	bf00      	nop
        break;
 8004c74:	e31e      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2bc0      	cmp	r3, #192	; 0xc0
 8004c86:	d027      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c8c:	d82f      	bhi.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b80      	cmp	r3, #128	; 0x80
 8004c92:	d017      	beq.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d829      	bhi.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d004      	beq.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8004ca6:	e022      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe ffa4 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004cac:	61f8      	str	r0, [r7, #28]
          break;
 8004cae:	e023      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cb0:	f7fe ff08 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004cb4:	61f8      	str	r0, [r7, #28]
          break;
 8004cb6:	e01f      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	02dc6c00 	.word	0x02dc6c00
 8004cc0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cc4:	4b9b      	ldr	r3, [pc, #620]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d10f      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8004cd2:	4b99      	ldr	r3, [pc, #612]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004cd4:	61fb      	str	r3, [r7, #28]
          break;
 8004cd6:	e00c      	b.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cd8:	4b96      	ldr	r3, [pc, #600]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8004ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cea:	61fb      	str	r3, [r7, #28]
          break;
 8004cec:	e003      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004cee:	bf00      	nop
 8004cf0:	e2e0      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cf2:	bf00      	nop
 8004cf4:	e2de      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cf6:	bf00      	nop
        break;
 8004cf8:	e2dc      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004cfa:	4b8e      	ldr	r3, [pc, #568]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0c:	d025      	beq.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d14:	d82c      	bhi.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1c:	d013      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d824      	bhi.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	d004      	beq.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8004d34:	e01c      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d36:	f7fe ff5d 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004d3a:	61f8      	str	r0, [r7, #28]
          break;
 8004d3c:	e01d      	b.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fe fec1 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004d42:	61f8      	str	r0, [r7, #28]
          break;
 8004d44:	e019      	b.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d46:	4b7b      	ldr	r3, [pc, #492]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d10f      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8004d54:	4b78      	ldr	r3, [pc, #480]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004d56:	61fb      	str	r3, [r7, #28]
          break;
 8004d58:	e00c      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d5a:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d107      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8004d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6c:	61fb      	str	r3, [r7, #28]
          break;
 8004d6e:	e003      	b.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8004d70:	bf00      	nop
 8004d72:	e29f      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d74:	bf00      	nop
 8004d76:	e29d      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d78:	bf00      	nop
        break;
 8004d7a:	e29b      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d7c:	4b6d      	ldr	r3, [pc, #436]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d8e:	d025      	beq.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d96:	d82c      	bhi.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9e:	d013      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da6:	d824      	bhi.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d004      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8004db6:	e01c      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fe ff1c 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	61f8      	str	r0, [r7, #28]
          break;
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8004dc0:	f7fe fe80 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004dc4:	61f8      	str	r0, [r7, #28]
          break;
 8004dc6:	e019      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dc8:	4b5a      	ldr	r3, [pc, #360]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd4:	d10f      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8004dd6:	4b58      	ldr	r3, [pc, #352]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004dd8:	61fb      	str	r3, [r7, #28]
          break;
 8004dda:	e00c      	b.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ddc:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d107      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dee:	61fb      	str	r3, [r7, #28]
          break;
 8004df0:	e003      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8004df2:	bf00      	nop
 8004df4:	e25e      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004df6:	bf00      	nop
 8004df8:	e25c      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004dfa:	bf00      	nop
        break;
 8004dfc:	e25a      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004dfe:	4b4d      	ldr	r3, [pc, #308]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e10:	d007      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e18:	d12f      	bne.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fe fe53 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004e1e:	61f8      	str	r0, [r7, #28]
          break;
 8004e20:	e02e      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004e22:	4b44      	ldr	r3, [pc, #272]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2e:	d126      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004e30:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d020      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e3c:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e46:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	fb03 f202 	mul.w	r2, r3, r2
 8004e50:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004e62:	4b34      	ldr	r3, [pc, #208]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	0e5b      	lsrs	r3, r3, #25
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	61fb      	str	r3, [r7, #28]
          break;
 8004e78:	e001      	b.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8004e7a:	bf00      	nop
 8004e7c:	e21a      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e7e:	bf00      	nop
        break;
 8004e80:	e218      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004e82:	4b2c      	ldr	r3, [pc, #176]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fe fec4 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8004e98:	61f8      	str	r0, [r7, #28]
        break;
 8004e9a:	e20b      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e9c:	f7fe fe12 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004ea0:	61f8      	str	r0, [r7, #28]
        break;
 8004ea2:	e207      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004ea4:	4b23      	ldr	r3, [pc, #140]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eaa:	f003 0318 	and.w	r3, r3, #24
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d010      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d834      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d024      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8004ec8:	e02d      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ed0:	f000 fbe2 	bl	8005698 <RCCEx_GetSAIxPeriphCLKFreq>
 8004ed4:	61f8      	str	r0, [r7, #28]
          break;
 8004ed6:	e02b      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ed8:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d122      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004ee4:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004ef0:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	e005      	b.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0e:	61fb      	str	r3, [r7, #28]
          break;
 8004f10:	e00b      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004f22:	61fb      	str	r3, [r7, #28]
          break;
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8004f26:	bf00      	nop
 8004f28:	e1c4      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f2a:	bf00      	nop
 8004f2c:	e1c2      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f2e:	bf00      	nop
        break;
 8004f30:	e1c0      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	0800d80c 	.word	0x0800d80c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004f40:	4b96      	ldr	r3, [pc, #600]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d013      	beq.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5a:	d819      	bhi.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f68:	d004      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8004f6a:	e011      	b.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f6c:	f7fe fe42 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004f70:	61f8      	str	r0, [r7, #28]
          break;
 8004f72:	e010      	b.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f74:	f7fe fda6 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004f78:	61f8      	str	r0, [r7, #28]
          break;
 8004f7a:	e00c      	b.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f7c:	4b87      	ldr	r3, [pc, #540]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f88:	d104      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8004f8a:	4b85      	ldr	r3, [pc, #532]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004f8c:	61fb      	str	r3, [r7, #28]
          break;
 8004f8e:	e001      	b.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8004f90:	bf00      	nop
 8004f92:	e18f      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f94:	bf00      	nop
        break;
 8004f96:	e18d      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f98:	4b80      	ldr	r3, [pc, #512]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb2:	d819      	bhi.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fc0:	d004      	beq.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8004fc2:	e011      	b.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fc4:	f7fe fe16 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004fc8:	61f8      	str	r0, [r7, #28]
          break;
 8004fca:	e010      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fcc:	f7fe fd7a 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004fd0:	61f8      	str	r0, [r7, #28]
          break;
 8004fd2:	e00c      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fd4:	4b71      	ldr	r3, [pc, #452]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe0:	d104      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8004fe2:	4b6f      	ldr	r3, [pc, #444]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004fe4:	61fb      	str	r3, [r7, #28]
          break;
 8004fe6:	e001      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8004fe8:	bf00      	nop
 8004fea:	e163      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004fec:	bf00      	nop
        break;
 8004fee:	e161      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ff0:	4b6a      	ldr	r3, [pc, #424]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005002:	d013      	beq.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800500a:	d819      	bhi.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005018:	d004      	beq.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800501a:	e011      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe fdea 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8005020:	61f8      	str	r0, [r7, #28]
          break;
 8005022:	e010      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005024:	f7fe fd4e 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8005028:	61f8      	str	r0, [r7, #28]
          break;
 800502a:	e00c      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800502c:	4b5b      	ldr	r3, [pc, #364]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005038:	d104      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800503a:	4b59      	ldr	r3, [pc, #356]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800503c:	61fb      	str	r3, [r7, #28]
          break;
 800503e:	e001      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005040:	bf00      	nop
 8005042:	e137      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005044:	bf00      	nop
        break;
 8005046:	e135      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005048:	4b54      	ldr	r3, [pc, #336]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800504a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d011      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d818      	bhi.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d004      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800506c:	e011      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800506e:	f7fe fdc1 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8005072:	61f8      	str	r0, [r7, #28]
          break;
 8005074:	e010      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005076:	f7fe fd25 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 800507a:	61f8      	str	r0, [r7, #28]
          break;
 800507c:	e00c      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800507e:	4b47      	ldr	r3, [pc, #284]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	d104      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800508c:	4b44      	ldr	r3, [pc, #272]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800508e:	61fb      	str	r3, [r7, #28]
          break;
 8005090:	e001      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005092:	bf00      	nop
 8005094:	e10e      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005096:	bf00      	nop
        break;
 8005098:	e10c      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800509a:	4b40      	ldr	r3, [pc, #256]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050ac:	d02c      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050b4:	d833      	bhi.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050bc:	d01a      	beq.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050c4:	d82b      	bhi.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050d2:	d004      	beq.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80050d4:	e023      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050d6:	f7fe fd8d 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80050da:	61f8      	str	r0, [r7, #28]
          break;
 80050dc:	e026      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050de:	4b2f      	ldr	r3, [pc, #188]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d11a      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80050ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80050f0:	61fb      	str	r3, [r7, #28]
          break;
 80050f2:	e016      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050f4:	4b29      	ldr	r3, [pc, #164]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005100:	d111      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005102:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005104:	61fb      	str	r3, [r7, #28]
          break;
 8005106:	e00e      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005108:	4b24      	ldr	r3, [pc, #144]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d109      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511a:	61fb      	str	r3, [r7, #28]
          break;
 800511c:	e005      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800511e:	bf00      	nop
 8005120:	e0c8      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005122:	bf00      	nop
 8005124:	e0c6      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005126:	bf00      	nop
 8005128:	e0c4      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800512a:	bf00      	nop
        break;
 800512c:	e0c2      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005140:	d030      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005148:	d837      	bhi.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005150:	d01a      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005158:	d82f      	bhi.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005166:	d004      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005168:	e027      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800516a:	f7fe fd43 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 800516e:	61f8      	str	r0, [r7, #28]
          break;
 8005170:	e02a      	b.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d11e      	bne.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005180:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005184:	61fb      	str	r3, [r7, #28]
          break;
 8005186:	e01a      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005194:	d115      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005196:	4b02      	ldr	r3, [pc, #8]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005198:	61fb      	str	r3, [r7, #28]
          break;
 800519a:	e012      	b.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800519c:	40021000 	.word	0x40021000
 80051a0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051a4:	4b46      	ldr	r3, [pc, #280]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d109      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80051b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b6:	61fb      	str	r3, [r7, #28]
          break;
 80051b8:	e005      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80051ba:	bf00      	nop
 80051bc:	e07a      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051be:	bf00      	nop
 80051c0:	e078      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051c2:	bf00      	nop
 80051c4:	e076      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051c6:	bf00      	nop
        break;
 80051c8:	e074      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80051ca:	4b3d      	ldr	r3, [pc, #244]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051dc:	d02c      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051e4:	d855      	bhi.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f2:	d004      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80051f4:	e04d      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fe fc65 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 80051fa:	61f8      	str	r0, [r7, #28]
          break;
 80051fc:	e04e      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80051fe:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d145      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800520a:	4b2d      	ldr	r3, [pc, #180]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005216:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	e005      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005222:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005234:	61fb      	str	r3, [r7, #28]
          break;
 8005236:	e02e      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005238:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005244:	d129      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005246:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005252:	d122      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	fb03 f202 	mul.w	r2, r3, r2
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	3301      	adds	r3, #1
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800527a:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	0d5b      	lsrs	r3, r3, #21
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	3301      	adds	r3, #1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	fbb2 f3f3 	udiv	r3, r2, r3
 800528e:	61fb      	str	r3, [r7, #28]
          break;
 8005290:	e003      	b.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005292:	bf00      	nop
 8005294:	e00e      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005296:	bf00      	nop
 8005298:	e00c      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800529a:	bf00      	nop
        break;
 800529c:	e00a      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800529e:	bf00      	nop
 80052a0:	e008      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052a2:	bf00      	nop
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052a6:	bf00      	nop
 80052a8:	e004      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052aa:	bf00      	nop
 80052ac:	e002      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052b2:	bf00      	nop
    }
  }

  return(frequency);
 80052b4:	69fb      	ldr	r3, [r7, #28]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	0800d80c 	.word	0x0800d80c

080052c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052d6:	4b72      	ldr	r3, [pc, #456]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052e2:	4b6f      	ldr	r3, [pc, #444]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0203 	and.w	r2, r3, #3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d103      	bne.n	80052fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
       ||
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d142      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
 80052fe:	e03f      	b.n	8005380 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d018      	beq.n	800533a <RCCEx_PLLSAI1_Config+0x72>
 8005308:	2b03      	cmp	r3, #3
 800530a:	d825      	bhi.n	8005358 <RCCEx_PLLSAI1_Config+0x90>
 800530c:	2b01      	cmp	r3, #1
 800530e:	d002      	beq.n	8005316 <RCCEx_PLLSAI1_Config+0x4e>
 8005310:	2b02      	cmp	r3, #2
 8005312:	d009      	beq.n	8005328 <RCCEx_PLLSAI1_Config+0x60>
 8005314:	e020      	b.n	8005358 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005316:	4b62      	ldr	r3, [pc, #392]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11d      	bne.n	800535e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005326:	e01a      	b.n	800535e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005328:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d116      	bne.n	8005362 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005338:	e013      	b.n	8005362 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800533a:	4b59      	ldr	r3, [pc, #356]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005346:	4b56      	ldr	r3, [pc, #344]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005356:	e006      	b.n	8005366 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      break;
 800535c:	e004      	b.n	8005368 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005366:	bf00      	nop
    }

    if(status == HAL_OK)
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d108      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800536e:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f023 0203 	bic.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4949      	ldr	r1, [pc, #292]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 8086 	bne.w	8005494 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005388:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a44      	ldr	r2, [pc, #272]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800538e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fb ff6a 	bl	800126c <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800539a:	e009      	b.n	80053b0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800539c:	f7fb ff66 	bl	800126c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	73fb      	strb	r3, [r7, #15]
        break;
 80053ae:	e005      	b.n	80053bc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053b0:	4b3b      	ldr	r3, [pc, #236]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ef      	bne.n	800539c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d168      	bne.n	8005494 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d113      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053c8:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6892      	ldr	r2, [r2, #8]
 80053d4:	0211      	lsls	r1, r2, #8
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68d2      	ldr	r2, [r2, #12]
 80053da:	06d2      	lsls	r2, r2, #27
 80053dc:	4311      	orrs	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6852      	ldr	r2, [r2, #4]
 80053e2:	3a01      	subs	r2, #1
 80053e4:	0112      	lsls	r2, r2, #4
 80053e6:	430a      	orrs	r2, r1
 80053e8:	492d      	ldr	r1, [pc, #180]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	610b      	str	r3, [r1, #16]
 80053ee:	e02d      	b.n	800544c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d115      	bne.n	8005422 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f6:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	0211      	lsls	r1, r2, #8
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6912      	ldr	r2, [r2, #16]
 8005408:	0852      	lsrs	r2, r2, #1
 800540a:	3a01      	subs	r2, #1
 800540c:	0552      	lsls	r2, r2, #21
 800540e:	4311      	orrs	r1, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6852      	ldr	r2, [r2, #4]
 8005414:	3a01      	subs	r2, #1
 8005416:	0112      	lsls	r2, r2, #4
 8005418:	430a      	orrs	r2, r1
 800541a:	4921      	ldr	r1, [pc, #132]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	610b      	str	r3, [r1, #16]
 8005420:	e014      	b.n	800544c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005422:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005428:	4013      	ands	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6892      	ldr	r2, [r2, #8]
 800542e:	0211      	lsls	r1, r2, #8
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6952      	ldr	r2, [r2, #20]
 8005434:	0852      	lsrs	r2, r2, #1
 8005436:	3a01      	subs	r2, #1
 8005438:	0652      	lsls	r2, r2, #25
 800543a:	4311      	orrs	r1, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6852      	ldr	r2, [r2, #4]
 8005440:	3a01      	subs	r2, #1
 8005442:	0112      	lsls	r2, r2, #4
 8005444:	430a      	orrs	r2, r1
 8005446:	4916      	ldr	r1, [pc, #88]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005456:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fb ff08 	bl	800126c <HAL_GetTick>
 800545c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800545e:	e009      	b.n	8005474 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005460:	f7fb ff04 	bl	800126c <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d902      	bls.n	8005474 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	73fb      	strb	r3, [r7, #15]
          break;
 8005472:	e005      	b.n	8005480 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005474:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ef      	beq.n	8005460 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	4904      	ldr	r1, [pc, #16]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005490:	4313      	orrs	r3, r2
 8005492:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	07ff800f 	.word	0x07ff800f
 80054a8:	ff9f800f 	.word	0xff9f800f
 80054ac:	f9ff800f 	.word	0xf9ff800f

080054b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054be:	4b72      	ldr	r3, [pc, #456]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00e      	beq.n	80054e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054ca:	4b6f      	ldr	r3, [pc, #444]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0203 	and.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d103      	bne.n	80054e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
       ||
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d142      	bne.n	8005568 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	73fb      	strb	r3, [r7, #15]
 80054e6:	e03f      	b.n	8005568 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d018      	beq.n	8005522 <RCCEx_PLLSAI2_Config+0x72>
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d825      	bhi.n	8005540 <RCCEx_PLLSAI2_Config+0x90>
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d002      	beq.n	80054fe <RCCEx_PLLSAI2_Config+0x4e>
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d009      	beq.n	8005510 <RCCEx_PLLSAI2_Config+0x60>
 80054fc:	e020      	b.n	8005540 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054fe:	4b62      	ldr	r3, [pc, #392]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11d      	bne.n	8005546 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550e:	e01a      	b.n	8005546 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005510:	4b5d      	ldr	r3, [pc, #372]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005518:	2b00      	cmp	r3, #0
 800551a:	d116      	bne.n	800554a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005520:	e013      	b.n	800554a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005522:	4b59      	ldr	r3, [pc, #356]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10f      	bne.n	800554e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800552e:	4b56      	ldr	r3, [pc, #344]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800553e:	e006      	b.n	800554e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
      break;
 8005544:	e004      	b.n	8005550 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005546:	bf00      	nop
 8005548:	e002      	b.n	8005550 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800554e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005556:	4b4c      	ldr	r3, [pc, #304]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4949      	ldr	r1, [pc, #292]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f040 8086 	bne.w	800567c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005570:	4b45      	ldr	r3, [pc, #276]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a44      	ldr	r2, [pc, #272]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800557a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557c:	f7fb fe76 	bl	800126c <HAL_GetTick>
 8005580:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005582:	e009      	b.n	8005598 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005584:	f7fb fe72 	bl	800126c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d902      	bls.n	8005598 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	73fb      	strb	r3, [r7, #15]
        break;
 8005596:	e005      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005598:	4b3b      	ldr	r3, [pc, #236]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1ef      	bne.n	8005584 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d168      	bne.n	800567c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055b0:	4b35      	ldr	r3, [pc, #212]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	4b35      	ldr	r3, [pc, #212]	; (800568c <RCCEx_PLLSAI2_Config+0x1dc>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	0211      	lsls	r1, r2, #8
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	06d2      	lsls	r2, r2, #27
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6852      	ldr	r2, [r2, #4]
 80055ca:	3a01      	subs	r2, #1
 80055cc:	0112      	lsls	r2, r2, #4
 80055ce:	430a      	orrs	r2, r1
 80055d0:	492d      	ldr	r1, [pc, #180]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	614b      	str	r3, [r1, #20]
 80055d6:	e02d      	b.n	8005634 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d115      	bne.n	800560a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <RCCEx_PLLSAI2_Config+0x1e0>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6892      	ldr	r2, [r2, #8]
 80055ea:	0211      	lsls	r1, r2, #8
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6912      	ldr	r2, [r2, #16]
 80055f0:	0852      	lsrs	r2, r2, #1
 80055f2:	3a01      	subs	r2, #1
 80055f4:	0552      	lsls	r2, r2, #21
 80055f6:	4311      	orrs	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6852      	ldr	r2, [r2, #4]
 80055fc:	3a01      	subs	r2, #1
 80055fe:	0112      	lsls	r2, r2, #4
 8005600:	430a      	orrs	r2, r1
 8005602:	4921      	ldr	r1, [pc, #132]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005604:	4313      	orrs	r3, r2
 8005606:	614b      	str	r3, [r1, #20]
 8005608:	e014      	b.n	8005634 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800560a:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	4b21      	ldr	r3, [pc, #132]	; (8005694 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	0211      	lsls	r1, r2, #8
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6952      	ldr	r2, [r2, #20]
 800561c:	0852      	lsrs	r2, r2, #1
 800561e:	3a01      	subs	r2, #1
 8005620:	0652      	lsls	r2, r2, #25
 8005622:	4311      	orrs	r1, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6852      	ldr	r2, [r2, #4]
 8005628:	3a01      	subs	r2, #1
 800562a:	0112      	lsls	r2, r2, #4
 800562c:	430a      	orrs	r2, r1
 800562e:	4916      	ldr	r1, [pc, #88]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005630:	4313      	orrs	r3, r2
 8005632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 800563a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005640:	f7fb fe14 	bl	800126c <HAL_GetTick>
 8005644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005646:	e009      	b.n	800565c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005648:	f7fb fe10 	bl	800126c <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d902      	bls.n	800565c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	73fb      	strb	r3, [r7, #15]
          break;
 800565a:	e005      	b.n	8005668 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0ef      	beq.n	8005648 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	4904      	ldr	r1, [pc, #16]	; (8005688 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005678:	4313      	orrs	r3, r2
 800567a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	07ff800f 	.word	0x07ff800f
 8005690:	ff9f800f 	.word	0xff9f800f
 8005694:	f9ff800f 	.word	0xf9ff800f

08005698 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d10b      	bne.n	80056ce <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80056b6:	4b7e      	ldr	r3, [pc, #504]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056bc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80056c0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b60      	cmp	r3, #96	; 0x60
 80056c6:	d112      	bne.n	80056ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80056c8:	4b7a      	ldr	r3, [pc, #488]	; (80058b4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e00f      	b.n	80056ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d4:	d10b      	bne.n	80056ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80056d6:	4b76      	ldr	r3, [pc, #472]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056e0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e8:	d101      	bne.n	80056ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80056ea:	4b72      	ldr	r3, [pc, #456]	; (80058b4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80056ec:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 80d6 	bne.w	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d003      	beq.n	8005708 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005706:	d13b      	bne.n	8005780 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005708:	4b69      	ldr	r3, [pc, #420]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005714:	f040 80c4 	bne.w	80058a0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005718:	4b65      	ldr	r3, [pc, #404]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80bd 	beq.w	80058a0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005726:	4b62      	ldr	r3, [pc, #392]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	091b      	lsrs	r3, r3, #4
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	3301      	adds	r3, #1
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800573a:	4b5d      	ldr	r3, [pc, #372]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005744:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005746:	4b5a      	ldr	r3, [pc, #360]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	0edb      	lsrs	r3, r3, #27
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005758:	4b55      	ldr	r3, [pc, #340]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005764:	2311      	movs	r3, #17
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e001      	b.n	800576e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800576a:	2307      	movs	r3, #7
 800576c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	fb03 f202 	mul.w	r2, r3, r2
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800577e:	e08f      	b.n	80058a0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d13a      	bne.n	80057fc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005786:	4b4a      	ldr	r3, [pc, #296]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005792:	f040 8086 	bne.w	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d07f      	beq.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80057a2:	4b43      	ldr	r3, [pc, #268]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	3301      	adds	r3, #1
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80057b6:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	0edb      	lsrs	r3, r3, #27
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80057d4:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80057e0:	2311      	movs	r3, #17
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e001      	b.n	80057ea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80057e6:	2307      	movs	r3, #7
 80057e8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	fb03 f202 	mul.w	r2, r3, r2
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	e052      	b.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d003      	beq.n	800580a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d109      	bne.n	800581e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800580a:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005816:	d144      	bne.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005818:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800581a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800581c:	e041      	b.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b20      	cmp	r3, #32
 8005822:	d003      	beq.n	800582c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582a:	d13a      	bne.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800582c:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005838:	d133      	bne.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800583a:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d02d      	beq.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	3301      	adds	r3, #1
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005864:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	0edb      	lsrs	r3, r3, #27
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005884:	2311      	movs	r3, #17
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e001      	b.n	800588e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800588a:	2307      	movs	r3, #7
 800588c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	fb03 f202 	mul.w	r2, r3, r2
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e000      	b.n	80058a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80058a0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80058a2:	69fb      	ldr	r3, [r7, #28]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3724      	adds	r7, #36	; 0x24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40021000 	.word	0x40021000
 80058b4:	001fff68 	.word	0x001fff68
 80058b8:	00f42400 	.word	0x00f42400

080058bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e078      	b.n	80059c0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fb fa57 	bl	8000d94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2203      	movs	r2, #3
 80058ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f86a 	bl	80059c8 <HAL_SD_InitCard>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e060      	b.n	80059c0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fdcd 	bl	80064a4 <HAL_SD_GetCardStatus>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e055      	b.n	80059c0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005914:	7e3b      	ldrb	r3, [r7, #24]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800591a:	7e7b      	ldrb	r3, [r7, #25]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d10a      	bne.n	800593e <HAL_SD_Init+0x82>
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d102      	bne.n	8005934 <HAL_SD_Init+0x78>
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593a:	65da      	str	r2, [r3, #92]	; 0x5c
 800593c:	e00b      	b.n	8005956 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d104      	bne.n	8005950 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800594c:	65da      	str	r2, [r3, #92]	; 0x5c
 800594e:	e002      	b.n	8005956 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fe83 	bl	8006668 <HAL_SD_ConfigWideBusOperation>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e029      	b.n	80059c0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800596c:	f7fb fc7e 	bl	800126c <HAL_GetTick>
 8005970:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005972:	e014      	b.n	800599e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005974:	f7fb fc7a 	bl	800126c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005982:	d10c      	bne.n	800599e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e010      	b.n	80059c0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 ff76 	bl	8006890 <HAL_SD_GetCardState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d1e4      	bne.n	8005974 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3728      	adds	r7, #40	; 0x28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059c8:	b5b0      	push	{r4, r5, r7, lr}
 80059ca:	b08e      	sub	sp, #56	; 0x38
 80059cc:	af04      	add	r7, sp, #16
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80059e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059e4:	f7fe fd4e 	bl	8004484 <HAL_RCCEx_GetPeriphCLKFreq>
 80059e8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e079      	b.n	8005af8 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	4a3d      	ldr	r2, [pc, #244]	; (8005b00 <HAL_SD_InitCard+0x138>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0210 	orr.w	r2, r2, #16
 8005a2e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681d      	ldr	r5, [r3, #0]
 8005a34:	466c      	mov	r4, sp
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f003 f8ad 	bl	8008ba8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f003 f8f0 	bl	8008c38 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <HAL_SD_InitCard+0x13c>)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fb fc08 	bl	8001284 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 ffeb 	bl	8006a50 <SD_PowerON>
 8005a7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e02e      	b.n	8005af8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 ff18 	bl	80068d0 <SD_InitCard>
 8005aa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e01b      	b.n	8005af8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f003 f94b 	bl	8008d64 <SDMMC_CmdBlockLength>
 8005ace:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a0b      	ldr	r2, [pc, #44]	; (8005b08 <HAL_SD_InitCard+0x140>)
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3728      	adds	r7, #40	; 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bdb0      	pop	{r4, r5, r7, pc}
 8005b00:	014f8b59 	.word	0x014f8b59
 8005b04:	00012110 	.word	0x00012110
 8005b08:	1fe00fff 	.word	0x1fe00fff

08005b0c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b092      	sub	sp, #72	; 0x48
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b1a:	f7fb fba7 	bl	800126c <HAL_GetTick>
 8005b1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e170      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	f040 8163 	bne.w	8005e12 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	441a      	add	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d907      	bls.n	8005b70 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e157      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2203      	movs	r2, #3
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d002      	beq.n	8005b8e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	025b      	lsls	r3, r3, #9
 8005b8c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b92:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	025b      	lsls	r3, r3, #9
 8005b98:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b9a:	2390      	movs	r3, #144	; 0x90
 8005b9c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f107 0214 	add.w	r2, r7, #20
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f003 f8a9 	bl	8008d0c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d90a      	bls.n	8005be6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f003 f907 	bl	8008df0 <SDMMC_CmdReadMultiBlock>
 8005be2:	6478      	str	r0, [r7, #68]	; 0x44
 8005be4:	e009      	b.n	8005bfa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f003 f8d9 	bl	8008daa <SDMMC_CmdReadSingleBlock>
 8005bf8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a88      	ldr	r2, [pc, #544]	; (8005e28 <HAL_SD_ReadBlocks+0x31c>)
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e0fc      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c2a:	e061      	b.n	8005cf0 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d03c      	beq.n	8005cb4 <HAL_SD_ReadBlocks+0x1a8>
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d039      	beq.n	8005cb4 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40
 8005c44:	e033      	b.n	8005cae <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f002 ffd6 	bl	8008bfc <SDMMC_ReadFIFO>
 8005c50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	3b01      	subs	r3, #1
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c72:	3301      	adds	r3, #1
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	3301      	adds	r3, #1
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	0e1b      	lsrs	r3, r3, #24
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005caa:	3301      	adds	r3, #1
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
 8005cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb0:	2b07      	cmp	r3, #7
 8005cb2:	d9c8      	bls.n	8005c46 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cb4:	f7fb fada 	bl	800126c <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d902      	bls.n	8005cca <HAL_SD_ReadBlocks+0x1be>
 8005cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d112      	bne.n	8005cf0 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a56      	ldr	r2, [pc, #344]	; (8005e28 <HAL_SD_ReadBlocks+0x31c>)
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e097      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d096      	beq.n	8005c2c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d0c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d022      	beq.n	8005d62 <HAL_SD_ReadBlocks+0x256>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d91f      	bls.n	8005d62 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d01b      	beq.n	8005d62 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f003 f8c8 	bl	8008ec4 <SDMMC_CmdStopTransfer>
 8005d34:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d012      	beq.n	8005d62 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a39      	ldr	r2, [pc, #228]	; (8005e28 <HAL_SD_ReadBlocks+0x31c>)
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e05e      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d012      	beq.n	8005d96 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <HAL_SD_ReadBlocks+0x31c>)
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	f043 0208 	orr.w	r2, r3, #8
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e044      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d012      	beq.n	8005dca <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1f      	ldr	r2, [pc, #124]	; (8005e28 <HAL_SD_ReadBlocks+0x31c>)
 8005daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	f043 0202 	orr.w	r2, r3, #2
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e02a      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <HAL_SD_ReadBlocks+0x31c>)
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e010      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_SD_ReadBlocks+0x320>)
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e006      	b.n	8005e20 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3748      	adds	r7, #72	; 0x48
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	1fe00fff 	.word	0x1fe00fff
 8005e2c:	18000f3a 	.word	0x18000f3a

08005e30 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b092      	sub	sp, #72	; 0x48
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e3e:	f7fb fa15 	bl	800126c <HAL_GetTick>
 8005e42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e174      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	f040 8167 	bne.w	800613e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	441a      	add	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d907      	bls.n	8005e94 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e15b      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2203      	movs	r2, #3
 8005e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d002      	beq.n	8005eb2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	025b      	lsls	r3, r3, #9
 8005eb0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	025b      	lsls	r3, r3, #9
 8005ebc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ebe:	2390      	movs	r3, #144	; 0x90
 8005ec0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f107 0218 	add.w	r2, r7, #24
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f002 ff17 	bl	8008d0c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eec:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d90a      	bls.n	8005f0a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f00:	4618      	mov	r0, r3
 8005f02:	f002 ffbb 	bl	8008e7c <SDMMC_CmdWriteMultiBlock>
 8005f06:	6478      	str	r0, [r7, #68]	; 0x44
 8005f08:	e009      	b.n	8005f1e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f16:	4618      	mov	r0, r3
 8005f18:	f002 ff8d 	bl	8008e36 <SDMMC_CmdWriteSingleBlock>
 8005f1c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d012      	beq.n	8005f4a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a8a      	ldr	r2, [pc, #552]	; (8006154 <HAL_SD_WriteBlocks+0x324>)
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	431a      	orrs	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e100      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f4e:	e065      	b.n	800601c <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d040      	beq.n	8005fe0 <HAL_SD_WriteBlocks+0x1b0>
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d03d      	beq.n	8005fe0 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f64:	2300      	movs	r3, #0
 8005f66:	643b      	str	r3, [r7, #64]	; 0x40
 8005f68:	e037      	b.n	8005fda <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	3301      	adds	r3, #1
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	021a      	lsls	r2, r3, #8
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f90:	3b01      	subs	r3, #1
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	041a      	lsls	r2, r3, #16
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	061a      	lsls	r2, r3, #24
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	3301      	adds	r3, #1
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f107 0214 	add.w	r2, r7, #20
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f002 fe21 	bl	8008c16 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fdc:	2b07      	cmp	r3, #7
 8005fde:	d9c4      	bls.n	8005f6a <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005fe0:	f7fb f944 	bl	800126c <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d902      	bls.n	8005ff6 <HAL_SD_WriteBlocks+0x1c6>
 8005ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d112      	bne.n	800601c <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a56      	ldr	r2, [pc, #344]	; (8006154 <HAL_SD_WriteBlocks+0x324>)
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e097      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006026:	2b00      	cmp	r3, #0
 8006028:	d092      	beq.n	8005f50 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006038:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d022      	beq.n	800608e <HAL_SD_WriteBlocks+0x25e>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d91f      	bls.n	800608e <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	2b03      	cmp	r3, #3
 8006054:	d01b      	beq.n	800608e <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f002 ff32 	bl	8008ec4 <SDMMC_CmdStopTransfer>
 8006060:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a39      	ldr	r2, [pc, #228]	; (8006154 <HAL_SD_WriteBlocks+0x324>)
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006076:	431a      	orrs	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e05e      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d012      	beq.n	80060c2 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2c      	ldr	r2, [pc, #176]	; (8006154 <HAL_SD_WriteBlocks+0x324>)
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	f043 0208 	orr.w	r2, r3, #8
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e044      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <HAL_SD_WriteBlocks+0x324>)
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	f043 0202 	orr.w	r2, r3, #2
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e02a      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	d012      	beq.n	800612a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a12      	ldr	r2, [pc, #72]	; (8006154 <HAL_SD_WriteBlocks+0x324>)
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	f043 0210 	orr.w	r2, r3, #16
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e010      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_SD_WriteBlocks+0x328>)
 8006130:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e006      	b.n	800614c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
  }
}
 800614c:	4618      	mov	r0, r3
 800614e:	3748      	adds	r7, #72	; 0x48
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	1fe00fff 	.word	0x1fe00fff
 8006158:	18000f3a 	.word	0x18000f3a

0800615c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616a:	0f9b      	lsrs	r3, r3, #30
 800616c:	b2da      	uxtb	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006176:	0e9b      	lsrs	r3, r3, #26
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	b2da      	uxtb	r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006188:	0e1b      	lsrs	r3, r3, #24
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	b2da      	uxtb	r2, r3
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	b2da      	uxtb	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061bc:	0d1b      	lsrs	r3, r3, #20
 80061be:	b29a      	uxth	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061da:	0bdb      	lsrs	r3, r3, #15
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ec:	0b9b      	lsrs	r3, r3, #14
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fe:	0b5b      	lsrs	r3, r3, #13
 8006200:	b2db      	uxtb	r3, r3
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006210:	0b1b      	lsrs	r3, r3, #12
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	b2da      	uxtb	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d163      	bne.n	80062f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006230:	009a      	lsls	r2, r3, #2
 8006232:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006236:	4013      	ands	r3, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800623c:	0f92      	lsrs	r2, r2, #30
 800623e:	431a      	orrs	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006248:	0edb      	lsrs	r3, r3, #27
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	b2da      	uxtb	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625a:	0e1b      	lsrs	r3, r3, #24
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	b2da      	uxtb	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626c:	0d5b      	lsrs	r3, r3, #21
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	b2da      	uxtb	r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627e:	0c9b      	lsrs	r3, r3, #18
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	b2da      	uxtb	r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006290:	0bdb      	lsrs	r3, r3, #15
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	b2da      	uxtb	r2, r3
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	7e1b      	ldrb	r3, [r3, #24]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	3302      	adds	r3, #2
 80062b4:	2201      	movs	r2, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062be:	fb03 f202 	mul.w	r2, r3, r2
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	7a1b      	ldrb	r3, [r3, #8]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	2201      	movs	r2, #1
 80062d2:	409a      	lsls	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80062e0:	0a52      	lsrs	r2, r2, #9
 80062e2:	fb03 f202 	mul.w	r2, r3, r2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f0:	659a      	str	r2, [r3, #88]	; 0x58
 80062f2:	e031      	b.n	8006358 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d11d      	bne.n	8006338 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630a:	0c1b      	lsrs	r3, r3, #16
 800630c:	431a      	orrs	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	3301      	adds	r3, #1
 8006318:	029a      	lsls	r2, r3, #10
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	659a      	str	r2, [r3, #88]	; 0x58
 8006336:	e00f      	b.n	8006358 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a58      	ldr	r2, [pc, #352]	; (80064a0 <HAL_SD_GetCardCSD+0x344>)
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e09d      	b.n	8006494 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635c:	0b9b      	lsrs	r3, r3, #14
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	b2da      	uxtb	r2, r3
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636e:	09db      	lsrs	r3, r3, #7
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006376:	b2da      	uxtb	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	b2da      	uxtb	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006390:	0fdb      	lsrs	r3, r3, #31
 8006392:	b2da      	uxtb	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639c:	0f5b      	lsrs	r3, r3, #29
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ae:	0e9b      	lsrs	r3, r3, #26
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c0:	0d9b      	lsrs	r3, r3, #22
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d2:	0d5b      	lsrs	r3, r3, #21
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ee:	0c1b      	lsrs	r3, r3, #16
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006402:	0bdb      	lsrs	r3, r3, #15
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006416:	0b9b      	lsrs	r3, r3, #14
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	b2da      	uxtb	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642a:	0b5b      	lsrs	r3, r3, #13
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	b2da      	uxtb	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643e:	0b1b      	lsrs	r3, r3, #12
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	b2da      	uxtb	r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	0a9b      	lsrs	r3, r3, #10
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	b2da      	uxtb	r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	b2db      	uxtb	r3, r3
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	b2da      	uxtb	r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006482:	b2da      	uxtb	r2, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	1fe00fff 	.word	0x1fe00fff

080064a4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b094      	sub	sp, #80	; 0x50
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80064b4:	f107 0308 	add.w	r3, r7, #8
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fbd4 	bl	8006c68 <SD_SendSDStatus>
 80064c0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80064c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d011      	beq.n	80064ec <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a4f      	ldr	r2, [pc, #316]	; (800660c <HAL_SD_GetCardStatus+0x168>)
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80064ea:	e070      	b.n	80065ce <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	b29b      	uxth	r3, r3
 8006512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006516:	b29a      	uxth	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	0e1b      	lsrs	r3, r3, #24
 800651c:	b29b      	uxth	r3, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	b29a      	uxth	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	061a      	lsls	r2, r3, #24
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006532:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800653c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	0e1b      	lsrs	r3, r3, #24
 8006542:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	b2da      	uxtb	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	0d1b      	lsrs	r3, r3, #20
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	b2da      	uxtb	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	b29b      	uxth	r3, r3
 8006570:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006574:	b29a      	uxth	r2, r3
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	b29b      	uxth	r3, r3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	b29b      	uxth	r3, r3
 800657e:	4313      	orrs	r3, r2
 8006580:	b29a      	uxth	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	0a9b      	lsrs	r3, r3, #10
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006590:	b2da      	uxtb	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	0a1b      	lsrs	r3, r3, #8
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	091b      	lsrs	r3, r3, #4
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	0e1b      	lsrs	r3, r3, #24
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065d6:	4618      	mov	r0, r3
 80065d8:	f002 fbc4 	bl	8008d64 <SDMMC_CmdBlockLength>
 80065dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80065de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00d      	beq.n	8006600 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a08      	ldr	r2, [pc, #32]	; (800660c <HAL_SD_GetCardStatus+0x168>)
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006600:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006604:	4618      	mov	r0, r3
 8006606:	3750      	adds	r7, #80	; 0x50
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	1fe00fff 	.word	0x1fe00fff

08006610 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006668:	b5b0      	push	{r4, r5, r7, lr}
 800666a:	b090      	sub	sp, #64	; 0x40
 800666c:	af04      	add	r7, sp, #16
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2203      	movs	r2, #3
 800667c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	2b03      	cmp	r3, #3
 8006686:	d02e      	beq.n	80066e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668e:	d106      	bne.n	800669e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
 800669c:	e029      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066a4:	d10a      	bne.n	80066bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fbd6 	bl	8006e58 <SD_WideBus_Enable>
 80066ac:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
 80066ba:	e01a      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fc13 	bl	8006eee <SD_WideBus_Disable>
 80066c8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
 80066d6:	e00c      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
 80066e4:	e005      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a60      	ldr	r2, [pc, #384]	; (8006880 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006708:	e097      	b.n	800683a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800670a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800670e:	f7fd feb9 	bl	8004484 <HAL_RCCEx_GetPeriphCLKFreq>
 8006712:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8086 	beq.w	8006828 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	4952      	ldr	r1, [pc, #328]	; (8006884 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800673a:	fba1 1303 	umull	r1, r3, r1, r3
 800673e:	0e1b      	lsrs	r3, r3, #24
 8006740:	429a      	cmp	r2, r3
 8006742:	d303      	bcc.n	800674c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	61fb      	str	r3, [r7, #28]
 800674a:	e05a      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006754:	d103      	bne.n	800675e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	e051      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006766:	d126      	bne.n	80067b6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10e      	bne.n	800678e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	4a45      	ldr	r2, [pc, #276]	; (8006888 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d906      	bls.n	8006786 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	4a42      	ldr	r2, [pc, #264]	; (8006884 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	0e5b      	lsrs	r3, r3, #25
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e03d      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	e039      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	4a3b      	ldr	r2, [pc, #236]	; (8006888 <HAL_SD_ConfigWideBusOperation+0x220>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d906      	bls.n	80067ae <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	4a38      	ldr	r2, [pc, #224]	; (8006884 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	0e5b      	lsrs	r3, r3, #25
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e029      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e025      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10e      	bne.n	80067dc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	4a32      	ldr	r2, [pc, #200]	; (800688c <HAL_SD_ConfigWideBusOperation+0x224>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d906      	bls.n	80067d4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	4a2e      	ldr	r2, [pc, #184]	; (8006884 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	0e1b      	lsrs	r3, r3, #24
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	e016      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e012      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	4a28      	ldr	r2, [pc, #160]	; (800688c <HAL_SD_ConfigWideBusOperation+0x224>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d906      	bls.n	80067fc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	4a24      	ldr	r2, [pc, #144]	; (8006884 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	0e1b      	lsrs	r3, r3, #24
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	e002      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681d      	ldr	r5, [r3, #0]
 800680c:	466c      	mov	r4, sp
 800680e:	f107 0318 	add.w	r3, r7, #24
 8006812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006820:	4628      	mov	r0, r5
 8006822:	f002 f9c1 	bl	8008ba8 <SDMMC_Init>
 8006826:	e008      	b.n	800683a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006842:	4618      	mov	r0, r3
 8006844:	f002 fa8e 	bl	8008d64 <SDMMC_CmdBlockLength>
 8006848:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a0a      	ldr	r2, [pc, #40]	; (8006880 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006876:	4618      	mov	r0, r3
 8006878:	3730      	adds	r7, #48	; 0x30
 800687a:	46bd      	mov	sp, r7
 800687c:	bdb0      	pop	{r4, r5, r7, pc}
 800687e:	bf00      	nop
 8006880:	1fe00fff 	.word	0x1fe00fff
 8006884:	55e63b89 	.word	0x55e63b89
 8006888:	02faf080 	.word	0x02faf080
 800688c:	017d7840 	.word	0x017d7840

08006890 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800689c:	f107 030c 	add.w	r3, r7, #12
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fab0 	bl	8006e08 <SD_SendStatus>
 80068a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	0a5b      	lsrs	r3, r3, #9
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068c6:	693b      	ldr	r3, [r7, #16]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068d0:	b5b0      	push	{r4, r5, r7, lr}
 80068d2:	b090      	sub	sp, #64	; 0x40
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068d8:	2301      	movs	r3, #1
 80068da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f002 f9bb 	bl	8008c5c <SDMMC_GetPowerState>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068f0:	e0a9      	b.n	8006a46 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d02e      	beq.n	8006958 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f002 fc00 	bl	8009104 <SDMMC_CmdSendCID>
 8006904:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <SD_InitCard+0x40>
    {
      return errorstate;
 800690c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690e:	e09a      	b.n	8006a46 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f002 f9e5 	bl	8008ce6 <SDMMC_GetResponse>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2104      	movs	r1, #4
 8006928:	4618      	mov	r0, r3
 800692a:	f002 f9dc 	bl	8008ce6 <SDMMC_GetResponse>
 800692e:	4602      	mov	r2, r0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2108      	movs	r1, #8
 800693a:	4618      	mov	r0, r3
 800693c:	f002 f9d3 	bl	8008ce6 <SDMMC_GetResponse>
 8006940:	4602      	mov	r2, r0
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	210c      	movs	r1, #12
 800694c:	4618      	mov	r0, r3
 800694e:	f002 f9ca 	bl	8008ce6 <SDMMC_GetResponse>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	2b03      	cmp	r3, #3
 800695e:	d00d      	beq.n	800697c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f107 020e 	add.w	r2, r7, #14
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f002 fc09 	bl	8009182 <SDMMC_CmdSetRelAdd>
 8006970:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <SD_InitCard+0xac>
    {
      return errorstate;
 8006978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697a:	e064      	b.n	8006a46 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006980:	2b03      	cmp	r3, #3
 8006982:	d036      	beq.n	80069f2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f002 fbd2 	bl	8009142 <SDMMC_CmdSendCSD>
 800699e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <SD_InitCard+0xda>
    {
      return errorstate;
 80069a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a8:	e04d      	b.n	8006a46 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f002 f998 	bl	8008ce6 <SDMMC_GetResponse>
 80069b6:	4602      	mov	r2, r0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2104      	movs	r1, #4
 80069c2:	4618      	mov	r0, r3
 80069c4:	f002 f98f 	bl	8008ce6 <SDMMC_GetResponse>
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2108      	movs	r1, #8
 80069d4:	4618      	mov	r0, r3
 80069d6:	f002 f986 	bl	8008ce6 <SDMMC_GetResponse>
 80069da:	4602      	mov	r2, r0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	210c      	movs	r1, #12
 80069e6:	4618      	mov	r0, r3
 80069e8:	f002 f97d 	bl	8008ce6 <SDMMC_GetResponse>
 80069ec:	4602      	mov	r2, r0
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2104      	movs	r1, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 f974 	bl	8008ce6 <SDMMC_GetResponse>
 80069fe:	4603      	mov	r3, r0
 8006a00:	0d1a      	lsrs	r2, r3, #20
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a06:	f107 0310 	add.w	r3, r7, #16
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff fba5 	bl	800615c <HAL_SD_GetCardCSD>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a1c:	e013      	b.n	8006a46 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6819      	ldr	r1, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	2200      	movs	r2, #0
 8006a2a:	461c      	mov	r4, r3
 8006a2c:	4615      	mov	r5, r2
 8006a2e:	4622      	mov	r2, r4
 8006a30:	462b      	mov	r3, r5
 8006a32:	4608      	mov	r0, r1
 8006a34:	f002 fa7c 	bl	8008f30 <SDMMC_CmdSelDesel>
 8006a38:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <SD_InitCard+0x174>
  {
    return errorstate;
 8006a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a42:	e000      	b.n	8006a46 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3740      	adds	r7, #64	; 0x40
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	2300      	movs	r3, #0
 8006a62:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006a64:	f7fa fc02 	bl	800126c <HAL_GetTick>
 8006a68:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f002 fa82 	bl	8008f78 <SDMMC_CmdGoIdleState>
 8006a74:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <SD_PowerON+0x30>
  {
    return errorstate;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	e0ed      	b.n	8006c5c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f002 fa95 	bl	8008fb4 <SDMMC_CmdOperCond>
 8006a8a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f002 fa6b 	bl	8008f78 <SDMMC_CmdGoIdleState>
 8006aa2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <SD_PowerON+0x64>
    {
      return errorstate;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	e0d6      	b.n	8006c5c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d137      	bne.n	8006b2c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 fa96 	bl	8008ff4 <SDMMC_CmdAppCommand>
 8006ac8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d02d      	beq.n	8006b2c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ad0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ad4:	e0c2      	b.n	8006c5c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f002 fa89 	bl	8008ff4 <SDMMC_CmdAppCommand>
 8006ae2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <SD_PowerON+0x9e>
    {
      return errorstate;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	e0b6      	b.n	8006c5c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	495c      	ldr	r1, [pc, #368]	; (8006c64 <SD_PowerON+0x214>)
 8006af4:	4618      	mov	r0, r3
 8006af6:	f002 faa0 	bl	800903a <SDMMC_CmdAppOperCommand>
 8006afa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b06:	e0a9      	b.n	8006c5c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f002 f8e9 	bl	8008ce6 <SDMMC_GetResponse>
 8006b14:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	0fdb      	lsrs	r3, r3, #31
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <SD_PowerON+0xd2>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <SD_PowerON+0xd4>
 8006b22:	2300      	movs	r3, #0
 8006b24:	61bb      	str	r3, [r7, #24]

    count++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d802      	bhi.n	8006b3c <SD_PowerON+0xec>
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0cc      	beq.n	8006ad6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d902      	bls.n	8006b4c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b4a:	e087      	b.n	8006c5c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d07e      	beq.n	8006c54 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d17a      	bne.n	8006c5a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d075      	beq.n	8006c5a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b74:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0208 	orr.w	r2, r2, #8
 8006b84:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f002 fb60 	bl	8009250 <SDMMC_CmdVoltageSwitch>
 8006b90:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <SD_PowerON+0x162>
        {
          return errorstate;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	e05f      	b.n	8006c5c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b9c:	f7fa fb66 	bl	800126c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006baa:	d102      	bne.n	8006bb2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bb0:	e054      	b.n	8006c5c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bc0:	d1ec      	bne.n	8006b9c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bda:	d002      	beq.n	8006be2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006bdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006be0:	e03c      	b.n	8006c5c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006be2:	2001      	movs	r0, #1
 8006be4:	f000 fa9e 	bl	8007124 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0204 	orr.w	r2, r2, #4
 8006bf6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006bf8:	e00a      	b.n	8006c10 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bfa:	f7fa fb37 	bl	800126c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c08:	d102      	bne.n	8006c10 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006c0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c0e:	e025      	b.n	8006c5c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c1e:	d1ec      	bne.n	8006bfa <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c38:	d102      	bne.n	8006c40 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c3e:	e00d      	b.n	8006c5c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2213      	movs	r2, #19
 8006c46:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
 8006c52:	e002      	b.n	8006c5a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	c1100000 	.word	0xc1100000

08006c68 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c72:	f7fa fafb 	bl	800126c <HAL_GetTick>
 8006c76:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f002 f82f 	bl	8008ce6 <SDMMC_GetResponse>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c92:	d102      	bne.n	8006c9a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c98:	e0b0      	b.n	8006dfc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2140      	movs	r1, #64	; 0x40
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 f85f 	bl	8008d64 <SDMMC_CmdBlockLength>
 8006ca6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	e0a0      	b.n	8006dfc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f002 f994 	bl	8008ff4 <SDMMC_CmdAppCommand>
 8006ccc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	e08d      	b.n	8006dfc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006cea:	2360      	movs	r3, #96	; 0x60
 8006cec:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f107 0208 	add.w	r2, r7, #8
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f002 f801 	bl	8008d0c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f002 fa7c 	bl	800920c <SDMMC_CmdStatusRegister>
 8006d14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d02b      	beq.n	8006d74 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	e069      	b.n	8006dfc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d013      	beq.n	8006d5e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006d36:	2300      	movs	r3, #0
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3a:	e00d      	b.n	8006d58 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 ff5b 	bl	8008bfc <SDMMC_ReadFIFO>
 8006d46:	4602      	mov	r2, r0
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	601a      	str	r2, [r3, #0]
        pData++;
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	3304      	adds	r3, #4
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	3301      	adds	r3, #1
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2b07      	cmp	r3, #7
 8006d5c:	d9ee      	bls.n	8006d3c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d5e:	f7fa fa85 	bl	800126c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d6c:	d102      	bne.n	8006d74 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d72:	e043      	b.n	8006dfc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0d2      	beq.n	8006d28 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d90:	2308      	movs	r3, #8
 8006d92:	e033      	b.n	8006dfc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006da2:	2302      	movs	r3, #2
 8006da4:	e02a      	b.n	8006dfc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d017      	beq.n	8006de4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006db4:	2320      	movs	r3, #32
 8006db6:	e021      	b.n	8006dfc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 ff1d 	bl	8008bfc <SDMMC_ReadFIFO>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	601a      	str	r2, [r3, #0]
    pData++;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	3304      	adds	r3, #4
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006dce:	f7fa fa4d 	bl	800126c <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ddc:	d102      	bne.n	8006de4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006dde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006de2:	e00b      	b.n	8006dfc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e2      	bne.n	8006db8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a03      	ldr	r2, [pc, #12]	; (8006e04 <SD_SendSDStatus+0x19c>)
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3730      	adds	r7, #48	; 0x30
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	18000f3a 	.word	0x18000f3a

08006e08 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e1c:	e018      	b.n	8006e50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	041b      	lsls	r3, r3, #16
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f002 f9cb 	bl	80091c6 <SDMMC_CmdSendStatus>
 8006e30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	e009      	b.n	8006e50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 ff4f 	bl	8008ce6 <SDMMC_GetResponse>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 ff39 	bl	8008ce6 <SDMMC_GetResponse>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e7e:	d102      	bne.n	8006e86 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e84:	e02f      	b.n	8006ee6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e86:	f107 030c 	add.w	r3, r7, #12
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f879 	bl	8006f84 <SD_FindSCR>
 8006e92:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	e023      	b.n	8006ee6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01c      	beq.n	8006ee2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f002 f89d 	bl	8008ff4 <SDMMC_CmdAppCommand>
 8006eba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	e00f      	b.n	8006ee6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f002 f8d4 	bl	800907a <SDMMC_CmdBusWidth>
 8006ed2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	e003      	b.n	8006ee6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e001      	b.n	8006ee6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ee2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 feee 	bl	8008ce6 <SDMMC_GetResponse>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f14:	d102      	bne.n	8006f1c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f1a:	e02f      	b.n	8006f7c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f1c:	f107 030c 	add.w	r3, r7, #12
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f82e 	bl	8006f84 <SD_FindSCR>
 8006f28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	e023      	b.n	8006f7c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01c      	beq.n	8006f78 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f002 f852 	bl	8008ff4 <SDMMC_CmdAppCommand>
 8006f50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	e00f      	b.n	8006f7c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f002 f889 	bl	800907a <SDMMC_CmdBusWidth>
 8006f68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	e003      	b.n	8006f7c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e001      	b.n	8006f7c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08e      	sub	sp, #56	; 0x38
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f8e:	f7fa f96d 	bl	800126c <HAL_GetTick>
 8006f92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60bb      	str	r3, [r7, #8]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2108      	movs	r1, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 feda 	bl	8008d64 <SDMMC_CmdBlockLength>
 8006fb0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <SD_FindSCR+0x38>
  {
    return errorstate;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	e0ad      	b.n	8007118 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f002 f813 	bl	8008ff4 <SDMMC_CmdAppCommand>
 8006fce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <SD_FindSCR+0x56>
  {
    return errorstate;
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	e09e      	b.n	8007118 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fde:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006fe4:	2330      	movs	r3, #48	; 0x30
 8006fe6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f107 0210 	add.w	r2, r7, #16
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fe84 	bl	8008d0c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f002 f859 	bl	80090c0 <SDMMC_CmdSendSCR>
 800700e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	2b00      	cmp	r3, #0
 8007014:	d027      	beq.n	8007066 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	e07e      	b.n	8007118 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d113      	bne.n	8007050 <SD_FindSCR+0xcc>
 8007028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702a:	2b00      	cmp	r3, #0
 800702c:	d110      	bne.n	8007050 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fde2 	bl	8008bfc <SDMMC_ReadFIFO>
 8007038:	4603      	mov	r3, r0
 800703a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f001 fddb 	bl	8008bfc <SDMMC_ReadFIFO>
 8007046:	4603      	mov	r3, r0
 8007048:	60fb      	str	r3, [r7, #12]
      index++;
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	3301      	adds	r3, #1
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007050:	f7fa f90c 	bl	800126c <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800705e:	d102      	bne.n	8007066 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007064:	e058      	b.n	8007118 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007070:	4013      	ands	r3, r2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0d1      	beq.n	800701a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2208      	movs	r2, #8
 800708a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800708c:	2308      	movs	r3, #8
 800708e:	e043      	b.n	8007118 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2202      	movs	r2, #2
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80070a6:	2302      	movs	r3, #2
 80070a8:	e036      	b.n	8007118 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2220      	movs	r2, #32
 80070be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80070c0:	2320      	movs	r3, #32
 80070c2:	e029      	b.n	8007118 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a15      	ldr	r2, [pc, #84]	; (8007120 <SD_FindSCR+0x19c>)
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	061a      	lsls	r2, r3, #24
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	0a1b      	lsrs	r3, r3, #8
 80070de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	0e1b      	lsrs	r3, r3, #24
 80070e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	601a      	str	r2, [r3, #0]
    scr++;
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	3304      	adds	r3, #4
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	061a      	lsls	r2, r3, #24
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007100:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800710a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	0e1b      	lsrs	r3, r3, #24
 8007110:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3738      	adds	r7, #56	; 0x38
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	18000f3a 	.word	0x18000f3a

08007124 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e095      	b.n	8007278 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d108      	bne.n	8007166 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800715c:	d009      	beq.n	8007172 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	61da      	str	r2, [r3, #28]
 8007164:	e005      	b.n	8007172 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7f9 fe85 	bl	8000e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071b2:	d902      	bls.n	80071ba <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e002      	b.n	80071c0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071c8:	d007      	beq.n	80071da <HAL_SPI_Init+0xa0>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071d2:	d002      	beq.n	80071da <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721c:	ea42 0103 	orr.w	r1, r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	f003 0204 	and.w	r2, r3, #4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007248:	f003 0308 	and.w	r3, r3, #8
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007256:	ea42 0103 	orr.w	r1, r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e049      	b.n	8007326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7f9 fe3a 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f000 fa62 	bl	8007788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e049      	b.n	80073d4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f841 	bl	80073dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f000 fa0b 	bl	8007788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b02      	cmp	r3, #2
 8007404:	d122      	bne.n	800744c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b02      	cmp	r3, #2
 8007412:	d11b      	bne.n	800744c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0202 	mvn.w	r2, #2
 800741c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f98a 	bl	800774c <HAL_TIM_IC_CaptureCallback>
 8007438:	e005      	b.n	8007446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f97c 	bl	8007738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f98d 	bl	8007760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b04      	cmp	r3, #4
 8007458:	d122      	bne.n	80074a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b04      	cmp	r3, #4
 8007466:	d11b      	bne.n	80074a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0204 	mvn.w	r2, #4
 8007470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f960 	bl	800774c <HAL_TIM_IC_CaptureCallback>
 800748c:	e005      	b.n	800749a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f952 	bl	8007738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f963 	bl	8007760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d122      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d11b      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0208 	mvn.w	r2, #8
 80074c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2204      	movs	r2, #4
 80074ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f936 	bl	800774c <HAL_TIM_IC_CaptureCallback>
 80074e0:	e005      	b.n	80074ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f928 	bl	8007738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f939 	bl	8007760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0310 	and.w	r3, r3, #16
 80074fe:	2b10      	cmp	r3, #16
 8007500:	d122      	bne.n	8007548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b10      	cmp	r3, #16
 800750e:	d11b      	bne.n	8007548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0210 	mvn.w	r2, #16
 8007518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2208      	movs	r2, #8
 800751e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f90c 	bl	800774c <HAL_TIM_IC_CaptureCallback>
 8007534:	e005      	b.n	8007542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8fe 	bl	8007738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f90f 	bl	8007760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b01      	cmp	r3, #1
 8007554:	d10e      	bne.n	8007574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b01      	cmp	r3, #1
 8007562:	d107      	bne.n	8007574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0201 	mvn.w	r2, #1
 800756c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f8d8 	bl	8007724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757e:	2b80      	cmp	r3, #128	; 0x80
 8007580:	d10e      	bne.n	80075a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d107      	bne.n	80075a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fcec 	bl	8007f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ae:	d10e      	bne.n	80075ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b80      	cmp	r3, #128	; 0x80
 80075bc:	d107      	bne.n	80075ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fcdf 	bl	8007f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d10e      	bne.n	80075fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d107      	bne.n	80075fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8bd 	bl	8007774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b20      	cmp	r3, #32
 8007606:	d10e      	bne.n	8007626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b20      	cmp	r3, #32
 8007614:	d107      	bne.n	8007626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f06f 0220 	mvn.w	r2, #32
 800761e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc9f 	bl	8007f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_TIM_OC_ConfigChannel+0x1e>
 800764a:	2302      	movs	r3, #2
 800764c:	e066      	b.n	800771c <HAL_TIM_OC_ConfigChannel+0xec>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b14      	cmp	r3, #20
 800765a:	d857      	bhi.n	800770c <HAL_TIM_OC_ConfigChannel+0xdc>
 800765c:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <HAL_TIM_OC_ConfigChannel+0x34>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	080076b9 	.word	0x080076b9
 8007668:	0800770d 	.word	0x0800770d
 800766c:	0800770d 	.word	0x0800770d
 8007670:	0800770d 	.word	0x0800770d
 8007674:	080076c7 	.word	0x080076c7
 8007678:	0800770d 	.word	0x0800770d
 800767c:	0800770d 	.word	0x0800770d
 8007680:	0800770d 	.word	0x0800770d
 8007684:	080076d5 	.word	0x080076d5
 8007688:	0800770d 	.word	0x0800770d
 800768c:	0800770d 	.word	0x0800770d
 8007690:	0800770d 	.word	0x0800770d
 8007694:	080076e3 	.word	0x080076e3
 8007698:	0800770d 	.word	0x0800770d
 800769c:	0800770d 	.word	0x0800770d
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	080076f1 	.word	0x080076f1
 80076a8:	0800770d 	.word	0x0800770d
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	0800770d 	.word	0x0800770d
 80076b4:	080076ff 	.word	0x080076ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 f8fc 	bl	80078bc <TIM_OC1_SetConfig>
      break;
 80076c4:	e025      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f985 	bl	80079dc <TIM_OC2_SetConfig>
      break;
 80076d2:	e01e      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fa08 	bl	8007af0 <TIM_OC3_SetConfig>
      break;
 80076e0:	e017      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fa89 	bl	8007c00 <TIM_OC4_SetConfig>
      break;
 80076ee:	e010      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 faec 	bl	8007cd4 <TIM_OC5_SetConfig>
      break;
 80076fc:	e009      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fb49 	bl	8007d9c <TIM_OC6_SetConfig>
      break;
 800770a:	e002      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
      break;
 8007710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a40      	ldr	r2, [pc, #256]	; (800789c <TIM_Base_SetConfig+0x114>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d013      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a6:	d00f      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a3d      	ldr	r2, [pc, #244]	; (80078a0 <TIM_Base_SetConfig+0x118>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00b      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a3c      	ldr	r2, [pc, #240]	; (80078a4 <TIM_Base_SetConfig+0x11c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d007      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a3b      	ldr	r2, [pc, #236]	; (80078a8 <TIM_Base_SetConfig+0x120>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a3a      	ldr	r2, [pc, #232]	; (80078ac <TIM_Base_SetConfig+0x124>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d108      	bne.n	80077da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a2f      	ldr	r2, [pc, #188]	; (800789c <TIM_Base_SetConfig+0x114>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01f      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e8:	d01b      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a2c      	ldr	r2, [pc, #176]	; (80078a0 <TIM_Base_SetConfig+0x118>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d017      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a2b      	ldr	r2, [pc, #172]	; (80078a4 <TIM_Base_SetConfig+0x11c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a2a      	ldr	r2, [pc, #168]	; (80078a8 <TIM_Base_SetConfig+0x120>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00f      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a29      	ldr	r2, [pc, #164]	; (80078ac <TIM_Base_SetConfig+0x124>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00b      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a28      	ldr	r2, [pc, #160]	; (80078b0 <TIM_Base_SetConfig+0x128>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d007      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a27      	ldr	r2, [pc, #156]	; (80078b4 <TIM_Base_SetConfig+0x12c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <TIM_Base_SetConfig+0x9a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a26      	ldr	r2, [pc, #152]	; (80078b8 <TIM_Base_SetConfig+0x130>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d108      	bne.n	8007834 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a10      	ldr	r2, [pc, #64]	; (800789c <TIM_Base_SetConfig+0x114>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00f      	beq.n	8007880 <TIM_Base_SetConfig+0xf8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a12      	ldr	r2, [pc, #72]	; (80078ac <TIM_Base_SetConfig+0x124>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00b      	beq.n	8007880 <TIM_Base_SetConfig+0xf8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a11      	ldr	r2, [pc, #68]	; (80078b0 <TIM_Base_SetConfig+0x128>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <TIM_Base_SetConfig+0xf8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a10      	ldr	r2, [pc, #64]	; (80078b4 <TIM_Base_SetConfig+0x12c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_Base_SetConfig+0xf8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a0f      	ldr	r2, [pc, #60]	; (80078b8 <TIM_Base_SetConfig+0x130>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d103      	bne.n	8007888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	615a      	str	r2, [r3, #20]
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40000400 	.word	0x40000400
 80078a4:	40000800 	.word	0x40000800
 80078a8:	40000c00 	.word	0x40000c00
 80078ac:	40013400 	.word	0x40013400
 80078b0:	40014000 	.word	0x40014000
 80078b4:	40014400 	.word	0x40014400
 80078b8:	40014800 	.word	0x40014800

080078bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f023 0201 	bic.w	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f023 0302 	bic.w	r3, r3, #2
 8007908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a2c      	ldr	r2, [pc, #176]	; (80079c8 <TIM_OC1_SetConfig+0x10c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d00f      	beq.n	800793c <TIM_OC1_SetConfig+0x80>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a2b      	ldr	r2, [pc, #172]	; (80079cc <TIM_OC1_SetConfig+0x110>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00b      	beq.n	800793c <TIM_OC1_SetConfig+0x80>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a2a      	ldr	r2, [pc, #168]	; (80079d0 <TIM_OC1_SetConfig+0x114>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d007      	beq.n	800793c <TIM_OC1_SetConfig+0x80>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a29      	ldr	r2, [pc, #164]	; (80079d4 <TIM_OC1_SetConfig+0x118>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_OC1_SetConfig+0x80>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a28      	ldr	r2, [pc, #160]	; (80079d8 <TIM_OC1_SetConfig+0x11c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d10c      	bne.n	8007956 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f023 0308 	bic.w	r3, r3, #8
 8007942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f023 0304 	bic.w	r3, r3, #4
 8007954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1b      	ldr	r2, [pc, #108]	; (80079c8 <TIM_OC1_SetConfig+0x10c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00f      	beq.n	800797e <TIM_OC1_SetConfig+0xc2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1a      	ldr	r2, [pc, #104]	; (80079cc <TIM_OC1_SetConfig+0x110>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00b      	beq.n	800797e <TIM_OC1_SetConfig+0xc2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <TIM_OC1_SetConfig+0x114>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <TIM_OC1_SetConfig+0xc2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <TIM_OC1_SetConfig+0x118>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d003      	beq.n	800797e <TIM_OC1_SetConfig+0xc2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <TIM_OC1_SetConfig+0x11c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d111      	bne.n	80079a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800798c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	621a      	str	r2, [r3, #32]
}
 80079bc:	bf00      	nop
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40013400 	.word	0x40013400
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400
 80079d8:	40014800 	.word	0x40014800

080079dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f023 0210 	bic.w	r2, r3, #16
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0320 	bic.w	r3, r3, #32
 8007a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a28      	ldr	r2, [pc, #160]	; (8007adc <TIM_OC2_SetConfig+0x100>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_OC2_SetConfig+0x6c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a27      	ldr	r2, [pc, #156]	; (8007ae0 <TIM_OC2_SetConfig+0x104>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d10d      	bne.n	8007a64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a1d      	ldr	r2, [pc, #116]	; (8007adc <TIM_OC2_SetConfig+0x100>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00f      	beq.n	8007a8c <TIM_OC2_SetConfig+0xb0>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <TIM_OC2_SetConfig+0x104>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_OC2_SetConfig+0xb0>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a1b      	ldr	r2, [pc, #108]	; (8007ae4 <TIM_OC2_SetConfig+0x108>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_OC2_SetConfig+0xb0>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ae8 <TIM_OC2_SetConfig+0x10c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_OC2_SetConfig+0xb0>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a19      	ldr	r2, [pc, #100]	; (8007aec <TIM_OC2_SetConfig+0x110>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d113      	bne.n	8007ab4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	621a      	str	r2, [r3, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40012c00 	.word	0x40012c00
 8007ae0:	40013400 	.word	0x40013400
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40014400 	.word	0x40014400
 8007aec:	40014800 	.word	0x40014800

08007af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a27      	ldr	r2, [pc, #156]	; (8007bec <TIM_OC3_SetConfig+0xfc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d003      	beq.n	8007b5a <TIM_OC3_SetConfig+0x6a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a26      	ldr	r2, [pc, #152]	; (8007bf0 <TIM_OC3_SetConfig+0x100>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d10d      	bne.n	8007b76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a1c      	ldr	r2, [pc, #112]	; (8007bec <TIM_OC3_SetConfig+0xfc>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00f      	beq.n	8007b9e <TIM_OC3_SetConfig+0xae>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <TIM_OC3_SetConfig+0x100>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00b      	beq.n	8007b9e <TIM_OC3_SetConfig+0xae>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1a      	ldr	r2, [pc, #104]	; (8007bf4 <TIM_OC3_SetConfig+0x104>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d007      	beq.n	8007b9e <TIM_OC3_SetConfig+0xae>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a19      	ldr	r2, [pc, #100]	; (8007bf8 <TIM_OC3_SetConfig+0x108>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d003      	beq.n	8007b9e <TIM_OC3_SetConfig+0xae>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <TIM_OC3_SetConfig+0x10c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d113      	bne.n	8007bc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	621a      	str	r2, [r3, #32]
}
 8007be0:	bf00      	nop
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800

08007c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a18      	ldr	r2, [pc, #96]	; (8007cc0 <TIM_OC4_SetConfig+0xc0>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00f      	beq.n	8007c84 <TIM_OC4_SetConfig+0x84>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a17      	ldr	r2, [pc, #92]	; (8007cc4 <TIM_OC4_SetConfig+0xc4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <TIM_OC4_SetConfig+0x84>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a16      	ldr	r2, [pc, #88]	; (8007cc8 <TIM_OC4_SetConfig+0xc8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <TIM_OC4_SetConfig+0x84>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <TIM_OC4_SetConfig+0xcc>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_OC4_SetConfig+0x84>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a14      	ldr	r2, [pc, #80]	; (8007cd0 <TIM_OC4_SetConfig+0xd0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d109      	bne.n	8007c98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	019b      	lsls	r3, r3, #6
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800

08007cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	041b      	lsls	r3, r3, #16
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <TIM_OC5_SetConfig+0xb4>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00f      	beq.n	8007d4e <TIM_OC5_SetConfig+0x7a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a16      	ldr	r2, [pc, #88]	; (8007d8c <TIM_OC5_SetConfig+0xb8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <TIM_OC5_SetConfig+0x7a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <TIM_OC5_SetConfig+0xbc>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d007      	beq.n	8007d4e <TIM_OC5_SetConfig+0x7a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a14      	ldr	r2, [pc, #80]	; (8007d94 <TIM_OC5_SetConfig+0xc0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_OC5_SetConfig+0x7a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a13      	ldr	r2, [pc, #76]	; (8007d98 <TIM_OC5_SetConfig+0xc4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d109      	bne.n	8007d62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	621a      	str	r2, [r3, #32]
}
 8007d7c:	bf00      	nop
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	40013400 	.word	0x40013400
 8007d90:	40014000 	.word	0x40014000
 8007d94:	40014400 	.word	0x40014400
 8007d98:	40014800 	.word	0x40014800

08007d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	051b      	lsls	r3, r3, #20
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a18      	ldr	r2, [pc, #96]	; (8007e54 <TIM_OC6_SetConfig+0xb8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00f      	beq.n	8007e18 <TIM_OC6_SetConfig+0x7c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a17      	ldr	r2, [pc, #92]	; (8007e58 <TIM_OC6_SetConfig+0xbc>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00b      	beq.n	8007e18 <TIM_OC6_SetConfig+0x7c>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a16      	ldr	r2, [pc, #88]	; (8007e5c <TIM_OC6_SetConfig+0xc0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d007      	beq.n	8007e18 <TIM_OC6_SetConfig+0x7c>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a15      	ldr	r2, [pc, #84]	; (8007e60 <TIM_OC6_SetConfig+0xc4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC6_SetConfig+0x7c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a14      	ldr	r2, [pc, #80]	; (8007e64 <TIM_OC6_SetConfig+0xc8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d109      	bne.n	8007e2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	029b      	lsls	r3, r3, #10
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	621a      	str	r2, [r3, #32]
}
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40013400 	.word	0x40013400
 8007e5c:	40014000 	.word	0x40014000
 8007e60:	40014400 	.word	0x40014400
 8007e64:	40014800 	.word	0x40014800

08007e68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e065      	b.n	8007f50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d004      	beq.n	8007f12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a14      	ldr	r2, [pc, #80]	; (8007f60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d115      	bne.n	8007f3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	051b      	lsls	r3, r3, #20
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40013400 	.word	0x40013400

08007f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e042      	b.n	8008038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7f8 ffcb 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2224      	movs	r2, #36	; 0x24
 8007fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0201 	bic.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f82c 	bl	8008040 <UART_SetConfig>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e022      	b.n	8008038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fb1c 	bl	8008638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800800e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800801e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fba3 	bl	800877c <UART_CheckIdleState>
 8008036:	4603      	mov	r3, r0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008044:	b08c      	sub	sp, #48	; 0x30
 8008046:	af00      	add	r7, sp, #0
 8008048:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	431a      	orrs	r2, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	431a      	orrs	r2, r3
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	4313      	orrs	r3, r2
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4baa      	ldr	r3, [pc, #680]	; (8008318 <UART_SetConfig+0x2d8>)
 8008070:	4013      	ands	r3, r2
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	6812      	ldr	r2, [r2, #0]
 8008076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008078:	430b      	orrs	r3, r1
 800807a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a9f      	ldr	r2, [pc, #636]	; (800831c <UART_SetConfig+0x2dc>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080a8:	4313      	orrs	r3, r2
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	f023 010f 	bic.w	r1, r3, #15
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a90      	ldr	r2, [pc, #576]	; (8008320 <UART_SetConfig+0x2e0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d125      	bne.n	8008130 <UART_SetConfig+0xf0>
 80080e4:	4b8f      	ldr	r3, [pc, #572]	; (8008324 <UART_SetConfig+0x2e4>)
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d81a      	bhi.n	8008128 <UART_SetConfig+0xe8>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <UART_SetConfig+0xb8>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008109 	.word	0x08008109
 80080fc:	08008119 	.word	0x08008119
 8008100:	08008111 	.word	0x08008111
 8008104:	08008121 	.word	0x08008121
 8008108:	2301      	movs	r3, #1
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810e:	e116      	b.n	800833e <UART_SetConfig+0x2fe>
 8008110:	2302      	movs	r3, #2
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008116:	e112      	b.n	800833e <UART_SetConfig+0x2fe>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e10e      	b.n	800833e <UART_SetConfig+0x2fe>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e10a      	b.n	800833e <UART_SetConfig+0x2fe>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812e:	e106      	b.n	800833e <UART_SetConfig+0x2fe>
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a7c      	ldr	r2, [pc, #496]	; (8008328 <UART_SetConfig+0x2e8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d138      	bne.n	80081ac <UART_SetConfig+0x16c>
 800813a:	4b7a      	ldr	r3, [pc, #488]	; (8008324 <UART_SetConfig+0x2e4>)
 800813c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008140:	f003 030c 	and.w	r3, r3, #12
 8008144:	2b0c      	cmp	r3, #12
 8008146:	d82d      	bhi.n	80081a4 <UART_SetConfig+0x164>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <UART_SetConfig+0x110>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008185 	.word	0x08008185
 8008154:	080081a5 	.word	0x080081a5
 8008158:	080081a5 	.word	0x080081a5
 800815c:	080081a5 	.word	0x080081a5
 8008160:	08008195 	.word	0x08008195
 8008164:	080081a5 	.word	0x080081a5
 8008168:	080081a5 	.word	0x080081a5
 800816c:	080081a5 	.word	0x080081a5
 8008170:	0800818d 	.word	0x0800818d
 8008174:	080081a5 	.word	0x080081a5
 8008178:	080081a5 	.word	0x080081a5
 800817c:	080081a5 	.word	0x080081a5
 8008180:	0800819d 	.word	0x0800819d
 8008184:	2300      	movs	r3, #0
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818a:	e0d8      	b.n	800833e <UART_SetConfig+0x2fe>
 800818c:	2302      	movs	r3, #2
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008192:	e0d4      	b.n	800833e <UART_SetConfig+0x2fe>
 8008194:	2304      	movs	r3, #4
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819a:	e0d0      	b.n	800833e <UART_SetConfig+0x2fe>
 800819c:	2308      	movs	r3, #8
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a2:	e0cc      	b.n	800833e <UART_SetConfig+0x2fe>
 80081a4:	2310      	movs	r3, #16
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081aa:	e0c8      	b.n	800833e <UART_SetConfig+0x2fe>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a5e      	ldr	r2, [pc, #376]	; (800832c <UART_SetConfig+0x2ec>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d125      	bne.n	8008202 <UART_SetConfig+0x1c2>
 80081b6:	4b5b      	ldr	r3, [pc, #364]	; (8008324 <UART_SetConfig+0x2e4>)
 80081b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081c0:	2b30      	cmp	r3, #48	; 0x30
 80081c2:	d016      	beq.n	80081f2 <UART_SetConfig+0x1b2>
 80081c4:	2b30      	cmp	r3, #48	; 0x30
 80081c6:	d818      	bhi.n	80081fa <UART_SetConfig+0x1ba>
 80081c8:	2b20      	cmp	r3, #32
 80081ca:	d00a      	beq.n	80081e2 <UART_SetConfig+0x1a2>
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d814      	bhi.n	80081fa <UART_SetConfig+0x1ba>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <UART_SetConfig+0x19a>
 80081d4:	2b10      	cmp	r3, #16
 80081d6:	d008      	beq.n	80081ea <UART_SetConfig+0x1aa>
 80081d8:	e00f      	b.n	80081fa <UART_SetConfig+0x1ba>
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e0:	e0ad      	b.n	800833e <UART_SetConfig+0x2fe>
 80081e2:	2302      	movs	r3, #2
 80081e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e8:	e0a9      	b.n	800833e <UART_SetConfig+0x2fe>
 80081ea:	2304      	movs	r3, #4
 80081ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f0:	e0a5      	b.n	800833e <UART_SetConfig+0x2fe>
 80081f2:	2308      	movs	r3, #8
 80081f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f8:	e0a1      	b.n	800833e <UART_SetConfig+0x2fe>
 80081fa:	2310      	movs	r3, #16
 80081fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008200:	e09d      	b.n	800833e <UART_SetConfig+0x2fe>
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a4a      	ldr	r2, [pc, #296]	; (8008330 <UART_SetConfig+0x2f0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d125      	bne.n	8008258 <UART_SetConfig+0x218>
 800820c:	4b45      	ldr	r3, [pc, #276]	; (8008324 <UART_SetConfig+0x2e4>)
 800820e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008212:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008216:	2bc0      	cmp	r3, #192	; 0xc0
 8008218:	d016      	beq.n	8008248 <UART_SetConfig+0x208>
 800821a:	2bc0      	cmp	r3, #192	; 0xc0
 800821c:	d818      	bhi.n	8008250 <UART_SetConfig+0x210>
 800821e:	2b80      	cmp	r3, #128	; 0x80
 8008220:	d00a      	beq.n	8008238 <UART_SetConfig+0x1f8>
 8008222:	2b80      	cmp	r3, #128	; 0x80
 8008224:	d814      	bhi.n	8008250 <UART_SetConfig+0x210>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <UART_SetConfig+0x1f0>
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d008      	beq.n	8008240 <UART_SetConfig+0x200>
 800822e:	e00f      	b.n	8008250 <UART_SetConfig+0x210>
 8008230:	2300      	movs	r3, #0
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008236:	e082      	b.n	800833e <UART_SetConfig+0x2fe>
 8008238:	2302      	movs	r3, #2
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823e:	e07e      	b.n	800833e <UART_SetConfig+0x2fe>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e07a      	b.n	800833e <UART_SetConfig+0x2fe>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e076      	b.n	800833e <UART_SetConfig+0x2fe>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e072      	b.n	800833e <UART_SetConfig+0x2fe>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a35      	ldr	r2, [pc, #212]	; (8008334 <UART_SetConfig+0x2f4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d12a      	bne.n	80082b8 <UART_SetConfig+0x278>
 8008262:	4b30      	ldr	r3, [pc, #192]	; (8008324 <UART_SetConfig+0x2e4>)
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800826c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008270:	d01a      	beq.n	80082a8 <UART_SetConfig+0x268>
 8008272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008276:	d81b      	bhi.n	80082b0 <UART_SetConfig+0x270>
 8008278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800827c:	d00c      	beq.n	8008298 <UART_SetConfig+0x258>
 800827e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008282:	d815      	bhi.n	80082b0 <UART_SetConfig+0x270>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <UART_SetConfig+0x250>
 8008288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828c:	d008      	beq.n	80082a0 <UART_SetConfig+0x260>
 800828e:	e00f      	b.n	80082b0 <UART_SetConfig+0x270>
 8008290:	2300      	movs	r3, #0
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008296:	e052      	b.n	800833e <UART_SetConfig+0x2fe>
 8008298:	2302      	movs	r3, #2
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829e:	e04e      	b.n	800833e <UART_SetConfig+0x2fe>
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a6:	e04a      	b.n	800833e <UART_SetConfig+0x2fe>
 80082a8:	2308      	movs	r3, #8
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e046      	b.n	800833e <UART_SetConfig+0x2fe>
 80082b0:	2310      	movs	r3, #16
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e042      	b.n	800833e <UART_SetConfig+0x2fe>
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a17      	ldr	r2, [pc, #92]	; (800831c <UART_SetConfig+0x2dc>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d13a      	bne.n	8008338 <UART_SetConfig+0x2f8>
 80082c2:	4b18      	ldr	r3, [pc, #96]	; (8008324 <UART_SetConfig+0x2e4>)
 80082c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082d0:	d01a      	beq.n	8008308 <UART_SetConfig+0x2c8>
 80082d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082d6:	d81b      	bhi.n	8008310 <UART_SetConfig+0x2d0>
 80082d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082dc:	d00c      	beq.n	80082f8 <UART_SetConfig+0x2b8>
 80082de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e2:	d815      	bhi.n	8008310 <UART_SetConfig+0x2d0>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <UART_SetConfig+0x2b0>
 80082e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ec:	d008      	beq.n	8008300 <UART_SetConfig+0x2c0>
 80082ee:	e00f      	b.n	8008310 <UART_SetConfig+0x2d0>
 80082f0:	2300      	movs	r3, #0
 80082f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f6:	e022      	b.n	800833e <UART_SetConfig+0x2fe>
 80082f8:	2302      	movs	r3, #2
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fe:	e01e      	b.n	800833e <UART_SetConfig+0x2fe>
 8008300:	2304      	movs	r3, #4
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008306:	e01a      	b.n	800833e <UART_SetConfig+0x2fe>
 8008308:	2308      	movs	r3, #8
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830e:	e016      	b.n	800833e <UART_SetConfig+0x2fe>
 8008310:	2310      	movs	r3, #16
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008316:	e012      	b.n	800833e <UART_SetConfig+0x2fe>
 8008318:	cfff69f3 	.word	0xcfff69f3
 800831c:	40008000 	.word	0x40008000
 8008320:	40013800 	.word	0x40013800
 8008324:	40021000 	.word	0x40021000
 8008328:	40004400 	.word	0x40004400
 800832c:	40004800 	.word	0x40004800
 8008330:	40004c00 	.word	0x40004c00
 8008334:	40005000 	.word	0x40005000
 8008338:	2310      	movs	r3, #16
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4aae      	ldr	r2, [pc, #696]	; (80085fc <UART_SetConfig+0x5bc>)
 8008344:	4293      	cmp	r3, r2
 8008346:	f040 8097 	bne.w	8008478 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800834a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800834e:	2b08      	cmp	r3, #8
 8008350:	d823      	bhi.n	800839a <UART_SetConfig+0x35a>
 8008352:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <UART_SetConfig+0x318>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	0800837d 	.word	0x0800837d
 800835c:	0800839b 	.word	0x0800839b
 8008360:	08008385 	.word	0x08008385
 8008364:	0800839b 	.word	0x0800839b
 8008368:	0800838b 	.word	0x0800838b
 800836c:	0800839b 	.word	0x0800839b
 8008370:	0800839b 	.word	0x0800839b
 8008374:	0800839b 	.word	0x0800839b
 8008378:	08008393 	.word	0x08008393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800837c:	f7fb fc3a 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8008380:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008382:	e010      	b.n	80083a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008384:	4b9e      	ldr	r3, [pc, #632]	; (8008600 <UART_SetConfig+0x5c0>)
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008388:	e00d      	b.n	80083a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800838a:	f7fb fb9b 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 800838e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008390:	e009      	b.n	80083a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008398:	e005      	b.n	80083a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8130 	beq.w	800860e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	4a94      	ldr	r2, [pc, #592]	; (8008604 <UART_SetConfig+0x5c4>)
 80083b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	4413      	add	r3, r2
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d305      	bcc.n	80083de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d903      	bls.n	80083e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083e4:	e113      	b.n	800860e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	2200      	movs	r2, #0
 80083ea:	60bb      	str	r3, [r7, #8]
 80083ec:	60fa      	str	r2, [r7, #12]
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	4a84      	ldr	r2, [pc, #528]	; (8008604 <UART_SetConfig+0x5c4>)
 80083f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2200      	movs	r2, #0
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008408:	f7f7 fef8 	bl	80001fc <__aeabi_uldivmod>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4610      	mov	r0, r2
 8008412:	4619      	mov	r1, r3
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	020b      	lsls	r3, r1, #8
 800841e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008422:	0202      	lsls	r2, r0, #8
 8008424:	6979      	ldr	r1, [r7, #20]
 8008426:	6849      	ldr	r1, [r1, #4]
 8008428:	0849      	lsrs	r1, r1, #1
 800842a:	2000      	movs	r0, #0
 800842c:	460c      	mov	r4, r1
 800842e:	4605      	mov	r5, r0
 8008430:	eb12 0804 	adds.w	r8, r2, r4
 8008434:	eb43 0905 	adc.w	r9, r3, r5
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	469a      	mov	sl, r3
 8008440:	4693      	mov	fp, r2
 8008442:	4652      	mov	r2, sl
 8008444:	465b      	mov	r3, fp
 8008446:	4640      	mov	r0, r8
 8008448:	4649      	mov	r1, r9
 800844a:	f7f7 fed7 	bl	80001fc <__aeabi_uldivmod>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4613      	mov	r3, r2
 8008454:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800845c:	d308      	bcc.n	8008470 <UART_SetConfig+0x430>
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008464:	d204      	bcs.n	8008470 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6a3a      	ldr	r2, [r7, #32]
 800846c:	60da      	str	r2, [r3, #12]
 800846e:	e0ce      	b.n	800860e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008476:	e0ca      	b.n	800860e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008480:	d166      	bne.n	8008550 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008486:	2b08      	cmp	r3, #8
 8008488:	d827      	bhi.n	80084da <UART_SetConfig+0x49a>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <UART_SetConfig+0x450>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	080084db 	.word	0x080084db
 80084a0:	080084cb 	.word	0x080084cb
 80084a4:	080084db 	.word	0x080084db
 80084a8:	080084db 	.word	0x080084db
 80084ac:	080084db 	.word	0x080084db
 80084b0:	080084d3 	.word	0x080084d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b4:	f7fb fb9e 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80084b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ba:	e014      	b.n	80084e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084bc:	f7fb fbb0 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 80084c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084c2:	e010      	b.n	80084e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084c4:	4b4e      	ldr	r3, [pc, #312]	; (8008600 <UART_SetConfig+0x5c0>)
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084c8:	e00d      	b.n	80084e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ca:	f7fb fafb 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 80084ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084d0:	e009      	b.n	80084e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084d8:	e005      	b.n	80084e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 8090 	beq.w	800860e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	4a44      	ldr	r2, [pc, #272]	; (8008604 <UART_SetConfig+0x5c4>)
 80084f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f8:	461a      	mov	r2, r3
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008500:	005a      	lsls	r2, r3, #1
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	085b      	lsrs	r3, r3, #1
 8008508:	441a      	add	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008512:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d916      	bls.n	8008548 <UART_SetConfig+0x508>
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008520:	d212      	bcs.n	8008548 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f023 030f 	bic.w	r3, r3, #15
 800852a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	085b      	lsrs	r3, r3, #1
 8008530:	b29b      	uxth	r3, r3
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	b29a      	uxth	r2, r3
 8008538:	8bfb      	ldrh	r3, [r7, #30]
 800853a:	4313      	orrs	r3, r2
 800853c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	8bfa      	ldrh	r2, [r7, #30]
 8008544:	60da      	str	r2, [r3, #12]
 8008546:	e062      	b.n	800860e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800854e:	e05e      	b.n	800860e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008554:	2b08      	cmp	r3, #8
 8008556:	d828      	bhi.n	80085aa <UART_SetConfig+0x56a>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <UART_SetConfig+0x520>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008585 	.word	0x08008585
 8008564:	0800858d 	.word	0x0800858d
 8008568:	08008595 	.word	0x08008595
 800856c:	080085ab 	.word	0x080085ab
 8008570:	0800859b 	.word	0x0800859b
 8008574:	080085ab 	.word	0x080085ab
 8008578:	080085ab 	.word	0x080085ab
 800857c:	080085ab 	.word	0x080085ab
 8008580:	080085a3 	.word	0x080085a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008584:	f7fb fb36 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8008588:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800858a:	e014      	b.n	80085b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858c:	f7fb fb48 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8008590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008592:	e010      	b.n	80085b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008594:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <UART_SetConfig+0x5c0>)
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008598:	e00d      	b.n	80085b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800859a:	f7fb fa93 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 800859e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085a0:	e009      	b.n	80085b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085a8:	e005      	b.n	80085b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085b4:	bf00      	nop
    }

    if (pclk != 0U)
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d028      	beq.n	800860e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	4a10      	ldr	r2, [pc, #64]	; (8008604 <UART_SetConfig+0x5c4>)
 80085c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c6:	461a      	mov	r2, r3
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	441a      	add	r2, r3
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	fbb2 f3f3 	udiv	r3, r2, r3
 80085de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b0f      	cmp	r3, #15
 80085e4:	d910      	bls.n	8008608 <UART_SetConfig+0x5c8>
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ec:	d20c      	bcs.n	8008608 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60da      	str	r2, [r3, #12]
 80085f8:	e009      	b.n	800860e <UART_SetConfig+0x5ce>
 80085fa:	bf00      	nop
 80085fc:	40008000 	.word	0x40008000
 8008600:	00f42400 	.word	0x00f42400
 8008604:	0800d83c 	.word	0x0800d83c
      }
      else
      {
        ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2201      	movs	r2, #1
 8008612:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2201      	movs	r2, #1
 800861a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2200      	movs	r2, #0
 8008622:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2200      	movs	r2, #0
 8008628:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800862a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800862e:	4618      	mov	r0, r3
 8008630:	3730      	adds	r7, #48	; 0x30
 8008632:	46bd      	mov	sp, r7
 8008634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01a      	beq.n	800874e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008736:	d10a      	bne.n	800874e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	605a      	str	r2, [r3, #4]
  }
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800878c:	f7f8 fd6e 	bl	800126c <HAL_GetTick>
 8008790:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b08      	cmp	r3, #8
 800879e:	d10e      	bne.n	80087be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f82f 	bl	8008812 <UART_WaitOnFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e025      	b.n	800880a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d10e      	bne.n	80087ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f819 	bl	8008812 <UART_WaitOnFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e00f      	b.n	800880a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b09c      	sub	sp, #112	; 0x70
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	603b      	str	r3, [r7, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008822:	e0a9      	b.n	8008978 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800882a:	f000 80a5 	beq.w	8008978 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882e:	f7f8 fd1d 	bl	800126c <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800883a:	429a      	cmp	r2, r3
 800883c:	d302      	bcc.n	8008844 <UART_WaitOnFlagUntilTimeout+0x32>
 800883e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008840:	2b00      	cmp	r3, #0
 8008842:	d140      	bne.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008858:	667b      	str	r3, [r7, #100]	; 0x64
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008864:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	663b      	str	r3, [r7, #96]	; 0x60
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008896:	64ba      	str	r2, [r7, #72]	; 0x48
 8008898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800889c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e5      	bne.n	8008876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e069      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d051      	beq.n	8008978 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088e2:	d149      	bne.n	8008978 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
 800890e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e6      	bne.n	80088ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3308      	adds	r3, #8
 8008926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	613b      	str	r3, [r7, #16]
   return(result);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	66bb      	str	r3, [r7, #104]	; 0x68
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3308      	adds	r3, #8
 800893e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008940:	623a      	str	r2, [r7, #32]
 8008942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	69f9      	ldr	r1, [r7, #28]
 8008946:	6a3a      	ldr	r2, [r7, #32]
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	61bb      	str	r3, [r7, #24]
   return(result);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e5      	bne.n	8008920 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2220      	movs	r2, #32
 8008958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2220      	movs	r2, #32
 8008960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e010      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	69da      	ldr	r2, [r3, #28]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	4013      	ands	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	bf0c      	ite	eq
 8008988:	2301      	moveq	r3, #1
 800898a:	2300      	movne	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	429a      	cmp	r2, r3
 8008994:	f43f af46 	beq.w	8008824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3770      	adds	r7, #112	; 0x70
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e027      	b.n	8008a08 <HAL_UARTEx_DisableFifoMode+0x66>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2224      	movs	r2, #36	; 0x24
 80089c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0201 	bic.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e02d      	b.n	8008a88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2224      	movs	r2, #36	; 0x24
 8008a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0201 	bic.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f84f 	bl	8008b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e02d      	b.n	8008b04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2224      	movs	r2, #36	; 0x24
 8008ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 0201 	bic.w	r2, r2, #1
 8008ace:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f811 	bl	8008b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2220      	movs	r2, #32
 8008af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d108      	bne.n	8008b2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b2c:	e031      	b.n	8008b92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b2e:	2308      	movs	r3, #8
 8008b30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b32:	2308      	movs	r3, #8
 8008b34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	0e5b      	lsrs	r3, r3, #25
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	0f5b      	lsrs	r3, r3, #29
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	7b3a      	ldrb	r2, [r7, #12]
 8008b5a:	4911      	ldr	r1, [pc, #68]	; (8008ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8008b5c:	5c8a      	ldrb	r2, [r1, r2]
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b62:	7b3a      	ldrb	r2, [r7, #12]
 8008b64:	490f      	ldr	r1, [pc, #60]	; (8008ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8008b66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	7b7a      	ldrb	r2, [r7, #13]
 8008b78:	4909      	ldr	r1, [pc, #36]	; (8008ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8008b7a:	5c8a      	ldrb	r2, [r1, r2]
 8008b7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b80:	7b7a      	ldrb	r2, [r7, #13]
 8008b82:	4908      	ldr	r1, [pc, #32]	; (8008ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8008b84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b86:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	0800d854 	.word	0x0800d854
 8008ba4:	0800d85c 	.word	0x0800d85c

08008ba8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008ba8:	b084      	sub	sp, #16
 8008baa:	b480      	push	{r7}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	f107 001c 	add.w	r0, r7, #28
 8008bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008bbe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008bc2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008bc6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8008bca:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008bce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <SDMMC_Init+0x50>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	b004      	add	sp, #16
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	ffc02c00 	.word	0xffc02c00

08008bfc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f043 0203 	orr.w	r2, r3, #3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008c4c:	2002      	movs	r0, #2
 8008c4e:	f7f8 fb19 	bl	8001284 <HAL_Delay>

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0303 	and.w	r3, r3, #3
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c96:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008c9c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ca2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <SDMMC_SendCommand+0x50>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	fffee0c0 	.word	0xfffee0c0

08008ccc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	b2db      	uxtb	r3, r3
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d32:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d38:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	431a      	orrs	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0

}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d72:	2310      	movs	r3, #16
 8008d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d86:	f107 0308 	add.w	r3, r7, #8
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff ff73 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d96:	2110      	movs	r1, #16
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa7b 	bl	8009294 <SDMMC_GetCmdResp1>
 8008d9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da0:	69fb      	ldr	r3, [r7, #28]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b088      	sub	sp, #32
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008db8:	2311      	movs	r3, #17
 8008dba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dcc:	f107 0308 	add.w	r3, r7, #8
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff ff50 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ddc:	2111      	movs	r1, #17
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa58 	bl	8009294 <SDMMC_GetCmdResp1>
 8008de4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008de6:	69fb      	ldr	r3, [r7, #28]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008dfe:	2312      	movs	r3, #18
 8008e00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ff2d 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e22:	2112      	movs	r1, #18
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fa35 	bl	8009294 <SDMMC_GetCmdResp1>
 8008e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3720      	adds	r7, #32
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b088      	sub	sp, #32
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e44:	2318      	movs	r3, #24
 8008e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff ff0a 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e68:	2118      	movs	r1, #24
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa12 	bl	8009294 <SDMMC_GetCmdResp1>
 8008e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e72:	69fb      	ldr	r3, [r7, #28]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e8a:	2319      	movs	r3, #25
 8008e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e9e:	f107 0308 	add.w	r3, r7, #8
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7ff fee7 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eae:	2119      	movs	r1, #25
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f9ef 	bl	8009294 <SDMMC_GetCmdResp1>
 8008eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb8:	69fb      	ldr	r3, [r7, #28]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3720      	adds	r7, #32
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ed0:	230c      	movs	r3, #12
 8008ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eda:	2300      	movs	r3, #0
 8008edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ee2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008efc:	f107 0308 	add.w	r3, r7, #8
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff feb8 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008f08:	4a08      	ldr	r2, [pc, #32]	; (8008f2c <SDMMC_CmdStopTransfer+0x68>)
 8008f0a:	210c      	movs	r1, #12
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f9c1 	bl	8009294 <SDMMC_GetCmdResp1>
 8008f12:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008f20:	69fb      	ldr	r3, [r7, #28]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	05f5e100 	.word	0x05f5e100

08008f30 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08a      	sub	sp, #40	; 0x28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f40:	2307      	movs	r3, #7
 8008f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f48:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f52:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	4619      	mov	r1, r3
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff fe8c 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f64:	2107      	movs	r1, #7
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 f994 	bl	8009294 <SDMMC_GetCmdResp1>
 8008f6c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3728      	adds	r7, #40	; 0x28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f96:	f107 0308 	add.w	r3, r7, #8
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fe6b 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fbb8 	bl	8009718 <SDMMC_GetCmdError>
 8008fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008faa:	69fb      	ldr	r3, [r7, #28]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fbc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008fc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fd6:	f107 0308 	add.w	r3, r7, #8
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fe4b 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fb4a 	bl	800967c <SDMMC_GetCmdResp7>
 8008fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fea:	69fb      	ldr	r3, [r7, #28]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3720      	adds	r7, #32
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009002:	2337      	movs	r3, #55	; 0x37
 8009004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800900a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800900c:	2300      	movs	r3, #0
 800900e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009014:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009016:	f107 0308 	add.w	r3, r7, #8
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff fe2b 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009022:	f241 3288 	movw	r2, #5000	; 0x1388
 8009026:	2137      	movs	r1, #55	; 0x37
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f933 	bl	8009294 <SDMMC_GetCmdResp1>
 800902e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009030:	69fb      	ldr	r3, [r7, #28]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3720      	adds	r7, #32
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b088      	sub	sp, #32
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009048:	2329      	movs	r3, #41	; 0x29
 800904a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800904c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800905a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800905c:	f107 0308 	add.w	r3, r7, #8
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fe08 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa4f 	bl	800950c <SDMMC_GetCmdResp3>
 800906e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009070:	69fb      	ldr	r3, [r7, #28]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009088:	2306      	movs	r3, #6
 800908a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800908c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009092:	2300      	movs	r3, #0
 8009094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800909a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800909c:	f107 0308 	add.w	r3, r7, #8
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff fde8 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ac:	2106      	movs	r1, #6
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f8f0 	bl	8009294 <SDMMC_GetCmdResp1>
 80090b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090b6:	69fb      	ldr	r3, [r7, #28]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090cc:	2333      	movs	r3, #51	; 0x33
 80090ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090e0:	f107 0308 	add.w	r3, r7, #8
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fdc6 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80090ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80090f0:	2133      	movs	r1, #51	; 0x33
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f8ce 	bl	8009294 <SDMMC_GetCmdResp1>
 80090f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090fa:	69fb      	ldr	r3, [r7, #28]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b088      	sub	sp, #32
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009110:	2302      	movs	r3, #2
 8009112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800911a:	2300      	movs	r3, #0
 800911c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800911e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009124:	f107 0308 	add.w	r3, r7, #8
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff fda4 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f9a1 	bl	8009478 <SDMMC_GetCmdResp2>
 8009136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009138:	69fb      	ldr	r3, [r7, #28]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3720      	adds	r7, #32
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b088      	sub	sp, #32
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009150:	2309      	movs	r3, #9
 8009152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009154:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800915a:	2300      	movs	r3, #0
 800915c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800915e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009164:	f107 0308 	add.w	r3, r7, #8
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff fd84 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f981 	bl	8009478 <SDMMC_GetCmdResp2>
 8009176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009178:	69fb      	ldr	r3, [r7, #28]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3720      	adds	r7, #32
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b088      	sub	sp, #32
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800918c:	2300      	movs	r3, #0
 800918e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009190:	2303      	movs	r3, #3
 8009192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800919a:	2300      	movs	r3, #0
 800919c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800919e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091a4:	f107 0308 	add.w	r3, r7, #8
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff fd64 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	2103      	movs	r1, #3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f9e9 	bl	800958c <SDMMC_GetCmdResp6>
 80091ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091bc:	69fb      	ldr	r3, [r7, #28]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3720      	adds	r7, #32
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b088      	sub	sp, #32
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091d4:	230d      	movs	r3, #13
 80091d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091de:	2300      	movs	r3, #0
 80091e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091e8:	f107 0308 	add.w	r3, r7, #8
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff fd42 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f8:	210d      	movs	r1, #13
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f84a 	bl	8009294 <SDMMC_GetCmdResp1>
 8009200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009202:	69fb      	ldr	r3, [r7, #28]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3720      	adds	r7, #32
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009218:	230d      	movs	r3, #13
 800921a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800921c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800922a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800922c:	f107 0308 	add.w	r3, r7, #8
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fd20 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009238:	f241 3288 	movw	r2, #5000	; 0x1388
 800923c:	210d      	movs	r1, #13
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f828 	bl	8009294 <SDMMC_GetCmdResp1>
 8009244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009246:	69fb      	ldr	r3, [r7, #28]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009258:	2300      	movs	r3, #0
 800925a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800925c:	230b      	movs	r3, #11
 800925e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800926a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800926e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff fcfe 	bl	8008c78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	210b      	movs	r1, #11
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f806 	bl	8009294 <SDMMC_GetCmdResp1>
 8009288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800928a:	69fb      	ldr	r3, [r7, #28]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3720      	adds	r7, #32
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	460b      	mov	r3, r1
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092a2:	4b70      	ldr	r3, [pc, #448]	; (8009464 <SDMMC_GetCmdResp1+0x1d0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a70      	ldr	r2, [pc, #448]	; (8009468 <SDMMC_GetCmdResp1+0x1d4>)
 80092a8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ac:	0a5a      	lsrs	r2, r3, #9
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	fb02 f303 	mul.w	r3, r2, r3
 80092b4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	1e5a      	subs	r2, r3, #1
 80092ba:	61fa      	str	r2, [r7, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d102      	bne.n	80092c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092c4:	e0c9      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	4b67      	ldr	r3, [pc, #412]	; (800946c <SDMMC_GetCmdResp1+0x1d8>)
 80092d0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0ef      	beq.n	80092b6 <SDMMC_GetCmdResp1+0x22>
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1ea      	bne.n	80092b6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2204      	movs	r2, #4
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092f2:	2304      	movs	r3, #4
 80092f4:	e0b1      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d004      	beq.n	800930c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009308:	2301      	movs	r3, #1
 800930a:	e0a6      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a58      	ldr	r2, [pc, #352]	; (8009470 <SDMMC_GetCmdResp1+0x1dc>)
 8009310:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fcda 	bl	8008ccc <SDMMC_GetCommandResponse>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	4293      	cmp	r3, r2
 8009320:	d001      	beq.n	8009326 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009322:	2301      	movs	r3, #1
 8009324:	e099      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009326:	2100      	movs	r1, #0
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7ff fcdc 	bl	8008ce6 <SDMMC_GetResponse>
 800932e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4b50      	ldr	r3, [pc, #320]	; (8009474 <SDMMC_GetCmdResp1+0x1e0>)
 8009334:	4013      	ands	r3, r2
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800933a:	2300      	movs	r3, #0
 800933c:	e08d      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	da02      	bge.n	800934a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009348:	e087      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009354:	2340      	movs	r3, #64	; 0x40
 8009356:	e080      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009362:	2380      	movs	r3, #128	; 0x80
 8009364:	e079      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009374:	e071      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009384:	e069      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009394:	e061      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80093a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093a4:	e059      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b4:	e051      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093c4:	e049      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80093d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093d4:	e041      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80093e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093e4:	e039      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80093f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093f4:	e031      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009404:	e029      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009410:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009414:	e021      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009420:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009424:	e019      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009430:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009434:	e011      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009444:	e009      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009450:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009454:	e001      	b.n	800945a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800945a:	4618      	mov	r0, r3
 800945c:	3720      	adds	r7, #32
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000000 	.word	0x20000000
 8009468:	10624dd3 	.word	0x10624dd3
 800946c:	00200045 	.word	0x00200045
 8009470:	002000c5 	.word	0x002000c5
 8009474:	fdffe008 	.word	0xfdffe008

08009478 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009480:	4b1f      	ldr	r3, [pc, #124]	; (8009500 <SDMMC_GetCmdResp2+0x88>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <SDMMC_GetCmdResp2+0x8c>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0a5b      	lsrs	r3, r3, #9
 800948c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009490:	fb02 f303 	mul.w	r3, r2, r3
 8009494:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1e5a      	subs	r2, r3, #1
 800949a:	60fa      	str	r2, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a4:	e026      	b.n	80094f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0ef      	beq.n	8009496 <SDMMC_GetCmdResp2+0x1e>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1ea      	bne.n	8009496 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2204      	movs	r2, #4
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094d2:	2304      	movs	r3, #4
 80094d4:	e00e      	b.n	80094f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e003      	b.n	80094f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a06      	ldr	r2, [pc, #24]	; (8009508 <SDMMC_GetCmdResp2+0x90>)
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	20000000 	.word	0x20000000
 8009504:	10624dd3 	.word	0x10624dd3
 8009508:	002000c5 	.word	0x002000c5

0800950c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009514:	4b1a      	ldr	r3, [pc, #104]	; (8009580 <SDMMC_GetCmdResp3+0x74>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1a      	ldr	r2, [pc, #104]	; (8009584 <SDMMC_GetCmdResp3+0x78>)
 800951a:	fba2 2303 	umull	r2, r3, r2, r3
 800951e:	0a5b      	lsrs	r3, r3, #9
 8009520:	f241 3288 	movw	r2, #5000	; 0x1388
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	1e5a      	subs	r2, r3, #1
 800952e:	60fa      	str	r2, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009538:	e01b      	b.n	8009572 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0ef      	beq.n	800952a <SDMMC_GetCmdResp3+0x1e>
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ea      	bne.n	800952a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2204      	movs	r2, #4
 8009564:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009566:	2304      	movs	r3, #4
 8009568:	e003      	b.n	8009572 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a06      	ldr	r2, [pc, #24]	; (8009588 <SDMMC_GetCmdResp3+0x7c>)
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	20000000 	.word	0x20000000
 8009584:	10624dd3 	.word	0x10624dd3
 8009588:	002000c5 	.word	0x002000c5

0800958c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	460b      	mov	r3, r1
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800959a:	4b35      	ldr	r3, [pc, #212]	; (8009670 <SDMMC_GetCmdResp6+0xe4>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a35      	ldr	r2, [pc, #212]	; (8009674 <SDMMC_GetCmdResp6+0xe8>)
 80095a0:	fba2 2303 	umull	r2, r3, r2, r3
 80095a4:	0a5b      	lsrs	r3, r3, #9
 80095a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095aa:	fb02 f303 	mul.w	r3, r2, r3
 80095ae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	1e5a      	subs	r2, r3, #1
 80095b4:	61fa      	str	r2, [r7, #28]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095be:	e052      	b.n	8009666 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0ef      	beq.n	80095b0 <SDMMC_GetCmdResp6+0x24>
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1ea      	bne.n	80095b0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095de:	f003 0304 	and.w	r3, r3, #4
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2204      	movs	r2, #4
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095ec:	2304      	movs	r3, #4
 80095ee:	e03a      	b.n	8009666 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009602:	2301      	movs	r3, #1
 8009604:	e02f      	b.n	8009666 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff fb60 	bl	8008ccc <SDMMC_GetCommandResponse>
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	7afb      	ldrb	r3, [r7, #11]
 8009612:	4293      	cmp	r3, r2
 8009614:	d001      	beq.n	800961a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009616:	2301      	movs	r3, #1
 8009618:	e025      	b.n	8009666 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4a16      	ldr	r2, [pc, #88]	; (8009678 <SDMMC_GetCmdResp6+0xec>)
 800961e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009620:	2100      	movs	r1, #0
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff fb5f 	bl	8008ce6 <SDMMC_GetResponse>
 8009628:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d106      	bne.n	8009642 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	0c1b      	lsrs	r3, r3, #16
 8009638:	b29a      	uxth	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800963e:	2300      	movs	r3, #0
 8009640:	e011      	b.n	8009666 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800964c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009650:	e009      	b.n	8009666 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800965c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009660:	e001      	b.n	8009666 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000000 	.word	0x20000000
 8009674:	10624dd3 	.word	0x10624dd3
 8009678:	002000c5 	.word	0x002000c5

0800967c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009684:	4b22      	ldr	r3, [pc, #136]	; (8009710 <SDMMC_GetCmdResp7+0x94>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a22      	ldr	r2, [pc, #136]	; (8009714 <SDMMC_GetCmdResp7+0x98>)
 800968a:	fba2 2303 	umull	r2, r3, r2, r3
 800968e:	0a5b      	lsrs	r3, r3, #9
 8009690:	f241 3288 	movw	r2, #5000	; 0x1388
 8009694:	fb02 f303 	mul.w	r3, r2, r3
 8009698:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	1e5a      	subs	r2, r3, #1
 800969e:	60fa      	str	r2, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096a8:	e02c      	b.n	8009704 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0ef      	beq.n	800969a <SDMMC_GetCmdResp7+0x1e>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1ea      	bne.n	800969a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d004      	beq.n	80096da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2204      	movs	r2, #4
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096d6:	2304      	movs	r3, #4
 80096d8:	e014      	b.n	8009704 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d004      	beq.n	80096f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e009      	b.n	8009704 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2240      	movs	r2, #64	; 0x40
 8009700:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009702:	2300      	movs	r3, #0

}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	20000000 	.word	0x20000000
 8009714:	10624dd3 	.word	0x10624dd3

08009718 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009720:	4b11      	ldr	r3, [pc, #68]	; (8009768 <SDMMC_GetCmdError+0x50>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a11      	ldr	r2, [pc, #68]	; (800976c <SDMMC_GetCmdError+0x54>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	0a5b      	lsrs	r3, r3, #9
 800972c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009730:	fb02 f303 	mul.w	r3, r2, r3
 8009734:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1e5a      	subs	r2, r3, #1
 800973a:	60fa      	str	r2, [r7, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009740:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009744:	e009      	b.n	800975a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0f1      	beq.n	8009736 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a06      	ldr	r2, [pc, #24]	; (8009770 <SDMMC_GetCmdError+0x58>)
 8009756:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000000 	.word	0x20000000
 800976c:	10624dd3 	.word	0x10624dd3
 8009770:	002000c5 	.word	0x002000c5

08009774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009774:	b084      	sub	sp, #16
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	f107 001c 	add.w	r0, r7, #28
 8009782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 faf6 	bl	800ad84 <USB_CoreReset>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800979c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	639a      	str	r2, [r3, #56]	; 0x38
 80097ae:	e005      	b.n	80097bc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097c8:	b004      	add	sp, #16
 80097ca:	4770      	bx	lr

080097cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	4613      	mov	r3, r2
 80097d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d165      	bne.n	80098ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	4a3e      	ldr	r2, [pc, #248]	; (80098dc <USB_SetTurnaroundTime+0x110>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d906      	bls.n	80097f6 <USB_SetTurnaroundTime+0x2a>
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4a3d      	ldr	r2, [pc, #244]	; (80098e0 <USB_SetTurnaroundTime+0x114>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d202      	bcs.n	80097f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80097f0:	230f      	movs	r3, #15
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	e05c      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	4a39      	ldr	r2, [pc, #228]	; (80098e0 <USB_SetTurnaroundTime+0x114>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d306      	bcc.n	800980c <USB_SetTurnaroundTime+0x40>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	4a38      	ldr	r2, [pc, #224]	; (80098e4 <USB_SetTurnaroundTime+0x118>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d202      	bcs.n	800980c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009806:	230e      	movs	r3, #14
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	e051      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	4a35      	ldr	r2, [pc, #212]	; (80098e4 <USB_SetTurnaroundTime+0x118>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d306      	bcc.n	8009822 <USB_SetTurnaroundTime+0x56>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	4a34      	ldr	r2, [pc, #208]	; (80098e8 <USB_SetTurnaroundTime+0x11c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d202      	bcs.n	8009822 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800981c:	230d      	movs	r3, #13
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	e046      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	4a30      	ldr	r2, [pc, #192]	; (80098e8 <USB_SetTurnaroundTime+0x11c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d306      	bcc.n	8009838 <USB_SetTurnaroundTime+0x6c>
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	4a2f      	ldr	r2, [pc, #188]	; (80098ec <USB_SetTurnaroundTime+0x120>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d802      	bhi.n	8009838 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009832:	230c      	movs	r3, #12
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	e03b      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4a2c      	ldr	r2, [pc, #176]	; (80098ec <USB_SetTurnaroundTime+0x120>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d906      	bls.n	800984e <USB_SetTurnaroundTime+0x82>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	4a2b      	ldr	r2, [pc, #172]	; (80098f0 <USB_SetTurnaroundTime+0x124>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d802      	bhi.n	800984e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009848:	230b      	movs	r3, #11
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e030      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	4a27      	ldr	r2, [pc, #156]	; (80098f0 <USB_SetTurnaroundTime+0x124>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d906      	bls.n	8009864 <USB_SetTurnaroundTime+0x98>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	4a26      	ldr	r2, [pc, #152]	; (80098f4 <USB_SetTurnaroundTime+0x128>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d802      	bhi.n	8009864 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800985e:	230a      	movs	r3, #10
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	e025      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	4a23      	ldr	r2, [pc, #140]	; (80098f4 <USB_SetTurnaroundTime+0x128>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d906      	bls.n	800987a <USB_SetTurnaroundTime+0xae>
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	4a22      	ldr	r2, [pc, #136]	; (80098f8 <USB_SetTurnaroundTime+0x12c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d202      	bcs.n	800987a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009874:	2309      	movs	r3, #9
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	e01a      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	4a1e      	ldr	r2, [pc, #120]	; (80098f8 <USB_SetTurnaroundTime+0x12c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d306      	bcc.n	8009890 <USB_SetTurnaroundTime+0xc4>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4a1d      	ldr	r2, [pc, #116]	; (80098fc <USB_SetTurnaroundTime+0x130>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d802      	bhi.n	8009890 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800988a:	2308      	movs	r3, #8
 800988c:	617b      	str	r3, [r7, #20]
 800988e:	e00f      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4a1a      	ldr	r2, [pc, #104]	; (80098fc <USB_SetTurnaroundTime+0x130>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d906      	bls.n	80098a6 <USB_SetTurnaroundTime+0xda>
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4a19      	ldr	r2, [pc, #100]	; (8009900 <USB_SetTurnaroundTime+0x134>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d202      	bcs.n	80098a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80098a0:	2307      	movs	r3, #7
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	e004      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80098a6:	2306      	movs	r3, #6
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	e001      	b.n	80098b0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80098ac:	2309      	movs	r3, #9
 80098ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	029b      	lsls	r3, r3, #10
 80098c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80098c8:	431a      	orrs	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	371c      	adds	r7, #28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	00d8acbf 	.word	0x00d8acbf
 80098e0:	00e4e1c0 	.word	0x00e4e1c0
 80098e4:	00f42400 	.word	0x00f42400
 80098e8:	01067380 	.word	0x01067380
 80098ec:	011a499f 	.word	0x011a499f
 80098f0:	01312cff 	.word	0x01312cff
 80098f4:	014ca43f 	.word	0x014ca43f
 80098f8:	016e3600 	.word	0x016e3600
 80098fc:	01a6ab1f 	.word	0x01a6ab1f
 8009900:	01e84800 	.word	0x01e84800

08009904 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f043 0201 	orr.w	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f023 0201 	bic.w	r2, r3, #1
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d115      	bne.n	8009996 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009976:	2001      	movs	r0, #1
 8009978:	f7f7 fc84 	bl	8001284 <HAL_Delay>
      ms++;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3301      	adds	r3, #1
 8009980:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 f985 	bl	800ac92 <USB_GetMode>
 8009988:	4603      	mov	r3, r0
 800998a:	2b01      	cmp	r3, #1
 800998c:	d01e      	beq.n	80099cc <USB_SetCurrentMode+0x84>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b31      	cmp	r3, #49	; 0x31
 8009992:	d9f0      	bls.n	8009976 <USB_SetCurrentMode+0x2e>
 8009994:	e01a      	b.n	80099cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d115      	bne.n	80099c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099a8:	2001      	movs	r0, #1
 80099aa:	f7f7 fc6b 	bl	8001284 <HAL_Delay>
      ms++;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3301      	adds	r3, #1
 80099b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 f96c 	bl	800ac92 <USB_GetMode>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <USB_SetCurrentMode+0x84>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b31      	cmp	r3, #49	; 0x31
 80099c4:	d9f0      	bls.n	80099a8 <USB_SetCurrentMode+0x60>
 80099c6:	e001      	b.n	80099cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e005      	b.n	80099d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b32      	cmp	r3, #50	; 0x32
 80099d0:	d101      	bne.n	80099d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e000      	b.n	80099d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099e0:	b084      	sub	sp, #16
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b086      	sub	sp, #24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80099ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099fa:	2300      	movs	r3, #0
 80099fc:	613b      	str	r3, [r7, #16]
 80099fe:	e009      	b.n	8009a14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3340      	adds	r3, #64	; 0x40
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3301      	adds	r3, #1
 8009a12:	613b      	str	r3, [r7, #16]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	2b0e      	cmp	r3, #14
 8009a18:	d9f2      	bls.n	8009a00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d11c      	bne.n	8009a5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a2e:	f043 0302 	orr.w	r3, r3, #2
 8009a32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	e005      	b.n	8009a66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	2300      	movs	r3, #0
 8009a70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a78:	4619      	mov	r1, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a80:	461a      	mov	r2, r3
 8009a82:	680b      	ldr	r3, [r1, #0]
 8009a84:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a86:	2103      	movs	r1, #3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f959 	bl	8009d40 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a8e:	2110      	movs	r1, #16
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f8f1 	bl	8009c78 <USB_FlushTxFifo>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f91d 	bl	8009ce0 <USB_FlushRxFifo>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ace:	461a      	mov	r2, r3
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	e043      	b.n	8009b62 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009af0:	d118      	bne.n	8009b24 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b04:	461a      	mov	r2, r3
 8009b06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	e013      	b.n	8009b36 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	e008      	b.n	8009b36 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b30:	461a      	mov	r2, r3
 8009b32:	2300      	movs	r3, #0
 8009b34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b42:	461a      	mov	r2, r3
 8009b44:	2300      	movs	r3, #0
 8009b46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	461a      	mov	r2, r3
 8009b56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	613b      	str	r3, [r7, #16]
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d3b7      	bcc.n	8009ada <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	613b      	str	r3, [r7, #16]
 8009b6e:	e043      	b.n	8009bf8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b86:	d118      	bne.n	8009bba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ba0:	6013      	str	r3, [r2, #0]
 8009ba2:	e013      	b.n	8009bcc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	e008      	b.n	8009bcc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	2300      	movs	r3, #0
 8009bca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2300      	movs	r3, #0
 8009bdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	461a      	mov	r2, r3
 8009bec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d3b7      	bcc.n	8009b70 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009c20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	f043 0210 	orr.w	r2, r3, #16
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <USB_DevInit+0x294>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	f043 0208 	orr.w	r2, r3, #8
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d107      	bne.n	8009c62 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c5a:	f043 0304 	orr.w	r3, r3, #4
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c6e:	b004      	add	sp, #16
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	803c3800 	.word	0x803c3800

08009c78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4a13      	ldr	r2, [pc, #76]	; (8009cdc <USB_FlushTxFifo+0x64>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d901      	bls.n	8009c98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e01b      	b.n	8009cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	daf2      	bge.n	8009c86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	019b      	lsls	r3, r3, #6
 8009ca8:	f043 0220 	orr.w	r2, r3, #32
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a08      	ldr	r2, [pc, #32]	; (8009cdc <USB_FlushTxFifo+0x64>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d901      	bls.n	8009cc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e006      	b.n	8009cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d0f0      	beq.n	8009cb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	00030d40 	.word	0x00030d40

08009ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	4a11      	ldr	r2, [pc, #68]	; (8009d3c <USB_FlushRxFifo+0x5c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d901      	bls.n	8009cfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e018      	b.n	8009d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	daf2      	bge.n	8009cec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3301      	adds	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <USB_FlushRxFifo+0x5c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d901      	bls.n	8009d22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e006      	b.n	8009d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0310 	and.w	r3, r3, #16
 8009d2a:	2b10      	cmp	r3, #16
 8009d2c:	d0f0      	beq.n	8009d10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	00030d40 	.word	0x00030d40

08009d40 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d60:	4313      	orrs	r3, r2
 8009d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b087      	sub	sp, #28
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f003 0306 	and.w	r3, r3, #6
 8009d8a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d002      	beq.n	8009d98 <USB_GetDevSpeed+0x26>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b06      	cmp	r3, #6
 8009d96:	d102      	bne.n	8009d9e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	75fb      	strb	r3, [r7, #23]
 8009d9c:	e001      	b.n	8009da2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009d9e:	230f      	movs	r3, #15
 8009da0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	785b      	ldrb	r3, [r3, #1]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d13a      	bne.n	8009e42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd2:	69da      	ldr	r2, [r3, #28]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	2101      	movs	r1, #1
 8009dde:	fa01 f303 	lsl.w	r3, r1, r3
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	68f9      	ldr	r1, [r7, #12]
 8009de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dea:	4313      	orrs	r3, r2
 8009dec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d155      	bne.n	8009eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	791b      	ldrb	r3, [r3, #4]
 8009e1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	059b      	lsls	r3, r3, #22
 8009e26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	e036      	b.n	8009eb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e48:	69da      	ldr	r2, [r3, #28]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	2101      	movs	r1, #1
 8009e54:	fa01 f303 	lsl.w	r3, r1, r3
 8009e58:	041b      	lsls	r3, r3, #16
 8009e5a:	68f9      	ldr	r1, [r7, #12]
 8009e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e60:	4313      	orrs	r3, r2
 8009e62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d11a      	bne.n	8009eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	791b      	ldrb	r3, [r3, #4]
 8009e94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e96:	430b      	orrs	r3, r1
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	0151      	lsls	r1, r2, #5
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
	...

08009ec0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	785b      	ldrb	r3, [r3, #1]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d161      	bne.n	8009fa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ef2:	d11f      	bne.n	8009f34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	0151      	lsls	r1, r2, #5
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	440a      	add	r2, r1
 8009f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	0151      	lsls	r1, r2, #5
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	440a      	add	r2, r1
 8009f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	2101      	movs	r1, #1
 8009f46:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	43db      	mvns	r3, r3
 8009f4e:	68f9      	ldr	r1, [r7, #12]
 8009f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f54:	4013      	ands	r3, r2
 8009f56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f5e:	69da      	ldr	r2, [r3, #28]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	f003 030f 	and.w	r3, r3, #15
 8009f68:	2101      	movs	r1, #1
 8009f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	43db      	mvns	r3, r3
 8009f72:	68f9      	ldr	r1, [r7, #12]
 8009f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f78:	4013      	ands	r3, r2
 8009f7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	0159      	lsls	r1, r3, #5
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f96:	4619      	mov	r1, r3
 8009f98:	4b35      	ldr	r3, [pc, #212]	; (800a070 <USB_DeactivateEndpoint+0x1b0>)
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	600b      	str	r3, [r1, #0]
 8009f9e:	e060      	b.n	800a062 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fb6:	d11f      	bne.n	8009ff8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	0151      	lsls	r1, r2, #5
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	440a      	add	r2, r1
 8009fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	0151      	lsls	r1, r2, #5
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	440a      	add	r2, r1
 8009fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	f003 030f 	and.w	r3, r3, #15
 800a008:	2101      	movs	r1, #1
 800a00a:	fa01 f303 	lsl.w	r3, r1, r3
 800a00e:	041b      	lsls	r3, r3, #16
 800a010:	43db      	mvns	r3, r3
 800a012:	68f9      	ldr	r1, [r7, #12]
 800a014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a018:	4013      	ands	r3, r2
 800a01a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a022:	69da      	ldr	r2, [r3, #28]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f303 	lsl.w	r3, r1, r3
 800a032:	041b      	lsls	r3, r3, #16
 800a034:	43db      	mvns	r3, r3
 800a036:	68f9      	ldr	r1, [r7, #12]
 800a038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a03c:	4013      	ands	r3, r2
 800a03e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	0159      	lsls	r1, r3, #5
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	440b      	add	r3, r1
 800a056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05a:	4619      	mov	r1, r3
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <USB_DeactivateEndpoint+0x1b4>)
 800a05e:	4013      	ands	r3, r2
 800a060:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	ec337800 	.word	0xec337800
 800a074:	eff37800 	.word	0xeff37800

0800a078 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	785b      	ldrb	r3, [r3, #1]
 800a090:	2b01      	cmp	r3, #1
 800a092:	f040 810a 	bne.w	800a2aa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d132      	bne.n	800a104 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	0151      	lsls	r1, r2, #5
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	440a      	add	r2, r1
 800a0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0fc:	0cdb      	lsrs	r3, r3, #19
 800a0fe:	04db      	lsls	r3, r3, #19
 800a100:	6113      	str	r3, [r2, #16]
 800a102:	e074      	b.n	800a1ee <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	0151      	lsls	r1, r2, #5
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	440a      	add	r2, r1
 800a11a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a11e:	0cdb      	lsrs	r3, r3, #19
 800a120:	04db      	lsls	r3, r3, #19
 800a122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	0151      	lsls	r1, r2, #5
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	440a      	add	r2, r1
 800a13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a13e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a142:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a154:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6999      	ldr	r1, [r3, #24]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	440b      	add	r3, r1
 800a160:	1e59      	subs	r1, r3, #1
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	fbb1 f3f3 	udiv	r3, r1, r3
 800a16a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a16c:	4b9e      	ldr	r3, [pc, #632]	; (800a3e8 <USB_EPStartXfer+0x370>)
 800a16e:	400b      	ands	r3, r1
 800a170:	6939      	ldr	r1, [r7, #16]
 800a172:	0148      	lsls	r0, r1, #5
 800a174:	6979      	ldr	r1, [r7, #20]
 800a176:	4401      	add	r1, r0
 800a178:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a17c:	4313      	orrs	r3, r2
 800a17e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18c:	691a      	ldr	r2, [r3, #16]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a196:	6939      	ldr	r1, [r7, #16]
 800a198:	0148      	lsls	r0, r1, #5
 800a19a:	6979      	ldr	r1, [r7, #20]
 800a19c:	4401      	add	r1, r0
 800a19e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	791b      	ldrb	r3, [r3, #4]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d11f      	bne.n	800a1ee <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	0151      	lsls	r1, r2, #5
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	440a      	add	r2, r1
 800a1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a1cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	0151      	lsls	r1, r2, #5
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	440a      	add	r2, r1
 800a1e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1ec:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	0151      	lsls	r1, r2, #5
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	440a      	add	r2, r1
 800a204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a208:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a20c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	791b      	ldrb	r3, [r3, #4]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d015      	beq.n	800a242 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8106 	beq.w	800a42c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 030f 	and.w	r3, r3, #15
 800a230:	2101      	movs	r1, #1
 800a232:	fa01 f303 	lsl.w	r3, r1, r3
 800a236:	6979      	ldr	r1, [r7, #20]
 800a238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a23c:	4313      	orrs	r3, r2
 800a23e:	634b      	str	r3, [r1, #52]	; 0x34
 800a240:	e0f4      	b.n	800a42c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d110      	bne.n	800a274 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	0151      	lsls	r1, r2, #5
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	440a      	add	r2, r1
 800a268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a26c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e00f      	b.n	800a294 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a28e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a292:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	6919      	ldr	r1, [r3, #16]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	781a      	ldrb	r2, [r3, #0]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fa94 	bl	800a7d0 <USB_WritePacket>
 800a2a8:	e0c0      	b.n	800a42c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	0151      	lsls	r1, r2, #5
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	440a      	add	r2, r1
 800a2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c4:	0cdb      	lsrs	r3, r3, #19
 800a2c6:	04db      	lsls	r3, r3, #19
 800a2c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	0151      	lsls	r1, r2, #5
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	440a      	add	r2, r1
 800a2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d123      	bne.n	800a33e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a30c:	6939      	ldr	r1, [r7, #16]
 800a30e:	0148      	lsls	r0, r1, #5
 800a310:	6979      	ldr	r1, [r7, #20]
 800a312:	4401      	add	r1, r0
 800a314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a318:	4313      	orrs	r3, r2
 800a31a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	4413      	add	r3, r2
 800a324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	0151      	lsls	r1, r2, #5
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	440a      	add	r2, r1
 800a332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a33a:	6113      	str	r3, [r2, #16]
 800a33c:	e037      	b.n	800a3ae <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	4413      	add	r3, r2
 800a348:	1e5a      	subs	r2, r3, #1
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a352:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	89fa      	ldrh	r2, [r7, #14]
 800a35a:	fb03 f202 	mul.w	r2, r3, r2
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	89fb      	ldrh	r3, [r7, #14]
 800a372:	04d9      	lsls	r1, r3, #19
 800a374:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <USB_EPStartXfer+0x370>)
 800a376:	400b      	ands	r3, r1
 800a378:	6939      	ldr	r1, [r7, #16]
 800a37a:	0148      	lsls	r0, r1, #5
 800a37c:	6979      	ldr	r1, [r7, #20]
 800a37e:	4401      	add	r1, r0
 800a380:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a384:	4313      	orrs	r3, r2
 800a386:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a39e:	6939      	ldr	r1, [r7, #16]
 800a3a0:	0148      	lsls	r0, r1, #5
 800a3a2:	6979      	ldr	r1, [r7, #20]
 800a3a4:	4401      	add	r1, r0
 800a3a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	791b      	ldrb	r3, [r3, #4]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d12a      	bne.n	800a40c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d112      	bne.n	800a3ec <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	e011      	b.n	800a40c <USB_EPStartXfer+0x394>
 800a3e8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	440a      	add	r2, r1
 800a402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a40a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	440a      	add	r2, r1
 800a422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a42a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop

0800a438 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	2b01      	cmp	r3, #1
 800a452:	f040 80ab 	bne.w	800a5ac <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d132      	bne.n	800a4c4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	0151      	lsls	r1, r2, #5
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	440a      	add	r2, r1
 800a474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a47c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	0151      	lsls	r1, r2, #5
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	440a      	add	r2, r1
 800a498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a49c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	0151      	lsls	r1, r2, #5
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	440a      	add	r2, r1
 800a4b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4bc:	0cdb      	lsrs	r3, r3, #19
 800a4be:	04db      	lsls	r3, r3, #19
 800a4c0:	6113      	str	r3, [r2, #16]
 800a4c2:	e04e      	b.n	800a562 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4de:	0cdb      	lsrs	r3, r3, #19
 800a4e0:	04db      	lsls	r3, r3, #19
 800a4e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	0151      	lsls	r1, r2, #5
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a502:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a506:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	699a      	ldr	r2, [r3, #24]
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	429a      	cmp	r2, r3
 800a512:	d903      	bls.n	800a51c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68da      	ldr	r2, [r3, #12]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	0151      	lsls	r1, r2, #5
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	440a      	add	r2, r1
 800a532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a53a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a548:	691a      	ldr	r2, [r3, #16]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	0148      	lsls	r0, r1, #5
 800a556:	68f9      	ldr	r1, [r7, #12]
 800a558:	4401      	add	r1, r0
 800a55a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a55e:	4313      	orrs	r3, r2
 800a560:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	440a      	add	r2, r1
 800a578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a57c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a580:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d071      	beq.n	800a66e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	2101      	movs	r1, #1
 800a59c:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a0:	68f9      	ldr	r1, [r7, #12]
 800a5a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	634b      	str	r3, [r1, #52]	; 0x34
 800a5aa:	e060      	b.n	800a66e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	0151      	lsls	r1, r2, #5
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	440a      	add	r2, r1
 800a5c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5c6:	0cdb      	lsrs	r3, r3, #19
 800a5c8:	04db      	lsls	r3, r3, #19
 800a5ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	0151      	lsls	r1, r2, #5
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	440a      	add	r2, r1
 800a5e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	68da      	ldr	r2, [r3, #12]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	68da      	ldr	r2, [r3, #12]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	0151      	lsls	r1, r2, #5
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	440a      	add	r2, r1
 800a61e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a634:	691a      	ldr	r2, [r3, #16]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a63e:	68b9      	ldr	r1, [r7, #8]
 800a640:	0148      	lsls	r0, r1, #5
 800a642:	68f9      	ldr	r1, [r7, #12]
 800a644:	4401      	add	r1, r0
 800a646:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a64a:	4313      	orrs	r3, r2
 800a64c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	0151      	lsls	r1, r2, #5
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	440a      	add	r2, r1
 800a664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a668:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a66c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d14a      	bne.n	800a730 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6b2:	f040 8086 	bne.w	800a7c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	7812      	ldrb	r2, [r2, #0]
 800a6ca:	0151      	lsls	r1, r2, #5
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	440a      	add	r2, r1
 800a6d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	7812      	ldrb	r2, [r2, #0]
 800a6ee:	0151      	lsls	r1, r2, #5
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	440a      	add	r2, r1
 800a6f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3301      	adds	r3, #1
 800a702:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f242 7210 	movw	r2, #10000	; 0x2710
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d902      	bls.n	800a714 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	75fb      	strb	r3, [r7, #23]
          break;
 800a712:	e056      	b.n	800a7c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a72c:	d0e7      	beq.n	800a6fe <USB_EPStopXfer+0x82>
 800a72e:	e048      	b.n	800a7c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a748:	d13b      	bne.n	800a7c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	7812      	ldrb	r2, [r2, #0]
 800a75e:	0151      	lsls	r1, r2, #5
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	440a      	add	r2, r1
 800a764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a76c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	0151      	lsls	r1, r2, #5
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	440a      	add	r2, r1
 800a788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a78c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3301      	adds	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d902      	bls.n	800a7a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a7a6:	e00c      	b.n	800a7c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7c0:	d0e7      	beq.n	800a792 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	371c      	adds	r7, #28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b089      	sub	sp, #36	; 0x24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	461a      	mov	r2, r3
 800a7de:	460b      	mov	r3, r1
 800a7e0:	71fb      	strb	r3, [r7, #7]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a7ee:	88bb      	ldrh	r3, [r7, #4]
 800a7f0:	3303      	adds	r3, #3
 800a7f2:	089b      	lsrs	r3, r3, #2
 800a7f4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	e018      	b.n	800a82e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	031a      	lsls	r2, r3, #12
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	4413      	add	r3, r2
 800a804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a808:	461a      	mov	r2, r3
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3301      	adds	r3, #1
 800a814:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	3301      	adds	r3, #1
 800a81a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	3301      	adds	r3, #1
 800a820:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	3301      	adds	r3, #1
 800a826:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	3301      	adds	r3, #1
 800a82c:	61bb      	str	r3, [r7, #24]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	429a      	cmp	r2, r3
 800a834:	d3e2      	bcc.n	800a7fc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3724      	adds	r7, #36	; 0x24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a844:	b480      	push	{r7}
 800a846:	b08b      	sub	sp, #44	; 0x2c
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4613      	mov	r3, r2
 800a850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a85a:	88fb      	ldrh	r3, [r7, #6]
 800a85c:	089b      	lsrs	r3, r3, #2
 800a85e:	b29b      	uxth	r3, r3
 800a860:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a862:	88fb      	ldrh	r3, [r7, #6]
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a86a:	2300      	movs	r3, #0
 800a86c:	623b      	str	r3, [r7, #32]
 800a86e:	e014      	b.n	800a89a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	3301      	adds	r3, #1
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	3301      	adds	r3, #1
 800a886:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	3301      	adds	r3, #1
 800a88c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	3301      	adds	r3, #1
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	3301      	adds	r3, #1
 800a898:	623b      	str	r3, [r7, #32]
 800a89a:	6a3a      	ldr	r2, [r7, #32]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d3e6      	bcc.n	800a870 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8a2:	8bfb      	ldrh	r3, [r7, #30]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01e      	beq.n	800a8e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	f107 0310 	add.w	r3, r7, #16
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	701a      	strb	r2, [r3, #0]
      i++;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a8da:	8bfb      	ldrh	r3, [r7, #30]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8e0:	8bfb      	ldrh	r3, [r7, #30]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1ea      	bne.n	800a8bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	372c      	adds	r7, #44	; 0x2c
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	785b      	ldrb	r3, [r3, #1]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d12c      	bne.n	800a96a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4413      	add	r3, r2
 800a918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	db12      	blt.n	800a948 <USB_EPSetStall+0x54>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00f      	beq.n	800a948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	0151      	lsls	r1, r2, #5
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	440a      	add	r2, r1
 800a93e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	0151      	lsls	r1, r2, #5
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	440a      	add	r2, r1
 800a95e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	e02b      	b.n	800a9c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	db12      	blt.n	800a9a2 <USB_EPSetStall+0xae>
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00f      	beq.n	800a9a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	0151      	lsls	r1, r2, #5
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	440a      	add	r2, r1
 800a998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a99c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	0151      	lsls	r1, r2, #5
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	440a      	add	r2, r1
 800a9b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d128      	bne.n	800aa3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	0151      	lsls	r1, r2, #5
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	440a      	add	r2, r1
 800aa02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	791b      	ldrb	r3, [r3, #4]
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d003      	beq.n	800aa1c <USB_EPClearStall+0x4c>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	791b      	ldrb	r3, [r3, #4]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d138      	bne.n	800aa8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	e027      	b.n	800aa8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	791b      	ldrb	r3, [r3, #4]
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d003      	beq.n	800aa6e <USB_EPClearStall+0x9e>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	791b      	ldrb	r3, [r3, #4]
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d10f      	bne.n	800aa8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	0151      	lsls	r1, r2, #5
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	440a      	add	r2, r1
 800aa84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aabe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aad0:	68f9      	ldr	r1, [r7, #12]
 800aad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aad6:	4313      	orrs	r3, r2
 800aad8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab02:	f023 0303 	bic.w	r3, r3, #3
 800ab06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab16:	f023 0302 	bic.w	r3, r3, #2
 800ab1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab44:	f023 0303 	bic.w	r3, r3, #3
 800ab48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab58:	f043 0302 	orr.w	r3, r3, #2
 800ab5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	699b      	ldr	r3, [r3, #24]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4013      	ands	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab84:	68fb      	ldr	r3, [r7, #12]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b085      	sub	sp, #20
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	4013      	ands	r3, r2
 800abb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	0c1b      	lsrs	r3, r3, #16
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe2:	69db      	ldr	r3, [r3, #28]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	4013      	ands	r3, r2
 800abe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	b29b      	uxth	r3, r3
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b085      	sub	sp, #20
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	460b      	mov	r3, r1
 800ac04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac0a:	78fb      	ldrb	r3, [r7, #3]
 800ac0c:	015a      	lsls	r2, r3, #5
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	4013      	ands	r3, r2
 800ac26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac28:	68bb      	ldr	r3, [r7, #8]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b087      	sub	sp, #28
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac5a:	78fb      	ldrb	r3, [r7, #3]
 800ac5c:	f003 030f 	and.w	r3, r3, #15
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	fa22 f303 	lsr.w	r3, r2, r3
 800ac66:	01db      	lsls	r3, r3, #7
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	4013      	ands	r3, r2
 800ac82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac84:	68bb      	ldr	r3, [r7, #8]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acae:	b480      	push	{r7}
 800acb0:	b085      	sub	sp, #20
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800accc:	f023 0307 	bic.w	r3, r3, #7
 800acd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ace0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	333c      	adds	r3, #60	; 0x3c
 800ad06:	3304      	adds	r3, #4
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4a1c      	ldr	r2, [pc, #112]	; (800ad80 <USB_EP0_OutStart+0x8c>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d90a      	bls.n	800ad2a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad24:	d101      	bne.n	800ad2a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	e024      	b.n	800ad74 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad30:	461a      	mov	r2, r3
 800ad32:	2300      	movs	r3, #0
 800ad34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad58:	f043 0318 	orr.w	r3, r3, #24
 800ad5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad70:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	4f54300a 	.word	0x4f54300a

0800ad84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	4a13      	ldr	r2, [pc, #76]	; (800ade8 <USB_CoreReset+0x64>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d901      	bls.n	800ada2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e01b      	b.n	800adda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	daf2      	bge.n	800ad90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f043 0201 	orr.w	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4a09      	ldr	r2, [pc, #36]	; (800ade8 <USB_CoreReset+0x64>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d901      	bls.n	800adcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e006      	b.n	800adda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b01      	cmp	r3, #1
 800add6:	d0f0      	beq.n	800adba <USB_CoreReset+0x36>

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	00030d40 	.word	0x00030d40

0800adec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800adf0:	4904      	ldr	r1, [pc, #16]	; (800ae04 <MX_FATFS_Init+0x18>)
 800adf2:	4805      	ldr	r0, [pc, #20]	; (800ae08 <MX_FATFS_Init+0x1c>)
 800adf4:	f001 fe6e 	bl	800cad4 <FATFS_LinkDriver>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	4b03      	ldr	r3, [pc, #12]	; (800ae0c <MX_FATFS_Init+0x20>)
 800adfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae00:	bf00      	nop
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	200004ac 	.word	0x200004ac
 800ae08:	0800d864 	.word	0x0800d864
 800ae0c:	200004a8 	.word	0x200004a8

0800ae10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae1a:	f000 f879 	bl	800af10 <BSP_SD_IsDetected>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d001      	beq.n	800ae28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ae24:	2302      	movs	r3, #2
 800ae26:	e012      	b.n	800ae4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ae28:	480b      	ldr	r0, [pc, #44]	; (800ae58 <BSP_SD_Init+0x48>)
 800ae2a:	f7fa fd47 	bl	80058bc <HAL_SD_Init>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d109      	bne.n	800ae4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ae38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ae3c:	4806      	ldr	r0, [pc, #24]	; (800ae58 <BSP_SD_Init+0x48>)
 800ae3e:	f7fb fc13 	bl	8006668 <HAL_SD_ConfigWideBusOperation>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000254 	.word	0x20000254

0800ae5c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	68f9      	ldr	r1, [r7, #12]
 800ae78:	4806      	ldr	r0, [pc, #24]	; (800ae94 <BSP_SD_ReadBlocks+0x38>)
 800ae7a:	f7fa fe47 	bl	8005b0c <HAL_SD_ReadBlocks>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20000254 	.word	0x20000254

0800ae98 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	68f9      	ldr	r1, [r7, #12]
 800aeb4:	4806      	ldr	r0, [pc, #24]	; (800aed0 <BSP_SD_WriteBlocks+0x38>)
 800aeb6:	f7fa ffbb 	bl	8005e30 <HAL_SD_WriteBlocks>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20000254 	.word	0x20000254

0800aed4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aed8:	4805      	ldr	r0, [pc, #20]	; (800aef0 <BSP_SD_GetCardState+0x1c>)
 800aeda:	f7fb fcd9 	bl	8006890 <HAL_SD_GetCardState>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	bf14      	ite	ne
 800aee4:	2301      	movne	r3, #1
 800aee6:	2300      	moveq	r3, #0
 800aee8:	b2db      	uxtb	r3, r3
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	20000254 	.word	0x20000254

0800aef4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aefc:	6879      	ldr	r1, [r7, #4]
 800aefe:	4803      	ldr	r0, [pc, #12]	; (800af0c <BSP_SD_GetCardInfo+0x18>)
 800af00:	f7fb fb86 	bl	8006610 <HAL_SD_GetCardInfo>
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20000254 	.word	0x20000254

0800af10 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800af16:	2301      	movs	r3, #1
 800af18:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800af1a:	f000 f80b 	bl	800af34 <BSP_PlatformIsDetected>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800af24:	2300      	movs	r3, #0
 800af26:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800af28:	79fb      	ldrb	r3, [r7, #7]
 800af2a:	b2db      	uxtb	r3, r3
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800af3a:	2301      	movs	r3, #1
 800af3c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800af3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af46:	f7f6 fc65 	bl	8001814 <HAL_GPIO_ReadPin>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800af50:	2300      	movs	r3, #0
 800af52:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800af54:	79fb      	ldrb	r3, [r7, #7]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800af6a:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <SD_CheckStatus+0x38>)
 800af6c:	2201      	movs	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800af70:	f7ff ffb0 	bl	800aed4 <BSP_SD_GetCardState>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d107      	bne.n	800af8a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800af7a:	4b07      	ldr	r3, [pc, #28]	; (800af98 <SD_CheckStatus+0x38>)
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f023 0301 	bic.w	r3, r3, #1
 800af84:	b2da      	uxtb	r2, r3
 800af86:	4b04      	ldr	r3, [pc, #16]	; (800af98 <SD_CheckStatus+0x38>)
 800af88:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800af8a:	4b03      	ldr	r3, [pc, #12]	; (800af98 <SD_CheckStatus+0x38>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	20000009 	.word	0x20000009

0800af9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <SD_initialize+0x38>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800afac:	f7ff ff30 	bl	800ae10 <BSP_SD_Init>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d107      	bne.n	800afc6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff ffd1 	bl	800af60 <SD_CheckStatus>
 800afbe:	4603      	mov	r3, r0
 800afc0:	461a      	mov	r2, r3
 800afc2:	4b04      	ldr	r3, [pc, #16]	; (800afd4 <SD_initialize+0x38>)
 800afc4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800afc6:	4b03      	ldr	r3, [pc, #12]	; (800afd4 <SD_initialize+0x38>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	b2db      	uxtb	r3, r3
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	20000009 	.word	0x20000009

0800afd8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	4603      	mov	r3, r0
 800afe0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff ffbb 	bl	800af60 <SD_CheckStatus>
 800afea:	4603      	mov	r3, r0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	607a      	str	r2, [r7, #4]
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	68b8      	ldr	r0, [r7, #8]
 800b012:	f7ff ff23 	bl	800ae5c <BSP_SD_ReadBlocks>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d107      	bne.n	800b02c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b01c:	bf00      	nop
 800b01e:	f7ff ff59 	bl	800aed4 <BSP_SD_GetCardState>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1fa      	bne.n	800b01e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b086      	sub	sp, #24
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
 800b040:	603b      	str	r3, [r7, #0]
 800b042:	4603      	mov	r3, r0
 800b044:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b04a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	6879      	ldr	r1, [r7, #4]
 800b052:	68b8      	ldr	r0, [r7, #8]
 800b054:	f7ff ff20 	bl	800ae98 <BSP_SD_WriteBlocks>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d107      	bne.n	800b06e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b05e:	bf00      	nop
 800b060:	f7ff ff38 	bl	800aed4 <BSP_SD_GetCardState>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1fa      	bne.n	800b060 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3718      	adds	r7, #24
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b08c      	sub	sp, #48	; 0x30
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	4603      	mov	r3, r0
 800b080:	603a      	str	r2, [r7, #0]
 800b082:	71fb      	strb	r3, [r7, #7]
 800b084:	460b      	mov	r3, r1
 800b086:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b08e:	4b25      	ldr	r3, [pc, #148]	; (800b124 <SD_ioctl+0xac>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <SD_ioctl+0x28>
 800b09c:	2303      	movs	r3, #3
 800b09e:	e03c      	b.n	800b11a <SD_ioctl+0xa2>

  switch (cmd)
 800b0a0:	79bb      	ldrb	r3, [r7, #6]
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d834      	bhi.n	800b110 <SD_ioctl+0x98>
 800b0a6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <SD_ioctl+0x34>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0bd 	.word	0x0800b0bd
 800b0b0:	0800b0c5 	.word	0x0800b0c5
 800b0b4:	0800b0dd 	.word	0x0800b0dd
 800b0b8:	0800b0f7 	.word	0x0800b0f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0c2:	e028      	b.n	800b116 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0c4:	f107 0308 	add.w	r3, r7, #8
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff ff13 	bl	800aef4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b0ce:	6a3a      	ldr	r2, [r7, #32]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0da:	e01c      	b.n	800b116 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0dc:	f107 0308 	add.w	r3, r7, #8
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff ff07 	bl	800aef4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0f4:	e00f      	b.n	800b116 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0f6:	f107 0308 	add.w	r3, r7, #8
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff fefa 	bl	800aef4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	0a5a      	lsrs	r2, r3, #9
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b10e:	e002      	b.n	800b116 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b110:	2304      	movs	r3, #4
 800b112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3730      	adds	r7, #48	; 0x30
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	20000009 	.word	0x20000009

0800b128 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b134:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b138:	f002 fae2 	bl	800d700 <USBD_static_malloc>
 800b13c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d105      	bne.n	800b150 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b14c:	2302      	movs	r3, #2
 800b14e:	e066      	b.n	800b21e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7c1b      	ldrb	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d119      	bne.n	800b194 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b160:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b164:	2202      	movs	r2, #2
 800b166:	2181      	movs	r1, #129	; 0x81
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f002 f8b5 	bl	800d2d8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b174:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b178:	2202      	movs	r2, #2
 800b17a:	2101      	movs	r1, #1
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f002 f8ab 	bl	800d2d8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2210      	movs	r2, #16
 800b18e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b192:	e016      	b.n	800b1c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b194:	2340      	movs	r3, #64	; 0x40
 800b196:	2202      	movs	r2, #2
 800b198:	2181      	movs	r1, #129	; 0x81
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f002 f89c 	bl	800d2d8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f002 f893 	bl	800d2d8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2210      	movs	r2, #16
 800b1be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b1c2:	2308      	movs	r3, #8
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	2182      	movs	r1, #130	; 0x82
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f002 f885 	bl	800d2d8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	7c1b      	ldrb	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d109      	bne.n	800b20c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b202:	2101      	movs	r1, #1
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f002 f9e1 	bl	800d5cc <USBD_LL_PrepareReceive>
 800b20a:	e007      	b.n	800b21c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b212:	2340      	movs	r3, #64	; 0x40
 800b214:	2101      	movs	r1, #1
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f002 f9d8 	bl	800d5cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	460b      	mov	r3, r1
 800b230:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b232:	2181      	movs	r1, #129	; 0x81
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f002 f88d 	bl	800d354 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b240:	2101      	movs	r1, #1
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f002 f886 	bl	800d354 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b250:	2182      	movs	r1, #130	; 0x82
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f002 f87e 	bl	800d354 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b282:	4618      	mov	r0, r3
 800b284:	f002 fa4a 	bl	800d71c <USBD_static_free>
    pdev->pClassData = NULL;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
	...

0800b29c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e0af      	b.n	800b424 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d03f      	beq.n	800b350 <USBD_CDC_Setup+0xb4>
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	f040 809f 	bne.w	800b414 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	88db      	ldrh	r3, [r3, #6]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d02e      	beq.n	800b33c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	b25b      	sxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	da16      	bge.n	800b316 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b2f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	88d2      	ldrh	r2, [r2, #6]
 800b2fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	88db      	ldrh	r3, [r3, #6]
 800b300:	2b07      	cmp	r3, #7
 800b302:	bf28      	it	cs
 800b304:	2307      	movcs	r3, #7
 800b306:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	89fa      	ldrh	r2, [r7, #14]
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f001 fb13 	bl	800c93a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b314:	e085      	b.n	800b422 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	785a      	ldrb	r2, [r3, #1]
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	88db      	ldrh	r3, [r3, #6]
 800b324:	b2da      	uxtb	r2, r3
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b32c:	6939      	ldr	r1, [r7, #16]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	88db      	ldrh	r3, [r3, #6]
 800b332:	461a      	mov	r2, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 fb2c 	bl	800c992 <USBD_CtlPrepareRx>
      break;
 800b33a:	e072      	b.n	800b422 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	7850      	ldrb	r0, [r2, #1]
 800b348:	2200      	movs	r2, #0
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	4798      	blx	r3
      break;
 800b34e:	e068      	b.n	800b422 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	785b      	ldrb	r3, [r3, #1]
 800b354:	2b0b      	cmp	r3, #11
 800b356:	d852      	bhi.n	800b3fe <USBD_CDC_Setup+0x162>
 800b358:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <USBD_CDC_Setup+0xc4>)
 800b35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35e:	bf00      	nop
 800b360:	0800b391 	.word	0x0800b391
 800b364:	0800b40d 	.word	0x0800b40d
 800b368:	0800b3ff 	.word	0x0800b3ff
 800b36c:	0800b3ff 	.word	0x0800b3ff
 800b370:	0800b3ff 	.word	0x0800b3ff
 800b374:	0800b3ff 	.word	0x0800b3ff
 800b378:	0800b3ff 	.word	0x0800b3ff
 800b37c:	0800b3ff 	.word	0x0800b3ff
 800b380:	0800b3ff 	.word	0x0800b3ff
 800b384:	0800b3ff 	.word	0x0800b3ff
 800b388:	0800b3bb 	.word	0x0800b3bb
 800b38c:	0800b3e5 	.word	0x0800b3e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d107      	bne.n	800b3ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b39c:	f107 030a 	add.w	r3, r7, #10
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f001 fac8 	bl	800c93a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3aa:	e032      	b.n	800b412 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 fa52 	bl	800c858 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b3b8:	e02b      	b.n	800b412 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d107      	bne.n	800b3d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b3c6:	f107 030d 	add.w	r3, r7, #13
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f001 fab3 	bl	800c93a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3d4:	e01d      	b.n	800b412 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 fa3d 	bl	800c858 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b3e2:	e016      	b.n	800b412 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d00f      	beq.n	800b410 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f001 fa30 	bl	800c858 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3fc:	e008      	b.n	800b410 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fa29 	bl	800c858 <USBD_CtlError>
          ret = USBD_FAIL;
 800b406:	2303      	movs	r3, #3
 800b408:	75fb      	strb	r3, [r7, #23]
          break;
 800b40a:	e002      	b.n	800b412 <USBD_CDC_Setup+0x176>
          break;
 800b40c:	bf00      	nop
 800b40e:	e008      	b.n	800b422 <USBD_CDC_Setup+0x186>
          break;
 800b410:	bf00      	nop
      }
      break;
 800b412:	e006      	b.n	800b422 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fa1e 	bl	800c858 <USBD_CtlError>
      ret = USBD_FAIL;
 800b41c:	2303      	movs	r3, #3
 800b41e:	75fb      	strb	r3, [r7, #23]
      break;
 800b420:	bf00      	nop
  }

  return (uint8_t)ret;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b43e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e04f      	b.n	800b4ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b454:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b456:	78fa      	ldrb	r2, [r7, #3]
 800b458:	6879      	ldr	r1, [r7, #4]
 800b45a:	4613      	mov	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	3318      	adds	r3, #24
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d029      	beq.n	800b4c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b46c:	78fa      	ldrb	r2, [r7, #3]
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	4613      	mov	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	440b      	add	r3, r1
 800b47a:	3318      	adds	r3, #24
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	78f9      	ldrb	r1, [r7, #3]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	460b      	mov	r3, r1
 800b484:	00db      	lsls	r3, r3, #3
 800b486:	440b      	add	r3, r1
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4403      	add	r3, r0
 800b48c:	3348      	adds	r3, #72	; 0x48
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	fbb2 f1f3 	udiv	r1, r2, r3
 800b494:	fb01 f303 	mul.w	r3, r1, r3
 800b498:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d110      	bne.n	800b4c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b49e:	78fa      	ldrb	r2, [r7, #3]
 800b4a0:	6879      	ldr	r1, [r7, #4]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3318      	adds	r3, #24
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b4b2:	78f9      	ldrb	r1, [r7, #3]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f002 f84f 	bl	800d55c <USBD_LL_Transmit>
 800b4be:	e015      	b.n	800b4ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00b      	beq.n	800b4ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b4e8:	78fa      	ldrb	r2, [r7, #3]
 800b4ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b508:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b514:	2303      	movs	r3, #3
 800b516:	e015      	b.n	800b544 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f002 f88d 	bl	800d63c <USBD_LL_GetRxDataSize>
 800b522:	4602      	mov	r2, r0
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b53e:	4611      	mov	r1, r2
 800b540:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b55a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b562:	2303      	movs	r3, #3
 800b564:	e01b      	b.n	800b59e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d015      	beq.n	800b59c <USBD_CDC_EP0_RxReady+0x50>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b576:	2bff      	cmp	r3, #255	; 0xff
 800b578:	d010      	beq.n	800b59c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b588:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b590:	b292      	uxth	r2, r2
 800b592:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	22ff      	movs	r2, #255	; 0xff
 800b598:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2243      	movs	r2, #67	; 0x43
 800b5b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b5b6:	4b03      	ldr	r3, [pc, #12]	; (800b5c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	20000094 	.word	0x20000094

0800b5c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2243      	movs	r2, #67	; 0x43
 800b5d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b5d6:	4b03      	ldr	r3, [pc, #12]	; (800b5e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20000050 	.word	0x20000050

0800b5e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2243      	movs	r2, #67	; 0x43
 800b5f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b5f6:	4b03      	ldr	r3, [pc, #12]	; (800b604 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	200000d8 	.word	0x200000d8

0800b608 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	220a      	movs	r2, #10
 800b614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b616:	4b03      	ldr	r3, [pc, #12]	; (800b624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	2000000c 	.word	0x2000000c

0800b628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	e004      	b.n	800b646 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b652:	b480      	push	{r7}
 800b654:	b087      	sub	sp, #28
 800b656:	af00      	add	r7, sp, #0
 800b658:	60f8      	str	r0, [r7, #12]
 800b65a:	60b9      	str	r1, [r7, #8]
 800b65c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b664:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e008      	b.n	800b682 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b68e:	b480      	push	{r7}
 800b690:	b085      	sub	sp, #20
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b69e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e004      	b.n	800b6b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	e016      	b.n	800b70c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	7c1b      	ldrb	r3, [r3, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d109      	bne.n	800b6fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f001 ff6a 	bl	800d5cc <USBD_LL_PrepareReceive>
 800b6f8:	e007      	b.n	800b70a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b700:	2340      	movs	r3, #64	; 0x40
 800b702:	2101      	movs	r1, #1
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 ff61 	bl	800d5cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	4613      	mov	r3, r2
 800b720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b728:	2303      	movs	r3, #3
 800b72a:	e01f      	b.n	800b76c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	79fa      	ldrb	r2, [r7, #7]
 800b75e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f001 fd3d 	bl	800d1e0 <USBD_LL_Init>
 800b766:	4603      	mov	r3, r0
 800b768:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b788:	2303      	movs	r3, #3
 800b78a:	e016      	b.n	800b7ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00b      	beq.n	800b7b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a8:	f107 020e 	add.w	r2, r7, #14
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4798      	blx	r3
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f001 fd52 	bl	800d274 <USBD_LL_Start>
 800b7d0:	4603      	mov	r3, r0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b806:	2b00      	cmp	r3, #0
 800b808:	d009      	beq.n	800b81e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	78fa      	ldrb	r2, [r7, #3]
 800b814:	4611      	mov	r1, r2
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
 800b81a:	4603      	mov	r3, r0
 800b81c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d007      	beq.n	800b84e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	78fa      	ldrb	r2, [r7, #3]
 800b848:	4611      	mov	r1, r2
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	4798      	blx	r3
  }

  return USBD_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 ffba 	bl	800c7e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b87e:	461a      	mov	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b88c:	f003 031f 	and.w	r3, r3, #31
 800b890:	2b02      	cmp	r3, #2
 800b892:	d01a      	beq.n	800b8ca <USBD_LL_SetupStage+0x72>
 800b894:	2b02      	cmp	r3, #2
 800b896:	d822      	bhi.n	800b8de <USBD_LL_SetupStage+0x86>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <USBD_LL_SetupStage+0x4a>
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d00a      	beq.n	800b8b6 <USBD_LL_SetupStage+0x5e>
 800b8a0:	e01d      	b.n	800b8de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fa62 	bl	800bd74 <USBD_StdDevReq>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b4:	e020      	b.n	800b8f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fac6 	bl	800be50 <USBD_StdItfReq>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c8:	e016      	b.n	800b8f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fb05 	bl	800bee2 <USBD_StdEPReq>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73fb      	strb	r3, [r7, #15]
      break;
 800b8dc:	e00c      	b.n	800b8f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f001 fd67 	bl	800d3c0 <USBD_LL_StallEP>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f6:	bf00      	nop
  }

  return ret;
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b086      	sub	sp, #24
 800b906:	af00      	add	r7, sp, #0
 800b908:	60f8      	str	r0, [r7, #12]
 800b90a:	460b      	mov	r3, r1
 800b90c:	607a      	str	r2, [r7, #4]
 800b90e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b910:	7afb      	ldrb	r3, [r7, #11]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d138      	bne.n	800b988 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b91c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b924:	2b03      	cmp	r3, #3
 800b926:	d14a      	bne.n	800b9be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	429a      	cmp	r2, r3
 800b932:	d913      	bls.n	800b95c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	689a      	ldr	r2, [r3, #8]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	1ad2      	subs	r2, r2, r3
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	4293      	cmp	r3, r2
 800b94c:	bf28      	it	cs
 800b94e:	4613      	movcs	r3, r2
 800b950:	461a      	mov	r2, r3
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f001 f839 	bl	800c9cc <USBD_CtlContinueRx>
 800b95a:	e030      	b.n	800b9be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b03      	cmp	r3, #3
 800b966:	d10b      	bne.n	800b980 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d005      	beq.n	800b980 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f001 f834 	bl	800c9ee <USBD_CtlSendStatus>
 800b986:	e01a      	b.n	800b9be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b03      	cmp	r3, #3
 800b992:	d114      	bne.n	800b9be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00e      	beq.n	800b9be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	7afa      	ldrb	r2, [r7, #11]
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	4798      	blx	r3
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	e000      	b.n	800b9c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9d6:	7afb      	ldrb	r3, [r7, #11]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d16b      	bne.n	800bab4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3314      	adds	r3, #20
 800b9e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d156      	bne.n	800ba9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d914      	bls.n	800ba22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	689a      	ldr	r2, [r3, #8]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	1ad2      	subs	r2, r2, r3
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6879      	ldr	r1, [r7, #4]
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 ffae 	bl	800c970 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba14:	2300      	movs	r3, #0
 800ba16:	2200      	movs	r2, #0
 800ba18:	2100      	movs	r1, #0
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f001 fdd6 	bl	800d5cc <USBD_LL_PrepareReceive>
 800ba20:	e03b      	b.n	800ba9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d11c      	bne.n	800ba68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d316      	bcc.n	800ba68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d20f      	bcs.n	800ba68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 ff8f 	bl	800c970 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2100      	movs	r1, #0
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f001 fdb3 	bl	800d5cc <USBD_LL_PrepareReceive>
 800ba66:	e018      	b.n	800ba9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d10b      	bne.n	800ba8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d005      	beq.n	800ba8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba8c:	2180      	movs	r1, #128	; 0x80
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f001 fc96 	bl	800d3c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 ffbd 	bl	800ca14 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d122      	bne.n	800baea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f7ff fe98 	bl	800b7da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bab2:	e01a      	b.n	800baea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baba:	b2db      	uxtb	r3, r3
 800babc:	2b03      	cmp	r3, #3
 800babe:	d114      	bne.n	800baea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac6:	695b      	ldr	r3, [r3, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00e      	beq.n	800baea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad2:	695b      	ldr	r3, [r3, #20]
 800bad4:	7afa      	ldrb	r2, [r7, #11]
 800bad6:	4611      	mov	r1, r2
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	4798      	blx	r3
 800badc:	4603      	mov	r3, r0
 800bade:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bae0:	7dfb      	ldrb	r3, [r7, #23]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	e000      	b.n	800baec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e02f      	b.n	800bb88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00f      	beq.n	800bb52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d009      	beq.n	800bb52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	6852      	ldr	r2, [r2, #4]
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb52:	2340      	movs	r3, #64	; 0x40
 800bb54:	2200      	movs	r2, #0
 800bb56:	2100      	movs	r1, #0
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f001 fbbd 	bl	800d2d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2240      	movs	r2, #64	; 0x40
 800bb6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb6e:	2340      	movs	r3, #64	; 0x40
 800bb70:	2200      	movs	r2, #0
 800bb72:	2180      	movs	r1, #128	; 0x80
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 fbaf 	bl	800d2d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2240      	movs	r2, #64	; 0x40
 800bb84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	78fa      	ldrb	r2, [r7, #3]
 800bba0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2204      	movs	r2, #4
 800bbca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b04      	cmp	r3, #4
 800bbee:	d106      	bne.n	800bbfe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e012      	b.n	800bc48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d10b      	bne.n	800bc46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d005      	beq.n	800bc46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e014      	b.n	800bc94 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d10d      	bne.n	800bc92 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d007      	beq.n	800bc92 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	78fa      	ldrb	r2, [r7, #3]
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e014      	b.n	800bce0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d10d      	bne.n	800bcde <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d007      	beq.n	800bcde <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	78fa      	ldrb	r2, [r7, #3]
 800bcd8:	4611      	mov	r1, r2
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	370c      	adds	r7, #12
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d009      	beq.n	800bd2c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	6852      	ldr	r2, [r2, #4]
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	4611      	mov	r1, r2
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
  }

  return USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b087      	sub	sp, #28
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd54:	8a3b      	ldrh	r3, [r7, #16]
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	b21a      	sxth	r2, r3
 800bd5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	b21b      	sxth	r3, r3
 800bd62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd64:	89fb      	ldrh	r3, [r7, #14]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
	...

0800bd74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d005      	beq.n	800bd9a <USBD_StdDevReq+0x26>
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	d853      	bhi.n	800be3a <USBD_StdDevReq+0xc6>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00b      	beq.n	800bdae <USBD_StdDevReq+0x3a>
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d14f      	bne.n	800be3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bdac:	e04a      	b.n	800be44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b09      	cmp	r3, #9
 800bdb4:	d83b      	bhi.n	800be2e <USBD_StdDevReq+0xba>
 800bdb6:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <USBD_StdDevReq+0x48>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800be11 	.word	0x0800be11
 800bdc0:	0800be25 	.word	0x0800be25
 800bdc4:	0800be2f 	.word	0x0800be2f
 800bdc8:	0800be1b 	.word	0x0800be1b
 800bdcc:	0800be2f 	.word	0x0800be2f
 800bdd0:	0800bdef 	.word	0x0800bdef
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800be2f 	.word	0x0800be2f
 800bddc:	0800be07 	.word	0x0800be07
 800bde0:	0800bdf9 	.word	0x0800bdf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f9de 	bl	800c1a8 <USBD_GetDescriptor>
          break;
 800bdec:	e024      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fb6d 	bl	800c4d0 <USBD_SetAddress>
          break;
 800bdf6:	e01f      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fbac 	bl	800c558 <USBD_SetConfig>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]
          break;
 800be04:	e018      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fc4b 	bl	800c6a4 <USBD_GetConfig>
          break;
 800be0e:	e013      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fc7c 	bl	800c710 <USBD_GetStatus>
          break;
 800be18:	e00e      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fcab 	bl	800c778 <USBD_SetFeature>
          break;
 800be22:	e009      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fcba 	bl	800c7a0 <USBD_ClrFeature>
          break;
 800be2c:	e004      	b.n	800be38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fd11 	bl	800c858 <USBD_CtlError>
          break;
 800be36:	bf00      	nop
      }
      break;
 800be38:	e004      	b.n	800be44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fd0b 	bl	800c858 <USBD_CtlError>
      break;
 800be42:	bf00      	nop
  }

  return ret;
 800be44:	7bfb      	ldrb	r3, [r7, #15]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop

0800be50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be66:	2b40      	cmp	r3, #64	; 0x40
 800be68:	d005      	beq.n	800be76 <USBD_StdItfReq+0x26>
 800be6a:	2b40      	cmp	r3, #64	; 0x40
 800be6c:	d82f      	bhi.n	800bece <USBD_StdItfReq+0x7e>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <USBD_StdItfReq+0x26>
 800be72:	2b20      	cmp	r3, #32
 800be74:	d12b      	bne.n	800bece <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	3b01      	subs	r3, #1
 800be80:	2b02      	cmp	r3, #2
 800be82:	d81d      	bhi.n	800bec0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	889b      	ldrh	r3, [r3, #4]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d813      	bhi.n	800beb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	4798      	blx	r3
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	88db      	ldrh	r3, [r3, #6]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d110      	bne.n	800beca <USBD_StdItfReq+0x7a>
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10d      	bne.n	800beca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fd9d 	bl	800c9ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800beb4:	e009      	b.n	800beca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fccd 	bl	800c858 <USBD_CtlError>
          break;
 800bebe:	e004      	b.n	800beca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcc8 	bl	800c858 <USBD_CtlError>
          break;
 800bec8:	e000      	b.n	800becc <USBD_StdItfReq+0x7c>
          break;
 800beca:	bf00      	nop
      }
      break;
 800becc:	e004      	b.n	800bed8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fcc1 	bl	800c858 <USBD_CtlError>
      break;
 800bed6:	bf00      	nop
  }

  return ret;
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	889b      	ldrh	r3, [r3, #4]
 800bef4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800befe:	2b40      	cmp	r3, #64	; 0x40
 800bf00:	d007      	beq.n	800bf12 <USBD_StdEPReq+0x30>
 800bf02:	2b40      	cmp	r3, #64	; 0x40
 800bf04:	f200 8145 	bhi.w	800c192 <USBD_StdEPReq+0x2b0>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00c      	beq.n	800bf26 <USBD_StdEPReq+0x44>
 800bf0c:	2b20      	cmp	r3, #32
 800bf0e:	f040 8140 	bne.w	800c192 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	4798      	blx	r3
 800bf20:	4603      	mov	r3, r0
 800bf22:	73fb      	strb	r3, [r7, #15]
      break;
 800bf24:	e13a      	b.n	800c19c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	785b      	ldrb	r3, [r3, #1]
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	d007      	beq.n	800bf3e <USBD_StdEPReq+0x5c>
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	f300 8129 	bgt.w	800c186 <USBD_StdEPReq+0x2a4>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d07f      	beq.n	800c038 <USBD_StdEPReq+0x156>
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d03c      	beq.n	800bfb6 <USBD_StdEPReq+0xd4>
 800bf3c:	e123      	b.n	800c186 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d002      	beq.n	800bf50 <USBD_StdEPReq+0x6e>
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d016      	beq.n	800bf7c <USBD_StdEPReq+0x9a>
 800bf4e:	e02c      	b.n	800bfaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00d      	beq.n	800bf72 <USBD_StdEPReq+0x90>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b80      	cmp	r3, #128	; 0x80
 800bf5a:	d00a      	beq.n	800bf72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 fa2d 	bl	800d3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf66:	2180      	movs	r1, #128	; 0x80
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f001 fa29 	bl	800d3c0 <USBD_LL_StallEP>
 800bf6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf70:	e020      	b.n	800bfb4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fc6f 	bl	800c858 <USBD_CtlError>
              break;
 800bf7a:	e01b      	b.n	800bfb4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	885b      	ldrh	r3, [r3, #2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10e      	bne.n	800bfa2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf84:	7bbb      	ldrb	r3, [r7, #14]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <USBD_StdEPReq+0xc0>
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
 800bf8c:	2b80      	cmp	r3, #128	; 0x80
 800bf8e:	d008      	beq.n	800bfa2 <USBD_StdEPReq+0xc0>
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	88db      	ldrh	r3, [r3, #6]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d104      	bne.n	800bfa2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f001 fa0f 	bl	800d3c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fd23 	bl	800c9ee <USBD_CtlSendStatus>

              break;
 800bfa8:	e004      	b.n	800bfb4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 fc53 	bl	800c858 <USBD_CtlError>
              break;
 800bfb2:	bf00      	nop
          }
          break;
 800bfb4:	e0ec      	b.n	800c190 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d002      	beq.n	800bfc8 <USBD_StdEPReq+0xe6>
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d016      	beq.n	800bff4 <USBD_StdEPReq+0x112>
 800bfc6:	e030      	b.n	800c02a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00d      	beq.n	800bfea <USBD_StdEPReq+0x108>
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	2b80      	cmp	r3, #128	; 0x80
 800bfd2:	d00a      	beq.n	800bfea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 f9f1 	bl	800d3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfde:	2180      	movs	r1, #128	; 0x80
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f001 f9ed 	bl	800d3c0 <USBD_LL_StallEP>
 800bfe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfe8:	e025      	b.n	800c036 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fc33 	bl	800c858 <USBD_CtlError>
              break;
 800bff2:	e020      	b.n	800c036 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	885b      	ldrh	r3, [r3, #2]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d11b      	bne.n	800c034 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c002:	2b00      	cmp	r3, #0
 800c004:	d004      	beq.n	800c010 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 fa0e 	bl	800d42c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fcec 	bl	800c9ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c028:	e004      	b.n	800c034 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fc13 	bl	800c858 <USBD_CtlError>
              break;
 800c032:	e000      	b.n	800c036 <USBD_StdEPReq+0x154>
              break;
 800c034:	bf00      	nop
          }
          break;
 800c036:	e0ab      	b.n	800c190 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b02      	cmp	r3, #2
 800c042:	d002      	beq.n	800c04a <USBD_StdEPReq+0x168>
 800c044:	2b03      	cmp	r3, #3
 800c046:	d032      	beq.n	800c0ae <USBD_StdEPReq+0x1cc>
 800c048:	e097      	b.n	800c17a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <USBD_StdEPReq+0x17e>
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	2b80      	cmp	r3, #128	; 0x80
 800c054:	d004      	beq.n	800c060 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fbfd 	bl	800c858 <USBD_CtlError>
                break;
 800c05e:	e091      	b.n	800c184 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c064:	2b00      	cmp	r3, #0
 800c066:	da0b      	bge.n	800c080 <USBD_StdEPReq+0x19e>
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c06e:	4613      	mov	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	3310      	adds	r3, #16
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	3304      	adds	r3, #4
 800c07e:	e00b      	b.n	800c098 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	4413      	add	r3, r2
 800c096:	3304      	adds	r3, #4
 800c098:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fc47 	bl	800c93a <USBD_CtlSendData>
              break;
 800c0ac:	e06a      	b.n	800c184 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	da11      	bge.n	800c0da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	f003 020f 	and.w	r2, r3, #15
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	440b      	add	r3, r1
 800c0c8:	3324      	adds	r3, #36	; 0x24
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d117      	bne.n	800c100 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fbc0 	bl	800c858 <USBD_CtlError>
                  break;
 800c0d8:	e054      	b.n	800c184 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	f003 020f 	and.w	r2, r3, #15
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d104      	bne.n	800c100 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fbad 	bl	800c858 <USBD_CtlError>
                  break;
 800c0fe:	e041      	b.n	800c184 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c104:	2b00      	cmp	r3, #0
 800c106:	da0b      	bge.n	800c120 <USBD_StdEPReq+0x23e>
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	3310      	adds	r3, #16
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	4413      	add	r3, r2
 800c11c:	3304      	adds	r3, #4
 800c11e:	e00b      	b.n	800c138 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c120:	7bbb      	ldrb	r3, [r7, #14]
 800c122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c126:	4613      	mov	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	4413      	add	r3, r2
 800c136:	3304      	adds	r3, #4
 800c138:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <USBD_StdEPReq+0x264>
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	2b80      	cmp	r3, #128	; 0x80
 800c144:	d103      	bne.n	800c14e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	e00e      	b.n	800c16c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f001 f9a0 	bl	800d498 <USBD_LL_IsStallEP>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2201      	movs	r2, #1
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	e002      	b.n	800c16c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2202      	movs	r2, #2
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fbe1 	bl	800c93a <USBD_CtlSendData>
              break;
 800c178:	e004      	b.n	800c184 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fb6b 	bl	800c858 <USBD_CtlError>
              break;
 800c182:	bf00      	nop
          }
          break;
 800c184:	e004      	b.n	800c190 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fb65 	bl	800c858 <USBD_CtlError>
          break;
 800c18e:	bf00      	nop
      }
      break;
 800c190:	e004      	b.n	800c19c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fb5f 	bl	800c858 <USBD_CtlError>
      break;
 800c19a:	bf00      	nop
  }

  return ret;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	885b      	ldrh	r3, [r3, #2]
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	2b0e      	cmp	r3, #14
 800c1ca:	f200 8152 	bhi.w	800c472 <USBD_GetDescriptor+0x2ca>
 800c1ce:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <USBD_GetDescriptor+0x2c>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c245 	.word	0x0800c245
 800c1d8:	0800c25d 	.word	0x0800c25d
 800c1dc:	0800c29d 	.word	0x0800c29d
 800c1e0:	0800c473 	.word	0x0800c473
 800c1e4:	0800c473 	.word	0x0800c473
 800c1e8:	0800c413 	.word	0x0800c413
 800c1ec:	0800c43f 	.word	0x0800c43f
 800c1f0:	0800c473 	.word	0x0800c473
 800c1f4:	0800c473 	.word	0x0800c473
 800c1f8:	0800c473 	.word	0x0800c473
 800c1fc:	0800c473 	.word	0x0800c473
 800c200:	0800c473 	.word	0x0800c473
 800c204:	0800c473 	.word	0x0800c473
 800c208:	0800c473 	.word	0x0800c473
 800c20c:	0800c211 	.word	0x0800c211
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00b      	beq.n	800c234 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c222:	69db      	ldr	r3, [r3, #28]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	7c12      	ldrb	r2, [r2, #16]
 800c228:	f107 0108 	add.w	r1, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c232:	e126      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fb0e 	bl	800c858 <USBD_CtlError>
        err++;
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	3301      	adds	r3, #1
 800c240:	72fb      	strb	r3, [r7, #11]
      break;
 800c242:	e11e      	b.n	800c482 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	7c12      	ldrb	r2, [r2, #16]
 800c250:	f107 0108 	add.w	r1, r7, #8
 800c254:	4610      	mov	r0, r2
 800c256:	4798      	blx	r3
 800c258:	60f8      	str	r0, [r7, #12]
      break;
 800c25a:	e112      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7c1b      	ldrb	r3, [r3, #16]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10d      	bne.n	800c280 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26c:	f107 0208 	add.w	r2, r7, #8
 800c270:	4610      	mov	r0, r2
 800c272:	4798      	blx	r3
 800c274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3301      	adds	r3, #1
 800c27a:	2202      	movs	r2, #2
 800c27c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c27e:	e100      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c288:	f107 0208 	add.w	r2, r7, #8
 800c28c:	4610      	mov	r0, r2
 800c28e:	4798      	blx	r3
 800c290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3301      	adds	r3, #1
 800c296:	2202      	movs	r2, #2
 800c298:	701a      	strb	r2, [r3, #0]
      break;
 800c29a:	e0f2      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	885b      	ldrh	r3, [r3, #2]
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b05      	cmp	r3, #5
 800c2a4:	f200 80ac 	bhi.w	800c400 <USBD_GetDescriptor+0x258>
 800c2a8:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <USBD_GetDescriptor+0x108>)
 800c2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ae:	bf00      	nop
 800c2b0:	0800c2c9 	.word	0x0800c2c9
 800c2b4:	0800c2fd 	.word	0x0800c2fd
 800c2b8:	0800c331 	.word	0x0800c331
 800c2bc:	0800c365 	.word	0x0800c365
 800c2c0:	0800c399 	.word	0x0800c399
 800c2c4:	0800c3cd 	.word	0x0800c3cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ea:	e091      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fab2 	bl	800c858 <USBD_CtlError>
            err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fa:	e089      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31e:	e077      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa98 	bl	800c858 <USBD_CtlError>
            err++;
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	3301      	adds	r3, #1
 800c32c:	72fb      	strb	r3, [r7, #11]
          break;
 800c32e:	e06f      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c352:	e05d      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fa7e 	bl	800c858 <USBD_CtlError>
            err++;
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	3301      	adds	r3, #1
 800c360:	72fb      	strb	r3, [r7, #11]
          break;
 800c362:	e055      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c386:	e043      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa64 	bl	800c858 <USBD_CtlError>
            err++;
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	3301      	adds	r3, #1
 800c394:	72fb      	strb	r3, [r7, #11]
          break;
 800c396:	e03b      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00b      	beq.n	800c3bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7c12      	ldrb	r2, [r2, #16]
 800c3b0:	f107 0108 	add.w	r1, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ba:	e029      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa4a 	bl	800c858 <USBD_CtlError>
            err++;
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ca:	e021      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7c12      	ldrb	r2, [r2, #16]
 800c3e4:	f107 0108 	add.w	r1, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ee:	e00f      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa30 	bl	800c858 <USBD_CtlError>
            err++;
 800c3f8:	7afb      	ldrb	r3, [r7, #11]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3fe:	e007      	b.n	800c410 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fa28 	bl	800c858 <USBD_CtlError>
          err++;
 800c408:	7afb      	ldrb	r3, [r7, #11]
 800c40a:	3301      	adds	r3, #1
 800c40c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c40e:	bf00      	nop
      }
      break;
 800c410:	e037      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	7c1b      	ldrb	r3, [r3, #16]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d109      	bne.n	800c42e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c422:	f107 0208 	add.w	r2, r7, #8
 800c426:	4610      	mov	r0, r2
 800c428:	4798      	blx	r3
 800c42a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c42c:	e029      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fa11 	bl	800c858 <USBD_CtlError>
        err++;
 800c436:	7afb      	ldrb	r3, [r7, #11]
 800c438:	3301      	adds	r3, #1
 800c43a:	72fb      	strb	r3, [r7, #11]
      break;
 800c43c:	e021      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	7c1b      	ldrb	r3, [r3, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10d      	bne.n	800c462 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44e:	f107 0208 	add.w	r2, r7, #8
 800c452:	4610      	mov	r0, r2
 800c454:	4798      	blx	r3
 800c456:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3301      	adds	r3, #1
 800c45c:	2207      	movs	r2, #7
 800c45e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c460:	e00f      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f9f7 	bl	800c858 <USBD_CtlError>
        err++;
 800c46a:	7afb      	ldrb	r3, [r7, #11]
 800c46c:	3301      	adds	r3, #1
 800c46e:	72fb      	strb	r3, [r7, #11]
      break;
 800c470:	e007      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 f9ef 	bl	800c858 <USBD_CtlError>
      err++;
 800c47a:	7afb      	ldrb	r3, [r7, #11]
 800c47c:	3301      	adds	r3, #1
 800c47e:	72fb      	strb	r3, [r7, #11]
      break;
 800c480:	bf00      	nop
  }

  if (err != 0U)
 800c482:	7afb      	ldrb	r3, [r7, #11]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d11e      	bne.n	800c4c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	88db      	ldrh	r3, [r3, #6]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d016      	beq.n	800c4be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c490:	893b      	ldrh	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00e      	beq.n	800c4b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	88da      	ldrh	r2, [r3, #6]
 800c49a:	893b      	ldrh	r3, [r7, #8]
 800c49c:	4293      	cmp	r3, r2
 800c49e:	bf28      	it	cs
 800c4a0:	4613      	movcs	r3, r2
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4a6:	893b      	ldrh	r3, [r7, #8]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	68f9      	ldr	r1, [r7, #12]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fa44 	bl	800c93a <USBD_CtlSendData>
 800c4b2:	e009      	b.n	800c4c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f9ce 	bl	800c858 <USBD_CtlError>
 800c4bc:	e004      	b.n	800c4c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fa95 	bl	800c9ee <USBD_CtlSendStatus>
 800c4c4:	e000      	b.n	800c4c8 <USBD_GetDescriptor+0x320>
    return;
 800c4c6:	bf00      	nop
  }
}
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop

0800c4d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	889b      	ldrh	r3, [r3, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d131      	bne.n	800c546 <USBD_SetAddress+0x76>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	88db      	ldrh	r3, [r3, #6]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d12d      	bne.n	800c546 <USBD_SetAddress+0x76>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c4f0:	d829      	bhi.n	800c546 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	885b      	ldrh	r3, [r3, #2]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b03      	cmp	r3, #3
 800c508:	d104      	bne.n	800c514 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f9a3 	bl	800c858 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c512:	e01d      	b.n	800c550 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7bfa      	ldrb	r2, [r7, #15]
 800c518:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 ffe5 	bl	800d4f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fa61 	bl	800c9ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d004      	beq.n	800c53c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2202      	movs	r2, #2
 800c536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53a:	e009      	b.n	800c550 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c544:	e004      	b.n	800c550 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f985 	bl	800c858 <USBD_CtlError>
  }
}
 800c54e:	bf00      	nop
 800c550:	bf00      	nop
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	885b      	ldrh	r3, [r3, #2]
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	4b4c      	ldr	r3, [pc, #304]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c56e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c570:	4b4b      	ldr	r3, [pc, #300]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d905      	bls.n	800c584 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f96c 	bl	800c858 <USBD_CtlError>
    return USBD_FAIL;
 800c580:	2303      	movs	r3, #3
 800c582:	e088      	b.n	800c696 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d002      	beq.n	800c596 <USBD_SetConfig+0x3e>
 800c590:	2b03      	cmp	r3, #3
 800c592:	d025      	beq.n	800c5e0 <USBD_SetConfig+0x88>
 800c594:	e071      	b.n	800c67a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c596:	4b42      	ldr	r3, [pc, #264]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01c      	beq.n	800c5d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c59e:	4b40      	ldr	r3, [pc, #256]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5a8:	4b3d      	ldr	r3, [pc, #244]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff f91e 	bl	800b7f0 <USBD_SetClassConfig>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d004      	beq.n	800c5c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f949 	bl	800c858 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5c6:	e065      	b.n	800c694 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fa10 	bl	800c9ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2203      	movs	r2, #3
 800c5d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5d6:	e05d      	b.n	800c694 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fa08 	bl	800c9ee <USBD_CtlSendStatus>
      break;
 800c5de:	e059      	b.n	800c694 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5e0:	4b2f      	ldr	r3, [pc, #188]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d112      	bne.n	800c60e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c5f0:	4b2b      	ldr	r3, [pc, #172]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5fa:	4b29      	ldr	r3, [pc, #164]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff f911 	bl	800b828 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f9f1 	bl	800c9ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c60c:	e042      	b.n	800c694 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c60e:	4b24      	ldr	r3, [pc, #144]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d02a      	beq.n	800c672 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7ff f8ff 	bl	800b828 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c62a:	4b1d      	ldr	r3, [pc, #116]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c634:	4b1a      	ldr	r3, [pc, #104]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff f8d8 	bl	800b7f0 <USBD_SetClassConfig>
 800c640:	4603      	mov	r3, r0
 800c642:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00f      	beq.n	800c66a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f903 	bl	800c858 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff f8e4 	bl	800b828 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2202      	movs	r2, #2
 800c664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c668:	e014      	b.n	800c694 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f9bf 	bl	800c9ee <USBD_CtlSendStatus>
      break;
 800c670:	e010      	b.n	800c694 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f9bb 	bl	800c9ee <USBD_CtlSendStatus>
      break;
 800c678:	e00c      	b.n	800c694 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f8eb 	bl	800c858 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c682:	4b07      	ldr	r3, [pc, #28]	; (800c6a0 <USBD_SetConfig+0x148>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff f8cd 	bl	800b828 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	73fb      	strb	r3, [r7, #15]
      break;
 800c692:	bf00      	nop
  }

  return ret;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200004b0 	.word	0x200004b0

0800c6a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	88db      	ldrh	r3, [r3, #6]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d004      	beq.n	800c6c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f8cd 	bl	800c858 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6be:	e023      	b.n	800c708 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	dc02      	bgt.n	800c6d2 <USBD_GetConfig+0x2e>
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dc03      	bgt.n	800c6d8 <USBD_GetConfig+0x34>
 800c6d0:	e015      	b.n	800c6fe <USBD_GetConfig+0x5a>
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d00b      	beq.n	800c6ee <USBD_GetConfig+0x4a>
 800c6d6:	e012      	b.n	800c6fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f927 	bl	800c93a <USBD_CtlSendData>
        break;
 800c6ec:	e00c      	b.n	800c708 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f91f 	bl	800c93a <USBD_CtlSendData>
        break;
 800c6fc:	e004      	b.n	800c708 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f8a9 	bl	800c858 <USBD_CtlError>
        break;
 800c706:	bf00      	nop
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c720:	b2db      	uxtb	r3, r3
 800c722:	3b01      	subs	r3, #1
 800c724:	2b02      	cmp	r3, #2
 800c726:	d81e      	bhi.n	800c766 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	88db      	ldrh	r3, [r3, #6]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d004      	beq.n	800c73a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f890 	bl	800c858 <USBD_CtlError>
        break;
 800c738:	e01a      	b.n	800c770 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f043 0202 	orr.w	r2, r3, #2
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	330c      	adds	r3, #12
 800c75a:	2202      	movs	r2, #2
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f8eb 	bl	800c93a <USBD_CtlSendData>
      break;
 800c764:	e004      	b.n	800c770 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f875 	bl	800c858 <USBD_CtlError>
      break;
 800c76e:	bf00      	nop
  }
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	885b      	ldrh	r3, [r3, #2]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d106      	bne.n	800c798 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f92b 	bl	800c9ee <USBD_CtlSendStatus>
  }
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d80b      	bhi.n	800c7d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	885b      	ldrh	r3, [r3, #2]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d10c      	bne.n	800c7da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f910 	bl	800c9ee <USBD_CtlSendStatus>
      }
      break;
 800c7ce:	e004      	b.n	800c7da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f840 	bl	800c858 <USBD_CtlError>
      break;
 800c7d8:	e000      	b.n	800c7dc <USBD_ClrFeature+0x3c>
      break;
 800c7da:	bf00      	nop
  }
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	781a      	ldrb	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	781a      	ldrb	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3301      	adds	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7ff fa91 	bl	800bd36 <SWAPBYTE>
 800c814:	4603      	mov	r3, r0
 800c816:	461a      	mov	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3301      	adds	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff fa84 	bl	800bd36 <SWAPBYTE>
 800c82e:	4603      	mov	r3, r0
 800c830:	461a      	mov	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3301      	adds	r3, #1
 800c83a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	3301      	adds	r3, #1
 800c840:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7ff fa77 	bl	800bd36 <SWAPBYTE>
 800c848:	4603      	mov	r3, r0
 800c84a:	461a      	mov	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	80da      	strh	r2, [r3, #6]
}
 800c850:	bf00      	nop
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c862:	2180      	movs	r1, #128	; 0x80
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fdab 	bl	800d3c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c86a:	2100      	movs	r1, #0
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fda7 	bl	800d3c0 <USBD_LL_StallEP>
}
 800c872:	bf00      	nop
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b086      	sub	sp, #24
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c886:	2300      	movs	r3, #0
 800c888:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d036      	beq.n	800c8fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c894:	6938      	ldr	r0, [r7, #16]
 800c896:	f000 f836 	bl	800c906 <USBD_GetLen>
 800c89a:	4603      	mov	r3, r0
 800c89c:	3301      	adds	r3, #1
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8a8:	7dfb      	ldrb	r3, [r7, #23]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	7812      	ldrb	r2, [r2, #0]
 800c8b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	4413      	add	r3, r2
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8c4:	7dfb      	ldrb	r3, [r7, #23]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8ca:	e013      	b.n	800c8f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	7812      	ldrb	r2, [r2, #0]
 800c8d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	613b      	str	r3, [r7, #16]
    idx++;
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e7      	bne.n	800c8cc <USBD_GetString+0x52>
 800c8fc:	e000      	b.n	800c900 <USBD_GetString+0x86>
    return;
 800c8fe:	bf00      	nop
  }
}
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c906:	b480      	push	{r7}
 800c908:	b085      	sub	sp, #20
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c916:	e005      	b.n	800c924 <USBD_GetLen+0x1e>
  {
    len++;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	3301      	adds	r3, #1
 800c91c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	3301      	adds	r3, #1
 800c922:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1f5      	bne.n	800c918 <USBD_GetLen+0x12>
  }

  return len;
 800c92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	60b9      	str	r1, [r7, #8]
 800c944:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2202      	movs	r2, #2
 800c94a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	2100      	movs	r1, #0
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 fdfb 	bl	800d55c <USBD_LL_Transmit>

  return USBD_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	2100      	movs	r1, #0
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 fdea 	bl	800d55c <USBD_LL_Transmit>

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2203      	movs	r2, #3
 800c9a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f000 fe05 	bl	800d5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	2100      	movs	r1, #0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fdf4 	bl	800d5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9fe:	2300      	movs	r3, #0
 800ca00:	2200      	movs	r2, #0
 800ca02:	2100      	movs	r1, #0
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fda9 	bl	800d55c <USBD_LL_Transmit>

  return USBD_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2205      	movs	r2, #5
 800ca20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca24:	2300      	movs	r3, #0
 800ca26:	2200      	movs	r2, #0
 800ca28:	2100      	movs	r1, #0
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 fdce 	bl	800d5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b087      	sub	sp, #28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	4613      	mov	r3, r2
 800ca48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca52:	4b1f      	ldr	r3, [pc, #124]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca54:	7a5b      	ldrb	r3, [r3, #9]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d131      	bne.n	800cac0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca5c:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca5e:	7a5b      	ldrb	r3, [r3, #9]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	461a      	mov	r2, r3
 800ca64:	4b1a      	ldr	r3, [pc, #104]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca66:	2100      	movs	r1, #0
 800ca68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca6a:	4b19      	ldr	r3, [pc, #100]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca6c:	7a5b      	ldrb	r3, [r3, #9]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	4a17      	ldr	r2, [pc, #92]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca7a:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca7c:	7a5b      	ldrb	r3, [r3, #9]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	461a      	mov	r2, r3
 800ca82:	4b13      	ldr	r3, [pc, #76]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca84:	4413      	add	r3, r2
 800ca86:	79fa      	ldrb	r2, [r7, #7]
 800ca88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca8a:	4b11      	ldr	r3, [pc, #68]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca8c:	7a5b      	ldrb	r3, [r3, #9]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	b2d1      	uxtb	r1, r2
 800ca94:	4a0e      	ldr	r2, [pc, #56]	; (800cad0 <FATFS_LinkDriverEx+0x94>)
 800ca96:	7251      	strb	r1, [r2, #9]
 800ca98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca9a:	7dbb      	ldrb	r3, [r7, #22]
 800ca9c:	3330      	adds	r3, #48	; 0x30
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	3301      	adds	r3, #1
 800caa8:	223a      	movs	r2, #58	; 0x3a
 800caaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	3302      	adds	r3, #2
 800cab0:	222f      	movs	r2, #47	; 0x2f
 800cab2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	3303      	adds	r3, #3
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	200004b4 	.word	0x200004b4

0800cad4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cade:	2200      	movs	r2, #0
 800cae0:	6839      	ldr	r1, [r7, #0]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff ffaa 	bl	800ca3c <FATFS_LinkDriverEx>
 800cae8:	4603      	mov	r3, r0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800caf8:	2200      	movs	r2, #0
 800cafa:	4912      	ldr	r1, [pc, #72]	; (800cb44 <MX_USB_DEVICE_Init+0x50>)
 800cafc:	4812      	ldr	r0, [pc, #72]	; (800cb48 <MX_USB_DEVICE_Init+0x54>)
 800cafe:	f7fe fe09 	bl	800b714 <USBD_Init>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb08:	f7f4 f878 	bl	8000bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb0c:	490f      	ldr	r1, [pc, #60]	; (800cb4c <MX_USB_DEVICE_Init+0x58>)
 800cb0e:	480e      	ldr	r0, [pc, #56]	; (800cb48 <MX_USB_DEVICE_Init+0x54>)
 800cb10:	f7fe fe30 	bl	800b774 <USBD_RegisterClass>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d001      	beq.n	800cb1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb1a:	f7f4 f86f 	bl	8000bfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb1e:	490c      	ldr	r1, [pc, #48]	; (800cb50 <MX_USB_DEVICE_Init+0x5c>)
 800cb20:	4809      	ldr	r0, [pc, #36]	; (800cb48 <MX_USB_DEVICE_Init+0x54>)
 800cb22:	f7fe fd81 	bl	800b628 <USBD_CDC_RegisterInterface>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb2c:	f7f4 f866 	bl	8000bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb30:	4805      	ldr	r0, [pc, #20]	; (800cb48 <MX_USB_DEVICE_Init+0x54>)
 800cb32:	f7fe fe46 	bl	800b7c2 <USBD_Start>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb3c:	f7f4 f85e 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb40:	bf00      	nop
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	20000130 	.word	0x20000130
 800cb48:	200004c0 	.word	0x200004c0
 800cb4c:	20000018 	.word	0x20000018
 800cb50:	2000011c 	.word	0x2000011c

0800cb54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4905      	ldr	r1, [pc, #20]	; (800cb70 <CDC_Init_FS+0x1c>)
 800cb5c:	4805      	ldr	r0, [pc, #20]	; (800cb74 <CDC_Init_FS+0x20>)
 800cb5e:	f7fe fd78 	bl	800b652 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb62:	4905      	ldr	r1, [pc, #20]	; (800cb78 <CDC_Init_FS+0x24>)
 800cb64:	4803      	ldr	r0, [pc, #12]	; (800cb74 <CDC_Init_FS+0x20>)
 800cb66:	f7fe fd92 	bl	800b68e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	20000f90 	.word	0x20000f90
 800cb74:	200004c0 	.word	0x200004c0
 800cb78:	20000790 	.word	0x20000790

0800cb7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	4603      	mov	r3, r0
 800cb94:	6039      	str	r1, [r7, #0]
 800cb96:	71fb      	strb	r3, [r7, #7]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	2b23      	cmp	r3, #35	; 0x23
 800cba0:	d84a      	bhi.n	800cc38 <CDC_Control_FS+0xac>
 800cba2:	a201      	add	r2, pc, #4	; (adr r2, 800cba8 <CDC_Control_FS+0x1c>)
 800cba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba8:	0800cc39 	.word	0x0800cc39
 800cbac:	0800cc39 	.word	0x0800cc39
 800cbb0:	0800cc39 	.word	0x0800cc39
 800cbb4:	0800cc39 	.word	0x0800cc39
 800cbb8:	0800cc39 	.word	0x0800cc39
 800cbbc:	0800cc39 	.word	0x0800cc39
 800cbc0:	0800cc39 	.word	0x0800cc39
 800cbc4:	0800cc39 	.word	0x0800cc39
 800cbc8:	0800cc39 	.word	0x0800cc39
 800cbcc:	0800cc39 	.word	0x0800cc39
 800cbd0:	0800cc39 	.word	0x0800cc39
 800cbd4:	0800cc39 	.word	0x0800cc39
 800cbd8:	0800cc39 	.word	0x0800cc39
 800cbdc:	0800cc39 	.word	0x0800cc39
 800cbe0:	0800cc39 	.word	0x0800cc39
 800cbe4:	0800cc39 	.word	0x0800cc39
 800cbe8:	0800cc39 	.word	0x0800cc39
 800cbec:	0800cc39 	.word	0x0800cc39
 800cbf0:	0800cc39 	.word	0x0800cc39
 800cbf4:	0800cc39 	.word	0x0800cc39
 800cbf8:	0800cc39 	.word	0x0800cc39
 800cbfc:	0800cc39 	.word	0x0800cc39
 800cc00:	0800cc39 	.word	0x0800cc39
 800cc04:	0800cc39 	.word	0x0800cc39
 800cc08:	0800cc39 	.word	0x0800cc39
 800cc0c:	0800cc39 	.word	0x0800cc39
 800cc10:	0800cc39 	.word	0x0800cc39
 800cc14:	0800cc39 	.word	0x0800cc39
 800cc18:	0800cc39 	.word	0x0800cc39
 800cc1c:	0800cc39 	.word	0x0800cc39
 800cc20:	0800cc39 	.word	0x0800cc39
 800cc24:	0800cc39 	.word	0x0800cc39
 800cc28:	0800cc39 	.word	0x0800cc39
 800cc2c:	0800cc39 	.word	0x0800cc39
 800cc30:	0800cc39 	.word	0x0800cc39
 800cc34:	0800cc39 	.word	0x0800cc39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc38:	bf00      	nop
  }

  return (USBD_OK);
 800cc3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc52:	6879      	ldr	r1, [r7, #4]
 800cc54:	4805      	ldr	r0, [pc, #20]	; (800cc6c <CDC_Receive_FS+0x24>)
 800cc56:	f7fe fd1a 	bl	800b68e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc5a:	4804      	ldr	r0, [pc, #16]	; (800cc6c <CDC_Receive_FS+0x24>)
 800cc5c:	f7fe fd30 	bl	800b6c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cc60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	200004c0 	.word	0x200004c0

0800cc70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	371c      	adds	r7, #28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
	...

0800cc94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	6039      	str	r1, [r7, #0]
 800cc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	2212      	movs	r2, #18
 800cca4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cca6:	4b03      	ldr	r3, [pc, #12]	; (800ccb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	20000150 	.word	0x20000150

0800ccb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	6039      	str	r1, [r7, #0]
 800ccc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2204      	movs	r2, #4
 800ccc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ccca:	4b03      	ldr	r3, [pc, #12]	; (800ccd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	20000170 	.word	0x20000170

0800ccdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	6039      	str	r1, [r7, #0]
 800cce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d105      	bne.n	800ccfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	4907      	ldr	r1, [pc, #28]	; (800cd10 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccf2:	4808      	ldr	r0, [pc, #32]	; (800cd14 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccf4:	f7ff fdc1 	bl	800c87a <USBD_GetString>
 800ccf8:	e004      	b.n	800cd04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	4904      	ldr	r1, [pc, #16]	; (800cd10 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccfe:	4805      	ldr	r0, [pc, #20]	; (800cd14 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd00:	f7ff fdbb 	bl	800c87a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd04:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20001790 	.word	0x20001790
 800cd14:	0800d7ac 	.word	0x0800d7ac

0800cd18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	4904      	ldr	r1, [pc, #16]	; (800cd38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd28:	4804      	ldr	r0, [pc, #16]	; (800cd3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd2a:	f7ff fda6 	bl	800c87a <USBD_GetString>
  return USBD_StrDesc;
 800cd2e:	4b02      	ldr	r3, [pc, #8]	; (800cd38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20001790 	.word	0x20001790
 800cd3c:	0800d7c4 	.word	0x0800d7c4

0800cd40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	6039      	str	r1, [r7, #0]
 800cd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	221a      	movs	r2, #26
 800cd50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd52:	f000 f855 	bl	800ce00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd56:	4b02      	ldr	r3, [pc, #8]	; (800cd60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20000174 	.word	0x20000174

0800cd64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	6039      	str	r1, [r7, #0]
 800cd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd70:	79fb      	ldrb	r3, [r7, #7]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d105      	bne.n	800cd82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	4907      	ldr	r1, [pc, #28]	; (800cd98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd7a:	4808      	ldr	r0, [pc, #32]	; (800cd9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd7c:	f7ff fd7d 	bl	800c87a <USBD_GetString>
 800cd80:	e004      	b.n	800cd8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	4904      	ldr	r1, [pc, #16]	; (800cd98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd86:	4805      	ldr	r0, [pc, #20]	; (800cd9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd88:	f7ff fd77 	bl	800c87a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20001790 	.word	0x20001790
 800cd9c:	0800d7d8 	.word	0x0800d7d8

0800cda0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d105      	bne.n	800cdbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdb2:	683a      	ldr	r2, [r7, #0]
 800cdb4:	4907      	ldr	r1, [pc, #28]	; (800cdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdb6:	4808      	ldr	r0, [pc, #32]	; (800cdd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdb8:	f7ff fd5f 	bl	800c87a <USBD_GetString>
 800cdbc:	e004      	b.n	800cdc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	4904      	ldr	r1, [pc, #16]	; (800cdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdc2:	4805      	ldr	r0, [pc, #20]	; (800cdd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdc4:	f7ff fd59 	bl	800c87a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdc8:	4b02      	ldr	r3, [pc, #8]	; (800cdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20001790 	.word	0x20001790
 800cdd8:	0800d7e4 	.word	0x0800d7e4

0800cddc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4603      	mov	r3, r0
 800cde4:	6039      	str	r1, [r7, #0]
 800cde6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	220c      	movs	r2, #12
 800cdec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cdee:	4b03      	ldr	r3, [pc, #12]	; (800cdfc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	20000164 	.word	0x20000164

0800ce00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <Get_SerialNum+0x44>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce0c:	4b0e      	ldr	r3, [pc, #56]	; (800ce48 <Get_SerialNum+0x48>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce12:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <Get_SerialNum+0x4c>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d009      	beq.n	800ce3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce26:	2208      	movs	r2, #8
 800ce28:	4909      	ldr	r1, [pc, #36]	; (800ce50 <Get_SerialNum+0x50>)
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 f814 	bl	800ce58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce30:	2204      	movs	r2, #4
 800ce32:	4908      	ldr	r1, [pc, #32]	; (800ce54 <Get_SerialNum+0x54>)
 800ce34:	68b8      	ldr	r0, [r7, #8]
 800ce36:	f000 f80f 	bl	800ce58 <IntToUnicode>
  }
}
 800ce3a:	bf00      	nop
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	1fff7590 	.word	0x1fff7590
 800ce48:	1fff7594 	.word	0x1fff7594
 800ce4c:	1fff7598 	.word	0x1fff7598
 800ce50:	20000176 	.word	0x20000176
 800ce54:	20000186 	.word	0x20000186

0800ce58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	4613      	mov	r3, r2
 800ce64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	75fb      	strb	r3, [r7, #23]
 800ce6e:	e027      	b.n	800cec0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	0f1b      	lsrs	r3, r3, #28
 800ce74:	2b09      	cmp	r3, #9
 800ce76:	d80b      	bhi.n	800ce90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	0f1b      	lsrs	r3, r3, #28
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	7dfb      	ldrb	r3, [r7, #23]
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	4619      	mov	r1, r3
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	440b      	add	r3, r1
 800ce88:	3230      	adds	r2, #48	; 0x30
 800ce8a:	b2d2      	uxtb	r2, r2
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	e00a      	b.n	800cea6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	0f1b      	lsrs	r3, r3, #28
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	7dfb      	ldrb	r3, [r7, #23]
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	440b      	add	r3, r1
 800cea0:	3237      	adds	r2, #55	; 0x37
 800cea2:	b2d2      	uxtb	r2, r2
 800cea4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	011b      	lsls	r3, r3, #4
 800ceaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	3301      	adds	r3, #1
 800cebe:	75fb      	strb	r3, [r7, #23]
 800cec0:	7dfa      	ldrb	r2, [r7, #23]
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d3d3      	bcc.n	800ce70 <IntToUnicode+0x18>
  }
}
 800cec8:	bf00      	nop
 800ceca:	bf00      	nop
 800cecc:	371c      	adds	r7, #28
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
	...

0800ced8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b0b0      	sub	sp, #192	; 0xc0
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cee0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cee4:	2200      	movs	r2, #0
 800cee6:	601a      	str	r2, [r3, #0]
 800cee8:	605a      	str	r2, [r3, #4]
 800ceea:	609a      	str	r2, [r3, #8]
 800ceec:	60da      	str	r2, [r3, #12]
 800ceee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cef0:	f107 0318 	add.w	r3, r7, #24
 800cef4:	2294      	movs	r2, #148	; 0x94
 800cef6:	2100      	movs	r1, #0
 800cef8:	4618      	mov	r0, r3
 800cefa:	f000 fc43 	bl	800d784 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf06:	d163      	bne.n	800cfd0 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cf08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cf14:	f107 0318 	add.w	r3, r7, #24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7f6 ff83 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800cf24:	f7f3 fe6a 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf28:	4b2b      	ldr	r3, [pc, #172]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf2c:	4a2a      	ldr	r2, [pc, #168]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf2e:	f043 0301 	orr.w	r3, r3, #1
 800cf32:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf34:	4b28      	ldr	r3, [pc, #160]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf38:	f003 0301 	and.w	r3, r3, #1
 800cf3c:	617b      	str	r3, [r7, #20]
 800cf3e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf48:	2302      	movs	r3, #2
 800cf4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf54:	2303      	movs	r3, #3
 800cf56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf5a:	230a      	movs	r3, #10
 800cf5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cf64:	4619      	mov	r1, r3
 800cf66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cf6a:	f7f4 fac1 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf6e:	4b1a      	ldr	r3, [pc, #104]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf72:	4a19      	ldr	r2, [pc, #100]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cf78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf7a:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf82:	613b      	str	r3, [r7, #16]
 800cf84:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf86:	4b14      	ldr	r3, [pc, #80]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d114      	bne.n	800cfbc <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf92:	4b11      	ldr	r3, [pc, #68]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf96:	4a10      	ldr	r2, [pc, #64]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cf98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf9c:	6593      	str	r3, [r2, #88]	; 0x58
 800cf9e:	4b0e      	ldr	r3, [pc, #56]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cfa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfa6:	60fb      	str	r3, [r7, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800cfaa:	f7f6 f827 	bl	8002ffc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800cfae:	4b0a      	ldr	r3, [pc, #40]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfb2:	4a09      	ldr	r2, [pc, #36]	; (800cfd8 <HAL_PCD_MspInit+0x100>)
 800cfb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfb8:	6593      	str	r3, [r2, #88]	; 0x58
 800cfba:	e001      	b.n	800cfc0 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800cfbc:	f7f6 f81e 	bl	8002ffc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	2043      	movs	r0, #67	; 0x43
 800cfc6:	f7f4 fa5c 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfca:	2043      	movs	r0, #67	; 0x43
 800cfcc:	f7f4 fa75 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	37c0      	adds	r7, #192	; 0xc0
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	40021000 	.word	0x40021000

0800cfdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cff0:	4619      	mov	r1, r3
 800cff2:	4610      	mov	r0, r2
 800cff4:	f7fe fc30 	bl	800b858 <USBD_LL_SetupStage>
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	460b      	mov	r3, r1
 800d00a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d012:	78fa      	ldrb	r2, [r7, #3]
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	4613      	mov	r3, r2
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	440b      	add	r3, r1
 800d020:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	78fb      	ldrb	r3, [r7, #3]
 800d028:	4619      	mov	r1, r3
 800d02a:	f7fe fc6a 	bl	800b902 <USBD_LL_DataOutStage>
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b082      	sub	sp, #8
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	460b      	mov	r3, r1
 800d040:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d048:	78fa      	ldrb	r2, [r7, #3]
 800d04a:	6879      	ldr	r1, [r7, #4]
 800d04c:	4613      	mov	r3, r2
 800d04e:	00db      	lsls	r3, r3, #3
 800d050:	4413      	add	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	440b      	add	r3, r1
 800d056:	334c      	adds	r3, #76	; 0x4c
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	78fb      	ldrb	r3, [r7, #3]
 800d05c:	4619      	mov	r1, r3
 800d05e:	f7fe fcb3 	bl	800b9c8 <USBD_LL_DataInStage>
}
 800d062:	bf00      	nop
 800d064:	3708      	adds	r7, #8
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b082      	sub	sp, #8
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fe fdc7 	bl	800bc0c <USBD_LL_SOF>
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d08e:	2301      	movs	r3, #1
 800d090:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	2b02      	cmp	r3, #2
 800d098:	d001      	beq.n	800d09e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d09a:	f7f3 fdaf 	bl	8000bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0a4:	7bfa      	ldrb	r2, [r7, #15]
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fd71 	bl	800bb90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe fd1d 	bl	800baf4 <USBD_LL_Reset>
}
 800d0ba:	bf00      	nop
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
	...

0800d0c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	6812      	ldr	r2, [r2, #0]
 800d0da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d0de:	f043 0301 	orr.w	r3, r3, #1
 800d0e2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe fd60 	bl	800bbb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d005      	beq.n	800d104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0f8:	4b04      	ldr	r3, [pc, #16]	; (800d10c <HAL_PCD_SuspendCallback+0x48>)
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	4a03      	ldr	r2, [pc, #12]	; (800d10c <HAL_PCD_SuspendCallback+0x48>)
 800d0fe:	f043 0306 	orr.w	r3, r3, #6
 800d102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d104:	bf00      	nop
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	e000ed00 	.word	0xe000ed00

0800d110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	6812      	ldr	r2, [r2, #0]
 800d126:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d12a:	f023 0301 	bic.w	r3, r3, #1
 800d12e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a1b      	ldr	r3, [r3, #32]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d138:	4b08      	ldr	r3, [pc, #32]	; (800d15c <HAL_PCD_ResumeCallback+0x4c>)
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	4a07      	ldr	r2, [pc, #28]	; (800d15c <HAL_PCD_ResumeCallback+0x4c>)
 800d13e:	f023 0306 	bic.w	r3, r3, #6
 800d142:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d144:	f000 faf4 	bl	800d730 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fd44 	bl	800bbdc <USBD_LL_Resume>
}
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	e000ed00 	.word	0xe000ed00

0800d160 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d172:	78fa      	ldrb	r2, [r7, #3]
 800d174:	4611      	mov	r1, r2
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe fd90 	bl	800bc9c <USBD_LL_IsoOUTIncomplete>
}
 800d17c:	bf00      	nop
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d196:	78fa      	ldrb	r2, [r7, #3]
 800d198:	4611      	mov	r1, r2
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe fd58 	bl	800bc50 <USBD_LL_IsoINIncomplete>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fd96 	bl	800bce8 <USBD_LL_DevConnected>
}
 800d1bc:	bf00      	nop
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fd93 	bl	800bcfe <USBD_LL_DevDisconnected>
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d139      	bne.n	800d264 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1f0:	4a1f      	ldr	r2, [pc, #124]	; (800d270 <USBD_LL_Init+0x90>)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a1d      	ldr	r2, [pc, #116]	; (800d270 <USBD_LL_Init+0x90>)
 800d1fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d200:	4b1b      	ldr	r3, [pc, #108]	; (800d270 <USBD_LL_Init+0x90>)
 800d202:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d206:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d208:	4b19      	ldr	r3, [pc, #100]	; (800d270 <USBD_LL_Init+0x90>)
 800d20a:	2206      	movs	r2, #6
 800d20c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d20e:	4b18      	ldr	r3, [pc, #96]	; (800d270 <USBD_LL_Init+0x90>)
 800d210:	2202      	movs	r2, #2
 800d212:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d214:	4b16      	ldr	r3, [pc, #88]	; (800d270 <USBD_LL_Init+0x90>)
 800d216:	2200      	movs	r2, #0
 800d218:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d21a:	4b15      	ldr	r3, [pc, #84]	; (800d270 <USBD_LL_Init+0x90>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d220:	4b13      	ldr	r3, [pc, #76]	; (800d270 <USBD_LL_Init+0x90>)
 800d222:	2200      	movs	r2, #0
 800d224:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d226:	4b12      	ldr	r3, [pc, #72]	; (800d270 <USBD_LL_Init+0x90>)
 800d228:	2200      	movs	r2, #0
 800d22a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d22c:	4b10      	ldr	r3, [pc, #64]	; (800d270 <USBD_LL_Init+0x90>)
 800d22e:	2200      	movs	r2, #0
 800d230:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d232:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <USBD_LL_Init+0x90>)
 800d234:	2200      	movs	r2, #0
 800d236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d238:	480d      	ldr	r0, [pc, #52]	; (800d270 <USBD_LL_Init+0x90>)
 800d23a:	f7f4 fc5b 	bl	8001af4 <HAL_PCD_Init>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d244:	f7f3 fcda 	bl	8000bfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d248:	2180      	movs	r1, #128	; 0x80
 800d24a:	4809      	ldr	r0, [pc, #36]	; (800d270 <USBD_LL_Init+0x90>)
 800d24c:	f7f5 fddd 	bl	8002e0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d250:	2240      	movs	r2, #64	; 0x40
 800d252:	2100      	movs	r1, #0
 800d254:	4806      	ldr	r0, [pc, #24]	; (800d270 <USBD_LL_Init+0x90>)
 800d256:	f7f5 fd91 	bl	8002d7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d25a:	2280      	movs	r2, #128	; 0x80
 800d25c:	2101      	movs	r1, #1
 800d25e:	4804      	ldr	r0, [pc, #16]	; (800d270 <USBD_LL_Init+0x90>)
 800d260:	f7f5 fd8c 	bl	8002d7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20001990 	.word	0x20001990

0800d274 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f4 fd56 	bl	8001d3c <HAL_PCD_Start>
 800d290:	4603      	mov	r3, r0
 800d292:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d294:	7bbb      	ldrb	r3, [r7, #14]
 800d296:	2b03      	cmp	r3, #3
 800d298:	d816      	bhi.n	800d2c8 <USBD_LL_Start+0x54>
 800d29a:	a201      	add	r2, pc, #4	; (adr r2, 800d2a0 <USBD_LL_Start+0x2c>)
 800d29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a0:	0800d2b1 	.word	0x0800d2b1
 800d2a4:	0800d2b7 	.word	0x0800d2b7
 800d2a8:	0800d2bd 	.word	0x0800d2bd
 800d2ac:	0800d2c3 	.word	0x0800d2c3
    case HAL_OK :
      usb_status = USBD_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b4:	e00b      	b.n	800d2ce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ba:	e008      	b.n	800d2ce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c0:	e005      	b.n	800d2ce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2c2:	2303      	movs	r3, #3
 800d2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c6:	e002      	b.n	800d2ce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d2cc:	bf00      	nop
  }
  return usb_status;
 800d2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	70fb      	strb	r3, [r7, #3]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70bb      	strb	r3, [r7, #2]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d300:	78bb      	ldrb	r3, [r7, #2]
 800d302:	883a      	ldrh	r2, [r7, #0]
 800d304:	78f9      	ldrb	r1, [r7, #3]
 800d306:	f7f5 fa00 	bl	800270a <HAL_PCD_EP_Open>
 800d30a:	4603      	mov	r3, r0
 800d30c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	2b03      	cmp	r3, #3
 800d312:	d817      	bhi.n	800d344 <USBD_LL_OpenEP+0x6c>
 800d314:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <USBD_LL_OpenEP+0x44>)
 800d316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31a:	bf00      	nop
 800d31c:	0800d32d 	.word	0x0800d32d
 800d320:	0800d333 	.word	0x0800d333
 800d324:	0800d339 	.word	0x0800d339
 800d328:	0800d33f 	.word	0x0800d33f
    case HAL_OK :
      usb_status = USBD_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
    break;
 800d330:	e00b      	b.n	800d34a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d332:	2303      	movs	r3, #3
 800d334:	73fb      	strb	r3, [r7, #15]
    break;
 800d336:	e008      	b.n	800d34a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d338:	2301      	movs	r3, #1
 800d33a:	73fb      	strb	r3, [r7, #15]
    break;
 800d33c:	e005      	b.n	800d34a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d33e:	2303      	movs	r3, #3
 800d340:	73fb      	strb	r3, [r7, #15]
    break;
 800d342:	e002      	b.n	800d34a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d344:	2303      	movs	r3, #3
 800d346:	73fb      	strb	r3, [r7, #15]
    break;
 800d348:	bf00      	nop
  }
  return usb_status;
 800d34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d360:	2300      	movs	r3, #0
 800d362:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d36e:	78fa      	ldrb	r2, [r7, #3]
 800d370:	4611      	mov	r1, r2
 800d372:	4618      	mov	r0, r3
 800d374:	f7f5 fa31 	bl	80027da <HAL_PCD_EP_Close>
 800d378:	4603      	mov	r3, r0
 800d37a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
 800d37e:	2b03      	cmp	r3, #3
 800d380:	d816      	bhi.n	800d3b0 <USBD_LL_CloseEP+0x5c>
 800d382:	a201      	add	r2, pc, #4	; (adr r2, 800d388 <USBD_LL_CloseEP+0x34>)
 800d384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d388:	0800d399 	.word	0x0800d399
 800d38c:	0800d39f 	.word	0x0800d39f
 800d390:	0800d3a5 	.word	0x0800d3a5
 800d394:	0800d3ab 	.word	0x0800d3ab
    case HAL_OK :
      usb_status = USBD_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	e00b      	b.n	800d3b6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a2:	e008      	b.n	800d3b6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a8:	e005      	b.n	800d3b6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ae:	e002      	b.n	800d3b6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b4:	bf00      	nop
  }
  return usb_status;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3da:	78fa      	ldrb	r2, [r7, #3]
 800d3dc:	4611      	mov	r1, r2
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7f5 fad8 	bl	8002994 <HAL_PCD_EP_SetStall>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ea:	2b03      	cmp	r3, #3
 800d3ec:	d816      	bhi.n	800d41c <USBD_LL_StallEP+0x5c>
 800d3ee:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <USBD_LL_StallEP+0x34>)
 800d3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f4:	0800d405 	.word	0x0800d405
 800d3f8:	0800d40b 	.word	0x0800d40b
 800d3fc:	0800d411 	.word	0x0800d411
 800d400:	0800d417 	.word	0x0800d417
    case HAL_OK :
      usb_status = USBD_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	e00b      	b.n	800d422 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d40a:	2303      	movs	r3, #3
 800d40c:	73fb      	strb	r3, [r7, #15]
    break;
 800d40e:	e008      	b.n	800d422 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d410:	2301      	movs	r3, #1
 800d412:	73fb      	strb	r3, [r7, #15]
    break;
 800d414:	e005      	b.n	800d422 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d416:	2303      	movs	r3, #3
 800d418:	73fb      	strb	r3, [r7, #15]
    break;
 800d41a:	e002      	b.n	800d422 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d41c:	2303      	movs	r3, #3
 800d41e:	73fb      	strb	r3, [r7, #15]
    break;
 800d420:	bf00      	nop
  }
  return usb_status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d446:	78fa      	ldrb	r2, [r7, #3]
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f5 fb04 	bl	8002a58 <HAL_PCD_EP_ClrStall>
 800d450:	4603      	mov	r3, r0
 800d452:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b03      	cmp	r3, #3
 800d458:	d816      	bhi.n	800d488 <USBD_LL_ClearStallEP+0x5c>
 800d45a:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <USBD_LL_ClearStallEP+0x34>)
 800d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d460:	0800d471 	.word	0x0800d471
 800d464:	0800d477 	.word	0x0800d477
 800d468:	0800d47d 	.word	0x0800d47d
 800d46c:	0800d483 	.word	0x0800d483
    case HAL_OK :
      usb_status = USBD_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	73fb      	strb	r3, [r7, #15]
    break;
 800d474:	e00b      	b.n	800d48e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d476:	2303      	movs	r3, #3
 800d478:	73fb      	strb	r3, [r7, #15]
    break;
 800d47a:	e008      	b.n	800d48e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d47c:	2301      	movs	r3, #1
 800d47e:	73fb      	strb	r3, [r7, #15]
    break;
 800d480:	e005      	b.n	800d48e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d482:	2303      	movs	r3, #3
 800d484:	73fb      	strb	r3, [r7, #15]
    break;
 800d486:	e002      	b.n	800d48e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d488:	2303      	movs	r3, #3
 800d48a:	73fb      	strb	r3, [r7, #15]
    break;
 800d48c:	bf00      	nop
  }
  return usb_status;
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	da0b      	bge.n	800d4cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4b4:	78fb      	ldrb	r3, [r7, #3]
 800d4b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4ba:	68f9      	ldr	r1, [r7, #12]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	4413      	add	r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	440b      	add	r3, r1
 800d4c6:	333e      	adds	r3, #62	; 0x3e
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	e00b      	b.n	800d4e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4cc:	78fb      	ldrb	r3, [r7, #3]
 800d4ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4d2:	68f9      	ldr	r1, [r7, #12]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	00db      	lsls	r3, r3, #3
 800d4d8:	4413      	add	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	440b      	add	r3, r1
 800d4de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d4e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3714      	adds	r7, #20
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d50a:	78fa      	ldrb	r2, [r7, #3]
 800d50c:	4611      	mov	r1, r2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f5 f8d6 	bl	80026c0 <HAL_PCD_SetAddress>
 800d514:	4603      	mov	r3, r0
 800d516:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	2b03      	cmp	r3, #3
 800d51c:	d816      	bhi.n	800d54c <USBD_LL_SetUSBAddress+0x5c>
 800d51e:	a201      	add	r2, pc, #4	; (adr r2, 800d524 <USBD_LL_SetUSBAddress+0x34>)
 800d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d524:	0800d535 	.word	0x0800d535
 800d528:	0800d53b 	.word	0x0800d53b
 800d52c:	0800d541 	.word	0x0800d541
 800d530:	0800d547 	.word	0x0800d547
    case HAL_OK :
      usb_status = USBD_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
    break;
 800d538:	e00b      	b.n	800d552 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d53a:	2303      	movs	r3, #3
 800d53c:	73fb      	strb	r3, [r7, #15]
    break;
 800d53e:	e008      	b.n	800d552 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d540:	2301      	movs	r3, #1
 800d542:	73fb      	strb	r3, [r7, #15]
    break;
 800d544:	e005      	b.n	800d552 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d546:	2303      	movs	r3, #3
 800d548:	73fb      	strb	r3, [r7, #15]
    break;
 800d54a:	e002      	b.n	800d552 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d54c:	2303      	movs	r3, #3
 800d54e:	73fb      	strb	r3, [r7, #15]
    break;
 800d550:	bf00      	nop
  }
  return usb_status;
 800d552:	7bfb      	ldrb	r3, [r7, #15]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	607a      	str	r2, [r7, #4]
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	460b      	mov	r3, r1
 800d56a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d57a:	7af9      	ldrb	r1, [r7, #11]
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	f7f5 f9cb 	bl	800291a <HAL_PCD_EP_Transmit>
 800d584:	4603      	mov	r3, r0
 800d586:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d588:	7dbb      	ldrb	r3, [r7, #22]
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d816      	bhi.n	800d5bc <USBD_LL_Transmit+0x60>
 800d58e:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <USBD_LL_Transmit+0x38>)
 800d590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d594:	0800d5a5 	.word	0x0800d5a5
 800d598:	0800d5ab 	.word	0x0800d5ab
 800d59c:	0800d5b1 	.word	0x0800d5b1
 800d5a0:	0800d5b7 	.word	0x0800d5b7
    case HAL_OK :
      usb_status = USBD_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	75fb      	strb	r3, [r7, #23]
    break;
 800d5a8:	e00b      	b.n	800d5c2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5aa:	2303      	movs	r3, #3
 800d5ac:	75fb      	strb	r3, [r7, #23]
    break;
 800d5ae:	e008      	b.n	800d5c2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	75fb      	strb	r3, [r7, #23]
    break;
 800d5b4:	e005      	b.n	800d5c2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	75fb      	strb	r3, [r7, #23]
    break;
 800d5ba:	e002      	b.n	800d5c2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	75fb      	strb	r3, [r7, #23]
    break;
 800d5c0:	bf00      	nop
  }
  return usb_status;
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	607a      	str	r2, [r7, #4]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5ea:	7af9      	ldrb	r1, [r7, #11]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	f7f5 f93d 	bl	800286e <HAL_PCD_EP_Receive>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d5f8:	7dbb      	ldrb	r3, [r7, #22]
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	d816      	bhi.n	800d62c <USBD_LL_PrepareReceive+0x60>
 800d5fe:	a201      	add	r2, pc, #4	; (adr r2, 800d604 <USBD_LL_PrepareReceive+0x38>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d615 	.word	0x0800d615
 800d608:	0800d61b 	.word	0x0800d61b
 800d60c:	0800d621 	.word	0x0800d621
 800d610:	0800d627 	.word	0x0800d627
    case HAL_OK :
      usb_status = USBD_OK;
 800d614:	2300      	movs	r3, #0
 800d616:	75fb      	strb	r3, [r7, #23]
    break;
 800d618:	e00b      	b.n	800d632 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d61a:	2303      	movs	r3, #3
 800d61c:	75fb      	strb	r3, [r7, #23]
    break;
 800d61e:	e008      	b.n	800d632 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d620:	2301      	movs	r3, #1
 800d622:	75fb      	strb	r3, [r7, #23]
    break;
 800d624:	e005      	b.n	800d632 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d626:	2303      	movs	r3, #3
 800d628:	75fb      	strb	r3, [r7, #23]
    break;
 800d62a:	e002      	b.n	800d632 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d62c:	2303      	movs	r3, #3
 800d62e:	75fb      	strb	r3, [r7, #23]
    break;
 800d630:	bf00      	nop
  }
  return usb_status;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	460b      	mov	r3, r1
 800d646:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d64e:	78fa      	ldrb	r2, [r7, #3]
 800d650:	4611      	mov	r1, r2
 800d652:	4618      	mov	r0, r3
 800d654:	f7f5 f949 	bl	80028ea <HAL_PCD_EP_GetRxCount>
 800d658:	4603      	mov	r3, r0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d002      	beq.n	800d67c <HAL_PCDEx_LPM_Callback+0x18>
 800d676:	2b01      	cmp	r3, #1
 800d678:	d01f      	beq.n	800d6ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d67a:	e03b      	b.n	800d6f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d007      	beq.n	800d694 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d684:	f000 f854 	bl	800d730 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d688:	4b1c      	ldr	r3, [pc, #112]	; (800d6fc <HAL_PCDEx_LPM_Callback+0x98>)
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	4a1b      	ldr	r2, [pc, #108]	; (800d6fc <HAL_PCDEx_LPM_Callback+0x98>)
 800d68e:	f023 0306 	bic.w	r3, r3, #6
 800d692:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6812      	ldr	r2, [r2, #0]
 800d6a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6a6:	f023 0301 	bic.w	r3, r3, #1
 800d6aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fe fa92 	bl	800bbdc <USBD_LL_Resume>
    break;
 800d6b8:	e01c      	b.n	800d6f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	6812      	ldr	r2, [r2, #0]
 800d6c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6cc:	f043 0301 	orr.w	r3, r3, #1
 800d6d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fe fa69 	bl	800bbb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d005      	beq.n	800d6f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6e6:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <HAL_PCDEx_LPM_Callback+0x98>)
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	4a04      	ldr	r2, [pc, #16]	; (800d6fc <HAL_PCDEx_LPM_Callback+0x98>)
 800d6ec:	f043 0306 	orr.w	r3, r3, #6
 800d6f0:	6113      	str	r3, [r2, #16]
    break;
 800d6f2:	bf00      	nop
}
 800d6f4:	bf00      	nop
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	e000ed00 	.word	0xe000ed00

0800d700 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d708:	4b03      	ldr	r3, [pc, #12]	; (800d718 <USBD_static_malloc+0x18>)
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	20001e9c 	.word	0x20001e9c

0800d71c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]

}
 800d724:	bf00      	nop
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d734:	f7f2 ff38 	bl	80005a8 <SystemClock_Config>
}
 800d738:	bf00      	nop
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <__libc_init_array>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	4d0d      	ldr	r5, [pc, #52]	; (800d774 <__libc_init_array+0x38>)
 800d740:	4c0d      	ldr	r4, [pc, #52]	; (800d778 <__libc_init_array+0x3c>)
 800d742:	1b64      	subs	r4, r4, r5
 800d744:	10a4      	asrs	r4, r4, #2
 800d746:	2600      	movs	r6, #0
 800d748:	42a6      	cmp	r6, r4
 800d74a:	d109      	bne.n	800d760 <__libc_init_array+0x24>
 800d74c:	4d0b      	ldr	r5, [pc, #44]	; (800d77c <__libc_init_array+0x40>)
 800d74e:	4c0c      	ldr	r4, [pc, #48]	; (800d780 <__libc_init_array+0x44>)
 800d750:	f000 f820 	bl	800d794 <_init>
 800d754:	1b64      	subs	r4, r4, r5
 800d756:	10a4      	asrs	r4, r4, #2
 800d758:	2600      	movs	r6, #0
 800d75a:	42a6      	cmp	r6, r4
 800d75c:	d105      	bne.n	800d76a <__libc_init_array+0x2e>
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
 800d760:	f855 3b04 	ldr.w	r3, [r5], #4
 800d764:	4798      	blx	r3
 800d766:	3601      	adds	r6, #1
 800d768:	e7ee      	b.n	800d748 <__libc_init_array+0xc>
 800d76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d76e:	4798      	blx	r3
 800d770:	3601      	adds	r6, #1
 800d772:	e7f2      	b.n	800d75a <__libc_init_array+0x1e>
 800d774:	0800d880 	.word	0x0800d880
 800d778:	0800d880 	.word	0x0800d880
 800d77c:	0800d880 	.word	0x0800d880
 800d780:	0800d884 	.word	0x0800d884

0800d784 <memset>:
 800d784:	4402      	add	r2, r0
 800d786:	4603      	mov	r3, r0
 800d788:	4293      	cmp	r3, r2
 800d78a:	d100      	bne.n	800d78e <memset+0xa>
 800d78c:	4770      	bx	lr
 800d78e:	f803 1b01 	strb.w	r1, [r3], #1
 800d792:	e7f9      	b.n	800d788 <memset+0x4>

0800d794 <_init>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	bf00      	nop
 800d798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79a:	bc08      	pop	{r3}
 800d79c:	469e      	mov	lr, r3
 800d79e:	4770      	bx	lr

0800d7a0 <_fini>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	bf00      	nop
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr
