
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011874  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08011a34  08011a34  00021a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ce4  08011ce4  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011ce4  08011ce4  00021ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cec  08011cec  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cec  08011cec  00021cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011cf0  08011cf0  00021cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011cf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c8  200001f4  08011ee8  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200025bc  08011ee8  000325bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad9e  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ea  00000000  00000000  0005afc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  000603b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020b8  00000000  00000000  000626a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032575  00000000  00000000  00064758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e559  00000000  00000000  00096ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011af8f  00000000  00000000  000c5226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e01b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d18  00000000  00000000  001e0208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001e9f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001e9fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011a1c 	.word	0x08011a1c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	08011a1c 	.word	0x08011a1c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 80005ba:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	char wtext[50] = "STM32 FATFS works great!"; /* File write buffer. This was previously type uint8_t */
 80005bc:	4bab      	ldr	r3, [pc, #684]	; (800086c <main+0x2b8>)
 80005be:	f507 7417 	add.w	r4, r7, #604	; 0x25c
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005cc:	c403      	stmia	r4!, {r0, r1}
 80005ce:	7022      	strb	r2, [r4, #0]
 80005d0:	f207 2375 	addw	r3, r7, #629	; 0x275
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]
 80005e2:	761a      	strb	r2, [r3, #24]
	uint8_t usberr;

	// For GPS Module
	HAL_StatusTypeDef UART2_Rx_STATUS;
	uint8_t UART2_RxBuffer[500];
	uint8_t *data = "Hello!\n\O";
 80005e4:	4ba2      	ldr	r3, [pc, #648]	; (8000870 <main+0x2bc>)
 80005e6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 ff52 	bl	8001492 <HAL_Init>

  /* USER CODE BEGIN Init */

  // SD reader
  MX_FATFS_Init();
 80005ee:	f00a fe4d 	bl	800b28c <MX_FATFS_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f94f 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fb9b 	bl	8000d30 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005fa:	f000 f9a9 	bl	8000950 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005fe:	f000 f9e7 	bl	80009d0 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000602:	f000 fa25 	bl	8000a50 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000606:	f000 fa45 	bl	8000a94 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 faf7 	bl	8000bfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800060e:	f000 fb43 	bl	8000c98 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000612:	f00a fe3b 	bl	800b28c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000616:	f00f fbbf 	bl	800fd98 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 800061a:	f000 fa79 	bl	8000b10 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800061e:	f000 f98b 	bl	8000938 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart1);
 8000622:	4894      	ldr	r0, [pc, #592]	; (8000874 <main+0x2c0>)
 8000624:	f000 fe18 	bl	8001258 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8000628:	4893      	ldr	r0, [pc, #588]	; (8000878 <main+0x2c4>)
 800062a:	f000 fe15 	bl	8001258 <HAL_UART_MspInit>

  //USB_ok = CDC_Init_FS();

  // If not FR_OK, mounting failed, else it was successful
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800062e:	2200      	movs	r2, #0
 8000630:	4992      	ldr	r1, [pc, #584]	; (800087c <main+0x2c8>)
 8000632:	4893      	ldr	r0, [pc, #588]	; (8000880 <main+0x2cc>)
 8000634:	f00e f9c8 	bl	800e9c8 <f_mount>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d010      	beq.n	8000660 <main+0xac>
      	{
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800063e:	2108      	movs	r1, #8
 8000640:	4890      	ldr	r0, [pc, #576]	; (8000884 <main+0x2d0>)
 8000642:	f001 fa93 	bl	8001b6c <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (300);
 8000646:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800064a:	f000 ff97 	bl	800157c <HAL_Delay>
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800064e:	2108      	movs	r1, #8
 8000650:	488c      	ldr	r0, [pc, #560]	; (8000884 <main+0x2d0>)
 8000652:	f001 fa8b 	bl	8001b6c <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f000 ff8f 	bl	800157c <HAL_Delay>
 800065e:	e072      	b.n	8000746 <main+0x192>
      	}
  // here f_mount == FR_OK -> mounting was a success
  else
      	{
	  // f_mkfs
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000660:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000664:	2264      	movs	r2, #100	; 0x64
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	2107      	movs	r1, #7
 800066c:	4883      	ldr	r0, [pc, #524]	; (800087c <main+0x2c8>)
 800066e:	f00e ff0b 	bl	800f488 <f_mkfs>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d010      	beq.n	800069a <main+0xe6>
      	    {
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED0_Pin);
 8000678:	2108      	movs	r1, #8
 800067a:	4882      	ldr	r0, [pc, #520]	; (8000884 <main+0x2d0>)
 800067c:	f001 fa76 	bl	8001b6c <HAL_GPIO_TogglePin>
  				  HAL_Delay (300);
 8000680:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000684:	f000 ff7a 	bl	800157c <HAL_Delay>
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED0_Pin);
 8000688:	2108      	movs	r1, #8
 800068a:	487e      	ldr	r0, [pc, #504]	; (8000884 <main+0x2d0>)
 800068c:	f001 fa6e 	bl	8001b6c <HAL_GPIO_TogglePin>
  				  HAL_Delay (1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f000 ff72 	bl	800157c <HAL_Delay>
 8000698:	e055      	b.n	8000746 <main+0x192>
      	    }
	  else
      		{
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800069a:	220a      	movs	r2, #10
 800069c:	497a      	ldr	r1, [pc, #488]	; (8000888 <main+0x2d4>)
 800069e:	487b      	ldr	r0, [pc, #492]	; (800088c <main+0x2d8>)
 80006a0:	f00e f9d8 	bl	800ea54 <f_open>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d010      	beq.n	80006cc <main+0x118>
				{
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED0_Pin);
 80006aa:	2108      	movs	r1, #8
 80006ac:	4875      	ldr	r0, [pc, #468]	; (8000884 <main+0x2d0>)
 80006ae:	f001 fa5d 	bl	8001b6c <HAL_GPIO_TogglePin>
				  HAL_Delay (300);
 80006b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006b6:	f000 ff61 	bl	800157c <HAL_Delay>
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED0_Pin);
 80006ba:	2108      	movs	r1, #8
 80006bc:	4871      	ldr	r0, [pc, #452]	; (8000884 <main+0x2d0>)
 80006be:	f001 fa55 	bl	8001b6c <HAL_GPIO_TogglePin>
				  HAL_Delay (1000);
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	f000 ff59 	bl	800157c <HAL_Delay>
 80006ca:	e03c      	b.n	8000746 <main+0x192>
				}
			else
				{

				// Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80006cc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd95 	bl	8000200 <strlen>
 80006d6:	4602      	mov	r2, r0
 80006d8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80006dc:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 80006e0:	486a      	ldr	r0, [pc, #424]	; (800088c <main+0x2d8>)
 80006e2:	f00e fcb4 	bl	800f04e <f_write>
 80006e6:	4603      	mov	r3, r0
 80006e8:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
				f_read(&SDFile, &rtext, 100, &bytesread);
 80006ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80006f0:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80006f4:	2264      	movs	r2, #100	; 0x64
 80006f6:	4865      	ldr	r0, [pc, #404]	; (800088c <main+0x2d8>)
 80006f8:	f00e fb6a 	bl	800edd0 <f_read>
				//f_read();

				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 80006fc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000700:	2164      	movs	r1, #100	; 0x64
 8000702:	4618      	mov	r0, r3
 8000704:	f00f fc06 	bl	800ff14 <CDC_Transmit_FS>
 8000708:	4603      	mov	r3, r0
 800070a:	f887 329a 	strb.w	r3, [r7, #666]	; 0x29a
				if((byteswritten == 0) || (res != FR_OK))
 800070e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <main+0x16a>
 8000716:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 800071a:	2b00      	cmp	r3, #0
 800071c:	d010      	beq.n	8000740 <main+0x18c>
					{
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED0_Pin);
 800071e:	2108      	movs	r1, #8
 8000720:	4858      	ldr	r0, [pc, #352]	; (8000884 <main+0x2d0>)
 8000722:	f001 fa23 	bl	8001b6c <HAL_GPIO_TogglePin>
					  HAL_Delay (300);
 8000726:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800072a:	f000 ff27 	bl	800157c <HAL_Delay>
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED0_Pin);
 800072e:	2108      	movs	r1, #8
 8000730:	4854      	ldr	r0, [pc, #336]	; (8000884 <main+0x2d0>)
 8000732:	f001 fa1b 	bl	8001b6c <HAL_GPIO_TogglePin>
					  HAL_Delay (1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073a:	f000 ff1f 	bl	800157c <HAL_Delay>
 800073e:	e002      	b.n	8000746 <main+0x192>
					}
				else
					{

					f_close(&SDFile);
 8000740:	4852      	ldr	r0, [pc, #328]	; (800088c <main+0x2d8>)
 8000742:	f00e fe77 	bl	800f434 <f_close>
					}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	484d      	ldr	r0, [pc, #308]	; (8000880 <main+0x2cc>)
 800074c:	f00e f93c 	bl	800e9c8 <f_mount>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // This returns HAL_TIMEOUT ???
	  UART2_Rx_STATUS = HAL_UART_Receive (&huart2, &UART2_RxBuffer, sizeof(UART2_RxBuffer), 5000);
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	f241 3388 	movw	r3, #5000	; 0x1388
 8000756:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800075a:	4847      	ldr	r0, [pc, #284]	; (8000878 <main+0x2c4>)
 800075c:	f007 fdec 	bl	8008338 <HAL_UART_Receive>
 8000760:	4603      	mov	r3, r0
 8000762:	f887 3299 	strb.w	r3, [r7, #665]	; 0x299

	  // Transmit should be handled through the USB port
	  if(UART2_Rx_STATUS == HAL_OK)
 8000766:	f897 3299 	ldrb.w	r3, [r7, #665]	; 0x299
 800076a:	2b00      	cmp	r3, #0
 800076c:	d123      	bne.n	80007b6 <main+0x202>
	  	  {
		  // HAL_UART_Transmit (&huart1, UART2_rxBuffer, sizeof(UART2_rxBuffer), 5000);
		  // HAL_UART_Transmit (&huart1, "b \n", 3, 5000);
		  CDC_Transmit_FS (UART2_RxBuffer, sizeof(UART2_RxBuffer));
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000774:	4618      	mov	r0, r3
 8000776:	f00f fbcd 	bl	800ff14 <CDC_Transmit_FS>
		  CDC_Transmit_FS ("b \n", 3);
 800077a:	2103      	movs	r1, #3
 800077c:	4844      	ldr	r0, [pc, #272]	; (8000890 <main+0x2dc>)
 800077e:	f00f fbc9 	bl	800ff14 <CDC_Transmit_FS>

		  // Flash LED1 twice
		  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000782:	2108      	movs	r1, #8
 8000784:	483f      	ldr	r0, [pc, #252]	; (8000884 <main+0x2d0>)
 8000786:	f001 f9f1 	bl	8001b6c <HAL_GPIO_TogglePin>
		  HAL_Delay (200);
 800078a:	20c8      	movs	r0, #200	; 0xc8
 800078c:	f000 fef6 	bl	800157c <HAL_Delay>
		  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000790:	2108      	movs	r1, #8
 8000792:	483c      	ldr	r0, [pc, #240]	; (8000884 <main+0x2d0>)
 8000794:	f001 f9ea 	bl	8001b6c <HAL_GPIO_TogglePin>
		  HAL_Delay (100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f000 feef 	bl	800157c <HAL_Delay>
		  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800079e:	2108      	movs	r1, #8
 80007a0:	4838      	ldr	r0, [pc, #224]	; (8000884 <main+0x2d0>)
 80007a2:	f001 f9e3 	bl	8001b6c <HAL_GPIO_TogglePin>
		  HAL_Delay (200);
 80007a6:	20c8      	movs	r0, #200	; 0xc8
 80007a8:	f000 fee8 	bl	800157c <HAL_Delay>
		  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80007ac:	2108      	movs	r1, #8
 80007ae:	4835      	ldr	r0, [pc, #212]	; (8000884 <main+0x2d0>)
 80007b0:	f001 f9dc 	bl	8001b6c <HAL_GPIO_TogglePin>
 80007b4:	e7cc      	b.n	8000750 <main+0x19c>
	  	  }
	  else
	  	  {

		  // Flash LED4 twice
		  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4832      	ldr	r0, [pc, #200]	; (8000884 <main+0x2d0>)
 80007ba:	f001 f9d7 	bl	8001b6c <HAL_GPIO_TogglePin>
		  HAL_Delay (200);
 80007be:	20c8      	movs	r0, #200	; 0xc8
 80007c0:	f000 fedc 	bl	800157c <HAL_Delay>
		  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	482f      	ldr	r0, [pc, #188]	; (8000884 <main+0x2d0>)
 80007c8:	f001 f9d0 	bl	8001b6c <HAL_GPIO_TogglePin>
		  HAL_Delay (100);
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f000 fed5 	bl	800157c <HAL_Delay>
		  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	482b      	ldr	r0, [pc, #172]	; (8000884 <main+0x2d0>)
 80007d6:	f001 f9c9 	bl	8001b6c <HAL_GPIO_TogglePin>
		  HAL_Delay (200);
 80007da:	20c8      	movs	r0, #200	; 0xc8
 80007dc:	f000 fece 	bl	800157c <HAL_Delay>
		  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80007e0:	2140      	movs	r1, #64	; 0x40
 80007e2:	4828      	ldr	r0, [pc, #160]	; (8000884 <main+0x2d0>)
 80007e4:	f001 f9c2 	bl	8001b6c <HAL_GPIO_TogglePin>

		  USB_Tx_STATUS = CDC_Transmit_FS (*data, sizeof(*data));
 80007e8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f00f fb8f 	bl	800ff14 <CDC_Transmit_FS>
 80007f6:	4603      	mov	r3, r0
 80007f8:	f887 3298 	strb.w	r3, [r7, #664]	; 0x298

		  if (USB_Tx_STATUS == USBD_OK)
 80007fc:	f897 3298 	ldrb.w	r3, [r7, #664]	; 0x298
 8000800:	2b00      	cmp	r3, #0
 8000802:	d119      	bne.n	8000838 <main+0x284>
		  {
			  // Flash LED2 twice
			  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000804:	2110      	movs	r1, #16
 8000806:	481f      	ldr	r0, [pc, #124]	; (8000884 <main+0x2d0>)
 8000808:	f001 f9b0 	bl	8001b6c <HAL_GPIO_TogglePin>
			  HAL_Delay (200);
 800080c:	20c8      	movs	r0, #200	; 0xc8
 800080e:	f000 feb5 	bl	800157c <HAL_Delay>
			  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000812:	2110      	movs	r1, #16
 8000814:	481b      	ldr	r0, [pc, #108]	; (8000884 <main+0x2d0>)
 8000816:	f001 f9a9 	bl	8001b6c <HAL_GPIO_TogglePin>
			  HAL_Delay (100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f000 feae 	bl	800157c <HAL_Delay>
			  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000820:	2110      	movs	r1, #16
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <main+0x2d0>)
 8000824:	f001 f9a2 	bl	8001b6c <HAL_GPIO_TogglePin>
			  HAL_Delay (200);
 8000828:	20c8      	movs	r0, #200	; 0xc8
 800082a:	f000 fea7 	bl	800157c <HAL_Delay>
			  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800082e:	2110      	movs	r1, #16
 8000830:	4814      	ldr	r0, [pc, #80]	; (8000884 <main+0x2d0>)
 8000832:	f001 f99b 	bl	8001b6c <HAL_GPIO_TogglePin>
 8000836:	e78b      	b.n	8000750 <main+0x19c>
		  }
		  else
		  {
			  // Flash LED3 twice
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000838:	2120      	movs	r1, #32
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <main+0x2d0>)
 800083c:	f001 f996 	bl	8001b6c <HAL_GPIO_TogglePin>
			  HAL_Delay (200);
 8000840:	20c8      	movs	r0, #200	; 0xc8
 8000842:	f000 fe9b 	bl	800157c <HAL_Delay>
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000846:	2120      	movs	r1, #32
 8000848:	480e      	ldr	r0, [pc, #56]	; (8000884 <main+0x2d0>)
 800084a:	f001 f98f 	bl	8001b6c <HAL_GPIO_TogglePin>
			  HAL_Delay (100);
 800084e:	2064      	movs	r0, #100	; 0x64
 8000850:	f000 fe94 	bl	800157c <HAL_Delay>
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000854:	2120      	movs	r1, #32
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <main+0x2d0>)
 8000858:	f001 f988 	bl	8001b6c <HAL_GPIO_TogglePin>
			  HAL_Delay (200);
 800085c:	20c8      	movs	r0, #200	; 0xc8
 800085e:	f000 fe8d 	bl	800157c <HAL_Delay>
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000862:	2120      	movs	r1, #32
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <main+0x2d0>)
 8000866:	f001 f981 	bl	8001b6c <HAL_GPIO_TogglePin>
	  UART2_Rx_STATUS = HAL_UART_Receive (&huart2, &UART2_RxBuffer, sizeof(UART2_RxBuffer), 5000);
 800086a:	e771      	b.n	8000750 <main+0x19c>
 800086c:	08011a50 	.word	0x08011a50
 8000870:	08011a34 	.word	0x08011a34
 8000874:	200003e8 	.word	0x200003e8
 8000878:	20000478 	.word	0x20000478
 800087c:	20000510 	.word	0x20000510
 8000880:	20000514 	.word	0x20000514
 8000884:	48000c00 	.word	0x48000c00
 8000888:	08011a40 	.word	0x08011a40
 800088c:	20000744 	.word	0x20000744
 8000890:	08011a4c 	.word	0x08011a4c

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2244      	movs	r2, #68	; 0x44
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f010 f8e6 	bl	8010a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008b6:	2000      	movs	r0, #0
 80008b8:	f002 fc78 	bl	80031ac <HAL_PWREx_ControlVoltageScaling>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008c2:	f000 fb13 	bl	8000eec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008c6:	2321      	movs	r3, #33	; 0x21
 80008c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	2303      	movs	r3, #3
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80008e0:	231e      	movs	r3, #30
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 80008e4:	2314      	movs	r3, #20
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fd0d 	bl	8003314 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000900:	f000 faf4 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2105      	movs	r1, #5
 800091c:	4618      	mov	r0, r3
 800091e:	f003 f913 	bl	8003b48 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000928:	f000 fae0 	bl	8000eec <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800092c:	f003 fb0a 	bl	8003f44 <HAL_RCC_EnableCSS>
}
 8000930:	bf00      	nop
 8000932:	3758      	adds	r7, #88	; 0x58
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	201a      	movs	r0, #26
 8000942:	f000 ff1a 	bl	800177a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000946:	201a      	movs	r0, #26
 8000948:	f000 ff33 	bl	80017b2 <HAL_NVIC_EnableIRQ>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C1_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C1_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C1_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C1_Init+0x74>)
 800098c:	f001 f908 	bl	8001ba0 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 faa9 	bl	8000eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C1_Init+0x74>)
 800099e:	f001 f98e 	bl	8001cbe <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 faa0 	bl	8000eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C1_Init+0x74>)
 80009b0:	f001 f9d0 	bl	8001d54 <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 fa97 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000210 	.word	0x20000210
 80009c8:	40005400 	.word	0x40005400
 80009cc:	307075b1 	.word	0x307075b1

080009d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C2_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C2_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a0c:	f001 f8c8 	bl	8001ba0 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fa69 	bl	8000eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a1e:	f001 f94e 	bl	8001cbe <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fa60 	bl	8000eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a30:	f001 f990 	bl	8001d54 <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fa57 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000264 	.word	0x20000264
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	307075b1 	.word	0x307075b1

08000a50 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_SDMMC1_SD_Init+0x3c>)
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <MX_SDMMC1_SD_Init+0x40>)
 8000a58:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_SDMMC1_SD_Init+0x3c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_SDMMC1_SD_Init+0x3c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_SDMMC1_SD_Init+0x3c>)
 8000a68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_SDMMC1_SD_Init+0x3c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <MX_SDMMC1_SD_Init+0x3c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <MX_SDMMC1_SD_Init+0x3c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200002b8 	.word	0x200002b8
 8000a90:	50062400 	.word	0x50062400

08000a94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_SPI1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aae:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ab2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ac2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ac6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000af4:	f006 fc9d 	bl	8007432 <HAL_SPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 f9f5 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000338 	.word	0x20000338
 8000b0c:	40013000 	.word	0x40013000

08000b10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b092      	sub	sp, #72	; 0x48
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	222c      	movs	r2, #44	; 0x2c
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00f ff9f 	bl	8010a74 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b38:	4a2f      	ldr	r2, [pc, #188]	; (8000bf8 <MX_TIM17_Init+0xe8>)
 8000b3a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b42:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b4c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000b50:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b64:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b66:	f006 fd07 	bl	8007578 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000b70:	f000 f9bc 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000b74:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000b76:	f006 fd56 	bl	8007626 <HAL_TIM_OC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000b80:	f000 f9b4 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000baa:	f006 febd 	bl	8007928 <HAL_TIM_OC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000bb4:	f000 f99a 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_TIM17_Init+0xe4>)
 8000bdc:	f007 fac0 	bl	8008160 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000be6:	f000 f981 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3748      	adds	r7, #72	; 0x48
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000039c 	.word	0x2000039c
 8000bf8:	40014800 	.word	0x40014800

08000bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <MX_USART1_UART_Init+0x98>)
 8000c0a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c20:	220c      	movs	r2, #12
 8000c22:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c44:	f007 fb28 	bl	8008298 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000c4e:	f000 f94d 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c56:	f008 f92d 	bl	8008eb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000c60:	f000 f944 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c68:	f008 f962 	bl	8008f30 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000c72:	f000 f93b 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c78:	f008 f8e3 	bl	8008e42 <HAL_UARTEx_DisableFifoMode>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000c82:	f000 f933 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200003e8 	.word	0x200003e8
 8000c90:	40013800 	.word	0x40013800
 8000c94:	0001c138 	.word	0x0001c138

08000c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <MX_USART2_UART_Init+0x94>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000ce2:	f007 fad9 	bl	8008298 <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 f8fe 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cf4:	f008 f8de 	bl	8008eb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f000 f8f5 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000d06:	f008 f913 	bl	8008f30 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d10:	f000 f8ec 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000d16:	f008 f894 	bl	8008e42 <HAL_UARTEx_DisableFifoMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f8e4 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000478 	.word	0x20000478
 8000d2c:	40004400 	.word	0x40004400

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d46:	4b64      	ldr	r3, [pc, #400]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a63      	ldr	r2, [pc, #396]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b61      	ldr	r3, [pc, #388]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a5d      	ldr	r2, [pc, #372]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b5b      	ldr	r3, [pc, #364]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	4b58      	ldr	r3, [pc, #352]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a57      	ldr	r2, [pc, #348]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b52      	ldr	r3, [pc, #328]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a4b      	ldr	r2, [pc, #300]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <MX_GPIO_Init+0x1a8>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f641 013c 	movw	r1, #6204	; 0x183c
 8000ddc:	483f      	ldr	r0, [pc, #252]	; (8000edc <MX_GPIO_Init+0x1ac>)
 8000dde:	f000 fead 	bl	8001b3c <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2130      	movs	r1, #48	; 0x30
 8000de6:	483e      	ldr	r0, [pc, #248]	; (8000ee0 <MX_GPIO_Init+0x1b0>)
 8000de8:	f000 fea8 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2178      	movs	r1, #120	; 0x78
 8000df0:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <MX_GPIO_Init+0x1b4>)
 8000df2:	f000 fea3 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000df6:	f641 033c 	movw	r3, #6204	; 0x183c
 8000dfa:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4833      	ldr	r0, [pc, #204]	; (8000edc <MX_GPIO_Init+0x1ac>)
 8000e10:	f000 fcea 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <MX_GPIO_Init+0x1b0>)
 8000e2a:	f000 fcdd 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f000 fcd0 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000e48:	2330      	movs	r3, #48	; 0x30
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4820      	ldr	r0, [pc, #128]	; (8000ee0 <MX_GPIO_Init+0x1b0>)
 8000e60:	f000 fcc2 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <MX_GPIO_Init+0x1ac>)
 8000e7a:	f000 fcb5 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f000 fca7 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000e9a:	2378      	movs	r3, #120	; 0x78
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_GPIO_Init+0x1b4>)
 8000eb2:	f000 fc99 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000eb6:	2320      	movs	r3, #32
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_GPIO_Init+0x1b8>)
 8000eca:	f000 fc8d 	bl	80017e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	; 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48001000 	.word	0x48001000
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	48000c00 	.word	0x48000c00
 8000ee8:	48000400 	.word	0x48000400

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <Error_Handler+0x10>)
 8000ef6:	f00f fdc5 	bl	8010a84 <iprintf>
  while (1)
 8000efa:	e7fe      	b.n	8000efa <Error_Handler+0xe>
 8000efc:	08011a84 	.word	0x08011a84

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_MspInit+0x44>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_MspInit+0x44>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6613      	str	r3, [r2, #96]	; 0x60
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_MspInit+0x44>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_MspInit+0x44>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_MspInit+0x44>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_MspInit+0x44>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0b0      	sub	sp, #192	; 0xc0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	2294      	movs	r2, #148	; 0x94
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00f fd83 	bl	8010a74 <memset>
  if(hi2c->Instance==I2C1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a42      	ldr	r2, [pc, #264]	; (800107c <HAL_I2C_MspInit+0x134>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d13b      	bne.n	8000ff0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 f8c9 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff ffac 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	4a39      	ldr	r2, [pc, #228]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fac:	23c0      	movs	r3, #192	; 0xc0
 8000fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fce:	4619      	mov	r1, r3
 8000fd0:	482c      	ldr	r0, [pc, #176]	; (8001084 <HAL_I2C_MspInit+0x13c>)
 8000fd2:	f000 fc09 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fee:	e040      	b.n	8001072 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_I2C_MspInit+0x140>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d13b      	bne.n	8001072 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f888 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8001012:	f7ff ff6b 	bl	8000eec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_I2C_MspInit+0x138>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800102e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001036:	2312      	movs	r3, #18
 8001038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001048:	2304      	movs	r3, #4
 800104a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001052:	4619      	mov	r1, r3
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <HAL_I2C_MspInit+0x13c>)
 8001056:	f000 fbc7 	bl	80017e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_I2C_MspInit+0x138>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
}
 8001072:	bf00      	nop
 8001074:	37c0      	adds	r7, #192	; 0xc0
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40005400 	.word	0x40005400
 8001080:	40021000 	.word	0x40021000
 8001084:	48000400 	.word	0x48000400
 8001088:	40005800 	.word	0x40005800

0800108c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0b0      	sub	sp, #192	; 0xc0
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	2294      	movs	r2, #148	; 0x94
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00f fce1 	bl	8010a74 <memset>
  if(hsd->Instance==SDMMC1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a33      	ldr	r2, [pc, #204]	; (8001184 <HAL_SD_MspInit+0xf8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d15f      	bne.n	800117c <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80010c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 f824 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80010da:	f7ff ff07 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_SD_MspInit+0xfc>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a29      	ldr	r2, [pc, #164]	; (8001188 <HAL_SD_MspInit+0xfc>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_SD_MspInit+0xfc>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_SD_MspInit+0xfc>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <HAL_SD_MspInit+0xfc>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_SD_MspInit+0xfc>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_SD_MspInit+0xfc>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_SD_MspInit+0xfc>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_SD_MspInit+0xfc>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001126:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800112a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001140:	230c      	movs	r3, #12
 8001142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800114a:	4619      	mov	r1, r3
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <HAL_SD_MspInit+0x100>)
 800114e:	f000 fb4b 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001152:	2304      	movs	r3, #4
 8001154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800116a:	230c      	movs	r3, #12
 800116c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <HAL_SD_MspInit+0x104>)
 8001178:	f000 fb36 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	37c0      	adds	r7, #192	; 0xc0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	50062400 	.word	0x50062400
 8001188:	40021000 	.word	0x40021000
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00

08001194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x7c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d128      	bne.n	8001208 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_SPI_MspInit+0x80>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <HAL_SPI_MspInit+0x80>)
 80011bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011c0:	6613      	str	r3, [r2, #96]	; 0x60
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_SPI_MspInit+0x80>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_SPI_MspInit+0x80>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_SPI_MspInit+0x80>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_SPI_MspInit+0x80>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011e6:	23f0      	movs	r3, #240	; 0xf0
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f6:	2305      	movs	r3, #5
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f000 faf0 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40013000 	.word	0x40013000
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_TIM_Base_MspInit+0x38>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10b      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_TIM_Base_MspInit+0x3c>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_TIM_Base_MspInit+0x3c>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001234:	6613      	str	r3, [r2, #96]	; 0x60
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_TIM_Base_MspInit+0x3c>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40014800 	.word	0x40014800
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0b0      	sub	sp, #192	; 0xc0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	2294      	movs	r2, #148	; 0x94
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00f fbfb 	bl	8010a74 <memset>
  if(huart->Instance==USART1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a43      	ldr	r2, [pc, #268]	; (8001390 <HAL_UART_MspInit+0x138>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d13d      	bne.n	8001304 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800128c:	2300      	movs	r3, #0
 800128e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	4618      	mov	r0, r3
 8001296:	f002 ff41 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a0:	f7ff fe24 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_UART_MspInit+0x13c>)
 80012a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a8:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <HAL_UART_MspInit+0x13c>)
 80012aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ae:	6613      	str	r3, [r2, #96]	; 0x60
 80012b0:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_UART_MspInit+0x13c>)
 80012b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_UART_MspInit+0x13c>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	4a34      	ldr	r2, [pc, #208]	; (8001394 <HAL_UART_MspInit+0x13c>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_UART_MspInit+0x13c>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80012d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ee:	2307      	movs	r3, #7
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fa73 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	e040      	b.n	8001386 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a23      	ldr	r2, [pc, #140]	; (8001398 <HAL_UART_MspInit+0x140>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d13b      	bne.n	8001386 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001312:	2300      	movs	r3, #0
 8001314:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fefe 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001326:	f7ff fde1 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_UART_MspInit+0x13c>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_UART_MspInit+0x13c>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_UART_MspInit+0x13c>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_MspInit+0x13c>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_UART_MspInit+0x13c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0x13c>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800135a:	230c      	movs	r3, #12
 800135c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001372:	2307      	movs	r3, #7
 8001374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f000 fa31 	bl	80017e8 <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	37c0      	adds	r7, #192	; 0xc0
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40013800 	.word	0x40013800
 8001394:	40021000 	.word	0x40021000
 8001398:	40004400 	.word	0x40004400

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80013a0:	f002 fde0 	bl	8003f64 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x8>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f8a6 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80013fa:	f006 f975 	bl	80076e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000039c 	.word	0x2000039c

08001408 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <OTG_FS_IRQHandler+0x10>)
 800140e:	f000 fe40 	bl	8002092 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20001e7c 	.word	0x20001e7c

0800141c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <SystemInit+0x20>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <SystemInit+0x20>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff ffea 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopForever+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f00f fadd 	bl	8010a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff f89f 	bl	80005b4 <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001484:	08011cf4 	.word	0x08011cf4
  ldr r2, =_sbss
 8001488:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800148c:	200025bc 	.word	0x200025bc

08001490 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_IRQHandler>

08001492 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f961 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f80e 	bl	80014c4 <HAL_InitTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e001      	b.n	80014b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b4:	f7ff fd24 	bl	8000f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_InitTick+0x6c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d023      	beq.n	8001520 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_InitTick+0x70>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_InitTick+0x6c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f96d 	bl	80017ce <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d809      	bhi.n	8001514 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001508:	f000 f937 	bl	800177a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_InitTick+0x74>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e007      	b.n	8001524 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e004      	b.n	8001524 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e001      	b.n	8001524 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	20000000 	.word	0x20000000
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	20000508 	.word	0x20000508

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000508 	.word	0x20000508

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <__NVIC_EnableIRQ+0x38>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff29 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff3e 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff8e 	bl	80016b8 <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5d 	bl	8001664 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff31 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e166      	b.n	8001ac6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8158 	beq.w	8001ac0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x40>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d017      	beq.n	80018c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80b2 	beq.w	8001ac0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_GPIO_Init+0x2fc>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <HAL_GPIO_Init+0x2fc>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6613      	str	r3, [r2, #96]	; 0x60
 8001968:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <HAL_GPIO_Init+0x2fc>)
 800196a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001974:	4a5c      	ldr	r2, [pc, #368]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199e:	d02b      	beq.n	80019f8 <HAL_GPIO_Init+0x210>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_GPIO_Init+0x304>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d025      	beq.n	80019f4 <HAL_GPIO_Init+0x20c>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_GPIO_Init+0x308>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01f      	beq.n	80019f0 <HAL_GPIO_Init+0x208>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a50      	ldr	r2, [pc, #320]	; (8001af4 <HAL_GPIO_Init+0x30c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d019      	beq.n	80019ec <HAL_GPIO_Init+0x204>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <HAL_GPIO_Init+0x310>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_GPIO_Init+0x200>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a4e      	ldr	r2, [pc, #312]	; (8001afc <HAL_GPIO_Init+0x314>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x1fc>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a4d      	ldr	r2, [pc, #308]	; (8001b00 <HAL_GPIO_Init+0x318>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x1f8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_GPIO_Init+0x31c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x1f4>
 80019d8:	2307      	movs	r3, #7
 80019da:	e00e      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019dc:	2308      	movs	r3, #8
 80019de:	e00c      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019e0:	2306      	movs	r3, #6
 80019e2:	e00a      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019e4:	2305      	movs	r3, #5
 80019e6:	e008      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e006      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e004      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_GPIO_Init+0x212>
 80019f8:	2300      	movs	r3, #0
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	f002 0203 	and.w	r2, r2, #3
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	4093      	lsls	r3, r2
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a0a:	4937      	ldr	r1, [pc, #220]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a18:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a3c:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a66:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a90:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f ae91 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	48000400 	.word	0x48000400
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000c00 	.word	0x48000c00
 8001af8:	48001000 	.word	0x48001000
 8001afc:	48001400 	.word	0x48001400
 8001b00:	48001800 	.word	0x48001800
 8001b04:	48001c00 	.word	0x48001c00
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	041a      	lsls	r2, r3, #16
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43d9      	mvns	r1, r3
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e081      	b.n	8001cb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff f9be 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	e006      	b.n	8001c28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d104      	bne.n	8001c3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69d9      	ldr	r1, [r3, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d138      	bne.n	8001d46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e032      	b.n	8001d48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2224      	movs	r2, #36	; 0x24
 8001cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
  }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d139      	bne.n	8001dde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e033      	b.n	8001de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001da6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
  }
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b08f      	sub	sp, #60	; 0x3c
 8001df0:	af0a      	add	r7, sp, #40	; 0x28
 8001df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e116      	b.n	800202c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d106      	bne.n	8001e1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f00e f9d5 	bl	80101c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 ffc2 	bl	8009dc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	687e      	ldr	r6, [r7, #4]
 8001e4a:	466d      	mov	r5, sp
 8001e4c:	f106 0410 	add.w	r4, r6, #16
 8001e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e60:	1d33      	adds	r3, r6, #4
 8001e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e64:	6838      	ldr	r0, [r7, #0]
 8001e66:	f007 fed5 	bl	8009c14 <USB_CoreInit>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0d7      	b.n	800202c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f007 ffb0 	bl	8009de8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e04a      	b.n	8001f24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	333d      	adds	r3, #61	; 0x3d
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	333c      	adds	r3, #60	; 0x3c
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	b298      	uxth	r0, r3
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3344      	adds	r3, #68	; 0x44
 8001eca:	4602      	mov	r2, r0
 8001ecc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	3340      	adds	r3, #64	; 0x40
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	3348      	adds	r3, #72	; 0x48
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	334c      	adds	r3, #76	; 0x4c
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3354      	adds	r3, #84	; 0x54
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	3301      	adds	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d3af      	bcc.n	8001e8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e044      	b.n	8001fbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d3b5      	bcc.n	8001f34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	687e      	ldr	r6, [r7, #4]
 8001fd0:	466d      	mov	r5, sp
 8001fd2:	f106 0410 	add.w	r4, r6, #16
 8001fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe6:	1d33      	adds	r3, r6, #4
 8001fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fea:	6838      	ldr	r0, [r7, #0]
 8001fec:	f007 ff48 	bl	8009e80 <USB_DevInit>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e014      	b.n	800202c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f001 f882 	bl	8003124 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f008 ffd0 	bl	800afca <USB_DevDisconnect>

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002034 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_PCD_Start+0x1c>
 800204c:	2302      	movs	r3, #2
 800204e:	e01c      	b.n	800208a <HAL_PCD_Start+0x56>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f007 fe97 	bl	8009da4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f008 ff84 	bl	800af88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b08d      	sub	sp, #52	; 0x34
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f009 f842 	bl	800b132 <USB_GetMode>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f040 847e 	bne.w	80029b2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f008 ffa6 	bl	800b00c <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8474 	beq.w	80029b0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f008 ff93 	bl	800b00c <USB_ReadInterrupts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d107      	bne.n	8002100 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f002 0202 	and.w	r2, r2, #2
 80020fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f008 ff81 	bl	800b00c <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b10      	cmp	r3, #16
 8002112:	d161      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0210 	bic.w	r2, r2, #16
 8002122:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	0c5b      	lsrs	r3, r3, #17
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	2b02      	cmp	r3, #2
 800214e:	d124      	bne.n	800219a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d035      	beq.n	80021c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	6a38      	ldr	r0, [r7, #32]
 8002170:	f008 fdb8 	bl	800ace4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002180:	441a      	add	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002192:	441a      	add	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	621a      	str	r2, [r3, #32]
 8002198:	e016      	b.n	80021c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	0c5b      	lsrs	r3, r3, #17
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d110      	bne.n	80021c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021ac:	2208      	movs	r2, #8
 80021ae:	4619      	mov	r1, r3
 80021b0:	6a38      	ldr	r0, [r7, #32]
 80021b2:	f008 fd97 	bl	800ace4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c2:	441a      	add	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0210 	orr.w	r2, r2, #16
 80021d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f008 ff15 	bl	800b00c <USB_ReadInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021ec:	f040 80a7 	bne.w	800233e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f008 ff1a 	bl	800b032 <USB_ReadDevAllOutEpInterrupt>
 80021fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002200:	e099      	b.n	8002336 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 808e 	beq.w	800232a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f008 ff3e 	bl	800b09a <USB_ReadDevOutEPInterrupt>
 800221e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002236:	461a      	mov	r2, r3
 8002238:	2301      	movs	r3, #1
 800223a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800223c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fe96 	bl	8002f70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225a:	461a      	mov	r2, r3
 800225c:	2308      	movs	r3, #8
 800225e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fed2 	bl	800300c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227e:	461a      	mov	r2, r3
 8002280:	2310      	movs	r3, #16
 8002282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d030      	beq.n	80022f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b80      	cmp	r3, #128	; 0x80
 8002298:	d109      	bne.n	80022ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	78db      	ldrb	r3, [r3, #3]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d108      	bne.n	80022de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2200      	movs	r2, #0
 80022d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f00e f8b9 	bl	8010450 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	461a      	mov	r2, r3
 80022ec:	2302      	movs	r3, #2
 80022ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002306:	461a      	mov	r2, r3
 8002308:	2320      	movs	r3, #32
 800230a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	461a      	mov	r2, r3
 8002324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002328:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	3301      	adds	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	f47f af62 	bne.w	8002202 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f008 fe62 	bl	800b00c <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002352:	f040 80a4 	bne.w	800249e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f008 fe83 	bl	800b066 <USB_ReadDevAllInEpInterrupt>
 8002360:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002366:	e096      	b.n	8002496 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 808b 	beq.w	800248a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f008 fea9 	bl	800b0d6 <USB_ReadDevInEPInterrupt>
 8002384:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	2201      	movs	r2, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69f9      	ldr	r1, [r7, #28]
 80023ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023b0:	4013      	ands	r3, r2
 80023b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c0:	461a      	mov	r2, r3
 80023c2:	2301      	movs	r3, #1
 80023c4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f00d ffaa 	bl	8010326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e8:	461a      	mov	r2, r3
 80023ea:	2308      	movs	r3, #8
 80023ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002404:	461a      	mov	r2, r3
 8002406:	2310      	movs	r3, #16
 8002408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002420:	461a      	mov	r2, r3
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002432:	6a38      	ldr	r0, [r7, #32]
 8002434:	f007 fe70 	bl	800a118 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	3338      	adds	r3, #56	; 0x38
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	78db      	ldrb	r3, [r3, #3]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2200      	movs	r2, #0
 8002458:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f00e f807 	bl	8010474 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002472:	461a      	mov	r2, r3
 8002474:	2302      	movs	r3, #2
 8002476:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fcea 	bl	8002e5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	3301      	adds	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f af65 	bne.w	8002368 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f008 fdb2 	bl	800b00c <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024b2:	d122      	bne.n	80024fa <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024da:	2100      	movs	r1, #0
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f00e fa39 	bl	8010954 <HAL_PCDEx_LPM_Callback>
 80024e2:	e002      	b.n	80024ea <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f00d ff8b 	bl	8010400 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80024f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f008 fd84 	bl	800b00c <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800250a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800250e:	d112      	bne.n	8002536 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d102      	bne.n	8002526 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f00d ff47 	bl	80103b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002534:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f008 fd66 	bl	800b00c <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254a:	d121      	bne.n	8002590 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800255a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d111      	bne.n	800258a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002580:	2101      	movs	r1, #1
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f00e f9e6 	bl	8010954 <HAL_PCDEx_LPM_Callback>
 8002588:	e002      	b.n	8002590 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f00d ff12 	bl	80103b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f008 fd39 	bl	800b00c <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	f040 80b5 	bne.w	8002712 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2110      	movs	r1, #16
 80025c2:	4618      	mov	r0, r3
 80025c4:	f007 fda8 	bl	800a118 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025cc:	e046      	b.n	800265c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025da:	461a      	mov	r2, r3
 80025dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f2:	0151      	lsls	r1, r2, #5
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	440a      	add	r2, r1
 80025f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002600:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260e:	461a      	mov	r2, r3
 8002610:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002614:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002626:	0151      	lsls	r1, r2, #5
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	440a      	add	r2, r1
 800262c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002630:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002634:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	440a      	add	r2, r1
 800264c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002650:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002654:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	3301      	adds	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002662:	429a      	cmp	r2, r3
 8002664:	d3b3      	bcc.n	80025ce <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002674:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002678:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002692:	f043 030b 	orr.w	r3, r3, #11
 8002696:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a8:	f043 030b 	orr.w	r3, r3, #11
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	e015      	b.n	80026dc <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d6:	f043 030b 	orr.w	r3, r3, #11
 80026da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f008 fd49 	bl	800b194 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f008 fc78 	bl	800b00c <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002726:	d124      	bne.n	8002772 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f008 fd0e 	bl	800b14e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f007 fd6b 	bl	800a212 <USB_GetDevSpeed>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681c      	ldr	r4, [r3, #0]
 8002748:	f001 fbc4 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 800274c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4620      	mov	r0, r4
 8002758:	f007 fa88 	bl	8009c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f00d fe0a 	bl	8010376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f008 fc48 	bl	800b00c <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d10a      	bne.n	800279c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f00d fde7 	bl	801035a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f002 0208 	and.w	r2, r2, #8
 800279a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f008 fc33 	bl	800b00c <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d122      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027bc:	2301      	movs	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	e014      	b.n	80027ec <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb0b 	bl	8002dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3301      	adds	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3e5      	bcc.n	80027c2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f008 fc06 	bl	800b00c <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280a:	d13b      	bne.n	8002884 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800280c:	2301      	movs	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
 8002810:	e02b      	b.n	800286a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3340      	adds	r3, #64	; 0x40
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d115      	bne.n	8002864 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002838:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	da12      	bge.n	8002864 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	333f      	adds	r3, #63	; 0x3f
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 facc 	bl	8002dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3301      	adds	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	429a      	cmp	r2, r3
 8002872:	d3ce      	bcc.n	8002812 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f008 fbbf 	bl	800b00c <USB_ReadInterrupts>
 800288e:	4603      	mov	r3, r0
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002898:	d155      	bne.n	8002946 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800289a:	2301      	movs	r3, #1
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	e045      	b.n	800292c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d12e      	bne.n	8002926 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da2b      	bge.n	8002926 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028de:	429a      	cmp	r2, r3
 80028e0:	d121      	bne.n	8002926 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6053      	str	r3, [r2, #4]
            break;
 8002924:	e007      	b.n	8002936 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	3301      	adds	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002932:	429a      	cmp	r2, r3
 8002934:	d3b4      	bcc.n	80028a0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f008 fb5e 	bl	800b00c <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d10a      	bne.n	8002972 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f00d fd9b 	bl	8010498 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f008 fb48 	bl	800b00c <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d115      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f00d fd8b 	bl	80104b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	e000      	b.n	80029b2 <HAL_PCD_IRQHandler+0x920>
      return;
 80029b0:	bf00      	nop
    }
  }
}
 80029b2:	3734      	adds	r7, #52	; 0x34
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}

080029b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_PCD_SetAddress+0x1a>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e013      	b.n	80029fa <HAL_PCD_SetAddress+0x42>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f008 faa6 	bl	800af3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	4608      	mov	r0, r1
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	70fb      	strb	r3, [r7, #3]
 8002a14:	460b      	mov	r3, r1
 8002a16:	803b      	strh	r3, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da0f      	bge.n	8002a48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	f003 020f 	and.w	r2, r3, #15
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3338      	adds	r3, #56	; 0x38
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	705a      	strb	r2, [r3, #1]
 8002a46:	e00f      	b.n	8002a68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 020f 	and.w	r2, r3, #15
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a74:	883a      	ldrh	r2, [r7, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	78ba      	ldrb	r2, [r7, #2]
 8002a7e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a92:	78bb      	ldrb	r3, [r7, #2]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d102      	bne.n	8002a9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_PCD_EP_Open+0xaa>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e00e      	b.n	8002aca <HAL_PCD_EP_Open+0xc8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f007 fbc8 	bl	800a250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da0f      	bge.n	8002b06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	3338      	adds	r3, #56	; 0x38
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	705a      	strb	r2, [r3, #1]
 8002b04:	e00f      	b.n	8002b26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_PCD_EP_Close+0x6e>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e00e      	b.n	8002b5e <HAL_PCD_EP_Close+0x8c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f007 fc06 	bl	800a360 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	460b      	mov	r3, r1
 8002b74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	f003 020f 	and.w	r2, r3, #15
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6979      	ldr	r1, [r7, #20]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f007 fe87 	bl	800a8d8 <USB_EP0StartXfer>
 8002bca:	e005      	b.n	8002bd8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f007 fca0 	bl	800a518 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 020f 	and.w	r2, r3, #15
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c04:	681b      	ldr	r3, [r3, #0]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3338      	adds	r3, #56	; 0x38
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6979      	ldr	r1, [r7, #20]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f007 fe32 	bl	800a8d8 <USB_EP0StartXfer>
 8002c74:	e005      	b.n	8002c82 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f007 fc4b 	bl	800a518 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e04e      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da0f      	bge.n	8002cd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	3338      	adds	r3, #56	; 0x38
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	705a      	strb	r2, [r3, #1]
 8002cd0:	e00d      	b.n	8002cee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_EP_SetStall+0x82>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e01c      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xbc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f008 f839 	bl	800ad94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d36:	4619      	mov	r1, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f008 fa2b 	bl	800b194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 020f 	and.w	r2, r3, #15
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d901      	bls.n	8002d6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e042      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da0f      	bge.n	8002d96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	705a      	strb	r2, [r3, #1]
 8002d94:	e00f      	b.n	8002db6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_EP_ClrStall+0x86>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e00e      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f008 f843 	bl	800ae70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da0c      	bge.n	8002e2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3338      	adds	r3, #56	; 0x38
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	3304      	adds	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e00c      	b.n	8002e44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 fe66 	bl	800ab1c <USB_EPStopXfer>
 8002e50:	4603      	mov	r3, r0
 8002e52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e54:	7afb      	ldrb	r3, [r7, #11]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	3338      	adds	r3, #56	; 0x38
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	3304      	adds	r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d901      	bls.n	8002e96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e067      	b.n	8002f66 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d902      	bls.n	8002eb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eba:	e026      	b.n	8002f0a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d902      	bls.n	8002ed8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3303      	adds	r3, #3
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6919      	ldr	r1, [r3, #16]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f007 febf 	bl	800ac70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	441a      	add	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d809      	bhi.n	8002f34 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d203      	bcs.n	8002f34 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1c3      	bne.n	8002ebc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d811      	bhi.n	8002f64 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	2201      	movs	r2, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	6939      	ldr	r1, [r7, #16]
 8002f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f60:	4013      	ands	r3, r2
 8002f62:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	333c      	adds	r3, #60	; 0x3c
 8002f88:	3304      	adds	r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <PCD_EP_OutXfrComplete_int+0x98>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d124      	bne.n	8002ff0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	6093      	str	r3, [r2, #8]
 8002fc4:	e01a      	b.n	8002ffc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2320      	movs	r3, #32
 8002fe0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f00d f981 	bl	80102f0 <HAL_PCD_DataOutStageCallback>
 8002fee:	e005      	b.n	8002ffc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f00d f97a 	bl	80102f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	4f54310a 	.word	0x4f54310a

0800300c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	333c      	adds	r3, #60	; 0x3c
 8003024:	3304      	adds	r3, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <PCD_EP_OutSetupPacket_int+0x64>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d90e      	bls.n	8003060 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f00d f933 	bl	80102cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	4f54300a 	.word	0x4f54300a

08003074 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	70fb      	strb	r3, [r7, #3]
 8003080:	4613      	mov	r3, r2
 8003082:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003092:	883b      	ldrh	r3, [r7, #0]
 8003094:	0419      	lsls	r1, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	430a      	orrs	r2, r1
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
 80030a0:	e028      	b.n	80030f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4413      	add	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e00d      	b.n	80030d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	3340      	adds	r3, #64	; 0x40
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	4413      	add	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	3301      	adds	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3ec      	bcc.n	80030b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030dc:	883b      	ldrh	r3, [r7, #0]
 80030de:	0418      	lsls	r0, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	4302      	orrs	r2, r0
 80030ec:	3340      	adds	r3, #64	; 0x40
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	f043 0303 	orr.w	r3, r3, #3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317c:	d102      	bne.n	8003184 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800317e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003182:	e00b      	b.n	800319c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d102      	bne.n	800319a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003198:	e000      	b.n	800319c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800319a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40007000 	.word	0x40007000

080031ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d141      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ba:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d131      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	4a46      	ldr	r2, [pc, #280]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2232      	movs	r2, #50	; 0x32
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	4a3f      	ldr	r2, [pc, #252]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9b      	lsrs	r3, r3, #18
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fe:	e002      	b.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b01      	subs	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d102      	bne.n	800321a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f2      	bne.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d158      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e057      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800323c:	e04d      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d141      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d131      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325a:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2232      	movs	r2, #50	; 0x32
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328a:	e002      	b.n	8003292 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d102      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f2      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d112      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e011      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032c8:	e007      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40007000 	.word	0x40007000
 80032ec:	20000000 	.word	0x20000000
 80032f0:	431bde83 	.word	0x431bde83

080032f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_PWREx_EnableVddUSB+0x1c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_PWREx_EnableVddUSB+0x1c>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003302:	6053      	str	r3, [r2, #4]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f000 bc08 	b.w	8003b38 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003328:	4b96      	ldr	r3, [pc, #600]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003332:	4b94      	ldr	r3, [pc, #592]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80e4 	beq.w	8003512 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_RCC_OscConfig+0x4c>
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	f040 808b 	bne.w	800346e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b01      	cmp	r3, #1
 800335c:	f040 8087 	bne.w	800346e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003360:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x64>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e3df      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1a      	ldr	r2, [r3, #32]
 800337c:	4b81      	ldr	r3, [pc, #516]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HAL_RCC_OscConfig+0x7e>
 8003388:	4b7e      	ldr	r3, [pc, #504]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	e005      	b.n	800339e <HAL_RCC_OscConfig+0x8a>
 8003392:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339e:	4293      	cmp	r3, r2
 80033a0:	d223      	bcs.n	80033ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fdf8 	bl	8003f9c <RCC_SetFlashLatencyFromMSIRange>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e3c0      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b6:	4b73      	ldr	r3, [pc, #460]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a72      	ldr	r2, [pc, #456]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b70      	ldr	r3, [pc, #448]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	496d      	ldr	r1, [pc, #436]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d4:	4b6b      	ldr	r3, [pc, #428]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4968      	ldr	r1, [pc, #416]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
 80033e8:	e025      	b.n	8003436 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ea:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4960      	ldr	r1, [pc, #384]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003408:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	495b      	ldr	r1, [pc, #364]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fdb8 	bl	8003f9c <RCC_SetFlashLatencyFromMSIRange>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e380      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003436:	f000 fcc1 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b51      	ldr	r3, [pc, #324]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	4950      	ldr	r1, [pc, #320]	; (8003588 <HAL_RCC_OscConfig+0x274>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a4e      	ldr	r2, [pc, #312]	; (800358c <HAL_RCC_OscConfig+0x278>)
 8003454:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003456:	4b4e      	ldr	r3, [pc, #312]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe f832 	bl	80014c4 <HAL_InitTick>
 8003460:	4603      	mov	r3, r0
 8003462:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d052      	beq.n	8003510 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	e364      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d032      	beq.n	80034dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003476:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a42      	ldr	r2, [pc, #264]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003482:	f7fe f86f 	bl	8001564 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800348a:	f7fe f86b 	bl	8001564 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e34d      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a35      	ldr	r2, [pc, #212]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034ae:	f043 0308 	orr.w	r3, r3, #8
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4930      	ldr	r1, [pc, #192]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c6:	4b2f      	ldr	r3, [pc, #188]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	492b      	ldr	r1, [pc, #172]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
 80034da:	e01a      	b.n	8003512 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a28      	ldr	r2, [pc, #160]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034e8:	f7fe f83c 	bl	8001564 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f0:	f7fe f838 	bl	8001564 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e31a      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x1dc>
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003510:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d073      	beq.n	8003606 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d005      	beq.n	8003530 <HAL_RCC_OscConfig+0x21c>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d10e      	bne.n	8003548 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d10b      	bne.n	8003548 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d063      	beq.n	8003604 <HAL_RCC_OscConfig+0x2f0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d15f      	bne.n	8003604 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e2f7      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x24c>
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e025      	b.n	80035ac <HAL_RCC_OscConfig+0x298>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003568:	d114      	bne.n	8003594 <HAL_RCC_OscConfig+0x280>
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a02      	ldr	r2, [pc, #8]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e013      	b.n	80035ac <HAL_RCC_OscConfig+0x298>
 8003584:	40021000 	.word	0x40021000
 8003588:	08011b28 	.word	0x08011b28
 800358c:	20000000 	.word	0x20000000
 8003590:	20000004 	.word	0x20000004
 8003594:	4ba0      	ldr	r3, [pc, #640]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a9f      	ldr	r2, [pc, #636]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b9d      	ldr	r3, [pc, #628]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a9c      	ldr	r2, [pc, #624]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd ffd6 	bl	8001564 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd ffd2 	bl	8001564 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e2b4      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ce:	4b92      	ldr	r3, [pc, #584]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x2a8>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd ffc2 	bl	8001564 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd ffbe 	bl	8001564 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e2a0      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f6:	4b88      	ldr	r3, [pc, #544]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2d0>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d060      	beq.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x310>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d119      	bne.n	8003652 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d116      	bne.n	8003652 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	4b7c      	ldr	r3, [pc, #496]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x328>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e27d      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b76      	ldr	r3, [pc, #472]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	4973      	ldr	r1, [pc, #460]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003650:	e040      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d023      	beq.n	80036a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365a:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd ff7d 	bl	8001564 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd ff79 	bl	8001564 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e25b      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003680:	4b65      	ldr	r3, [pc, #404]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b62      	ldr	r3, [pc, #392]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	495f      	ldr	r1, [pc, #380]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
 80036a0:	e018      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5c      	ldr	r2, [pc, #368]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd ff59 	bl	8001564 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fd ff55 	bl	8001564 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e237      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c8:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03c      	beq.n	800375a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01c      	beq.n	8003722 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e8:	4b4b      	ldr	r3, [pc, #300]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80036ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ee:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fd ff34 	bl	8001564 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003700:	f7fd ff30 	bl	8001564 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e212      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <HAL_RCC_OscConfig+0x3ec>
 8003720:	e01b      	b.n	800375a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003728:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fd ff17 	bl	8001564 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373a:	f7fd ff13 	bl	8001564 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1f5      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ef      	bne.n	800373a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80a6 	beq.w	80038b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	6593      	str	r3, [r2, #88]	; 0x58
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003790:	2301      	movs	r3, #1
 8003792:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <HAL_RCC_OscConfig+0x508>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d118      	bne.n	80037d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a0:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_RCC_OscConfig+0x508>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	; (800381c <HAL_RCC_OscConfig+0x508>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ac:	f7fd feda 	bl	8001564 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b4:	f7fd fed6 	bl	8001564 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1b8      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_RCC_OscConfig+0x508>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0x4d8>
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ea:	e029      	b.n	8003840 <HAL_RCC_OscConfig+0x52c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d115      	bne.n	8003820 <HAL_RCC_OscConfig+0x50c>
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	4a07      	ldr	r2, [pc, #28]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	4a03      	ldr	r2, [pc, #12]	; (8003818 <HAL_RCC_OscConfig+0x504>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x52c>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
 8003820:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	4a9c      	ldr	r2, [pc, #624]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003830:	4b99      	ldr	r3, [pc, #612]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	4a98      	ldr	r2, [pc, #608]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fe8c 	bl	8001564 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fd fe88 	bl	8001564 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e168      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	4b8c      	ldr	r3, [pc, #560]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ed      	beq.n	8003850 <HAL_RCC_OscConfig+0x53c>
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fd fe75 	bl	8001564 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fd fe71 	bl	8001564 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e151      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003894:	4b80      	ldr	r3, [pc, #512]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ed      	bne.n	800387e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a2:	7ffb      	ldrb	r3, [r7, #31]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	4a7a      	ldr	r2, [pc, #488]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d03c      	beq.n	800393a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01c      	beq.n	8003902 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038c8:	4b73      	ldr	r3, [pc, #460]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80038ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ce:	4a72      	ldr	r2, [pc, #456]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fd fe44 	bl	8001564 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e0:	f7fd fe40 	bl	8001564 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e122      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038f2:	4b69      	ldr	r3, [pc, #420]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80038f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ef      	beq.n	80038e0 <HAL_RCC_OscConfig+0x5cc>
 8003900:	e01b      	b.n	800393a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003902:	4b65      	ldr	r3, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003908:	4a63      	ldr	r2, [pc, #396]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fd fe27 	bl	8001564 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800391a:	f7fd fe23 	bl	8001564 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e105      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800392c:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 800392e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ef      	bne.n	800391a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80f9 	beq.w	8003b36 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	2b02      	cmp	r3, #2
 800394a:	f040 80cf 	bne.w	8003aec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800394e:	4b52      	ldr	r3, [pc, #328]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	429a      	cmp	r2, r3
 8003960:	d12c      	bne.n	80039bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	3b01      	subs	r3, #1
 800396e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d123      	bne.n	80039bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d11b      	bne.n	80039bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d113      	bne.n	80039bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d109      	bne.n	80039bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d071      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	d068      	beq.n	8003a94 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0ac      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039de:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 80039e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ea:	f7fd fdbb 	bl	8001564 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd fdb7 	bl	8001564 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e099      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x788>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a2a:	0212      	lsls	r2, r2, #8
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a32:	0852      	lsrs	r2, r2, #1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	0552      	lsls	r2, r2, #21
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a3e:	0852      	lsrs	r2, r2, #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0652      	lsls	r2, r2, #25
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a4a:	06d2      	lsls	r2, r2, #27
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4912      	ldr	r1, [pc, #72]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a6c:	f7fd fd7a 	bl	8001564 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fd76 	bl	8001564 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a92:	e050      	b.n	8003b36 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e04f      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d144      	bne.n	8003b36 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ac4:	f7fd fd4e 	bl	8001564 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fd4a 	bl	8001564 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e02c      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x7b8>
 8003aea:	e024      	b.n	8003b36 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d01f      	beq.n	8003b32 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd fd31 	bl	8001564 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fd fd2d 	bl	8001564 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e00f      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4905      	ldr	r1, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x82c>)
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_OscConfig+0x830>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e001      	b.n	8003b36 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	feeefffc 	.word	0xfeeefffc

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e11d      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b90      	ldr	r3, [pc, #576]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d910      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b8d      	ldr	r3, [pc, #564]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 020f 	bic.w	r2, r3, #15
 8003b76:	498b      	ldr	r1, [pc, #556]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b89      	ldr	r3, [pc, #548]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e105      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	4b81      	ldr	r3, [pc, #516]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d908      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b7e      	ldr	r3, [pc, #504]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	497b      	ldr	r1, [pc, #492]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d079      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d11e      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd2:	4b75      	ldr	r3, [pc, #468]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0dc      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003be2:	f000 fa35 	bl	8004050 <RCC_GetSysClockFreqFromPLLSource>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4a70      	ldr	r2, [pc, #448]	; (8003dac <HAL_RCC_ClockConfig+0x264>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d946      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bee:	4b6e      	ldr	r3, [pc, #440]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d140      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfa:	4b6b      	ldr	r3, [pc, #428]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c02:	4a69      	ldr	r2, [pc, #420]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e035      	b.n	8003c7c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c18:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d115      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b9      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c30:	4b5d      	ldr	r3, [pc, #372]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0ad      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0a5      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003c50:	f000 f8b4 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4a55      	ldr	r2, [pc, #340]	; (8003dac <HAL_RCC_ClockConfig+0x264>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d90f      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c5c:	4b52      	ldr	r3, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c68:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c70:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 0203 	bic.w	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4947      	ldr	r1, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8e:	f7fd fc69 	bl	8001564 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c96:	f7fd fc65 	bl	8001564 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e077      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cac:	4b3e      	ldr	r3, [pc, #248]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 020c 	and.w	r2, r3, #12
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d1eb      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cc4:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a37      	ldr	r2, [pc, #220]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d208      	bcs.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	492b      	ldr	r1, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cfe:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d210      	bcs.n	8003d2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 020f 	bic.w	r2, r3, #15
 8003d14:	4923      	ldr	r1, [pc, #140]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e036      	b.n	8003d9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4918      	ldr	r1, [pc, #96]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4910      	ldr	r1, [pc, #64]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d6c:	f000 f826 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	490c      	ldr	r1, [pc, #48]	; (8003db0 <HAL_RCC_ClockConfig+0x268>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x26c>)
 8003d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fd fb97 	bl	80014c4 <HAL_InitTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]

  return status;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40021000 	.word	0x40021000
 8003dac:	04c4b400 	.word	0x04c4b400
 8003db0:	08011b28 	.word	0x08011b28
 8003db4:	20000000 	.word	0x20000000
 8003db8:	20000004 	.word	0x20000004

08003dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dca:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x34>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d121      	bne.n	8003e2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d11e      	bne.n	8003e2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	e005      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	e004      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d134      	bne.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d003      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0xac>
 8003e60:	e005      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e64:	617b      	str	r3, [r7, #20]
      break;
 8003e66:	e005      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e6a:	617b      	str	r3, [r7, #20]
      break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	617b      	str	r3, [r7, #20]
      break;
 8003e72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3301      	adds	r3, #1
 8003e80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	fb03 f202 	mul.w	r2, r3, r2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	0e5b      	lsrs	r3, r3, #25
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	; 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	08011b40 	.word	0x08011b40
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	007a1200 	.word	0x007a1200

08003ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000000 	.word	0x20000000

08003eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ef0:	f7ff fff0 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4904      	ldr	r1, [pc, #16]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08011b38 	.word	0x08011b38

08003f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f1c:	f7ff ffda 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0adb      	lsrs	r3, r3, #11
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	08011b38 	.word	0x08011b38

08003f44 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_EnableCSS+0x1c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_RCC_EnableCSS+0x1c>)
 8003f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f74:	d105      	bne.n	8003f82 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003f76:	f000 f809 	bl	8003f8c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003f7a:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f80:	621a      	str	r2, [r3, #32]
  }
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fb4:	f7ff f8da 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003fb8:	6178      	str	r0, [r7, #20]
 8003fba:	e014      	b.n	8003fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	4a21      	ldr	r2, [pc, #132]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fd4:	f7ff f8ca 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003fd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	4a1a      	ldr	r2, [pc, #104]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fec:	d10b      	bne.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d913      	bls.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ff8:	d902      	bls.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e00d      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004000:	2301      	movs	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	e00a      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b7f      	cmp	r3, #127	; 0x7f
 800400a:	d902      	bls.n	8004012 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800400c:	2302      	movs	r3, #2
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	e004      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b70      	cmp	r3, #112	; 0x70
 8004016:	d101      	bne.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004018:	2301      	movs	r3, #1
 800401a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 020f 	bic.w	r2, r3, #15
 8004024:	4909      	ldr	r1, [pc, #36]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	429a      	cmp	r2, r3
 8004038:	d001      	beq.n	800403e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	40022000 	.word	0x40022000

08004050 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004056:	4b2d      	ldr	r3, [pc, #180]	; (800410c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d00b      	beq.n	800407e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d825      	bhi.n	80040b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d008      	beq.n	8004084 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11f      	bne.n	80040b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800407a:	613b      	str	r3, [r7, #16]
    break;
 800407c:	e01f      	b.n	80040be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800407e:	4b25      	ldr	r3, [pc, #148]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004080:	613b      	str	r3, [r7, #16]
    break;
 8004082:	e01c      	b.n	80040be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004084:	4b21      	ldr	r3, [pc, #132]	; (800410c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d107      	bne.n	80040a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004090:	4b1e      	ldr	r3, [pc, #120]	; (800410c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e005      	b.n	80040ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80040ac:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b4:	613b      	str	r3, [r7, #16]
    break;
 80040b6:	e002      	b.n	80040be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
    break;
 80040bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	3301      	adds	r3, #1
 80040ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	fb03 f202 	mul.w	r2, r3, r2
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	0e5b      	lsrs	r3, r3, #25
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	3301      	adds	r3, #1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80040fe:	683b      	ldr	r3, [r7, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40021000 	.word	0x40021000
 8004110:	00f42400 	.word	0x00f42400
 8004114:	007a1200 	.word	0x007a1200
 8004118:	08011b40 	.word	0x08011b40

0800411c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004124:	2300      	movs	r3, #0
 8004126:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004128:	2300      	movs	r3, #0
 800412a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004134:	2b00      	cmp	r3, #0
 8004136:	d040      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d02a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d825      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004144:	2b60      	cmp	r3, #96	; 0x60
 8004146:	d026      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004148:	2b60      	cmp	r3, #96	; 0x60
 800414a:	d821      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d006      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d81d      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004158:	2b20      	cmp	r3, #32
 800415a:	d010      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800415c:	e018      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800415e:	4b89      	ldr	r3, [pc, #548]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a88      	ldr	r2, [pc, #544]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800416a:	e015      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fa24 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800417c:	e00c      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3320      	adds	r3, #32
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f001 fb0f 	bl	80057a8 <RCCEx_PLLSAI2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	74fb      	strb	r3, [r7, #19]
      break;
 8004194:	e000      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800419e:	4b79      	ldr	r3, [pc, #484]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ac:	4975      	ldr	r1, [pc, #468]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041b4:	e001      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d047      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d030      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d4:	d82a      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041da:	d02a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e0:	d824      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d008      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ec:	d81e      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d010      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041f8:	e018      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041fa:	4b62      	ldr	r3, [pc, #392]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4a61      	ldr	r2, [pc, #388]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004206:	e015      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f001 f9d6 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004218:	e00c      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3320      	adds	r3, #32
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f001 fac1 	bl	80057a8 <RCCEx_PLLSAI2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800422a:	e003      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	74fb      	strb	r3, [r7, #19]
      break;
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800423a:	4b52      	ldr	r3, [pc, #328]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800423c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	494e      	ldr	r1, [pc, #312]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004250:	e001      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 809f 	beq.w	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	4b41      	ldr	r3, [pc, #260]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	4a40      	ldr	r2, [pc, #256]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6593      	str	r3, [r2, #88]	; 0x58
 800428a:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3a      	ldr	r2, [pc, #232]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a6:	f7fd f95d 	bl	8001564 <HAL_GetTick>
 80042aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ac:	e009      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ae:	f7fd f959 	bl	8001564 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d902      	bls.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	74fb      	strb	r3, [r7, #19]
        break;
 80042c0:	e005      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ef      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d15b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01f      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d019      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042fe:	4b21      	ldr	r3, [pc, #132]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800431e:	4a19      	ldr	r2, [pc, #100]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d016      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fd f918 	bl	8001564 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004336:	e00b      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fd f914 	bl	8001564 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d902      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	74fb      	strb	r3, [r7, #19]
            break;
 800434e:	e006      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ec      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10c      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	74bb      	strb	r3, [r7, #18]
 8004382:	e005      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004390:	7c7b      	ldrb	r3, [r7, #17]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004396:	4ba0      	ldr	r3, [pc, #640]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	4a9f      	ldr	r2, [pc, #636]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ae:	4b9a      	ldr	r3, [pc, #616]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 0203 	bic.w	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	4996      	ldr	r1, [pc, #600]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d0:	4b91      	ldr	r3, [pc, #580]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 020c 	bic.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	498e      	ldr	r1, [pc, #568]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f2:	4b89      	ldr	r3, [pc, #548]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	4985      	ldr	r1, [pc, #532]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004414:	4b80      	ldr	r3, [pc, #512]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004422:	497d      	ldr	r1, [pc, #500]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004436:	4b78      	ldr	r3, [pc, #480]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004444:	4974      	ldr	r1, [pc, #464]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004458:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	496c      	ldr	r1, [pc, #432]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800447a:	4b67      	ldr	r3, [pc, #412]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004488:	4963      	ldr	r1, [pc, #396]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800449c:	4b5e      	ldr	r3, [pc, #376]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044aa:	495b      	ldr	r1, [pc, #364]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	4952      	ldr	r1, [pc, #328]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e0:	4b4d      	ldr	r3, [pc, #308]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ee:	494a      	ldr	r1, [pc, #296]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004502:	4b45      	ldr	r3, [pc, #276]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	4941      	ldr	r1, [pc, #260]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004524:	4b3c      	ldr	r3, [pc, #240]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004532:	4939      	ldr	r1, [pc, #228]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d028      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004554:	4930      	ldr	r1, [pc, #192]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004564:	d106      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004566:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004570:	60d3      	str	r3, [r2, #12]
 8004572:	e011      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800457c:	d10c      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	2101      	movs	r1, #1
 8004584:	4618      	mov	r0, r3
 8004586:	f001 f81b 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d04d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ac:	d108      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045be:	e012      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045c0:	4b15      	ldr	r3, [pc, #84]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045de:	490e      	ldr	r1, [pc, #56]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ee:	d106      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a08      	ldr	r2, [pc, #32]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fa:	60d3      	str	r3, [r2, #12]
 80045fc:	e020      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004606:	d109      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a02      	ldr	r2, [pc, #8]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004612:	60d3      	str	r3, [r2, #12]
 8004614:	e014      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004624:	d10c      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	2101      	movs	r1, #1
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ffc7 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004636:	7cfb      	ldrb	r3, [r7, #19]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d028      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800464c:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465a:	4947      	ldr	r1, [pc, #284]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466a:	d106      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800466c:	4b42      	ldr	r3, [pc, #264]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a41      	ldr	r2, [pc, #260]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004676:	60d3      	str	r3, [r2, #12]
 8004678:	e011      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004682:	d10c      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f000 ff98 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01e      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046aa:	4b33      	ldr	r3, [pc, #204]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	492f      	ldr	r1, [pc, #188]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	2102      	movs	r1, #2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 ff73 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046de:	7cfb      	ldrb	r3, [r7, #19]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046fa:	f023 0204 	bic.w	r2, r3, #4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004704:	491c      	ldr	r1, [pc, #112]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471e:	f023 0218 	bic.w	r2, r3, #24
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	4913      	ldr	r1, [pc, #76]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474c:	490a      	ldr	r1, [pc, #40]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800475e:	d105      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800476c:	7cbb      	ldrb	r3, [r7, #18]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000

0800477c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800478e:	d13e      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004790:	4bb6      	ldr	r3, [pc, #728]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a2:	d028      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047aa:	f200 86f4 	bhi.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b4:	d005      	beq.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047bc:	d00e      	beq.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80047be:	f000 beea 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047c2:	4baa      	ldr	r3, [pc, #680]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f040 86e4 	bne.w	800559a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	61fb      	str	r3, [r7, #28]
      break;
 80047d8:	f000 bedf 	b.w	800559a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80047dc:	4ba3      	ldr	r3, [pc, #652]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	f040 86d9 	bne.w	800559e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80047ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80047f0:	61fb      	str	r3, [r7, #28]
      break;
 80047f2:	f000 bed4 	b.w	800559e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80047f6:	4b9d      	ldr	r3, [pc, #628]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004802:	f040 86ce 	bne.w	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004806:	4b9a      	ldr	r3, [pc, #616]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004808:	61fb      	str	r3, [r7, #28]
      break;
 800480a:	f000 beca 	b.w	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800480e:	4b97      	ldr	r3, [pc, #604]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d036      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d840      	bhi.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d003      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d020      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004830:	e039      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004832:	4b8e      	ldr	r3, [pc, #568]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d116      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800483e:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800484a:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	e005      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004856:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	4a84      	ldr	r2, [pc, #528]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004868:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800486a:	e01f      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
      break;
 8004870:	e01c      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004872:	4b7e      	ldr	r3, [pc, #504]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d102      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004880:	4b7d      	ldr	r3, [pc, #500]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004882:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004884:	e012      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
      break;
 800488a:	e00f      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800488c:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004898:	d102      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800489a:	4b78      	ldr	r3, [pc, #480]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800489c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800489e:	e005      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
      break;
 80048a4:	e002      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
      break;
 80048aa:	bf00      	nop
    }

    switch(PeriphClk)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b2:	f000 8606 	beq.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048bc:	f200 8673 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c6:	f000 8469 	beq.w	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048d0:	f200 8669 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	f000 8531 	beq.w	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e4:	f200 865f 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048ee:	f000 8187 	beq.w	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048f8:	f200 8655 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004902:	f000 80cd 	beq.w	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800490c:	f200 864b 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004916:	f000 8430 	beq.w	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004920:	f200 8641 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492a:	f000 83e4 	beq.w	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004934:	f200 8637 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493e:	f000 80af 	beq.w	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004948:	f200 862d 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004952:	f000 809d 	beq.w	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	f200 8623 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004966:	f000 808b 	beq.w	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004970:	f200 8619 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	f000 8554 	beq.w	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	f200 860f 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498e:	f000 8500 	beq.w	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004998:	f200 8605 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a2:	f000 84a1 	beq.w	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ac:	f200 85fb 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	f000 846c 	beq.w	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	f200 85f3 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d84c      	bhi.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 85ec 	beq.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	2b1f      	cmp	r3, #31
 80049d4:	f200 85e7 	bhi.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004df5 	.word	0x08004df5
 80049e4:	08004e63 	.word	0x08004e63
 80049e8:	080055a7 	.word	0x080055a7
 80049ec:	08004ef7 	.word	0x08004ef7
 80049f0:	080055a7 	.word	0x080055a7
 80049f4:	080055a7 	.word	0x080055a7
 80049f8:	080055a7 	.word	0x080055a7
 80049fc:	08004f6f 	.word	0x08004f6f
 8004a00:	080055a7 	.word	0x080055a7
 8004a04:	080055a7 	.word	0x080055a7
 8004a08:	080055a7 	.word	0x080055a7
 8004a0c:	080055a7 	.word	0x080055a7
 8004a10:	080055a7 	.word	0x080055a7
 8004a14:	080055a7 	.word	0x080055a7
 8004a18:	080055a7 	.word	0x080055a7
 8004a1c:	08004ff3 	.word	0x08004ff3
 8004a20:	080055a7 	.word	0x080055a7
 8004a24:	080055a7 	.word	0x080055a7
 8004a28:	080055a7 	.word	0x080055a7
 8004a2c:	080055a7 	.word	0x080055a7
 8004a30:	080055a7 	.word	0x080055a7
 8004a34:	080055a7 	.word	0x080055a7
 8004a38:	080055a7 	.word	0x080055a7
 8004a3c:	080055a7 	.word	0x080055a7
 8004a40:	080055a7 	.word	0x080055a7
 8004a44:	080055a7 	.word	0x080055a7
 8004a48:	080055a7 	.word	0x080055a7
 8004a4c:	080055a7 	.word	0x080055a7
 8004a50:	080055a7 	.word	0x080055a7
 8004a54:	080055a7 	.word	0x080055a7
 8004a58:	080055a7 	.word	0x080055a7
 8004a5c:	08005075 	.word	0x08005075
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	f000 83e8 	beq.w	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004a68:	f000 bd9d 	b.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	0003d090 	.word	0x0003d090
 8004a74:	08011b40 	.word	0x08011b40
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004a80:	69b9      	ldr	r1, [r7, #24]
 8004a82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004a86:	f000 ff83 	bl	8005990 <RCCEx_GetSAIxPeriphCLKFreq>
 8004a8a:	61f8      	str	r0, [r7, #28]
      break;
 8004a8c:	f000 bd8e 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a96:	f000 ff7b 	bl	8005990 <RCCEx_GetSAIxPeriphCLKFreq>
 8004a9a:	61f8      	str	r0, [r7, #28]
      break;
 8004a9c:	f000 bd86 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004aa0:	4b9a      	ldr	r3, [pc, #616]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004aba:	f200 8092 	bhi.w	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac4:	d029      	beq.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004acc:	f200 8089 	bhi.w	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d07b      	beq.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004adc:	d04a      	beq.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004ade:	e080      	b.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ae0:	4b8a      	ldr	r3, [pc, #552]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d17d      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004aec:	4b87      	ldr	r3, [pc, #540]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004af8:	4b84      	ldr	r3, [pc, #528]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	e005      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004b04:	4b81      	ldr	r3, [pc, #516]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	4a7f      	ldr	r2, [pc, #508]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b16:	61fb      	str	r3, [r7, #28]
          break;
 8004b18:	e066      	b.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004b1a:	4b7c      	ldr	r3, [pc, #496]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b26:	d162      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004b28:	4b78      	ldr	r3, [pc, #480]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b34:	d15b      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b36:	4b75      	ldr	r3, [pc, #468]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b40:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	fb03 f202 	mul.w	r2, r3, r2
 8004b4a:	4b70      	ldr	r3, [pc, #448]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	3301      	adds	r3, #1
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004b5c:	4b6b      	ldr	r3, [pc, #428]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	0d5b      	lsrs	r3, r3, #21
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	61fb      	str	r3, [r7, #28]
          break;
 8004b72:	e03c      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004b74:	4b65      	ldr	r3, [pc, #404]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b80:	d138      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004b82:	4b62      	ldr	r3, [pc, #392]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	d131      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b90:	4b5e      	ldr	r3, [pc, #376]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	fb03 f202 	mul.w	r2, r3, r2
 8004ba4:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	3301      	adds	r3, #1
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004bb6:	4b55      	ldr	r3, [pc, #340]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	0d5b      	lsrs	r3, r3, #21
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	61fb      	str	r3, [r7, #28]
          break;
 8004bcc:	e012      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004bce:	4b4f      	ldr	r3, [pc, #316]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d10e      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8004bdc:	4b4d      	ldr	r3, [pc, #308]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004bde:	61fb      	str	r3, [r7, #28]
          break;
 8004be0:	e00b      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004be2:	bf00      	nop
 8004be4:	f000 bce2 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004be8:	bf00      	nop
 8004bea:	f000 bcdf 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bee:	bf00      	nop
 8004bf0:	f000 bcdc 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bf4:	bf00      	nop
 8004bf6:	f000 bcd9 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bfa:	bf00      	nop
        break;
 8004bfc:	f000 bcd6 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004c00:	4b42      	ldr	r3, [pc, #264]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0e:	d13d      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004c10:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c1c:	f040 84c5 	bne.w	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004c20:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	f040 84bd 	bne.w	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c30:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	fb03 f202 	mul.w	r2, r3, r2
 8004c44:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3301      	adds	r3, #1
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004c56:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	0edb      	lsrs	r3, r3, #27
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004c68:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8004c74:	2311      	movs	r3, #17
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e001      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	61fb      	str	r3, [r7, #28]
      break;
 8004c88:	f000 bc8f 	b.w	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004c8c:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c9e:	d016      	beq.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ca6:	f200 809b 	bhi.w	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb0:	d032      	beq.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb8:	f200 8092 	bhi.w	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8084 	beq.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cca:	d052      	beq.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8004ccc:	e088      	b.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	f040 8084 	bne.w	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004ce8:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	e005      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d06:	61fb      	str	r3, [r7, #28]
          break;
 8004d08:	e06c      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	08011b40 	.word	0x08011b40
 8004d14:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004d18:	4ba5      	ldr	r3, [pc, #660]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d24:	d160      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004d26:	4ba2      	ldr	r3, [pc, #648]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d32:	d159      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004d34:	4b9e      	ldr	r3, [pc, #632]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	fb03 f202 	mul.w	r2, r3, r2
 8004d48:	4b99      	ldr	r3, [pc, #612]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	3301      	adds	r3, #1
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004d5a:	4b95      	ldr	r3, [pc, #596]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	0d5b      	lsrs	r3, r3, #21
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	3301      	adds	r3, #1
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6e:	61fb      	str	r3, [r7, #28]
          break;
 8004d70:	e03a      	b.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004d72:	4b8f      	ldr	r3, [pc, #572]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d7e:	d135      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004d80:	4b8b      	ldr	r3, [pc, #556]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8c:	d12e      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d8e:	4b88      	ldr	r3, [pc, #544]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	fb03 f202 	mul.w	r2, r3, r2
 8004da2:	4b83      	ldr	r3, [pc, #524]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	3301      	adds	r3, #1
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004db4:	4b7e      	ldr	r3, [pc, #504]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	0d5b      	lsrs	r3, r3, #21
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	61fb      	str	r3, [r7, #28]
          break;
 8004dca:	e00f      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004dcc:	4b78      	ldr	r3, [pc, #480]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d10a      	bne.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004dda:	4b76      	ldr	r3, [pc, #472]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004ddc:	61fb      	str	r3, [r7, #28]
          break;
 8004dde:	e007      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004de0:	bf00      	nop
 8004de2:	e3e2      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004de4:	bf00      	nop
 8004de6:	e3e0      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004de8:	bf00      	nop
 8004dea:	e3de      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004dec:	bf00      	nop
 8004dee:	e3dc      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004df0:	bf00      	nop
      break;
 8004df2:	e3da      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004df4:	4b6e      	ldr	r3, [pc, #440]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d827      	bhi.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e25 	.word	0x08004e25
 8004e14:	08004e2d 	.word	0x08004e2d
 8004e18:	08004e41 	.word	0x08004e41
          frequency = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7ff f87c 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8004e20:	61f8      	str	r0, [r7, #28]
          break;
 8004e22:	e01d      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e24:	f7fe ffca 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8004e28:	61f8      	str	r0, [r7, #28]
          break;
 8004e2a:	e019      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e2c:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e38:	d10f      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e3c:	61fb      	str	r3, [r7, #28]
          break;
 8004e3e:	e00c      	b.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e40:	4b5b      	ldr	r3, [pc, #364]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e52:	61fb      	str	r3, [r7, #28]
          break;
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004e56:	bf00      	nop
 8004e58:	e3a8      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e5a:	bf00      	nop
 8004e5c:	e3a6      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e5e:	bf00      	nop
        break;
 8004e60:	e3a4      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004e62:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b0c      	cmp	r3, #12
 8004e72:	d83a      	bhi.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004eb1 	.word	0x08004eb1
 8004e80:	08004eeb 	.word	0x08004eeb
 8004e84:	08004eeb 	.word	0x08004eeb
 8004e88:	08004eeb 	.word	0x08004eeb
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	08004eeb 	.word	0x08004eeb
 8004e94:	08004eeb 	.word	0x08004eeb
 8004e98:	08004eeb 	.word	0x08004eeb
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004eeb 	.word	0x08004eeb
 8004ea4:	08004eeb 	.word	0x08004eeb
 8004ea8:	08004eeb 	.word	0x08004eeb
 8004eac:	08004ed5 	.word	0x08004ed5
          frequency = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7ff f81c 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8004eb4:	61f8      	str	r0, [r7, #28]
          break;
 8004eb6:	e01d      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004eb8:	f7fe ff80 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8004ebc:	61f8      	str	r0, [r7, #28]
          break;
 8004ebe:	e019      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ecc:	d10f      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004ece:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ed0:	61fb      	str	r3, [r7, #28]
          break;
 8004ed2:	e00c      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ed4:	4b36      	ldr	r3, [pc, #216]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee6:	61fb      	str	r3, [r7, #28]
          break;
 8004ee8:	e003      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004eea:	bf00      	nop
 8004eec:	e35e      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004eee:	bf00      	nop
 8004ef0:	e35c      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004ef2:	bf00      	nop
        break;
 8004ef4:	e35a      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004ef6:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b30      	cmp	r3, #48	; 0x30
 8004f06:	d021      	beq.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b30      	cmp	r3, #48	; 0x30
 8004f0c:	d829      	bhi.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d011      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d823      	bhi.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d004      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8004f26:	e01c      	b.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7fe ffe0 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8004f2c:	61f8      	str	r0, [r7, #28]
          break;
 8004f2e:	e01d      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f30:	f7fe ff44 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8004f34:	61f8      	str	r0, [r7, #28]
          break;
 8004f36:	e019      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f44:	d10f      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8004f46:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f48:	61fb      	str	r3, [r7, #28]
          break;
 8004f4a:	e00c      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d107      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5e:	61fb      	str	r3, [r7, #28]
          break;
 8004f60:	e003      	b.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004f62:	bf00      	nop
 8004f64:	e322      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f66:	bf00      	nop
 8004f68:	e320      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f6a:	bf00      	nop
        break;
 8004f6c:	e31e      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004f6e:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2bc0      	cmp	r3, #192	; 0xc0
 8004f7e:	d027      	beq.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2bc0      	cmp	r3, #192	; 0xc0
 8004f84:	d82f      	bhi.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d017      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	d829      	bhi.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d004      	beq.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8004f9e:	e022      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe ffa4 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8004fa4:	61f8      	str	r0, [r7, #28]
          break;
 8004fa6:	e023      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fa8:	f7fe ff08 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8004fac:	61f8      	str	r0, [r7, #28]
          break;
 8004fae:	e01f      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	02dc6c00 	.word	0x02dc6c00
 8004fb8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fbc:	4b9b      	ldr	r3, [pc, #620]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc8:	d10f      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8004fca:	4b99      	ldr	r3, [pc, #612]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004fcc:	61fb      	str	r3, [r7, #28]
          break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fd0:	4b96      	ldr	r3, [pc, #600]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d107      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	61fb      	str	r3, [r7, #28]
          break;
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004fe6:	bf00      	nop
 8004fe8:	e2e0      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004fea:	bf00      	nop
 8004fec:	e2de      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004fee:	bf00      	nop
        break;
 8004ff0:	e2dc      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004ff2:	4b8e      	ldr	r3, [pc, #568]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005004:	d025      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500c:	d82c      	bhi.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005014:	d013      	beq.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800501c:	d824      	bhi.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502a:	d004      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800502c:	e01c      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800502e:	f7fe ff5d 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005032:	61f8      	str	r0, [r7, #28]
          break;
 8005034:	e01d      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005036:	f7fe fec1 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 800503a:	61f8      	str	r0, [r7, #28]
          break;
 800503c:	e019      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800503e:	4b7b      	ldr	r3, [pc, #492]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504a:	d10f      	bne.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800504c:	4b78      	ldr	r3, [pc, #480]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800504e:	61fb      	str	r3, [r7, #28]
          break;
 8005050:	e00c      	b.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005052:	4b76      	ldr	r3, [pc, #472]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b02      	cmp	r3, #2
 800505e:	d107      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005064:	61fb      	str	r3, [r7, #28]
          break;
 8005066:	e003      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005068:	bf00      	nop
 800506a:	e29f      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800506c:	bf00      	nop
 800506e:	e29d      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005070:	bf00      	nop
        break;
 8005072:	e29b      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005074:	4b6d      	ldr	r3, [pc, #436]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005086:	d025      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508e:	d82c      	bhi.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005096:	d013      	beq.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509e:	d824      	bhi.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d004      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80050ae:	e01c      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050b0:	f7fe ff1c 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 80050b4:	61f8      	str	r0, [r7, #28]
          break;
 80050b6:	e01d      	b.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80050b8:	f7fe fe80 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 80050bc:	61f8      	str	r0, [r7, #28]
          break;
 80050be:	e019      	b.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050c0:	4b5a      	ldr	r3, [pc, #360]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d10f      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80050ce:	4b58      	ldr	r3, [pc, #352]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80050d0:	61fb      	str	r3, [r7, #28]
          break;
 80050d2:	e00c      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050d4:	4b55      	ldr	r3, [pc, #340]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d107      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	61fb      	str	r3, [r7, #28]
          break;
 80050e8:	e003      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80050ea:	bf00      	nop
 80050ec:	e25e      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050ee:	bf00      	nop
 80050f0:	e25c      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050f2:	bf00      	nop
        break;
 80050f4:	e25a      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80050f6:	4b4d      	ldr	r3, [pc, #308]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005108:	d007      	beq.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005110:	d12f      	bne.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005112:	f7fe fe53 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005116:	61f8      	str	r0, [r7, #28]
          break;
 8005118:	e02e      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800511a:	4b44      	ldr	r3, [pc, #272]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005126:	d126      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005128:	4b40      	ldr	r3, [pc, #256]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005134:	4b3d      	ldr	r3, [pc, #244]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	fb03 f202 	mul.w	r2, r3, r2
 8005148:	4b38      	ldr	r3, [pc, #224]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	3301      	adds	r3, #1
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800515a:	4b34      	ldr	r3, [pc, #208]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	0e5b      	lsrs	r3, r3, #25
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	3301      	adds	r3, #1
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	61fb      	str	r3, [r7, #28]
          break;
 8005170:	e001      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005172:	bf00      	nop
 8005174:	e21a      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005176:	bf00      	nop
        break;
 8005178:	e218      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800517a:	4b2c      	ldr	r3, [pc, #176]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800517c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d103      	bne.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800518c:	f7fe fec4 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8005190:	61f8      	str	r0, [r7, #28]
        break;
 8005192:	e20b      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005194:	f7fe fe12 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005198:	61f8      	str	r0, [r7, #28]
        break;
 800519a:	e207      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800519c:	4b23      	ldr	r3, [pc, #140]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800519e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a2:	f003 0318 	and.w	r3, r3, #24
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d010      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d834      	bhi.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d024      	beq.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80051c0:	e02d      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051c8:	f000 fbe2 	bl	8005990 <RCCEx_GetSAIxPeriphCLKFreq>
 80051cc:	61f8      	str	r0, [r7, #28]
          break;
 80051ce:	e02b      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80051d0:	4b16      	ldr	r3, [pc, #88]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d122      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80051e8:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	4a0c      	ldr	r2, [pc, #48]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005206:	61fb      	str	r3, [r7, #28]
          break;
 8005208:	e00b      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800520a:	4b08      	ldr	r3, [pc, #32]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005216:	d106      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800521a:	61fb      	str	r3, [r7, #28]
          break;
 800521c:	e003      	b.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800521e:	bf00      	nop
 8005220:	e1c4      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005222:	bf00      	nop
 8005224:	e1c2      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005226:	bf00      	nop
        break;
 8005228:	e1c0      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000
 8005230:	00f42400 	.word	0x00f42400
 8005234:	08011b40 	.word	0x08011b40
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005238:	4b96      	ldr	r3, [pc, #600]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524a:	d013      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005252:	d819      	bhi.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005260:	d004      	beq.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005262:	e011      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fe fe42 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005268:	61f8      	str	r0, [r7, #28]
          break;
 800526a:	e010      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800526c:	f7fe fda6 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005270:	61f8      	str	r0, [r7, #28]
          break;
 8005272:	e00c      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005274:	4b87      	ldr	r3, [pc, #540]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005280:	d104      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005282:	4b85      	ldr	r3, [pc, #532]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005284:	61fb      	str	r3, [r7, #28]
          break;
 8005286:	e001      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005288:	bf00      	nop
 800528a:	e18f      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800528c:	bf00      	nop
        break;
 800528e:	e18d      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005290:	4b80      	ldr	r3, [pc, #512]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	d013      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052aa:	d819      	bhi.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b8:	d004      	beq.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80052ba:	e011      	b.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fe fe16 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 80052c0:	61f8      	str	r0, [r7, #28]
          break;
 80052c2:	e010      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80052c4:	f7fe fd7a 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 80052c8:	61f8      	str	r0, [r7, #28]
          break;
 80052ca:	e00c      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052cc:	4b71      	ldr	r3, [pc, #452]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d8:	d104      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80052da:	4b6f      	ldr	r3, [pc, #444]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80052dc:	61fb      	str	r3, [r7, #28]
          break;
 80052de:	e001      	b.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80052e0:	bf00      	nop
 80052e2:	e163      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052e4:	bf00      	nop
        break;
 80052e6:	e161      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80052e8:	4b6a      	ldr	r3, [pc, #424]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052fa:	d013      	beq.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005302:	d819      	bhi.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005310:	d004      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005312:	e011      	b.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fe fdea 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005318:	61f8      	str	r0, [r7, #28]
          break;
 800531a:	e010      	b.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800531c:	f7fe fd4e 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005320:	61f8      	str	r0, [r7, #28]
          break;
 8005322:	e00c      	b.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005324:	4b5b      	ldr	r3, [pc, #364]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005330:	d104      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005332:	4b59      	ldr	r3, [pc, #356]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005334:	61fb      	str	r3, [r7, #28]
          break;
 8005336:	e001      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005338:	bf00      	nop
 800533a:	e137      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800533c:	bf00      	nop
        break;
 800533e:	e135      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005340:	4b54      	ldr	r3, [pc, #336]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d011      	beq.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d818      	bhi.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d004      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005364:	e011      	b.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005366:	f7fe fdc1 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 800536a:	61f8      	str	r0, [r7, #28]
          break;
 800536c:	e010      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800536e:	f7fe fd25 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005372:	61f8      	str	r0, [r7, #28]
          break;
 8005374:	e00c      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005382:	d104      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005384:	4b44      	ldr	r3, [pc, #272]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005386:	61fb      	str	r3, [r7, #28]
          break;
 8005388:	e001      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800538a:	bf00      	nop
 800538c:	e10e      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800538e:	bf00      	nop
        break;
 8005390:	e10c      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005392:	4b40      	ldr	r3, [pc, #256]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053a4:	d02c      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053ac:	d833      	bhi.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053b4:	d01a      	beq.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053bc:	d82b      	bhi.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ca:	d004      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80053cc:	e023      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053ce:	f7fe fd8d 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 80053d2:	61f8      	str	r0, [r7, #28]
          break;
 80053d4:	e026      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80053d6:	4b2f      	ldr	r3, [pc, #188]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80053d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d11a      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80053e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80053e8:	61fb      	str	r3, [r7, #28]
          break;
 80053ea:	e016      	b.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053ec:	4b29      	ldr	r3, [pc, #164]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d111      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80053fa:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80053fc:	61fb      	str	r3, [r7, #28]
          break;
 80053fe:	e00e      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005400:	4b24      	ldr	r3, [pc, #144]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	d109      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800540e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005412:	61fb      	str	r3, [r7, #28]
          break;
 8005414:	e005      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005416:	bf00      	nop
 8005418:	e0c8      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800541a:	bf00      	nop
 800541c:	e0c6      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800541e:	bf00      	nop
 8005420:	e0c4      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005422:	bf00      	nop
        break;
 8005424:	e0c2      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005438:	d030      	beq.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005440:	d837      	bhi.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005448:	d01a      	beq.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005450:	d82f      	bhi.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545e:	d004      	beq.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005460:	e027      	b.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005462:	f7fe fd43 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005466:	61f8      	str	r0, [r7, #28]
          break;
 8005468:	e02a      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800546a:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800546c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d11e      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005478:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800547c:	61fb      	str	r3, [r7, #28]
          break;
 800547e:	e01a      	b.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d115      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800548e:	4b02      	ldr	r3, [pc, #8]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005490:	61fb      	str	r3, [r7, #28]
          break;
 8005492:	e012      	b.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005494:	40021000 	.word	0x40021000
 8005498:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800549c:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d109      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80054aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ae:	61fb      	str	r3, [r7, #28]
          break;
 80054b0:	e005      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80054b2:	bf00      	nop
 80054b4:	e07a      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054b6:	bf00      	nop
 80054b8:	e078      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054ba:	bf00      	nop
 80054bc:	e076      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054be:	bf00      	nop
        break;
 80054c0:	e074      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80054c2:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80054c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054d4:	d02c      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054dc:	d855      	bhi.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ea:	d004      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80054ec:	e04d      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80054ee:	f7fe fc65 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 80054f2:	61f8      	str	r0, [r7, #28]
          break;
 80054f4:	e04e      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80054f6:	4b30      	ldr	r3, [pc, #192]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d145      	bne.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005502:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800550e:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	e005      	b.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800551c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	4a25      	ldr	r2, [pc, #148]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800552c:	61fb      	str	r3, [r7, #28]
          break;
 800552e:	e02e      	b.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005530:	4b21      	ldr	r3, [pc, #132]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800553c:	d129      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800553e:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554a:	d122      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005556:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	fb03 f202 	mul.w	r2, r3, r2
 8005560:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	3301      	adds	r3, #1
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	0d5b      	lsrs	r3, r3, #21
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	3301      	adds	r3, #1
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	61fb      	str	r3, [r7, #28]
          break;
 8005588:	e003      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800558a:	bf00      	nop
 800558c:	e00e      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800558e:	bf00      	nop
 8005590:	e00c      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005592:	bf00      	nop
        break;
 8005594:	e00a      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005596:	bf00      	nop
 8005598:	e008      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800559a:	bf00      	nop
 800559c:	e006      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800559e:	bf00      	nop
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80055aa:	bf00      	nop
    }
  }

  return(frequency);
 80055ac:	69fb      	ldr	r3, [r7, #28]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
 80055bc:	08011b40 	.word	0x08011b40

080055c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ce:	4b72      	ldr	r3, [pc, #456]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055da:	4b6f      	ldr	r3, [pc, #444]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0203 	and.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d103      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
       ||
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d142      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e03f      	b.n	8005678 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d018      	beq.n	8005632 <RCCEx_PLLSAI1_Config+0x72>
 8005600:	2b03      	cmp	r3, #3
 8005602:	d825      	bhi.n	8005650 <RCCEx_PLLSAI1_Config+0x90>
 8005604:	2b01      	cmp	r3, #1
 8005606:	d002      	beq.n	800560e <RCCEx_PLLSAI1_Config+0x4e>
 8005608:	2b02      	cmp	r3, #2
 800560a:	d009      	beq.n	8005620 <RCCEx_PLLSAI1_Config+0x60>
 800560c:	e020      	b.n	8005650 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800560e:	4b62      	ldr	r3, [pc, #392]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11d      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800561e:	e01a      	b.n	8005656 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005620:	4b5d      	ldr	r3, [pc, #372]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d116      	bne.n	800565a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005630:	e013      	b.n	800565a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005632:	4b59      	ldr	r3, [pc, #356]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10f      	bne.n	800565e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800563e:	4b56      	ldr	r3, [pc, #344]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800564e:	e006      	b.n	800565e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e004      	b.n	8005660 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800565e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005666:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f023 0203 	bic.w	r2, r3, #3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4949      	ldr	r1, [pc, #292]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005674:	4313      	orrs	r3, r2
 8005676:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f040 8086 	bne.w	800578c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005680:	4b45      	ldr	r3, [pc, #276]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a44      	ldr	r2, [pc, #272]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800568a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568c:	f7fb ff6a 	bl	8001564 <HAL_GetTick>
 8005690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005692:	e009      	b.n	80056a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005694:	f7fb ff66 	bl	8001564 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d902      	bls.n	80056a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	73fb      	strb	r3, [r7, #15]
        break;
 80056a6:	e005      	b.n	80056b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056a8:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ef      	bne.n	8005694 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d168      	bne.n	800578c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d113      	bne.n	80056e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	4b35      	ldr	r3, [pc, #212]	; (800579c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6892      	ldr	r2, [r2, #8]
 80056cc:	0211      	lsls	r1, r2, #8
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68d2      	ldr	r2, [r2, #12]
 80056d2:	06d2      	lsls	r2, r2, #27
 80056d4:	4311      	orrs	r1, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6852      	ldr	r2, [r2, #4]
 80056da:	3a01      	subs	r2, #1
 80056dc:	0112      	lsls	r2, r2, #4
 80056de:	430a      	orrs	r2, r1
 80056e0:	492d      	ldr	r1, [pc, #180]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]
 80056e6:	e02d      	b.n	8005744 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d115      	bne.n	800571a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ee:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	0211      	lsls	r1, r2, #8
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6912      	ldr	r2, [r2, #16]
 8005700:	0852      	lsrs	r2, r2, #1
 8005702:	3a01      	subs	r2, #1
 8005704:	0552      	lsls	r2, r2, #21
 8005706:	4311      	orrs	r1, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6852      	ldr	r2, [r2, #4]
 800570c:	3a01      	subs	r2, #1
 800570e:	0112      	lsls	r2, r2, #4
 8005710:	430a      	orrs	r2, r1
 8005712:	4921      	ldr	r1, [pc, #132]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
 8005718:	e014      	b.n	8005744 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	4b21      	ldr	r3, [pc, #132]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005720:	4013      	ands	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6892      	ldr	r2, [r2, #8]
 8005726:	0211      	lsls	r1, r2, #8
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6952      	ldr	r2, [r2, #20]
 800572c:	0852      	lsrs	r2, r2, #1
 800572e:	3a01      	subs	r2, #1
 8005730:	0652      	lsls	r2, r2, #25
 8005732:	4311      	orrs	r1, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6852      	ldr	r2, [r2, #4]
 8005738:	3a01      	subs	r2, #1
 800573a:	0112      	lsls	r2, r2, #4
 800573c:	430a      	orrs	r2, r1
 800573e:	4916      	ldr	r1, [pc, #88]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 800574a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7fb ff08 	bl	8001564 <HAL_GetTick>
 8005754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005756:	e009      	b.n	800576c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005758:	f7fb ff04 	bl	8001564 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d902      	bls.n	800576c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	73fb      	strb	r3, [r7, #15]
          break;
 800576a:	e005      	b.n	8005778 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ef      	beq.n	8005758 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	4904      	ldr	r1, [pc, #16]	; (8005798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005788:	4313      	orrs	r3, r2
 800578a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40021000 	.word	0x40021000
 800579c:	07ff800f 	.word	0x07ff800f
 80057a0:	ff9f800f 	.word	0xff9f800f
 80057a4:	f9ff800f 	.word	0xf9ff800f

080057a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057b6:	4b72      	ldr	r3, [pc, #456]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057c2:	4b6f      	ldr	r3, [pc, #444]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0203 	and.w	r2, r3, #3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d103      	bne.n	80057da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
       ||
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d142      	bne.n	8005860 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e03f      	b.n	8005860 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d018      	beq.n	800581a <RCCEx_PLLSAI2_Config+0x72>
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d825      	bhi.n	8005838 <RCCEx_PLLSAI2_Config+0x90>
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d002      	beq.n	80057f6 <RCCEx_PLLSAI2_Config+0x4e>
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d009      	beq.n	8005808 <RCCEx_PLLSAI2_Config+0x60>
 80057f4:	e020      	b.n	8005838 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057f6:	4b62      	ldr	r3, [pc, #392]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11d      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005806:	e01a      	b.n	800583e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005808:	4b5d      	ldr	r3, [pc, #372]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005810:	2b00      	cmp	r3, #0
 8005812:	d116      	bne.n	8005842 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005818:	e013      	b.n	8005842 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800581a:	4b59      	ldr	r3, [pc, #356]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10f      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005826:	4b56      	ldr	r3, [pc, #344]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005836:	e006      	b.n	8005846 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e004      	b.n	8005848 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005846:	bf00      	nop
    }

    if(status == HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d108      	bne.n	8005860 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800584e:	4b4c      	ldr	r3, [pc, #304]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f023 0203 	bic.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4949      	ldr	r1, [pc, #292]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800585c:	4313      	orrs	r3, r2
 800585e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 8086 	bne.w	8005974 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005868:	4b45      	ldr	r3, [pc, #276]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a44      	ldr	r2, [pc, #272]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800586e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005874:	f7fb fe76 	bl	8001564 <HAL_GetTick>
 8005878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800587a:	e009      	b.n	8005890 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800587c:	f7fb fe72 	bl	8001564 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d902      	bls.n	8005890 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	73fb      	strb	r3, [r7, #15]
        break;
 800588e:	e005      	b.n	800589c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005890:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ef      	bne.n	800587c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d168      	bne.n	8005974 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d113      	bne.n	80058d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	4b35      	ldr	r3, [pc, #212]	; (8005984 <RCCEx_PLLSAI2_Config+0x1dc>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6892      	ldr	r2, [r2, #8]
 80058b4:	0211      	lsls	r1, r2, #8
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68d2      	ldr	r2, [r2, #12]
 80058ba:	06d2      	lsls	r2, r2, #27
 80058bc:	4311      	orrs	r1, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6852      	ldr	r2, [r2, #4]
 80058c2:	3a01      	subs	r2, #1
 80058c4:	0112      	lsls	r2, r2, #4
 80058c6:	430a      	orrs	r2, r1
 80058c8:	492d      	ldr	r1, [pc, #180]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	614b      	str	r3, [r1, #20]
 80058ce:	e02d      	b.n	800592c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d115      	bne.n	8005902 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d6:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <RCCEx_PLLSAI2_Config+0x1e0>)
 80058dc:	4013      	ands	r3, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6892      	ldr	r2, [r2, #8]
 80058e2:	0211      	lsls	r1, r2, #8
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6912      	ldr	r2, [r2, #16]
 80058e8:	0852      	lsrs	r2, r2, #1
 80058ea:	3a01      	subs	r2, #1
 80058ec:	0552      	lsls	r2, r2, #21
 80058ee:	4311      	orrs	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6852      	ldr	r2, [r2, #4]
 80058f4:	3a01      	subs	r2, #1
 80058f6:	0112      	lsls	r2, r2, #4
 80058f8:	430a      	orrs	r2, r1
 80058fa:	4921      	ldr	r1, [pc, #132]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	614b      	str	r3, [r1, #20]
 8005900:	e014      	b.n	800592c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005902:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	4b21      	ldr	r3, [pc, #132]	; (800598c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6892      	ldr	r2, [r2, #8]
 800590e:	0211      	lsls	r1, r2, #8
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6952      	ldr	r2, [r2, #20]
 8005914:	0852      	lsrs	r2, r2, #1
 8005916:	3a01      	subs	r2, #1
 8005918:	0652      	lsls	r2, r2, #25
 800591a:	4311      	orrs	r1, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6852      	ldr	r2, [r2, #4]
 8005920:	3a01      	subs	r2, #1
 8005922:	0112      	lsls	r2, r2, #4
 8005924:	430a      	orrs	r2, r1
 8005926:	4916      	ldr	r1, [pc, #88]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005928:	4313      	orrs	r3, r2
 800592a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800592c:	4b14      	ldr	r3, [pc, #80]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a13      	ldr	r2, [pc, #76]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005936:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7fb fe14 	bl	8001564 <HAL_GetTick>
 800593c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800593e:	e009      	b.n	8005954 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005940:	f7fb fe10 	bl	8001564 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d902      	bls.n	8005954 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	73fb      	strb	r3, [r7, #15]
          break;
 8005952:	e005      	b.n	8005960 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ef      	beq.n	8005940 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	4904      	ldr	r1, [pc, #16]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005970:	4313      	orrs	r3, r2
 8005972:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000
 8005984:	07ff800f 	.word	0x07ff800f
 8005988:	ff9f800f 	.word	0xff9f800f
 800598c:	f9ff800f 	.word	0xf9ff800f

08005990 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ac:	d10b      	bne.n	80059c6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80059ae:	4b7e      	ldr	r3, [pc, #504]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80059b8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b60      	cmp	r3, #96	; 0x60
 80059be:	d112      	bne.n	80059e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80059c0:	4b7a      	ldr	r3, [pc, #488]	; (8005bac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	e00f      	b.n	80059e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059cc:	d10b      	bne.n	80059e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80059ce:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059d8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e0:	d101      	bne.n	80059e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80059e2:	4b72      	ldr	r3, [pc, #456]	; (8005bac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80059e4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f040 80d6 	bne.w	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d003      	beq.n	8005a00 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fe:	d13b      	bne.n	8005a78 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005a00:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a0c:	f040 80c4 	bne.w	8005b98 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005a10:	4b65      	ldr	r3, [pc, #404]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80bd 	beq.w	8005b98 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a1e:	4b62      	ldr	r3, [pc, #392]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	3301      	adds	r3, #1
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a32:	4b5d      	ldr	r3, [pc, #372]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005a3e:	4b5a      	ldr	r3, [pc, #360]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	0edb      	lsrs	r3, r3, #27
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005a50:	4b55      	ldr	r3, [pc, #340]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005a5c:	2311      	movs	r3, #17
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e001      	b.n	8005a66 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005a62:	2307      	movs	r3, #7
 8005a64:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	fb03 f202 	mul.w	r2, r3, r2
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005a76:	e08f      	b.n	8005b98 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d13a      	bne.n	8005af4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005a7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8a:	f040 8086 	bne.w	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005a8e:	4b46      	ldr	r3, [pc, #280]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d07f      	beq.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a9a:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	091b      	lsrs	r3, r3, #4
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005aae:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005aba:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	0edb      	lsrs	r3, r3, #27
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005ad8:	2311      	movs	r3, #17
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e001      	b.n	8005ae2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005ade:	2307      	movs	r3, #7
 8005ae0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	fb03 f202 	mul.w	r2, r3, r2
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	e052      	b.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d003      	beq.n	8005b02 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b00:	d109      	bne.n	8005b16 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b02:	4b29      	ldr	r3, [pc, #164]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0e:	d144      	bne.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005b12:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b14:	e041      	b.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d003      	beq.n	8005b24 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b22:	d13a      	bne.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005b24:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b30:	d133      	bne.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d02d      	beq.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	3301      	adds	r3, #1
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	0edb      	lsrs	r3, r3, #27
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005b70:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005b7c:	2311      	movs	r3, #17
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e001      	b.n	8005b86 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005b82:	2307      	movs	r3, #7
 8005b84:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	fb03 f202 	mul.w	r2, r3, r2
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	e000      	b.n	8005b9a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005b98:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3724      	adds	r7, #36	; 0x24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	001fff68 	.word	0x001fff68
 8005bb0:	00f42400 	.word	0x00f42400

08005bb4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e078      	b.n	8005cb8 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d105      	bne.n	8005bde <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fb fa57 	bl	800108c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2203      	movs	r2, #3
 8005be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f86a 	bl	8005cc0 <HAL_SD_InitCard>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e060      	b.n	8005cb8 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fdcd 	bl	800679c <HAL_SD_GetCardStatus>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e055      	b.n	8005cb8 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005c0c:	7e3b      	ldrb	r3, [r7, #24]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005c12:	7e7b      	ldrb	r3, [r7, #25]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10a      	bne.n	8005c36 <HAL_SD_Init+0x82>
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_SD_Init+0x78>
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c34:	e00b      	b.n	8005c4e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d104      	bne.n	8005c48 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c44:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c46:	e002      	b.n	8005c4e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fe83 	bl	8006960 <HAL_SD_ConfigWideBusOperation>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e029      	b.n	8005cb8 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005c64:	f7fb fc7e 	bl	8001564 <HAL_GetTick>
 8005c68:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c6a:	e014      	b.n	8005c96 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005c6c:	f7fb fc7a 	bl	8001564 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7a:	d10c      	bne.n	8005c96 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e010      	b.n	8005cb8 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 ff76 	bl	8006b88 <HAL_SD_GetCardState>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d1e4      	bne.n	8005c6c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3728      	adds	r7, #40	; 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cc0:	b5b0      	push	{r4, r5, r7, lr}
 8005cc2:	b08e      	sub	sp, #56	; 0x38
 8005cc4:	af04      	add	r7, sp, #16
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005cd8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005cdc:	f7fe fd4e 	bl	800477c <HAL_RCCEx_GetPeriphCLKFreq>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e079      	b.n	8005df0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	4a3d      	ldr	r2, [pc, #244]	; (8005df8 <HAL_SD_InitCard+0x138>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d107      	bne.n	8005d28 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0210 	orr.w	r2, r2, #16
 8005d26:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681d      	ldr	r5, [r3, #0]
 8005d2c:	466c      	mov	r4, sp
 8005d2e:	f107 0314 	add.w	r3, r7, #20
 8005d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d3a:	f107 0308 	add.w	r3, r7, #8
 8005d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d40:	4628      	mov	r0, r5
 8005d42:	f003 f981 	bl	8009048 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f003 f9c4 	bl	80090d8 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005d5c:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <HAL_SD_InitCard+0x13c>)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	3301      	adds	r3, #1
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fb fc08 	bl	800157c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 ffeb 	bl	8006d48 <SD_PowerON>
 8005d72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e02e      	b.n	8005df0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 ff18 	bl	8006bc8 <SD_InitCard>
 8005d98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e01b      	b.n	8005df0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f003 fa1f 	bl	8009204 <SDMMC_CmdBlockLength>
 8005dc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00f      	beq.n	8005dee <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a0b      	ldr	r2, [pc, #44]	; (8005e00 <HAL_SD_InitCard+0x140>)
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3728      	adds	r7, #40	; 0x28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bdb0      	pop	{r4, r5, r7, pc}
 8005df8:	014f8b59 	.word	0x014f8b59
 8005dfc:	00012110 	.word	0x00012110
 8005e00:	1fe00fff 	.word	0x1fe00fff

08005e04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b092      	sub	sp, #72	; 0x48
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e12:	f7fb fba7 	bl	8001564 <HAL_GetTick>
 8005e16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d107      	bne.n	8005e36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e170      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	f040 8163 	bne.w	800610a <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	441a      	add	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d907      	bls.n	8005e68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e157      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2200      	movs	r2, #0
 8005e76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d002      	beq.n	8005e86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	025b      	lsls	r3, r3, #9
 8005e84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	025b      	lsls	r3, r3, #9
 8005e90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e92:	2390      	movs	r3, #144	; 0x90
 8005e94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005e96:	2302      	movs	r3, #2
 8005e98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f107 0214 	add.w	r2, r7, #20
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f003 f97d 	bl	80091ac <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d90a      	bls.n	8005ede <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f003 f9db 	bl	8009290 <SDMMC_CmdReadMultiBlock>
 8005eda:	6478      	str	r0, [r7, #68]	; 0x44
 8005edc:	e009      	b.n	8005ef2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eea:	4618      	mov	r0, r3
 8005eec:	f003 f9ad 	bl	800924a <SDMMC_CmdReadSingleBlock>
 8005ef0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a88      	ldr	r2, [pc, #544]	; (8006120 <HAL_SD_ReadBlocks+0x31c>)
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f06:	431a      	orrs	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e0fc      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f22:	e061      	b.n	8005fe8 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d03c      	beq.n	8005fac <HAL_SD_ReadBlocks+0x1a8>
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d039      	beq.n	8005fac <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f3c:	e033      	b.n	8005fa6 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f003 f8aa 	bl	800909c <SDMMC_ReadFIFO>
 8005f48:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	3301      	adds	r3, #1
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	3b01      	subs	r3, #1
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	0c1b      	lsrs	r3, r3, #16
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	3301      	adds	r3, #1
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	3b01      	subs	r3, #1
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	0e1b      	lsrs	r3, r3, #24
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	3301      	adds	r3, #1
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa8:	2b07      	cmp	r3, #7
 8005faa:	d9c8      	bls.n	8005f3e <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005fac:	f7fb fada 	bl	8001564 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d902      	bls.n	8005fc2 <HAL_SD_ReadBlocks+0x1be>
 8005fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d112      	bne.n	8005fe8 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	; (8006120 <HAL_SD_ReadBlocks+0x31c>)
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e097      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d096      	beq.n	8005f24 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d022      	beq.n	800605a <HAL_SD_ReadBlocks+0x256>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d91f      	bls.n	800605a <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	2b03      	cmp	r3, #3
 8006020:	d01b      	beq.n	800605a <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f003 f99c 	bl	8009364 <SDMMC_CmdStopTransfer>
 800602c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800602e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a39      	ldr	r2, [pc, #228]	; (8006120 <HAL_SD_ReadBlocks+0x31c>)
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006042:	431a      	orrs	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e05e      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <HAL_SD_ReadBlocks+0x31c>)
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	f043 0208 	orr.w	r2, r3, #8
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e044      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d012      	beq.n	80060c2 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <HAL_SD_ReadBlocks+0x31c>)
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	f043 0202 	orr.w	r2, r3, #2
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e02a      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a12      	ldr	r2, [pc, #72]	; (8006120 <HAL_SD_ReadBlocks+0x31c>)
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	f043 0220 	orr.w	r2, r3, #32
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e010      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <HAL_SD_ReadBlocks+0x320>)
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e006      	b.n	8006118 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
  }
}
 8006118:	4618      	mov	r0, r3
 800611a:	3748      	adds	r7, #72	; 0x48
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	1fe00fff 	.word	0x1fe00fff
 8006124:	18000f3a 	.word	0x18000f3a

08006128 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b092      	sub	sp, #72	; 0x48
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006136:	f7fb fa15 	bl	8001564 <HAL_GetTick>
 800613a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d107      	bne.n	800615a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e174      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	f040 8167 	bne.w	8006436 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800616e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	441a      	add	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006178:	429a      	cmp	r2, r3
 800617a:	d907      	bls.n	800618c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e15b      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2203      	movs	r2, #3
 8006190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d002      	beq.n	80061aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	025b      	lsls	r3, r3, #9
 80061a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	025b      	lsls	r3, r3, #9
 80061b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061b6:	2390      	movs	r3, #144	; 0x90
 80061b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80061ba:	2300      	movs	r3, #0
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061be:	2300      	movs	r3, #0
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f107 0218 	add.w	r2, r7, #24
 80061ce:	4611      	mov	r1, r2
 80061d0:	4618      	mov	r0, r3
 80061d2:	f002 ffeb 	bl	80091ac <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d90a      	bls.n	8006202 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061f8:	4618      	mov	r0, r3
 80061fa:	f003 f88f 	bl	800931c <SDMMC_CmdWriteMultiBlock>
 80061fe:	6478      	str	r0, [r7, #68]	; 0x44
 8006200:	e009      	b.n	8006216 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2210      	movs	r2, #16
 8006206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800620e:	4618      	mov	r0, r3
 8006210:	f003 f861 	bl	80092d6 <SDMMC_CmdWriteSingleBlock>
 8006214:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a8a      	ldr	r2, [pc, #552]	; (800644c <HAL_SD_WriteBlocks+0x324>)
 8006222:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622a:	431a      	orrs	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e100      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006246:	e065      	b.n	8006314 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d040      	beq.n	80062d8 <HAL_SD_WriteBlocks+0x1b0>
 8006256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d03d      	beq.n	80062d8 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800625c:	2300      	movs	r3, #0
 800625e:	643b      	str	r3, [r7, #64]	; 0x40
 8006260:	e037      	b.n	80062d2 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8006262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	3301      	adds	r3, #1
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800626e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006270:	3b01      	subs	r3, #1
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	021a      	lsls	r2, r3, #8
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	3301      	adds	r3, #1
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006288:	3b01      	subs	r3, #1
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	041a      	lsls	r2, r3, #16
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	3301      	adds	r3, #1
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800629e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a0:	3b01      	subs	r3, #1
 80062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	061a      	lsls	r2, r3, #24
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	3301      	adds	r3, #1
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80062b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b8:	3b01      	subs	r3, #1
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f107 0214 	add.w	r2, r7, #20
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f002 fef5 	bl	80090b6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80062cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ce:	3301      	adds	r3, #1
 80062d0:	643b      	str	r3, [r7, #64]	; 0x40
 80062d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	d9c4      	bls.n	8006262 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80062d8:	f7fb f944 	bl	8001564 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d902      	bls.n	80062ee <HAL_SD_WriteBlocks+0x1c6>
 80062e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d112      	bne.n	8006314 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a56      	ldr	r2, [pc, #344]	; (800644c <HAL_SD_WriteBlocks+0x324>)
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e097      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800631e:	2b00      	cmp	r3, #0
 8006320:	d092      	beq.n	8006248 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006330:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d022      	beq.n	8006386 <HAL_SD_WriteBlocks+0x25e>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d91f      	bls.n	8006386 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	2b03      	cmp	r3, #3
 800634c:	d01b      	beq.n	8006386 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f003 f806 	bl	8009364 <SDMMC_CmdStopTransfer>
 8006358:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800635a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635c:	2b00      	cmp	r3, #0
 800635e:	d012      	beq.n	8006386 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a39      	ldr	r2, [pc, #228]	; (800644c <HAL_SD_WriteBlocks+0x324>)
 8006366:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800636c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636e:	431a      	orrs	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e05e      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d012      	beq.n	80063ba <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2c      	ldr	r2, [pc, #176]	; (800644c <HAL_SD_WriteBlocks+0x324>)
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	f043 0208 	orr.w	r2, r3, #8
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e044      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d012      	beq.n	80063ee <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1f      	ldr	r2, [pc, #124]	; (800644c <HAL_SD_WriteBlocks+0x324>)
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	f043 0202 	orr.w	r2, r3, #2
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e02a      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d012      	beq.n	8006422 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a12      	ldr	r2, [pc, #72]	; (800644c <HAL_SD_WriteBlocks+0x324>)
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	f043 0210 	orr.w	r2, r3, #16
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e010      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <HAL_SD_WriteBlocks+0x328>)
 8006428:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	e006      	b.n	8006444 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
  }
}
 8006444:	4618      	mov	r0, r3
 8006446:	3748      	adds	r7, #72	; 0x48
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	1fe00fff 	.word	0x1fe00fff
 8006450:	18000f3a 	.word	0x18000f3a

08006454 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006462:	0f9b      	lsrs	r3, r3, #30
 8006464:	b2da      	uxtb	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646e:	0e9b      	lsrs	r3, r3, #26
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006480:	0e1b      	lsrs	r3, r3, #24
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	b2da      	uxtb	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	b2da      	uxtb	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b4:	0d1b      	lsrs	r3, r3, #20
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c0:	0c1b      	lsrs	r3, r3, #16
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d2:	0bdb      	lsrs	r3, r3, #15
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e4:	0b9b      	lsrs	r3, r3, #14
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f6:	0b5b      	lsrs	r3, r3, #13
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006508:	0b1b      	lsrs	r3, r3, #12
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	b2da      	uxtb	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2200      	movs	r2, #0
 800651a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d163      	bne.n	80065ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006528:	009a      	lsls	r2, r3, #2
 800652a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800652e:	4013      	ands	r3, r2
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006534:	0f92      	lsrs	r2, r2, #30
 8006536:	431a      	orrs	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006540:	0edb      	lsrs	r3, r3, #27
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	b2da      	uxtb	r2, r3
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006552:	0e1b      	lsrs	r3, r3, #24
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	b2da      	uxtb	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006564:	0d5b      	lsrs	r3, r3, #21
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006576:	0c9b      	lsrs	r3, r3, #18
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006588:	0bdb      	lsrs	r3, r3, #15
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	b2da      	uxtb	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	7e1b      	ldrb	r3, [r3, #24]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	3302      	adds	r3, #2
 80065ac:	2201      	movs	r2, #1
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80065b6:	fb03 f202 	mul.w	r2, r3, r2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	7a1b      	ldrb	r3, [r3, #8]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	2201      	movs	r2, #1
 80065ca:	409a      	lsls	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065d8:	0a52      	lsrs	r2, r2, #9
 80065da:	fb03 f202 	mul.w	r2, r3, r2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e8:	659a      	str	r2, [r3, #88]	; 0x58
 80065ea:	e031      	b.n	8006650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d11d      	bne.n	8006630 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006602:	0c1b      	lsrs	r3, r3, #16
 8006604:	431a      	orrs	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	3301      	adds	r3, #1
 8006610:	029a      	lsls	r2, r3, #10
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006624:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	; 0x58
 800662e:	e00f      	b.n	8006650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a58      	ldr	r2, [pc, #352]	; (8006798 <HAL_SD_GetCardCSD+0x344>)
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e09d      	b.n	800678c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006654:	0b9b      	lsrs	r3, r3, #14
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	b2da      	uxtb	r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006666:	09db      	lsrs	r3, r3, #7
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666e:	b2da      	uxtb	r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667e:	b2da      	uxtb	r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	0fdb      	lsrs	r3, r3, #31
 800668a:	b2da      	uxtb	r2, r3
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006694:	0f5b      	lsrs	r3, r3, #29
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	b2da      	uxtb	r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a6:	0e9b      	lsrs	r3, r3, #26
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b8:	0d9b      	lsrs	r3, r3, #22
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ca:	0d5b      	lsrs	r3, r3, #21
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e6:	0c1b      	lsrs	r3, r3, #16
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	0bdb      	lsrs	r3, r3, #15
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670e:	0b9b      	lsrs	r3, r3, #14
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006722:	0b5b      	lsrs	r3, r3, #13
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006736:	0b1b      	lsrs	r3, r3, #12
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	b2da      	uxtb	r2, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674a:	0a9b      	lsrs	r3, r3, #10
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	b2da      	uxtb	r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	b2da      	uxtb	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	b2db      	uxtb	r3, r3
 8006776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677a:	b2da      	uxtb	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	1fe00fff 	.word	0x1fe00fff

0800679c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b094      	sub	sp, #80	; 0x50
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80067ac:	f107 0308 	add.w	r3, r7, #8
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fbd4 	bl	8006f60 <SD_SendSDStatus>
 80067b8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d011      	beq.n	80067e4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a4f      	ldr	r2, [pc, #316]	; (8006904 <HAL_SD_GetCardStatus+0x168>)
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80067e2:	e070      	b.n	80068c6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	099b      	lsrs	r3, r3, #6
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	b29b      	uxth	r3, r3
 800680a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800680e:	b29a      	uxth	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	0e1b      	lsrs	r3, r3, #24
 8006814:	b29b      	uxth	r3, r3
 8006816:	4313      	orrs	r3, r2
 8006818:	b29a      	uxth	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	061a      	lsls	r2, r3, #24
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800682a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006834:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	0e1b      	lsrs	r3, r3, #24
 800683a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	b2da      	uxtb	r2, r3
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	0d1b      	lsrs	r3, r3, #20
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	b2da      	uxtb	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	b29b      	uxth	r3, r3
 8006868:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800686c:	b29a      	uxth	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	b29b      	uxth	r3, r3
 8006872:	b2db      	uxtb	r3, r3
 8006874:	b29b      	uxth	r3, r3
 8006876:	4313      	orrs	r3, r2
 8006878:	b29a      	uxth	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	0a9b      	lsrs	r3, r3, #10
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006888:	b2da      	uxtb	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	b2da      	uxtb	r2, r3
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	091b      	lsrs	r3, r3, #4
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	0e1b      	lsrs	r3, r3, #24
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068ce:	4618      	mov	r0, r3
 80068d0:	f002 fc98 	bl	8009204 <SDMMC_CmdBlockLength>
 80068d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00d      	beq.n	80068f8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a08      	ldr	r2, [pc, #32]	; (8006904 <HAL_SD_GetCardStatus+0x168>)
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80068f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3750      	adds	r7, #80	; 0x50
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	1fe00fff 	.word	0x1fe00fff

08006908 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006960:	b5b0      	push	{r4, r5, r7, lr}
 8006962:	b090      	sub	sp, #64	; 0x40
 8006964:	af04      	add	r7, sp, #16
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2203      	movs	r2, #3
 8006974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697c:	2b03      	cmp	r3, #3
 800697e:	d02e      	beq.n	80069de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006986:	d106      	bne.n	8006996 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
 8006994:	e029      	b.n	80069ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699c:	d10a      	bne.n	80069b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fbd6 	bl	8007150 <SD_WideBus_Enable>
 80069a4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
 80069b2:	e01a      	b.n	80069ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fc13 	bl	80071e6 <SD_WideBus_Disable>
 80069c0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	639a      	str	r2, [r3, #56]	; 0x38
 80069ce:	e00c      	b.n	80069ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
 80069dc:	e005      	b.n	80069ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a60      	ldr	r2, [pc, #384]	; (8006b78 <HAL_SD_ConfigWideBusOperation+0x218>)
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006a00:	e097      	b.n	8006b32 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006a02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a06:	f7fd feb9 	bl	800477c <HAL_RCCEx_GetPeriphCLKFreq>
 8006a0a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 8086 	beq.w	8006b20 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	4952      	ldr	r1, [pc, #328]	; (8006b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a32:	fba1 1303 	umull	r1, r3, r1, r3
 8006a36:	0e1b      	lsrs	r3, r3, #24
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d303      	bcc.n	8006a44 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	e05a      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d103      	bne.n	8006a56 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	61fb      	str	r3, [r7, #28]
 8006a54:	e051      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5e:	d126      	bne.n	8006aae <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10e      	bne.n	8006a86 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	4a45      	ldr	r2, [pc, #276]	; (8006b80 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d906      	bls.n	8006a7e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	4a42      	ldr	r2, [pc, #264]	; (8006b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	0e5b      	lsrs	r3, r3, #25
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	e03d      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	e039      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	4a3b      	ldr	r2, [pc, #236]	; (8006b80 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d906      	bls.n	8006aa6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	4a38      	ldr	r2, [pc, #224]	; (8006b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa0:	0e5b      	lsrs	r3, r3, #25
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e029      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	e025      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	4a32      	ldr	r2, [pc, #200]	; (8006b84 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d906      	bls.n	8006acc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	4a2e      	ldr	r2, [pc, #184]	; (8006b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	0e1b      	lsrs	r3, r3, #24
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e016      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	e012      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae0:	4a28      	ldr	r2, [pc, #160]	; (8006b84 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d906      	bls.n	8006af4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	4a24      	ldr	r2, [pc, #144]	; (8006b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	0e1b      	lsrs	r3, r3, #24
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	e002      	b.n	8006afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681d      	ldr	r5, [r3, #0]
 8006b04:	466c      	mov	r4, sp
 8006b06:	f107 0318 	add.w	r3, r7, #24
 8006b0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b12:	f107 030c 	add.w	r3, r7, #12
 8006b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f002 fa95 	bl	8009048 <SDMMC_Init>
 8006b1e:	e008      	b.n	8006b32 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f002 fb62 	bl	8009204 <SDMMC_CmdBlockLength>
 8006b40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3730      	adds	r7, #48	; 0x30
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bdb0      	pop	{r4, r5, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	1fe00fff 	.word	0x1fe00fff
 8006b7c:	55e63b89 	.word	0x55e63b89
 8006b80:	02faf080 	.word	0x02faf080
 8006b84:	017d7840 	.word	0x017d7840

08006b88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006b94:	f107 030c 	add.w	r3, r7, #12
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fab0 	bl	8007100 <SD_SendStatus>
 8006ba0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	0a5b      	lsrs	r3, r3, #9
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006bbe:	693b      	ldr	r3, [r7, #16]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b090      	sub	sp, #64	; 0x40
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f002 fa8f 	bl	80090fc <SDMMC_GetPowerState>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006be4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006be8:	e0a9      	b.n	8006d3e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d02e      	beq.n	8006c50 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f002 fcd4 	bl	80095a4 <SDMMC_CmdSendCID>
 8006bfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c06:	e09a      	b.n	8006d3e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f002 fab9 	bl	8009186 <SDMMC_GetResponse>
 8006c14:	4602      	mov	r2, r0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2104      	movs	r1, #4
 8006c20:	4618      	mov	r0, r3
 8006c22:	f002 fab0 	bl	8009186 <SDMMC_GetResponse>
 8006c26:	4602      	mov	r2, r0
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2108      	movs	r1, #8
 8006c32:	4618      	mov	r0, r3
 8006c34:	f002 faa7 	bl	8009186 <SDMMC_GetResponse>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	210c      	movs	r1, #12
 8006c44:	4618      	mov	r0, r3
 8006c46:	f002 fa9e 	bl	8009186 <SDMMC_GetResponse>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d00d      	beq.n	8006c74 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f107 020e 	add.w	r2, r7, #14
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 fcdd 	bl	8009622 <SDMMC_CmdSetRelAdd>
 8006c68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <SD_InitCard+0xac>
    {
      return errorstate;
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	e064      	b.n	8006d3e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d036      	beq.n	8006cea <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c7c:	89fb      	ldrh	r3, [r7, #14]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8c:	041b      	lsls	r3, r3, #16
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f002 fca6 	bl	80095e2 <SDMMC_CmdSendCSD>
 8006c96:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <SD_InitCard+0xda>
    {
      return errorstate;
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	e04d      	b.n	8006d3e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f002 fa6c 	bl	8009186 <SDMMC_GetResponse>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2104      	movs	r1, #4
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f002 fa63 	bl	8009186 <SDMMC_GetResponse>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2108      	movs	r1, #8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f002 fa5a 	bl	8009186 <SDMMC_GetResponse>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	210c      	movs	r1, #12
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f002 fa51 	bl	8009186 <SDMMC_GetResponse>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2104      	movs	r1, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 fa48 	bl	8009186 <SDMMC_GetResponse>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	0d1a      	lsrs	r2, r3, #20
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff fba5 	bl	8006454 <HAL_SD_GetCardCSD>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d14:	e013      	b.n	8006d3e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6819      	ldr	r1, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	2200      	movs	r2, #0
 8006d22:	461c      	mov	r4, r3
 8006d24:	4615      	mov	r5, r2
 8006d26:	4622      	mov	r2, r4
 8006d28:	462b      	mov	r3, r5
 8006d2a:	4608      	mov	r0, r1
 8006d2c:	f002 fb50 	bl	80093d0 <SDMMC_CmdSelDesel>
 8006d30:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <SD_InitCard+0x174>
  {
    return errorstate;
 8006d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3a:	e000      	b.n	8006d3e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3740      	adds	r7, #64	; 0x40
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006d5c:	f7fa fc02 	bl	8001564 <HAL_GetTick>
 8006d60:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f002 fb56 	bl	8009418 <SDMMC_CmdGoIdleState>
 8006d6c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <SD_PowerON+0x30>
  {
    return errorstate;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	e0ed      	b.n	8006f54 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f002 fb69 	bl	8009454 <SDMMC_CmdOperCond>
 8006d82:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f002 fb3f 	bl	8009418 <SDMMC_CmdGoIdleState>
 8006d9a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <SD_PowerON+0x64>
    {
      return errorstate;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	e0d6      	b.n	8006f54 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d137      	bne.n	8006e24 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f002 fb6a 	bl	8009494 <SDMMC_CmdAppCommand>
 8006dc0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d02d      	beq.n	8006e24 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dcc:	e0c2      	b.n	8006f54 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f002 fb5d 	bl	8009494 <SDMMC_CmdAppCommand>
 8006dda:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	e0b6      	b.n	8006f54 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	495c      	ldr	r1, [pc, #368]	; (8006f5c <SD_PowerON+0x214>)
 8006dec:	4618      	mov	r0, r3
 8006dee:	f002 fb74 	bl	80094da <SDMMC_CmdAppOperCommand>
 8006df2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dfe:	e0a9      	b.n	8006f54 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f002 f9bd 	bl	8009186 <SDMMC_GetResponse>
 8006e0c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	0fdb      	lsrs	r3, r3, #31
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <SD_PowerON+0xd2>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <SD_PowerON+0xd4>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]

    count++;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d802      	bhi.n	8006e34 <SD_PowerON+0xec>
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0cc      	beq.n	8006dce <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d902      	bls.n	8006e44 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e42:	e087      	b.n	8006f54 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d07e      	beq.n	8006f4c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d17a      	bne.n	8006f52 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d075      	beq.n	8006f52 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e6c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0208 	orr.w	r2, r2, #8
 8006e7c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f002 fc34 	bl	80096f0 <SDMMC_CmdVoltageSwitch>
 8006e88:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00c      	beq.n	8006eaa <SD_PowerON+0x162>
        {
          return errorstate;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	e05f      	b.n	8006f54 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e94:	f7fa fb66 	bl	8001564 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea2:	d102      	bne.n	8006eaa <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006ea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ea8:	e054      	b.n	8006f54 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eb8:	d1ec      	bne.n	8006e94 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed2:	d002      	beq.n	8006eda <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ed8:	e03c      	b.n	8006f54 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006eda:	2001      	movs	r0, #1
 8006edc:	f000 fa9e 	bl	800741c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0204 	orr.w	r2, r2, #4
 8006eee:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006ef0:	e00a      	b.n	8006f08 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ef2:	f7fa fb37 	bl	8001564 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f00:	d102      	bne.n	8006f08 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006f02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f06:	e025      	b.n	8006f54 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f16:	d1ec      	bne.n	8006ef2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f30:	d102      	bne.n	8006f38 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f36:	e00d      	b.n	8006f54 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2213      	movs	r2, #19
 8006f3e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f48:	639a      	str	r2, [r3, #56]	; 0x38
 8006f4a:	e002      	b.n	8006f52 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3720      	adds	r7, #32
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	c1100000 	.word	0xc1100000

08006f60 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08c      	sub	sp, #48	; 0x30
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f6a:	f7fa fafb 	bl	8001564 <HAL_GetTick>
 8006f6e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f002 f903 	bl	8009186 <SDMMC_GetResponse>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f8a:	d102      	bne.n	8006f92 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f90:	e0b0      	b.n	80070f4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2140      	movs	r1, #64	; 0x40
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f002 f933 	bl	8009204 <SDMMC_CmdBlockLength>
 8006f9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	e0a0      	b.n	80070f4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f002 fa68 	bl	8009494 <SDMMC_CmdAppCommand>
 8006fc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	e08d      	b.n	80070f4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fdc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006fe2:	2360      	movs	r3, #96	; 0x60
 8006fe4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f107 0208 	add.w	r2, r7, #8
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f002 f8d5 	bl	80091ac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f002 fb50 	bl	80096ac <SDMMC_CmdStatusRegister>
 800700c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d02b      	beq.n	800706c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	e069      	b.n	80070f4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d013      	beq.n	8007056 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800702e:	2300      	movs	r3, #0
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007032:	e00d      	b.n	8007050 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f002 f82f 	bl	800909c <SDMMC_ReadFIFO>
 800703e:	4602      	mov	r2, r0
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	601a      	str	r2, [r3, #0]
        pData++;
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	3304      	adds	r3, #4
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	3301      	adds	r3, #1
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	2b07      	cmp	r3, #7
 8007054:	d9ee      	bls.n	8007034 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007056:	f7fa fa85 	bl	8001564 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007064:	d102      	bne.n	800706c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007066:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800706a:	e043      	b.n	80070f4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007072:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0d2      	beq.n	8007020 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007088:	2308      	movs	r3, #8
 800708a:	e033      	b.n	80070f4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800709a:	2302      	movs	r3, #2
 800709c:	e02a      	b.n	80070f4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d017      	beq.n	80070dc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80070ac:	2320      	movs	r3, #32
 80070ae:	e021      	b.n	80070f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 fff1 	bl	800909c <SDMMC_ReadFIFO>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	601a      	str	r2, [r3, #0]
    pData++;
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	3304      	adds	r3, #4
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070c6:	f7fa fa4d 	bl	8001564 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d4:	d102      	bne.n	80070dc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80070d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070da:	e00b      	b.n	80070f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e2      	bne.n	80070b0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a03      	ldr	r2, [pc, #12]	; (80070fc <SD_SendSDStatus+0x19c>)
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3730      	adds	r7, #48	; 0x30
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	18000f3a 	.word	0x18000f3a

08007100 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007114:	e018      	b.n	8007148 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f002 fa9f 	bl	8009666 <SDMMC_CmdSendStatus>
 8007128:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	e009      	b.n	8007148 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2100      	movs	r1, #0
 800713a:	4618      	mov	r0, r3
 800713c:	f002 f823 	bl	8009186 <SDMMC_GetResponse>
 8007140:	4602      	mov	r2, r0
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f002 f80d 	bl	8009186 <SDMMC_GetResponse>
 800716c:	4603      	mov	r3, r0
 800716e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007176:	d102      	bne.n	800717e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800717c:	e02f      	b.n	80071de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800717e:	f107 030c 	add.w	r3, r7, #12
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f879 	bl	800727c <SD_FindSCR>
 800718a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	e023      	b.n	80071de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01c      	beq.n	80071da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f002 f971 	bl	8009494 <SDMMC_CmdAppCommand>
 80071b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	e00f      	b.n	80071de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2102      	movs	r1, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 f9a8 	bl	800951a <SDMMC_CmdBusWidth>
 80071ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	e003      	b.n	80071de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e001      	b.n	80071de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80071da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b086      	sub	sp, #24
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 ffc2 	bl	8009186 <SDMMC_GetResponse>
 8007202:	4603      	mov	r3, r0
 8007204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800720c:	d102      	bne.n	8007214 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800720e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007212:	e02f      	b.n	8007274 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f82e 	bl	800727c <SD_FindSCR>
 8007220:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	e023      	b.n	8007274 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01c      	beq.n	8007270 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723e:	041b      	lsls	r3, r3, #16
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f002 f926 	bl	8009494 <SDMMC_CmdAppCommand>
 8007248:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	e00f      	b.n	8007274 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f002 f95d 	bl	800951a <SDMMC_CmdBusWidth>
 8007260:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	e003      	b.n	8007274 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800726c:	2300      	movs	r3, #0
 800726e:	e001      	b.n	8007274 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007270:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08e      	sub	sp, #56	; 0x38
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007286:	f7fa f96d 	bl	8001564 <HAL_GetTick>
 800728a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007290:	2300      	movs	r3, #0
 8007292:	60bb      	str	r3, [r7, #8]
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2108      	movs	r1, #8
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 ffae 	bl	8009204 <SDMMC_CmdBlockLength>
 80072a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	e0ad      	b.n	8007410 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f002 f8e7 	bl	8009494 <SDMMC_CmdAppCommand>
 80072c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	e09e      	b.n	8007410 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80072d8:	2308      	movs	r3, #8
 80072da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80072dc:	2330      	movs	r3, #48	; 0x30
 80072de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80072e0:	2302      	movs	r3, #2
 80072e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80072e8:	2301      	movs	r3, #1
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f107 0210 	add.w	r2, r7, #16
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f001 ff58 	bl	80091ac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f002 f92d 	bl	8009560 <SDMMC_CmdSendSCR>
 8007306:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	2b00      	cmp	r3, #0
 800730c:	d027      	beq.n	800735e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	e07e      	b.n	8007410 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d113      	bne.n	8007348 <SD_FindSCR+0xcc>
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	2b00      	cmp	r3, #0
 8007324:	d110      	bne.n	8007348 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4618      	mov	r0, r3
 800732c:	f001 feb6 	bl	800909c <SDMMC_ReadFIFO>
 8007330:	4603      	mov	r3, r0
 8007332:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f001 feaf 	bl	800909c <SDMMC_ReadFIFO>
 800733e:	4603      	mov	r3, r0
 8007340:	60fb      	str	r3, [r7, #12]
      index++;
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007344:	3301      	adds	r3, #1
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007348:	f7fa f90c 	bl	8001564 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007356:	d102      	bne.n	800735e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800735c:	e058      	b.n	8007410 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007364:	f240 532a 	movw	r3, #1322	; 0x52a
 8007368:	4013      	ands	r3, r2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0d1      	beq.n	8007312 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2208      	movs	r2, #8
 8007382:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007384:	2308      	movs	r3, #8
 8007386:	e043      	b.n	8007410 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2202      	movs	r2, #2
 800739c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800739e:	2302      	movs	r3, #2
 80073a0:	e036      	b.n	8007410 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2220      	movs	r2, #32
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80073b8:	2320      	movs	r3, #32
 80073ba:	e029      	b.n	8007410 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a15      	ldr	r2, [pc, #84]	; (8007418 <SD_FindSCR+0x19c>)
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	061a      	lsls	r2, r3, #24
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	0a1b      	lsrs	r3, r3, #8
 80073d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80073da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	0e1b      	lsrs	r3, r3, #24
 80073e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	601a      	str	r2, [r3, #0]
    scr++;
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	3304      	adds	r3, #4
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	061a      	lsls	r2, r3, #24
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007402:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	0e1b      	lsrs	r3, r3, #24
 8007408:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3738      	adds	r7, #56	; 0x38
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	18000f3a 	.word	0x18000f3a

0800741c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e095      	b.n	8007570 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	d108      	bne.n	800745e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007454:	d009      	beq.n	800746a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	61da      	str	r2, [r3, #28]
 800745c:	e005      	b.n	800746a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7f9 fe85 	bl	8001194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074aa:	d902      	bls.n	80074b2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e002      	b.n	80074b8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074c0:	d007      	beq.n	80074d2 <HAL_SPI_Init+0xa0>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074ca:	d002      	beq.n	80074d2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007514:	ea42 0103 	orr.w	r1, r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	0c1b      	lsrs	r3, r3, #16
 800752e:	f003 0204 	and.w	r2, r3, #4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800754e:	ea42 0103 	orr.w	r1, r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e049      	b.n	800761e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7f9 fe3a 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f000 fa62 	bl	8007a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e049      	b.n	80076cc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d106      	bne.n	8007652 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f841 	bl	80076d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f000 fa0b 	bl	8007a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d122      	bne.n	8007744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b02      	cmp	r3, #2
 800770a:	d11b      	bne.n	8007744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f06f 0202 	mvn.w	r2, #2
 8007714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f98a 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 8007730:	e005      	b.n	800773e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f97c 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f98d 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b04      	cmp	r3, #4
 8007750:	d122      	bne.n	8007798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b04      	cmp	r3, #4
 800775e:	d11b      	bne.n	8007798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f06f 0204 	mvn.w	r2, #4
 8007768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f960 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 8007784:	e005      	b.n	8007792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f952 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f963 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d122      	bne.n	80077ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d11b      	bne.n	80077ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0208 	mvn.w	r2, #8
 80077bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2204      	movs	r2, #4
 80077c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f936 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 80077d8:	e005      	b.n	80077e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f928 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f939 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0310 	and.w	r3, r3, #16
 80077f6:	2b10      	cmp	r3, #16
 80077f8:	d122      	bne.n	8007840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b10      	cmp	r3, #16
 8007806:	d11b      	bne.n	8007840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0210 	mvn.w	r2, #16
 8007810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2208      	movs	r2, #8
 8007816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f90c 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 800782c:	e005      	b.n	800783a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f8fe 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f90f 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b01      	cmp	r3, #1
 800784c:	d10e      	bne.n	800786c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b01      	cmp	r3, #1
 800785a:	d107      	bne.n	800786c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0201 	mvn.w	r2, #1
 8007864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f8d8 	bl	8007a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	2b80      	cmp	r3, #128	; 0x80
 8007878:	d10e      	bne.n	8007898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d107      	bne.n	8007898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fcec 	bl	8008270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a6:	d10e      	bne.n	80078c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d107      	bne.n	80078c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fcdf 	bl	8008284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d10e      	bne.n	80078f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d107      	bne.n	80078f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f8bd 	bl	8007a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d10e      	bne.n	800791e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b20      	cmp	r3, #32
 800790c:	d107      	bne.n	800791e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f06f 0220 	mvn.w	r2, #32
 8007916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc9f 	bl	800825c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007942:	2302      	movs	r3, #2
 8007944:	e066      	b.n	8007a14 <HAL_TIM_OC_ConfigChannel+0xec>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b14      	cmp	r3, #20
 8007952:	d857      	bhi.n	8007a04 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007954:	a201      	add	r2, pc, #4	; (adr r2, 800795c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	080079b1 	.word	0x080079b1
 8007960:	08007a05 	.word	0x08007a05
 8007964:	08007a05 	.word	0x08007a05
 8007968:	08007a05 	.word	0x08007a05
 800796c:	080079bf 	.word	0x080079bf
 8007970:	08007a05 	.word	0x08007a05
 8007974:	08007a05 	.word	0x08007a05
 8007978:	08007a05 	.word	0x08007a05
 800797c:	080079cd 	.word	0x080079cd
 8007980:	08007a05 	.word	0x08007a05
 8007984:	08007a05 	.word	0x08007a05
 8007988:	08007a05 	.word	0x08007a05
 800798c:	080079db 	.word	0x080079db
 8007990:	08007a05 	.word	0x08007a05
 8007994:	08007a05 	.word	0x08007a05
 8007998:	08007a05 	.word	0x08007a05
 800799c:	080079e9 	.word	0x080079e9
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007a05 	.word	0x08007a05
 80079a8:	08007a05 	.word	0x08007a05
 80079ac:	080079f7 	.word	0x080079f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f8fc 	bl	8007bb4 <TIM_OC1_SetConfig>
      break;
 80079bc:	e025      	b.n	8007a0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f985 	bl	8007cd4 <TIM_OC2_SetConfig>
      break;
 80079ca:	e01e      	b.n	8007a0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fa08 	bl	8007de8 <TIM_OC3_SetConfig>
      break;
 80079d8:	e017      	b.n	8007a0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fa89 	bl	8007ef8 <TIM_OC4_SetConfig>
      break;
 80079e6:	e010      	b.n	8007a0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68b9      	ldr	r1, [r7, #8]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 faec 	bl	8007fcc <TIM_OC5_SetConfig>
      break;
 80079f4:	e009      	b.n	8007a0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fb49 	bl	8008094 <TIM_OC6_SetConfig>
      break;
 8007a02:	e002      	b.n	8007a0a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
      break;
 8007a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a40      	ldr	r2, [pc, #256]	; (8007b94 <TIM_Base_SetConfig+0x114>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d013      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9e:	d00f      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a3d      	ldr	r2, [pc, #244]	; (8007b98 <TIM_Base_SetConfig+0x118>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00b      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a3c      	ldr	r2, [pc, #240]	; (8007b9c <TIM_Base_SetConfig+0x11c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d007      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a3b      	ldr	r2, [pc, #236]	; (8007ba0 <TIM_Base_SetConfig+0x120>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a3a      	ldr	r2, [pc, #232]	; (8007ba4 <TIM_Base_SetConfig+0x124>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d108      	bne.n	8007ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a2f      	ldr	r2, [pc, #188]	; (8007b94 <TIM_Base_SetConfig+0x114>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d01f      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d01b      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a2c      	ldr	r2, [pc, #176]	; (8007b98 <TIM_Base_SetConfig+0x118>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d017      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2b      	ldr	r2, [pc, #172]	; (8007b9c <TIM_Base_SetConfig+0x11c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a2a      	ldr	r2, [pc, #168]	; (8007ba0 <TIM_Base_SetConfig+0x120>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00f      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <TIM_Base_SetConfig+0x124>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00b      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a28      	ldr	r2, [pc, #160]	; (8007ba8 <TIM_Base_SetConfig+0x128>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d007      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a27      	ldr	r2, [pc, #156]	; (8007bac <TIM_Base_SetConfig+0x12c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d003      	beq.n	8007b1a <TIM_Base_SetConfig+0x9a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a26      	ldr	r2, [pc, #152]	; (8007bb0 <TIM_Base_SetConfig+0x130>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d108      	bne.n	8007b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a10      	ldr	r2, [pc, #64]	; (8007b94 <TIM_Base_SetConfig+0x114>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00f      	beq.n	8007b78 <TIM_Base_SetConfig+0xf8>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a12      	ldr	r2, [pc, #72]	; (8007ba4 <TIM_Base_SetConfig+0x124>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00b      	beq.n	8007b78 <TIM_Base_SetConfig+0xf8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a11      	ldr	r2, [pc, #68]	; (8007ba8 <TIM_Base_SetConfig+0x128>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d007      	beq.n	8007b78 <TIM_Base_SetConfig+0xf8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a10      	ldr	r2, [pc, #64]	; (8007bac <TIM_Base_SetConfig+0x12c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d003      	beq.n	8007b78 <TIM_Base_SetConfig+0xf8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a0f      	ldr	r2, [pc, #60]	; (8007bb0 <TIM_Base_SetConfig+0x130>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d103      	bne.n	8007b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	615a      	str	r2, [r3, #20]
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800
 8007ba0:	40000c00 	.word	0x40000c00
 8007ba4:	40013400 	.word	0x40013400
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800

08007bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0303 	bic.w	r3, r3, #3
 8007bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f023 0302 	bic.w	r3, r3, #2
 8007c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a2c      	ldr	r2, [pc, #176]	; (8007cc0 <TIM_OC1_SetConfig+0x10c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00f      	beq.n	8007c34 <TIM_OC1_SetConfig+0x80>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a2b      	ldr	r2, [pc, #172]	; (8007cc4 <TIM_OC1_SetConfig+0x110>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00b      	beq.n	8007c34 <TIM_OC1_SetConfig+0x80>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <TIM_OC1_SetConfig+0x114>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d007      	beq.n	8007c34 <TIM_OC1_SetConfig+0x80>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a29      	ldr	r2, [pc, #164]	; (8007ccc <TIM_OC1_SetConfig+0x118>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_OC1_SetConfig+0x80>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a28      	ldr	r2, [pc, #160]	; (8007cd0 <TIM_OC1_SetConfig+0x11c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d10c      	bne.n	8007c4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f023 0308 	bic.w	r3, r3, #8
 8007c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f023 0304 	bic.w	r3, r3, #4
 8007c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <TIM_OC1_SetConfig+0x10c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <TIM_OC1_SetConfig+0xc2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <TIM_OC1_SetConfig+0x110>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00b      	beq.n	8007c76 <TIM_OC1_SetConfig+0xc2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <TIM_OC1_SetConfig+0x114>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_OC1_SetConfig+0xc2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <TIM_OC1_SetConfig+0x118>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_OC1_SetConfig+0xc2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <TIM_OC1_SetConfig+0x11c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d111      	bne.n	8007c9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	621a      	str	r2, [r3, #32]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800

08007cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f023 0210 	bic.w	r2, r3, #16
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f023 0320 	bic.w	r3, r3, #32
 8007d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a28      	ldr	r2, [pc, #160]	; (8007dd4 <TIM_OC2_SetConfig+0x100>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC2_SetConfig+0x6c>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a27      	ldr	r2, [pc, #156]	; (8007dd8 <TIM_OC2_SetConfig+0x104>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10d      	bne.n	8007d5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	; (8007dd4 <TIM_OC2_SetConfig+0x100>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00f      	beq.n	8007d84 <TIM_OC2_SetConfig+0xb0>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a1c      	ldr	r2, [pc, #112]	; (8007dd8 <TIM_OC2_SetConfig+0x104>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00b      	beq.n	8007d84 <TIM_OC2_SetConfig+0xb0>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <TIM_OC2_SetConfig+0x108>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d007      	beq.n	8007d84 <TIM_OC2_SetConfig+0xb0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1a      	ldr	r2, [pc, #104]	; (8007de0 <TIM_OC2_SetConfig+0x10c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <TIM_OC2_SetConfig+0xb0>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a19      	ldr	r2, [pc, #100]	; (8007de4 <TIM_OC2_SetConfig+0x110>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d113      	bne.n	8007dac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40012c00 	.word	0x40012c00
 8007dd8:	40013400 	.word	0x40013400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40014400 	.word	0x40014400
 8007de4:	40014800 	.word	0x40014800

08007de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0303 	bic.w	r3, r3, #3
 8007e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	021b      	lsls	r3, r3, #8
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a27      	ldr	r2, [pc, #156]	; (8007ee4 <TIM_OC3_SetConfig+0xfc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <TIM_OC3_SetConfig+0x6a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a26      	ldr	r2, [pc, #152]	; (8007ee8 <TIM_OC3_SetConfig+0x100>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d10d      	bne.n	8007e6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <TIM_OC3_SetConfig+0xfc>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00f      	beq.n	8007e96 <TIM_OC3_SetConfig+0xae>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <TIM_OC3_SetConfig+0x100>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00b      	beq.n	8007e96 <TIM_OC3_SetConfig+0xae>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a1a      	ldr	r2, [pc, #104]	; (8007eec <TIM_OC3_SetConfig+0x104>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d007      	beq.n	8007e96 <TIM_OC3_SetConfig+0xae>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <TIM_OC3_SetConfig+0x108>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d003      	beq.n	8007e96 <TIM_OC3_SetConfig+0xae>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a18      	ldr	r2, [pc, #96]	; (8007ef4 <TIM_OC3_SetConfig+0x10c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d113      	bne.n	8007ebe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	621a      	str	r2, [r3, #32]
}
 8007ed8:	bf00      	nop
 8007eda:	371c      	adds	r7, #28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40013400 	.word	0x40013400
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	40014400 	.word	0x40014400
 8007ef4:	40014800 	.word	0x40014800

08007ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	031b      	lsls	r3, r3, #12
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a18      	ldr	r2, [pc, #96]	; (8007fb8 <TIM_OC4_SetConfig+0xc0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00f      	beq.n	8007f7c <TIM_OC4_SetConfig+0x84>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <TIM_OC4_SetConfig+0xc4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00b      	beq.n	8007f7c <TIM_OC4_SetConfig+0x84>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a16      	ldr	r2, [pc, #88]	; (8007fc0 <TIM_OC4_SetConfig+0xc8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d007      	beq.n	8007f7c <TIM_OC4_SetConfig+0x84>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a15      	ldr	r2, [pc, #84]	; (8007fc4 <TIM_OC4_SetConfig+0xcc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_OC4_SetConfig+0x84>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a14      	ldr	r2, [pc, #80]	; (8007fc8 <TIM_OC4_SetConfig+0xd0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d109      	bne.n	8007f90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	019b      	lsls	r3, r3, #6
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40013400 	.word	0x40013400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40014400 	.word	0x40014400
 8007fc8:	40014800 	.word	0x40014800

08007fcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008010:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a17      	ldr	r2, [pc, #92]	; (8008080 <TIM_OC5_SetConfig+0xb4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00f      	beq.n	8008046 <TIM_OC5_SetConfig+0x7a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a16      	ldr	r2, [pc, #88]	; (8008084 <TIM_OC5_SetConfig+0xb8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00b      	beq.n	8008046 <TIM_OC5_SetConfig+0x7a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a15      	ldr	r2, [pc, #84]	; (8008088 <TIM_OC5_SetConfig+0xbc>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d007      	beq.n	8008046 <TIM_OC5_SetConfig+0x7a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a14      	ldr	r2, [pc, #80]	; (800808c <TIM_OC5_SetConfig+0xc0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <TIM_OC5_SetConfig+0x7a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a13      	ldr	r2, [pc, #76]	; (8008090 <TIM_OC5_SetConfig+0xc4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d109      	bne.n	800805a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800804c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	621a      	str	r2, [r3, #32]
}
 8008074:	bf00      	nop
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	40012c00 	.word	0x40012c00
 8008084:	40013400 	.word	0x40013400
 8008088:	40014000 	.word	0x40014000
 800808c:	40014400 	.word	0x40014400
 8008090:	40014800 	.word	0x40014800

08008094 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	051b      	lsls	r3, r3, #20
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a18      	ldr	r2, [pc, #96]	; (800814c <TIM_OC6_SetConfig+0xb8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00f      	beq.n	8008110 <TIM_OC6_SetConfig+0x7c>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a17      	ldr	r2, [pc, #92]	; (8008150 <TIM_OC6_SetConfig+0xbc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_OC6_SetConfig+0x7c>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a16      	ldr	r2, [pc, #88]	; (8008154 <TIM_OC6_SetConfig+0xc0>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_OC6_SetConfig+0x7c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a15      	ldr	r2, [pc, #84]	; (8008158 <TIM_OC6_SetConfig+0xc4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_OC6_SetConfig+0x7c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a14      	ldr	r2, [pc, #80]	; (800815c <TIM_OC6_SetConfig+0xc8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d109      	bne.n	8008124 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008116:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	029b      	lsls	r3, r3, #10
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40013400 	.word	0x40013400
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	40014800 	.word	0x40014800

08008160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008178:	2302      	movs	r3, #2
 800817a:	e065      	b.n	8008248 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	4313      	orrs	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a16      	ldr	r2, [pc, #88]	; (8008254 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d004      	beq.n	800820a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a14      	ldr	r2, [pc, #80]	; (8008258 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d115      	bne.n	8008236 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	051b      	lsls	r3, r3, #20
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40013400 	.word	0x40013400

0800825c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e042      	b.n	8008330 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7f8 ffcb 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2224      	movs	r2, #36	; 0x24
 80082c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f900 	bl	80084e0 <UART_SetConfig>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e022      	b.n	8008330 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fbf0 	bl	8008ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0201 	orr.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc77 	bl	8008c1c <UART_CheckIdleState>
 800832e:	4603      	mov	r3, r0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af02      	add	r7, sp, #8
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834e:	2b20      	cmp	r3, #32
 8008350:	f040 80c1 	bne.w	80084d6 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <HAL_UART_Receive+0x28>
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e0b9      	b.n	80084d8 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_UART_Receive+0x3a>
 800836e:	2302      	movs	r3, #2
 8008370:	e0b2      	b.n	80084d8 <HAL_UART_Receive+0x1a0>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2222      	movs	r2, #34	; 0x22
 8008386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008390:	f7f9 f8e8 	bl	8001564 <HAL_GetTick>
 8008394:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	88fa      	ldrh	r2, [r7, #6]
 800839a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	88fa      	ldrh	r2, [r7, #6]
 80083a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ae:	d10e      	bne.n	80083ce <HAL_UART_Receive+0x96>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d105      	bne.n	80083c4 <HAL_UART_Receive+0x8c>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083c2:	e02d      	b.n	8008420 <HAL_UART_Receive+0xe8>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	22ff      	movs	r2, #255	; 0xff
 80083c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083cc:	e028      	b.n	8008420 <HAL_UART_Receive+0xe8>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <HAL_UART_Receive+0xba>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <HAL_UART_Receive+0xb0>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	22ff      	movs	r2, #255	; 0xff
 80083e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083e6:	e01b      	b.n	8008420 <HAL_UART_Receive+0xe8>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	227f      	movs	r2, #127	; 0x7f
 80083ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083f0:	e016      	b.n	8008420 <HAL_UART_Receive+0xe8>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083fa:	d10d      	bne.n	8008418 <HAL_UART_Receive+0xe0>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <HAL_UART_Receive+0xd6>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	227f      	movs	r2, #127	; 0x7f
 8008408:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800840c:	e008      	b.n	8008420 <HAL_UART_Receive+0xe8>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	223f      	movs	r2, #63	; 0x3f
 8008412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008416:	e003      	b.n	8008420 <HAL_UART_Receive+0xe8>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008426:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008430:	d108      	bne.n	8008444 <HAL_UART_Receive+0x10c>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d104      	bne.n	8008444 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	61bb      	str	r3, [r7, #24]
 8008442:	e003      	b.n	800844c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008454:	e033      	b.n	80084be <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2200      	movs	r2, #0
 800845e:	2120      	movs	r1, #32
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fc26 	bl	8008cb2 <UART_WaitOnFlagUntilTimeout>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e033      	b.n	80084d8 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10c      	bne.n	8008490 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800847c:	b29a      	uxth	r2, r3
 800847e:	8a7b      	ldrh	r3, [r7, #18]
 8008480:	4013      	ands	r3, r2
 8008482:	b29a      	uxth	r2, r3
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	3302      	adds	r3, #2
 800848c:	61bb      	str	r3, [r7, #24]
 800848e:	e00d      	b.n	80084ac <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008496:	b29b      	uxth	r3, r3
 8008498:	b2da      	uxtb	r2, r3
 800849a:	8a7b      	ldrh	r3, [r7, #18]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	4013      	ands	r3, r2
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3301      	adds	r3, #1
 80084aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1c5      	bne.n	8008456 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e000      	b.n	80084d8 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80084d6:	2302      	movs	r3, #2
  }
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084e4:	b08c      	sub	sp, #48	; 0x30
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	431a      	orrs	r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	431a      	orrs	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4baa      	ldr	r3, [pc, #680]	; (80087b8 <UART_SetConfig+0x2d8>)
 8008510:	4013      	ands	r3, r2
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008518:	430b      	orrs	r3, r1
 800851a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a9f      	ldr	r2, [pc, #636]	; (80087bc <UART_SetConfig+0x2dc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008548:	4313      	orrs	r3, r2
 800854a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008556:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008560:	430b      	orrs	r3, r1
 8008562:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	f023 010f 	bic.w	r1, r3, #15
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a90      	ldr	r2, [pc, #576]	; (80087c0 <UART_SetConfig+0x2e0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d125      	bne.n	80085d0 <UART_SetConfig+0xf0>
 8008584:	4b8f      	ldr	r3, [pc, #572]	; (80087c4 <UART_SetConfig+0x2e4>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	2b03      	cmp	r3, #3
 8008590:	d81a      	bhi.n	80085c8 <UART_SetConfig+0xe8>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <UART_SetConfig+0xb8>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085b9 	.word	0x080085b9
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085c1 	.word	0x080085c1
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ae:	e116      	b.n	80087de <UART_SetConfig+0x2fe>
 80085b0:	2302      	movs	r3, #2
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b6:	e112      	b.n	80087de <UART_SetConfig+0x2fe>
 80085b8:	2304      	movs	r3, #4
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085be:	e10e      	b.n	80087de <UART_SetConfig+0x2fe>
 80085c0:	2308      	movs	r3, #8
 80085c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c6:	e10a      	b.n	80087de <UART_SetConfig+0x2fe>
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e106      	b.n	80087de <UART_SetConfig+0x2fe>
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a7c      	ldr	r2, [pc, #496]	; (80087c8 <UART_SetConfig+0x2e8>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d138      	bne.n	800864c <UART_SetConfig+0x16c>
 80085da:	4b7a      	ldr	r3, [pc, #488]	; (80087c4 <UART_SetConfig+0x2e4>)
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e0:	f003 030c 	and.w	r3, r3, #12
 80085e4:	2b0c      	cmp	r3, #12
 80085e6:	d82d      	bhi.n	8008644 <UART_SetConfig+0x164>
 80085e8:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0x110>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008625 	.word	0x08008625
 80085f4:	08008645 	.word	0x08008645
 80085f8:	08008645 	.word	0x08008645
 80085fc:	08008645 	.word	0x08008645
 8008600:	08008635 	.word	0x08008635
 8008604:	08008645 	.word	0x08008645
 8008608:	08008645 	.word	0x08008645
 800860c:	08008645 	.word	0x08008645
 8008610:	0800862d 	.word	0x0800862d
 8008614:	08008645 	.word	0x08008645
 8008618:	08008645 	.word	0x08008645
 800861c:	08008645 	.word	0x08008645
 8008620:	0800863d 	.word	0x0800863d
 8008624:	2300      	movs	r3, #0
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800862a:	e0d8      	b.n	80087de <UART_SetConfig+0x2fe>
 800862c:	2302      	movs	r3, #2
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008632:	e0d4      	b.n	80087de <UART_SetConfig+0x2fe>
 8008634:	2304      	movs	r3, #4
 8008636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863a:	e0d0      	b.n	80087de <UART_SetConfig+0x2fe>
 800863c:	2308      	movs	r3, #8
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008642:	e0cc      	b.n	80087de <UART_SetConfig+0x2fe>
 8008644:	2310      	movs	r3, #16
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864a:	e0c8      	b.n	80087de <UART_SetConfig+0x2fe>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a5e      	ldr	r2, [pc, #376]	; (80087cc <UART_SetConfig+0x2ec>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d125      	bne.n	80086a2 <UART_SetConfig+0x1c2>
 8008656:	4b5b      	ldr	r3, [pc, #364]	; (80087c4 <UART_SetConfig+0x2e4>)
 8008658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800865c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008660:	2b30      	cmp	r3, #48	; 0x30
 8008662:	d016      	beq.n	8008692 <UART_SetConfig+0x1b2>
 8008664:	2b30      	cmp	r3, #48	; 0x30
 8008666:	d818      	bhi.n	800869a <UART_SetConfig+0x1ba>
 8008668:	2b20      	cmp	r3, #32
 800866a:	d00a      	beq.n	8008682 <UART_SetConfig+0x1a2>
 800866c:	2b20      	cmp	r3, #32
 800866e:	d814      	bhi.n	800869a <UART_SetConfig+0x1ba>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <UART_SetConfig+0x19a>
 8008674:	2b10      	cmp	r3, #16
 8008676:	d008      	beq.n	800868a <UART_SetConfig+0x1aa>
 8008678:	e00f      	b.n	800869a <UART_SetConfig+0x1ba>
 800867a:	2300      	movs	r3, #0
 800867c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008680:	e0ad      	b.n	80087de <UART_SetConfig+0x2fe>
 8008682:	2302      	movs	r3, #2
 8008684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008688:	e0a9      	b.n	80087de <UART_SetConfig+0x2fe>
 800868a:	2304      	movs	r3, #4
 800868c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008690:	e0a5      	b.n	80087de <UART_SetConfig+0x2fe>
 8008692:	2308      	movs	r3, #8
 8008694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008698:	e0a1      	b.n	80087de <UART_SetConfig+0x2fe>
 800869a:	2310      	movs	r3, #16
 800869c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a0:	e09d      	b.n	80087de <UART_SetConfig+0x2fe>
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a4a      	ldr	r2, [pc, #296]	; (80087d0 <UART_SetConfig+0x2f0>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d125      	bne.n	80086f8 <UART_SetConfig+0x218>
 80086ac:	4b45      	ldr	r3, [pc, #276]	; (80087c4 <UART_SetConfig+0x2e4>)
 80086ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086b6:	2bc0      	cmp	r3, #192	; 0xc0
 80086b8:	d016      	beq.n	80086e8 <UART_SetConfig+0x208>
 80086ba:	2bc0      	cmp	r3, #192	; 0xc0
 80086bc:	d818      	bhi.n	80086f0 <UART_SetConfig+0x210>
 80086be:	2b80      	cmp	r3, #128	; 0x80
 80086c0:	d00a      	beq.n	80086d8 <UART_SetConfig+0x1f8>
 80086c2:	2b80      	cmp	r3, #128	; 0x80
 80086c4:	d814      	bhi.n	80086f0 <UART_SetConfig+0x210>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <UART_SetConfig+0x1f0>
 80086ca:	2b40      	cmp	r3, #64	; 0x40
 80086cc:	d008      	beq.n	80086e0 <UART_SetConfig+0x200>
 80086ce:	e00f      	b.n	80086f0 <UART_SetConfig+0x210>
 80086d0:	2300      	movs	r3, #0
 80086d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d6:	e082      	b.n	80087de <UART_SetConfig+0x2fe>
 80086d8:	2302      	movs	r3, #2
 80086da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086de:	e07e      	b.n	80087de <UART_SetConfig+0x2fe>
 80086e0:	2304      	movs	r3, #4
 80086e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e6:	e07a      	b.n	80087de <UART_SetConfig+0x2fe>
 80086e8:	2308      	movs	r3, #8
 80086ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ee:	e076      	b.n	80087de <UART_SetConfig+0x2fe>
 80086f0:	2310      	movs	r3, #16
 80086f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f6:	e072      	b.n	80087de <UART_SetConfig+0x2fe>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a35      	ldr	r2, [pc, #212]	; (80087d4 <UART_SetConfig+0x2f4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d12a      	bne.n	8008758 <UART_SetConfig+0x278>
 8008702:	4b30      	ldr	r3, [pc, #192]	; (80087c4 <UART_SetConfig+0x2e4>)
 8008704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800870c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008710:	d01a      	beq.n	8008748 <UART_SetConfig+0x268>
 8008712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008716:	d81b      	bhi.n	8008750 <UART_SetConfig+0x270>
 8008718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800871c:	d00c      	beq.n	8008738 <UART_SetConfig+0x258>
 800871e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008722:	d815      	bhi.n	8008750 <UART_SetConfig+0x270>
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <UART_SetConfig+0x250>
 8008728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872c:	d008      	beq.n	8008740 <UART_SetConfig+0x260>
 800872e:	e00f      	b.n	8008750 <UART_SetConfig+0x270>
 8008730:	2300      	movs	r3, #0
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008736:	e052      	b.n	80087de <UART_SetConfig+0x2fe>
 8008738:	2302      	movs	r3, #2
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873e:	e04e      	b.n	80087de <UART_SetConfig+0x2fe>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008746:	e04a      	b.n	80087de <UART_SetConfig+0x2fe>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800874e:	e046      	b.n	80087de <UART_SetConfig+0x2fe>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008756:	e042      	b.n	80087de <UART_SetConfig+0x2fe>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a17      	ldr	r2, [pc, #92]	; (80087bc <UART_SetConfig+0x2dc>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d13a      	bne.n	80087d8 <UART_SetConfig+0x2f8>
 8008762:	4b18      	ldr	r3, [pc, #96]	; (80087c4 <UART_SetConfig+0x2e4>)
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800876c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008770:	d01a      	beq.n	80087a8 <UART_SetConfig+0x2c8>
 8008772:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008776:	d81b      	bhi.n	80087b0 <UART_SetConfig+0x2d0>
 8008778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800877c:	d00c      	beq.n	8008798 <UART_SetConfig+0x2b8>
 800877e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008782:	d815      	bhi.n	80087b0 <UART_SetConfig+0x2d0>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <UART_SetConfig+0x2b0>
 8008788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878c:	d008      	beq.n	80087a0 <UART_SetConfig+0x2c0>
 800878e:	e00f      	b.n	80087b0 <UART_SetConfig+0x2d0>
 8008790:	2300      	movs	r3, #0
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008796:	e022      	b.n	80087de <UART_SetConfig+0x2fe>
 8008798:	2302      	movs	r3, #2
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879e:	e01e      	b.n	80087de <UART_SetConfig+0x2fe>
 80087a0:	2304      	movs	r3, #4
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a6:	e01a      	b.n	80087de <UART_SetConfig+0x2fe>
 80087a8:	2308      	movs	r3, #8
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ae:	e016      	b.n	80087de <UART_SetConfig+0x2fe>
 80087b0:	2310      	movs	r3, #16
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087b6:	e012      	b.n	80087de <UART_SetConfig+0x2fe>
 80087b8:	cfff69f3 	.word	0xcfff69f3
 80087bc:	40008000 	.word	0x40008000
 80087c0:	40013800 	.word	0x40013800
 80087c4:	40021000 	.word	0x40021000
 80087c8:	40004400 	.word	0x40004400
 80087cc:	40004800 	.word	0x40004800
 80087d0:	40004c00 	.word	0x40004c00
 80087d4:	40005000 	.word	0x40005000
 80087d8:	2310      	movs	r3, #16
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4aae      	ldr	r2, [pc, #696]	; (8008a9c <UART_SetConfig+0x5bc>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	f040 8097 	bne.w	8008918 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d823      	bhi.n	800883a <UART_SetConfig+0x35a>
 80087f2:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <UART_SetConfig+0x318>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	0800881d 	.word	0x0800881d
 80087fc:	0800883b 	.word	0x0800883b
 8008800:	08008825 	.word	0x08008825
 8008804:	0800883b 	.word	0x0800883b
 8008808:	0800882b 	.word	0x0800882b
 800880c:	0800883b 	.word	0x0800883b
 8008810:	0800883b 	.word	0x0800883b
 8008814:	0800883b 	.word	0x0800883b
 8008818:	08008833 	.word	0x08008833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800881c:	f7fb fb66 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8008820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008822:	e010      	b.n	8008846 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008824:	4b9e      	ldr	r3, [pc, #632]	; (8008aa0 <UART_SetConfig+0x5c0>)
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008828:	e00d      	b.n	8008846 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800882a:	f7fb fac7 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 800882e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008830:	e009      	b.n	8008846 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008838:	e005      	b.n	8008846 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008844:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 8130 	beq.w	8008aae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	4a94      	ldr	r2, [pc, #592]	; (8008aa4 <UART_SetConfig+0x5c4>)
 8008854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008858:	461a      	mov	r2, r3
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008860:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	4613      	mov	r3, r2
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	4413      	add	r3, r2
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	429a      	cmp	r2, r3
 8008870:	d305      	bcc.n	800887e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	429a      	cmp	r2, r3
 800887c:	d903      	bls.n	8008886 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008884:	e113      	b.n	8008aae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	2200      	movs	r2, #0
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	60fa      	str	r2, [r7, #12]
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	4a84      	ldr	r2, [pc, #528]	; (8008aa4 <UART_SetConfig+0x5c4>)
 8008894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008898:	b29b      	uxth	r3, r3
 800889a:	2200      	movs	r2, #0
 800889c:	603b      	str	r3, [r7, #0]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088a8:	f7f7 fd02 	bl	80002b0 <__aeabi_uldivmod>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4610      	mov	r0, r2
 80088b2:	4619      	mov	r1, r3
 80088b4:	f04f 0200 	mov.w	r2, #0
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	020b      	lsls	r3, r1, #8
 80088be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088c2:	0202      	lsls	r2, r0, #8
 80088c4:	6979      	ldr	r1, [r7, #20]
 80088c6:	6849      	ldr	r1, [r1, #4]
 80088c8:	0849      	lsrs	r1, r1, #1
 80088ca:	2000      	movs	r0, #0
 80088cc:	460c      	mov	r4, r1
 80088ce:	4605      	mov	r5, r0
 80088d0:	eb12 0804 	adds.w	r8, r2, r4
 80088d4:	eb43 0905 	adc.w	r9, r3, r5
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	469a      	mov	sl, r3
 80088e0:	4693      	mov	fp, r2
 80088e2:	4652      	mov	r2, sl
 80088e4:	465b      	mov	r3, fp
 80088e6:	4640      	mov	r0, r8
 80088e8:	4649      	mov	r1, r9
 80088ea:	f7f7 fce1 	bl	80002b0 <__aeabi_uldivmod>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4613      	mov	r3, r2
 80088f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088fc:	d308      	bcc.n	8008910 <UART_SetConfig+0x430>
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008904:	d204      	bcs.n	8008910 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	e0ce      	b.n	8008aae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008916:	e0ca      	b.n	8008aae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008920:	d166      	bne.n	80089f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008926:	2b08      	cmp	r3, #8
 8008928:	d827      	bhi.n	800897a <UART_SetConfig+0x49a>
 800892a:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <UART_SetConfig+0x450>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008955 	.word	0x08008955
 8008934:	0800895d 	.word	0x0800895d
 8008938:	08008965 	.word	0x08008965
 800893c:	0800897b 	.word	0x0800897b
 8008940:	0800896b 	.word	0x0800896b
 8008944:	0800897b 	.word	0x0800897b
 8008948:	0800897b 	.word	0x0800897b
 800894c:	0800897b 	.word	0x0800897b
 8008950:	08008973 	.word	0x08008973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008954:	f7fb faca 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8008958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800895a:	e014      	b.n	8008986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800895c:	f7fb fadc 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8008960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008962:	e010      	b.n	8008986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008964:	4b4e      	ldr	r3, [pc, #312]	; (8008aa0 <UART_SetConfig+0x5c0>)
 8008966:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008968:	e00d      	b.n	8008986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800896a:	f7fb fa27 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 800896e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008970:	e009      	b.n	8008986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008978:	e005      	b.n	8008986 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8090 	beq.w	8008aae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	4a44      	ldr	r2, [pc, #272]	; (8008aa4 <UART_SetConfig+0x5c4>)
 8008994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008998:	461a      	mov	r2, r3
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	fbb3 f3f2 	udiv	r3, r3, r2
 80089a0:	005a      	lsls	r2, r3, #1
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	441a      	add	r2, r3
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b0f      	cmp	r3, #15
 80089b8:	d916      	bls.n	80089e8 <UART_SetConfig+0x508>
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c0:	d212      	bcs.n	80089e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	f023 030f 	bic.w	r3, r3, #15
 80089ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	8bfb      	ldrh	r3, [r7, #30]
 80089da:	4313      	orrs	r3, r2
 80089dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	8bfa      	ldrh	r2, [r7, #30]
 80089e4:	60da      	str	r2, [r3, #12]
 80089e6:	e062      	b.n	8008aae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089ee:	e05e      	b.n	8008aae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d828      	bhi.n	8008a4a <UART_SetConfig+0x56a>
 80089f8:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UART_SetConfig+0x520>)
 80089fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fe:	bf00      	nop
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a2d 	.word	0x08008a2d
 8008a08:	08008a35 	.word	0x08008a35
 8008a0c:	08008a4b 	.word	0x08008a4b
 8008a10:	08008a3b 	.word	0x08008a3b
 8008a14:	08008a4b 	.word	0x08008a4b
 8008a18:	08008a4b 	.word	0x08008a4b
 8008a1c:	08008a4b 	.word	0x08008a4b
 8008a20:	08008a43 	.word	0x08008a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a24:	f7fb fa62 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8008a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a2a:	e014      	b.n	8008a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a2c:	f7fb fa74 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8008a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a32:	e010      	b.n	8008a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a34:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <UART_SetConfig+0x5c0>)
 8008a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a38:	e00d      	b.n	8008a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a3a:	f7fb f9bf 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a40:	e009      	b.n	8008a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a48:	e005      	b.n	8008a56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a54:	bf00      	nop
    }

    if (pclk != 0U)
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d028      	beq.n	8008aae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	4a10      	ldr	r2, [pc, #64]	; (8008aa4 <UART_SetConfig+0x5c4>)
 8008a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a66:	461a      	mov	r2, r3
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	441a      	add	r2, r3
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	2b0f      	cmp	r3, #15
 8008a84:	d910      	bls.n	8008aa8 <UART_SetConfig+0x5c8>
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a8c:	d20c      	bcs.n	8008aa8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	60da      	str	r2, [r3, #12]
 8008a98:	e009      	b.n	8008aae <UART_SetConfig+0x5ce>
 8008a9a:	bf00      	nop
 8008a9c:	40008000 	.word	0x40008000
 8008aa0:	00f42400 	.word	0x00f42400
 8008aa4:	08011b70 	.word	0x08011b70
      }
      else
      {
        ret = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008aca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3730      	adds	r7, #48	; 0x30
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00a      	beq.n	8008b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4a:	f003 0308 	and.w	r3, r3, #8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01a      	beq.n	8008bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bd6:	d10a      	bne.n	8008bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	605a      	str	r2, [r3, #4]
  }
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c2c:	f7f8 fc9a 	bl	8001564 <HAL_GetTick>
 8008c30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0308 	and.w	r3, r3, #8
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d10e      	bne.n	8008c5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f82f 	bl	8008cb2 <UART_WaitOnFlagUntilTimeout>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e025      	b.n	8008caa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d10e      	bne.n	8008c8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f819 	bl	8008cb2 <UART_WaitOnFlagUntilTimeout>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e00f      	b.n	8008caa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b09c      	sub	sp, #112	; 0x70
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc2:	e0a9      	b.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cca:	f000 80a5 	beq.w	8008e18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cce:	f7f8 fc49 	bl	8001564 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d302      	bcc.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d140      	bne.n	8008d66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d36:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e5      	bne.n	8008d16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e069      	b.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d051      	beq.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d82:	d149      	bne.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dac:	637b      	str	r3, [r7, #52]	; 0x34
 8008dae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f023 0301 	bic.w	r3, r3, #1
 8008dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008de0:	623a      	str	r2, [r7, #32]
 8008de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	69f9      	ldr	r1, [r7, #28]
 8008de6:	6a3a      	ldr	r2, [r7, #32]
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e5      	bne.n	8008dc0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2220      	movs	r2, #32
 8008df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e010      	b.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69da      	ldr	r2, [r3, #28]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	4013      	ands	r3, r2
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	bf0c      	ite	eq
 8008e28:	2301      	moveq	r3, #1
 8008e2a:	2300      	movne	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	461a      	mov	r2, r3
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	f43f af46 	beq.w	8008cc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3770      	adds	r7, #112	; 0x70
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e027      	b.n	8008ea8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2224      	movs	r2, #36	; 0x24
 8008e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0201 	bic.w	r2, r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d101      	bne.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e02d      	b.n	8008f28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2224      	movs	r2, #36	; 0x24
 8008ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0201 	bic.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f84f 	bl	8008fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e02d      	b.n	8008fa4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2224      	movs	r2, #36	; 0x24
 8008f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0201 	bic.w	r2, r2, #1
 8008f6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f811 	bl	8008fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d108      	bne.n	8008fce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fcc:	e031      	b.n	8009032 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fce:	2308      	movs	r3, #8
 8008fd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	0e5b      	lsrs	r3, r3, #25
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	0f5b      	lsrs	r3, r3, #29
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	7b3a      	ldrb	r2, [r7, #12]
 8008ffa:	4911      	ldr	r1, [pc, #68]	; (8009040 <UARTEx_SetNbDataToProcess+0x94>)
 8008ffc:	5c8a      	ldrb	r2, [r1, r2]
 8008ffe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009002:	7b3a      	ldrb	r2, [r7, #12]
 8009004:	490f      	ldr	r1, [pc, #60]	; (8009044 <UARTEx_SetNbDataToProcess+0x98>)
 8009006:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009008:	fb93 f3f2 	sdiv	r3, r3, r2
 800900c:	b29a      	uxth	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	7b7a      	ldrb	r2, [r7, #13]
 8009018:	4909      	ldr	r1, [pc, #36]	; (8009040 <UARTEx_SetNbDataToProcess+0x94>)
 800901a:	5c8a      	ldrb	r2, [r1, r2]
 800901c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009020:	7b7a      	ldrb	r2, [r7, #13]
 8009022:	4908      	ldr	r1, [pc, #32]	; (8009044 <UARTEx_SetNbDataToProcess+0x98>)
 8009024:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009026:	fb93 f3f2 	sdiv	r3, r3, r2
 800902a:	b29a      	uxth	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009032:	bf00      	nop
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	08011b88 	.word	0x08011b88
 8009044:	08011b90 	.word	0x08011b90

08009048 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009048:	b084      	sub	sp, #16
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	f107 001c 	add.w	r0, r7, #28
 8009056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800905e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009060:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009062:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009066:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800906a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800906e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	4b07      	ldr	r3, [pc, #28]	; (8009098 <SDMMC_Init+0x50>)
 800907c:	4013      	ands	r3, r2
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	b004      	add	sp, #16
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	ffc02c00 	.word	0xffc02c00

0800909c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f043 0203 	orr.w	r2, r3, #3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80090ec:	2002      	movs	r0, #2
 80090ee:	f7f8 fa45 	bl	800157c <HAL_Delay>

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0303 	and.w	r3, r3, #3
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009136:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800913c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009142:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68da      	ldr	r2, [r3, #12]
 800914e:	4b06      	ldr	r3, [pc, #24]	; (8009168 <SDMMC_SendCommand+0x50>)
 8009150:	4013      	ands	r3, r2
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	fffee0c0 	.word	0xfffee0c0

0800916c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3314      	adds	r3, #20
 8009194:	461a      	mov	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	4413      	add	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80091d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80091de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0

}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009212:	2310      	movs	r3, #16
 8009214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800921a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009226:	f107 0308 	add.w	r3, r7, #8
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ff73 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009232:	f241 3288 	movw	r2, #5000	; 0x1388
 8009236:	2110      	movs	r1, #16
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa7b 	bl	8009734 <SDMMC_GetCmdResp1>
 800923e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009240:	69fb      	ldr	r3, [r7, #28]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3720      	adds	r7, #32
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b088      	sub	sp, #32
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009258:	2311      	movs	r3, #17
 800925a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800925c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009262:	2300      	movs	r3, #0
 8009264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800926a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800926c:	f107 0308 	add.w	r3, r7, #8
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff ff50 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009278:	f241 3288 	movw	r2, #5000	; 0x1388
 800927c:	2111      	movs	r1, #17
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa58 	bl	8009734 <SDMMC_GetCmdResp1>
 8009284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009286:	69fb      	ldr	r3, [r7, #28]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800929e:	2312      	movs	r3, #18
 80092a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092a8:	2300      	movs	r3, #0
 80092aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092b2:	f107 0308 	add.w	r3, r7, #8
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff ff2d 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80092be:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c2:	2112      	movs	r1, #18
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fa35 	bl	8009734 <SDMMC_GetCmdResp1>
 80092ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092cc:	69fb      	ldr	r3, [r7, #28]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b088      	sub	sp, #32
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80092e4:	2318      	movs	r3, #24
 80092e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092f8:	f107 0308 	add.w	r3, r7, #8
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff ff0a 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009304:	f241 3288 	movw	r2, #5000	; 0x1388
 8009308:	2118      	movs	r1, #24
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa12 	bl	8009734 <SDMMC_GetCmdResp1>
 8009310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009312:	69fb      	ldr	r3, [r7, #28]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800932a:	2319      	movs	r3, #25
 800932c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800932e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009334:	2300      	movs	r3, #0
 8009336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800933c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800933e:	f107 0308 	add.w	r3, r7, #8
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff fee7 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800934a:	f241 3288 	movw	r2, #5000	; 0x1388
 800934e:	2119      	movs	r1, #25
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f9ef 	bl	8009734 <SDMMC_GetCmdResp1>
 8009356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009358:	69fb      	ldr	r3, [r7, #28]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009370:	230c      	movs	r3, #12
 8009372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800937a:	2300      	movs	r3, #0
 800937c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800937e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009382:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800939c:	f107 0308 	add.w	r3, r7, #8
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff feb8 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80093a8:	4a08      	ldr	r2, [pc, #32]	; (80093cc <SDMMC_CmdStopTransfer+0x68>)
 80093aa:	210c      	movs	r1, #12
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f9c1 	bl	8009734 <SDMMC_GetCmdResp1>
 80093b2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80093c0:	69fb      	ldr	r3, [r7, #28]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	05f5e100 	.word	0x05f5e100

080093d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08a      	sub	sp, #40	; 0x28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80093e0:	2307      	movs	r3, #7
 80093e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093e8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093ea:	2300      	movs	r3, #0
 80093ec:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093f2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	4619      	mov	r1, r3
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff fe8c 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009400:	f241 3288 	movw	r2, #5000	; 0x1388
 8009404:	2107      	movs	r1, #7
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 f994 	bl	8009734 <SDMMC_GetCmdResp1>
 800940c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009410:	4618      	mov	r0, r3
 8009412:	3728      	adds	r7, #40	; 0x28
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800942c:	2300      	movs	r3, #0
 800942e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009436:	f107 0308 	add.w	r3, r7, #8
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff fe6b 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fbb8 	bl	8009bb8 <SDMMC_GetCmdError>
 8009448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800944a:	69fb      	ldr	r3, [r7, #28]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800945c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009462:	2308      	movs	r3, #8
 8009464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800946a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009476:	f107 0308 	add.w	r3, r7, #8
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff fe4b 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fb4a 	bl	8009b1c <SDMMC_GetCmdResp7>
 8009488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800948a:	69fb      	ldr	r3, [r7, #28]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3720      	adds	r7, #32
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80094a2:	2337      	movs	r3, #55	; 0x37
 80094a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094b6:	f107 0308 	add.w	r3, r7, #8
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff fe2b 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80094c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c6:	2137      	movs	r1, #55	; 0x37
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f933 	bl	8009734 <SDMMC_GetCmdResp1>
 80094ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094d0:	69fb      	ldr	r3, [r7, #28]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b088      	sub	sp, #32
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80094e8:	2329      	movs	r3, #41	; 0x29
 80094ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094f2:	2300      	movs	r3, #0
 80094f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094fc:	f107 0308 	add.w	r3, r7, #8
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fe08 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa4f 	bl	80099ac <SDMMC_GetCmdResp3>
 800950e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009510:	69fb      	ldr	r3, [r7, #28]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3720      	adds	r7, #32
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b088      	sub	sp, #32
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009528:	2306      	movs	r3, #6
 800952a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800952c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009532:	2300      	movs	r3, #0
 8009534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800953a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800953c:	f107 0308 	add.w	r3, r7, #8
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff fde8 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009548:	f241 3288 	movw	r2, #5000	; 0x1388
 800954c:	2106      	movs	r1, #6
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f8f0 	bl	8009734 <SDMMC_GetCmdResp1>
 8009554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009556:	69fb      	ldr	r3, [r7, #28]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009568:	2300      	movs	r3, #0
 800956a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800956c:	2333      	movs	r3, #51	; 0x33
 800956e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800957a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800957e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009580:	f107 0308 	add.w	r3, r7, #8
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fdc6 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800958c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009590:	2133      	movs	r1, #51	; 0x33
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f8ce 	bl	8009734 <SDMMC_GetCmdResp1>
 8009598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800959a:	69fb      	ldr	r3, [r7, #28]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3720      	adds	r7, #32
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80095b0:	2302      	movs	r3, #2
 80095b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80095b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80095b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095ba:	2300      	movs	r3, #0
 80095bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095c4:	f107 0308 	add.w	r3, r7, #8
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fda4 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f9a1 	bl	8009918 <SDMMC_GetCmdResp2>
 80095d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d8:	69fb      	ldr	r3, [r7, #28]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b088      	sub	sp, #32
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80095f0:	2309      	movs	r3, #9
 80095f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80095f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80095f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009604:	f107 0308 	add.w	r3, r7, #8
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fd84 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f981 	bl	8009918 <SDMMC_GetCmdResp2>
 8009616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009618:	69fb      	ldr	r3, [r7, #28]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3720      	adds	r7, #32
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b088      	sub	sp, #32
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009630:	2303      	movs	r3, #3
 8009632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800963e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009642:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009644:	f107 0308 	add.w	r3, r7, #8
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff fd64 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	2103      	movs	r1, #3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f9e9 	bl	8009a2c <SDMMC_GetCmdResp6>
 800965a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800965c:	69fb      	ldr	r3, [r7, #28]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b088      	sub	sp, #32
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009674:	230d      	movs	r3, #13
 8009676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800967c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800967e:	2300      	movs	r3, #0
 8009680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009688:	f107 0308 	add.w	r3, r7, #8
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff fd42 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009694:	f241 3288 	movw	r2, #5000	; 0x1388
 8009698:	210d      	movs	r1, #13
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f84a 	bl	8009734 <SDMMC_GetCmdResp1>
 80096a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096a2:	69fb      	ldr	r3, [r7, #28]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3720      	adds	r7, #32
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80096b8:	230d      	movs	r3, #13
 80096ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fd20 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80096d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096dc:	210d      	movs	r1, #13
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f828 	bl	8009734 <SDMMC_GetCmdResp1>
 80096e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096e6:	69fb      	ldr	r3, [r7, #28]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3720      	adds	r7, #32
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80096f8:	2300      	movs	r3, #0
 80096fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80096fc:	230b      	movs	r3, #11
 80096fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800970a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800970e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009710:	f107 0308 	add.w	r3, r7, #8
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fcfe 	bl	8009118 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800971c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009720:	210b      	movs	r1, #11
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f806 	bl	8009734 <SDMMC_GetCmdResp1>
 8009728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800972a:	69fb      	ldr	r3, [r7, #28]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3720      	adds	r7, #32
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	460b      	mov	r3, r1
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009742:	4b70      	ldr	r3, [pc, #448]	; (8009904 <SDMMC_GetCmdResp1+0x1d0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a70      	ldr	r2, [pc, #448]	; (8009908 <SDMMC_GetCmdResp1+0x1d4>)
 8009748:	fba2 2303 	umull	r2, r3, r2, r3
 800974c:	0a5a      	lsrs	r2, r3, #9
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	fb02 f303 	mul.w	r3, r2, r3
 8009754:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	1e5a      	subs	r2, r3, #1
 800975a:	61fa      	str	r2, [r7, #28]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009764:	e0c9      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	4b67      	ldr	r3, [pc, #412]	; (800990c <SDMMC_GetCmdResp1+0x1d8>)
 8009770:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0ef      	beq.n	8009756 <SDMMC_GetCmdResp1+0x22>
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1ea      	bne.n	8009756 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2204      	movs	r2, #4
 8009790:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009792:	2304      	movs	r3, #4
 8009794:	e0b1      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e0a6      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a58      	ldr	r2, [pc, #352]	; (8009910 <SDMMC_GetCmdResp1+0x1dc>)
 80097b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7ff fcda 	bl	800916c <SDMMC_GetCommandResponse>
 80097b8:	4603      	mov	r3, r0
 80097ba:	461a      	mov	r2, r3
 80097bc:	7afb      	ldrb	r3, [r7, #11]
 80097be:	4293      	cmp	r3, r2
 80097c0:	d001      	beq.n	80097c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e099      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80097c6:	2100      	movs	r1, #0
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f7ff fcdc 	bl	8009186 <SDMMC_GetResponse>
 80097ce:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	4b50      	ldr	r3, [pc, #320]	; (8009914 <SDMMC_GetCmdResp1+0x1e0>)
 80097d4:	4013      	ands	r3, r2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80097da:	2300      	movs	r3, #0
 80097dc:	e08d      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	da02      	bge.n	80097ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097e8:	e087      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	e080      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009802:	2380      	movs	r3, #128	; 0x80
 8009804:	e079      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009814:	e071      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009824:	e069      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009834:	e061      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009844:	e059      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009854:	e051      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009864:	e049      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009870:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009874:	e041      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009884:	e039      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009894:	e031      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80098a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80098a4:	e029      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80098b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098b4:	e021      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80098c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80098c4:	e019      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80098d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80098d4:	e011      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80098e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098e4:	e009      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f003 0308 	and.w	r3, r3, #8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80098f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80098f4:	e001      	b.n	80098fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20000000 	.word	0x20000000
 8009908:	10624dd3 	.word	0x10624dd3
 800990c:	00200045 	.word	0x00200045
 8009910:	002000c5 	.word	0x002000c5
 8009914:	fdffe008 	.word	0xfdffe008

08009918 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009920:	4b1f      	ldr	r3, [pc, #124]	; (80099a0 <SDMMC_GetCmdResp2+0x88>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a1f      	ldr	r2, [pc, #124]	; (80099a4 <SDMMC_GetCmdResp2+0x8c>)
 8009926:	fba2 2303 	umull	r2, r3, r2, r3
 800992a:	0a5b      	lsrs	r3, r3, #9
 800992c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009930:	fb02 f303 	mul.w	r3, r2, r3
 8009934:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	1e5a      	subs	r2, r3, #1
 800993a:	60fa      	str	r2, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009944:	e026      	b.n	8009994 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0ef      	beq.n	8009936 <SDMMC_GetCmdResp2+0x1e>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1ea      	bne.n	8009936 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2204      	movs	r2, #4
 8009970:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009972:	2304      	movs	r3, #4
 8009974:	e00e      	b.n	8009994 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009988:	2301      	movs	r3, #1
 800998a:	e003      	b.n	8009994 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a06      	ldr	r2, [pc, #24]	; (80099a8 <SDMMC_GetCmdResp2+0x90>)
 8009990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	20000000 	.word	0x20000000
 80099a4:	10624dd3 	.word	0x10624dd3
 80099a8:	002000c5 	.word	0x002000c5

080099ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099b4:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <SDMMC_GetCmdResp3+0x74>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a1a      	ldr	r2, [pc, #104]	; (8009a24 <SDMMC_GetCmdResp3+0x78>)
 80099ba:	fba2 2303 	umull	r2, r3, r2, r3
 80099be:	0a5b      	lsrs	r3, r3, #9
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	fb02 f303 	mul.w	r3, r2, r3
 80099c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1e5a      	subs	r2, r3, #1
 80099ce:	60fa      	str	r2, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099d8:	e01b      	b.n	8009a12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0ef      	beq.n	80099ca <SDMMC_GetCmdResp3+0x1e>
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1ea      	bne.n	80099ca <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2204      	movs	r2, #4
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a06:	2304      	movs	r3, #4
 8009a08:	e003      	b.n	8009a12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a06      	ldr	r2, [pc, #24]	; (8009a28 <SDMMC_GetCmdResp3+0x7c>)
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	20000000 	.word	0x20000000
 8009a24:	10624dd3 	.word	0x10624dd3
 8009a28:	002000c5 	.word	0x002000c5

08009a2c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	460b      	mov	r3, r1
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a3a:	4b35      	ldr	r3, [pc, #212]	; (8009b10 <SDMMC_GetCmdResp6+0xe4>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a35      	ldr	r2, [pc, #212]	; (8009b14 <SDMMC_GetCmdResp6+0xe8>)
 8009a40:	fba2 2303 	umull	r2, r3, r2, r3
 8009a44:	0a5b      	lsrs	r3, r3, #9
 8009a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4a:	fb02 f303 	mul.w	r3, r2, r3
 8009a4e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	1e5a      	subs	r2, r3, #1
 8009a54:	61fa      	str	r2, [r7, #28]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a5e:	e052      	b.n	8009b06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0ef      	beq.n	8009a50 <SDMMC_GetCmdResp6+0x24>
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1ea      	bne.n	8009a50 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7e:	f003 0304 	and.w	r3, r3, #4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2204      	movs	r2, #4
 8009a8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	e03a      	b.n	8009b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e02f      	b.n	8009b06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff fb60 	bl	800916c <SDMMC_GetCommandResponse>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d001      	beq.n	8009aba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e025      	b.n	8009b06 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a16      	ldr	r2, [pc, #88]	; (8009b18 <SDMMC_GetCmdResp6+0xec>)
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff fb5f 	bl	8009186 <SDMMC_GetResponse>
 8009ac8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d106      	bne.n	8009ae2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	0c1b      	lsrs	r3, r3, #16
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e011      	b.n	8009b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009af0:	e009      	b.n	8009b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b00:	e001      	b.n	8009b06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3720      	adds	r7, #32
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000000 	.word	0x20000000
 8009b14:	10624dd3 	.word	0x10624dd3
 8009b18:	002000c5 	.word	0x002000c5

08009b1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b24:	4b22      	ldr	r3, [pc, #136]	; (8009bb0 <SDMMC_GetCmdResp7+0x94>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a22      	ldr	r2, [pc, #136]	; (8009bb4 <SDMMC_GetCmdResp7+0x98>)
 8009b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2e:	0a5b      	lsrs	r3, r3, #9
 8009b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b34:	fb02 f303 	mul.w	r3, r2, r3
 8009b38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	1e5a      	subs	r2, r3, #1
 8009b3e:	60fa      	str	r2, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b48:	e02c      	b.n	8009ba4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0ef      	beq.n	8009b3a <SDMMC_GetCmdResp7+0x1e>
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1ea      	bne.n	8009b3a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d004      	beq.n	8009b7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2204      	movs	r2, #4
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b76:	2304      	movs	r3, #4
 8009b78:	e014      	b.n	8009ba4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e009      	b.n	8009ba4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2240      	movs	r2, #64	; 0x40
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ba2:	2300      	movs	r3, #0

}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	20000000 	.word	0x20000000
 8009bb4:	10624dd3 	.word	0x10624dd3

08009bb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <SDMMC_GetCmdError+0x50>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a11      	ldr	r2, [pc, #68]	; (8009c0c <SDMMC_GetCmdError+0x54>)
 8009bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bca:	0a5b      	lsrs	r3, r3, #9
 8009bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd0:	fb02 f303 	mul.w	r3, r2, r3
 8009bd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	1e5a      	subs	r2, r3, #1
 8009bda:	60fa      	str	r2, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009be0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009be4:	e009      	b.n	8009bfa <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0f1      	beq.n	8009bd6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a06      	ldr	r2, [pc, #24]	; (8009c10 <SDMMC_GetCmdError+0x58>)
 8009bf6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20000000 	.word	0x20000000
 8009c0c:	10624dd3 	.word	0x10624dd3
 8009c10:	002000c5 	.word	0x002000c5

08009c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c14:	b084      	sub	sp, #16
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	f107 001c 	add.w	r0, r7, #28
 8009c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 faf6 	bl	800b224 <USB_CoreReset>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8009c4e:	e005      	b.n	8009c5c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c68:	b004      	add	sp, #16
 8009c6a:	4770      	bx	lr

08009c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d165      	bne.n	8009d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	4a3e      	ldr	r2, [pc, #248]	; (8009d7c <USB_SetTurnaroundTime+0x110>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d906      	bls.n	8009c96 <USB_SetTurnaroundTime+0x2a>
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4a3d      	ldr	r2, [pc, #244]	; (8009d80 <USB_SetTurnaroundTime+0x114>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d202      	bcs.n	8009c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009c90:	230f      	movs	r3, #15
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	e05c      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	4a39      	ldr	r2, [pc, #228]	; (8009d80 <USB_SetTurnaroundTime+0x114>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d306      	bcc.n	8009cac <USB_SetTurnaroundTime+0x40>
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	4a38      	ldr	r2, [pc, #224]	; (8009d84 <USB_SetTurnaroundTime+0x118>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d202      	bcs.n	8009cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ca6:	230e      	movs	r3, #14
 8009ca8:	617b      	str	r3, [r7, #20]
 8009caa:	e051      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4a35      	ldr	r2, [pc, #212]	; (8009d84 <USB_SetTurnaroundTime+0x118>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d306      	bcc.n	8009cc2 <USB_SetTurnaroundTime+0x56>
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4a34      	ldr	r2, [pc, #208]	; (8009d88 <USB_SetTurnaroundTime+0x11c>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d202      	bcs.n	8009cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009cbc:	230d      	movs	r3, #13
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	e046      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	4a30      	ldr	r2, [pc, #192]	; (8009d88 <USB_SetTurnaroundTime+0x11c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d306      	bcc.n	8009cd8 <USB_SetTurnaroundTime+0x6c>
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4a2f      	ldr	r2, [pc, #188]	; (8009d8c <USB_SetTurnaroundTime+0x120>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d802      	bhi.n	8009cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	e03b      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	4a2c      	ldr	r2, [pc, #176]	; (8009d8c <USB_SetTurnaroundTime+0x120>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d906      	bls.n	8009cee <USB_SetTurnaroundTime+0x82>
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	4a2b      	ldr	r2, [pc, #172]	; (8009d90 <USB_SetTurnaroundTime+0x124>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d802      	bhi.n	8009cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ce8:	230b      	movs	r3, #11
 8009cea:	617b      	str	r3, [r7, #20]
 8009cec:	e030      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	4a27      	ldr	r2, [pc, #156]	; (8009d90 <USB_SetTurnaroundTime+0x124>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d906      	bls.n	8009d04 <USB_SetTurnaroundTime+0x98>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	4a26      	ldr	r2, [pc, #152]	; (8009d94 <USB_SetTurnaroundTime+0x128>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d802      	bhi.n	8009d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009cfe:	230a      	movs	r3, #10
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	e025      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4a23      	ldr	r2, [pc, #140]	; (8009d94 <USB_SetTurnaroundTime+0x128>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d906      	bls.n	8009d1a <USB_SetTurnaroundTime+0xae>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4a22      	ldr	r2, [pc, #136]	; (8009d98 <USB_SetTurnaroundTime+0x12c>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d202      	bcs.n	8009d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009d14:	2309      	movs	r3, #9
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	e01a      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4a1e      	ldr	r2, [pc, #120]	; (8009d98 <USB_SetTurnaroundTime+0x12c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d306      	bcc.n	8009d30 <USB_SetTurnaroundTime+0xc4>
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	4a1d      	ldr	r2, [pc, #116]	; (8009d9c <USB_SetTurnaroundTime+0x130>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d802      	bhi.n	8009d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	617b      	str	r3, [r7, #20]
 8009d2e:	e00f      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4a1a      	ldr	r2, [pc, #104]	; (8009d9c <USB_SetTurnaroundTime+0x130>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d906      	bls.n	8009d46 <USB_SetTurnaroundTime+0xda>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	4a19      	ldr	r2, [pc, #100]	; (8009da0 <USB_SetTurnaroundTime+0x134>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d202      	bcs.n	8009d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d40:	2307      	movs	r3, #7
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e004      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d46:	2306      	movs	r3, #6
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	e001      	b.n	8009d50 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d4c:	2309      	movs	r3, #9
 8009d4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68da      	ldr	r2, [r3, #12]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	029b      	lsls	r3, r3, #10
 8009d64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	371c      	adds	r7, #28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	00d8acbf 	.word	0x00d8acbf
 8009d80:	00e4e1c0 	.word	0x00e4e1c0
 8009d84:	00f42400 	.word	0x00f42400
 8009d88:	01067380 	.word	0x01067380
 8009d8c:	011a499f 	.word	0x011a499f
 8009d90:	01312cff 	.word	0x01312cff
 8009d94:	014ca43f 	.word	0x014ca43f
 8009d98:	016e3600 	.word	0x016e3600
 8009d9c:	01a6ab1f 	.word	0x01a6ab1f
 8009da0:	01e84800 	.word	0x01e84800

08009da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f043 0201 	orr.w	r2, r3, #1
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f023 0201 	bic.w	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d115      	bne.n	8009e36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e16:	2001      	movs	r0, #1
 8009e18:	f7f7 fbb0 	bl	800157c <HAL_Delay>
      ms++;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 f985 	bl	800b132 <USB_GetMode>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d01e      	beq.n	8009e6c <USB_SetCurrentMode+0x84>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b31      	cmp	r3, #49	; 0x31
 8009e32:	d9f0      	bls.n	8009e16 <USB_SetCurrentMode+0x2e>
 8009e34:	e01a      	b.n	8009e6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e36:	78fb      	ldrb	r3, [r7, #3]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d115      	bne.n	8009e68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f7f7 fb97 	bl	800157c <HAL_Delay>
      ms++;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3301      	adds	r3, #1
 8009e52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 f96c 	bl	800b132 <USB_GetMode>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <USB_SetCurrentMode+0x84>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b31      	cmp	r3, #49	; 0x31
 8009e64:	d9f0      	bls.n	8009e48 <USB_SetCurrentMode+0x60>
 8009e66:	e001      	b.n	8009e6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e005      	b.n	8009e78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b32      	cmp	r3, #50	; 0x32
 8009e70:	d101      	bne.n	8009e76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e000      	b.n	8009e78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e80:	b084      	sub	sp, #16
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b086      	sub	sp, #24
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	e009      	b.n	8009eb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	3340      	adds	r3, #64	; 0x40
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b0e      	cmp	r3, #14
 8009eb8:	d9f2      	bls.n	8009ea0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d11c      	bne.n	8009efa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ece:	f043 0302 	orr.w	r3, r3, #2
 8009ed2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	e005      	b.n	8009f06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	2300      	movs	r3, #0
 8009f10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f18:	4619      	mov	r1, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f20:	461a      	mov	r2, r3
 8009f22:	680b      	ldr	r3, [r1, #0]
 8009f24:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f26:	2103      	movs	r1, #3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f959 	bl	800a1e0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f2e:	2110      	movs	r1, #16
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f8f1 	bl	800a118 <USB_FlushTxFifo>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f91d 	bl	800a180 <USB_FlushRxFifo>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f56:	461a      	mov	r2, r3
 8009f58:	2300      	movs	r3, #0
 8009f5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f62:	461a      	mov	r2, r3
 8009f64:	2300      	movs	r3, #0
 8009f66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6e:	461a      	mov	r2, r3
 8009f70:	2300      	movs	r3, #0
 8009f72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f74:	2300      	movs	r3, #0
 8009f76:	613b      	str	r3, [r7, #16]
 8009f78:	e043      	b.n	800a002 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f90:	d118      	bne.n	8009fc4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	e013      	b.n	8009fd6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	e008      	b.n	8009fd6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ffa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	3301      	adds	r3, #1
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	429a      	cmp	r2, r3
 800a008:	d3b7      	bcc.n	8009f7a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	613b      	str	r3, [r7, #16]
 800a00e:	e043      	b.n	800a098 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a026:	d118      	bne.n	800a05a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10a      	bne.n	800a044 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03a:	461a      	mov	r2, r3
 800a03c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	e013      	b.n	800a06c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a050:	461a      	mov	r2, r3
 800a052:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	e008      	b.n	800a06c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a066:	461a      	mov	r2, r3
 800a068:	2300      	movs	r3, #0
 800a06a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a078:	461a      	mov	r2, r3
 800a07a:	2300      	movs	r3, #0
 800a07c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	461a      	mov	r2, r3
 800a08c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a090:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3301      	adds	r3, #1
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d3b7      	bcc.n	800a010 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a0c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f043 0210 	orr.w	r2, r3, #16
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <USB_DevInit+0x294>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	f043 0208 	orr.w	r2, r3, #8
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d107      	bne.n	800a102 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0fa:	f043 0304 	orr.w	r3, r3, #4
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a102:	7dfb      	ldrb	r3, [r7, #23]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a10e:	b004      	add	sp, #16
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	803c3800 	.word	0x803c3800

0800a118 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3301      	adds	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4a13      	ldr	r2, [pc, #76]	; (800a17c <USB_FlushTxFifo+0x64>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d901      	bls.n	800a138 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e01b      	b.n	800a170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	daf2      	bge.n	800a126 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	019b      	lsls	r3, r3, #6
 800a148:	f043 0220 	orr.w	r2, r3, #32
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3301      	adds	r3, #1
 800a154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	4a08      	ldr	r2, [pc, #32]	; (800a17c <USB_FlushTxFifo+0x64>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d901      	bls.n	800a162 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e006      	b.n	800a170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d0f0      	beq.n	800a150 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	00030d40 	.word	0x00030d40

0800a180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3301      	adds	r3, #1
 800a190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4a11      	ldr	r2, [pc, #68]	; (800a1dc <USB_FlushRxFifo+0x5c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d901      	bls.n	800a19e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e018      	b.n	800a1d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	daf2      	bge.n	800a18c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2210      	movs	r2, #16
 800a1ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4a08      	ldr	r2, [pc, #32]	; (800a1dc <USB_FlushRxFifo+0x5c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d901      	bls.n	800a1c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e006      	b.n	800a1d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	f003 0310 	and.w	r3, r3, #16
 800a1ca:	2b10      	cmp	r3, #16
 800a1cc:	d0f0      	beq.n	800a1b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	00030d40 	.word	0x00030d40

0800a1e0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a200:	4313      	orrs	r3, r2
 800a202:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a212:	b480      	push	{r7}
 800a214:	b087      	sub	sp, #28
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f003 0306 	and.w	r3, r3, #6
 800a22a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d002      	beq.n	800a238 <USB_GetDevSpeed+0x26>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b06      	cmp	r3, #6
 800a236:	d102      	bne.n	800a23e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a238:	2302      	movs	r3, #2
 800a23a:	75fb      	strb	r3, [r7, #23]
 800a23c:	e001      	b.n	800a242 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a23e:	230f      	movs	r3, #15
 800a240:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a242:	7dfb      	ldrb	r3, [r7, #23]
}
 800a244:	4618      	mov	r0, r3
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	785b      	ldrb	r3, [r3, #1]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d13a      	bne.n	800a2e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a272:	69da      	ldr	r2, [r3, #28]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	f003 030f 	and.w	r3, r3, #15
 800a27c:	2101      	movs	r1, #1
 800a27e:	fa01 f303 	lsl.w	r3, r1, r3
 800a282:	b29b      	uxth	r3, r3
 800a284:	68f9      	ldr	r1, [r7, #12]
 800a286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a28a:	4313      	orrs	r3, r2
 800a28c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d155      	bne.n	800a350 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	791b      	ldrb	r3, [r3, #4]
 800a2be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	059b      	lsls	r3, r3, #22
 800a2c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	0151      	lsls	r1, r2, #5
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	e036      	b.n	800a350 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e8:	69da      	ldr	r2, [r3, #28]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	f003 030f 	and.w	r3, r3, #15
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2f8:	041b      	lsls	r3, r3, #16
 800a2fa:	68f9      	ldr	r1, [r7, #12]
 800a2fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a300:	4313      	orrs	r3, r2
 800a302:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d11a      	bne.n	800a350 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	791b      	ldrb	r3, [r3, #4]
 800a334:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a336:	430b      	orrs	r3, r1
 800a338:	4313      	orrs	r3, r2
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	0151      	lsls	r1, r2, #5
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	440a      	add	r2, r1
 800a342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a34a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a34e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
	...

0800a360 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	785b      	ldrb	r3, [r3, #1]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d161      	bne.n	800a440 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a38e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a392:	d11f      	bne.n	800a3d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	0151      	lsls	r1, r2, #5
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	440a      	add	r2, r1
 800a3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	68f9      	ldr	r1, [r7, #12]
 800a3f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fe:	69da      	ldr	r2, [r3, #28]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	f003 030f 	and.w	r3, r3, #15
 800a408:	2101      	movs	r1, #1
 800a40a:	fa01 f303 	lsl.w	r3, r1, r3
 800a40e:	b29b      	uxth	r3, r3
 800a410:	43db      	mvns	r3, r3
 800a412:	68f9      	ldr	r1, [r7, #12]
 800a414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a418:	4013      	ands	r3, r2
 800a41a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	0159      	lsls	r1, r3, #5
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	440b      	add	r3, r1
 800a432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a436:	4619      	mov	r1, r3
 800a438:	4b35      	ldr	r3, [pc, #212]	; (800a510 <USB_DeactivateEndpoint+0x1b0>)
 800a43a:	4013      	ands	r3, r2
 800a43c:	600b      	str	r3, [r1, #0]
 800a43e:	e060      	b.n	800a502 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a456:	d11f      	bne.n	800a498 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	0151      	lsls	r1, r2, #5
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	440a      	add	r2, r1
 800a46e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a472:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a476:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	0151      	lsls	r1, r2, #5
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	440a      	add	r2, r1
 800a48e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f003 030f 	and.w	r3, r3, #15
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ae:	041b      	lsls	r3, r3, #16
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	68f9      	ldr	r1, [r7, #12]
 800a4b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c2:	69da      	ldr	r2, [r3, #28]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d2:	041b      	lsls	r3, r3, #16
 800a4d4:	43db      	mvns	r3, r3
 800a4d6:	68f9      	ldr	r1, [r7, #12]
 800a4d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4dc:	4013      	ands	r3, r2
 800a4de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	0159      	lsls	r1, r3, #5
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	440b      	add	r3, r1
 800a4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4b05      	ldr	r3, [pc, #20]	; (800a514 <USB_DeactivateEndpoint+0x1b4>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	ec337800 	.word	0xec337800
 800a514:	eff37800 	.word	0xeff37800

0800a518 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	2b01      	cmp	r3, #1
 800a532:	f040 810a 	bne.w	800a74a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d132      	bne.n	800a5a4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a55c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	440a      	add	r2, r1
 800a578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a57c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	0151      	lsls	r1, r2, #5
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	440a      	add	r2, r1
 800a598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a59c:	0cdb      	lsrs	r3, r3, #19
 800a59e:	04db      	lsls	r3, r3, #19
 800a5a0:	6113      	str	r3, [r2, #16]
 800a5a2:	e074      	b.n	800a68e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	0151      	lsls	r1, r2, #5
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	440a      	add	r2, r1
 800a5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5be:	0cdb      	lsrs	r3, r3, #19
 800a5c0:	04db      	lsls	r3, r3, #19
 800a5c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	0151      	lsls	r1, r2, #5
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	440a      	add	r2, r1
 800a5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	6999      	ldr	r1, [r3, #24]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	440b      	add	r3, r1
 800a600:	1e59      	subs	r1, r3, #1
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	fbb1 f3f3 	udiv	r3, r1, r3
 800a60a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a60c:	4b9e      	ldr	r3, [pc, #632]	; (800a888 <USB_EPStartXfer+0x370>)
 800a60e:	400b      	ands	r3, r1
 800a610:	6939      	ldr	r1, [r7, #16]
 800a612:	0148      	lsls	r0, r1, #5
 800a614:	6979      	ldr	r1, [r7, #20]
 800a616:	4401      	add	r1, r0
 800a618:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a61c:	4313      	orrs	r3, r2
 800a61e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	015a      	lsls	r2, r3, #5
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	4413      	add	r3, r2
 800a628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62c:	691a      	ldr	r2, [r3, #16]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a636:	6939      	ldr	r1, [r7, #16]
 800a638:	0148      	lsls	r0, r1, #5
 800a63a:	6979      	ldr	r1, [r7, #20]
 800a63c:	4401      	add	r1, r0
 800a63e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a642:	4313      	orrs	r3, r2
 800a644:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	791b      	ldrb	r3, [r3, #4]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d11f      	bne.n	800a68e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	0151      	lsls	r1, r2, #5
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	440a      	add	r2, r1
 800a664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a668:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a66c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	0151      	lsls	r1, r2, #5
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	440a      	add	r2, r1
 800a684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a68c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	0151      	lsls	r1, r2, #5
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6ac:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	791b      	ldrb	r3, [r3, #4]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d015      	beq.n	800a6e2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 8106 	beq.w	800a8cc <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d6:	6979      	ldr	r1, [r7, #20]
 800a6d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	634b      	str	r3, [r1, #52]	; 0x34
 800a6e0:	e0f4      	b.n	800a8cc <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d110      	bne.n	800a714 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	0151      	lsls	r1, r2, #5
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	440a      	add	r2, r1
 800a708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a70c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	e00f      	b.n	800a734 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	0151      	lsls	r1, r2, #5
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	440a      	add	r2, r1
 800a72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a72e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a732:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	6919      	ldr	r1, [r3, #16]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	b29b      	uxth	r3, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fa94 	bl	800ac70 <USB_WritePacket>
 800a748:	e0c0      	b.n	800a8cc <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a764:	0cdb      	lsrs	r3, r3, #19
 800a766:	04db      	lsls	r3, r3, #19
 800a768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	0151      	lsls	r1, r2, #5
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	440a      	add	r2, r1
 800a780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a78c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d123      	bne.n	800a7de <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a2:	691a      	ldr	r2, [r3, #16]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7ac:	6939      	ldr	r1, [r7, #16]
 800a7ae:	0148      	lsls	r0, r1, #5
 800a7b0:	6979      	ldr	r1, [r7, #20]
 800a7b2:	4401      	add	r1, r0
 800a7b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7da:	6113      	str	r3, [r2, #16]
 800a7dc:	e037      	b.n	800a84e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	699a      	ldr	r2, [r3, #24]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	1e5a      	subs	r2, r3, #1
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	89fa      	ldrh	r2, [r7, #14]
 800a7fa:	fb03 f202 	mul.w	r2, r3, r2
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80e:	691a      	ldr	r2, [r3, #16]
 800a810:	89fb      	ldrh	r3, [r7, #14]
 800a812:	04d9      	lsls	r1, r3, #19
 800a814:	4b1c      	ldr	r3, [pc, #112]	; (800a888 <USB_EPStartXfer+0x370>)
 800a816:	400b      	ands	r3, r1
 800a818:	6939      	ldr	r1, [r7, #16]
 800a81a:	0148      	lsls	r0, r1, #5
 800a81c:	6979      	ldr	r1, [r7, #20]
 800a81e:	4401      	add	r1, r0
 800a820:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a824:	4313      	orrs	r3, r2
 800a826:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a834:	691a      	ldr	r2, [r3, #16]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a83e:	6939      	ldr	r1, [r7, #16]
 800a840:	0148      	lsls	r0, r1, #5
 800a842:	6979      	ldr	r1, [r7, #20]
 800a844:	4401      	add	r1, r0
 800a846:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a84a:	4313      	orrs	r3, r2
 800a84c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	791b      	ldrb	r3, [r3, #4]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d12a      	bne.n	800a8ac <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a862:	2b00      	cmp	r3, #0
 800a864:	d112      	bne.n	800a88c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	0151      	lsls	r1, r2, #5
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	440a      	add	r2, r1
 800a87c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	e011      	b.n	800a8ac <USB_EPStartXfer+0x394>
 800a888:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	0151      	lsls	r1, r2, #5
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	440a      	add	r2, r1
 800a8c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop

0800a8d8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	785b      	ldrb	r3, [r3, #1]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	f040 80ab 	bne.w	800aa4c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d132      	bne.n	800a964 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	015a      	lsls	r2, r3, #5
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4413      	add	r3, r2
 800a906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	0151      	lsls	r1, r2, #5
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	440a      	add	r2, r1
 800a914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a918:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a91c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a920:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	0151      	lsls	r1, r2, #5
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	440a      	add	r2, r1
 800a938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a93c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	0151      	lsls	r1, r2, #5
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	440a      	add	r2, r1
 800a958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95c:	0cdb      	lsrs	r3, r3, #19
 800a95e:	04db      	lsls	r3, r3, #19
 800a960:	6113      	str	r3, [r2, #16]
 800a962:	e04e      	b.n	800aa02 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	0151      	lsls	r1, r2, #5
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	440a      	add	r2, r1
 800a97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a97e:	0cdb      	lsrs	r3, r3, #19
 800a980:	04db      	lsls	r3, r3, #19
 800a982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	0151      	lsls	r1, r2, #5
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	440a      	add	r2, r1
 800a99a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a99e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	699a      	ldr	r2, [r3, #24]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d903      	bls.n	800a9bc <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	68da      	ldr	r2, [r3, #12]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	0151      	lsls	r1, r2, #5
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	440a      	add	r2, r1
 800a9d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	0148      	lsls	r0, r1, #5
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	4401      	add	r1, r0
 800a9fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	0151      	lsls	r1, r2, #5
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	440a      	add	r2, r1
 800aa18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa20:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d071      	beq.n	800ab0e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	f003 030f 	and.w	r3, r3, #15
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa40:	68f9      	ldr	r1, [r7, #12]
 800aa42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa46:	4313      	orrs	r3, r2
 800aa48:	634b      	str	r3, [r1, #52]	; 0x34
 800aa4a:	e060      	b.n	800ab0e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa66:	0cdb      	lsrs	r3, r3, #19
 800aa68:	04db      	lsls	r3, r3, #19
 800aa6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa8e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	68da      	ldr	r2, [r3, #12]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	0148      	lsls	r0, r1, #5
 800aae2:	68f9      	ldr	r1, [r7, #12]
 800aae4:	4401      	add	r1, r0
 800aae6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aaea:	4313      	orrs	r3, r2
 800aaec:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d14a      	bne.n	800abd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab52:	f040 8086 	bne.w	800ac62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	7812      	ldrb	r2, [r2, #0]
 800ab6a:	0151      	lsls	r1, r2, #5
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	440a      	add	r2, r1
 800ab70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	7812      	ldrb	r2, [r2, #0]
 800ab8e:	0151      	lsls	r1, r2, #5
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	440a      	add	r2, r1
 800ab94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3301      	adds	r3, #1
 800aba2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f242 7210 	movw	r2, #10000	; 0x2710
 800abaa:	4293      	cmp	r3, r2
 800abac:	d902      	bls.n	800abb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	75fb      	strb	r3, [r7, #23]
          break;
 800abb2:	e056      	b.n	800ac62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abcc:	d0e7      	beq.n	800ab9e <USB_EPStopXfer+0x82>
 800abce:	e048      	b.n	800ac62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abe8:	d13b      	bne.n	800ac62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	7812      	ldrb	r2, [r2, #0]
 800abfe:	0151      	lsls	r1, r2, #5
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	440a      	add	r2, r1
 800ac04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	7812      	ldrb	r2, [r2, #0]
 800ac22:	0151      	lsls	r1, r2, #5
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	440a      	add	r2, r1
 800ac28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3301      	adds	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d902      	bls.n	800ac48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	75fb      	strb	r3, [r7, #23]
          break;
 800ac46:	e00c      	b.n	800ac62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac60:	d0e7      	beq.n	800ac32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	371c      	adds	r7, #28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b089      	sub	sp, #36	; 0x24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	460b      	mov	r3, r1
 800ac80:	71fb      	strb	r3, [r7, #7]
 800ac82:	4613      	mov	r3, r2
 800ac84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ac8e:	88bb      	ldrh	r3, [r7, #4]
 800ac90:	3303      	adds	r3, #3
 800ac92:	089b      	lsrs	r3, r3, #2
 800ac94:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ac96:	2300      	movs	r3, #0
 800ac98:	61bb      	str	r3, [r7, #24]
 800ac9a:	e018      	b.n	800acce <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	031a      	lsls	r2, r3, #12
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca8:	461a      	mov	r2, r3
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6013      	str	r3, [r2, #0]
    pSrc++;
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	3301      	adds	r3, #1
 800acb4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	3301      	adds	r3, #1
 800acba:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	3301      	adds	r3, #1
 800acc0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	3301      	adds	r3, #1
 800acc6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	3301      	adds	r3, #1
 800accc:	61bb      	str	r3, [r7, #24]
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d3e2      	bcc.n	800ac9c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3724      	adds	r7, #36	; 0x24
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b08b      	sub	sp, #44	; 0x2c
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800acfa:	88fb      	ldrh	r3, [r7, #6]
 800acfc:	089b      	lsrs	r3, r3, #2
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	f003 0303 	and.w	r3, r3, #3
 800ad08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	623b      	str	r3, [r7, #32]
 800ad0e:	e014      	b.n	800ad3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	3301      	adds	r3, #1
 800ad20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	3301      	adds	r3, #1
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	3301      	adds	r3, #1
 800ad32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	3301      	adds	r3, #1
 800ad38:	623b      	str	r3, [r7, #32]
 800ad3a:	6a3a      	ldr	r2, [r7, #32]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d3e6      	bcc.n	800ad10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ad42:	8bfb      	ldrh	r3, [r7, #30]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d01e      	beq.n	800ad86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad52:	461a      	mov	r2, r3
 800ad54:	f107 0310 	add.w	r3, r7, #16
 800ad58:	6812      	ldr	r2, [r2, #0]
 800ad5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	fa22 f303 	lsr.w	r3, r2, r3
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	701a      	strb	r2, [r3, #0]
      i++;
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	3301      	adds	r3, #1
 800ad72:	623b      	str	r3, [r7, #32]
      pDest++;
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	3301      	adds	r3, #1
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ad7a:	8bfb      	ldrh	r3, [r7, #30]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ad80:	8bfb      	ldrh	r3, [r7, #30]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1ea      	bne.n	800ad5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	372c      	adds	r7, #44	; 0x2c
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d12c      	bne.n	800ae0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	db12      	blt.n	800ade8 <USB_EPSetStall+0x54>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00f      	beq.n	800ade8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	0151      	lsls	r1, r2, #5
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	440a      	add	r2, r1
 800adde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ade6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	0151      	lsls	r1, r2, #5
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	440a      	add	r2, r1
 800adfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	e02b      	b.n	800ae62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	015a      	lsls	r2, r3, #5
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	4413      	add	r3, r2
 800ae12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	db12      	blt.n	800ae42 <USB_EPSetStall+0xae>
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00f      	beq.n	800ae42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	0151      	lsls	r1, r2, #5
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	440a      	add	r2, r1
 800ae38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	0151      	lsls	r1, r2, #5
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	440a      	add	r2, r1
 800ae58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	785b      	ldrb	r3, [r3, #1]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d128      	bne.n	800aede <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aeaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	791b      	ldrb	r3, [r3, #4]
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d003      	beq.n	800aebc <USB_EPClearStall+0x4c>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	791b      	ldrb	r3, [r3, #4]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d138      	bne.n	800af2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	0151      	lsls	r1, r2, #5
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	440a      	add	r2, r1
 800aed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	e027      	b.n	800af2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	0151      	lsls	r1, r2, #5
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	440a      	add	r2, r1
 800aef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aef8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aefc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	791b      	ldrb	r3, [r3, #4]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d003      	beq.n	800af0e <USB_EPClearStall+0x9e>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	791b      	ldrb	r3, [r3, #4]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d10f      	bne.n	800af2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	015a      	lsls	r2, r3, #5
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	4413      	add	r3, r2
 800af16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	0151      	lsls	r1, r2, #5
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	440a      	add	r2, r1
 800af24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800af5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	78fb      	ldrb	r3, [r7, #3]
 800af6a:	011b      	lsls	r3, r3, #4
 800af6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af76:	4313      	orrs	r3, r2
 800af78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afb6:	f023 0302 	bic.w	r3, r3, #2
 800afba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afca:	b480      	push	{r7}
 800afcc:	b085      	sub	sp, #20
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afe4:	f023 0303 	bic.w	r3, r3, #3
 800afe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aff8:	f043 0302 	orr.w	r3, r3, #2
 800affc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	4013      	ands	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b024:	68fb      	ldr	r3, [r7, #12]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	4013      	ands	r3, r2
 800b054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	0c1b      	lsrs	r3, r3, #16
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b066:	b480      	push	{r7}
 800b068:	b085      	sub	sp, #20
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	4013      	ands	r3, r2
 800b088:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	b29b      	uxth	r3, r3
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b0aa:	78fb      	ldrb	r3, [r7, #3]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b087      	sub	sp, #28
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b0fa:	78fb      	ldrb	r3, [r7, #3]
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	fa22 f303 	lsr.w	r3, r2, r3
 800b106:	01db      	lsls	r3, r3, #7
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	4013      	ands	r3, r2
 800b122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b124:	68bb      	ldr	r3, [r7, #8]
}
 800b126:	4618      	mov	r0, r3
 800b128:	371c      	adds	r7, #28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	f003 0301 	and.w	r3, r3, #1
}
 800b142:	4618      	mov	r0, r3
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b14e:	b480      	push	{r7}
 800b150:	b085      	sub	sp, #20
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b168:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b16c:	f023 0307 	bic.w	r3, r3, #7
 800b170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	333c      	adds	r3, #60	; 0x3c
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	4a1c      	ldr	r2, [pc, #112]	; (800b220 <USB_EP0_OutStart+0x8c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d90a      	bls.n	800b1ca <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1c4:	d101      	bne.n	800b1ca <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	e024      	b.n	800b214 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1f8:	f043 0318 	orr.w	r3, r3, #24
 800b1fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b20c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b210:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	4f54300a 	.word	0x4f54300a

0800b224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3301      	adds	r3, #1
 800b234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	4a13      	ldr	r2, [pc, #76]	; (800b288 <USB_CoreReset+0x64>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d901      	bls.n	800b242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e01b      	b.n	800b27a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	daf2      	bge.n	800b230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f043 0201 	orr.w	r2, r3, #1
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3301      	adds	r3, #1
 800b25e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4a09      	ldr	r2, [pc, #36]	; (800b288 <USB_CoreReset+0x64>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d901      	bls.n	800b26c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e006      	b.n	800b27a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b01      	cmp	r3, #1
 800b276:	d0f0      	beq.n	800b25a <USB_CoreReset+0x36>

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	00030d40 	.word	0x00030d40

0800b28c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b290:	4904      	ldr	r1, [pc, #16]	; (800b2a4 <MX_FATFS_Init+0x18>)
 800b292:	4805      	ldr	r0, [pc, #20]	; (800b2a8 <MX_FATFS_Init+0x1c>)
 800b294:	f004 fd70 	bl	800fd78 <FATFS_LinkDriver>
 800b298:	4603      	mov	r3, r0
 800b29a:	461a      	mov	r2, r3
 800b29c:	4b03      	ldr	r3, [pc, #12]	; (800b2ac <MX_FATFS_Init+0x20>)
 800b29e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b2a0:	bf00      	nop
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	20000510 	.word	0x20000510
 800b2a8:	08011b98 	.word	0x08011b98
 800b2ac:	2000050c 	.word	0x2000050c

0800b2b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b2b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b2ca:	f000 f879 	bl	800b3c0 <BSP_SD_IsDetected>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d001      	beq.n	800b2d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	e012      	b.n	800b2fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b2d8:	480b      	ldr	r0, [pc, #44]	; (800b308 <BSP_SD_Init+0x48>)
 800b2da:	f7fa fc6b 	bl	8005bb4 <HAL_SD_Init>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d109      	bne.n	800b2fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b2e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b2ec:	4806      	ldr	r0, [pc, #24]	; (800b308 <BSP_SD_Init+0x48>)
 800b2ee:	f7fb fb37 	bl	8006960 <HAL_SD_ConfigWideBusOperation>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	200002b8 	.word	0x200002b8

0800b30c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af02      	add	r7, sp, #8
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	68f9      	ldr	r1, [r7, #12]
 800b328:	4806      	ldr	r0, [pc, #24]	; (800b344 <BSP_SD_ReadBlocks+0x38>)
 800b32a:	f7fa fd6b 	bl	8005e04 <HAL_SD_ReadBlocks>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	200002b8 	.word	0x200002b8

0800b348 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	68f9      	ldr	r1, [r7, #12]
 800b364:	4806      	ldr	r0, [pc, #24]	; (800b380 <BSP_SD_WriteBlocks+0x38>)
 800b366:	f7fa fedf 	bl	8006128 <HAL_SD_WriteBlocks>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b374:	7dfb      	ldrb	r3, [r7, #23]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	200002b8 	.word	0x200002b8

0800b384 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b388:	4805      	ldr	r0, [pc, #20]	; (800b3a0 <BSP_SD_GetCardState+0x1c>)
 800b38a:	f7fb fbfd 	bl	8006b88 <HAL_SD_GetCardState>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b04      	cmp	r3, #4
 800b392:	bf14      	ite	ne
 800b394:	2301      	movne	r3, #1
 800b396:	2300      	moveq	r3, #0
 800b398:	b2db      	uxtb	r3, r3
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	200002b8 	.word	0x200002b8

0800b3a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b3ac:	6879      	ldr	r1, [r7, #4]
 800b3ae:	4803      	ldr	r0, [pc, #12]	; (800b3bc <BSP_SD_GetCardInfo+0x18>)
 800b3b0:	f7fb faaa 	bl	8006908 <HAL_SD_GetCardInfo>
}
 800b3b4:	bf00      	nop
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	200002b8 	.word	0x200002b8

0800b3c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b3ca:	f000 f80b 	bl	800b3e4 <BSP_PlatformIsDetected>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	b2db      	uxtb	r3, r3
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b3ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b3f6:	f7f6 fb89 	bl	8001b0c <HAL_GPIO_ReadPin>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800b400:	2300      	movs	r3, #0
 800b402:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b404:	79fb      	ldrb	r3, [r7, #7]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b41a:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <SD_CheckStatus+0x38>)
 800b41c:	2201      	movs	r2, #1
 800b41e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b420:	f7ff ffb0 	bl	800b384 <BSP_SD_GetCardState>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d107      	bne.n	800b43a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <SD_CheckStatus+0x38>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f023 0301 	bic.w	r3, r3, #1
 800b434:	b2da      	uxtb	r2, r3
 800b436:	4b04      	ldr	r3, [pc, #16]	; (800b448 <SD_CheckStatus+0x38>)
 800b438:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b43a:	4b03      	ldr	r3, [pc, #12]	; (800b448 <SD_CheckStatus+0x38>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b2db      	uxtb	r3, r3
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20000009 	.word	0x20000009

0800b44c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <SD_initialize+0x38>)
 800b458:	2201      	movs	r2, #1
 800b45a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b45c:	f7ff ff30 	bl	800b2c0 <BSP_SD_Init>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d107      	bne.n	800b476 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff ffd1 	bl	800b410 <SD_CheckStatus>
 800b46e:	4603      	mov	r3, r0
 800b470:	461a      	mov	r2, r3
 800b472:	4b04      	ldr	r3, [pc, #16]	; (800b484 <SD_initialize+0x38>)
 800b474:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b476:	4b03      	ldr	r3, [pc, #12]	; (800b484 <SD_initialize+0x38>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	b2db      	uxtb	r3, r3
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	20000009 	.word	0x20000009

0800b488 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff ffbb 	bl	800b410 <SD_CheckStatus>
 800b49a:	4603      	mov	r3, r0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
 800b4ae:	603b      	str	r3, [r7, #0]
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	68b8      	ldr	r0, [r7, #8]
 800b4c2:	f7ff ff23 	bl	800b30c <BSP_SD_ReadBlocks>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d107      	bne.n	800b4dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b4cc:	bf00      	nop
 800b4ce:	f7ff ff59 	bl	800b384 <BSP_SD_GetCardState>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1fa      	bne.n	800b4ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3718      	adds	r7, #24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b086      	sub	sp, #24
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	603b      	str	r3, [r7, #0]
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	68b8      	ldr	r0, [r7, #8]
 800b504:	f7ff ff20 	bl	800b348 <BSP_SD_WriteBlocks>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d107      	bne.n	800b51e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b50e:	bf00      	nop
 800b510:	f7ff ff38 	bl	800b384 <BSP_SD_GetCardState>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1fa      	bne.n	800b510 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08c      	sub	sp, #48	; 0x30
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	603a      	str	r2, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
 800b534:	460b      	mov	r3, r1
 800b536:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b53e:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <SD_ioctl+0xac>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d001      	beq.n	800b550 <SD_ioctl+0x28>
 800b54c:	2303      	movs	r3, #3
 800b54e:	e03c      	b.n	800b5ca <SD_ioctl+0xa2>

  switch (cmd)
 800b550:	79bb      	ldrb	r3, [r7, #6]
 800b552:	2b03      	cmp	r3, #3
 800b554:	d834      	bhi.n	800b5c0 <SD_ioctl+0x98>
 800b556:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <SD_ioctl+0x34>)
 800b558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55c:	0800b56d 	.word	0x0800b56d
 800b560:	0800b575 	.word	0x0800b575
 800b564:	0800b58d 	.word	0x0800b58d
 800b568:	0800b5a7 	.word	0x0800b5a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b572:	e028      	b.n	800b5c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b574:	f107 0308 	add.w	r3, r7, #8
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff ff13 	bl	800b3a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b57e:	6a3a      	ldr	r2, [r7, #32]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b58a:	e01c      	b.n	800b5c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b58c:	f107 0308 	add.w	r3, r7, #8
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff ff07 	bl	800b3a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	b29a      	uxth	r2, r3
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5a4:	e00f      	b.n	800b5c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5a6:	f107 0308 	add.w	r3, r7, #8
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff fefa 	bl	800b3a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	0a5a      	lsrs	r2, r3, #9
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5be:	e002      	b.n	800b5c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b5c0:	2304      	movs	r3, #4
 800b5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3730      	adds	r7, #48	; 0x30
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20000009 	.word	0x20000009

0800b5d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b5e8:	f005 fa02 	bl	80109f0 <USBD_static_malloc>
 800b5ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d105      	bne.n	800b600 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	e066      	b.n	800b6ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7c1b      	ldrb	r3, [r3, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d119      	bne.n	800b644 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b610:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b614:	2202      	movs	r2, #2
 800b616:	2181      	movs	r1, #129	; 0x81
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f004 ffd5 	bl	80105c8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b624:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b628:	2202      	movs	r2, #2
 800b62a:	2101      	movs	r1, #1
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f004 ffcb 	bl	80105c8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2210      	movs	r2, #16
 800b63e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b642:	e016      	b.n	800b672 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b644:	2340      	movs	r3, #64	; 0x40
 800b646:	2202      	movs	r2, #2
 800b648:	2181      	movs	r1, #129	; 0x81
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f004 ffbc 	bl	80105c8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b656:	2340      	movs	r3, #64	; 0x40
 800b658:	2202      	movs	r2, #2
 800b65a:	2101      	movs	r1, #1
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f004 ffb3 	bl	80105c8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2210      	movs	r2, #16
 800b66e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b672:	2308      	movs	r3, #8
 800b674:	2203      	movs	r2, #3
 800b676:	2182      	movs	r1, #130	; 0x82
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f004 ffa5 	bl	80105c8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7c1b      	ldrb	r3, [r3, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d109      	bne.n	800b6bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f005 f901 	bl	80108bc <USBD_LL_PrepareReceive>
 800b6ba:	e007      	b.n	800b6cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6c2:	2340      	movs	r3, #64	; 0x40
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f005 f8f8 	bl	80108bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b6e2:	2181      	movs	r1, #129	; 0x81
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f004 ffad 	bl	8010644 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f004 ffa6 	bl	8010644 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b700:	2182      	movs	r1, #130	; 0x82
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f004 ff9e 	bl	8010644 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00e      	beq.n	800b740 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b732:	4618      	mov	r0, r3
 800b734:	f005 f96a 	bl	8010a0c <USBD_static_free>
    pdev->pClassData = NULL;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b75c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b75e:	2300      	movs	r3, #0
 800b760:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b762:	2300      	movs	r3, #0
 800b764:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b770:	2303      	movs	r3, #3
 800b772:	e0af      	b.n	800b8d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d03f      	beq.n	800b800 <USBD_CDC_Setup+0xb4>
 800b780:	2b20      	cmp	r3, #32
 800b782:	f040 809f 	bne.w	800b8c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	88db      	ldrh	r3, [r3, #6]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d02e      	beq.n	800b7ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b25b      	sxtb	r3, r3
 800b794:	2b00      	cmp	r3, #0
 800b796:	da16      	bge.n	800b7c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b7a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	88d2      	ldrh	r2, [r2, #6]
 800b7aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	88db      	ldrh	r3, [r3, #6]
 800b7b0:	2b07      	cmp	r3, #7
 800b7b2:	bf28      	it	cs
 800b7b4:	2307      	movcs	r3, #7
 800b7b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	89fa      	ldrh	r2, [r7, #14]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f001 fb43 	bl	800ce4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b7c4:	e085      	b.n	800b8d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	785a      	ldrb	r2, [r3, #1]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	88db      	ldrh	r3, [r3, #6]
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b7dc:	6939      	ldr	r1, [r7, #16]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	88db      	ldrh	r3, [r3, #6]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fb5c 	bl	800cea2 <USBD_CtlPrepareRx>
      break;
 800b7ea:	e072      	b.n	800b8d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	7850      	ldrb	r0, [r2, #1]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	4798      	blx	r3
      break;
 800b7fe:	e068      	b.n	800b8d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	785b      	ldrb	r3, [r3, #1]
 800b804:	2b0b      	cmp	r3, #11
 800b806:	d852      	bhi.n	800b8ae <USBD_CDC_Setup+0x162>
 800b808:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <USBD_CDC_Setup+0xc4>)
 800b80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80e:	bf00      	nop
 800b810:	0800b841 	.word	0x0800b841
 800b814:	0800b8bd 	.word	0x0800b8bd
 800b818:	0800b8af 	.word	0x0800b8af
 800b81c:	0800b8af 	.word	0x0800b8af
 800b820:	0800b8af 	.word	0x0800b8af
 800b824:	0800b8af 	.word	0x0800b8af
 800b828:	0800b8af 	.word	0x0800b8af
 800b82c:	0800b8af 	.word	0x0800b8af
 800b830:	0800b8af 	.word	0x0800b8af
 800b834:	0800b8af 	.word	0x0800b8af
 800b838:	0800b86b 	.word	0x0800b86b
 800b83c:	0800b895 	.word	0x0800b895
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d107      	bne.n	800b85c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b84c:	f107 030a 	add.w	r3, r7, #10
 800b850:	2202      	movs	r2, #2
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 faf8 	bl	800ce4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b85a:	e032      	b.n	800b8c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f001 fa82 	bl	800cd68 <USBD_CtlError>
            ret = USBD_FAIL;
 800b864:	2303      	movs	r3, #3
 800b866:	75fb      	strb	r3, [r7, #23]
          break;
 800b868:	e02b      	b.n	800b8c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b03      	cmp	r3, #3
 800b874:	d107      	bne.n	800b886 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b876:	f107 030d 	add.w	r3, r7, #13
 800b87a:	2201      	movs	r2, #1
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 fae3 	bl	800ce4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b884:	e01d      	b.n	800b8c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 fa6d 	bl	800cd68 <USBD_CtlError>
            ret = USBD_FAIL;
 800b88e:	2303      	movs	r3, #3
 800b890:	75fb      	strb	r3, [r7, #23]
          break;
 800b892:	e016      	b.n	800b8c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d00f      	beq.n	800b8c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 fa60 	bl	800cd68 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b8ac:	e008      	b.n	800b8c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f001 fa59 	bl	800cd68 <USBD_CtlError>
          ret = USBD_FAIL;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b8ba:	e002      	b.n	800b8c2 <USBD_CDC_Setup+0x176>
          break;
 800b8bc:	bf00      	nop
 800b8be:	e008      	b.n	800b8d2 <USBD_CDC_Setup+0x186>
          break;
 800b8c0:	bf00      	nop
      }
      break;
 800b8c2:	e006      	b.n	800b8d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fa4e 	bl	800cd68 <USBD_CtlError>
      ret = USBD_FAIL;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b8d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e04f      	b.n	800b99e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	3318      	adds	r3, #24
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d029      	beq.n	800b970 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b91c:	78fa      	ldrb	r2, [r7, #3]
 800b91e:	6879      	ldr	r1, [r7, #4]
 800b920:	4613      	mov	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	440b      	add	r3, r1
 800b92a:	3318      	adds	r3, #24
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	78f9      	ldrb	r1, [r7, #3]
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	460b      	mov	r3, r1
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	440b      	add	r3, r1
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4403      	add	r3, r0
 800b93c:	3348      	adds	r3, #72	; 0x48
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	fbb2 f1f3 	udiv	r1, r2, r3
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d110      	bne.n	800b970 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b94e:	78fa      	ldrb	r2, [r7, #3]
 800b950:	6879      	ldr	r1, [r7, #4]
 800b952:	4613      	mov	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	440b      	add	r3, r1
 800b95c:	3318      	adds	r3, #24
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b962:	78f9      	ldrb	r1, [r7, #3]
 800b964:	2300      	movs	r3, #0
 800b966:	2200      	movs	r2, #0
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f004 ff6f 	bl	801084c <USBD_LL_Transmit>
 800b96e:	e015      	b.n	800b99c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b998:	78fa      	ldrb	r2, [r7, #3]
 800b99a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e015      	b.n	800b9f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f004 ffad 	bl	801092c <USBD_LL_GetRxDataSize>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e01b      	b.n	800ba4e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d015      	beq.n	800ba4c <USBD_CDC_EP0_RxReady+0x50>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba26:	2bff      	cmp	r3, #255	; 0xff
 800ba28:	d010      	beq.n	800ba4c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ba38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba40:	b292      	uxth	r2, r2
 800ba42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	22ff      	movs	r2, #255	; 0xff
 800ba48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2243      	movs	r2, #67	; 0x43
 800ba64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ba66:	4b03      	ldr	r3, [pc, #12]	; (800ba74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	20000094 	.word	0x20000094

0800ba78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2243      	movs	r2, #67	; 0x43
 800ba84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ba86:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	20000050 	.word	0x20000050

0800ba98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2243      	movs	r2, #67	; 0x43
 800baa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800baa6:	4b03      	ldr	r3, [pc, #12]	; (800bab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	200000d8 	.word	0x200000d8

0800bab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	220a      	movs	r2, #10
 800bac4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bac6:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	2000000c 	.word	0x2000000c

0800bad8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bae8:	2303      	movs	r3, #3
 800baea:	e004      	b.n	800baf6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b087      	sub	sp, #28
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb14:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e008      	b.n	800bb32 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b085      	sub	sp, #20
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d101      	bne.n	800bb5a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e004      	b.n	800bb64 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb7e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bb80:	2301      	movs	r3, #1
 800bb82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e01a      	b.n	800bbc8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d114      	bne.n	800bbc6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bbba:	2181      	movs	r1, #129	; 0x81
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f004 fe45 	bl	801084c <USBD_LL_Transmit>

    ret = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e016      	b.n	800bc1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	7c1b      	ldrb	r3, [r3, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d109      	bne.n	800bc0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc00:	2101      	movs	r1, #1
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f004 fe5a 	bl	80108bc <USBD_LL_PrepareReceive>
 800bc08:	e007      	b.n	800bc1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc10:	2340      	movs	r3, #64	; 0x40
 800bc12:	2101      	movs	r1, #1
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f004 fe51 	bl	80108bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e01f      	b.n	800bc7c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	79fa      	ldrb	r2, [r7, #7]
 800bc6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f004 fc2d 	bl	80104d0 <USBD_LL_Init>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e016      	b.n	800bcca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	f107 020e 	add.w	r2, r7, #14
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f004 fc42 	bl	8010564 <USBD_LL_Start>
 800bce0:	4603      	mov	r3, r0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b083      	sub	sp, #12
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	4611      	mov	r1, r2
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	4798      	blx	r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d007      	beq.n	800bd5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	78fa      	ldrb	r2, [r7, #3]
 800bd58:	4611      	mov	r1, r2
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	4798      	blx	r3
  }

  return USBD_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 ffba 	bl	800ccf4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bd8e:	461a      	mov	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd9c:	f003 031f 	and.w	r3, r3, #31
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d01a      	beq.n	800bdda <USBD_LL_SetupStage+0x72>
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d822      	bhi.n	800bdee <USBD_LL_SetupStage+0x86>
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <USBD_LL_SetupStage+0x4a>
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d00a      	beq.n	800bdc6 <USBD_LL_SetupStage+0x5e>
 800bdb0:	e01d      	b.n	800bdee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fa62 	bl	800c284 <USBD_StdDevReq>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc4:	e020      	b.n	800be08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fac6 	bl	800c360 <USBD_StdItfReq>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd8:	e016      	b.n	800be08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fb05 	bl	800c3f2 <USBD_StdEPReq>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]
      break;
 800bdec:	e00c      	b.n	800be08 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bdf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f004 fc57 	bl	80106b0 <USBD_LL_StallEP>
 800be02:	4603      	mov	r3, r0
 800be04:	73fb      	strb	r3, [r7, #15]
      break;
 800be06:	bf00      	nop
  }

  return ret;
 800be08:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	460b      	mov	r3, r1
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800be20:	7afb      	ldrb	r3, [r7, #11]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d138      	bne.n	800be98 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800be2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be34:	2b03      	cmp	r3, #3
 800be36:	d14a      	bne.n	800bece <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	689a      	ldr	r2, [r3, #8]
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	429a      	cmp	r2, r3
 800be42:	d913      	bls.n	800be6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	689a      	ldr	r2, [r3, #8]
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	1ad2      	subs	r2, r2, r3
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	4293      	cmp	r3, r2
 800be5c:	bf28      	it	cs
 800be5e:	4613      	movcs	r3, r2
 800be60:	461a      	mov	r2, r3
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f001 f839 	bl	800cedc <USBD_CtlContinueRx>
 800be6a:	e030      	b.n	800bece <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b03      	cmp	r3, #3
 800be76:	d10b      	bne.n	800be90 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d005      	beq.n	800be90 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f001 f834 	bl	800cefe <USBD_CtlSendStatus>
 800be96:	e01a      	b.n	800bece <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d114      	bne.n	800bece <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00e      	beq.n	800bece <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	7afa      	ldrb	r2, [r7, #11]
 800beba:	4611      	mov	r1, r2
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	4798      	blx	r3
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	e000      	b.n	800bed0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	460b      	mov	r3, r1
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bee6:	7afb      	ldrb	r3, [r7, #11]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d16b      	bne.n	800bfc4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3314      	adds	r3, #20
 800bef0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d156      	bne.n	800bfaa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	689a      	ldr	r2, [r3, #8]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d914      	bls.n	800bf32 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	689a      	ldr	r2, [r3, #8]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	1ad2      	subs	r2, r2, r3
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f000 ffae 	bl	800ce80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf24:	2300      	movs	r3, #0
 800bf26:	2200      	movs	r2, #0
 800bf28:	2100      	movs	r1, #0
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f004 fcc6 	bl	80108bc <USBD_LL_PrepareReceive>
 800bf30:	e03b      	b.n	800bfaa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d11c      	bne.n	800bf78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d316      	bcc.n	800bf78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d20f      	bcs.n	800bf78 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 ff8f 	bl	800ce80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f004 fca3 	bl	80108bc <USBD_LL_PrepareReceive>
 800bf76:	e018      	b.n	800bfaa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	2b03      	cmp	r3, #3
 800bf82:	d10b      	bne.n	800bf9c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf9c:	2180      	movs	r1, #128	; 0x80
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f004 fb86 	bl	80106b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 ffbd 	bl	800cf24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d122      	bne.n	800bffa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7ff fe98 	bl	800bcea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bfc2:	e01a      	b.n	800bffa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d114      	bne.n	800bffa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00e      	beq.n	800bffa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	7afa      	ldrb	r2, [r7, #11]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	4798      	blx	r3
 800bfec:	4603      	mov	r3, r0
 800bfee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bff0:	7dfb      	ldrb	r3, [r7, #23]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bff6:	7dfb      	ldrb	r3, [r7, #23]
 800bff8:	e000      	b.n	800bffc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c034:	2303      	movs	r3, #3
 800c036:	e02f      	b.n	800c098 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00f      	beq.n	800c062 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d009      	beq.n	800c062 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6852      	ldr	r2, [r2, #4]
 800c05a:	b2d2      	uxtb	r2, r2
 800c05c:	4611      	mov	r1, r2
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c062:	2340      	movs	r3, #64	; 0x40
 800c064:	2200      	movs	r2, #0
 800c066:	2100      	movs	r1, #0
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f004 faad 	bl	80105c8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2240      	movs	r2, #64	; 0x40
 800c07a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c07e:	2340      	movs	r3, #64	; 0x40
 800c080:	2200      	movs	r2, #0
 800c082:	2180      	movs	r1, #128	; 0x80
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f004 fa9f 	bl	80105c8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2240      	movs	r2, #64	; 0x40
 800c094:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2204      	movs	r2, #4
 800c0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d106      	bne.n	800c10e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c106:	b2da      	uxtb	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c12e:	2303      	movs	r3, #3
 800c130:	e012      	b.n	800c158 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d10b      	bne.n	800c156 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c144:	69db      	ldr	r3, [r3, #28]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d005      	beq.n	800c156 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c176:	2303      	movs	r3, #3
 800c178:	e014      	b.n	800c1a4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b03      	cmp	r3, #3
 800c184:	d10d      	bne.n	800c1a2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d007      	beq.n	800c1a2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	78fa      	ldrb	r2, [r7, #3]
 800c19c:	4611      	mov	r1, r2
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e014      	b.n	800c1f0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d10d      	bne.n	800c1ee <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d007      	beq.n	800c1ee <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e6:	78fa      	ldrb	r2, [r7, #3]
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c224:	2b00      	cmp	r3, #0
 800c226:	d009      	beq.n	800c23c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	6852      	ldr	r2, [r2, #4]
 800c234:	b2d2      	uxtb	r2, r2
 800c236:	4611      	mov	r1, r2
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	4798      	blx	r3
  }

  return USBD_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c246:	b480      	push	{r7}
 800c248:	b087      	sub	sp, #28
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	3301      	adds	r3, #1
 800c25c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c264:	8a3b      	ldrh	r3, [r7, #16]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	b21a      	sxth	r2, r3
 800c26a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c26e:	4313      	orrs	r3, r2
 800c270:	b21b      	sxth	r3, r3
 800c272:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c274:	89fb      	ldrh	r3, [r7, #14]
}
 800c276:	4618      	mov	r0, r3
 800c278:	371c      	adds	r7, #28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
	...

0800c284 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c29a:	2b40      	cmp	r3, #64	; 0x40
 800c29c:	d005      	beq.n	800c2aa <USBD_StdDevReq+0x26>
 800c29e:	2b40      	cmp	r3, #64	; 0x40
 800c2a0:	d853      	bhi.n	800c34a <USBD_StdDevReq+0xc6>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00b      	beq.n	800c2be <USBD_StdDevReq+0x3a>
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	d14f      	bne.n	800c34a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	4798      	blx	r3
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c2bc:	e04a      	b.n	800c354 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	785b      	ldrb	r3, [r3, #1]
 800c2c2:	2b09      	cmp	r3, #9
 800c2c4:	d83b      	bhi.n	800c33e <USBD_StdDevReq+0xba>
 800c2c6:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <USBD_StdDevReq+0x48>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c321 	.word	0x0800c321
 800c2d0:	0800c335 	.word	0x0800c335
 800c2d4:	0800c33f 	.word	0x0800c33f
 800c2d8:	0800c32b 	.word	0x0800c32b
 800c2dc:	0800c33f 	.word	0x0800c33f
 800c2e0:	0800c2ff 	.word	0x0800c2ff
 800c2e4:	0800c2f5 	.word	0x0800c2f5
 800c2e8:	0800c33f 	.word	0x0800c33f
 800c2ec:	0800c317 	.word	0x0800c317
 800c2f0:	0800c309 	.word	0x0800c309
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f9de 	bl	800c6b8 <USBD_GetDescriptor>
          break;
 800c2fc:	e024      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fb6d 	bl	800c9e0 <USBD_SetAddress>
          break;
 800c306:	e01f      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fbac 	bl	800ca68 <USBD_SetConfig>
 800c310:	4603      	mov	r3, r0
 800c312:	73fb      	strb	r3, [r7, #15]
          break;
 800c314:	e018      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fc4b 	bl	800cbb4 <USBD_GetConfig>
          break;
 800c31e:	e013      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fc7c 	bl	800cc20 <USBD_GetStatus>
          break;
 800c328:	e00e      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fcab 	bl	800cc88 <USBD_SetFeature>
          break;
 800c332:	e009      	b.n	800c348 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fcba 	bl	800ccb0 <USBD_ClrFeature>
          break;
 800c33c:	e004      	b.n	800c348 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fd11 	bl	800cd68 <USBD_CtlError>
          break;
 800c346:	bf00      	nop
      }
      break;
 800c348:	e004      	b.n	800c354 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fd0b 	bl	800cd68 <USBD_CtlError>
      break;
 800c352:	bf00      	nop
  }

  return ret;
 800c354:	7bfb      	ldrb	r3, [r7, #15]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop

0800c360 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c376:	2b40      	cmp	r3, #64	; 0x40
 800c378:	d005      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c37a:	2b40      	cmp	r3, #64	; 0x40
 800c37c:	d82f      	bhi.n	800c3de <USBD_StdItfReq+0x7e>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c382:	2b20      	cmp	r3, #32
 800c384:	d12b      	bne.n	800c3de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	3b01      	subs	r3, #1
 800c390:	2b02      	cmp	r3, #2
 800c392:	d81d      	bhi.n	800c3d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	889b      	ldrh	r3, [r3, #4]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d813      	bhi.n	800c3c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	4798      	blx	r3
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	88db      	ldrh	r3, [r3, #6]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d110      	bne.n	800c3da <USBD_StdItfReq+0x7a>
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10d      	bne.n	800c3da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fd9d 	bl	800cefe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3c4:	e009      	b.n	800c3da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fccd 	bl	800cd68 <USBD_CtlError>
          break;
 800c3ce:	e004      	b.n	800c3da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fcc8 	bl	800cd68 <USBD_CtlError>
          break;
 800c3d8:	e000      	b.n	800c3dc <USBD_StdItfReq+0x7c>
          break;
 800c3da:	bf00      	nop
      }
      break;
 800c3dc:	e004      	b.n	800c3e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fcc1 	bl	800cd68 <USBD_CtlError>
      break;
 800c3e6:	bf00      	nop
  }

  return ret;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	889b      	ldrh	r3, [r3, #4]
 800c404:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c40e:	2b40      	cmp	r3, #64	; 0x40
 800c410:	d007      	beq.n	800c422 <USBD_StdEPReq+0x30>
 800c412:	2b40      	cmp	r3, #64	; 0x40
 800c414:	f200 8145 	bhi.w	800c6a2 <USBD_StdEPReq+0x2b0>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00c      	beq.n	800c436 <USBD_StdEPReq+0x44>
 800c41c:	2b20      	cmp	r3, #32
 800c41e:	f040 8140 	bne.w	800c6a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	4798      	blx	r3
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
      break;
 800c434:	e13a      	b.n	800c6ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d007      	beq.n	800c44e <USBD_StdEPReq+0x5c>
 800c43e:	2b03      	cmp	r3, #3
 800c440:	f300 8129 	bgt.w	800c696 <USBD_StdEPReq+0x2a4>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d07f      	beq.n	800c548 <USBD_StdEPReq+0x156>
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d03c      	beq.n	800c4c6 <USBD_StdEPReq+0xd4>
 800c44c:	e123      	b.n	800c696 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b02      	cmp	r3, #2
 800c458:	d002      	beq.n	800c460 <USBD_StdEPReq+0x6e>
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d016      	beq.n	800c48c <USBD_StdEPReq+0x9a>
 800c45e:	e02c      	b.n	800c4ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00d      	beq.n	800c482 <USBD_StdEPReq+0x90>
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	2b80      	cmp	r3, #128	; 0x80
 800c46a:	d00a      	beq.n	800c482 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f004 f91d 	bl	80106b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c476:	2180      	movs	r1, #128	; 0x80
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f004 f919 	bl	80106b0 <USBD_LL_StallEP>
 800c47e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c480:	e020      	b.n	800c4c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fc6f 	bl	800cd68 <USBD_CtlError>
              break;
 800c48a:	e01b      	b.n	800c4c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10e      	bne.n	800c4b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00b      	beq.n	800c4b2 <USBD_StdEPReq+0xc0>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	2b80      	cmp	r3, #128	; 0x80
 800c49e:	d008      	beq.n	800c4b2 <USBD_StdEPReq+0xc0>
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f004 f8ff 	bl	80106b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fd23 	bl	800cefe <USBD_CtlSendStatus>

              break;
 800c4b8:	e004      	b.n	800c4c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fc53 	bl	800cd68 <USBD_CtlError>
              break;
 800c4c2:	bf00      	nop
          }
          break;
 800c4c4:	e0ec      	b.n	800c6a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d002      	beq.n	800c4d8 <USBD_StdEPReq+0xe6>
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d016      	beq.n	800c504 <USBD_StdEPReq+0x112>
 800c4d6:	e030      	b.n	800c53a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00d      	beq.n	800c4fa <USBD_StdEPReq+0x108>
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	2b80      	cmp	r3, #128	; 0x80
 800c4e2:	d00a      	beq.n	800c4fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f004 f8e1 	bl	80106b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ee:	2180      	movs	r1, #128	; 0x80
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f004 f8dd 	bl	80106b0 <USBD_LL_StallEP>
 800c4f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4f8:	e025      	b.n	800c546 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fc33 	bl	800cd68 <USBD_CtlError>
              break;
 800c502:	e020      	b.n	800c546 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	885b      	ldrh	r3, [r3, #2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d11b      	bne.n	800c544 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c512:	2b00      	cmp	r3, #0
 800c514:	d004      	beq.n	800c520 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f004 f8fe 	bl	801071c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fcec 	bl	800cefe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	4798      	blx	r3
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c538:	e004      	b.n	800c544 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fc13 	bl	800cd68 <USBD_CtlError>
              break;
 800c542:	e000      	b.n	800c546 <USBD_StdEPReq+0x154>
              break;
 800c544:	bf00      	nop
          }
          break;
 800c546:	e0ab      	b.n	800c6a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d002      	beq.n	800c55a <USBD_StdEPReq+0x168>
 800c554:	2b03      	cmp	r3, #3
 800c556:	d032      	beq.n	800c5be <USBD_StdEPReq+0x1cc>
 800c558:	e097      	b.n	800c68a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <USBD_StdEPReq+0x17e>
 800c560:	7bbb      	ldrb	r3, [r7, #14]
 800c562:	2b80      	cmp	r3, #128	; 0x80
 800c564:	d004      	beq.n	800c570 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fbfd 	bl	800cd68 <USBD_CtlError>
                break;
 800c56e:	e091      	b.n	800c694 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c574:	2b00      	cmp	r3, #0
 800c576:	da0b      	bge.n	800c590 <USBD_StdEPReq+0x19e>
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	3310      	adds	r3, #16
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	4413      	add	r3, r2
 800c58c:	3304      	adds	r3, #4
 800c58e:	e00b      	b.n	800c5a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c590:	7bbb      	ldrb	r3, [r7, #14]
 800c592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c596:	4613      	mov	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fc47 	bl	800ce4a <USBD_CtlSendData>
              break;
 800c5bc:	e06a      	b.n	800c694 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	da11      	bge.n	800c5ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5c6:	7bbb      	ldrb	r3, [r7, #14]
 800c5c8:	f003 020f 	and.w	r2, r3, #15
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3324      	adds	r3, #36	; 0x24
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d117      	bne.n	800c610 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fbc0 	bl	800cd68 <USBD_CtlError>
                  break;
 800c5e8:	e054      	b.n	800c694 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	f003 020f 	and.w	r2, r3, #15
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d104      	bne.n	800c610 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fbad 	bl	800cd68 <USBD_CtlError>
                  break;
 800c60e:	e041      	b.n	800c694 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c614:	2b00      	cmp	r3, #0
 800c616:	da0b      	bge.n	800c630 <USBD_StdEPReq+0x23e>
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	3310      	adds	r3, #16
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	4413      	add	r3, r2
 800c62c:	3304      	adds	r3, #4
 800c62e:	e00b      	b.n	800c648 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c630:	7bbb      	ldrb	r3, [r7, #14]
 800c632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c636:	4613      	mov	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	4413      	add	r3, r2
 800c646:	3304      	adds	r3, #4
 800c648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <USBD_StdEPReq+0x264>
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	2b80      	cmp	r3, #128	; 0x80
 800c654:	d103      	bne.n	800c65e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	e00e      	b.n	800c67c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	4619      	mov	r1, r3
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f004 f890 	bl	8010788 <USBD_LL_IsStallEP>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2201      	movs	r2, #1
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	e002      	b.n	800c67c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2202      	movs	r2, #2
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fbe1 	bl	800ce4a <USBD_CtlSendData>
              break;
 800c688:	e004      	b.n	800c694 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fb6b 	bl	800cd68 <USBD_CtlError>
              break;
 800c692:	bf00      	nop
          }
          break;
 800c694:	e004      	b.n	800c6a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fb65 	bl	800cd68 <USBD_CtlError>
          break;
 800c69e:	bf00      	nop
      }
      break;
 800c6a0:	e004      	b.n	800c6ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fb5f 	bl	800cd68 <USBD_CtlError>
      break;
 800c6aa:	bf00      	nop
  }

  return ret;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	885b      	ldrh	r3, [r3, #2]
 800c6d2:	0a1b      	lsrs	r3, r3, #8
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	2b0e      	cmp	r3, #14
 800c6da:	f200 8152 	bhi.w	800c982 <USBD_GetDescriptor+0x2ca>
 800c6de:	a201      	add	r2, pc, #4	; (adr r2, 800c6e4 <USBD_GetDescriptor+0x2c>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c755 	.word	0x0800c755
 800c6e8:	0800c76d 	.word	0x0800c76d
 800c6ec:	0800c7ad 	.word	0x0800c7ad
 800c6f0:	0800c983 	.word	0x0800c983
 800c6f4:	0800c983 	.word	0x0800c983
 800c6f8:	0800c923 	.word	0x0800c923
 800c6fc:	0800c94f 	.word	0x0800c94f
 800c700:	0800c983 	.word	0x0800c983
 800c704:	0800c983 	.word	0x0800c983
 800c708:	0800c983 	.word	0x0800c983
 800c70c:	0800c983 	.word	0x0800c983
 800c710:	0800c983 	.word	0x0800c983
 800c714:	0800c983 	.word	0x0800c983
 800c718:	0800c983 	.word	0x0800c983
 800c71c:	0800c721 	.word	0x0800c721
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00b      	beq.n	800c744 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	7c12      	ldrb	r2, [r2, #16]
 800c738:	f107 0108 	add.w	r1, r7, #8
 800c73c:	4610      	mov	r0, r2
 800c73e:	4798      	blx	r3
 800c740:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c742:	e126      	b.n	800c992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fb0e 	bl	800cd68 <USBD_CtlError>
        err++;
 800c74c:	7afb      	ldrb	r3, [r7, #11]
 800c74e:	3301      	adds	r3, #1
 800c750:	72fb      	strb	r3, [r7, #11]
      break;
 800c752:	e11e      	b.n	800c992 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	7c12      	ldrb	r2, [r2, #16]
 800c760:	f107 0108 	add.w	r1, r7, #8
 800c764:	4610      	mov	r0, r2
 800c766:	4798      	blx	r3
 800c768:	60f8      	str	r0, [r7, #12]
      break;
 800c76a:	e112      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7c1b      	ldrb	r3, [r3, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10d      	bne.n	800c790 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77c:	f107 0208 	add.w	r2, r7, #8
 800c780:	4610      	mov	r0, r2
 800c782:	4798      	blx	r3
 800c784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3301      	adds	r3, #1
 800c78a:	2202      	movs	r2, #2
 800c78c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c78e:	e100      	b.n	800c992 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c798:	f107 0208 	add.w	r2, r7, #8
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
 800c7a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	701a      	strb	r2, [r3, #0]
      break;
 800c7aa:	e0f2      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	885b      	ldrh	r3, [r3, #2]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b05      	cmp	r3, #5
 800c7b4:	f200 80ac 	bhi.w	800c910 <USBD_GetDescriptor+0x258>
 800c7b8:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <USBD_GetDescriptor+0x108>)
 800c7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7be:	bf00      	nop
 800c7c0:	0800c7d9 	.word	0x0800c7d9
 800c7c4:	0800c80d 	.word	0x0800c80d
 800c7c8:	0800c841 	.word	0x0800c841
 800c7cc:	0800c875 	.word	0x0800c875
 800c7d0:	0800c8a9 	.word	0x0800c8a9
 800c7d4:	0800c8dd 	.word	0x0800c8dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00b      	beq.n	800c7fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	7c12      	ldrb	r2, [r2, #16]
 800c7f0:	f107 0108 	add.w	r1, r7, #8
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	4798      	blx	r3
 800c7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7fa:	e091      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fab2 	bl	800cd68 <USBD_CtlError>
            err++;
 800c804:	7afb      	ldrb	r3, [r7, #11]
 800c806:	3301      	adds	r3, #1
 800c808:	72fb      	strb	r3, [r7, #11]
          break;
 800c80a:	e089      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00b      	beq.n	800c830 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	7c12      	ldrb	r2, [r2, #16]
 800c824:	f107 0108 	add.w	r1, r7, #8
 800c828:	4610      	mov	r0, r2
 800c82a:	4798      	blx	r3
 800c82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c82e:	e077      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 fa98 	bl	800cd68 <USBD_CtlError>
            err++;
 800c838:	7afb      	ldrb	r3, [r7, #11]
 800c83a:	3301      	adds	r3, #1
 800c83c:	72fb      	strb	r3, [r7, #11]
          break;
 800c83e:	e06f      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00b      	beq.n	800c864 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	7c12      	ldrb	r2, [r2, #16]
 800c858:	f107 0108 	add.w	r1, r7, #8
 800c85c:	4610      	mov	r0, r2
 800c85e:	4798      	blx	r3
 800c860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c862:	e05d      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fa7e 	bl	800cd68 <USBD_CtlError>
            err++;
 800c86c:	7afb      	ldrb	r3, [r7, #11]
 800c86e:	3301      	adds	r3, #1
 800c870:	72fb      	strb	r3, [r7, #11]
          break;
 800c872:	e055      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00b      	beq.n	800c898 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	7c12      	ldrb	r2, [r2, #16]
 800c88c:	f107 0108 	add.w	r1, r7, #8
 800c890:	4610      	mov	r0, r2
 800c892:	4798      	blx	r3
 800c894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c896:	e043      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fa64 	bl	800cd68 <USBD_CtlError>
            err++;
 800c8a0:	7afb      	ldrb	r3, [r7, #11]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8a6:	e03b      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	7c12      	ldrb	r2, [r2, #16]
 800c8c0:	f107 0108 	add.w	r1, r7, #8
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4798      	blx	r3
 800c8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ca:	e029      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fa4a 	bl	800cd68 <USBD_CtlError>
            err++;
 800c8d4:	7afb      	ldrb	r3, [r7, #11]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8da:	e021      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00b      	beq.n	800c900 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	7c12      	ldrb	r2, [r2, #16]
 800c8f4:	f107 0108 	add.w	r1, r7, #8
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	4798      	blx	r3
 800c8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8fe:	e00f      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fa30 	bl	800cd68 <USBD_CtlError>
            err++;
 800c908:	7afb      	ldrb	r3, [r7, #11]
 800c90a:	3301      	adds	r3, #1
 800c90c:	72fb      	strb	r3, [r7, #11]
          break;
 800c90e:	e007      	b.n	800c920 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fa28 	bl	800cd68 <USBD_CtlError>
          err++;
 800c918:	7afb      	ldrb	r3, [r7, #11]
 800c91a:	3301      	adds	r3, #1
 800c91c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c91e:	bf00      	nop
      }
      break;
 800c920:	e037      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	7c1b      	ldrb	r3, [r3, #16]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d109      	bne.n	800c93e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c932:	f107 0208 	add.w	r2, r7, #8
 800c936:	4610      	mov	r0, r2
 800c938:	4798      	blx	r3
 800c93a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c93c:	e029      	b.n	800c992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 fa11 	bl	800cd68 <USBD_CtlError>
        err++;
 800c946:	7afb      	ldrb	r3, [r7, #11]
 800c948:	3301      	adds	r3, #1
 800c94a:	72fb      	strb	r3, [r7, #11]
      break;
 800c94c:	e021      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7c1b      	ldrb	r3, [r3, #16]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10d      	bne.n	800c972 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95e:	f107 0208 	add.w	r2, r7, #8
 800c962:	4610      	mov	r0, r2
 800c964:	4798      	blx	r3
 800c966:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3301      	adds	r3, #1
 800c96c:	2207      	movs	r2, #7
 800c96e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c970:	e00f      	b.n	800c992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f9f7 	bl	800cd68 <USBD_CtlError>
        err++;
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	3301      	adds	r3, #1
 800c97e:	72fb      	strb	r3, [r7, #11]
      break;
 800c980:	e007      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f9ef 	bl	800cd68 <USBD_CtlError>
      err++;
 800c98a:	7afb      	ldrb	r3, [r7, #11]
 800c98c:	3301      	adds	r3, #1
 800c98e:	72fb      	strb	r3, [r7, #11]
      break;
 800c990:	bf00      	nop
  }

  if (err != 0U)
 800c992:	7afb      	ldrb	r3, [r7, #11]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d11e      	bne.n	800c9d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	88db      	ldrh	r3, [r3, #6]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d016      	beq.n	800c9ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c9a0:	893b      	ldrh	r3, [r7, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00e      	beq.n	800c9c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	88da      	ldrh	r2, [r3, #6]
 800c9aa:	893b      	ldrh	r3, [r7, #8]
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	bf28      	it	cs
 800c9b0:	4613      	movcs	r3, r2
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9b6:	893b      	ldrh	r3, [r7, #8]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	68f9      	ldr	r1, [r7, #12]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fa44 	bl	800ce4a <USBD_CtlSendData>
 800c9c2:	e009      	b.n	800c9d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f9ce 	bl	800cd68 <USBD_CtlError>
 800c9cc:	e004      	b.n	800c9d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fa95 	bl	800cefe <USBD_CtlSendStatus>
 800c9d4:	e000      	b.n	800c9d8 <USBD_GetDescriptor+0x320>
    return;
 800c9d6:	bf00      	nop
  }
}
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop

0800c9e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	889b      	ldrh	r3, [r3, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d131      	bne.n	800ca56 <USBD_SetAddress+0x76>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	88db      	ldrh	r3, [r3, #6]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d12d      	bne.n	800ca56 <USBD_SetAddress+0x76>
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	885b      	ldrh	r3, [r3, #2]
 800c9fe:	2b7f      	cmp	r3, #127	; 0x7f
 800ca00:	d829      	bhi.n	800ca56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	885b      	ldrh	r3, [r3, #2]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d104      	bne.n	800ca24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f9a3 	bl	800cd68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca22:	e01d      	b.n	800ca60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7bfa      	ldrb	r2, [r7, #15]
 800ca28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f003 fed5 	bl	80107e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fa61 	bl	800cefe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2202      	movs	r2, #2
 800ca46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca4a:	e009      	b.n	800ca60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca54:	e004      	b.n	800ca60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f985 	bl	800cd68 <USBD_CtlError>
  }
}
 800ca5e:	bf00      	nop
 800ca60:	bf00      	nop
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	885b      	ldrh	r3, [r3, #2]
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	4b4c      	ldr	r3, [pc, #304]	; (800cbb0 <USBD_SetConfig+0x148>)
 800ca7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca80:	4b4b      	ldr	r3, [pc, #300]	; (800cbb0 <USBD_SetConfig+0x148>)
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d905      	bls.n	800ca94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f96c 	bl	800cd68 <USBD_CtlError>
    return USBD_FAIL;
 800ca90:	2303      	movs	r3, #3
 800ca92:	e088      	b.n	800cba6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d002      	beq.n	800caa6 <USBD_SetConfig+0x3e>
 800caa0:	2b03      	cmp	r3, #3
 800caa2:	d025      	beq.n	800caf0 <USBD_SetConfig+0x88>
 800caa4:	e071      	b.n	800cb8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800caa6:	4b42      	ldr	r3, [pc, #264]	; (800cbb0 <USBD_SetConfig+0x148>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d01c      	beq.n	800cae8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800caae:	4b40      	ldr	r3, [pc, #256]	; (800cbb0 <USBD_SetConfig+0x148>)
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cab8:	4b3d      	ldr	r3, [pc, #244]	; (800cbb0 <USBD_SetConfig+0x148>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff f91e 	bl	800bd00 <USBD_SetClassConfig>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d004      	beq.n	800cad8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f949 	bl	800cd68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cad6:	e065      	b.n	800cba4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fa10 	bl	800cefe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2203      	movs	r2, #3
 800cae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cae6:	e05d      	b.n	800cba4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fa08 	bl	800cefe <USBD_CtlSendStatus>
      break;
 800caee:	e059      	b.n	800cba4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800caf0:	4b2f      	ldr	r3, [pc, #188]	; (800cbb0 <USBD_SetConfig+0x148>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d112      	bne.n	800cb1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2202      	movs	r2, #2
 800cafc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb00:	4b2b      	ldr	r3, [pc, #172]	; (800cbb0 <USBD_SetConfig+0x148>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	461a      	mov	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb0a:	4b29      	ldr	r3, [pc, #164]	; (800cbb0 <USBD_SetConfig+0x148>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7ff f911 	bl	800bd38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f9f1 	bl	800cefe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb1c:	e042      	b.n	800cba4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cb1e:	4b24      	ldr	r3, [pc, #144]	; (800cbb0 <USBD_SetConfig+0x148>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	461a      	mov	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d02a      	beq.n	800cb82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff f8ff 	bl	800bd38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb3a:	4b1d      	ldr	r3, [pc, #116]	; (800cbb0 <USBD_SetConfig+0x148>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb44:	4b1a      	ldr	r3, [pc, #104]	; (800cbb0 <USBD_SetConfig+0x148>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7ff f8d8 	bl	800bd00 <USBD_SetClassConfig>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00f      	beq.n	800cb7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 f903 	bl	800cd68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7ff f8e4 	bl	800bd38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2202      	movs	r2, #2
 800cb74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb78:	e014      	b.n	800cba4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f9bf 	bl	800cefe <USBD_CtlSendStatus>
      break;
 800cb80:	e010      	b.n	800cba4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f9bb 	bl	800cefe <USBD_CtlSendStatus>
      break;
 800cb88:	e00c      	b.n	800cba4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f8eb 	bl	800cd68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb92:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <USBD_SetConfig+0x148>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff f8cd 	bl	800bd38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	73fb      	strb	r3, [r7, #15]
      break;
 800cba2:	bf00      	nop
  }

  return ret;
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	20000974 	.word	0x20000974

0800cbb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	88db      	ldrh	r3, [r3, #6]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d004      	beq.n	800cbd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f8cd 	bl	800cd68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbce:	e023      	b.n	800cc18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	dc02      	bgt.n	800cbe2 <USBD_GetConfig+0x2e>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	dc03      	bgt.n	800cbe8 <USBD_GetConfig+0x34>
 800cbe0:	e015      	b.n	800cc0e <USBD_GetConfig+0x5a>
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d00b      	beq.n	800cbfe <USBD_GetConfig+0x4a>
 800cbe6:	e012      	b.n	800cc0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f927 	bl	800ce4a <USBD_CtlSendData>
        break;
 800cbfc:	e00c      	b.n	800cc18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3304      	adds	r3, #4
 800cc02:	2201      	movs	r2, #1
 800cc04:	4619      	mov	r1, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 f91f 	bl	800ce4a <USBD_CtlSendData>
        break;
 800cc0c:	e004      	b.n	800cc18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f8a9 	bl	800cd68 <USBD_CtlError>
        break;
 800cc16:	bf00      	nop
}
 800cc18:	bf00      	nop
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	3b01      	subs	r3, #1
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d81e      	bhi.n	800cc76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	88db      	ldrh	r3, [r3, #6]
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d004      	beq.n	800cc4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f890 	bl	800cd68 <USBD_CtlError>
        break;
 800cc48:	e01a      	b.n	800cc80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d005      	beq.n	800cc66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	f043 0202 	orr.w	r2, r3, #2
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	330c      	adds	r3, #12
 800cc6a:	2202      	movs	r2, #2
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f8eb 	bl	800ce4a <USBD_CtlSendData>
      break;
 800cc74:	e004      	b.n	800cc80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f875 	bl	800cd68 <USBD_CtlError>
      break;
 800cc7e:	bf00      	nop
  }
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	885b      	ldrh	r3, [r3, #2]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d106      	bne.n	800cca8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f92b 	bl	800cefe <USBD_CtlSendStatus>
  }
}
 800cca8:	bf00      	nop
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d80b      	bhi.n	800cce0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	885b      	ldrh	r3, [r3, #2]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d10c      	bne.n	800ccea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f910 	bl	800cefe <USBD_CtlSendStatus>
      }
      break;
 800ccde:	e004      	b.n	800ccea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f840 	bl	800cd68 <USBD_CtlError>
      break;
 800cce8:	e000      	b.n	800ccec <USBD_ClrFeature+0x3c>
      break;
 800ccea:	bf00      	nop
  }
}
 800ccec:	bf00      	nop
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	781a      	ldrb	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	781a      	ldrb	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f7ff fa91 	bl	800c246 <SWAPBYTE>
 800cd24:	4603      	mov	r3, r0
 800cd26:	461a      	mov	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3301      	adds	r3, #1
 800cd36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f7ff fa84 	bl	800c246 <SWAPBYTE>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	461a      	mov	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7ff fa77 	bl	800c246 <SWAPBYTE>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	80da      	strh	r2, [r3, #6]
}
 800cd60:	bf00      	nop
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd72:	2180      	movs	r1, #128	; 0x80
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f003 fc9b 	bl	80106b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f003 fc97 	bl	80106b0 <USBD_LL_StallEP>
}
 800cd82:	bf00      	nop
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b086      	sub	sp, #24
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	60b9      	str	r1, [r7, #8]
 800cd94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d036      	beq.n	800ce0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cda4:	6938      	ldr	r0, [r7, #16]
 800cda6:	f000 f836 	bl	800ce16 <USBD_GetLen>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	3301      	adds	r3, #1
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	7812      	ldrb	r2, [r2, #0]
 800cdc2:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdc4:	7dfb      	ldrb	r3, [r7, #23]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	4413      	add	r3, r2
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdda:	e013      	b.n	800ce04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cddc:	7dfb      	ldrb	r3, [r7, #23]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	4413      	add	r3, r2
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	7812      	ldrb	r2, [r2, #0]
 800cde6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	3301      	adds	r3, #1
 800cdec:	613b      	str	r3, [r7, #16]
    idx++;
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	701a      	strb	r2, [r3, #0]
    idx++;
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	3301      	adds	r3, #1
 800ce02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1e7      	bne.n	800cddc <USBD_GetString+0x52>
 800ce0c:	e000      	b.n	800ce10 <USBD_GetString+0x86>
    return;
 800ce0e:	bf00      	nop
  }
}
 800ce10:	3718      	adds	r7, #24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce16:	b480      	push	{r7}
 800ce18:	b085      	sub	sp, #20
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce26:	e005      	b.n	800ce34 <USBD_GetLen+0x1e>
  {
    len++;
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	3301      	adds	r3, #1
 800ce32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d1f5      	bne.n	800ce28 <USBD_GetLen+0x12>
  }

  return len;
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	60f8      	str	r0, [r7, #12]
 800ce52:	60b9      	str	r1, [r7, #8]
 800ce54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2202      	movs	r2, #2
 800ce5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	2100      	movs	r1, #0
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f003 fceb 	bl	801084c <USBD_LL_Transmit>

  return USBD_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	2100      	movs	r1, #0
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f003 fcda 	bl	801084c <USBD_LL_Transmit>

  return USBD_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	60f8      	str	r0, [r7, #12]
 800ceaa:	60b9      	str	r1, [r7, #8]
 800ceac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2203      	movs	r2, #3
 800ceb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	2100      	movs	r1, #0
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f003 fcf5 	bl	80108bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	2100      	movs	r1, #0
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f003 fce4 	bl	80108bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2204      	movs	r2, #4
 800cf0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf0e:	2300      	movs	r3, #0
 800cf10:	2200      	movs	r2, #0
 800cf12:	2100      	movs	r1, #0
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f003 fc99 	bl	801084c <USBD_LL_Transmit>

  return USBD_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2205      	movs	r2, #5
 800cf30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf34:	2300      	movs	r3, #0
 800cf36:	2200      	movs	r2, #0
 800cf38:	2100      	movs	r1, #0
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f003 fcbe 	bl	80108bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	4603      	mov	r3, r0
 800cf54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf56:	79fb      	ldrb	r3, [r7, #7]
 800cf58:	4a08      	ldr	r2, [pc, #32]	; (800cf7c <disk_status+0x30>)
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4413      	add	r3, r2
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	79fa      	ldrb	r2, [r7, #7]
 800cf64:	4905      	ldr	r1, [pc, #20]	; (800cf7c <disk_status+0x30>)
 800cf66:	440a      	add	r2, r1
 800cf68:	7a12      	ldrb	r2, [r2, #8]
 800cf6a:	4610      	mov	r0, r2
 800cf6c:	4798      	blx	r3
 800cf6e:	4603      	mov	r3, r0
 800cf70:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	200009a0 	.word	0x200009a0

0800cf80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	4a0d      	ldr	r2, [pc, #52]	; (800cfc8 <disk_initialize+0x48>)
 800cf92:	5cd3      	ldrb	r3, [r2, r3]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d111      	bne.n	800cfbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	4a0b      	ldr	r2, [pc, #44]	; (800cfc8 <disk_initialize+0x48>)
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cfa0:	79fb      	ldrb	r3, [r7, #7]
 800cfa2:	4a09      	ldr	r2, [pc, #36]	; (800cfc8 <disk_initialize+0x48>)
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	79fa      	ldrb	r2, [r7, #7]
 800cfae:	4906      	ldr	r1, [pc, #24]	; (800cfc8 <disk_initialize+0x48>)
 800cfb0:	440a      	add	r2, r1
 800cfb2:	7a12      	ldrb	r2, [r2, #8]
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	4798      	blx	r3
 800cfb8:	4603      	mov	r3, r0
 800cfba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	200009a0 	.word	0x200009a0

0800cfcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60b9      	str	r1, [r7, #8]
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	4a0a      	ldr	r2, [pc, #40]	; (800d008 <disk_read+0x3c>)
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	689c      	ldr	r4, [r3, #8]
 800cfe8:	7bfb      	ldrb	r3, [r7, #15]
 800cfea:	4a07      	ldr	r2, [pc, #28]	; (800d008 <disk_read+0x3c>)
 800cfec:	4413      	add	r3, r2
 800cfee:	7a18      	ldrb	r0, [r3, #8]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	47a0      	blx	r4
 800cff8:	4603      	mov	r3, r0
 800cffa:	75fb      	strb	r3, [r7, #23]
  return res;
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	371c      	adds	r7, #28
 800d002:	46bd      	mov	sp, r7
 800d004:	bd90      	pop	{r4, r7, pc}
 800d006:	bf00      	nop
 800d008:	200009a0 	.word	0x200009a0

0800d00c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d00c:	b590      	push	{r4, r7, lr}
 800d00e:	b087      	sub	sp, #28
 800d010:	af00      	add	r7, sp, #0
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	4603      	mov	r3, r0
 800d01a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	4a0a      	ldr	r2, [pc, #40]	; (800d048 <disk_write+0x3c>)
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	68dc      	ldr	r4, [r3, #12]
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4a07      	ldr	r2, [pc, #28]	; (800d048 <disk_write+0x3c>)
 800d02c:	4413      	add	r3, r2
 800d02e:	7a18      	ldrb	r0, [r3, #8]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	47a0      	blx	r4
 800d038:	4603      	mov	r3, r0
 800d03a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd90      	pop	{r4, r7, pc}
 800d046:	bf00      	nop
 800d048:	200009a0 	.word	0x200009a0

0800d04c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	4603      	mov	r3, r0
 800d054:	603a      	str	r2, [r7, #0]
 800d056:	71fb      	strb	r3, [r7, #7]
 800d058:	460b      	mov	r3, r1
 800d05a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <disk_ioctl+0x38>)
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	79fa      	ldrb	r2, [r7, #7]
 800d06a:	4906      	ldr	r1, [pc, #24]	; (800d084 <disk_ioctl+0x38>)
 800d06c:	440a      	add	r2, r1
 800d06e:	7a10      	ldrb	r0, [r2, #8]
 800d070:	79b9      	ldrb	r1, [r7, #6]
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	4798      	blx	r3
 800d076:	4603      	mov	r3, r0
 800d078:	73fb      	strb	r3, [r7, #15]
  return res;
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	200009a0 	.word	0x200009a0

0800d088 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	3301      	adds	r3, #1
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d098:	89fb      	ldrh	r3, [r7, #14]
 800d09a:	021b      	lsls	r3, r3, #8
 800d09c:	b21a      	sxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	b21b      	sxth	r3, r3
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	b21b      	sxth	r3, r3
 800d0a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d0aa:	89fb      	ldrh	r3, [r7, #14]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3303      	adds	r3, #3
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	021b      	lsls	r3, r3, #8
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	3202      	adds	r2, #2
 800d0d0:	7812      	ldrb	r2, [r2, #0]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	021b      	lsls	r3, r3, #8
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	3201      	adds	r2, #1
 800d0de:	7812      	ldrb	r2, [r2, #0]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	021b      	lsls	r3, r3, #8
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	7812      	ldrb	r2, [r2, #0]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
	return rv;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d0fe:	b480      	push	{r7}
 800d100:	b083      	sub	sp, #12
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	460b      	mov	r3, r1
 800d108:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	607a      	str	r2, [r7, #4]
 800d110:	887a      	ldrh	r2, [r7, #2]
 800d112:	b2d2      	uxtb	r2, r2
 800d114:	701a      	strb	r2, [r3, #0]
 800d116:	887b      	ldrh	r3, [r7, #2]
 800d118:	0a1b      	lsrs	r3, r3, #8
 800d11a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	607a      	str	r2, [r7, #4]
 800d122:	887a      	ldrh	r2, [r7, #2]
 800d124:	b2d2      	uxtb	r2, r2
 800d126:	701a      	strb	r2, [r3, #0]
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	1c5a      	adds	r2, r3, #1
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	b2d2      	uxtb	r2, r2
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	0a1b      	lsrs	r3, r3, #8
 800d14e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	1c5a      	adds	r2, r3, #1
 800d154:	607a      	str	r2, [r7, #4]
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	b2d2      	uxtb	r2, r2
 800d15a:	701a      	strb	r2, [r3, #0]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	0a1b      	lsrs	r3, r3, #8
 800d160:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	683a      	ldr	r2, [r7, #0]
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	701a      	strb	r2, [r3, #0]
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	0a1b      	lsrs	r3, r3, #8
 800d172:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	607a      	str	r2, [r7, #4]
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	b2d2      	uxtb	r2, r2
 800d17e:	701a      	strb	r2, [r3, #0]
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d18c:	b480      	push	{r7}
 800d18e:	b087      	sub	sp, #28
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00d      	beq.n	800d1c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	1c53      	adds	r3, r2, #1
 800d1aa:	613b      	str	r3, [r7, #16]
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	1c59      	adds	r1, r3, #1
 800d1b0:	6179      	str	r1, [r7, #20]
 800d1b2:	7812      	ldrb	r2, [r2, #0]
 800d1b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	607b      	str	r3, [r7, #4]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1f1      	bne.n	800d1a6 <mem_cpy+0x1a>
	}
}
 800d1c2:	bf00      	nop
 800d1c4:	371c      	adds	r7, #28
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d1ce:	b480      	push	{r7}
 800d1d0:	b087      	sub	sp, #28
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	617a      	str	r2, [r7, #20]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	b2d2      	uxtb	r2, r2
 800d1e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	607b      	str	r3, [r7, #4]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1f3      	bne.n	800d1de <mem_set+0x10>
}
 800d1f6:	bf00      	nop
 800d1f8:	bf00      	nop
 800d1fa:	371c      	adds	r7, #28
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d204:	b480      	push	{r7}
 800d206:	b089      	sub	sp, #36	; 0x24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	61fb      	str	r3, [r7, #28]
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d218:	2300      	movs	r3, #0
 800d21a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	61fa      	str	r2, [r7, #28]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	4619      	mov	r1, r3
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	1c5a      	adds	r2, r3, #1
 800d22a:	61ba      	str	r2, [r7, #24]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	1acb      	subs	r3, r1, r3
 800d230:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3b01      	subs	r3, #1
 800d236:	607b      	str	r3, [r7, #4]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d002      	beq.n	800d244 <mem_cmp+0x40>
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d0eb      	beq.n	800d21c <mem_cmp+0x18>

	return r;
 800d244:	697b      	ldr	r3, [r7, #20]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3724      	adds	r7, #36	; 0x24
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d252:	b480      	push	{r7}
 800d254:	b083      	sub	sp, #12
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d25c:	e002      	b.n	800d264 <chk_chr+0x12>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	3301      	adds	r3, #1
 800d262:	607b      	str	r3, [r7, #4]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <chk_chr+0x26>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	461a      	mov	r2, r3
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	4293      	cmp	r3, r2
 800d276:	d1f2      	bne.n	800d25e <chk_chr+0xc>
	return *str;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	781b      	ldrb	r3, [r3, #0]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d292:	2300      	movs	r3, #0
 800d294:	60bb      	str	r3, [r7, #8]
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	60fb      	str	r3, [r7, #12]
 800d29a:	e029      	b.n	800d2f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d29c:	4a27      	ldr	r2, [pc, #156]	; (800d33c <chk_lock+0xb4>)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	4413      	add	r3, r2
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d01d      	beq.n	800d2e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2aa:	4a24      	ldr	r2, [pc, #144]	; (800d33c <chk_lock+0xb4>)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	011b      	lsls	r3, r3, #4
 800d2b0:	4413      	add	r3, r2
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d116      	bne.n	800d2ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d2bc:	4a1f      	ldr	r2, [pc, #124]	; (800d33c <chk_lock+0xb4>)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	011b      	lsls	r3, r3, #4
 800d2c2:	4413      	add	r3, r2
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d10c      	bne.n	800d2ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2d0:	4a1a      	ldr	r2, [pc, #104]	; (800d33c <chk_lock+0xb4>)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	4413      	add	r3, r2
 800d2d8:	3308      	adds	r3, #8
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d102      	bne.n	800d2ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2e4:	e007      	b.n	800d2f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d9d2      	bls.n	800d29c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d109      	bne.n	800d310 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d102      	bne.n	800d308 <chk_lock+0x80>
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2b02      	cmp	r3, #2
 800d306:	d101      	bne.n	800d30c <chk_lock+0x84>
 800d308:	2300      	movs	r3, #0
 800d30a:	e010      	b.n	800d32e <chk_lock+0xa6>
 800d30c:	2312      	movs	r3, #18
 800d30e:	e00e      	b.n	800d32e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d108      	bne.n	800d328 <chk_lock+0xa0>
 800d316:	4a09      	ldr	r2, [pc, #36]	; (800d33c <chk_lock+0xb4>)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	011b      	lsls	r3, r3, #4
 800d31c:	4413      	add	r3, r2
 800d31e:	330c      	adds	r3, #12
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d326:	d101      	bne.n	800d32c <chk_lock+0xa4>
 800d328:	2310      	movs	r3, #16
 800d32a:	e000      	b.n	800d32e <chk_lock+0xa6>
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	20000980 	.word	0x20000980

0800d340 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d346:	2300      	movs	r3, #0
 800d348:	607b      	str	r3, [r7, #4]
 800d34a:	e002      	b.n	800d352 <enq_lock+0x12>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3301      	adds	r3, #1
 800d350:	607b      	str	r3, [r7, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d806      	bhi.n	800d366 <enq_lock+0x26>
 800d358:	4a09      	ldr	r2, [pc, #36]	; (800d380 <enq_lock+0x40>)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	011b      	lsls	r3, r3, #4
 800d35e:	4413      	add	r3, r2
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1f2      	bne.n	800d34c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b02      	cmp	r3, #2
 800d36a:	bf14      	ite	ne
 800d36c:	2301      	movne	r3, #1
 800d36e:	2300      	moveq	r3, #0
 800d370:	b2db      	uxtb	r3, r3
}
 800d372:	4618      	mov	r0, r3
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	20000980 	.word	0x20000980

0800d384 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d38e:	2300      	movs	r3, #0
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	e01f      	b.n	800d3d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d394:	4a41      	ldr	r2, [pc, #260]	; (800d49c <inc_lock+0x118>)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	011b      	lsls	r3, r3, #4
 800d39a:	4413      	add	r3, r2
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d113      	bne.n	800d3ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d3a6:	4a3d      	ldr	r2, [pc, #244]	; (800d49c <inc_lock+0x118>)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	011b      	lsls	r3, r3, #4
 800d3ac:	4413      	add	r3, r2
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d109      	bne.n	800d3ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d3ba:	4a38      	ldr	r2, [pc, #224]	; (800d49c <inc_lock+0x118>)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	011b      	lsls	r3, r3, #4
 800d3c0:	4413      	add	r3, r2
 800d3c2:	3308      	adds	r3, #8
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d006      	beq.n	800d3dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	60fb      	str	r3, [r7, #12]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d9dc      	bls.n	800d394 <inc_lock+0x10>
 800d3da:	e000      	b.n	800d3de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d3dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d132      	bne.n	800d44a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	60fb      	str	r3, [r7, #12]
 800d3e8:	e002      	b.n	800d3f0 <inc_lock+0x6c>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d806      	bhi.n	800d404 <inc_lock+0x80>
 800d3f6:	4a29      	ldr	r2, [pc, #164]	; (800d49c <inc_lock+0x118>)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	011b      	lsls	r3, r3, #4
 800d3fc:	4413      	add	r3, r2
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1f2      	bne.n	800d3ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b02      	cmp	r3, #2
 800d408:	d101      	bne.n	800d40e <inc_lock+0x8a>
 800d40a:	2300      	movs	r3, #0
 800d40c:	e040      	b.n	800d490 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	4922      	ldr	r1, [pc, #136]	; (800d49c <inc_lock+0x118>)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	011b      	lsls	r3, r3, #4
 800d418:	440b      	add	r3, r1
 800d41a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	689a      	ldr	r2, [r3, #8]
 800d420:	491e      	ldr	r1, [pc, #120]	; (800d49c <inc_lock+0x118>)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	011b      	lsls	r3, r3, #4
 800d426:	440b      	add	r3, r1
 800d428:	3304      	adds	r3, #4
 800d42a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	695a      	ldr	r2, [r3, #20]
 800d430:	491a      	ldr	r1, [pc, #104]	; (800d49c <inc_lock+0x118>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	011b      	lsls	r3, r3, #4
 800d436:	440b      	add	r3, r1
 800d438:	3308      	adds	r3, #8
 800d43a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d43c:	4a17      	ldr	r2, [pc, #92]	; (800d49c <inc_lock+0x118>)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	4413      	add	r3, r2
 800d444:	330c      	adds	r3, #12
 800d446:	2200      	movs	r2, #0
 800d448:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d009      	beq.n	800d464 <inc_lock+0xe0>
 800d450:	4a12      	ldr	r2, [pc, #72]	; (800d49c <inc_lock+0x118>)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	011b      	lsls	r3, r3, #4
 800d456:	4413      	add	r3, r2
 800d458:	330c      	adds	r3, #12
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <inc_lock+0xe0>
 800d460:	2300      	movs	r3, #0
 800d462:	e015      	b.n	800d490 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d108      	bne.n	800d47c <inc_lock+0xf8>
 800d46a:	4a0c      	ldr	r2, [pc, #48]	; (800d49c <inc_lock+0x118>)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	011b      	lsls	r3, r3, #4
 800d470:	4413      	add	r3, r2
 800d472:	330c      	adds	r3, #12
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	3301      	adds	r3, #1
 800d478:	b29a      	uxth	r2, r3
 800d47a:	e001      	b.n	800d480 <inc_lock+0xfc>
 800d47c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d480:	4906      	ldr	r1, [pc, #24]	; (800d49c <inc_lock+0x118>)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	011b      	lsls	r3, r3, #4
 800d486:	440b      	add	r3, r1
 800d488:	330c      	adds	r3, #12
 800d48a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3301      	adds	r3, #1
}
 800d490:	4618      	mov	r0, r3
 800d492:	3714      	adds	r7, #20
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	20000980 	.word	0x20000980

0800d4a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	607b      	str	r3, [r7, #4]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d825      	bhi.n	800d500 <dec_lock+0x60>
		n = Files[i].ctr;
 800d4b4:	4a17      	ldr	r2, [pc, #92]	; (800d514 <dec_lock+0x74>)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	011b      	lsls	r3, r3, #4
 800d4ba:	4413      	add	r3, r2
 800d4bc:	330c      	adds	r3, #12
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d4c2:	89fb      	ldrh	r3, [r7, #14]
 800d4c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4c8:	d101      	bne.n	800d4ce <dec_lock+0x2e>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d4ce:	89fb      	ldrh	r3, [r7, #14]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <dec_lock+0x3a>
 800d4d4:	89fb      	ldrh	r3, [r7, #14]
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d4da:	4a0e      	ldr	r2, [pc, #56]	; (800d514 <dec_lock+0x74>)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	011b      	lsls	r3, r3, #4
 800d4e0:	4413      	add	r3, r2
 800d4e2:	330c      	adds	r3, #12
 800d4e4:	89fa      	ldrh	r2, [r7, #14]
 800d4e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d4e8:	89fb      	ldrh	r3, [r7, #14]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d105      	bne.n	800d4fa <dec_lock+0x5a>
 800d4ee:	4a09      	ldr	r2, [pc, #36]	; (800d514 <dec_lock+0x74>)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	011b      	lsls	r3, r3, #4
 800d4f4:	4413      	add	r3, r2
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	737b      	strb	r3, [r7, #13]
 800d4fe:	e001      	b.n	800d504 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d500:	2302      	movs	r3, #2
 800d502:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d504:	7b7b      	ldrb	r3, [r7, #13]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3714      	adds	r7, #20
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	20000980 	.word	0x20000980

0800d518 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d520:	2300      	movs	r3, #0
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	e010      	b.n	800d548 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d526:	4a0d      	ldr	r2, [pc, #52]	; (800d55c <clear_lock+0x44>)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	011b      	lsls	r3, r3, #4
 800d52c:	4413      	add	r3, r2
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	429a      	cmp	r2, r3
 800d534:	d105      	bne.n	800d542 <clear_lock+0x2a>
 800d536:	4a09      	ldr	r2, [pc, #36]	; (800d55c <clear_lock+0x44>)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	011b      	lsls	r3, r3, #4
 800d53c:	4413      	add	r3, r2
 800d53e:	2200      	movs	r2, #0
 800d540:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	3301      	adds	r3, #1
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d9eb      	bls.n	800d526 <clear_lock+0xe>
	}
}
 800d54e:	bf00      	nop
 800d550:	bf00      	nop
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	20000980 	.word	0x20000980

0800d560 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d568:	2300      	movs	r3, #0
 800d56a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	78db      	ldrb	r3, [r3, #3]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d034      	beq.n	800d5de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d578:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	7858      	ldrb	r0, [r3, #1]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d584:	2301      	movs	r3, #1
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	f7ff fd40 	bl	800d00c <disk_write>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d002      	beq.n	800d598 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d592:	2301      	movs	r3, #1
 800d594:	73fb      	strb	r3, [r7, #15]
 800d596:	e022      	b.n	800d5de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	1ad2      	subs	r2, r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d217      	bcs.n	800d5de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	789b      	ldrb	r3, [r3, #2]
 800d5b2:	613b      	str	r3, [r7, #16]
 800d5b4:	e010      	b.n	800d5d8 <sync_window+0x78>
					wsect += fs->fsize;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	697a      	ldr	r2, [r7, #20]
 800d5bc:	4413      	add	r3, r2
 800d5be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	7858      	ldrb	r0, [r3, #1]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	f7ff fd1d 	bl	800d00c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	613b      	str	r3, [r7, #16]
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d8eb      	bhi.n	800d5b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d01b      	beq.n	800d638 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7ff ffad 	bl	800d560 <sync_window>
 800d606:	4603      	mov	r3, r0
 800d608:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d113      	bne.n	800d638 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	7858      	ldrb	r0, [r3, #1]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d61a:	2301      	movs	r3, #1
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	f7ff fcd5 	bl	800cfcc <disk_read>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d004      	beq.n	800d632 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d62c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d62e:	2301      	movs	r3, #1
 800d630:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff ff87 	bl	800d560 <sync_window>
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d158      	bne.n	800d70e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b03      	cmp	r3, #3
 800d662:	d148      	bne.n	800d6f6 <sync_fs+0xb2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	791b      	ldrb	r3, [r3, #4]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d144      	bne.n	800d6f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3330      	adds	r3, #48	; 0x30
 800d670:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d674:	2100      	movs	r1, #0
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff fda9 	bl	800d1ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	3330      	adds	r3, #48	; 0x30
 800d680:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d684:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff fd38 	bl	800d0fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	3330      	adds	r3, #48	; 0x30
 800d692:	4921      	ldr	r1, [pc, #132]	; (800d718 <sync_fs+0xd4>)
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fd4d 	bl	800d134 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3330      	adds	r3, #48	; 0x30
 800d69e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6a2:	491e      	ldr	r1, [pc, #120]	; (800d71c <sync_fs+0xd8>)
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fd45 	bl	800d134 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	3330      	adds	r3, #48	; 0x30
 800d6ae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7ff fd3b 	bl	800d134 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3330      	adds	r3, #48	; 0x30
 800d6c2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	f7ff fd31 	bl	800d134 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	69db      	ldr	r3, [r3, #28]
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7858      	ldrb	r0, [r3, #1]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	f7ff fc8e 	bl	800d00c <disk_write>
			fs->fsi_flag = 0;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	785b      	ldrb	r3, [r3, #1]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff fca4 	bl	800d04c <disk_ioctl>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <sync_fs+0xca>
 800d70a:	2301      	movs	r3, #1
 800d70c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	41615252 	.word	0x41615252
 800d71c:	61417272 	.word	0x61417272

0800d720 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	3b02      	subs	r3, #2
 800d72e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	3b02      	subs	r3, #2
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d301      	bcc.n	800d740 <clust2sect+0x20>
 800d73c:	2300      	movs	r3, #0
 800d73e:	e008      	b.n	800d752 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	895b      	ldrh	r3, [r3, #10]
 800d744:	461a      	mov	r2, r3
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	fb03 f202 	mul.w	r2, r3, r2
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d750:	4413      	add	r3, r2
}
 800d752:	4618      	mov	r0, r3
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b086      	sub	sp, #24
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d904      	bls.n	800d77e <get_fat+0x20>
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d302      	bcc.n	800d784 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d77e:	2301      	movs	r3, #1
 800d780:	617b      	str	r3, [r7, #20]
 800d782:	e08f      	b.n	800d8a4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d788:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2b03      	cmp	r3, #3
 800d790:	d062      	beq.n	800d858 <get_fat+0xfa>
 800d792:	2b03      	cmp	r3, #3
 800d794:	dc7c      	bgt.n	800d890 <get_fat+0x132>
 800d796:	2b01      	cmp	r3, #1
 800d798:	d002      	beq.n	800d7a0 <get_fat+0x42>
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d042      	beq.n	800d824 <get_fat+0xc6>
 800d79e:	e077      	b.n	800d890 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	085b      	lsrs	r3, r3, #1
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	6a1a      	ldr	r2, [r3, #32]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	0a5b      	lsrs	r3, r3, #9
 800d7b6:	4413      	add	r3, r2
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	6938      	ldr	r0, [r7, #16]
 800d7bc:	f7ff ff14 	bl	800d5e8 <move_window>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d167      	bne.n	800d896 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	60fa      	str	r2, [r7, #12]
 800d7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d0:	693a      	ldr	r2, [r7, #16]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	6a1a      	ldr	r2, [r3, #32]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	0a5b      	lsrs	r3, r3, #9
 800d7e2:	4413      	add	r3, r2
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6938      	ldr	r0, [r7, #16]
 800d7e8:	f7ff fefe 	bl	800d5e8 <move_window>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d153      	bne.n	800d89a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d800:	021b      	lsls	r3, r3, #8
 800d802:	461a      	mov	r2, r3
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	4313      	orrs	r3, r2
 800d808:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <get_fat+0xbc>
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	091b      	lsrs	r3, r3, #4
 800d818:	e002      	b.n	800d820 <get_fat+0xc2>
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d820:	617b      	str	r3, [r7, #20]
			break;
 800d822:	e03f      	b.n	800d8a4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	6a1a      	ldr	r2, [r3, #32]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	0a1b      	lsrs	r3, r3, #8
 800d82c:	4413      	add	r3, r2
 800d82e:	4619      	mov	r1, r3
 800d830:	6938      	ldr	r0, [r7, #16]
 800d832:	f7ff fed9 	bl	800d5e8 <move_window>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d130      	bne.n	800d89e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d84a:	4413      	add	r3, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff fc1b 	bl	800d088 <ld_word>
 800d852:	4603      	mov	r3, r0
 800d854:	617b      	str	r3, [r7, #20]
			break;
 800d856:	e025      	b.n	800d8a4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	6a1a      	ldr	r2, [r3, #32]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	09db      	lsrs	r3, r3, #7
 800d860:	4413      	add	r3, r2
 800d862:	4619      	mov	r1, r3
 800d864:	6938      	ldr	r0, [r7, #16]
 800d866:	f7ff febf 	bl	800d5e8 <move_window>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d118      	bne.n	800d8a2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d87e:	4413      	add	r3, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fc19 	bl	800d0b8 <ld_dword>
 800d886:	4603      	mov	r3, r0
 800d888:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d88c:	617b      	str	r3, [r7, #20]
			break;
 800d88e:	e009      	b.n	800d8a4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d890:	2301      	movs	r3, #1
 800d892:	617b      	str	r3, [r7, #20]
 800d894:	e006      	b.n	800d8a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d896:	bf00      	nop
 800d898:	e004      	b.n	800d8a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d89a:	bf00      	nop
 800d89c:	e002      	b.n	800d8a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d89e:	bf00      	nop
 800d8a0:	e000      	b.n	800d8a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8a2:	bf00      	nop
		}
	}

	return val;
 800d8a4:	697b      	ldr	r3, [r7, #20]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3718      	adds	r7, #24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d8ae:	b590      	push	{r4, r7, lr}
 800d8b0:	b089      	sub	sp, #36	; 0x24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	60f8      	str	r0, [r7, #12]
 800d8b6:	60b9      	str	r1, [r7, #8]
 800d8b8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	f240 80d2 	bls.w	800da6a <put_fat+0x1bc>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	68ba      	ldr	r2, [r7, #8]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	f080 80cc 	bcs.w	800da6a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	f000 8096 	beq.w	800da08 <put_fat+0x15a>
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	f300 80cd 	bgt.w	800da7c <put_fat+0x1ce>
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d002      	beq.n	800d8ec <put_fat+0x3e>
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d06e      	beq.n	800d9c8 <put_fat+0x11a>
 800d8ea:	e0c7      	b.n	800da7c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	61bb      	str	r3, [r7, #24]
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	085b      	lsrs	r3, r3, #1
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6a1a      	ldr	r2, [r3, #32]
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	0a5b      	lsrs	r3, r3, #9
 800d902:	4413      	add	r3, r2
 800d904:	4619      	mov	r1, r3
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7ff fe6e 	bl	800d5e8 <move_window>
 800d90c:	4603      	mov	r3, r0
 800d90e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d910:	7ffb      	ldrb	r3, [r7, #31]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f040 80ab 	bne.w	800da6e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	1c59      	adds	r1, r3, #1
 800d922:	61b9      	str	r1, [r7, #24]
 800d924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d928:	4413      	add	r3, r2
 800d92a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	f003 0301 	and.w	r3, r3, #1
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00d      	beq.n	800d952 <put_fat+0xa4>
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	b25b      	sxtb	r3, r3
 800d93c:	f003 030f 	and.w	r3, r3, #15
 800d940:	b25a      	sxtb	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	b2db      	uxtb	r3, r3
 800d946:	011b      	lsls	r3, r3, #4
 800d948:	b25b      	sxtb	r3, r3
 800d94a:	4313      	orrs	r3, r2
 800d94c:	b25b      	sxtb	r3, r3
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	e001      	b.n	800d956 <put_fat+0xa8>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	b2db      	uxtb	r3, r3
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2201      	movs	r2, #1
 800d95e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6a1a      	ldr	r2, [r3, #32]
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	0a5b      	lsrs	r3, r3, #9
 800d968:	4413      	add	r3, r2
 800d96a:	4619      	mov	r1, r3
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7ff fe3b 	bl	800d5e8 <move_window>
 800d972:	4603      	mov	r3, r0
 800d974:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d976:	7ffb      	ldrb	r3, [r7, #31]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d17a      	bne.n	800da72 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d988:	4413      	add	r3, r2
 800d98a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <put_fat+0xf0>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	091b      	lsrs	r3, r3, #4
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	e00e      	b.n	800d9bc <put_fat+0x10e>
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	b25b      	sxtb	r3, r3
 800d9a4:	f023 030f 	bic.w	r3, r3, #15
 800d9a8:	b25a      	sxtb	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	0a1b      	lsrs	r3, r3, #8
 800d9ae:	b25b      	sxtb	r3, r3
 800d9b0:	f003 030f 	and.w	r3, r3, #15
 800d9b4:	b25b      	sxtb	r3, r3
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	b25b      	sxtb	r3, r3
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	70da      	strb	r2, [r3, #3]
			break;
 800d9c6:	e059      	b.n	800da7c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6a1a      	ldr	r2, [r3, #32]
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	0a1b      	lsrs	r3, r3, #8
 800d9d0:	4413      	add	r3, r2
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f7ff fe07 	bl	800d5e8 <move_window>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9de:	7ffb      	ldrb	r3, [r7, #31]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d148      	bne.n	800da76 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d9f2:	4413      	add	r3, r2
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	b292      	uxth	r2, r2
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7ff fb7f 	bl	800d0fe <st_word>
			fs->wflag = 1;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2201      	movs	r2, #1
 800da04:	70da      	strb	r2, [r3, #3]
			break;
 800da06:	e039      	b.n	800da7c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6a1a      	ldr	r2, [r3, #32]
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	09db      	lsrs	r3, r3, #7
 800da10:	4413      	add	r3, r2
 800da12:	4619      	mov	r1, r3
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f7ff fde7 	bl	800d5e8 <move_window>
 800da1a:	4603      	mov	r3, r0
 800da1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da1e:	7ffb      	ldrb	r3, [r7, #31]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d12a      	bne.n	800da7a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da38:	4413      	add	r3, r2
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fb3c 	bl	800d0b8 <ld_dword>
 800da40:	4603      	mov	r3, r0
 800da42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da46:	4323      	orrs	r3, r4
 800da48:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da58:	4413      	add	r3, r2
 800da5a:	6879      	ldr	r1, [r7, #4]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7ff fb69 	bl	800d134 <st_dword>
			fs->wflag = 1;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2201      	movs	r2, #1
 800da66:	70da      	strb	r2, [r3, #3]
			break;
 800da68:	e008      	b.n	800da7c <put_fat+0x1ce>
		}
	}
 800da6a:	bf00      	nop
 800da6c:	e006      	b.n	800da7c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da6e:	bf00      	nop
 800da70:	e004      	b.n	800da7c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da72:	bf00      	nop
 800da74:	e002      	b.n	800da7c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da76:	bf00      	nop
 800da78:	e000      	b.n	800da7c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da7a:	bf00      	nop
	return res;
 800da7c:	7ffb      	ldrb	r3, [r7, #31]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3724      	adds	r7, #36	; 0x24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd90      	pop	{r4, r7, pc}

0800da86 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b088      	sub	sp, #32
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	60b9      	str	r1, [r7, #8]
 800da90:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800da92:	2300      	movs	r3, #0
 800da94:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d904      	bls.n	800daac <remove_chain+0x26>
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d301      	bcc.n	800dab0 <remove_chain+0x2a>
 800daac:	2302      	movs	r3, #2
 800daae:	e04b      	b.n	800db48 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00c      	beq.n	800dad0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daba:	6879      	ldr	r1, [r7, #4]
 800dabc:	69b8      	ldr	r0, [r7, #24]
 800dabe:	f7ff fef6 	bl	800d8ae <put_fat>
 800dac2:	4603      	mov	r3, r0
 800dac4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dac6:	7ffb      	ldrb	r3, [r7, #31]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <remove_chain+0x4a>
 800dacc:	7ffb      	ldrb	r3, [r7, #31]
 800dace:	e03b      	b.n	800db48 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dad0:	68b9      	ldr	r1, [r7, #8]
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f7ff fe43 	bl	800d75e <get_fat>
 800dad8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d031      	beq.n	800db44 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d101      	bne.n	800daea <remove_chain+0x64>
 800dae6:	2302      	movs	r3, #2
 800dae8:	e02e      	b.n	800db48 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daf0:	d101      	bne.n	800daf6 <remove_chain+0x70>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e028      	b.n	800db48 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800daf6:	2200      	movs	r2, #0
 800daf8:	68b9      	ldr	r1, [r7, #8]
 800dafa:	69b8      	ldr	r0, [r7, #24]
 800dafc:	f7ff fed7 	bl	800d8ae <put_fat>
 800db00:	4603      	mov	r3, r0
 800db02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db04:	7ffb      	ldrb	r3, [r7, #31]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <remove_chain+0x88>
 800db0a:	7ffb      	ldrb	r3, [r7, #31]
 800db0c:	e01c      	b.n	800db48 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	691a      	ldr	r2, [r3, #16]
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	695b      	ldr	r3, [r3, #20]
 800db16:	3b02      	subs	r3, #2
 800db18:	429a      	cmp	r2, r3
 800db1a:	d20b      	bcs.n	800db34 <remove_chain+0xae>
			fs->free_clst++;
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	1c5a      	adds	r2, r3, #1
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	791b      	ldrb	r3, [r3, #4]
 800db2a:	f043 0301 	orr.w	r3, r3, #1
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	695b      	ldr	r3, [r3, #20]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d3c6      	bcc.n	800dad0 <remove_chain+0x4a>
 800db42:	e000      	b.n	800db46 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db44:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3720      	adds	r7, #32
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10d      	bne.n	800db82 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d004      	beq.n	800db7c <create_chain+0x2c>
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	69ba      	ldr	r2, [r7, #24]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d31b      	bcc.n	800dbb4 <create_chain+0x64>
 800db7c:	2301      	movs	r3, #1
 800db7e:	61bb      	str	r3, [r7, #24]
 800db80:	e018      	b.n	800dbb4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff fdea 	bl	800d75e <get_fat>
 800db8a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d801      	bhi.n	800db96 <create_chain+0x46>
 800db92:	2301      	movs	r3, #1
 800db94:	e070      	b.n	800dc78 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db9c:	d101      	bne.n	800dba2 <create_chain+0x52>
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	e06a      	b.n	800dc78 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d201      	bcs.n	800dbb0 <create_chain+0x60>
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	e063      	b.n	800dc78 <create_chain+0x128>
		scl = clst;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	69fa      	ldr	r2, [r7, #28]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d307      	bcc.n	800dbd8 <create_chain+0x88>
				ncl = 2;
 800dbc8:	2302      	movs	r3, #2
 800dbca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dbcc:	69fa      	ldr	r2, [r7, #28]
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d901      	bls.n	800dbd8 <create_chain+0x88>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	e04f      	b.n	800dc78 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dbd8:	69f9      	ldr	r1, [r7, #28]
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f7ff fdbf 	bl	800d75e <get_fat>
 800dbe0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00e      	beq.n	800dc06 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d003      	beq.n	800dbf6 <create_chain+0xa6>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbf4:	d101      	bne.n	800dbfa <create_chain+0xaa>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	e03e      	b.n	800dc78 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dbfa:	69fa      	ldr	r2, [r7, #28]
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d1da      	bne.n	800dbb8 <create_chain+0x68>
 800dc02:	2300      	movs	r3, #0
 800dc04:	e038      	b.n	800dc78 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc06:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc0c:	69f9      	ldr	r1, [r7, #28]
 800dc0e:	6938      	ldr	r0, [r7, #16]
 800dc10:	f7ff fe4d 	bl	800d8ae <put_fat>
 800dc14:	4603      	mov	r3, r0
 800dc16:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc18:	7dfb      	ldrb	r3, [r7, #23]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d109      	bne.n	800dc32 <create_chain+0xe2>
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d006      	beq.n	800dc32 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc24:	69fa      	ldr	r2, [r7, #28]
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	6938      	ldr	r0, [r7, #16]
 800dc2a:	f7ff fe40 	bl	800d8ae <put_fat>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d116      	bne.n	800dc66 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	69fa      	ldr	r2, [r7, #28]
 800dc3c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	691a      	ldr	r2, [r3, #16]
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	3b02      	subs	r3, #2
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d804      	bhi.n	800dc56 <create_chain+0x106>
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	1e5a      	subs	r2, r3, #1
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	791b      	ldrb	r3, [r3, #4]
 800dc5a:	f043 0301 	orr.w	r3, r3, #1
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	711a      	strb	r2, [r3, #4]
 800dc64:	e007      	b.n	800dc76 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d102      	bne.n	800dc72 <create_chain+0x122>
 800dc6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc70:	e000      	b.n	800dc74 <create_chain+0x124>
 800dc72:	2301      	movs	r3, #1
 800dc74:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc76:	69fb      	ldr	r3, [r7, #28]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3720      	adds	r7, #32
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b087      	sub	sp, #28
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc94:	3304      	adds	r3, #4
 800dc96:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	0a5b      	lsrs	r3, r3, #9
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	8952      	ldrh	r2, [r2, #10]
 800dca0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dca4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	1d1a      	adds	r2, r3, #4
 800dcaa:	613a      	str	r2, [r7, #16]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d101      	bne.n	800dcba <clmt_clust+0x3a>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e010      	b.n	800dcdc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d307      	bcc.n	800dcd2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dcc2:	697a      	ldr	r2, [r7, #20]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	617b      	str	r3, [r7, #20]
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	3304      	adds	r3, #4
 800dcce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcd0:	e7e9      	b.n	800dca6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dcd2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	4413      	add	r3, r2
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	371c      	adds	r7, #28
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b086      	sub	sp, #24
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcfe:	d204      	bcs.n	800dd0a <dir_sdi+0x22>
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	f003 031f 	and.w	r3, r3, #31
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd0a:	2302      	movs	r3, #2
 800dd0c:	e063      	b.n	800ddd6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <dir_sdi+0x46>
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d902      	bls.n	800dd2e <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10c      	bne.n	800dd4e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	095b      	lsrs	r3, r3, #5
 800dd38:	693a      	ldr	r2, [r7, #16]
 800dd3a:	8912      	ldrh	r2, [r2, #8]
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d301      	bcc.n	800dd44 <dir_sdi+0x5c>
 800dd40:	2302      	movs	r3, #2
 800dd42:	e048      	b.n	800ddd6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	61da      	str	r2, [r3, #28]
 800dd4c:	e029      	b.n	800dda2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	895b      	ldrh	r3, [r3, #10]
 800dd52:	025b      	lsls	r3, r3, #9
 800dd54:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd56:	e019      	b.n	800dd8c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6979      	ldr	r1, [r7, #20]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff fcfe 	bl	800d75e <get_fat>
 800dd62:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd6a:	d101      	bne.n	800dd70 <dir_sdi+0x88>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e032      	b.n	800ddd6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d904      	bls.n	800dd80 <dir_sdi+0x98>
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	695b      	ldr	r3, [r3, #20]
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d301      	bcc.n	800dd84 <dir_sdi+0x9c>
 800dd80:	2302      	movs	r3, #2
 800dd82:	e028      	b.n	800ddd6 <dir_sdi+0xee>
			ofs -= csz;
 800dd84:	683a      	ldr	r2, [r7, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d2e1      	bcs.n	800dd58 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dd94:	6979      	ldr	r1, [r7, #20]
 800dd96:	6938      	ldr	r0, [r7, #16]
 800dd98:	f7ff fcc2 	bl	800d720 <clust2sect>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	697a      	ldr	r2, [r7, #20]
 800dda6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	69db      	ldr	r3, [r3, #28]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d101      	bne.n	800ddb4 <dir_sdi+0xcc>
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	e010      	b.n	800ddd6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	69da      	ldr	r2, [r3, #28]
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	0a5b      	lsrs	r3, r3, #9
 800ddbc:	441a      	add	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddce:	441a      	add	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b086      	sub	sp, #24
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	3320      	adds	r3, #32
 800ddf4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d003      	beq.n	800de06 <dir_next+0x28>
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de04:	d301      	bcc.n	800de0a <dir_next+0x2c>
 800de06:	2304      	movs	r3, #4
 800de08:	e0aa      	b.n	800df60 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de10:	2b00      	cmp	r3, #0
 800de12:	f040 8098 	bne.w	800df46 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10b      	bne.n	800de40 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	095b      	lsrs	r3, r3, #5
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	8912      	ldrh	r2, [r2, #8]
 800de30:	4293      	cmp	r3, r2
 800de32:	f0c0 8088 	bcc.w	800df46 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	61da      	str	r2, [r3, #28]
 800de3c:	2304      	movs	r3, #4
 800de3e:	e08f      	b.n	800df60 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	0a5b      	lsrs	r3, r3, #9
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	8952      	ldrh	r2, [r2, #10]
 800de48:	3a01      	subs	r2, #1
 800de4a:	4013      	ands	r3, r2
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d17a      	bne.n	800df46 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	699b      	ldr	r3, [r3, #24]
 800de56:	4619      	mov	r1, r3
 800de58:	4610      	mov	r0, r2
 800de5a:	f7ff fc80 	bl	800d75e <get_fat>
 800de5e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	2b01      	cmp	r3, #1
 800de64:	d801      	bhi.n	800de6a <dir_next+0x8c>
 800de66:	2302      	movs	r3, #2
 800de68:	e07a      	b.n	800df60 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de70:	d101      	bne.n	800de76 <dir_next+0x98>
 800de72:	2301      	movs	r3, #1
 800de74:	e074      	b.n	800df60 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	697a      	ldr	r2, [r7, #20]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d358      	bcc.n	800df32 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d104      	bne.n	800de90 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	61da      	str	r2, [r3, #28]
 800de8c:	2304      	movs	r3, #4
 800de8e:	e067      	b.n	800df60 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f7ff fe59 	bl	800db50 <create_chain>
 800de9e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <dir_next+0xcc>
 800dea6:	2307      	movs	r3, #7
 800dea8:	e05a      	b.n	800df60 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d101      	bne.n	800deb4 <dir_next+0xd6>
 800deb0:	2302      	movs	r3, #2
 800deb2:	e055      	b.n	800df60 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800deba:	d101      	bne.n	800dec0 <dir_next+0xe2>
 800debc:	2301      	movs	r3, #1
 800debe:	e04f      	b.n	800df60 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7ff fb4d 	bl	800d560 <sync_window>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <dir_next+0xf2>
 800decc:	2301      	movs	r3, #1
 800dece:	e047      	b.n	800df60 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3330      	adds	r3, #48	; 0x30
 800ded4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ded8:	2100      	movs	r1, #0
 800deda:	4618      	mov	r0, r3
 800dedc:	f7ff f977 	bl	800d1ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dee0:	2300      	movs	r3, #0
 800dee2:	613b      	str	r3, [r7, #16]
 800dee4:	6979      	ldr	r1, [r7, #20]
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f7ff fc1a 	bl	800d720 <clust2sect>
 800deec:	4602      	mov	r2, r0
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	62da      	str	r2, [r3, #44]	; 0x2c
 800def2:	e012      	b.n	800df1a <dir_next+0x13c>
						fs->wflag = 1;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2201      	movs	r2, #1
 800def8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f7ff fb30 	bl	800d560 <sync_window>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <dir_next+0x12c>
 800df06:	2301      	movs	r3, #1
 800df08:	e02a      	b.n	800df60 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	3301      	adds	r3, #1
 800df0e:	613b      	str	r3, [r7, #16]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df14:	1c5a      	adds	r2, r3, #1
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	62da      	str	r2, [r3, #44]	; 0x2c
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	895b      	ldrh	r3, [r3, #10]
 800df1e:	461a      	mov	r2, r3
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	4293      	cmp	r3, r2
 800df24:	d3e6      	bcc.n	800def4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	1ad2      	subs	r2, r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	697a      	ldr	r2, [r7, #20]
 800df36:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df38:	6979      	ldr	r1, [r7, #20]
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fbf0 	bl	800d720 <clust2sect>
 800df40:	4602      	mov	r2, r0
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df58:	441a      	add	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df78:	2100      	movs	r1, #0
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff feb4 	bl	800dce8 <dir_sdi>
 800df80:	4603      	mov	r3, r0
 800df82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df84:	7dfb      	ldrb	r3, [r7, #23]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d12b      	bne.n	800dfe2 <dir_alloc+0x7a>
		n = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	69db      	ldr	r3, [r3, #28]
 800df92:	4619      	mov	r1, r3
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f7ff fb27 	bl	800d5e8 <move_window>
 800df9a:	4603      	mov	r3, r0
 800df9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df9e:	7dfb      	ldrb	r3, [r7, #23]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d11d      	bne.n	800dfe0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a1b      	ldr	r3, [r3, #32]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	2be5      	cmp	r3, #229	; 0xe5
 800dfac:	d004      	beq.n	800dfb8 <dir_alloc+0x50>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6a1b      	ldr	r3, [r3, #32]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d107      	bne.n	800dfc8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	613b      	str	r3, [r7, #16]
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d102      	bne.n	800dfcc <dir_alloc+0x64>
 800dfc6:	e00c      	b.n	800dfe2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfc8:	2300      	movs	r3, #0
 800dfca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfcc:	2101      	movs	r1, #1
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff ff05 	bl	800ddde <dir_next>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0d7      	beq.n	800df8e <dir_alloc+0x26>
 800dfde:	e000      	b.n	800dfe2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dfe0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	2b04      	cmp	r3, #4
 800dfe6:	d101      	bne.n	800dfec <dir_alloc+0x84>
 800dfe8:	2307      	movs	r3, #7
 800dfea:	75fb      	strb	r3, [r7, #23]
	return res;
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3718      	adds	r7, #24
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	331a      	adds	r3, #26
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff f83f 	bl	800d088 <ld_word>
 800e00a:	4603      	mov	r3, r0
 800e00c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b03      	cmp	r3, #3
 800e014:	d109      	bne.n	800e02a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	3314      	adds	r3, #20
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff f834 	bl	800d088 <ld_word>
 800e020:	4603      	mov	r3, r0
 800e022:	041b      	lsls	r3, r3, #16
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	4313      	orrs	r3, r2
 800e028:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e02a:	68fb      	ldr	r3, [r7, #12]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	331a      	adds	r3, #26
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	b292      	uxth	r2, r2
 800e048:	4611      	mov	r1, r2
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7ff f857 	bl	800d0fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b03      	cmp	r3, #3
 800e056:	d109      	bne.n	800e06c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	f103 0214 	add.w	r2, r3, #20
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	0c1b      	lsrs	r3, r3, #16
 800e062:	b29b      	uxth	r3, r3
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f7ff f849 	bl	800d0fe <st_word>
	}
}
 800e06c:	bf00      	nop
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e082:	2100      	movs	r1, #0
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f7ff fe2f 	bl	800dce8 <dir_sdi>
 800e08a:	4603      	mov	r3, r0
 800e08c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <dir_find+0x24>
 800e094:	7dfb      	ldrb	r3, [r7, #23]
 800e096:	e03e      	b.n	800e116 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	69db      	ldr	r3, [r3, #28]
 800e09c:	4619      	mov	r1, r3
 800e09e:	6938      	ldr	r0, [r7, #16]
 800e0a0:	f7ff faa2 	bl	800d5e8 <move_window>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0a8:	7dfb      	ldrb	r3, [r7, #23]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d12f      	bne.n	800e10e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a1b      	ldr	r3, [r3, #32]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e0b6:	7bfb      	ldrb	r3, [r7, #15]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d102      	bne.n	800e0c2 <dir_find+0x4e>
 800e0bc:	2304      	movs	r3, #4
 800e0be:	75fb      	strb	r3, [r7, #23]
 800e0c0:	e028      	b.n	800e114 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	330b      	adds	r3, #11
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	330b      	adds	r3, #11
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	f003 0308 	and.w	r3, r3, #8
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10a      	bne.n	800e0fa <dir_find+0x86>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a18      	ldr	r0, [r3, #32]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3324      	adds	r3, #36	; 0x24
 800e0ec:	220b      	movs	r2, #11
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	f7ff f888 	bl	800d204 <mem_cmp>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00b      	beq.n	800e112 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7ff fe6e 	bl	800ddde <dir_next>
 800e102:	4603      	mov	r3, r0
 800e104:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e106:	7dfb      	ldrb	r3, [r7, #23]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d0c5      	beq.n	800e098 <dir_find+0x24>
 800e10c:	e002      	b.n	800e114 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e10e:	bf00      	nop
 800e110:	e000      	b.n	800e114 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e112:	bf00      	nop

	return res;
 800e114:	7dfb      	ldrb	r3, [r7, #23]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3718      	adds	r7, #24
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e12c:	2101      	movs	r1, #1
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff ff1a 	bl	800df68 <dir_alloc>
 800e134:	4603      	mov	r3, r0
 800e136:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e138:	7bfb      	ldrb	r3, [r7, #15]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d11c      	bne.n	800e178 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	69db      	ldr	r3, [r3, #28]
 800e142:	4619      	mov	r1, r3
 800e144:	68b8      	ldr	r0, [r7, #8]
 800e146:	f7ff fa4f 	bl	800d5e8 <move_window>
 800e14a:	4603      	mov	r3, r0
 800e14c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d111      	bne.n	800e178 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1b      	ldr	r3, [r3, #32]
 800e158:	2220      	movs	r2, #32
 800e15a:	2100      	movs	r1, #0
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7ff f836 	bl	800d1ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a18      	ldr	r0, [r3, #32]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	3324      	adds	r3, #36	; 0x24
 800e16a:	220b      	movs	r2, #11
 800e16c:	4619      	mov	r1, r3
 800e16e:	f7ff f80d 	bl	800d18c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2201      	movs	r2, #1
 800e176:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e178:	7bfb      	ldrb	r3, [r7, #15]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
	...

0800e184 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b088      	sub	sp, #32
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	60fb      	str	r3, [r7, #12]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3324      	adds	r3, #36	; 0x24
 800e198:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e19a:	220b      	movs	r2, #11
 800e19c:	2120      	movs	r1, #32
 800e19e:	68b8      	ldr	r0, [r7, #8]
 800e1a0:	f7ff f815 	bl	800d1ce <mem_set>
	si = i = 0; ni = 8;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	613b      	str	r3, [r7, #16]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	61fb      	str	r3, [r7, #28]
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	1c5a      	adds	r2, r3, #1
 800e1b4:	61fa      	str	r2, [r7, #28]
 800e1b6:	68fa      	ldr	r2, [r7, #12]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e1be:	7efb      	ldrb	r3, [r7, #27]
 800e1c0:	2b20      	cmp	r3, #32
 800e1c2:	d94e      	bls.n	800e262 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e1c4:	7efb      	ldrb	r3, [r7, #27]
 800e1c6:	2b2f      	cmp	r3, #47	; 0x2f
 800e1c8:	d006      	beq.n	800e1d8 <create_name+0x54>
 800e1ca:	7efb      	ldrb	r3, [r7, #27]
 800e1cc:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ce:	d110      	bne.n	800e1f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e1d0:	e002      	b.n	800e1d8 <create_name+0x54>
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	61fb      	str	r3, [r7, #28]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	4413      	add	r3, r2
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b2f      	cmp	r3, #47	; 0x2f
 800e1e2:	d0f6      	beq.n	800e1d2 <create_name+0x4e>
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ee:	d0f0      	beq.n	800e1d2 <create_name+0x4e>
			break;
 800e1f0:	e038      	b.n	800e264 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e1f2:	7efb      	ldrb	r3, [r7, #27]
 800e1f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f6:	d003      	beq.n	800e200 <create_name+0x7c>
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d30c      	bcc.n	800e21a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2b0b      	cmp	r3, #11
 800e204:	d002      	beq.n	800e20c <create_name+0x88>
 800e206:	7efb      	ldrb	r3, [r7, #27]
 800e208:	2b2e      	cmp	r3, #46	; 0x2e
 800e20a:	d001      	beq.n	800e210 <create_name+0x8c>
 800e20c:	2306      	movs	r3, #6
 800e20e:	e044      	b.n	800e29a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e210:	2308      	movs	r3, #8
 800e212:	613b      	str	r3, [r7, #16]
 800e214:	230b      	movs	r3, #11
 800e216:	617b      	str	r3, [r7, #20]
			continue;
 800e218:	e022      	b.n	800e260 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e21a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	da04      	bge.n	800e22c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e222:	7efb      	ldrb	r3, [r7, #27]
 800e224:	3b80      	subs	r3, #128	; 0x80
 800e226:	4a1f      	ldr	r2, [pc, #124]	; (800e2a4 <create_name+0x120>)
 800e228:	5cd3      	ldrb	r3, [r2, r3]
 800e22a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e22c:	7efb      	ldrb	r3, [r7, #27]
 800e22e:	4619      	mov	r1, r3
 800e230:	481d      	ldr	r0, [pc, #116]	; (800e2a8 <create_name+0x124>)
 800e232:	f7ff f80e 	bl	800d252 <chk_chr>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <create_name+0xbc>
 800e23c:	2306      	movs	r3, #6
 800e23e:	e02c      	b.n	800e29a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e240:	7efb      	ldrb	r3, [r7, #27]
 800e242:	2b60      	cmp	r3, #96	; 0x60
 800e244:	d905      	bls.n	800e252 <create_name+0xce>
 800e246:	7efb      	ldrb	r3, [r7, #27]
 800e248:	2b7a      	cmp	r3, #122	; 0x7a
 800e24a:	d802      	bhi.n	800e252 <create_name+0xce>
 800e24c:	7efb      	ldrb	r3, [r7, #27]
 800e24e:	3b20      	subs	r3, #32
 800e250:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	613a      	str	r2, [r7, #16]
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	4413      	add	r3, r2
 800e25c:	7efa      	ldrb	r2, [r7, #27]
 800e25e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e260:	e7a6      	b.n	800e1b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e262:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	441a      	add	r2, r3
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <create_name+0xf4>
 800e274:	2306      	movs	r3, #6
 800e276:	e010      	b.n	800e29a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2be5      	cmp	r3, #229	; 0xe5
 800e27e:	d102      	bne.n	800e286 <create_name+0x102>
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2205      	movs	r2, #5
 800e284:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e286:	7efb      	ldrb	r3, [r7, #27]
 800e288:	2b20      	cmp	r3, #32
 800e28a:	d801      	bhi.n	800e290 <create_name+0x10c>
 800e28c:	2204      	movs	r2, #4
 800e28e:	e000      	b.n	800e292 <create_name+0x10e>
 800e290:	2200      	movs	r2, #0
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	330b      	adds	r3, #11
 800e296:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e298:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3720      	adds	r7, #32
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	08011bac 	.word	0x08011bac
 800e2a8:	08011a9c 	.word	0x08011a9c

0800e2ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2c0:	e002      	b.n	800e2c8 <follow_path+0x1c>
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	603b      	str	r3, [r7, #0]
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	2b2f      	cmp	r3, #47	; 0x2f
 800e2ce:	d0f8      	beq.n	800e2c2 <follow_path+0x16>
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	2b5c      	cmp	r3, #92	; 0x5c
 800e2d6:	d0f4      	beq.n	800e2c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b1f      	cmp	r3, #31
 800e2e4:	d80a      	bhi.n	800e2fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2280      	movs	r2, #128	; 0x80
 800e2ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff fcf9 	bl	800dce8 <dir_sdi>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	75fb      	strb	r3, [r7, #23]
 800e2fa:	e043      	b.n	800e384 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2fc:	463b      	mov	r3, r7
 800e2fe:	4619      	mov	r1, r3
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f7ff ff3f 	bl	800e184 <create_name>
 800e306:	4603      	mov	r3, r0
 800e308:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e30a:	7dfb      	ldrb	r3, [r7, #23]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d134      	bne.n	800e37a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff feaf 	bl	800e074 <dir_find>
 800e316:	4603      	mov	r3, r0
 800e318:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e320:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e322:	7dfb      	ldrb	r3, [r7, #23]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00a      	beq.n	800e33e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	d127      	bne.n	800e37e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e32e:	7afb      	ldrb	r3, [r7, #11]
 800e330:	f003 0304 	and.w	r3, r3, #4
 800e334:	2b00      	cmp	r3, #0
 800e336:	d122      	bne.n	800e37e <follow_path+0xd2>
 800e338:	2305      	movs	r3, #5
 800e33a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e33c:	e01f      	b.n	800e37e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e33e:	7afb      	ldrb	r3, [r7, #11]
 800e340:	f003 0304 	and.w	r3, r3, #4
 800e344:	2b00      	cmp	r3, #0
 800e346:	d11c      	bne.n	800e382 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	799b      	ldrb	r3, [r3, #6]
 800e34c:	f003 0310 	and.w	r3, r3, #16
 800e350:	2b00      	cmp	r3, #0
 800e352:	d102      	bne.n	800e35a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e354:	2305      	movs	r3, #5
 800e356:	75fb      	strb	r3, [r7, #23]
 800e358:	e014      	b.n	800e384 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	695b      	ldr	r3, [r3, #20]
 800e364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e368:	4413      	add	r3, r2
 800e36a:	4619      	mov	r1, r3
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f7ff fe42 	bl	800dff6 <ld_clust>
 800e372:	4602      	mov	r2, r0
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e378:	e7c0      	b.n	800e2fc <follow_path+0x50>
			if (res != FR_OK) break;
 800e37a:	bf00      	nop
 800e37c:	e002      	b.n	800e384 <follow_path+0xd8>
				break;
 800e37e:	bf00      	nop
 800e380:	e000      	b.n	800e384 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e382:	bf00      	nop
			}
		}
	}

	return res;
 800e384:	7dfb      	ldrb	r3, [r7, #23]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e38e:	b480      	push	{r7}
 800e390:	b087      	sub	sp, #28
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e39a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d031      	beq.n	800e408 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	617b      	str	r3, [r7, #20]
 800e3aa:	e002      	b.n	800e3b2 <get_ldnumber+0x24>
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	2b20      	cmp	r3, #32
 800e3b8:	d903      	bls.n	800e3c2 <get_ldnumber+0x34>
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b3a      	cmp	r3, #58	; 0x3a
 800e3c0:	d1f4      	bne.n	800e3ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b3a      	cmp	r3, #58	; 0x3a
 800e3c8:	d11c      	bne.n	800e404 <get_ldnumber+0x76>
			tp = *path;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	1c5a      	adds	r2, r3, #1
 800e3d4:	60fa      	str	r2, [r7, #12]
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	3b30      	subs	r3, #48	; 0x30
 800e3da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2b09      	cmp	r3, #9
 800e3e0:	d80e      	bhi.n	800e400 <get_ldnumber+0x72>
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d10a      	bne.n	800e400 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d107      	bne.n	800e400 <get_ldnumber+0x72>
					vol = (int)i;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	617b      	str	r3, [r7, #20]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	697a      	ldr	r2, [r7, #20]
 800e3fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	e002      	b.n	800e40a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e404:	2300      	movs	r3, #0
 800e406:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e408:	693b      	ldr	r3, [r7, #16]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	371c      	adds	r7, #28
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr
	...

0800e418 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	70da      	strb	r2, [r3, #3]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e42e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff f8d8 	bl	800d5e8 <move_window>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <check_fs+0x2a>
 800e43e:	2304      	movs	r3, #4
 800e440:	e038      	b.n	800e4b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	3330      	adds	r3, #48	; 0x30
 800e446:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe fe1c 	bl	800d088 <ld_word>
 800e450:	4603      	mov	r3, r0
 800e452:	461a      	mov	r2, r3
 800e454:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e458:	429a      	cmp	r2, r3
 800e45a:	d001      	beq.n	800e460 <check_fs+0x48>
 800e45c:	2303      	movs	r3, #3
 800e45e:	e029      	b.n	800e4b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e466:	2be9      	cmp	r3, #233	; 0xe9
 800e468:	d009      	beq.n	800e47e <check_fs+0x66>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e470:	2beb      	cmp	r3, #235	; 0xeb
 800e472:	d11e      	bne.n	800e4b2 <check_fs+0x9a>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e47a:	2b90      	cmp	r3, #144	; 0x90
 800e47c:	d119      	bne.n	800e4b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	3330      	adds	r3, #48	; 0x30
 800e482:	3336      	adds	r3, #54	; 0x36
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fe17 	bl	800d0b8 <ld_dword>
 800e48a:	4603      	mov	r3, r0
 800e48c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e490:	4a0a      	ldr	r2, [pc, #40]	; (800e4bc <check_fs+0xa4>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d101      	bne.n	800e49a <check_fs+0x82>
 800e496:	2300      	movs	r3, #0
 800e498:	e00c      	b.n	800e4b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	3330      	adds	r3, #48	; 0x30
 800e49e:	3352      	adds	r3, #82	; 0x52
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fe fe09 	bl	800d0b8 <ld_dword>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	4a05      	ldr	r2, [pc, #20]	; (800e4c0 <check_fs+0xa8>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d101      	bne.n	800e4b2 <check_fs+0x9a>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e000      	b.n	800e4b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e4b2:	2302      	movs	r3, #2
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	00544146 	.word	0x00544146
 800e4c0:	33544146 	.word	0x33544146

0800e4c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b096      	sub	sp, #88	; 0x58
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff ff58 	bl	800e38e <get_ldnumber>
 800e4de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	da01      	bge.n	800e4ea <find_volume+0x26>
 800e4e6:	230b      	movs	r3, #11
 800e4e8:	e22d      	b.n	800e946 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e4ea:	4aa1      	ldr	r2, [pc, #644]	; (800e770 <find_volume+0x2ac>)
 800e4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d101      	bne.n	800e4fe <find_volume+0x3a>
 800e4fa:	230c      	movs	r3, #12
 800e4fc:	e223      	b.n	800e946 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e502:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	f023 0301 	bic.w	r3, r3, #1
 800e50a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d01a      	beq.n	800e54a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe fd17 	bl	800cf4c <disk_status>
 800e51e:	4603      	mov	r3, r0
 800e520:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e524:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d10c      	bne.n	800e54a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d007      	beq.n	800e546 <find_volume+0x82>
 800e536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e53a:	f003 0304 	and.w	r3, r3, #4
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e542:	230a      	movs	r3, #10
 800e544:	e1ff      	b.n	800e946 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e546:	2300      	movs	r3, #0
 800e548:	e1fd      	b.n	800e946 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54c:	2200      	movs	r2, #0
 800e54e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e552:	b2da      	uxtb	r2, r3
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	785b      	ldrb	r3, [r3, #1]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fe fd0f 	bl	800cf80 <disk_initialize>
 800e562:	4603      	mov	r3, r0
 800e564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e56c:	f003 0301 	and.w	r3, r3, #1
 800e570:	2b00      	cmp	r3, #0
 800e572:	d001      	beq.n	800e578 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e574:	2303      	movs	r3, #3
 800e576:	e1e6      	b.n	800e946 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e578:	79fb      	ldrb	r3, [r7, #7]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d007      	beq.n	800e58e <find_volume+0xca>
 800e57e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e582:	f003 0304 	and.w	r3, r3, #4
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e58a:	230a      	movs	r3, #10
 800e58c:	e1db      	b.n	800e946 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e592:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e594:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e596:	f7ff ff3f 	bl	800e418 <check_fs>
 800e59a:	4603      	mov	r3, r0
 800e59c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e5a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	d149      	bne.n	800e63c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	643b      	str	r3, [r7, #64]	; 0x40
 800e5ac:	e01e      	b.n	800e5ec <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5b6:	011b      	lsls	r3, r3, #4
 800e5b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e5bc:	4413      	add	r3, r2
 800e5be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d006      	beq.n	800e5d8 <find_volume+0x114>
 800e5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fe fd72 	bl	800d0b8 <ld_dword>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	e000      	b.n	800e5da <find_volume+0x116>
 800e5d8:	2200      	movs	r2, #0
 800e5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	3358      	adds	r3, #88	; 0x58
 800e5e0:	443b      	add	r3, r7
 800e5e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	643b      	str	r3, [r7, #64]	; 0x40
 800e5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d9dd      	bls.n	800e5ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <find_volume+0x13e>
 800e5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5fe:	3b01      	subs	r3, #1
 800e600:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	3358      	adds	r3, #88	; 0x58
 800e608:	443b      	add	r3, r7
 800e60a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e60e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e612:	2b00      	cmp	r3, #0
 800e614:	d005      	beq.n	800e622 <find_volume+0x15e>
 800e616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e61a:	f7ff fefd 	bl	800e418 <check_fs>
 800e61e:	4603      	mov	r3, r0
 800e620:	e000      	b.n	800e624 <find_volume+0x160>
 800e622:	2303      	movs	r3, #3
 800e624:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d905      	bls.n	800e63c <find_volume+0x178>
 800e630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e632:	3301      	adds	r3, #1
 800e634:	643b      	str	r3, [r7, #64]	; 0x40
 800e636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d9e2      	bls.n	800e602 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e63c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e640:	2b04      	cmp	r3, #4
 800e642:	d101      	bne.n	800e648 <find_volume+0x184>
 800e644:	2301      	movs	r3, #1
 800e646:	e17e      	b.n	800e946 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e648:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d901      	bls.n	800e654 <find_volume+0x190>
 800e650:	230d      	movs	r3, #13
 800e652:	e178      	b.n	800e946 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e656:	3330      	adds	r3, #48	; 0x30
 800e658:	330b      	adds	r3, #11
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe fd14 	bl	800d088 <ld_word>
 800e660:	4603      	mov	r3, r0
 800e662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e666:	d001      	beq.n	800e66c <find_volume+0x1a8>
 800e668:	230d      	movs	r3, #13
 800e66a:	e16c      	b.n	800e946 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66e:	3330      	adds	r3, #48	; 0x30
 800e670:	3316      	adds	r3, #22
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe fd08 	bl	800d088 <ld_word>
 800e678:	4603      	mov	r3, r0
 800e67a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d106      	bne.n	800e690 <find_volume+0x1cc>
 800e682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e684:	3330      	adds	r3, #48	; 0x30
 800e686:	3324      	adds	r3, #36	; 0x24
 800e688:	4618      	mov	r0, r3
 800e68a:	f7fe fd15 	bl	800d0b8 <ld_dword>
 800e68e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e694:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e698:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a2:	789b      	ldrb	r3, [r3, #2]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d005      	beq.n	800e6b4 <find_volume+0x1f0>
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6aa:	789b      	ldrb	r3, [r3, #2]
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d001      	beq.n	800e6b4 <find_volume+0x1f0>
 800e6b0:	230d      	movs	r3, #13
 800e6b2:	e148      	b.n	800e946 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b6:	789b      	ldrb	r3, [r3, #2]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6bc:	fb02 f303 	mul.w	r3, r2, r3
 800e6c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d0:	895b      	ldrh	r3, [r3, #10]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d008      	beq.n	800e6e8 <find_volume+0x224>
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d8:	895b      	ldrh	r3, [r3, #10]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	895b      	ldrh	r3, [r3, #10]
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <find_volume+0x228>
 800e6e8:	230d      	movs	r3, #13
 800e6ea:	e12c      	b.n	800e946 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ee:	3330      	adds	r3, #48	; 0x30
 800e6f0:	3311      	adds	r3, #17
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe fcc8 	bl	800d088 <ld_word>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	891b      	ldrh	r3, [r3, #8]
 800e704:	f003 030f 	and.w	r3, r3, #15
 800e708:	b29b      	uxth	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <find_volume+0x24e>
 800e70e:	230d      	movs	r3, #13
 800e710:	e119      	b.n	800e946 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e714:	3330      	adds	r3, #48	; 0x30
 800e716:	3313      	adds	r3, #19
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fe fcb5 	bl	800d088 <ld_word>
 800e71e:	4603      	mov	r3, r0
 800e720:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e724:	2b00      	cmp	r3, #0
 800e726:	d106      	bne.n	800e736 <find_volume+0x272>
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	3330      	adds	r3, #48	; 0x30
 800e72c:	3320      	adds	r3, #32
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fe fcc2 	bl	800d0b8 <ld_dword>
 800e734:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e738:	3330      	adds	r3, #48	; 0x30
 800e73a:	330e      	adds	r3, #14
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fe fca3 	bl	800d088 <ld_word>
 800e742:	4603      	mov	r3, r0
 800e744:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e746:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d101      	bne.n	800e750 <find_volume+0x28c>
 800e74c:	230d      	movs	r3, #13
 800e74e:	e0fa      	b.n	800e946 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e750:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e754:	4413      	add	r3, r2
 800e756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e758:	8912      	ldrh	r2, [r2, #8]
 800e75a:	0912      	lsrs	r2, r2, #4
 800e75c:	b292      	uxth	r2, r2
 800e75e:	4413      	add	r3, r2
 800e760:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	429a      	cmp	r2, r3
 800e768:	d204      	bcs.n	800e774 <find_volume+0x2b0>
 800e76a:	230d      	movs	r3, #13
 800e76c:	e0eb      	b.n	800e946 <find_volume+0x482>
 800e76e:	bf00      	nop
 800e770:	20000978 	.word	0x20000978
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e77c:	8952      	ldrh	r2, [r2, #10]
 800e77e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e782:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <find_volume+0x2ca>
 800e78a:	230d      	movs	r3, #13
 800e78c:	e0db      	b.n	800e946 <find_volume+0x482>
		fmt = FS_FAT32;
 800e78e:	2303      	movs	r3, #3
 800e790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e796:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d802      	bhi.n	800e7a4 <find_volume+0x2e0>
 800e79e:	2302      	movs	r3, #2
 800e7a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d802      	bhi.n	800e7b4 <find_volume+0x2f0>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	1c9a      	adds	r2, r3, #2
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ba:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7c0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e7c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e7c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7c6:	441a      	add	r2, r3
 800e7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ca:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e7cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	441a      	add	r2, r3
 800e7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e7d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d11e      	bne.n	800e81c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e0:	3330      	adds	r3, #48	; 0x30
 800e7e2:	332a      	adds	r3, #42	; 0x2a
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fc4f 	bl	800d088 <ld_word>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d001      	beq.n	800e7f4 <find_volume+0x330>
 800e7f0:	230d      	movs	r3, #13
 800e7f2:	e0a8      	b.n	800e946 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f6:	891b      	ldrh	r3, [r3, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d001      	beq.n	800e800 <find_volume+0x33c>
 800e7fc:	230d      	movs	r3, #13
 800e7fe:	e0a2      	b.n	800e946 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	3330      	adds	r3, #48	; 0x30
 800e804:	332c      	adds	r3, #44	; 0x2c
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fc56 	bl	800d0b8 <ld_dword>
 800e80c:	4602      	mov	r2, r0
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	647b      	str	r3, [r7, #68]	; 0x44
 800e81a:	e01f      	b.n	800e85c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	891b      	ldrh	r3, [r3, #8]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d101      	bne.n	800e828 <find_volume+0x364>
 800e824:	230d      	movs	r3, #13
 800e826:	e08e      	b.n	800e946 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	6a1a      	ldr	r2, [r3, #32]
 800e82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e82e:	441a      	add	r2, r3
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e838:	2b02      	cmp	r3, #2
 800e83a:	d103      	bne.n	800e844 <find_volume+0x380>
 800e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	e00a      	b.n	800e85a <find_volume+0x396>
 800e844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e846:	695a      	ldr	r2, [r3, #20]
 800e848:	4613      	mov	r3, r2
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	4413      	add	r3, r2
 800e84e:	085a      	lsrs	r2, r3, #1
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	695b      	ldr	r3, [r3, #20]
 800e854:	f003 0301 	and.w	r3, r3, #1
 800e858:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e85a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	699a      	ldr	r2, [r3, #24]
 800e860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e862:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e866:	0a5b      	lsrs	r3, r3, #9
 800e868:	429a      	cmp	r2, r3
 800e86a:	d201      	bcs.n	800e870 <find_volume+0x3ac>
 800e86c:	230d      	movs	r3, #13
 800e86e:	e06a      	b.n	800e946 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e876:	611a      	str	r2, [r3, #16]
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	691a      	ldr	r2, [r3, #16]
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	2280      	movs	r2, #128	; 0x80
 800e884:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	d149      	bne.n	800e922 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e890:	3330      	adds	r3, #48	; 0x30
 800e892:	3330      	adds	r3, #48	; 0x30
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe fbf7 	bl	800d088 <ld_word>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d140      	bne.n	800e922 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8a8:	f7fe fe9e 	bl	800d5e8 <move_window>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d137      	bne.n	800e922 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	3330      	adds	r3, #48	; 0x30
 800e8bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fbe1 	bl	800d088 <ld_word>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d127      	bne.n	800e922 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d4:	3330      	adds	r3, #48	; 0x30
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fe fbee 	bl	800d0b8 <ld_dword>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	4a1c      	ldr	r2, [pc, #112]	; (800e950 <find_volume+0x48c>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d11e      	bne.n	800e922 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e6:	3330      	adds	r3, #48	; 0x30
 800e8e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fe fbe3 	bl	800d0b8 <ld_dword>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4a17      	ldr	r2, [pc, #92]	; (800e954 <find_volume+0x490>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d113      	bne.n	800e922 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fc:	3330      	adds	r3, #48	; 0x30
 800e8fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe fbd8 	bl	800d0b8 <ld_dword>
 800e908:	4602      	mov	r2, r0
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	3330      	adds	r3, #48	; 0x30
 800e912:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe fbce 	bl	800d0b8 <ld_dword>
 800e91c:	4602      	mov	r2, r0
 800e91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e920:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e928:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e92a:	4b0b      	ldr	r3, [pc, #44]	; (800e958 <find_volume+0x494>)
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	3301      	adds	r3, #1
 800e930:	b29a      	uxth	r2, r3
 800e932:	4b09      	ldr	r3, [pc, #36]	; (800e958 <find_volume+0x494>)
 800e934:	801a      	strh	r2, [r3, #0]
 800e936:	4b08      	ldr	r3, [pc, #32]	; (800e958 <find_volume+0x494>)
 800e938:	881a      	ldrh	r2, [r3, #0]
 800e93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e93e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e940:	f7fe fdea 	bl	800d518 <clear_lock>
#endif
	return FR_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3758      	adds	r7, #88	; 0x58
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	41615252 	.word	0x41615252
 800e954:	61417272 	.word	0x61417272
 800e958:	2000097c 	.word	0x2000097c

0800e95c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e966:	2309      	movs	r3, #9
 800e968:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01c      	beq.n	800e9aa <validate+0x4e>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d018      	beq.n	800e9aa <validate+0x4e>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d013      	beq.n	800e9aa <validate+0x4e>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	889a      	ldrh	r2, [r3, #4]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	88db      	ldrh	r3, [r3, #6]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d10c      	bne.n	800e9aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	785b      	ldrb	r3, [r3, #1]
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fad8 	bl	800cf4c <disk_status>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <validate+0x4e>
			res = FR_OK;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e9aa:	7bfb      	ldrb	r3, [r7, #15]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <validate+0x5a>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	e000      	b.n	800e9b8 <validate+0x5c>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	6013      	str	r3, [r2, #0]
	return res;
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
	...

0800e9c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e9da:	f107 0310 	add.w	r3, r7, #16
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff fcd5 	bl	800e38e <get_ldnumber>
 800e9e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	da01      	bge.n	800e9f0 <f_mount+0x28>
 800e9ec:	230b      	movs	r3, #11
 800e9ee:	e02b      	b.n	800ea48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e9f0:	4a17      	ldr	r2, [pc, #92]	; (800ea50 <f_mount+0x88>)
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d005      	beq.n	800ea0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea00:	69b8      	ldr	r0, [r7, #24]
 800ea02:	f7fe fd89 	bl	800d518 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d002      	beq.n	800ea18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	490d      	ldr	r1, [pc, #52]	; (800ea50 <f_mount+0x88>)
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <f_mount+0x66>
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d001      	beq.n	800ea32 <f_mount+0x6a>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e00a      	b.n	800ea48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ea32:	f107 010c 	add.w	r1, r7, #12
 800ea36:	f107 0308 	add.w	r3, r7, #8
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7ff fd41 	bl	800e4c4 <find_volume>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3720      	adds	r7, #32
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	20000978 	.word	0x20000978

0800ea54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b09a      	sub	sp, #104	; 0x68
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	4613      	mov	r3, r2
 800ea60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d101      	bne.n	800ea6c <f_open+0x18>
 800ea68:	2309      	movs	r3, #9
 800ea6a:	e1ad      	b.n	800edc8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ea6c:	79fb      	ldrb	r3, [r7, #7]
 800ea6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ea74:	79fa      	ldrb	r2, [r7, #7]
 800ea76:	f107 0114 	add.w	r1, r7, #20
 800ea7a:	f107 0308 	add.w	r3, r7, #8
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff fd20 	bl	800e4c4 <find_volume>
 800ea84:	4603      	mov	r3, r0
 800ea86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ea8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f040 8191 	bne.w	800edb6 <f_open+0x362>
		dj.obj.fs = fs;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	f107 0318 	add.w	r3, r7, #24
 800ea9e:	4611      	mov	r1, r2
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7ff fc03 	bl	800e2ac <follow_path>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eaac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d11a      	bne.n	800eaea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eab4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800eab8:	b25b      	sxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	da03      	bge.n	800eac6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800eabe:	2306      	movs	r3, #6
 800eac0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eac4:	e011      	b.n	800eaea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eac6:	79fb      	ldrb	r3, [r7, #7]
 800eac8:	f023 0301 	bic.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	bf14      	ite	ne
 800ead0:	2301      	movne	r3, #1
 800ead2:	2300      	moveq	r3, #0
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	461a      	mov	r2, r3
 800ead8:	f107 0318 	add.w	r3, r7, #24
 800eadc:	4611      	mov	r1, r2
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe fbd2 	bl	800d288 <chk_lock>
 800eae4:	4603      	mov	r3, r0
 800eae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eaea:	79fb      	ldrb	r3, [r7, #7]
 800eaec:	f003 031c 	and.w	r3, r3, #28
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d07f      	beq.n	800ebf4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eaf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d017      	beq.n	800eb2c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eafc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d10e      	bne.n	800eb22 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eb04:	f7fe fc1c 	bl	800d340 <enq_lock>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d006      	beq.n	800eb1c <f_open+0xc8>
 800eb0e:	f107 0318 	add.w	r3, r7, #24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7ff fb03 	bl	800e11e <dir_register>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	e000      	b.n	800eb1e <f_open+0xca>
 800eb1c:	2312      	movs	r3, #18
 800eb1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb22:	79fb      	ldrb	r3, [r7, #7]
 800eb24:	f043 0308 	orr.w	r3, r3, #8
 800eb28:	71fb      	strb	r3, [r7, #7]
 800eb2a:	e010      	b.n	800eb4e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb2c:	7fbb      	ldrb	r3, [r7, #30]
 800eb2e:	f003 0311 	and.w	r3, r3, #17
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d003      	beq.n	800eb3e <f_open+0xea>
					res = FR_DENIED;
 800eb36:	2307      	movs	r3, #7
 800eb38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb3c:	e007      	b.n	800eb4e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb3e:	79fb      	ldrb	r3, [r7, #7]
 800eb40:	f003 0304 	and.w	r3, r3, #4
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <f_open+0xfa>
 800eb48:	2308      	movs	r3, #8
 800eb4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d168      	bne.n	800ec28 <f_open+0x1d4>
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	f003 0308 	and.w	r3, r3, #8
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d063      	beq.n	800ec28 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eb60:	f7fc fba6 	bl	800b2b0 <get_fattime>
 800eb64:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	330e      	adds	r3, #14
 800eb6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fe fae1 	bl	800d134 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	3316      	adds	r3, #22
 800eb76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe fadb 	bl	800d134 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	330b      	adds	r3, #11
 800eb82:	2220      	movs	r2, #32
 800eb84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7ff fa32 	bl	800dff6 <ld_clust>
 800eb92:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb98:	2200      	movs	r2, #0
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7ff fa4a 	bl	800e034 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba2:	331c      	adds	r3, #28
 800eba4:	2100      	movs	r1, #0
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe fac4 	bl	800d134 <st_dword>
					fs->wflag = 1;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ebb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d037      	beq.n	800ec28 <f_open+0x1d4>
						dw = fs->winsect;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebbc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ebbe:	f107 0318 	add.w	r3, r7, #24
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fe ff5d 	bl	800da86 <remove_chain>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ebd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d126      	bne.n	800ec28 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fe fd02 	bl	800d5e8 <move_window>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebee:	3a01      	subs	r2, #1
 800ebf0:	60da      	str	r2, [r3, #12]
 800ebf2:	e019      	b.n	800ec28 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ebf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d115      	bne.n	800ec28 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ebfc:	7fbb      	ldrb	r3, [r7, #30]
 800ebfe:	f003 0310 	and.w	r3, r3, #16
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d003      	beq.n	800ec0e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ec06:	2304      	movs	r3, #4
 800ec08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ec0c:	e00c      	b.n	800ec28 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec0e:	79fb      	ldrb	r3, [r7, #7]
 800ec10:	f003 0302 	and.w	r3, r3, #2
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d007      	beq.n	800ec28 <f_open+0x1d4>
 800ec18:	7fbb      	ldrb	r3, [r7, #30]
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d002      	beq.n	800ec28 <f_open+0x1d4>
						res = FR_DENIED;
 800ec22:	2307      	movs	r3, #7
 800ec24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d128      	bne.n	800ec82 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	f003 0308 	and.w	r3, r3, #8
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d003      	beq.n	800ec42 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ec3a:	79fb      	ldrb	r3, [r7, #7]
 800ec3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ec4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec50:	79fb      	ldrb	r3, [r7, #7]
 800ec52:	f023 0301 	bic.w	r3, r3, #1
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	bf14      	ite	ne
 800ec5a:	2301      	movne	r3, #1
 800ec5c:	2300      	moveq	r3, #0
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	461a      	mov	r2, r3
 800ec62:	f107 0318 	add.w	r3, r7, #24
 800ec66:	4611      	mov	r1, r2
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7fe fb8b 	bl	800d384 <inc_lock>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d102      	bne.n	800ec82 <f_open+0x22e>
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ec82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f040 8095 	bne.w	800edb6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec90:	4611      	mov	r1, r2
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7ff f9af 	bl	800dff6 <ld_clust>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ec9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca0:	331c      	adds	r3, #28
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe fa08 	bl	800d0b8 <ld_dword>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ecb4:	697a      	ldr	r2, [r7, #20]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	88da      	ldrh	r2, [r3, #6]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	79fa      	ldrb	r2, [r7, #7]
 800ecc6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2200      	movs	r2, #0
 800eccc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3330      	adds	r3, #48	; 0x30
 800ecde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ece2:	2100      	movs	r1, #0
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe fa72 	bl	800d1ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ecea:	79fb      	ldrb	r3, [r7, #7]
 800ecec:	f003 0320 	and.w	r3, r3, #32
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d060      	beq.n	800edb6 <f_open+0x362>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d05c      	beq.n	800edb6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	68da      	ldr	r2, [r3, #12]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	895b      	ldrh	r3, [r3, #10]
 800ed08:	025b      	lsls	r3, r3, #9
 800ed0a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed18:	e016      	b.n	800ed48 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fe fd1d 	bl	800d75e <get_fat>
 800ed24:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ed26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d802      	bhi.n	800ed32 <f_open+0x2de>
 800ed2c:	2302      	movs	r3, #2
 800ed2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed38:	d102      	bne.n	800ed40 <f_open+0x2ec>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d103      	bne.n	800ed58 <f_open+0x304>
 800ed50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d8e0      	bhi.n	800ed1a <f_open+0x2c6>
				}
				fp->clust = clst;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ed5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d127      	bne.n	800edb6 <f_open+0x362>
 800ed66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d022      	beq.n	800edb6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fe fcd3 	bl	800d720 <clust2sect>
 800ed7a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ed7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d103      	bne.n	800ed8a <f_open+0x336>
						res = FR_INT_ERR;
 800ed82:	2302      	movs	r3, #2
 800ed84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ed88:	e015      	b.n	800edb6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ed8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed8c:	0a5a      	lsrs	r2, r3, #9
 800ed8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed90:	441a      	add	r2, r3
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	7858      	ldrb	r0, [r3, #1]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6a1a      	ldr	r2, [r3, #32]
 800eda4:	2301      	movs	r3, #1
 800eda6:	f7fe f911 	bl	800cfcc <disk_read>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <f_open+0x362>
 800edb0:	2301      	movs	r3, #1
 800edb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800edb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d002      	beq.n	800edc4 <f_open+0x370>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800edc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3768      	adds	r7, #104	; 0x68
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b08e      	sub	sp, #56	; 0x38
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2200      	movs	r2, #0
 800ede6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f107 0214 	add.w	r2, r7, #20
 800edee:	4611      	mov	r1, r2
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff fdb3 	bl	800e95c <validate>
 800edf6:	4603      	mov	r3, r0
 800edf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800edfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d107      	bne.n	800ee14 <f_read+0x44>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	7d5b      	ldrb	r3, [r3, #21]
 800ee08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <f_read+0x4a>
 800ee14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee18:	e115      	b.n	800f046 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	7d1b      	ldrb	r3, [r3, #20]
 800ee1e:	f003 0301 	and.w	r3, r3, #1
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d101      	bne.n	800ee2a <f_read+0x5a>
 800ee26:	2307      	movs	r3, #7
 800ee28:	e10d      	b.n	800f046 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	68da      	ldr	r2, [r3, #12]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	699b      	ldr	r3, [r3, #24]
 800ee32:	1ad3      	subs	r3, r2, r3
 800ee34:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	6a3b      	ldr	r3, [r7, #32]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	f240 80fe 	bls.w	800f03c <f_read+0x26c>
 800ee40:	6a3b      	ldr	r3, [r7, #32]
 800ee42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ee44:	e0fa      	b.n	800f03c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f040 80c6 	bne.w	800efe0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	0a5b      	lsrs	r3, r3, #9
 800ee5a:	697a      	ldr	r2, [r7, #20]
 800ee5c:	8952      	ldrh	r2, [r2, #10]
 800ee5e:	3a01      	subs	r2, #1
 800ee60:	4013      	ands	r3, r2
 800ee62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d12f      	bne.n	800eeca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d103      	bne.n	800ee7a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	633b      	str	r3, [r7, #48]	; 0x30
 800ee78:	e013      	b.n	800eea2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d007      	beq.n	800ee92 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	699b      	ldr	r3, [r3, #24]
 800ee86:	4619      	mov	r1, r3
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f7fe fef9 	bl	800dc80 <clmt_clust>
 800ee8e:	6338      	str	r0, [r7, #48]	; 0x30
 800ee90:	e007      	b.n	800eea2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	69db      	ldr	r3, [r3, #28]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4610      	mov	r0, r2
 800ee9c:	f7fe fc5f 	bl	800d75e <get_fat>
 800eea0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d804      	bhi.n	800eeb2 <f_read+0xe2>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	755a      	strb	r2, [r3, #21]
 800eeae:	2302      	movs	r3, #2
 800eeb0:	e0c9      	b.n	800f046 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeb8:	d104      	bne.n	800eec4 <f_read+0xf4>
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2201      	movs	r2, #1
 800eebe:	755a      	strb	r2, [r3, #21]
 800eec0:	2301      	movs	r3, #1
 800eec2:	e0c0      	b.n	800f046 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eec8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f7fe fc24 	bl	800d720 <clust2sect>
 800eed8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d104      	bne.n	800eeea <f_read+0x11a>
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2202      	movs	r2, #2
 800eee4:	755a      	strb	r2, [r3, #21]
 800eee6:	2302      	movs	r3, #2
 800eee8:	e0ad      	b.n	800f046 <f_read+0x276>
			sect += csect;
 800eeea:	69ba      	ldr	r2, [r7, #24]
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	4413      	add	r3, r2
 800eef0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	0a5b      	lsrs	r3, r3, #9
 800eef6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d039      	beq.n	800ef72 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eefe:	69fa      	ldr	r2, [r7, #28]
 800ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef02:	4413      	add	r3, r2
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	8952      	ldrh	r2, [r2, #10]
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d905      	bls.n	800ef18 <f_read+0x148>
					cc = fs->csize - csect;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	895b      	ldrh	r3, [r3, #10]
 800ef10:	461a      	mov	r2, r3
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	7858      	ldrb	r0, [r3, #1]
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	69ba      	ldr	r2, [r7, #24]
 800ef20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef22:	f7fe f853 	bl	800cfcc <disk_read>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d004      	beq.n	800ef36 <f_read+0x166>
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	755a      	strb	r2, [r3, #21]
 800ef32:	2301      	movs	r3, #1
 800ef34:	e087      	b.n	800f046 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	7d1b      	ldrb	r3, [r3, #20]
 800ef3a:	b25b      	sxtb	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	da14      	bge.n	800ef6a <f_read+0x19a>
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6a1a      	ldr	r2, [r3, #32]
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	1ad3      	subs	r3, r2, r3
 800ef48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d90d      	bls.n	800ef6a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6a1a      	ldr	r2, [r3, #32]
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	025b      	lsls	r3, r3, #9
 800ef58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef5a:	18d0      	adds	r0, r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	3330      	adds	r3, #48	; 0x30
 800ef60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef64:	4619      	mov	r1, r3
 800ef66:	f7fe f911 	bl	800d18c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ef6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6c:	025b      	lsls	r3, r3, #9
 800ef6e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ef70:	e050      	b.n	800f014 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6a1b      	ldr	r3, [r3, #32]
 800ef76:	69ba      	ldr	r2, [r7, #24]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d02e      	beq.n	800efda <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	b25b      	sxtb	r3, r3
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	da18      	bge.n	800efb8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	7858      	ldrb	r0, [r3, #1]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6a1a      	ldr	r2, [r3, #32]
 800ef94:	2301      	movs	r3, #1
 800ef96:	f7fe f839 	bl	800d00c <disk_write>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d004      	beq.n	800efaa <f_read+0x1da>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2201      	movs	r2, #1
 800efa4:	755a      	strb	r2, [r3, #21]
 800efa6:	2301      	movs	r3, #1
 800efa8:	e04d      	b.n	800f046 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	7d1b      	ldrb	r3, [r3, #20]
 800efae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	7858      	ldrb	r0, [r3, #1]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efc2:	2301      	movs	r3, #1
 800efc4:	69ba      	ldr	r2, [r7, #24]
 800efc6:	f7fe f801 	bl	800cfcc <disk_read>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d004      	beq.n	800efda <f_read+0x20a>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2201      	movs	r2, #1
 800efd4:	755a      	strb	r2, [r3, #21]
 800efd6:	2301      	movs	r3, #1
 800efd8:	e035      	b.n	800f046 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	69ba      	ldr	r2, [r7, #24]
 800efde:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	699b      	ldr	r3, [r3, #24]
 800efe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efe8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800efec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800efee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d901      	bls.n	800effa <f_read+0x22a>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	699b      	ldr	r3, [r3, #24]
 800f004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f008:	4413      	add	r3, r2
 800f00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00c:	4619      	mov	r1, r3
 800f00e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f010:	f7fe f8bc 	bl	800d18c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	4413      	add	r3, r2
 800f01a:	627b      	str	r3, [r7, #36]	; 0x24
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	699a      	ldr	r2, [r3, #24]
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	441a      	add	r2, r3
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	619a      	str	r2, [r3, #24]
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	441a      	add	r2, r3
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f47f af01 	bne.w	800ee46 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f044:	2300      	movs	r3, #0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3738      	adds	r7, #56	; 0x38
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f04e:	b580      	push	{r7, lr}
 800f050:	b08c      	sub	sp, #48	; 0x30
 800f052:	af00      	add	r7, sp, #0
 800f054:	60f8      	str	r0, [r7, #12]
 800f056:	60b9      	str	r1, [r7, #8]
 800f058:	607a      	str	r2, [r7, #4]
 800f05a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	2200      	movs	r2, #0
 800f064:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f107 0210 	add.w	r2, r7, #16
 800f06c:	4611      	mov	r1, r2
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff fc74 	bl	800e95c <validate>
 800f074:	4603      	mov	r3, r0
 800f076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f07a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d107      	bne.n	800f092 <f_write+0x44>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	7d5b      	ldrb	r3, [r3, #21]
 800f086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f08a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d002      	beq.n	800f098 <f_write+0x4a>
 800f092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f096:	e14b      	b.n	800f330 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	7d1b      	ldrb	r3, [r3, #20]
 800f09c:	f003 0302 	and.w	r3, r3, #2
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d101      	bne.n	800f0a8 <f_write+0x5a>
 800f0a4:	2307      	movs	r3, #7
 800f0a6:	e143      	b.n	800f330 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	699a      	ldr	r2, [r3, #24]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	441a      	add	r2, r3
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	f080 812d 	bcs.w	800f314 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	43db      	mvns	r3, r3
 800f0c0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f0c2:	e127      	b.n	800f314 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	699b      	ldr	r3, [r3, #24]
 800f0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f040 80e3 	bne.w	800f298 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	699b      	ldr	r3, [r3, #24]
 800f0d6:	0a5b      	lsrs	r3, r3, #9
 800f0d8:	693a      	ldr	r2, [r7, #16]
 800f0da:	8952      	ldrh	r2, [r2, #10]
 800f0dc:	3a01      	subs	r2, #1
 800f0de:	4013      	ands	r3, r2
 800f0e0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d143      	bne.n	800f170 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	699b      	ldr	r3, [r3, #24]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10c      	bne.n	800f10a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d11a      	bne.n	800f132 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2100      	movs	r1, #0
 800f100:	4618      	mov	r0, r3
 800f102:	f7fe fd25 	bl	800db50 <create_chain>
 800f106:	62b8      	str	r0, [r7, #40]	; 0x28
 800f108:	e013      	b.n	800f132 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d007      	beq.n	800f122 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	699b      	ldr	r3, [r3, #24]
 800f116:	4619      	mov	r1, r3
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f7fe fdb1 	bl	800dc80 <clmt_clust>
 800f11e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f120:	e007      	b.n	800f132 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	69db      	ldr	r3, [r3, #28]
 800f128:	4619      	mov	r1, r3
 800f12a:	4610      	mov	r0, r2
 800f12c:	f7fe fd10 	bl	800db50 <create_chain>
 800f130:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	2b00      	cmp	r3, #0
 800f136:	f000 80f2 	beq.w	800f31e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d104      	bne.n	800f14a <f_write+0xfc>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2202      	movs	r2, #2
 800f144:	755a      	strb	r2, [r3, #21]
 800f146:	2302      	movs	r3, #2
 800f148:	e0f2      	b.n	800f330 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f150:	d104      	bne.n	800f15c <f_write+0x10e>
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2201      	movs	r2, #1
 800f156:	755a      	strb	r2, [r3, #21]
 800f158:	2301      	movs	r3, #1
 800f15a:	e0e9      	b.n	800f330 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f160:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	689b      	ldr	r3, [r3, #8]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d102      	bne.n	800f170 <f_write+0x122>
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f16e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	7d1b      	ldrb	r3, [r3, #20]
 800f174:	b25b      	sxtb	r3, r3
 800f176:	2b00      	cmp	r3, #0
 800f178:	da18      	bge.n	800f1ac <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	7858      	ldrb	r0, [r3, #1]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6a1a      	ldr	r2, [r3, #32]
 800f188:	2301      	movs	r3, #1
 800f18a:	f7fd ff3f 	bl	800d00c <disk_write>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	d004      	beq.n	800f19e <f_write+0x150>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2201      	movs	r2, #1
 800f198:	755a      	strb	r2, [r3, #21]
 800f19a:	2301      	movs	r3, #1
 800f19c:	e0c8      	b.n	800f330 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	7d1b      	ldrb	r3, [r3, #20]
 800f1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	69db      	ldr	r3, [r3, #28]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	f7fe fab3 	bl	800d720 <clust2sect>
 800f1ba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d104      	bne.n	800f1cc <f_write+0x17e>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2202      	movs	r2, #2
 800f1c6:	755a      	strb	r2, [r3, #21]
 800f1c8:	2302      	movs	r3, #2
 800f1ca:	e0b1      	b.n	800f330 <f_write+0x2e2>
			sect += csect;
 800f1cc:	697a      	ldr	r2, [r7, #20]
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	0a5b      	lsrs	r3, r3, #9
 800f1d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f1da:	6a3b      	ldr	r3, [r7, #32]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d03c      	beq.n	800f25a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f1e0:	69ba      	ldr	r2, [r7, #24]
 800f1e2:	6a3b      	ldr	r3, [r7, #32]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	693a      	ldr	r2, [r7, #16]
 800f1e8:	8952      	ldrh	r2, [r2, #10]
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d905      	bls.n	800f1fa <f_write+0x1ac>
					cc = fs->csize - csect;
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	895b      	ldrh	r3, [r3, #10]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	1ad3      	subs	r3, r2, r3
 800f1f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	7858      	ldrb	r0, [r3, #1]
 800f1fe:	6a3b      	ldr	r3, [r7, #32]
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	69f9      	ldr	r1, [r7, #28]
 800f204:	f7fd ff02 	bl	800d00c <disk_write>
 800f208:	4603      	mov	r3, r0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d004      	beq.n	800f218 <f_write+0x1ca>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2201      	movs	r2, #1
 800f212:	755a      	strb	r2, [r3, #21]
 800f214:	2301      	movs	r3, #1
 800f216:	e08b      	b.n	800f330 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6a1a      	ldr	r2, [r3, #32]
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	6a3a      	ldr	r2, [r7, #32]
 800f222:	429a      	cmp	r2, r3
 800f224:	d915      	bls.n	800f252 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6a1a      	ldr	r2, [r3, #32]
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	1ad3      	subs	r3, r2, r3
 800f234:	025b      	lsls	r3, r3, #9
 800f236:	69fa      	ldr	r2, [r7, #28]
 800f238:	4413      	add	r3, r2
 800f23a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f23e:	4619      	mov	r1, r3
 800f240:	f7fd ffa4 	bl	800d18c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	7d1b      	ldrb	r3, [r3, #20]
 800f248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f24c:	b2da      	uxtb	r2, r3
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	025b      	lsls	r3, r3, #9
 800f256:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f258:	e03f      	b.n	800f2da <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	429a      	cmp	r2, r3
 800f262:	d016      	beq.n	800f292 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	699a      	ldr	r2, [r3, #24]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d210      	bcs.n	800f292 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	7858      	ldrb	r0, [r3, #1]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f27a:	2301      	movs	r3, #1
 800f27c:	697a      	ldr	r2, [r7, #20]
 800f27e:	f7fd fea5 	bl	800cfcc <disk_read>
 800f282:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f284:	2b00      	cmp	r3, #0
 800f286:	d004      	beq.n	800f292 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2201      	movs	r2, #1
 800f28c:	755a      	strb	r2, [r3, #21]
 800f28e:	2301      	movs	r3, #1
 800f290:	e04e      	b.n	800f330 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	697a      	ldr	r2, [r7, #20]
 800f296:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f2a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d901      	bls.n	800f2b2 <f_write+0x264>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	699b      	ldr	r3, [r3, #24]
 800f2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2c0:	4413      	add	r3, r2
 800f2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2c4:	69f9      	ldr	r1, [r7, #28]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fd ff60 	bl	800d18c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	7d1b      	ldrb	r3, [r3, #20]
 800f2d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2d4:	b2da      	uxtb	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f2da:	69fa      	ldr	r2, [r7, #28]
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	4413      	add	r3, r2
 800f2e0:	61fb      	str	r3, [r7, #28]
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	699a      	ldr	r2, [r3, #24]
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	441a      	add	r2, r3
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	619a      	str	r2, [r3, #24]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	68da      	ldr	r2, [r3, #12]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	699b      	ldr	r3, [r3, #24]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	bf38      	it	cc
 800f2fa:	461a      	movcc	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	60da      	str	r2, [r3, #12]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	441a      	add	r2, r3
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	601a      	str	r2, [r3, #0]
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	1ad3      	subs	r3, r2, r3
 800f312:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	f47f aed4 	bne.w	800f0c4 <f_write+0x76>
 800f31c:	e000      	b.n	800f320 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f31e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	7d1b      	ldrb	r3, [r3, #20]
 800f324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f328:	b2da      	uxtb	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3730      	adds	r7, #48	; 0x30
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f107 0208 	add.w	r2, r7, #8
 800f346:	4611      	mov	r1, r2
 800f348:	4618      	mov	r0, r3
 800f34a:	f7ff fb07 	bl	800e95c <validate>
 800f34e:	4603      	mov	r3, r0
 800f350:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f352:	7dfb      	ldrb	r3, [r7, #23]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d168      	bne.n	800f42a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	7d1b      	ldrb	r3, [r3, #20]
 800f35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f360:	2b00      	cmp	r3, #0
 800f362:	d062      	beq.n	800f42a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	7d1b      	ldrb	r3, [r3, #20]
 800f368:	b25b      	sxtb	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	da15      	bge.n	800f39a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	7858      	ldrb	r0, [r3, #1]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a1a      	ldr	r2, [r3, #32]
 800f37c:	2301      	movs	r3, #1
 800f37e:	f7fd fe45 	bl	800d00c <disk_write>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d001      	beq.n	800f38c <f_sync+0x54>
 800f388:	2301      	movs	r3, #1
 800f38a:	e04f      	b.n	800f42c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	7d1b      	ldrb	r3, [r3, #20]
 800f390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f394:	b2da      	uxtb	r2, r3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f39a:	f7fb ff89 	bl	800b2b0 <get_fattime>
 800f39e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	4610      	mov	r0, r2
 800f3aa:	f7fe f91d 	bl	800d5e8 <move_window>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f3b2:	7dfb      	ldrb	r3, [r7, #23]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d138      	bne.n	800f42a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	330b      	adds	r3, #11
 800f3c2:	781a      	ldrb	r2, [r3, #0]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	330b      	adds	r3, #11
 800f3c8:	f042 0220 	orr.w	r2, r2, #32
 800f3cc:	b2d2      	uxtb	r2, r2
 800f3ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6818      	ldr	r0, [r3, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	68f9      	ldr	r1, [r7, #12]
 800f3dc:	f7fe fe2a 	bl	800e034 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f103 021c 	add.w	r2, r3, #28
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	f7fd fea1 	bl	800d134 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	3316      	adds	r3, #22
 800f3f6:	6939      	ldr	r1, [r7, #16]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fd fe9b 	bl	800d134 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	3312      	adds	r3, #18
 800f402:	2100      	movs	r1, #0
 800f404:	4618      	mov	r0, r3
 800f406:	f7fd fe7a 	bl	800d0fe <st_word>
					fs->wflag = 1;
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2201      	movs	r2, #1
 800f40e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	4618      	mov	r0, r3
 800f414:	f7fe f916 	bl	800d644 <sync_fs>
 800f418:	4603      	mov	r3, r0
 800f41a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	7d1b      	ldrb	r3, [r3, #20]
 800f420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f424:	b2da      	uxtb	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3718      	adds	r7, #24
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7ff ff7b 	bl	800f338 <f_sync>
 800f442:	4603      	mov	r3, r0
 800f444:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d118      	bne.n	800f47e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f107 0208 	add.w	r2, r7, #8
 800f452:	4611      	mov	r1, r2
 800f454:	4618      	mov	r0, r3
 800f456:	f7ff fa81 	bl	800e95c <validate>
 800f45a:	4603      	mov	r3, r0
 800f45c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10c      	bne.n	800f47e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fe f819 	bl	800d4a0 <dec_lock>
 800f46e:	4603      	mov	r3, r0
 800f470:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d102      	bne.n	800f47e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f480:	4618      	mov	r0, r3
 800f482:	3710      	adds	r7, #16
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f488:	b590      	push	{r4, r7, lr}
 800f48a:	b09d      	sub	sp, #116	; 0x74
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	607a      	str	r2, [r7, #4]
 800f492:	603b      	str	r3, [r7, #0]
 800f494:	460b      	mov	r3, r1
 800f496:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f498:	2301      	movs	r3, #1
 800f49a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f49c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4a0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f4a2:	f107 030c 	add.w	r3, r7, #12
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe ff71 	bl	800e38e <get_ldnumber>
 800f4ac:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	da02      	bge.n	800f4ba <f_mkfs+0x32>
 800f4b4:	230b      	movs	r3, #11
 800f4b6:	f000 bc0d 	b.w	800fcd4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f4ba:	4a94      	ldr	r2, [pc, #592]	; (800f70c <f_mkfs+0x284>)
 800f4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d005      	beq.n	800f4d2 <f_mkfs+0x4a>
 800f4c6:	4a91      	ldr	r2, [pc, #580]	; (800f70c <f_mkfs+0x284>)
 800f4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f4d8:	2300      	movs	r3, #0
 800f4da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f4de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fd fd4c 	bl	800cf80 <disk_initialize>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f4ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f4f2:	f003 0301 	and.w	r3, r3, #1
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <f_mkfs+0x76>
 800f4fa:	2303      	movs	r3, #3
 800f4fc:	e3ea      	b.n	800fcd4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f4fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f502:	f003 0304 	and.w	r3, r3, #4
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <f_mkfs+0x86>
 800f50a:	230a      	movs	r3, #10
 800f50c:	e3e2      	b.n	800fcd4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f50e:	f107 0214 	add.w	r2, r7, #20
 800f512:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f516:	2103      	movs	r1, #3
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fd fd97 	bl	800d04c <disk_ioctl>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10c      	bne.n	800f53e <f_mkfs+0xb6>
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d009      	beq.n	800f53e <f_mkfs+0xb6>
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f530:	d805      	bhi.n	800f53e <f_mkfs+0xb6>
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	1e5a      	subs	r2, r3, #1
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	4013      	ands	r3, r2
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <f_mkfs+0xba>
 800f53e:	2301      	movs	r3, #1
 800f540:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f542:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f546:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d003      	beq.n	800f556 <f_mkfs+0xce>
 800f54e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	429a      	cmp	r2, r3
 800f554:	d309      	bcc.n	800f56a <f_mkfs+0xe2>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f55c:	d805      	bhi.n	800f56a <f_mkfs+0xe2>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	1e5a      	subs	r2, r3, #1
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4013      	ands	r3, r2
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <f_mkfs+0xe6>
 800f56a:	2313      	movs	r3, #19
 800f56c:	e3b2      	b.n	800fcd4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f56e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	fbb2 f3f3 	udiv	r3, r2, r3
 800f576:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f57c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f57e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f582:	fbb2 f3f3 	udiv	r3, r2, r3
 800f586:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f588:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58c:	fb02 f303 	mul.w	r3, r2, r3
 800f590:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f594:	2b00      	cmp	r3, #0
 800f596:	d101      	bne.n	800f59c <f_mkfs+0x114>
 800f598:	230e      	movs	r3, #14
 800f59a:	e39b      	b.n	800fcd4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f59c:	f107 0210 	add.w	r2, r7, #16
 800f5a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f5a4:	2101      	movs	r1, #1
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fd fd50 	bl	800d04c <disk_ioctl>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d001      	beq.n	800f5b6 <f_mkfs+0x12e>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e38e      	b.n	800fcd4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f5b6:	7afb      	ldrb	r3, [r7, #11]
 800f5b8:	f003 0308 	and.w	r3, r3, #8
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <f_mkfs+0x13c>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	e000      	b.n	800f5c6 <f_mkfs+0x13e>
 800f5c4:	233f      	movs	r3, #63	; 0x3f
 800f5c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d901      	bls.n	800f5d4 <f_mkfs+0x14c>
 800f5d0:	230e      	movs	r3, #14
 800f5d2:	e37f      	b.n	800fcd4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f5d4:	693a      	ldr	r2, [r7, #16]
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	2b7f      	cmp	r3, #127	; 0x7f
 800f5e0:	d801      	bhi.n	800f5e6 <f_mkfs+0x15e>
 800f5e2:	230e      	movs	r3, #14
 800f5e4:	e376      	b.n	800fcd4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2b80      	cmp	r3, #128	; 0x80
 800f5ea:	d901      	bls.n	800f5f0 <f_mkfs+0x168>
 800f5ec:	2313      	movs	r3, #19
 800f5ee:	e371      	b.n	800fcd4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f5f0:	7afb      	ldrb	r3, [r7, #11]
 800f5f2:	f003 0302 	and.w	r3, r3, #2
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00d      	beq.n	800f616 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f5fa:	7afb      	ldrb	r3, [r7, #11]
 800f5fc:	f003 0307 	and.w	r3, r3, #7
 800f600:	2b02      	cmp	r3, #2
 800f602:	d004      	beq.n	800f60e <f_mkfs+0x186>
 800f604:	7afb      	ldrb	r3, [r7, #11]
 800f606:	f003 0301 	and.w	r3, r3, #1
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d103      	bne.n	800f616 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f60e:	2303      	movs	r3, #3
 800f610:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f614:	e009      	b.n	800f62a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f616:	7afb      	ldrb	r3, [r7, #11]
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <f_mkfs+0x19c>
 800f620:	2313      	movs	r3, #19
 800f622:	e357      	b.n	800fcd4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f624:	2302      	movs	r3, #2
 800f626:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f62e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f632:	2b03      	cmp	r3, #3
 800f634:	d13c      	bne.n	800f6b0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d11b      	bne.n	800f674 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	0c5b      	lsrs	r3, r3, #17
 800f640:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f642:	2300      	movs	r3, #0
 800f644:	64bb      	str	r3, [r7, #72]	; 0x48
 800f646:	2301      	movs	r3, #1
 800f648:	653b      	str	r3, [r7, #80]	; 0x50
 800f64a:	e005      	b.n	800f658 <f_mkfs+0x1d0>
 800f64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f64e:	3301      	adds	r3, #1
 800f650:	64bb      	str	r3, [r7, #72]	; 0x48
 800f652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f654:	005b      	lsls	r3, r3, #1
 800f656:	653b      	str	r3, [r7, #80]	; 0x50
 800f658:	4a2d      	ldr	r2, [pc, #180]	; (800f710 <f_mkfs+0x288>)
 800f65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f65c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d007      	beq.n	800f674 <f_mkfs+0x1ec>
 800f664:	4a2a      	ldr	r2, [pc, #168]	; (800f710 <f_mkfs+0x288>)
 800f666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f66c:	461a      	mov	r2, r3
 800f66e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f670:	4293      	cmp	r3, r2
 800f672:	d2eb      	bcs.n	800f64c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f674:	693a      	ldr	r2, [r7, #16]
 800f676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f678:	fbb2 f3f3 	udiv	r3, r2, r3
 800f67c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f67e:	6a3b      	ldr	r3, [r7, #32]
 800f680:	3302      	adds	r3, #2
 800f682:	009a      	lsls	r2, r3, #2
 800f684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f686:	4413      	add	r3, r2
 800f688:	1e5a      	subs	r2, r3, #1
 800f68a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f690:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f692:	2320      	movs	r3, #32
 800f694:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f696:	2300      	movs	r3, #0
 800f698:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f69a:	6a3b      	ldr	r3, [r7, #32]
 800f69c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d903      	bls.n	800f6ac <f_mkfs+0x224>
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	4a1b      	ldr	r2, [pc, #108]	; (800f714 <f_mkfs+0x28c>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d952      	bls.n	800f752 <f_mkfs+0x2ca>
 800f6ac:	230e      	movs	r3, #14
 800f6ae:	e311      	b.n	800fcd4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d11b      	bne.n	800f6ee <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	0b1b      	lsrs	r3, r3, #12
 800f6ba:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f6bc:	2300      	movs	r3, #0
 800f6be:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	653b      	str	r3, [r7, #80]	; 0x50
 800f6c4:	e005      	b.n	800f6d2 <f_mkfs+0x24a>
 800f6c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ce:	005b      	lsls	r3, r3, #1
 800f6d0:	653b      	str	r3, [r7, #80]	; 0x50
 800f6d2:	4a11      	ldr	r2, [pc, #68]	; (800f718 <f_mkfs+0x290>)
 800f6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d007      	beq.n	800f6ee <f_mkfs+0x266>
 800f6de:	4a0e      	ldr	r2, [pc, #56]	; (800f718 <f_mkfs+0x290>)
 800f6e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d2eb      	bcs.n	800f6c6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6f6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f6f8:	6a3b      	ldr	r3, [r7, #32]
 800f6fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d90c      	bls.n	800f71c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f702:	6a3b      	ldr	r3, [r7, #32]
 800f704:	3302      	adds	r3, #2
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f70a:	e012      	b.n	800f732 <f_mkfs+0x2aa>
 800f70c:	20000978 	.word	0x20000978
 800f710:	08011c2c 	.word	0x08011c2c
 800f714:	0ffffff5 	.word	0x0ffffff5
 800f718:	08011c3c 	.word	0x08011c3c
				} else {
					fmt = FS_FAT12;
 800f71c:	2301      	movs	r3, #1
 800f71e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f722:	6a3a      	ldr	r2, [r7, #32]
 800f724:	4613      	mov	r3, r2
 800f726:	005b      	lsls	r3, r3, #1
 800f728:	4413      	add	r3, r2
 800f72a:	3301      	adds	r3, #1
 800f72c:	085b      	lsrs	r3, r3, #1
 800f72e:	3303      	adds	r3, #3
 800f730:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f732:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f736:	4413      	add	r3, r2
 800f738:	1e5a      	subs	r2, r3, #1
 800f73a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f740:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f742:	2301      	movs	r3, #1
 800f744:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f748:	015a      	lsls	r2, r3, #5
 800f74a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f74c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f750:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f756:	4413      	add	r3, r2
 800f758:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f75a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f75c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f75e:	fb03 f202 	mul.w	r2, r3, r2
 800f762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f764:	4413      	add	r3, r2
 800f766:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f768:	4413      	add	r3, r2
 800f76a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f76c:	697a      	ldr	r2, [r7, #20]
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	4413      	add	r3, r2
 800f772:	1e5a      	subs	r2, r3, #1
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	425b      	negs	r3, r3
 800f778:	401a      	ands	r2, r3
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f780:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f784:	2b03      	cmp	r3, #3
 800f786:	d108      	bne.n	800f79a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f78a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f78c:	4413      	add	r3, r2
 800f78e:	657b      	str	r3, [r7, #84]	; 0x54
 800f790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f794:	4413      	add	r3, r2
 800f796:	65bb      	str	r3, [r7, #88]	; 0x58
 800f798:	e006      	b.n	800f7a8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f79a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f79c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7a4:	4413      	add	r3, r2
 800f7a6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f7a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7aa:	011a      	lsls	r2, r3, #4
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	441a      	add	r2, r3
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b2:	1ad2      	subs	r2, r2, r3
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d901      	bls.n	800f7be <f_mkfs+0x336>
 800f7ba:	230e      	movs	r3, #14
 800f7bc:	e28a      	b.n	800fcd4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f7be:	693a      	ldr	r2, [r7, #16]
 800f7c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7c2:	1ad2      	subs	r2, r2, r3
 800f7c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7c8:	fb01 f303 	mul.w	r3, r1, r3
 800f7cc:	1ad2      	subs	r2, r2, r3
 800f7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7d0:	1ad2      	subs	r2, r2, r3
 800f7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7d8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f7da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7de:	2b03      	cmp	r3, #3
 800f7e0:	d10f      	bne.n	800f802 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f7e2:	6a3b      	ldr	r3, [r7, #32]
 800f7e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d80a      	bhi.n	800f802 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d105      	bne.n	800f7fe <f_mkfs+0x376>
 800f7f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f4:	085b      	lsrs	r3, r3, #1
 800f7f6:	607b      	str	r3, [r7, #4]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d144      	bne.n	800f888 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f7fe:	230e      	movs	r3, #14
 800f800:	e268      	b.n	800fcd4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f802:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f806:	2b02      	cmp	r3, #2
 800f808:	d133      	bne.n	800f872 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f810:	4293      	cmp	r3, r2
 800f812:	d91e      	bls.n	800f852 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d107      	bne.n	800f82a <f_mkfs+0x3a2>
 800f81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f81c:	005b      	lsls	r3, r3, #1
 800f81e:	2b40      	cmp	r3, #64	; 0x40
 800f820:	d803      	bhi.n	800f82a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f824:	005b      	lsls	r3, r3, #1
 800f826:	607b      	str	r3, [r7, #4]
 800f828:	e033      	b.n	800f892 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f82a:	7afb      	ldrb	r3, [r7, #11]
 800f82c:	f003 0302 	and.w	r3, r3, #2
 800f830:	2b00      	cmp	r3, #0
 800f832:	d003      	beq.n	800f83c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f834:	2303      	movs	r3, #3
 800f836:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f83a:	e02a      	b.n	800f892 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d105      	bne.n	800f84e <f_mkfs+0x3c6>
 800f842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f844:	005b      	lsls	r3, r3, #1
 800f846:	607b      	str	r3, [r7, #4]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2b80      	cmp	r3, #128	; 0x80
 800f84c:	d91e      	bls.n	800f88c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f84e:	230e      	movs	r3, #14
 800f850:	e240      	b.n	800fcd4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f852:	6a3b      	ldr	r3, [r7, #32]
 800f854:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f858:	4293      	cmp	r3, r2
 800f85a:	d80a      	bhi.n	800f872 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d105      	bne.n	800f86e <f_mkfs+0x3e6>
 800f862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	607b      	str	r3, [r7, #4]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b80      	cmp	r3, #128	; 0x80
 800f86c:	d910      	bls.n	800f890 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f86e:	230e      	movs	r3, #14
 800f870:	e230      	b.n	800fcd4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f872:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f876:	2b01      	cmp	r3, #1
 800f878:	d10c      	bne.n	800f894 <f_mkfs+0x40c>
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f880:	4293      	cmp	r3, r2
 800f882:	d907      	bls.n	800f894 <f_mkfs+0x40c>
 800f884:	230e      	movs	r3, #14
 800f886:	e225      	b.n	800fcd4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f888:	bf00      	nop
 800f88a:	e6ce      	b.n	800f62a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f88c:	bf00      	nop
 800f88e:	e6cc      	b.n	800f62a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f890:	bf00      	nop
			pau = au;
 800f892:	e6ca      	b.n	800f62a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f894:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f898:	461a      	mov	r2, r3
 800f89a:	2100      	movs	r1, #0
 800f89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f89e:	f7fd fc96 	bl	800d1ce <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f8a2:	220b      	movs	r2, #11
 800f8a4:	49b2      	ldr	r1, [pc, #712]	; (800fb70 <f_mkfs+0x6e8>)
 800f8a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8a8:	f7fd fc70 	bl	800d18c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ae:	330b      	adds	r3, #11
 800f8b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f8b2:	4611      	mov	r1, r2
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fd fc22 	bl	800d0fe <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	330d      	adds	r3, #13
 800f8be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8c0:	b2d2      	uxtb	r2, r2
 800f8c2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	330e      	adds	r3, #14
 800f8c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8ca:	b292      	uxth	r2, r2
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fd fc15 	bl	800d0fe <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d6:	3310      	adds	r3, #16
 800f8d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8da:	b2d2      	uxtb	r2, r2
 800f8dc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	f103 0211 	add.w	r2, r3, #17
 800f8e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8e8:	2b03      	cmp	r3, #3
 800f8ea:	d002      	beq.n	800f8f2 <f_mkfs+0x46a>
 800f8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	e000      	b.n	800f8f4 <f_mkfs+0x46c>
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4610      	mov	r0, r2
 800f8f8:	f7fd fc01 	bl	800d0fe <st_word>
		if (sz_vol < 0x10000) {
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f902:	d208      	bcs.n	800f916 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f906:	3313      	adds	r3, #19
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	b292      	uxth	r2, r2
 800f90c:	4611      	mov	r1, r2
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fd fbf5 	bl	800d0fe <st_word>
 800f914:	e006      	b.n	800f924 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	3320      	adds	r3, #32
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	4611      	mov	r1, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fd fc08 	bl	800d134 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f926:	3315      	adds	r3, #21
 800f928:	22f8      	movs	r2, #248	; 0xf8
 800f92a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92e:	3318      	adds	r3, #24
 800f930:	213f      	movs	r1, #63	; 0x3f
 800f932:	4618      	mov	r0, r3
 800f934:	f7fd fbe3 	bl	800d0fe <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93a:	331a      	adds	r3, #26
 800f93c:	21ff      	movs	r1, #255	; 0xff
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fd fbdd 	bl	800d0fe <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	331c      	adds	r3, #28
 800f948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fd fbf2 	bl	800d134 <st_dword>
		if (fmt == FS_FAT32) {
 800f950:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f954:	2b03      	cmp	r3, #3
 800f956:	d131      	bne.n	800f9bc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f95e:	f7fb fca7 	bl	800b2b0 <get_fattime>
 800f962:	4603      	mov	r3, r0
 800f964:	4619      	mov	r1, r3
 800f966:	4620      	mov	r0, r4
 800f968:	f7fd fbe4 	bl	800d134 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	3324      	adds	r3, #36	; 0x24
 800f970:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f972:	4618      	mov	r0, r3
 800f974:	f7fd fbde 	bl	800d134 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97a:	332c      	adds	r3, #44	; 0x2c
 800f97c:	2102      	movs	r1, #2
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fd fbd8 	bl	800d134 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f986:	3330      	adds	r3, #48	; 0x30
 800f988:	2101      	movs	r1, #1
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fd fbb7 	bl	800d0fe <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	3332      	adds	r3, #50	; 0x32
 800f994:	2106      	movs	r1, #6
 800f996:	4618      	mov	r0, r3
 800f998:	f7fd fbb1 	bl	800d0fe <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99e:	3340      	adds	r3, #64	; 0x40
 800f9a0:	2280      	movs	r2, #128	; 0x80
 800f9a2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a6:	3342      	adds	r3, #66	; 0x42
 800f9a8:	2229      	movs	r2, #41	; 0x29
 800f9aa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ae:	3347      	adds	r3, #71	; 0x47
 800f9b0:	2213      	movs	r2, #19
 800f9b2:	4970      	ldr	r1, [pc, #448]	; (800fb74 <f_mkfs+0x6ec>)
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fd fbe9 	bl	800d18c <mem_cpy>
 800f9ba:	e020      	b.n	800f9fe <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9be:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f9c2:	f7fb fc75 	bl	800b2b0 <get_fattime>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f7fd fbb2 	bl	800d134 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d2:	3316      	adds	r3, #22
 800f9d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f9d6:	b292      	uxth	r2, r2
 800f9d8:	4611      	mov	r1, r2
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fd fb8f 	bl	800d0fe <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e2:	3324      	adds	r3, #36	; 0x24
 800f9e4:	2280      	movs	r2, #128	; 0x80
 800f9e6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ea:	3326      	adds	r3, #38	; 0x26
 800f9ec:	2229      	movs	r2, #41	; 0x29
 800f9ee:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f2:	332b      	adds	r3, #43	; 0x2b
 800f9f4:	2213      	movs	r2, #19
 800f9f6:	4960      	ldr	r1, [pc, #384]	; (800fb78 <f_mkfs+0x6f0>)
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fd fbc7 	bl	800d18c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa04:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fd fb78 	bl	800d0fe <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800fa0e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa12:	2301      	movs	r3, #1
 800fa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa18:	f7fd faf8 	bl	800d00c <disk_write>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <f_mkfs+0x59e>
 800fa22:	2301      	movs	r3, #1
 800fa24:	e156      	b.n	800fcd4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800fa26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d140      	bne.n	800fab0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	1d9a      	adds	r2, r3, #6
 800fa32:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa36:	2301      	movs	r3, #1
 800fa38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa3a:	f7fd fae7 	bl	800d00c <disk_write>
			mem_set(buf, 0, ss);
 800fa3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa40:	461a      	mov	r2, r3
 800fa42:	2100      	movs	r1, #0
 800fa44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa46:	f7fd fbc2 	bl	800d1ce <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800fa4a:	494c      	ldr	r1, [pc, #304]	; (800fb7c <f_mkfs+0x6f4>)
 800fa4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa4e:	f7fd fb71 	bl	800d134 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800fa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fa58:	4949      	ldr	r1, [pc, #292]	; (800fb80 <f_mkfs+0x6f8>)
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fd fb6a 	bl	800d134 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800fa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa62:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fa66:	6a3b      	ldr	r3, [r7, #32]
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	f7fd fb61 	bl	800d134 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800fa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa74:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fa78:	2102      	movs	r1, #2
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fd fb5a 	bl	800d134 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa86:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fd fb37 	bl	800d0fe <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa92:	1dda      	adds	r2, r3, #7
 800fa94:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa98:	2301      	movs	r3, #1
 800fa9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa9c:	f7fd fab6 	bl	800d00c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800faa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa2:	1c5a      	adds	r2, r3, #1
 800faa4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800faa8:	2301      	movs	r3, #1
 800faaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800faac:	f7fd faae 	bl	800d00c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800fab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fab2:	2100      	movs	r1, #0
 800fab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fab6:	f7fd fb8a 	bl	800d1ce <mem_set>
		sect = b_fat;		/* FAT start sector */
 800faba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fabc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fabe:	2300      	movs	r3, #0
 800fac0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fac2:	e04b      	b.n	800fb5c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800fac4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fac8:	2b03      	cmp	r3, #3
 800faca:	d113      	bne.n	800faf4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800facc:	f06f 0107 	mvn.w	r1, #7
 800fad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fad2:	f7fd fb2f 	bl	800d134 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800fad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad8:	3304      	adds	r3, #4
 800fada:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fd fb28 	bl	800d134 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800fae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae6:	3308      	adds	r3, #8
 800fae8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800faec:	4618      	mov	r0, r3
 800faee:	f7fd fb21 	bl	800d134 <st_dword>
 800faf2:	e00b      	b.n	800fb0c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800faf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d101      	bne.n	800fb00 <f_mkfs+0x678>
 800fafc:	4b21      	ldr	r3, [pc, #132]	; (800fb84 <f_mkfs+0x6fc>)
 800fafe:	e001      	b.n	800fb04 <f_mkfs+0x67c>
 800fb00:	f06f 0307 	mvn.w	r3, #7
 800fb04:	4619      	mov	r1, r3
 800fb06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb08:	f7fd fb14 	bl	800d134 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800fb0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb0e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800fb10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	4293      	cmp	r3, r2
 800fb16:	bf28      	it	cs
 800fb18:	4613      	movcs	r3, r2
 800fb1a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fb1c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fb20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb26:	f7fd fa71 	bl	800d00c <disk_write>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d001      	beq.n	800fb34 <f_mkfs+0x6ac>
 800fb30:	2301      	movs	r3, #1
 800fb32:	e0cf      	b.n	800fcd4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800fb34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb36:	461a      	mov	r2, r3
 800fb38:	2100      	movs	r1, #0
 800fb3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb3c:	f7fd fb47 	bl	800d1ce <mem_set>
				sect += n; nsect -= n;
 800fb40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb44:	4413      	add	r3, r2
 800fb46:	667b      	str	r3, [r7, #100]	; 0x64
 800fb48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb4c:	1ad3      	subs	r3, r2, r3
 800fb4e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800fb50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1dc      	bne.n	800fb10 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fb56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb58:	3301      	adds	r3, #1
 800fb5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d3af      	bcc.n	800fac4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800fb64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb68:	2b03      	cmp	r3, #3
 800fb6a:	d10d      	bne.n	800fb88 <f_mkfs+0x700>
 800fb6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb6e:	e00c      	b.n	800fb8a <f_mkfs+0x702>
 800fb70:	08011aac 	.word	0x08011aac
 800fb74:	08011ab8 	.word	0x08011ab8
 800fb78:	08011acc 	.word	0x08011acc
 800fb7c:	41615252 	.word	0x41615252
 800fb80:	61417272 	.word	0x61417272
 800fb84:	00fffff8 	.word	0x00fffff8
 800fb88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb8a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800fb8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	4293      	cmp	r3, r2
 800fb92:	bf28      	it	cs
 800fb94:	4613      	movcs	r3, r2
 800fb96:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fb98:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fb9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fba2:	f7fd fa33 	bl	800d00c <disk_write>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d001      	beq.n	800fbb0 <f_mkfs+0x728>
 800fbac:	2301      	movs	r3, #1
 800fbae:	e091      	b.n	800fcd4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800fbb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbb4:	4413      	add	r3, r2
 800fbb6:	667b      	str	r3, [r7, #100]	; 0x64
 800fbb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fbba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800fbc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d1e2      	bne.n	800fb8c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800fbc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbca:	2b03      	cmp	r3, #3
 800fbcc:	d103      	bne.n	800fbd6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800fbce:	230c      	movs	r3, #12
 800fbd0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fbd4:	e010      	b.n	800fbf8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbdc:	d303      	bcc.n	800fbe6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800fbde:	2306      	movs	r3, #6
 800fbe0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fbe4:	e008      	b.n	800fbf8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800fbe6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d101      	bne.n	800fbf2 <f_mkfs+0x76a>
 800fbee:	2304      	movs	r3, #4
 800fbf0:	e000      	b.n	800fbf4 <f_mkfs+0x76c>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800fbf8:	7afb      	ldrb	r3, [r7, #11]
 800fbfa:	f003 0308 	and.w	r3, r3, #8
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d15b      	bne.n	800fcba <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800fc02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc04:	461a      	mov	r2, r3
 800fc06:	2100      	movs	r1, #0
 800fc08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc0a:	f7fd fae0 	bl	800d1ce <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fd fa70 	bl	800d0fe <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc24:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	2201      	movs	r2, #1
 800fc32:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	3302      	adds	r3, #2
 800fc38:	2201      	movs	r2, #1
 800fc3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	3303      	adds	r3, #3
 800fc40:	2200      	movs	r2, #0
 800fc42:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	3304      	adds	r3, #4
 800fc48:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800fc4c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc52:	441a      	add	r2, r3
 800fc54:	4b21      	ldr	r3, [pc, #132]	; (800fcdc <f_mkfs+0x854>)
 800fc56:	fba3 1302 	umull	r1, r3, r3, r2
 800fc5a:	1ad2      	subs	r2, r2, r3
 800fc5c:	0852      	lsrs	r2, r2, #1
 800fc5e:	4413      	add	r3, r2
 800fc60:	0b5b      	lsrs	r3, r3, #13
 800fc62:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800fc64:	69bb      	ldr	r3, [r7, #24]
 800fc66:	3305      	adds	r3, #5
 800fc68:	22fe      	movs	r2, #254	; 0xfe
 800fc6a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800fc6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc6e:	089b      	lsrs	r3, r3, #2
 800fc70:	b2da      	uxtb	r2, r3
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	3306      	adds	r3, #6
 800fc76:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800fc7a:	b2d2      	uxtb	r2, r2
 800fc7c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	3307      	adds	r3, #7
 800fc82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc84:	b2d2      	uxtb	r2, r2
 800fc86:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	3308      	adds	r3, #8
 800fc8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fd fa50 	bl	800d134 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	330c      	adds	r3, #12
 800fc98:	693a      	ldr	r2, [r7, #16]
 800fc9a:	4611      	mov	r1, r2
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fd fa49 	bl	800d134 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800fca2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fca6:	2301      	movs	r3, #1
 800fca8:	2200      	movs	r2, #0
 800fcaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcac:	f7fd f9ae 	bl	800d00c <disk_write>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d001      	beq.n	800fcba <f_mkfs+0x832>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e00c      	b.n	800fcd4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fcba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fd f9c2 	bl	800d04c <disk_ioctl>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d001      	beq.n	800fcd2 <f_mkfs+0x84a>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e000      	b.n	800fcd4 <f_mkfs+0x84c>

	return FR_OK;
 800fcd2:	2300      	movs	r3, #0
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3774      	adds	r7, #116	; 0x74
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd90      	pop	{r4, r7, pc}
 800fcdc:	0515565b 	.word	0x0515565b

0800fce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4613      	mov	r3, r2
 800fcec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fcf6:	4b1f      	ldr	r3, [pc, #124]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fcf8:	7a5b      	ldrb	r3, [r3, #9]
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d131      	bne.n	800fd64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fd00:	4b1c      	ldr	r3, [pc, #112]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd02:	7a5b      	ldrb	r3, [r3, #9]
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	461a      	mov	r2, r3
 800fd08:	4b1a      	ldr	r3, [pc, #104]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fd0e:	4b19      	ldr	r3, [pc, #100]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd10:	7a5b      	ldrb	r3, [r3, #9]
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	4a17      	ldr	r2, [pc, #92]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4413      	add	r3, r2
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fd1e:	4b15      	ldr	r3, [pc, #84]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd20:	7a5b      	ldrb	r3, [r3, #9]
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	461a      	mov	r2, r3
 800fd26:	4b13      	ldr	r3, [pc, #76]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd28:	4413      	add	r3, r2
 800fd2a:	79fa      	ldrb	r2, [r7, #7]
 800fd2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fd2e:	4b11      	ldr	r3, [pc, #68]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd30:	7a5b      	ldrb	r3, [r3, #9]
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	1c5a      	adds	r2, r3, #1
 800fd36:	b2d1      	uxtb	r1, r2
 800fd38:	4a0e      	ldr	r2, [pc, #56]	; (800fd74 <FATFS_LinkDriverEx+0x94>)
 800fd3a:	7251      	strb	r1, [r2, #9]
 800fd3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fd3e:	7dbb      	ldrb	r3, [r7, #22]
 800fd40:	3330      	adds	r3, #48	; 0x30
 800fd42:	b2da      	uxtb	r2, r3
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	223a      	movs	r2, #58	; 0x3a
 800fd4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	3302      	adds	r3, #2
 800fd54:	222f      	movs	r2, #47	; 0x2f
 800fd56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	3303      	adds	r3, #3
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fd60:	2300      	movs	r3, #0
 800fd62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fd64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	371c      	adds	r7, #28
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	200009a0 	.word	0x200009a0

0800fd78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fd82:	2200      	movs	r2, #0
 800fd84:	6839      	ldr	r1, [r7, #0]
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f7ff ffaa 	bl	800fce0 <FATFS_LinkDriverEx>
 800fd8c:	4603      	mov	r3, r0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3708      	adds	r7, #8
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
	...

0800fd98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	4912      	ldr	r1, [pc, #72]	; (800fde8 <MX_USB_DEVICE_Init+0x50>)
 800fda0:	4812      	ldr	r0, [pc, #72]	; (800fdec <MX_USB_DEVICE_Init+0x54>)
 800fda2:	f7fb ff3f 	bl	800bc24 <USBD_Init>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fdac:	f7f1 f89e 	bl	8000eec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fdb0:	490f      	ldr	r1, [pc, #60]	; (800fdf0 <MX_USB_DEVICE_Init+0x58>)
 800fdb2:	480e      	ldr	r0, [pc, #56]	; (800fdec <MX_USB_DEVICE_Init+0x54>)
 800fdb4:	f7fb ff66 	bl	800bc84 <USBD_RegisterClass>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d001      	beq.n	800fdc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fdbe:	f7f1 f895 	bl	8000eec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fdc2:	490c      	ldr	r1, [pc, #48]	; (800fdf4 <MX_USB_DEVICE_Init+0x5c>)
 800fdc4:	4809      	ldr	r0, [pc, #36]	; (800fdec <MX_USB_DEVICE_Init+0x54>)
 800fdc6:	f7fb fe87 	bl	800bad8 <USBD_CDC_RegisterInterface>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fdd0:	f7f1 f88c 	bl	8000eec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fdd4:	4805      	ldr	r0, [pc, #20]	; (800fdec <MX_USB_DEVICE_Init+0x54>)
 800fdd6:	f7fb ff7c 	bl	800bcd2 <USBD_Start>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fde0:	f7f1 f884 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fde4:	bf00      	nop
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	20000130 	.word	0x20000130
 800fdec:	200009ac 	.word	0x200009ac
 800fdf0:	20000018 	.word	0x20000018
 800fdf4:	2000011c 	.word	0x2000011c

0800fdf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	4905      	ldr	r1, [pc, #20]	; (800fe14 <CDC_Init_FS+0x1c>)
 800fe00:	4805      	ldr	r0, [pc, #20]	; (800fe18 <CDC_Init_FS+0x20>)
 800fe02:	f7fb fe7e 	bl	800bb02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe06:	4905      	ldr	r1, [pc, #20]	; (800fe1c <CDC_Init_FS+0x24>)
 800fe08:	4803      	ldr	r0, [pc, #12]	; (800fe18 <CDC_Init_FS+0x20>)
 800fe0a:	f7fb fe98 	bl	800bb3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	2000147c 	.word	0x2000147c
 800fe18:	200009ac 	.word	0x200009ac
 800fe1c:	20000c7c 	.word	0x20000c7c

0800fe20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe20:	b480      	push	{r7}
 800fe22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	4603      	mov	r3, r0
 800fe38:	6039      	str	r1, [r7, #0]
 800fe3a:	71fb      	strb	r3, [r7, #7]
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe40:	79fb      	ldrb	r3, [r7, #7]
 800fe42:	2b23      	cmp	r3, #35	; 0x23
 800fe44:	d84a      	bhi.n	800fedc <CDC_Control_FS+0xac>
 800fe46:	a201      	add	r2, pc, #4	; (adr r2, 800fe4c <CDC_Control_FS+0x1c>)
 800fe48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4c:	0800fedd 	.word	0x0800fedd
 800fe50:	0800fedd 	.word	0x0800fedd
 800fe54:	0800fedd 	.word	0x0800fedd
 800fe58:	0800fedd 	.word	0x0800fedd
 800fe5c:	0800fedd 	.word	0x0800fedd
 800fe60:	0800fedd 	.word	0x0800fedd
 800fe64:	0800fedd 	.word	0x0800fedd
 800fe68:	0800fedd 	.word	0x0800fedd
 800fe6c:	0800fedd 	.word	0x0800fedd
 800fe70:	0800fedd 	.word	0x0800fedd
 800fe74:	0800fedd 	.word	0x0800fedd
 800fe78:	0800fedd 	.word	0x0800fedd
 800fe7c:	0800fedd 	.word	0x0800fedd
 800fe80:	0800fedd 	.word	0x0800fedd
 800fe84:	0800fedd 	.word	0x0800fedd
 800fe88:	0800fedd 	.word	0x0800fedd
 800fe8c:	0800fedd 	.word	0x0800fedd
 800fe90:	0800fedd 	.word	0x0800fedd
 800fe94:	0800fedd 	.word	0x0800fedd
 800fe98:	0800fedd 	.word	0x0800fedd
 800fe9c:	0800fedd 	.word	0x0800fedd
 800fea0:	0800fedd 	.word	0x0800fedd
 800fea4:	0800fedd 	.word	0x0800fedd
 800fea8:	0800fedd 	.word	0x0800fedd
 800feac:	0800fedd 	.word	0x0800fedd
 800feb0:	0800fedd 	.word	0x0800fedd
 800feb4:	0800fedd 	.word	0x0800fedd
 800feb8:	0800fedd 	.word	0x0800fedd
 800febc:	0800fedd 	.word	0x0800fedd
 800fec0:	0800fedd 	.word	0x0800fedd
 800fec4:	0800fedd 	.word	0x0800fedd
 800fec8:	0800fedd 	.word	0x0800fedd
 800fecc:	0800fedd 	.word	0x0800fedd
 800fed0:	0800fedd 	.word	0x0800fedd
 800fed4:	0800fedd 	.word	0x0800fedd
 800fed8:	0800fedd 	.word	0x0800fedd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fedc:	bf00      	nop
  }

  return (USBD_OK);
 800fede:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fef6:	6879      	ldr	r1, [r7, #4]
 800fef8:	4805      	ldr	r0, [pc, #20]	; (800ff10 <CDC_Receive_FS+0x24>)
 800fefa:	f7fb fe20 	bl	800bb3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fefe:	4804      	ldr	r0, [pc, #16]	; (800ff10 <CDC_Receive_FS+0x24>)
 800ff00:	f7fb fe66 	bl	800bbd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ff04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	200009ac 	.word	0x200009ac

0800ff14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ff20:	2300      	movs	r3, #0
 800ff22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ff24:	4b0d      	ldr	r3, [pc, #52]	; (800ff5c <CDC_Transmit_FS+0x48>)
 800ff26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d001      	beq.n	800ff3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff36:	2301      	movs	r3, #1
 800ff38:	e00b      	b.n	800ff52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff3a:	887b      	ldrh	r3, [r7, #2]
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	4806      	ldr	r0, [pc, #24]	; (800ff5c <CDC_Transmit_FS+0x48>)
 800ff42:	f7fb fdde 	bl	800bb02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff46:	4805      	ldr	r0, [pc, #20]	; (800ff5c <CDC_Transmit_FS+0x48>)
 800ff48:	f7fb fe12 	bl	800bb70 <USBD_CDC_TransmitPacket>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	200009ac 	.word	0x200009ac

0800ff60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b087      	sub	sp, #28
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	371c      	adds	r7, #28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
	...

0800ff84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b083      	sub	sp, #12
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	6039      	str	r1, [r7, #0]
 800ff8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	2212      	movs	r2, #18
 800ff94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff96:	4b03      	ldr	r3, [pc, #12]	; (800ffa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	370c      	adds	r7, #12
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr
 800ffa4:	20000150 	.word	0x20000150

0800ffa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b083      	sub	sp, #12
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	4603      	mov	r3, r0
 800ffb0:	6039      	str	r1, [r7, #0]
 800ffb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	2204      	movs	r2, #4
 800ffb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ffba:	4b03      	ldr	r3, [pc, #12]	; (800ffc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr
 800ffc8:	20000170 	.word	0x20000170

0800ffcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	6039      	str	r1, [r7, #0]
 800ffd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffd8:	79fb      	ldrb	r3, [r7, #7]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d105      	bne.n	800ffea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffde:	683a      	ldr	r2, [r7, #0]
 800ffe0:	4907      	ldr	r1, [pc, #28]	; (8010000 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffe2:	4808      	ldr	r0, [pc, #32]	; (8010004 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffe4:	f7fc fed1 	bl	800cd8a <USBD_GetString>
 800ffe8:	e004      	b.n	800fff4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	4904      	ldr	r1, [pc, #16]	; (8010000 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffee:	4805      	ldr	r0, [pc, #20]	; (8010004 <USBD_FS_ProductStrDescriptor+0x38>)
 800fff0:	f7fc fecb 	bl	800cd8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800fff4:	4b02      	ldr	r3, [pc, #8]	; (8010000 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	20001c7c 	.word	0x20001c7c
 8010004:	08011ae0 	.word	0x08011ae0

08010008 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	4603      	mov	r3, r0
 8010010:	6039      	str	r1, [r7, #0]
 8010012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	4904      	ldr	r1, [pc, #16]	; (8010028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010018:	4804      	ldr	r0, [pc, #16]	; (801002c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801001a:	f7fc feb6 	bl	800cd8a <USBD_GetString>
  return USBD_StrDesc;
 801001e:	4b02      	ldr	r3, [pc, #8]	; (8010028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010020:	4618      	mov	r0, r3
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	20001c7c 	.word	0x20001c7c
 801002c:	08011af8 	.word	0x08011af8

08010030 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	6039      	str	r1, [r7, #0]
 801003a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	221a      	movs	r2, #26
 8010040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010042:	f000 f855 	bl	80100f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010046:	4b02      	ldr	r3, [pc, #8]	; (8010050 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	20000174 	.word	0x20000174

08010054 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	6039      	str	r1, [r7, #0]
 801005e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010060:	79fb      	ldrb	r3, [r7, #7]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d105      	bne.n	8010072 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010066:	683a      	ldr	r2, [r7, #0]
 8010068:	4907      	ldr	r1, [pc, #28]	; (8010088 <USBD_FS_ConfigStrDescriptor+0x34>)
 801006a:	4808      	ldr	r0, [pc, #32]	; (801008c <USBD_FS_ConfigStrDescriptor+0x38>)
 801006c:	f7fc fe8d 	bl	800cd8a <USBD_GetString>
 8010070:	e004      	b.n	801007c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010072:	683a      	ldr	r2, [r7, #0]
 8010074:	4904      	ldr	r1, [pc, #16]	; (8010088 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010076:	4805      	ldr	r0, [pc, #20]	; (801008c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010078:	f7fc fe87 	bl	800cd8a <USBD_GetString>
  }
  return USBD_StrDesc;
 801007c:	4b02      	ldr	r3, [pc, #8]	; (8010088 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	20001c7c 	.word	0x20001c7c
 801008c:	08011b0c 	.word	0x08011b0c

08010090 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	4603      	mov	r3, r0
 8010098:	6039      	str	r1, [r7, #0]
 801009a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801009c:	79fb      	ldrb	r3, [r7, #7]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d105      	bne.n	80100ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80100a2:	683a      	ldr	r2, [r7, #0]
 80100a4:	4907      	ldr	r1, [pc, #28]	; (80100c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80100a6:	4808      	ldr	r0, [pc, #32]	; (80100c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80100a8:	f7fc fe6f 	bl	800cd8a <USBD_GetString>
 80100ac:	e004      	b.n	80100b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	4904      	ldr	r1, [pc, #16]	; (80100c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80100b2:	4805      	ldr	r0, [pc, #20]	; (80100c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80100b4:	f7fc fe69 	bl	800cd8a <USBD_GetString>
  }
  return USBD_StrDesc;
 80100b8:	4b02      	ldr	r3, [pc, #8]	; (80100c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	20001c7c 	.word	0x20001c7c
 80100c8:	08011b18 	.word	0x08011b18

080100cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	6039      	str	r1, [r7, #0]
 80100d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	220c      	movs	r2, #12
 80100dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80100de:	4b03      	ldr	r3, [pc, #12]	; (80100ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr
 80100ec:	20000164 	.word	0x20000164

080100f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80100f6:	4b0f      	ldr	r3, [pc, #60]	; (8010134 <Get_SerialNum+0x44>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80100fc:	4b0e      	ldr	r3, [pc, #56]	; (8010138 <Get_SerialNum+0x48>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010102:	4b0e      	ldr	r3, [pc, #56]	; (801013c <Get_SerialNum+0x4c>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4413      	add	r3, r2
 801010e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d009      	beq.n	801012a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010116:	2208      	movs	r2, #8
 8010118:	4909      	ldr	r1, [pc, #36]	; (8010140 <Get_SerialNum+0x50>)
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f000 f814 	bl	8010148 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010120:	2204      	movs	r2, #4
 8010122:	4908      	ldr	r1, [pc, #32]	; (8010144 <Get_SerialNum+0x54>)
 8010124:	68b8      	ldr	r0, [r7, #8]
 8010126:	f000 f80f 	bl	8010148 <IntToUnicode>
  }
}
 801012a:	bf00      	nop
 801012c:	3710      	adds	r7, #16
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	1fff7590 	.word	0x1fff7590
 8010138:	1fff7594 	.word	0x1fff7594
 801013c:	1fff7598 	.word	0x1fff7598
 8010140:	20000176 	.word	0x20000176
 8010144:	20000186 	.word	0x20000186

08010148 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010148:	b480      	push	{r7}
 801014a:	b087      	sub	sp, #28
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	4613      	mov	r3, r2
 8010154:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801015a:	2300      	movs	r3, #0
 801015c:	75fb      	strb	r3, [r7, #23]
 801015e:	e027      	b.n	80101b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	0f1b      	lsrs	r3, r3, #28
 8010164:	2b09      	cmp	r3, #9
 8010166:	d80b      	bhi.n	8010180 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	0f1b      	lsrs	r3, r3, #28
 801016c:	b2da      	uxtb	r2, r3
 801016e:	7dfb      	ldrb	r3, [r7, #23]
 8010170:	005b      	lsls	r3, r3, #1
 8010172:	4619      	mov	r1, r3
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	440b      	add	r3, r1
 8010178:	3230      	adds	r2, #48	; 0x30
 801017a:	b2d2      	uxtb	r2, r2
 801017c:	701a      	strb	r2, [r3, #0]
 801017e:	e00a      	b.n	8010196 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	0f1b      	lsrs	r3, r3, #28
 8010184:	b2da      	uxtb	r2, r3
 8010186:	7dfb      	ldrb	r3, [r7, #23]
 8010188:	005b      	lsls	r3, r3, #1
 801018a:	4619      	mov	r1, r3
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	440b      	add	r3, r1
 8010190:	3237      	adds	r2, #55	; 0x37
 8010192:	b2d2      	uxtb	r2, r2
 8010194:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	011b      	lsls	r3, r3, #4
 801019a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801019c:	7dfb      	ldrb	r3, [r7, #23]
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	3301      	adds	r3, #1
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	4413      	add	r3, r2
 80101a6:	2200      	movs	r2, #0
 80101a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80101aa:	7dfb      	ldrb	r3, [r7, #23]
 80101ac:	3301      	adds	r3, #1
 80101ae:	75fb      	strb	r3, [r7, #23]
 80101b0:	7dfa      	ldrb	r2, [r7, #23]
 80101b2:	79fb      	ldrb	r3, [r7, #7]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d3d3      	bcc.n	8010160 <IntToUnicode+0x18>
  }
}
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	371c      	adds	r7, #28
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr
	...

080101c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b0b0      	sub	sp, #192	; 0xc0
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80101d4:	2200      	movs	r2, #0
 80101d6:	601a      	str	r2, [r3, #0]
 80101d8:	605a      	str	r2, [r3, #4]
 80101da:	609a      	str	r2, [r3, #8]
 80101dc:	60da      	str	r2, [r3, #12]
 80101de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80101e0:	f107 0318 	add.w	r3, r7, #24
 80101e4:	2294      	movs	r2, #148	; 0x94
 80101e6:	2100      	movs	r1, #0
 80101e8:	4618      	mov	r0, r3
 80101ea:	f000 fc43 	bl	8010a74 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101f6:	d163      	bne.n	80102c0 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80101f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80101fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80101fe:	2300      	movs	r3, #0
 8010200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010204:	f107 0318 	add.w	r3, r7, #24
 8010208:	4618      	mov	r0, r3
 801020a:	f7f3 ff87 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d001      	beq.n	8010218 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010214:	f7f0 fe6a 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010218:	4b2b      	ldr	r3, [pc, #172]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 801021a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801021c:	4a2a      	ldr	r2, [pc, #168]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 801021e:	f043 0301 	orr.w	r3, r3, #1
 8010222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010224:	4b28      	ldr	r3, [pc, #160]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 8010226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010228:	f003 0301 	and.w	r3, r3, #1
 801022c:	617b      	str	r3, [r7, #20]
 801022e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010230:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010238:	2302      	movs	r3, #2
 801023a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801023e:	2300      	movs	r3, #0
 8010240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010244:	2303      	movs	r3, #3
 8010246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801024a:	230a      	movs	r3, #10
 801024c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010250:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010254:	4619      	mov	r1, r3
 8010256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801025a:	f7f1 fac5 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801025e:	4b1a      	ldr	r3, [pc, #104]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 8010260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010262:	4a19      	ldr	r2, [pc, #100]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 8010264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010268:	64d3      	str	r3, [r2, #76]	; 0x4c
 801026a:	4b17      	ldr	r3, [pc, #92]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 801026c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801026e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010272:	613b      	str	r3, [r7, #16]
 8010274:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010276:	4b14      	ldr	r3, [pc, #80]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 8010278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801027a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d114      	bne.n	80102ac <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010282:	4b11      	ldr	r3, [pc, #68]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 8010284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010286:	4a10      	ldr	r2, [pc, #64]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 8010288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801028c:	6593      	str	r3, [r2, #88]	; 0x58
 801028e:	4b0e      	ldr	r3, [pc, #56]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 8010290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010296:	60fb      	str	r3, [r7, #12]
 8010298:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 801029a:	f7f3 f82b 	bl	80032f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801029e:	4b0a      	ldr	r3, [pc, #40]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 80102a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102a2:	4a09      	ldr	r2, [pc, #36]	; (80102c8 <HAL_PCD_MspInit+0x100>)
 80102a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80102a8:	6593      	str	r3, [r2, #88]	; 0x58
 80102aa:	e001      	b.n	80102b0 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80102ac:	f7f3 f822 	bl	80032f4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80102b0:	2200      	movs	r2, #0
 80102b2:	2100      	movs	r1, #0
 80102b4:	2043      	movs	r0, #67	; 0x43
 80102b6:	f7f1 fa60 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80102ba:	2043      	movs	r0, #67	; 0x43
 80102bc:	f7f1 fa79 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80102c0:	bf00      	nop
 80102c2:	37c0      	adds	r7, #192	; 0xc0
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	40021000 	.word	0x40021000

080102cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80102e0:	4619      	mov	r1, r3
 80102e2:	4610      	mov	r0, r2
 80102e4:	f7fb fd40 	bl	800bd68 <USBD_LL_SetupStage>
}
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	460b      	mov	r3, r1
 80102fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010302:	78fa      	ldrb	r2, [r7, #3]
 8010304:	6879      	ldr	r1, [r7, #4]
 8010306:	4613      	mov	r3, r2
 8010308:	00db      	lsls	r3, r3, #3
 801030a:	4413      	add	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	440b      	add	r3, r1
 8010310:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	78fb      	ldrb	r3, [r7, #3]
 8010318:	4619      	mov	r1, r3
 801031a:	f7fb fd7a 	bl	800be12 <USBD_LL_DataOutStage>
}
 801031e:	bf00      	nop
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b082      	sub	sp, #8
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	460b      	mov	r3, r1
 8010330:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010338:	78fa      	ldrb	r2, [r7, #3]
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	4613      	mov	r3, r2
 801033e:	00db      	lsls	r3, r3, #3
 8010340:	4413      	add	r3, r2
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	440b      	add	r3, r1
 8010346:	334c      	adds	r3, #76	; 0x4c
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	78fb      	ldrb	r3, [r7, #3]
 801034c:	4619      	mov	r1, r3
 801034e:	f7fb fdc3 	bl	800bed8 <USBD_LL_DataInStage>
}
 8010352:	bf00      	nop
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010368:	4618      	mov	r0, r3
 801036a:	f7fb fed7 	bl	800c11c <USBD_LL_SOF>
}
 801036e:	bf00      	nop
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b084      	sub	sp, #16
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801037e:	2301      	movs	r3, #1
 8010380:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	2b02      	cmp	r3, #2
 8010388:	d001      	beq.n	801038e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801038a:	f7f0 fdaf 	bl	8000eec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010394:	7bfa      	ldrb	r2, [r7, #15]
 8010396:	4611      	mov	r1, r2
 8010398:	4618      	mov	r0, r3
 801039a:	f7fb fe81 	bl	800c0a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fb fe2d 	bl	800c004 <USBD_LL_Reset>
}
 80103aa:	bf00      	nop
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
	...

080103b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	6812      	ldr	r2, [r2, #0]
 80103ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80103ce:	f043 0301 	orr.w	r3, r3, #1
 80103d2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fb fe70 	bl	800c0c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d005      	beq.n	80103f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103e8:	4b04      	ldr	r3, [pc, #16]	; (80103fc <HAL_PCD_SuspendCallback+0x48>)
 80103ea:	691b      	ldr	r3, [r3, #16]
 80103ec:	4a03      	ldr	r2, [pc, #12]	; (80103fc <HAL_PCD_SuspendCallback+0x48>)
 80103ee:	f043 0306 	orr.w	r3, r3, #6
 80103f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	e000ed00 	.word	0xe000ed00

08010400 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	6812      	ldr	r2, [r2, #0]
 8010416:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801041a:	f023 0301 	bic.w	r3, r3, #1
 801041e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6a1b      	ldr	r3, [r3, #32]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d007      	beq.n	8010438 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010428:	4b08      	ldr	r3, [pc, #32]	; (801044c <HAL_PCD_ResumeCallback+0x4c>)
 801042a:	691b      	ldr	r3, [r3, #16]
 801042c:	4a07      	ldr	r2, [pc, #28]	; (801044c <HAL_PCD_ResumeCallback+0x4c>)
 801042e:	f023 0306 	bic.w	r3, r3, #6
 8010432:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010434:	f000 faf4 	bl	8010a20 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801043e:	4618      	mov	r0, r3
 8010440:	f7fb fe54 	bl	800c0ec <USBD_LL_Resume>
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	e000ed00 	.word	0xe000ed00

08010450 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	460b      	mov	r3, r1
 801045a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010462:	78fa      	ldrb	r2, [r7, #3]
 8010464:	4611      	mov	r1, r2
 8010466:	4618      	mov	r0, r3
 8010468:	f7fb fea0 	bl	800c1ac <USBD_LL_IsoOUTIncomplete>
}
 801046c:	bf00      	nop
 801046e:	3708      	adds	r7, #8
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	460b      	mov	r3, r1
 801047e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010486:	78fa      	ldrb	r2, [r7, #3]
 8010488:	4611      	mov	r1, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f7fb fe68 	bl	800c160 <USBD_LL_IsoINIncomplete>
}
 8010490:	bf00      	nop
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fb fea6 	bl	800c1f8 <USBD_LL_DevConnected>
}
 80104ac:	bf00      	nop
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fb fea3 	bl	800c20e <USBD_LL_DevDisconnected>
}
 80104c8:	bf00      	nop
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d139      	bne.n	8010554 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80104e0:	4a1f      	ldr	r2, [pc, #124]	; (8010560 <USBD_LL_Init+0x90>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a1d      	ldr	r2, [pc, #116]	; (8010560 <USBD_LL_Init+0x90>)
 80104ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80104f0:	4b1b      	ldr	r3, [pc, #108]	; (8010560 <USBD_LL_Init+0x90>)
 80104f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80104f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80104f8:	4b19      	ldr	r3, [pc, #100]	; (8010560 <USBD_LL_Init+0x90>)
 80104fa:	2206      	movs	r2, #6
 80104fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80104fe:	4b18      	ldr	r3, [pc, #96]	; (8010560 <USBD_LL_Init+0x90>)
 8010500:	2202      	movs	r2, #2
 8010502:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010504:	4b16      	ldr	r3, [pc, #88]	; (8010560 <USBD_LL_Init+0x90>)
 8010506:	2200      	movs	r2, #0
 8010508:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801050a:	4b15      	ldr	r3, [pc, #84]	; (8010560 <USBD_LL_Init+0x90>)
 801050c:	2200      	movs	r2, #0
 801050e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010510:	4b13      	ldr	r3, [pc, #76]	; (8010560 <USBD_LL_Init+0x90>)
 8010512:	2200      	movs	r2, #0
 8010514:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010516:	4b12      	ldr	r3, [pc, #72]	; (8010560 <USBD_LL_Init+0x90>)
 8010518:	2200      	movs	r2, #0
 801051a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801051c:	4b10      	ldr	r3, [pc, #64]	; (8010560 <USBD_LL_Init+0x90>)
 801051e:	2200      	movs	r2, #0
 8010520:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010522:	4b0f      	ldr	r3, [pc, #60]	; (8010560 <USBD_LL_Init+0x90>)
 8010524:	2200      	movs	r2, #0
 8010526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010528:	480d      	ldr	r0, [pc, #52]	; (8010560 <USBD_LL_Init+0x90>)
 801052a:	f7f1 fc5f 	bl	8001dec <HAL_PCD_Init>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d001      	beq.n	8010538 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8010534:	f7f0 fcda 	bl	8000eec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010538:	2180      	movs	r1, #128	; 0x80
 801053a:	4809      	ldr	r0, [pc, #36]	; (8010560 <USBD_LL_Init+0x90>)
 801053c:	f7f2 fde1 	bl	8003102 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010540:	2240      	movs	r2, #64	; 0x40
 8010542:	2100      	movs	r1, #0
 8010544:	4806      	ldr	r0, [pc, #24]	; (8010560 <USBD_LL_Init+0x90>)
 8010546:	f7f2 fd95 	bl	8003074 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801054a:	2280      	movs	r2, #128	; 0x80
 801054c:	2101      	movs	r1, #1
 801054e:	4804      	ldr	r0, [pc, #16]	; (8010560 <USBD_LL_Init+0x90>)
 8010550:	f7f2 fd90 	bl	8003074 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010554:	2300      	movs	r3, #0
}
 8010556:	4618      	mov	r0, r3
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	20001e7c 	.word	0x20001e7c

08010564 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801057a:	4618      	mov	r0, r3
 801057c:	f7f1 fd5a 	bl	8002034 <HAL_PCD_Start>
 8010580:	4603      	mov	r3, r0
 8010582:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010584:	7bbb      	ldrb	r3, [r7, #14]
 8010586:	2b03      	cmp	r3, #3
 8010588:	d816      	bhi.n	80105b8 <USBD_LL_Start+0x54>
 801058a:	a201      	add	r2, pc, #4	; (adr r2, 8010590 <USBD_LL_Start+0x2c>)
 801058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010590:	080105a1 	.word	0x080105a1
 8010594:	080105a7 	.word	0x080105a7
 8010598:	080105ad 	.word	0x080105ad
 801059c:	080105b3 	.word	0x080105b3
    case HAL_OK :
      usb_status = USBD_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	73fb      	strb	r3, [r7, #15]
    break;
 80105a4:	e00b      	b.n	80105be <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80105a6:	2303      	movs	r3, #3
 80105a8:	73fb      	strb	r3, [r7, #15]
    break;
 80105aa:	e008      	b.n	80105be <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105ac:	2301      	movs	r3, #1
 80105ae:	73fb      	strb	r3, [r7, #15]
    break;
 80105b0:	e005      	b.n	80105be <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105b2:	2303      	movs	r3, #3
 80105b4:	73fb      	strb	r3, [r7, #15]
    break;
 80105b6:	e002      	b.n	80105be <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80105b8:	2303      	movs	r3, #3
 80105ba:	73fb      	strb	r3, [r7, #15]
    break;
 80105bc:	bf00      	nop
  }
  return usb_status;
 80105be:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	4608      	mov	r0, r1
 80105d2:	4611      	mov	r1, r2
 80105d4:	461a      	mov	r2, r3
 80105d6:	4603      	mov	r3, r0
 80105d8:	70fb      	strb	r3, [r7, #3]
 80105da:	460b      	mov	r3, r1
 80105dc:	70bb      	strb	r3, [r7, #2]
 80105de:	4613      	mov	r3, r2
 80105e0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e2:	2300      	movs	r3, #0
 80105e4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80105f0:	78bb      	ldrb	r3, [r7, #2]
 80105f2:	883a      	ldrh	r2, [r7, #0]
 80105f4:	78f9      	ldrb	r1, [r7, #3]
 80105f6:	f7f2 fa04 	bl	8002a02 <HAL_PCD_EP_Open>
 80105fa:	4603      	mov	r3, r0
 80105fc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80105fe:	7bbb      	ldrb	r3, [r7, #14]
 8010600:	2b03      	cmp	r3, #3
 8010602:	d817      	bhi.n	8010634 <USBD_LL_OpenEP+0x6c>
 8010604:	a201      	add	r2, pc, #4	; (adr r2, 801060c <USBD_LL_OpenEP+0x44>)
 8010606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801060a:	bf00      	nop
 801060c:	0801061d 	.word	0x0801061d
 8010610:	08010623 	.word	0x08010623
 8010614:	08010629 	.word	0x08010629
 8010618:	0801062f 	.word	0x0801062f
    case HAL_OK :
      usb_status = USBD_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	73fb      	strb	r3, [r7, #15]
    break;
 8010620:	e00b      	b.n	801063a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010622:	2303      	movs	r3, #3
 8010624:	73fb      	strb	r3, [r7, #15]
    break;
 8010626:	e008      	b.n	801063a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010628:	2301      	movs	r3, #1
 801062a:	73fb      	strb	r3, [r7, #15]
    break;
 801062c:	e005      	b.n	801063a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801062e:	2303      	movs	r3, #3
 8010630:	73fb      	strb	r3, [r7, #15]
    break;
 8010632:	e002      	b.n	801063a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010634:	2303      	movs	r3, #3
 8010636:	73fb      	strb	r3, [r7, #15]
    break;
 8010638:	bf00      	nop
  }
  return usb_status;
 801063a:	7bfb      	ldrb	r3, [r7, #15]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	460b      	mov	r3, r1
 801064e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010654:	2300      	movs	r3, #0
 8010656:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801065e:	78fa      	ldrb	r2, [r7, #3]
 8010660:	4611      	mov	r1, r2
 8010662:	4618      	mov	r0, r3
 8010664:	f7f2 fa35 	bl	8002ad2 <HAL_PCD_EP_Close>
 8010668:	4603      	mov	r3, r0
 801066a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801066c:	7bbb      	ldrb	r3, [r7, #14]
 801066e:	2b03      	cmp	r3, #3
 8010670:	d816      	bhi.n	80106a0 <USBD_LL_CloseEP+0x5c>
 8010672:	a201      	add	r2, pc, #4	; (adr r2, 8010678 <USBD_LL_CloseEP+0x34>)
 8010674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010678:	08010689 	.word	0x08010689
 801067c:	0801068f 	.word	0x0801068f
 8010680:	08010695 	.word	0x08010695
 8010684:	0801069b 	.word	0x0801069b
    case HAL_OK :
      usb_status = USBD_OK;
 8010688:	2300      	movs	r3, #0
 801068a:	73fb      	strb	r3, [r7, #15]
    break;
 801068c:	e00b      	b.n	80106a6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801068e:	2303      	movs	r3, #3
 8010690:	73fb      	strb	r3, [r7, #15]
    break;
 8010692:	e008      	b.n	80106a6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010694:	2301      	movs	r3, #1
 8010696:	73fb      	strb	r3, [r7, #15]
    break;
 8010698:	e005      	b.n	80106a6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801069a:	2303      	movs	r3, #3
 801069c:	73fb      	strb	r3, [r7, #15]
    break;
 801069e:	e002      	b.n	80106a6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80106a0:	2303      	movs	r3, #3
 80106a2:	73fb      	strb	r3, [r7, #15]
    break;
 80106a4:	bf00      	nop
  }
  return usb_status;
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106bc:	2300      	movs	r3, #0
 80106be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106ca:	78fa      	ldrb	r2, [r7, #3]
 80106cc:	4611      	mov	r1, r2
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7f2 fadc 	bl	8002c8c <HAL_PCD_EP_SetStall>
 80106d4:	4603      	mov	r3, r0
 80106d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80106d8:	7bbb      	ldrb	r3, [r7, #14]
 80106da:	2b03      	cmp	r3, #3
 80106dc:	d816      	bhi.n	801070c <USBD_LL_StallEP+0x5c>
 80106de:	a201      	add	r2, pc, #4	; (adr r2, 80106e4 <USBD_LL_StallEP+0x34>)
 80106e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106e4:	080106f5 	.word	0x080106f5
 80106e8:	080106fb 	.word	0x080106fb
 80106ec:	08010701 	.word	0x08010701
 80106f0:	08010707 	.word	0x08010707
    case HAL_OK :
      usb_status = USBD_OK;
 80106f4:	2300      	movs	r3, #0
 80106f6:	73fb      	strb	r3, [r7, #15]
    break;
 80106f8:	e00b      	b.n	8010712 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106fa:	2303      	movs	r3, #3
 80106fc:	73fb      	strb	r3, [r7, #15]
    break;
 80106fe:	e008      	b.n	8010712 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010700:	2301      	movs	r3, #1
 8010702:	73fb      	strb	r3, [r7, #15]
    break;
 8010704:	e005      	b.n	8010712 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010706:	2303      	movs	r3, #3
 8010708:	73fb      	strb	r3, [r7, #15]
    break;
 801070a:	e002      	b.n	8010712 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801070c:	2303      	movs	r3, #3
 801070e:	73fb      	strb	r3, [r7, #15]
    break;
 8010710:	bf00      	nop
  }
  return usb_status;
 8010712:	7bfb      	ldrb	r3, [r7, #15]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3710      	adds	r7, #16
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	460b      	mov	r3, r1
 8010726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801072c:	2300      	movs	r3, #0
 801072e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010736:	78fa      	ldrb	r2, [r7, #3]
 8010738:	4611      	mov	r1, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f7f2 fb08 	bl	8002d50 <HAL_PCD_EP_ClrStall>
 8010740:	4603      	mov	r3, r0
 8010742:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010744:	7bbb      	ldrb	r3, [r7, #14]
 8010746:	2b03      	cmp	r3, #3
 8010748:	d816      	bhi.n	8010778 <USBD_LL_ClearStallEP+0x5c>
 801074a:	a201      	add	r2, pc, #4	; (adr r2, 8010750 <USBD_LL_ClearStallEP+0x34>)
 801074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010750:	08010761 	.word	0x08010761
 8010754:	08010767 	.word	0x08010767
 8010758:	0801076d 	.word	0x0801076d
 801075c:	08010773 	.word	0x08010773
    case HAL_OK :
      usb_status = USBD_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	73fb      	strb	r3, [r7, #15]
    break;
 8010764:	e00b      	b.n	801077e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010766:	2303      	movs	r3, #3
 8010768:	73fb      	strb	r3, [r7, #15]
    break;
 801076a:	e008      	b.n	801077e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801076c:	2301      	movs	r3, #1
 801076e:	73fb      	strb	r3, [r7, #15]
    break;
 8010770:	e005      	b.n	801077e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010772:	2303      	movs	r3, #3
 8010774:	73fb      	strb	r3, [r7, #15]
    break;
 8010776:	e002      	b.n	801077e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010778:	2303      	movs	r3, #3
 801077a:	73fb      	strb	r3, [r7, #15]
    break;
 801077c:	bf00      	nop
  }
  return usb_status;
 801077e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	460b      	mov	r3, r1
 8010792:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801079a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801079c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	da0b      	bge.n	80107bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80107a4:	78fb      	ldrb	r3, [r7, #3]
 80107a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107aa:	68f9      	ldr	r1, [r7, #12]
 80107ac:	4613      	mov	r3, r2
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	4413      	add	r3, r2
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	440b      	add	r3, r1
 80107b6:	333e      	adds	r3, #62	; 0x3e
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	e00b      	b.n	80107d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107bc:	78fb      	ldrb	r3, [r7, #3]
 80107be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107c2:	68f9      	ldr	r1, [r7, #12]
 80107c4:	4613      	mov	r3, r2
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	4413      	add	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	440b      	add	r3, r1
 80107ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80107d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	460b      	mov	r3, r1
 80107ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ec:	2300      	movs	r3, #0
 80107ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107fa:	78fa      	ldrb	r2, [r7, #3]
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7f2 f8da 	bl	80029b8 <HAL_PCD_SetAddress>
 8010804:	4603      	mov	r3, r0
 8010806:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010808:	7bbb      	ldrb	r3, [r7, #14]
 801080a:	2b03      	cmp	r3, #3
 801080c:	d816      	bhi.n	801083c <USBD_LL_SetUSBAddress+0x5c>
 801080e:	a201      	add	r2, pc, #4	; (adr r2, 8010814 <USBD_LL_SetUSBAddress+0x34>)
 8010810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010814:	08010825 	.word	0x08010825
 8010818:	0801082b 	.word	0x0801082b
 801081c:	08010831 	.word	0x08010831
 8010820:	08010837 	.word	0x08010837
    case HAL_OK :
      usb_status = USBD_OK;
 8010824:	2300      	movs	r3, #0
 8010826:	73fb      	strb	r3, [r7, #15]
    break;
 8010828:	e00b      	b.n	8010842 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801082a:	2303      	movs	r3, #3
 801082c:	73fb      	strb	r3, [r7, #15]
    break;
 801082e:	e008      	b.n	8010842 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010830:	2301      	movs	r3, #1
 8010832:	73fb      	strb	r3, [r7, #15]
    break;
 8010834:	e005      	b.n	8010842 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010836:	2303      	movs	r3, #3
 8010838:	73fb      	strb	r3, [r7, #15]
    break;
 801083a:	e002      	b.n	8010842 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801083c:	2303      	movs	r3, #3
 801083e:	73fb      	strb	r3, [r7, #15]
    break;
 8010840:	bf00      	nop
  }
  return usb_status;
 8010842:	7bfb      	ldrb	r3, [r7, #15]
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	607a      	str	r2, [r7, #4]
 8010856:	603b      	str	r3, [r7, #0]
 8010858:	460b      	mov	r3, r1
 801085a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801085c:	2300      	movs	r3, #0
 801085e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010860:	2300      	movs	r3, #0
 8010862:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801086a:	7af9      	ldrb	r1, [r7, #11]
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	f7f2 f9cf 	bl	8002c12 <HAL_PCD_EP_Transmit>
 8010874:	4603      	mov	r3, r0
 8010876:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010878:	7dbb      	ldrb	r3, [r7, #22]
 801087a:	2b03      	cmp	r3, #3
 801087c:	d816      	bhi.n	80108ac <USBD_LL_Transmit+0x60>
 801087e:	a201      	add	r2, pc, #4	; (adr r2, 8010884 <USBD_LL_Transmit+0x38>)
 8010880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010884:	08010895 	.word	0x08010895
 8010888:	0801089b 	.word	0x0801089b
 801088c:	080108a1 	.word	0x080108a1
 8010890:	080108a7 	.word	0x080108a7
    case HAL_OK :
      usb_status = USBD_OK;
 8010894:	2300      	movs	r3, #0
 8010896:	75fb      	strb	r3, [r7, #23]
    break;
 8010898:	e00b      	b.n	80108b2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801089a:	2303      	movs	r3, #3
 801089c:	75fb      	strb	r3, [r7, #23]
    break;
 801089e:	e008      	b.n	80108b2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108a0:	2301      	movs	r3, #1
 80108a2:	75fb      	strb	r3, [r7, #23]
    break;
 80108a4:	e005      	b.n	80108b2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108a6:	2303      	movs	r3, #3
 80108a8:	75fb      	strb	r3, [r7, #23]
    break;
 80108aa:	e002      	b.n	80108b2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80108ac:	2303      	movs	r3, #3
 80108ae:	75fb      	strb	r3, [r7, #23]
    break;
 80108b0:	bf00      	nop
  }
  return usb_status;
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3718      	adds	r7, #24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b086      	sub	sp, #24
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	607a      	str	r2, [r7, #4]
 80108c6:	603b      	str	r3, [r7, #0]
 80108c8:	460b      	mov	r3, r1
 80108ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108d0:	2300      	movs	r3, #0
 80108d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80108da:	7af9      	ldrb	r1, [r7, #11]
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	f7f2 f941 	bl	8002b66 <HAL_PCD_EP_Receive>
 80108e4:	4603      	mov	r3, r0
 80108e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80108e8:	7dbb      	ldrb	r3, [r7, #22]
 80108ea:	2b03      	cmp	r3, #3
 80108ec:	d816      	bhi.n	801091c <USBD_LL_PrepareReceive+0x60>
 80108ee:	a201      	add	r2, pc, #4	; (adr r2, 80108f4 <USBD_LL_PrepareReceive+0x38>)
 80108f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f4:	08010905 	.word	0x08010905
 80108f8:	0801090b 	.word	0x0801090b
 80108fc:	08010911 	.word	0x08010911
 8010900:	08010917 	.word	0x08010917
    case HAL_OK :
      usb_status = USBD_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	75fb      	strb	r3, [r7, #23]
    break;
 8010908:	e00b      	b.n	8010922 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801090a:	2303      	movs	r3, #3
 801090c:	75fb      	strb	r3, [r7, #23]
    break;
 801090e:	e008      	b.n	8010922 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010910:	2301      	movs	r3, #1
 8010912:	75fb      	strb	r3, [r7, #23]
    break;
 8010914:	e005      	b.n	8010922 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010916:	2303      	movs	r3, #3
 8010918:	75fb      	strb	r3, [r7, #23]
    break;
 801091a:	e002      	b.n	8010922 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801091c:	2303      	movs	r3, #3
 801091e:	75fb      	strb	r3, [r7, #23]
    break;
 8010920:	bf00      	nop
  }
  return usb_status;
 8010922:	7dfb      	ldrb	r3, [r7, #23]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3718      	adds	r7, #24
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	460b      	mov	r3, r1
 8010936:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801093e:	78fa      	ldrb	r2, [r7, #3]
 8010940:	4611      	mov	r1, r2
 8010942:	4618      	mov	r0, r3
 8010944:	f7f2 f94d 	bl	8002be2 <HAL_PCD_EP_GetRxCount>
 8010948:	4603      	mov	r3, r0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
	...

08010954 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	460b      	mov	r3, r1
 801095e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010960:	78fb      	ldrb	r3, [r7, #3]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d002      	beq.n	801096c <HAL_PCDEx_LPM_Callback+0x18>
 8010966:	2b01      	cmp	r3, #1
 8010968:	d01f      	beq.n	80109aa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801096a:	e03b      	b.n	80109e4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6a1b      	ldr	r3, [r3, #32]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d007      	beq.n	8010984 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010974:	f000 f854 	bl	8010a20 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010978:	4b1c      	ldr	r3, [pc, #112]	; (80109ec <HAL_PCDEx_LPM_Callback+0x98>)
 801097a:	691b      	ldr	r3, [r3, #16]
 801097c:	4a1b      	ldr	r2, [pc, #108]	; (80109ec <HAL_PCDEx_LPM_Callback+0x98>)
 801097e:	f023 0306 	bic.w	r3, r3, #6
 8010982:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	6812      	ldr	r2, [r2, #0]
 8010992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010996:	f023 0301 	bic.w	r3, r3, #1
 801099a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7fb fba2 	bl	800c0ec <USBD_LL_Resume>
    break;
 80109a8:	e01c      	b.n	80109e4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	6812      	ldr	r2, [r2, #0]
 80109b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109bc:	f043 0301 	orr.w	r3, r3, #1
 80109c0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fb fb79 	bl	800c0c0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d005      	beq.n	80109e2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109d6:	4b05      	ldr	r3, [pc, #20]	; (80109ec <HAL_PCDEx_LPM_Callback+0x98>)
 80109d8:	691b      	ldr	r3, [r3, #16]
 80109da:	4a04      	ldr	r2, [pc, #16]	; (80109ec <HAL_PCDEx_LPM_Callback+0x98>)
 80109dc:	f043 0306 	orr.w	r3, r3, #6
 80109e0:	6113      	str	r3, [r2, #16]
    break;
 80109e2:	bf00      	nop
}
 80109e4:	bf00      	nop
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	e000ed00 	.word	0xe000ed00

080109f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80109f8:	4b03      	ldr	r3, [pc, #12]	; (8010a08 <USBD_static_malloc+0x18>)
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	20002388 	.word	0x20002388

08010a0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]

}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010a24:	f7ef ff36 	bl	8000894 <SystemClock_Config>
}
 8010a28:	bf00      	nop
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <__libc_init_array>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	4d0d      	ldr	r5, [pc, #52]	; (8010a64 <__libc_init_array+0x38>)
 8010a30:	4c0d      	ldr	r4, [pc, #52]	; (8010a68 <__libc_init_array+0x3c>)
 8010a32:	1b64      	subs	r4, r4, r5
 8010a34:	10a4      	asrs	r4, r4, #2
 8010a36:	2600      	movs	r6, #0
 8010a38:	42a6      	cmp	r6, r4
 8010a3a:	d109      	bne.n	8010a50 <__libc_init_array+0x24>
 8010a3c:	4d0b      	ldr	r5, [pc, #44]	; (8010a6c <__libc_init_array+0x40>)
 8010a3e:	4c0c      	ldr	r4, [pc, #48]	; (8010a70 <__libc_init_array+0x44>)
 8010a40:	f000 ffec 	bl	8011a1c <_init>
 8010a44:	1b64      	subs	r4, r4, r5
 8010a46:	10a4      	asrs	r4, r4, #2
 8010a48:	2600      	movs	r6, #0
 8010a4a:	42a6      	cmp	r6, r4
 8010a4c:	d105      	bne.n	8010a5a <__libc_init_array+0x2e>
 8010a4e:	bd70      	pop	{r4, r5, r6, pc}
 8010a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a54:	4798      	blx	r3
 8010a56:	3601      	adds	r6, #1
 8010a58:	e7ee      	b.n	8010a38 <__libc_init_array+0xc>
 8010a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a5e:	4798      	blx	r3
 8010a60:	3601      	adds	r6, #1
 8010a62:	e7f2      	b.n	8010a4a <__libc_init_array+0x1e>
 8010a64:	08011cec 	.word	0x08011cec
 8010a68:	08011cec 	.word	0x08011cec
 8010a6c:	08011cec 	.word	0x08011cec
 8010a70:	08011cf0 	.word	0x08011cf0

08010a74 <memset>:
 8010a74:	4402      	add	r2, r0
 8010a76:	4603      	mov	r3, r0
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d100      	bne.n	8010a7e <memset+0xa>
 8010a7c:	4770      	bx	lr
 8010a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8010a82:	e7f9      	b.n	8010a78 <memset+0x4>

08010a84 <iprintf>:
 8010a84:	b40f      	push	{r0, r1, r2, r3}
 8010a86:	4b0a      	ldr	r3, [pc, #40]	; (8010ab0 <iprintf+0x2c>)
 8010a88:	b513      	push	{r0, r1, r4, lr}
 8010a8a:	681c      	ldr	r4, [r3, #0]
 8010a8c:	b124      	cbz	r4, 8010a98 <iprintf+0x14>
 8010a8e:	69a3      	ldr	r3, [r4, #24]
 8010a90:	b913      	cbnz	r3, 8010a98 <iprintf+0x14>
 8010a92:	4620      	mov	r0, r4
 8010a94:	f000 f866 	bl	8010b64 <__sinit>
 8010a98:	ab05      	add	r3, sp, #20
 8010a9a:	9a04      	ldr	r2, [sp, #16]
 8010a9c:	68a1      	ldr	r1, [r4, #8]
 8010a9e:	9301      	str	r3, [sp, #4]
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f000 f9bd 	bl	8010e20 <_vfiprintf_r>
 8010aa6:	b002      	add	sp, #8
 8010aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aac:	b004      	add	sp, #16
 8010aae:	4770      	bx	lr
 8010ab0:	20000190 	.word	0x20000190

08010ab4 <std>:
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	b510      	push	{r4, lr}
 8010ab8:	4604      	mov	r4, r0
 8010aba:	e9c0 3300 	strd	r3, r3, [r0]
 8010abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ac2:	6083      	str	r3, [r0, #8]
 8010ac4:	8181      	strh	r1, [r0, #12]
 8010ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8010ac8:	81c2      	strh	r2, [r0, #14]
 8010aca:	6183      	str	r3, [r0, #24]
 8010acc:	4619      	mov	r1, r3
 8010ace:	2208      	movs	r2, #8
 8010ad0:	305c      	adds	r0, #92	; 0x5c
 8010ad2:	f7ff ffcf 	bl	8010a74 <memset>
 8010ad6:	4b05      	ldr	r3, [pc, #20]	; (8010aec <std+0x38>)
 8010ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8010ada:	4b05      	ldr	r3, [pc, #20]	; (8010af0 <std+0x3c>)
 8010adc:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ade:	4b05      	ldr	r3, [pc, #20]	; (8010af4 <std+0x40>)
 8010ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ae2:	4b05      	ldr	r3, [pc, #20]	; (8010af8 <std+0x44>)
 8010ae4:	6224      	str	r4, [r4, #32]
 8010ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8010ae8:	bd10      	pop	{r4, pc}
 8010aea:	bf00      	nop
 8010aec:	080113c9 	.word	0x080113c9
 8010af0:	080113eb 	.word	0x080113eb
 8010af4:	08011423 	.word	0x08011423
 8010af8:	08011447 	.word	0x08011447

08010afc <_cleanup_r>:
 8010afc:	4901      	ldr	r1, [pc, #4]	; (8010b04 <_cleanup_r+0x8>)
 8010afe:	f000 b8af 	b.w	8010c60 <_fwalk_reent>
 8010b02:	bf00      	nop
 8010b04:	08011721 	.word	0x08011721

08010b08 <__sfmoreglue>:
 8010b08:	b570      	push	{r4, r5, r6, lr}
 8010b0a:	2268      	movs	r2, #104	; 0x68
 8010b0c:	1e4d      	subs	r5, r1, #1
 8010b0e:	4355      	muls	r5, r2
 8010b10:	460e      	mov	r6, r1
 8010b12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b16:	f000 f8e5 	bl	8010ce4 <_malloc_r>
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	b140      	cbz	r0, 8010b30 <__sfmoreglue+0x28>
 8010b1e:	2100      	movs	r1, #0
 8010b20:	e9c0 1600 	strd	r1, r6, [r0]
 8010b24:	300c      	adds	r0, #12
 8010b26:	60a0      	str	r0, [r4, #8]
 8010b28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b2c:	f7ff ffa2 	bl	8010a74 <memset>
 8010b30:	4620      	mov	r0, r4
 8010b32:	bd70      	pop	{r4, r5, r6, pc}

08010b34 <__sfp_lock_acquire>:
 8010b34:	4801      	ldr	r0, [pc, #4]	; (8010b3c <__sfp_lock_acquire+0x8>)
 8010b36:	f000 b8b3 	b.w	8010ca0 <__retarget_lock_acquire_recursive>
 8010b3a:	bf00      	nop
 8010b3c:	200025a9 	.word	0x200025a9

08010b40 <__sfp_lock_release>:
 8010b40:	4801      	ldr	r0, [pc, #4]	; (8010b48 <__sfp_lock_release+0x8>)
 8010b42:	f000 b8ae 	b.w	8010ca2 <__retarget_lock_release_recursive>
 8010b46:	bf00      	nop
 8010b48:	200025a9 	.word	0x200025a9

08010b4c <__sinit_lock_acquire>:
 8010b4c:	4801      	ldr	r0, [pc, #4]	; (8010b54 <__sinit_lock_acquire+0x8>)
 8010b4e:	f000 b8a7 	b.w	8010ca0 <__retarget_lock_acquire_recursive>
 8010b52:	bf00      	nop
 8010b54:	200025aa 	.word	0x200025aa

08010b58 <__sinit_lock_release>:
 8010b58:	4801      	ldr	r0, [pc, #4]	; (8010b60 <__sinit_lock_release+0x8>)
 8010b5a:	f000 b8a2 	b.w	8010ca2 <__retarget_lock_release_recursive>
 8010b5e:	bf00      	nop
 8010b60:	200025aa 	.word	0x200025aa

08010b64 <__sinit>:
 8010b64:	b510      	push	{r4, lr}
 8010b66:	4604      	mov	r4, r0
 8010b68:	f7ff fff0 	bl	8010b4c <__sinit_lock_acquire>
 8010b6c:	69a3      	ldr	r3, [r4, #24]
 8010b6e:	b11b      	cbz	r3, 8010b78 <__sinit+0x14>
 8010b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b74:	f7ff bff0 	b.w	8010b58 <__sinit_lock_release>
 8010b78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b7c:	6523      	str	r3, [r4, #80]	; 0x50
 8010b7e:	4b13      	ldr	r3, [pc, #76]	; (8010bcc <__sinit+0x68>)
 8010b80:	4a13      	ldr	r2, [pc, #76]	; (8010bd0 <__sinit+0x6c>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b86:	42a3      	cmp	r3, r4
 8010b88:	bf04      	itt	eq
 8010b8a:	2301      	moveq	r3, #1
 8010b8c:	61a3      	streq	r3, [r4, #24]
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f000 f820 	bl	8010bd4 <__sfp>
 8010b94:	6060      	str	r0, [r4, #4]
 8010b96:	4620      	mov	r0, r4
 8010b98:	f000 f81c 	bl	8010bd4 <__sfp>
 8010b9c:	60a0      	str	r0, [r4, #8]
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f000 f818 	bl	8010bd4 <__sfp>
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	60e0      	str	r0, [r4, #12]
 8010ba8:	2104      	movs	r1, #4
 8010baa:	6860      	ldr	r0, [r4, #4]
 8010bac:	f7ff ff82 	bl	8010ab4 <std>
 8010bb0:	68a0      	ldr	r0, [r4, #8]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	2109      	movs	r1, #9
 8010bb6:	f7ff ff7d 	bl	8010ab4 <std>
 8010bba:	68e0      	ldr	r0, [r4, #12]
 8010bbc:	2202      	movs	r2, #2
 8010bbe:	2112      	movs	r1, #18
 8010bc0:	f7ff ff78 	bl	8010ab4 <std>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	61a3      	str	r3, [r4, #24]
 8010bc8:	e7d2      	b.n	8010b70 <__sinit+0xc>
 8010bca:	bf00      	nop
 8010bcc:	08011c4c 	.word	0x08011c4c
 8010bd0:	08010afd 	.word	0x08010afd

08010bd4 <__sfp>:
 8010bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd6:	4607      	mov	r7, r0
 8010bd8:	f7ff ffac 	bl	8010b34 <__sfp_lock_acquire>
 8010bdc:	4b1e      	ldr	r3, [pc, #120]	; (8010c58 <__sfp+0x84>)
 8010bde:	681e      	ldr	r6, [r3, #0]
 8010be0:	69b3      	ldr	r3, [r6, #24]
 8010be2:	b913      	cbnz	r3, 8010bea <__sfp+0x16>
 8010be4:	4630      	mov	r0, r6
 8010be6:	f7ff ffbd 	bl	8010b64 <__sinit>
 8010bea:	3648      	adds	r6, #72	; 0x48
 8010bec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010bf0:	3b01      	subs	r3, #1
 8010bf2:	d503      	bpl.n	8010bfc <__sfp+0x28>
 8010bf4:	6833      	ldr	r3, [r6, #0]
 8010bf6:	b30b      	cbz	r3, 8010c3c <__sfp+0x68>
 8010bf8:	6836      	ldr	r6, [r6, #0]
 8010bfa:	e7f7      	b.n	8010bec <__sfp+0x18>
 8010bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c00:	b9d5      	cbnz	r5, 8010c38 <__sfp+0x64>
 8010c02:	4b16      	ldr	r3, [pc, #88]	; (8010c5c <__sfp+0x88>)
 8010c04:	60e3      	str	r3, [r4, #12]
 8010c06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c0a:	6665      	str	r5, [r4, #100]	; 0x64
 8010c0c:	f000 f847 	bl	8010c9e <__retarget_lock_init_recursive>
 8010c10:	f7ff ff96 	bl	8010b40 <__sfp_lock_release>
 8010c14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c1c:	6025      	str	r5, [r4, #0]
 8010c1e:	61a5      	str	r5, [r4, #24]
 8010c20:	2208      	movs	r2, #8
 8010c22:	4629      	mov	r1, r5
 8010c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c28:	f7ff ff24 	bl	8010a74 <memset>
 8010c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c34:	4620      	mov	r0, r4
 8010c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c38:	3468      	adds	r4, #104	; 0x68
 8010c3a:	e7d9      	b.n	8010bf0 <__sfp+0x1c>
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	4638      	mov	r0, r7
 8010c40:	f7ff ff62 	bl	8010b08 <__sfmoreglue>
 8010c44:	4604      	mov	r4, r0
 8010c46:	6030      	str	r0, [r6, #0]
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d1d5      	bne.n	8010bf8 <__sfp+0x24>
 8010c4c:	f7ff ff78 	bl	8010b40 <__sfp_lock_release>
 8010c50:	230c      	movs	r3, #12
 8010c52:	603b      	str	r3, [r7, #0]
 8010c54:	e7ee      	b.n	8010c34 <__sfp+0x60>
 8010c56:	bf00      	nop
 8010c58:	08011c4c 	.word	0x08011c4c
 8010c5c:	ffff0001 	.word	0xffff0001

08010c60 <_fwalk_reent>:
 8010c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c64:	4606      	mov	r6, r0
 8010c66:	4688      	mov	r8, r1
 8010c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c6c:	2700      	movs	r7, #0
 8010c6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c72:	f1b9 0901 	subs.w	r9, r9, #1
 8010c76:	d505      	bpl.n	8010c84 <_fwalk_reent+0x24>
 8010c78:	6824      	ldr	r4, [r4, #0]
 8010c7a:	2c00      	cmp	r4, #0
 8010c7c:	d1f7      	bne.n	8010c6e <_fwalk_reent+0xe>
 8010c7e:	4638      	mov	r0, r7
 8010c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c84:	89ab      	ldrh	r3, [r5, #12]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d907      	bls.n	8010c9a <_fwalk_reent+0x3a>
 8010c8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	d003      	beq.n	8010c9a <_fwalk_reent+0x3a>
 8010c92:	4629      	mov	r1, r5
 8010c94:	4630      	mov	r0, r6
 8010c96:	47c0      	blx	r8
 8010c98:	4307      	orrs	r7, r0
 8010c9a:	3568      	adds	r5, #104	; 0x68
 8010c9c:	e7e9      	b.n	8010c72 <_fwalk_reent+0x12>

08010c9e <__retarget_lock_init_recursive>:
 8010c9e:	4770      	bx	lr

08010ca0 <__retarget_lock_acquire_recursive>:
 8010ca0:	4770      	bx	lr

08010ca2 <__retarget_lock_release_recursive>:
 8010ca2:	4770      	bx	lr

08010ca4 <sbrk_aligned>:
 8010ca4:	b570      	push	{r4, r5, r6, lr}
 8010ca6:	4e0e      	ldr	r6, [pc, #56]	; (8010ce0 <sbrk_aligned+0x3c>)
 8010ca8:	460c      	mov	r4, r1
 8010caa:	6831      	ldr	r1, [r6, #0]
 8010cac:	4605      	mov	r5, r0
 8010cae:	b911      	cbnz	r1, 8010cb6 <sbrk_aligned+0x12>
 8010cb0:	f000 fb7a 	bl	80113a8 <_sbrk_r>
 8010cb4:	6030      	str	r0, [r6, #0]
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f000 fb75 	bl	80113a8 <_sbrk_r>
 8010cbe:	1c43      	adds	r3, r0, #1
 8010cc0:	d00a      	beq.n	8010cd8 <sbrk_aligned+0x34>
 8010cc2:	1cc4      	adds	r4, r0, #3
 8010cc4:	f024 0403 	bic.w	r4, r4, #3
 8010cc8:	42a0      	cmp	r0, r4
 8010cca:	d007      	beq.n	8010cdc <sbrk_aligned+0x38>
 8010ccc:	1a21      	subs	r1, r4, r0
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f000 fb6a 	bl	80113a8 <_sbrk_r>
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d101      	bne.n	8010cdc <sbrk_aligned+0x38>
 8010cd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010cdc:	4620      	mov	r0, r4
 8010cde:	bd70      	pop	{r4, r5, r6, pc}
 8010ce0:	200025b0 	.word	0x200025b0

08010ce4 <_malloc_r>:
 8010ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce8:	1ccd      	adds	r5, r1, #3
 8010cea:	f025 0503 	bic.w	r5, r5, #3
 8010cee:	3508      	adds	r5, #8
 8010cf0:	2d0c      	cmp	r5, #12
 8010cf2:	bf38      	it	cc
 8010cf4:	250c      	movcc	r5, #12
 8010cf6:	2d00      	cmp	r5, #0
 8010cf8:	4607      	mov	r7, r0
 8010cfa:	db01      	blt.n	8010d00 <_malloc_r+0x1c>
 8010cfc:	42a9      	cmp	r1, r5
 8010cfe:	d905      	bls.n	8010d0c <_malloc_r+0x28>
 8010d00:	230c      	movs	r3, #12
 8010d02:	603b      	str	r3, [r7, #0]
 8010d04:	2600      	movs	r6, #0
 8010d06:	4630      	mov	r0, r6
 8010d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d0c:	4e2e      	ldr	r6, [pc, #184]	; (8010dc8 <_malloc_r+0xe4>)
 8010d0e:	f000 fdbb 	bl	8011888 <__malloc_lock>
 8010d12:	6833      	ldr	r3, [r6, #0]
 8010d14:	461c      	mov	r4, r3
 8010d16:	bb34      	cbnz	r4, 8010d66 <_malloc_r+0x82>
 8010d18:	4629      	mov	r1, r5
 8010d1a:	4638      	mov	r0, r7
 8010d1c:	f7ff ffc2 	bl	8010ca4 <sbrk_aligned>
 8010d20:	1c43      	adds	r3, r0, #1
 8010d22:	4604      	mov	r4, r0
 8010d24:	d14d      	bne.n	8010dc2 <_malloc_r+0xde>
 8010d26:	6834      	ldr	r4, [r6, #0]
 8010d28:	4626      	mov	r6, r4
 8010d2a:	2e00      	cmp	r6, #0
 8010d2c:	d140      	bne.n	8010db0 <_malloc_r+0xcc>
 8010d2e:	6823      	ldr	r3, [r4, #0]
 8010d30:	4631      	mov	r1, r6
 8010d32:	4638      	mov	r0, r7
 8010d34:	eb04 0803 	add.w	r8, r4, r3
 8010d38:	f000 fb36 	bl	80113a8 <_sbrk_r>
 8010d3c:	4580      	cmp	r8, r0
 8010d3e:	d13a      	bne.n	8010db6 <_malloc_r+0xd2>
 8010d40:	6821      	ldr	r1, [r4, #0]
 8010d42:	3503      	adds	r5, #3
 8010d44:	1a6d      	subs	r5, r5, r1
 8010d46:	f025 0503 	bic.w	r5, r5, #3
 8010d4a:	3508      	adds	r5, #8
 8010d4c:	2d0c      	cmp	r5, #12
 8010d4e:	bf38      	it	cc
 8010d50:	250c      	movcc	r5, #12
 8010d52:	4629      	mov	r1, r5
 8010d54:	4638      	mov	r0, r7
 8010d56:	f7ff ffa5 	bl	8010ca4 <sbrk_aligned>
 8010d5a:	3001      	adds	r0, #1
 8010d5c:	d02b      	beq.n	8010db6 <_malloc_r+0xd2>
 8010d5e:	6823      	ldr	r3, [r4, #0]
 8010d60:	442b      	add	r3, r5
 8010d62:	6023      	str	r3, [r4, #0]
 8010d64:	e00e      	b.n	8010d84 <_malloc_r+0xa0>
 8010d66:	6822      	ldr	r2, [r4, #0]
 8010d68:	1b52      	subs	r2, r2, r5
 8010d6a:	d41e      	bmi.n	8010daa <_malloc_r+0xc6>
 8010d6c:	2a0b      	cmp	r2, #11
 8010d6e:	d916      	bls.n	8010d9e <_malloc_r+0xba>
 8010d70:	1961      	adds	r1, r4, r5
 8010d72:	42a3      	cmp	r3, r4
 8010d74:	6025      	str	r5, [r4, #0]
 8010d76:	bf18      	it	ne
 8010d78:	6059      	strne	r1, [r3, #4]
 8010d7a:	6863      	ldr	r3, [r4, #4]
 8010d7c:	bf08      	it	eq
 8010d7e:	6031      	streq	r1, [r6, #0]
 8010d80:	5162      	str	r2, [r4, r5]
 8010d82:	604b      	str	r3, [r1, #4]
 8010d84:	4638      	mov	r0, r7
 8010d86:	f104 060b 	add.w	r6, r4, #11
 8010d8a:	f000 fd83 	bl	8011894 <__malloc_unlock>
 8010d8e:	f026 0607 	bic.w	r6, r6, #7
 8010d92:	1d23      	adds	r3, r4, #4
 8010d94:	1af2      	subs	r2, r6, r3
 8010d96:	d0b6      	beq.n	8010d06 <_malloc_r+0x22>
 8010d98:	1b9b      	subs	r3, r3, r6
 8010d9a:	50a3      	str	r3, [r4, r2]
 8010d9c:	e7b3      	b.n	8010d06 <_malloc_r+0x22>
 8010d9e:	6862      	ldr	r2, [r4, #4]
 8010da0:	42a3      	cmp	r3, r4
 8010da2:	bf0c      	ite	eq
 8010da4:	6032      	streq	r2, [r6, #0]
 8010da6:	605a      	strne	r2, [r3, #4]
 8010da8:	e7ec      	b.n	8010d84 <_malloc_r+0xa0>
 8010daa:	4623      	mov	r3, r4
 8010dac:	6864      	ldr	r4, [r4, #4]
 8010dae:	e7b2      	b.n	8010d16 <_malloc_r+0x32>
 8010db0:	4634      	mov	r4, r6
 8010db2:	6876      	ldr	r6, [r6, #4]
 8010db4:	e7b9      	b.n	8010d2a <_malloc_r+0x46>
 8010db6:	230c      	movs	r3, #12
 8010db8:	603b      	str	r3, [r7, #0]
 8010dba:	4638      	mov	r0, r7
 8010dbc:	f000 fd6a 	bl	8011894 <__malloc_unlock>
 8010dc0:	e7a1      	b.n	8010d06 <_malloc_r+0x22>
 8010dc2:	6025      	str	r5, [r4, #0]
 8010dc4:	e7de      	b.n	8010d84 <_malloc_r+0xa0>
 8010dc6:	bf00      	nop
 8010dc8:	200025ac 	.word	0x200025ac

08010dcc <__sfputc_r>:
 8010dcc:	6893      	ldr	r3, [r2, #8]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	b410      	push	{r4}
 8010dd4:	6093      	str	r3, [r2, #8]
 8010dd6:	da08      	bge.n	8010dea <__sfputc_r+0x1e>
 8010dd8:	6994      	ldr	r4, [r2, #24]
 8010dda:	42a3      	cmp	r3, r4
 8010ddc:	db01      	blt.n	8010de2 <__sfputc_r+0x16>
 8010dde:	290a      	cmp	r1, #10
 8010de0:	d103      	bne.n	8010dea <__sfputc_r+0x1e>
 8010de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010de6:	f000 bb33 	b.w	8011450 <__swbuf_r>
 8010dea:	6813      	ldr	r3, [r2, #0]
 8010dec:	1c58      	adds	r0, r3, #1
 8010dee:	6010      	str	r0, [r2, #0]
 8010df0:	7019      	strb	r1, [r3, #0]
 8010df2:	4608      	mov	r0, r1
 8010df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df8:	4770      	bx	lr

08010dfa <__sfputs_r>:
 8010dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	460f      	mov	r7, r1
 8010e00:	4614      	mov	r4, r2
 8010e02:	18d5      	adds	r5, r2, r3
 8010e04:	42ac      	cmp	r4, r5
 8010e06:	d101      	bne.n	8010e0c <__sfputs_r+0x12>
 8010e08:	2000      	movs	r0, #0
 8010e0a:	e007      	b.n	8010e1c <__sfputs_r+0x22>
 8010e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e10:	463a      	mov	r2, r7
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7ff ffda 	bl	8010dcc <__sfputc_r>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	d1f3      	bne.n	8010e04 <__sfputs_r+0xa>
 8010e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e20 <_vfiprintf_r>:
 8010e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e24:	460d      	mov	r5, r1
 8010e26:	b09d      	sub	sp, #116	; 0x74
 8010e28:	4614      	mov	r4, r2
 8010e2a:	4698      	mov	r8, r3
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	b118      	cbz	r0, 8010e38 <_vfiprintf_r+0x18>
 8010e30:	6983      	ldr	r3, [r0, #24]
 8010e32:	b90b      	cbnz	r3, 8010e38 <_vfiprintf_r+0x18>
 8010e34:	f7ff fe96 	bl	8010b64 <__sinit>
 8010e38:	4b89      	ldr	r3, [pc, #548]	; (8011060 <_vfiprintf_r+0x240>)
 8010e3a:	429d      	cmp	r5, r3
 8010e3c:	d11b      	bne.n	8010e76 <_vfiprintf_r+0x56>
 8010e3e:	6875      	ldr	r5, [r6, #4]
 8010e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e42:	07d9      	lsls	r1, r3, #31
 8010e44:	d405      	bmi.n	8010e52 <_vfiprintf_r+0x32>
 8010e46:	89ab      	ldrh	r3, [r5, #12]
 8010e48:	059a      	lsls	r2, r3, #22
 8010e4a:	d402      	bmi.n	8010e52 <_vfiprintf_r+0x32>
 8010e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e4e:	f7ff ff27 	bl	8010ca0 <__retarget_lock_acquire_recursive>
 8010e52:	89ab      	ldrh	r3, [r5, #12]
 8010e54:	071b      	lsls	r3, r3, #28
 8010e56:	d501      	bpl.n	8010e5c <_vfiprintf_r+0x3c>
 8010e58:	692b      	ldr	r3, [r5, #16]
 8010e5a:	b9eb      	cbnz	r3, 8010e98 <_vfiprintf_r+0x78>
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	4630      	mov	r0, r6
 8010e60:	f000 fb5a 	bl	8011518 <__swsetup_r>
 8010e64:	b1c0      	cbz	r0, 8010e98 <_vfiprintf_r+0x78>
 8010e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e68:	07dc      	lsls	r4, r3, #31
 8010e6a:	d50e      	bpl.n	8010e8a <_vfiprintf_r+0x6a>
 8010e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e70:	b01d      	add	sp, #116	; 0x74
 8010e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e76:	4b7b      	ldr	r3, [pc, #492]	; (8011064 <_vfiprintf_r+0x244>)
 8010e78:	429d      	cmp	r5, r3
 8010e7a:	d101      	bne.n	8010e80 <_vfiprintf_r+0x60>
 8010e7c:	68b5      	ldr	r5, [r6, #8]
 8010e7e:	e7df      	b.n	8010e40 <_vfiprintf_r+0x20>
 8010e80:	4b79      	ldr	r3, [pc, #484]	; (8011068 <_vfiprintf_r+0x248>)
 8010e82:	429d      	cmp	r5, r3
 8010e84:	bf08      	it	eq
 8010e86:	68f5      	ldreq	r5, [r6, #12]
 8010e88:	e7da      	b.n	8010e40 <_vfiprintf_r+0x20>
 8010e8a:	89ab      	ldrh	r3, [r5, #12]
 8010e8c:	0598      	lsls	r0, r3, #22
 8010e8e:	d4ed      	bmi.n	8010e6c <_vfiprintf_r+0x4c>
 8010e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e92:	f7ff ff06 	bl	8010ca2 <__retarget_lock_release_recursive>
 8010e96:	e7e9      	b.n	8010e6c <_vfiprintf_r+0x4c>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9c:	2320      	movs	r3, #32
 8010e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ea6:	2330      	movs	r3, #48	; 0x30
 8010ea8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801106c <_vfiprintf_r+0x24c>
 8010eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010eb0:	f04f 0901 	mov.w	r9, #1
 8010eb4:	4623      	mov	r3, r4
 8010eb6:	469a      	mov	sl, r3
 8010eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ebc:	b10a      	cbz	r2, 8010ec2 <_vfiprintf_r+0xa2>
 8010ebe:	2a25      	cmp	r2, #37	; 0x25
 8010ec0:	d1f9      	bne.n	8010eb6 <_vfiprintf_r+0x96>
 8010ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8010ec6:	d00b      	beq.n	8010ee0 <_vfiprintf_r+0xc0>
 8010ec8:	465b      	mov	r3, fp
 8010eca:	4622      	mov	r2, r4
 8010ecc:	4629      	mov	r1, r5
 8010ece:	4630      	mov	r0, r6
 8010ed0:	f7ff ff93 	bl	8010dfa <__sfputs_r>
 8010ed4:	3001      	adds	r0, #1
 8010ed6:	f000 80aa 	beq.w	801102e <_vfiprintf_r+0x20e>
 8010eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010edc:	445a      	add	r2, fp
 8010ede:	9209      	str	r2, [sp, #36]	; 0x24
 8010ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	f000 80a2 	beq.w	801102e <_vfiprintf_r+0x20e>
 8010eea:	2300      	movs	r3, #0
 8010eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ef4:	f10a 0a01 	add.w	sl, sl, #1
 8010ef8:	9304      	str	r3, [sp, #16]
 8010efa:	9307      	str	r3, [sp, #28]
 8010efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f00:	931a      	str	r3, [sp, #104]	; 0x68
 8010f02:	4654      	mov	r4, sl
 8010f04:	2205      	movs	r2, #5
 8010f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f0a:	4858      	ldr	r0, [pc, #352]	; (801106c <_vfiprintf_r+0x24c>)
 8010f0c:	f7ef f980 	bl	8000210 <memchr>
 8010f10:	9a04      	ldr	r2, [sp, #16]
 8010f12:	b9d8      	cbnz	r0, 8010f4c <_vfiprintf_r+0x12c>
 8010f14:	06d1      	lsls	r1, r2, #27
 8010f16:	bf44      	itt	mi
 8010f18:	2320      	movmi	r3, #32
 8010f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f1e:	0713      	lsls	r3, r2, #28
 8010f20:	bf44      	itt	mi
 8010f22:	232b      	movmi	r3, #43	; 0x2b
 8010f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f28:	f89a 3000 	ldrb.w	r3, [sl]
 8010f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8010f2e:	d015      	beq.n	8010f5c <_vfiprintf_r+0x13c>
 8010f30:	9a07      	ldr	r2, [sp, #28]
 8010f32:	4654      	mov	r4, sl
 8010f34:	2000      	movs	r0, #0
 8010f36:	f04f 0c0a 	mov.w	ip, #10
 8010f3a:	4621      	mov	r1, r4
 8010f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f40:	3b30      	subs	r3, #48	; 0x30
 8010f42:	2b09      	cmp	r3, #9
 8010f44:	d94e      	bls.n	8010fe4 <_vfiprintf_r+0x1c4>
 8010f46:	b1b0      	cbz	r0, 8010f76 <_vfiprintf_r+0x156>
 8010f48:	9207      	str	r2, [sp, #28]
 8010f4a:	e014      	b.n	8010f76 <_vfiprintf_r+0x156>
 8010f4c:	eba0 0308 	sub.w	r3, r0, r8
 8010f50:	fa09 f303 	lsl.w	r3, r9, r3
 8010f54:	4313      	orrs	r3, r2
 8010f56:	9304      	str	r3, [sp, #16]
 8010f58:	46a2      	mov	sl, r4
 8010f5a:	e7d2      	b.n	8010f02 <_vfiprintf_r+0xe2>
 8010f5c:	9b03      	ldr	r3, [sp, #12]
 8010f5e:	1d19      	adds	r1, r3, #4
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	9103      	str	r1, [sp, #12]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	bfbb      	ittet	lt
 8010f68:	425b      	neglt	r3, r3
 8010f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8010f6e:	9307      	strge	r3, [sp, #28]
 8010f70:	9307      	strlt	r3, [sp, #28]
 8010f72:	bfb8      	it	lt
 8010f74:	9204      	strlt	r2, [sp, #16]
 8010f76:	7823      	ldrb	r3, [r4, #0]
 8010f78:	2b2e      	cmp	r3, #46	; 0x2e
 8010f7a:	d10c      	bne.n	8010f96 <_vfiprintf_r+0x176>
 8010f7c:	7863      	ldrb	r3, [r4, #1]
 8010f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8010f80:	d135      	bne.n	8010fee <_vfiprintf_r+0x1ce>
 8010f82:	9b03      	ldr	r3, [sp, #12]
 8010f84:	1d1a      	adds	r2, r3, #4
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	9203      	str	r2, [sp, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	bfb8      	it	lt
 8010f8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010f92:	3402      	adds	r4, #2
 8010f94:	9305      	str	r3, [sp, #20]
 8010f96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801107c <_vfiprintf_r+0x25c>
 8010f9a:	7821      	ldrb	r1, [r4, #0]
 8010f9c:	2203      	movs	r2, #3
 8010f9e:	4650      	mov	r0, sl
 8010fa0:	f7ef f936 	bl	8000210 <memchr>
 8010fa4:	b140      	cbz	r0, 8010fb8 <_vfiprintf_r+0x198>
 8010fa6:	2340      	movs	r3, #64	; 0x40
 8010fa8:	eba0 000a 	sub.w	r0, r0, sl
 8010fac:	fa03 f000 	lsl.w	r0, r3, r0
 8010fb0:	9b04      	ldr	r3, [sp, #16]
 8010fb2:	4303      	orrs	r3, r0
 8010fb4:	3401      	adds	r4, #1
 8010fb6:	9304      	str	r3, [sp, #16]
 8010fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fbc:	482c      	ldr	r0, [pc, #176]	; (8011070 <_vfiprintf_r+0x250>)
 8010fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fc2:	2206      	movs	r2, #6
 8010fc4:	f7ef f924 	bl	8000210 <memchr>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d03f      	beq.n	801104c <_vfiprintf_r+0x22c>
 8010fcc:	4b29      	ldr	r3, [pc, #164]	; (8011074 <_vfiprintf_r+0x254>)
 8010fce:	bb1b      	cbnz	r3, 8011018 <_vfiprintf_r+0x1f8>
 8010fd0:	9b03      	ldr	r3, [sp, #12]
 8010fd2:	3307      	adds	r3, #7
 8010fd4:	f023 0307 	bic.w	r3, r3, #7
 8010fd8:	3308      	adds	r3, #8
 8010fda:	9303      	str	r3, [sp, #12]
 8010fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fde:	443b      	add	r3, r7
 8010fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8010fe2:	e767      	b.n	8010eb4 <_vfiprintf_r+0x94>
 8010fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fe8:	460c      	mov	r4, r1
 8010fea:	2001      	movs	r0, #1
 8010fec:	e7a5      	b.n	8010f3a <_vfiprintf_r+0x11a>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	3401      	adds	r4, #1
 8010ff2:	9305      	str	r3, [sp, #20]
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	f04f 0c0a 	mov.w	ip, #10
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011000:	3a30      	subs	r2, #48	; 0x30
 8011002:	2a09      	cmp	r2, #9
 8011004:	d903      	bls.n	801100e <_vfiprintf_r+0x1ee>
 8011006:	2b00      	cmp	r3, #0
 8011008:	d0c5      	beq.n	8010f96 <_vfiprintf_r+0x176>
 801100a:	9105      	str	r1, [sp, #20]
 801100c:	e7c3      	b.n	8010f96 <_vfiprintf_r+0x176>
 801100e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011012:	4604      	mov	r4, r0
 8011014:	2301      	movs	r3, #1
 8011016:	e7f0      	b.n	8010ffa <_vfiprintf_r+0x1da>
 8011018:	ab03      	add	r3, sp, #12
 801101a:	9300      	str	r3, [sp, #0]
 801101c:	462a      	mov	r2, r5
 801101e:	4b16      	ldr	r3, [pc, #88]	; (8011078 <_vfiprintf_r+0x258>)
 8011020:	a904      	add	r1, sp, #16
 8011022:	4630      	mov	r0, r6
 8011024:	f3af 8000 	nop.w
 8011028:	4607      	mov	r7, r0
 801102a:	1c78      	adds	r0, r7, #1
 801102c:	d1d6      	bne.n	8010fdc <_vfiprintf_r+0x1bc>
 801102e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011030:	07d9      	lsls	r1, r3, #31
 8011032:	d405      	bmi.n	8011040 <_vfiprintf_r+0x220>
 8011034:	89ab      	ldrh	r3, [r5, #12]
 8011036:	059a      	lsls	r2, r3, #22
 8011038:	d402      	bmi.n	8011040 <_vfiprintf_r+0x220>
 801103a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801103c:	f7ff fe31 	bl	8010ca2 <__retarget_lock_release_recursive>
 8011040:	89ab      	ldrh	r3, [r5, #12]
 8011042:	065b      	lsls	r3, r3, #25
 8011044:	f53f af12 	bmi.w	8010e6c <_vfiprintf_r+0x4c>
 8011048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801104a:	e711      	b.n	8010e70 <_vfiprintf_r+0x50>
 801104c:	ab03      	add	r3, sp, #12
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	462a      	mov	r2, r5
 8011052:	4b09      	ldr	r3, [pc, #36]	; (8011078 <_vfiprintf_r+0x258>)
 8011054:	a904      	add	r1, sp, #16
 8011056:	4630      	mov	r0, r6
 8011058:	f000 f880 	bl	801115c <_printf_i>
 801105c:	e7e4      	b.n	8011028 <_vfiprintf_r+0x208>
 801105e:	bf00      	nop
 8011060:	08011c70 	.word	0x08011c70
 8011064:	08011c90 	.word	0x08011c90
 8011068:	08011c50 	.word	0x08011c50
 801106c:	08011cb0 	.word	0x08011cb0
 8011070:	08011cba 	.word	0x08011cba
 8011074:	00000000 	.word	0x00000000
 8011078:	08010dfb 	.word	0x08010dfb
 801107c:	08011cb6 	.word	0x08011cb6

08011080 <_printf_common>:
 8011080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011084:	4616      	mov	r6, r2
 8011086:	4699      	mov	r9, r3
 8011088:	688a      	ldr	r2, [r1, #8]
 801108a:	690b      	ldr	r3, [r1, #16]
 801108c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011090:	4293      	cmp	r3, r2
 8011092:	bfb8      	it	lt
 8011094:	4613      	movlt	r3, r2
 8011096:	6033      	str	r3, [r6, #0]
 8011098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801109c:	4607      	mov	r7, r0
 801109e:	460c      	mov	r4, r1
 80110a0:	b10a      	cbz	r2, 80110a6 <_printf_common+0x26>
 80110a2:	3301      	adds	r3, #1
 80110a4:	6033      	str	r3, [r6, #0]
 80110a6:	6823      	ldr	r3, [r4, #0]
 80110a8:	0699      	lsls	r1, r3, #26
 80110aa:	bf42      	ittt	mi
 80110ac:	6833      	ldrmi	r3, [r6, #0]
 80110ae:	3302      	addmi	r3, #2
 80110b0:	6033      	strmi	r3, [r6, #0]
 80110b2:	6825      	ldr	r5, [r4, #0]
 80110b4:	f015 0506 	ands.w	r5, r5, #6
 80110b8:	d106      	bne.n	80110c8 <_printf_common+0x48>
 80110ba:	f104 0a19 	add.w	sl, r4, #25
 80110be:	68e3      	ldr	r3, [r4, #12]
 80110c0:	6832      	ldr	r2, [r6, #0]
 80110c2:	1a9b      	subs	r3, r3, r2
 80110c4:	42ab      	cmp	r3, r5
 80110c6:	dc26      	bgt.n	8011116 <_printf_common+0x96>
 80110c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110cc:	1e13      	subs	r3, r2, #0
 80110ce:	6822      	ldr	r2, [r4, #0]
 80110d0:	bf18      	it	ne
 80110d2:	2301      	movne	r3, #1
 80110d4:	0692      	lsls	r2, r2, #26
 80110d6:	d42b      	bmi.n	8011130 <_printf_common+0xb0>
 80110d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110dc:	4649      	mov	r1, r9
 80110de:	4638      	mov	r0, r7
 80110e0:	47c0      	blx	r8
 80110e2:	3001      	adds	r0, #1
 80110e4:	d01e      	beq.n	8011124 <_printf_common+0xa4>
 80110e6:	6823      	ldr	r3, [r4, #0]
 80110e8:	68e5      	ldr	r5, [r4, #12]
 80110ea:	6832      	ldr	r2, [r6, #0]
 80110ec:	f003 0306 	and.w	r3, r3, #6
 80110f0:	2b04      	cmp	r3, #4
 80110f2:	bf08      	it	eq
 80110f4:	1aad      	subeq	r5, r5, r2
 80110f6:	68a3      	ldr	r3, [r4, #8]
 80110f8:	6922      	ldr	r2, [r4, #16]
 80110fa:	bf0c      	ite	eq
 80110fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011100:	2500      	movne	r5, #0
 8011102:	4293      	cmp	r3, r2
 8011104:	bfc4      	itt	gt
 8011106:	1a9b      	subgt	r3, r3, r2
 8011108:	18ed      	addgt	r5, r5, r3
 801110a:	2600      	movs	r6, #0
 801110c:	341a      	adds	r4, #26
 801110e:	42b5      	cmp	r5, r6
 8011110:	d11a      	bne.n	8011148 <_printf_common+0xc8>
 8011112:	2000      	movs	r0, #0
 8011114:	e008      	b.n	8011128 <_printf_common+0xa8>
 8011116:	2301      	movs	r3, #1
 8011118:	4652      	mov	r2, sl
 801111a:	4649      	mov	r1, r9
 801111c:	4638      	mov	r0, r7
 801111e:	47c0      	blx	r8
 8011120:	3001      	adds	r0, #1
 8011122:	d103      	bne.n	801112c <_printf_common+0xac>
 8011124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112c:	3501      	adds	r5, #1
 801112e:	e7c6      	b.n	80110be <_printf_common+0x3e>
 8011130:	18e1      	adds	r1, r4, r3
 8011132:	1c5a      	adds	r2, r3, #1
 8011134:	2030      	movs	r0, #48	; 0x30
 8011136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801113a:	4422      	add	r2, r4
 801113c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011144:	3302      	adds	r3, #2
 8011146:	e7c7      	b.n	80110d8 <_printf_common+0x58>
 8011148:	2301      	movs	r3, #1
 801114a:	4622      	mov	r2, r4
 801114c:	4649      	mov	r1, r9
 801114e:	4638      	mov	r0, r7
 8011150:	47c0      	blx	r8
 8011152:	3001      	adds	r0, #1
 8011154:	d0e6      	beq.n	8011124 <_printf_common+0xa4>
 8011156:	3601      	adds	r6, #1
 8011158:	e7d9      	b.n	801110e <_printf_common+0x8e>
	...

0801115c <_printf_i>:
 801115c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011160:	7e0f      	ldrb	r7, [r1, #24]
 8011162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011164:	2f78      	cmp	r7, #120	; 0x78
 8011166:	4691      	mov	r9, r2
 8011168:	4680      	mov	r8, r0
 801116a:	460c      	mov	r4, r1
 801116c:	469a      	mov	sl, r3
 801116e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011172:	d807      	bhi.n	8011184 <_printf_i+0x28>
 8011174:	2f62      	cmp	r7, #98	; 0x62
 8011176:	d80a      	bhi.n	801118e <_printf_i+0x32>
 8011178:	2f00      	cmp	r7, #0
 801117a:	f000 80d8 	beq.w	801132e <_printf_i+0x1d2>
 801117e:	2f58      	cmp	r7, #88	; 0x58
 8011180:	f000 80a3 	beq.w	80112ca <_printf_i+0x16e>
 8011184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801118c:	e03a      	b.n	8011204 <_printf_i+0xa8>
 801118e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011192:	2b15      	cmp	r3, #21
 8011194:	d8f6      	bhi.n	8011184 <_printf_i+0x28>
 8011196:	a101      	add	r1, pc, #4	; (adr r1, 801119c <_printf_i+0x40>)
 8011198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801119c:	080111f5 	.word	0x080111f5
 80111a0:	08011209 	.word	0x08011209
 80111a4:	08011185 	.word	0x08011185
 80111a8:	08011185 	.word	0x08011185
 80111ac:	08011185 	.word	0x08011185
 80111b0:	08011185 	.word	0x08011185
 80111b4:	08011209 	.word	0x08011209
 80111b8:	08011185 	.word	0x08011185
 80111bc:	08011185 	.word	0x08011185
 80111c0:	08011185 	.word	0x08011185
 80111c4:	08011185 	.word	0x08011185
 80111c8:	08011315 	.word	0x08011315
 80111cc:	08011239 	.word	0x08011239
 80111d0:	080112f7 	.word	0x080112f7
 80111d4:	08011185 	.word	0x08011185
 80111d8:	08011185 	.word	0x08011185
 80111dc:	08011337 	.word	0x08011337
 80111e0:	08011185 	.word	0x08011185
 80111e4:	08011239 	.word	0x08011239
 80111e8:	08011185 	.word	0x08011185
 80111ec:	08011185 	.word	0x08011185
 80111f0:	080112ff 	.word	0x080112ff
 80111f4:	682b      	ldr	r3, [r5, #0]
 80111f6:	1d1a      	adds	r2, r3, #4
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	602a      	str	r2, [r5, #0]
 80111fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011204:	2301      	movs	r3, #1
 8011206:	e0a3      	b.n	8011350 <_printf_i+0x1f4>
 8011208:	6820      	ldr	r0, [r4, #0]
 801120a:	6829      	ldr	r1, [r5, #0]
 801120c:	0606      	lsls	r6, r0, #24
 801120e:	f101 0304 	add.w	r3, r1, #4
 8011212:	d50a      	bpl.n	801122a <_printf_i+0xce>
 8011214:	680e      	ldr	r6, [r1, #0]
 8011216:	602b      	str	r3, [r5, #0]
 8011218:	2e00      	cmp	r6, #0
 801121a:	da03      	bge.n	8011224 <_printf_i+0xc8>
 801121c:	232d      	movs	r3, #45	; 0x2d
 801121e:	4276      	negs	r6, r6
 8011220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011224:	485e      	ldr	r0, [pc, #376]	; (80113a0 <_printf_i+0x244>)
 8011226:	230a      	movs	r3, #10
 8011228:	e019      	b.n	801125e <_printf_i+0x102>
 801122a:	680e      	ldr	r6, [r1, #0]
 801122c:	602b      	str	r3, [r5, #0]
 801122e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011232:	bf18      	it	ne
 8011234:	b236      	sxthne	r6, r6
 8011236:	e7ef      	b.n	8011218 <_printf_i+0xbc>
 8011238:	682b      	ldr	r3, [r5, #0]
 801123a:	6820      	ldr	r0, [r4, #0]
 801123c:	1d19      	adds	r1, r3, #4
 801123e:	6029      	str	r1, [r5, #0]
 8011240:	0601      	lsls	r1, r0, #24
 8011242:	d501      	bpl.n	8011248 <_printf_i+0xec>
 8011244:	681e      	ldr	r6, [r3, #0]
 8011246:	e002      	b.n	801124e <_printf_i+0xf2>
 8011248:	0646      	lsls	r6, r0, #25
 801124a:	d5fb      	bpl.n	8011244 <_printf_i+0xe8>
 801124c:	881e      	ldrh	r6, [r3, #0]
 801124e:	4854      	ldr	r0, [pc, #336]	; (80113a0 <_printf_i+0x244>)
 8011250:	2f6f      	cmp	r7, #111	; 0x6f
 8011252:	bf0c      	ite	eq
 8011254:	2308      	moveq	r3, #8
 8011256:	230a      	movne	r3, #10
 8011258:	2100      	movs	r1, #0
 801125a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801125e:	6865      	ldr	r5, [r4, #4]
 8011260:	60a5      	str	r5, [r4, #8]
 8011262:	2d00      	cmp	r5, #0
 8011264:	bfa2      	ittt	ge
 8011266:	6821      	ldrge	r1, [r4, #0]
 8011268:	f021 0104 	bicge.w	r1, r1, #4
 801126c:	6021      	strge	r1, [r4, #0]
 801126e:	b90e      	cbnz	r6, 8011274 <_printf_i+0x118>
 8011270:	2d00      	cmp	r5, #0
 8011272:	d04d      	beq.n	8011310 <_printf_i+0x1b4>
 8011274:	4615      	mov	r5, r2
 8011276:	fbb6 f1f3 	udiv	r1, r6, r3
 801127a:	fb03 6711 	mls	r7, r3, r1, r6
 801127e:	5dc7      	ldrb	r7, [r0, r7]
 8011280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011284:	4637      	mov	r7, r6
 8011286:	42bb      	cmp	r3, r7
 8011288:	460e      	mov	r6, r1
 801128a:	d9f4      	bls.n	8011276 <_printf_i+0x11a>
 801128c:	2b08      	cmp	r3, #8
 801128e:	d10b      	bne.n	80112a8 <_printf_i+0x14c>
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	07de      	lsls	r6, r3, #31
 8011294:	d508      	bpl.n	80112a8 <_printf_i+0x14c>
 8011296:	6923      	ldr	r3, [r4, #16]
 8011298:	6861      	ldr	r1, [r4, #4]
 801129a:	4299      	cmp	r1, r3
 801129c:	bfde      	ittt	le
 801129e:	2330      	movle	r3, #48	; 0x30
 80112a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80112a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80112a8:	1b52      	subs	r2, r2, r5
 80112aa:	6122      	str	r2, [r4, #16]
 80112ac:	f8cd a000 	str.w	sl, [sp]
 80112b0:	464b      	mov	r3, r9
 80112b2:	aa03      	add	r2, sp, #12
 80112b4:	4621      	mov	r1, r4
 80112b6:	4640      	mov	r0, r8
 80112b8:	f7ff fee2 	bl	8011080 <_printf_common>
 80112bc:	3001      	adds	r0, #1
 80112be:	d14c      	bne.n	801135a <_printf_i+0x1fe>
 80112c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112c4:	b004      	add	sp, #16
 80112c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ca:	4835      	ldr	r0, [pc, #212]	; (80113a0 <_printf_i+0x244>)
 80112cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80112d0:	6829      	ldr	r1, [r5, #0]
 80112d2:	6823      	ldr	r3, [r4, #0]
 80112d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80112d8:	6029      	str	r1, [r5, #0]
 80112da:	061d      	lsls	r5, r3, #24
 80112dc:	d514      	bpl.n	8011308 <_printf_i+0x1ac>
 80112de:	07df      	lsls	r7, r3, #31
 80112e0:	bf44      	itt	mi
 80112e2:	f043 0320 	orrmi.w	r3, r3, #32
 80112e6:	6023      	strmi	r3, [r4, #0]
 80112e8:	b91e      	cbnz	r6, 80112f2 <_printf_i+0x196>
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	f023 0320 	bic.w	r3, r3, #32
 80112f0:	6023      	str	r3, [r4, #0]
 80112f2:	2310      	movs	r3, #16
 80112f4:	e7b0      	b.n	8011258 <_printf_i+0xfc>
 80112f6:	6823      	ldr	r3, [r4, #0]
 80112f8:	f043 0320 	orr.w	r3, r3, #32
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	2378      	movs	r3, #120	; 0x78
 8011300:	4828      	ldr	r0, [pc, #160]	; (80113a4 <_printf_i+0x248>)
 8011302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011306:	e7e3      	b.n	80112d0 <_printf_i+0x174>
 8011308:	0659      	lsls	r1, r3, #25
 801130a:	bf48      	it	mi
 801130c:	b2b6      	uxthmi	r6, r6
 801130e:	e7e6      	b.n	80112de <_printf_i+0x182>
 8011310:	4615      	mov	r5, r2
 8011312:	e7bb      	b.n	801128c <_printf_i+0x130>
 8011314:	682b      	ldr	r3, [r5, #0]
 8011316:	6826      	ldr	r6, [r4, #0]
 8011318:	6961      	ldr	r1, [r4, #20]
 801131a:	1d18      	adds	r0, r3, #4
 801131c:	6028      	str	r0, [r5, #0]
 801131e:	0635      	lsls	r5, r6, #24
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	d501      	bpl.n	8011328 <_printf_i+0x1cc>
 8011324:	6019      	str	r1, [r3, #0]
 8011326:	e002      	b.n	801132e <_printf_i+0x1d2>
 8011328:	0670      	lsls	r0, r6, #25
 801132a:	d5fb      	bpl.n	8011324 <_printf_i+0x1c8>
 801132c:	8019      	strh	r1, [r3, #0]
 801132e:	2300      	movs	r3, #0
 8011330:	6123      	str	r3, [r4, #16]
 8011332:	4615      	mov	r5, r2
 8011334:	e7ba      	b.n	80112ac <_printf_i+0x150>
 8011336:	682b      	ldr	r3, [r5, #0]
 8011338:	1d1a      	adds	r2, r3, #4
 801133a:	602a      	str	r2, [r5, #0]
 801133c:	681d      	ldr	r5, [r3, #0]
 801133e:	6862      	ldr	r2, [r4, #4]
 8011340:	2100      	movs	r1, #0
 8011342:	4628      	mov	r0, r5
 8011344:	f7ee ff64 	bl	8000210 <memchr>
 8011348:	b108      	cbz	r0, 801134e <_printf_i+0x1f2>
 801134a:	1b40      	subs	r0, r0, r5
 801134c:	6060      	str	r0, [r4, #4]
 801134e:	6863      	ldr	r3, [r4, #4]
 8011350:	6123      	str	r3, [r4, #16]
 8011352:	2300      	movs	r3, #0
 8011354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011358:	e7a8      	b.n	80112ac <_printf_i+0x150>
 801135a:	6923      	ldr	r3, [r4, #16]
 801135c:	462a      	mov	r2, r5
 801135e:	4649      	mov	r1, r9
 8011360:	4640      	mov	r0, r8
 8011362:	47d0      	blx	sl
 8011364:	3001      	adds	r0, #1
 8011366:	d0ab      	beq.n	80112c0 <_printf_i+0x164>
 8011368:	6823      	ldr	r3, [r4, #0]
 801136a:	079b      	lsls	r3, r3, #30
 801136c:	d413      	bmi.n	8011396 <_printf_i+0x23a>
 801136e:	68e0      	ldr	r0, [r4, #12]
 8011370:	9b03      	ldr	r3, [sp, #12]
 8011372:	4298      	cmp	r0, r3
 8011374:	bfb8      	it	lt
 8011376:	4618      	movlt	r0, r3
 8011378:	e7a4      	b.n	80112c4 <_printf_i+0x168>
 801137a:	2301      	movs	r3, #1
 801137c:	4632      	mov	r2, r6
 801137e:	4649      	mov	r1, r9
 8011380:	4640      	mov	r0, r8
 8011382:	47d0      	blx	sl
 8011384:	3001      	adds	r0, #1
 8011386:	d09b      	beq.n	80112c0 <_printf_i+0x164>
 8011388:	3501      	adds	r5, #1
 801138a:	68e3      	ldr	r3, [r4, #12]
 801138c:	9903      	ldr	r1, [sp, #12]
 801138e:	1a5b      	subs	r3, r3, r1
 8011390:	42ab      	cmp	r3, r5
 8011392:	dcf2      	bgt.n	801137a <_printf_i+0x21e>
 8011394:	e7eb      	b.n	801136e <_printf_i+0x212>
 8011396:	2500      	movs	r5, #0
 8011398:	f104 0619 	add.w	r6, r4, #25
 801139c:	e7f5      	b.n	801138a <_printf_i+0x22e>
 801139e:	bf00      	nop
 80113a0:	08011cc1 	.word	0x08011cc1
 80113a4:	08011cd2 	.word	0x08011cd2

080113a8 <_sbrk_r>:
 80113a8:	b538      	push	{r3, r4, r5, lr}
 80113aa:	4d06      	ldr	r5, [pc, #24]	; (80113c4 <_sbrk_r+0x1c>)
 80113ac:	2300      	movs	r3, #0
 80113ae:	4604      	mov	r4, r0
 80113b0:	4608      	mov	r0, r1
 80113b2:	602b      	str	r3, [r5, #0]
 80113b4:	f000 fb1c 	bl	80119f0 <_sbrk>
 80113b8:	1c43      	adds	r3, r0, #1
 80113ba:	d102      	bne.n	80113c2 <_sbrk_r+0x1a>
 80113bc:	682b      	ldr	r3, [r5, #0]
 80113be:	b103      	cbz	r3, 80113c2 <_sbrk_r+0x1a>
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	bd38      	pop	{r3, r4, r5, pc}
 80113c4:	200025b4 	.word	0x200025b4

080113c8 <__sread>:
 80113c8:	b510      	push	{r4, lr}
 80113ca:	460c      	mov	r4, r1
 80113cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113d0:	f000 fab2 	bl	8011938 <_read_r>
 80113d4:	2800      	cmp	r0, #0
 80113d6:	bfab      	itete	ge
 80113d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80113da:	89a3      	ldrhlt	r3, [r4, #12]
 80113dc:	181b      	addge	r3, r3, r0
 80113de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80113e2:	bfac      	ite	ge
 80113e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80113e6:	81a3      	strhlt	r3, [r4, #12]
 80113e8:	bd10      	pop	{r4, pc}

080113ea <__swrite>:
 80113ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ee:	461f      	mov	r7, r3
 80113f0:	898b      	ldrh	r3, [r1, #12]
 80113f2:	05db      	lsls	r3, r3, #23
 80113f4:	4605      	mov	r5, r0
 80113f6:	460c      	mov	r4, r1
 80113f8:	4616      	mov	r6, r2
 80113fa:	d505      	bpl.n	8011408 <__swrite+0x1e>
 80113fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011400:	2302      	movs	r3, #2
 8011402:	2200      	movs	r2, #0
 8011404:	f000 f9c8 	bl	8011798 <_lseek_r>
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801140e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011412:	81a3      	strh	r3, [r4, #12]
 8011414:	4632      	mov	r2, r6
 8011416:	463b      	mov	r3, r7
 8011418:	4628      	mov	r0, r5
 801141a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801141e:	f000 b869 	b.w	80114f4 <_write_r>

08011422 <__sseek>:
 8011422:	b510      	push	{r4, lr}
 8011424:	460c      	mov	r4, r1
 8011426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801142a:	f000 f9b5 	bl	8011798 <_lseek_r>
 801142e:	1c43      	adds	r3, r0, #1
 8011430:	89a3      	ldrh	r3, [r4, #12]
 8011432:	bf15      	itete	ne
 8011434:	6560      	strne	r0, [r4, #84]	; 0x54
 8011436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801143a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801143e:	81a3      	strheq	r3, [r4, #12]
 8011440:	bf18      	it	ne
 8011442:	81a3      	strhne	r3, [r4, #12]
 8011444:	bd10      	pop	{r4, pc}

08011446 <__sclose>:
 8011446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801144a:	f000 b8d3 	b.w	80115f4 <_close_r>
	...

08011450 <__swbuf_r>:
 8011450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011452:	460e      	mov	r6, r1
 8011454:	4614      	mov	r4, r2
 8011456:	4605      	mov	r5, r0
 8011458:	b118      	cbz	r0, 8011462 <__swbuf_r+0x12>
 801145a:	6983      	ldr	r3, [r0, #24]
 801145c:	b90b      	cbnz	r3, 8011462 <__swbuf_r+0x12>
 801145e:	f7ff fb81 	bl	8010b64 <__sinit>
 8011462:	4b21      	ldr	r3, [pc, #132]	; (80114e8 <__swbuf_r+0x98>)
 8011464:	429c      	cmp	r4, r3
 8011466:	d12b      	bne.n	80114c0 <__swbuf_r+0x70>
 8011468:	686c      	ldr	r4, [r5, #4]
 801146a:	69a3      	ldr	r3, [r4, #24]
 801146c:	60a3      	str	r3, [r4, #8]
 801146e:	89a3      	ldrh	r3, [r4, #12]
 8011470:	071a      	lsls	r2, r3, #28
 8011472:	d52f      	bpl.n	80114d4 <__swbuf_r+0x84>
 8011474:	6923      	ldr	r3, [r4, #16]
 8011476:	b36b      	cbz	r3, 80114d4 <__swbuf_r+0x84>
 8011478:	6923      	ldr	r3, [r4, #16]
 801147a:	6820      	ldr	r0, [r4, #0]
 801147c:	1ac0      	subs	r0, r0, r3
 801147e:	6963      	ldr	r3, [r4, #20]
 8011480:	b2f6      	uxtb	r6, r6
 8011482:	4283      	cmp	r3, r0
 8011484:	4637      	mov	r7, r6
 8011486:	dc04      	bgt.n	8011492 <__swbuf_r+0x42>
 8011488:	4621      	mov	r1, r4
 801148a:	4628      	mov	r0, r5
 801148c:	f000 f948 	bl	8011720 <_fflush_r>
 8011490:	bb30      	cbnz	r0, 80114e0 <__swbuf_r+0x90>
 8011492:	68a3      	ldr	r3, [r4, #8]
 8011494:	3b01      	subs	r3, #1
 8011496:	60a3      	str	r3, [r4, #8]
 8011498:	6823      	ldr	r3, [r4, #0]
 801149a:	1c5a      	adds	r2, r3, #1
 801149c:	6022      	str	r2, [r4, #0]
 801149e:	701e      	strb	r6, [r3, #0]
 80114a0:	6963      	ldr	r3, [r4, #20]
 80114a2:	3001      	adds	r0, #1
 80114a4:	4283      	cmp	r3, r0
 80114a6:	d004      	beq.n	80114b2 <__swbuf_r+0x62>
 80114a8:	89a3      	ldrh	r3, [r4, #12]
 80114aa:	07db      	lsls	r3, r3, #31
 80114ac:	d506      	bpl.n	80114bc <__swbuf_r+0x6c>
 80114ae:	2e0a      	cmp	r6, #10
 80114b0:	d104      	bne.n	80114bc <__swbuf_r+0x6c>
 80114b2:	4621      	mov	r1, r4
 80114b4:	4628      	mov	r0, r5
 80114b6:	f000 f933 	bl	8011720 <_fflush_r>
 80114ba:	b988      	cbnz	r0, 80114e0 <__swbuf_r+0x90>
 80114bc:	4638      	mov	r0, r7
 80114be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c0:	4b0a      	ldr	r3, [pc, #40]	; (80114ec <__swbuf_r+0x9c>)
 80114c2:	429c      	cmp	r4, r3
 80114c4:	d101      	bne.n	80114ca <__swbuf_r+0x7a>
 80114c6:	68ac      	ldr	r4, [r5, #8]
 80114c8:	e7cf      	b.n	801146a <__swbuf_r+0x1a>
 80114ca:	4b09      	ldr	r3, [pc, #36]	; (80114f0 <__swbuf_r+0xa0>)
 80114cc:	429c      	cmp	r4, r3
 80114ce:	bf08      	it	eq
 80114d0:	68ec      	ldreq	r4, [r5, #12]
 80114d2:	e7ca      	b.n	801146a <__swbuf_r+0x1a>
 80114d4:	4621      	mov	r1, r4
 80114d6:	4628      	mov	r0, r5
 80114d8:	f000 f81e 	bl	8011518 <__swsetup_r>
 80114dc:	2800      	cmp	r0, #0
 80114de:	d0cb      	beq.n	8011478 <__swbuf_r+0x28>
 80114e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80114e4:	e7ea      	b.n	80114bc <__swbuf_r+0x6c>
 80114e6:	bf00      	nop
 80114e8:	08011c70 	.word	0x08011c70
 80114ec:	08011c90 	.word	0x08011c90
 80114f0:	08011c50 	.word	0x08011c50

080114f4 <_write_r>:
 80114f4:	b538      	push	{r3, r4, r5, lr}
 80114f6:	4d07      	ldr	r5, [pc, #28]	; (8011514 <_write_r+0x20>)
 80114f8:	4604      	mov	r4, r0
 80114fa:	4608      	mov	r0, r1
 80114fc:	4611      	mov	r1, r2
 80114fe:	2200      	movs	r2, #0
 8011500:	602a      	str	r2, [r5, #0]
 8011502:	461a      	mov	r2, r3
 8011504:	f000 fa82 	bl	8011a0c <_write>
 8011508:	1c43      	adds	r3, r0, #1
 801150a:	d102      	bne.n	8011512 <_write_r+0x1e>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	b103      	cbz	r3, 8011512 <_write_r+0x1e>
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	bd38      	pop	{r3, r4, r5, pc}
 8011514:	200025b4 	.word	0x200025b4

08011518 <__swsetup_r>:
 8011518:	4b32      	ldr	r3, [pc, #200]	; (80115e4 <__swsetup_r+0xcc>)
 801151a:	b570      	push	{r4, r5, r6, lr}
 801151c:	681d      	ldr	r5, [r3, #0]
 801151e:	4606      	mov	r6, r0
 8011520:	460c      	mov	r4, r1
 8011522:	b125      	cbz	r5, 801152e <__swsetup_r+0x16>
 8011524:	69ab      	ldr	r3, [r5, #24]
 8011526:	b913      	cbnz	r3, 801152e <__swsetup_r+0x16>
 8011528:	4628      	mov	r0, r5
 801152a:	f7ff fb1b 	bl	8010b64 <__sinit>
 801152e:	4b2e      	ldr	r3, [pc, #184]	; (80115e8 <__swsetup_r+0xd0>)
 8011530:	429c      	cmp	r4, r3
 8011532:	d10f      	bne.n	8011554 <__swsetup_r+0x3c>
 8011534:	686c      	ldr	r4, [r5, #4]
 8011536:	89a3      	ldrh	r3, [r4, #12]
 8011538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801153c:	0719      	lsls	r1, r3, #28
 801153e:	d42c      	bmi.n	801159a <__swsetup_r+0x82>
 8011540:	06dd      	lsls	r5, r3, #27
 8011542:	d411      	bmi.n	8011568 <__swsetup_r+0x50>
 8011544:	2309      	movs	r3, #9
 8011546:	6033      	str	r3, [r6, #0]
 8011548:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801154c:	81a3      	strh	r3, [r4, #12]
 801154e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011552:	e03e      	b.n	80115d2 <__swsetup_r+0xba>
 8011554:	4b25      	ldr	r3, [pc, #148]	; (80115ec <__swsetup_r+0xd4>)
 8011556:	429c      	cmp	r4, r3
 8011558:	d101      	bne.n	801155e <__swsetup_r+0x46>
 801155a:	68ac      	ldr	r4, [r5, #8]
 801155c:	e7eb      	b.n	8011536 <__swsetup_r+0x1e>
 801155e:	4b24      	ldr	r3, [pc, #144]	; (80115f0 <__swsetup_r+0xd8>)
 8011560:	429c      	cmp	r4, r3
 8011562:	bf08      	it	eq
 8011564:	68ec      	ldreq	r4, [r5, #12]
 8011566:	e7e6      	b.n	8011536 <__swsetup_r+0x1e>
 8011568:	0758      	lsls	r0, r3, #29
 801156a:	d512      	bpl.n	8011592 <__swsetup_r+0x7a>
 801156c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801156e:	b141      	cbz	r1, 8011582 <__swsetup_r+0x6a>
 8011570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011574:	4299      	cmp	r1, r3
 8011576:	d002      	beq.n	801157e <__swsetup_r+0x66>
 8011578:	4630      	mov	r0, r6
 801157a:	f000 f991 	bl	80118a0 <_free_r>
 801157e:	2300      	movs	r3, #0
 8011580:	6363      	str	r3, [r4, #52]	; 0x34
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011588:	81a3      	strh	r3, [r4, #12]
 801158a:	2300      	movs	r3, #0
 801158c:	6063      	str	r3, [r4, #4]
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	f043 0308 	orr.w	r3, r3, #8
 8011598:	81a3      	strh	r3, [r4, #12]
 801159a:	6923      	ldr	r3, [r4, #16]
 801159c:	b94b      	cbnz	r3, 80115b2 <__swsetup_r+0x9a>
 801159e:	89a3      	ldrh	r3, [r4, #12]
 80115a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115a8:	d003      	beq.n	80115b2 <__swsetup_r+0x9a>
 80115aa:	4621      	mov	r1, r4
 80115ac:	4630      	mov	r0, r6
 80115ae:	f000 f92b 	bl	8011808 <__smakebuf_r>
 80115b2:	89a0      	ldrh	r0, [r4, #12]
 80115b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115b8:	f010 0301 	ands.w	r3, r0, #1
 80115bc:	d00a      	beq.n	80115d4 <__swsetup_r+0xbc>
 80115be:	2300      	movs	r3, #0
 80115c0:	60a3      	str	r3, [r4, #8]
 80115c2:	6963      	ldr	r3, [r4, #20]
 80115c4:	425b      	negs	r3, r3
 80115c6:	61a3      	str	r3, [r4, #24]
 80115c8:	6923      	ldr	r3, [r4, #16]
 80115ca:	b943      	cbnz	r3, 80115de <__swsetup_r+0xc6>
 80115cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115d0:	d1ba      	bne.n	8011548 <__swsetup_r+0x30>
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	0781      	lsls	r1, r0, #30
 80115d6:	bf58      	it	pl
 80115d8:	6963      	ldrpl	r3, [r4, #20]
 80115da:	60a3      	str	r3, [r4, #8]
 80115dc:	e7f4      	b.n	80115c8 <__swsetup_r+0xb0>
 80115de:	2000      	movs	r0, #0
 80115e0:	e7f7      	b.n	80115d2 <__swsetup_r+0xba>
 80115e2:	bf00      	nop
 80115e4:	20000190 	.word	0x20000190
 80115e8:	08011c70 	.word	0x08011c70
 80115ec:	08011c90 	.word	0x08011c90
 80115f0:	08011c50 	.word	0x08011c50

080115f4 <_close_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4d06      	ldr	r5, [pc, #24]	; (8011610 <_close_r+0x1c>)
 80115f8:	2300      	movs	r3, #0
 80115fa:	4604      	mov	r4, r0
 80115fc:	4608      	mov	r0, r1
 80115fe:	602b      	str	r3, [r5, #0]
 8011600:	f000 f9ce 	bl	80119a0 <_close>
 8011604:	1c43      	adds	r3, r0, #1
 8011606:	d102      	bne.n	801160e <_close_r+0x1a>
 8011608:	682b      	ldr	r3, [r5, #0]
 801160a:	b103      	cbz	r3, 801160e <_close_r+0x1a>
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	bd38      	pop	{r3, r4, r5, pc}
 8011610:	200025b4 	.word	0x200025b4

08011614 <__sflush_r>:
 8011614:	898a      	ldrh	r2, [r1, #12]
 8011616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801161a:	4605      	mov	r5, r0
 801161c:	0710      	lsls	r0, r2, #28
 801161e:	460c      	mov	r4, r1
 8011620:	d458      	bmi.n	80116d4 <__sflush_r+0xc0>
 8011622:	684b      	ldr	r3, [r1, #4]
 8011624:	2b00      	cmp	r3, #0
 8011626:	dc05      	bgt.n	8011634 <__sflush_r+0x20>
 8011628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801162a:	2b00      	cmp	r3, #0
 801162c:	dc02      	bgt.n	8011634 <__sflush_r+0x20>
 801162e:	2000      	movs	r0, #0
 8011630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011636:	2e00      	cmp	r6, #0
 8011638:	d0f9      	beq.n	801162e <__sflush_r+0x1a>
 801163a:	2300      	movs	r3, #0
 801163c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011640:	682f      	ldr	r7, [r5, #0]
 8011642:	602b      	str	r3, [r5, #0]
 8011644:	d032      	beq.n	80116ac <__sflush_r+0x98>
 8011646:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	075a      	lsls	r2, r3, #29
 801164c:	d505      	bpl.n	801165a <__sflush_r+0x46>
 801164e:	6863      	ldr	r3, [r4, #4]
 8011650:	1ac0      	subs	r0, r0, r3
 8011652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011654:	b10b      	cbz	r3, 801165a <__sflush_r+0x46>
 8011656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011658:	1ac0      	subs	r0, r0, r3
 801165a:	2300      	movs	r3, #0
 801165c:	4602      	mov	r2, r0
 801165e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011660:	6a21      	ldr	r1, [r4, #32]
 8011662:	4628      	mov	r0, r5
 8011664:	47b0      	blx	r6
 8011666:	1c43      	adds	r3, r0, #1
 8011668:	89a3      	ldrh	r3, [r4, #12]
 801166a:	d106      	bne.n	801167a <__sflush_r+0x66>
 801166c:	6829      	ldr	r1, [r5, #0]
 801166e:	291d      	cmp	r1, #29
 8011670:	d82c      	bhi.n	80116cc <__sflush_r+0xb8>
 8011672:	4a2a      	ldr	r2, [pc, #168]	; (801171c <__sflush_r+0x108>)
 8011674:	40ca      	lsrs	r2, r1
 8011676:	07d6      	lsls	r6, r2, #31
 8011678:	d528      	bpl.n	80116cc <__sflush_r+0xb8>
 801167a:	2200      	movs	r2, #0
 801167c:	6062      	str	r2, [r4, #4]
 801167e:	04d9      	lsls	r1, r3, #19
 8011680:	6922      	ldr	r2, [r4, #16]
 8011682:	6022      	str	r2, [r4, #0]
 8011684:	d504      	bpl.n	8011690 <__sflush_r+0x7c>
 8011686:	1c42      	adds	r2, r0, #1
 8011688:	d101      	bne.n	801168e <__sflush_r+0x7a>
 801168a:	682b      	ldr	r3, [r5, #0]
 801168c:	b903      	cbnz	r3, 8011690 <__sflush_r+0x7c>
 801168e:	6560      	str	r0, [r4, #84]	; 0x54
 8011690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011692:	602f      	str	r7, [r5, #0]
 8011694:	2900      	cmp	r1, #0
 8011696:	d0ca      	beq.n	801162e <__sflush_r+0x1a>
 8011698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801169c:	4299      	cmp	r1, r3
 801169e:	d002      	beq.n	80116a6 <__sflush_r+0x92>
 80116a0:	4628      	mov	r0, r5
 80116a2:	f000 f8fd 	bl	80118a0 <_free_r>
 80116a6:	2000      	movs	r0, #0
 80116a8:	6360      	str	r0, [r4, #52]	; 0x34
 80116aa:	e7c1      	b.n	8011630 <__sflush_r+0x1c>
 80116ac:	6a21      	ldr	r1, [r4, #32]
 80116ae:	2301      	movs	r3, #1
 80116b0:	4628      	mov	r0, r5
 80116b2:	47b0      	blx	r6
 80116b4:	1c41      	adds	r1, r0, #1
 80116b6:	d1c7      	bne.n	8011648 <__sflush_r+0x34>
 80116b8:	682b      	ldr	r3, [r5, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0c4      	beq.n	8011648 <__sflush_r+0x34>
 80116be:	2b1d      	cmp	r3, #29
 80116c0:	d001      	beq.n	80116c6 <__sflush_r+0xb2>
 80116c2:	2b16      	cmp	r3, #22
 80116c4:	d101      	bne.n	80116ca <__sflush_r+0xb6>
 80116c6:	602f      	str	r7, [r5, #0]
 80116c8:	e7b1      	b.n	801162e <__sflush_r+0x1a>
 80116ca:	89a3      	ldrh	r3, [r4, #12]
 80116cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116d0:	81a3      	strh	r3, [r4, #12]
 80116d2:	e7ad      	b.n	8011630 <__sflush_r+0x1c>
 80116d4:	690f      	ldr	r7, [r1, #16]
 80116d6:	2f00      	cmp	r7, #0
 80116d8:	d0a9      	beq.n	801162e <__sflush_r+0x1a>
 80116da:	0793      	lsls	r3, r2, #30
 80116dc:	680e      	ldr	r6, [r1, #0]
 80116de:	bf08      	it	eq
 80116e0:	694b      	ldreq	r3, [r1, #20]
 80116e2:	600f      	str	r7, [r1, #0]
 80116e4:	bf18      	it	ne
 80116e6:	2300      	movne	r3, #0
 80116e8:	eba6 0807 	sub.w	r8, r6, r7
 80116ec:	608b      	str	r3, [r1, #8]
 80116ee:	f1b8 0f00 	cmp.w	r8, #0
 80116f2:	dd9c      	ble.n	801162e <__sflush_r+0x1a>
 80116f4:	6a21      	ldr	r1, [r4, #32]
 80116f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116f8:	4643      	mov	r3, r8
 80116fa:	463a      	mov	r2, r7
 80116fc:	4628      	mov	r0, r5
 80116fe:	47b0      	blx	r6
 8011700:	2800      	cmp	r0, #0
 8011702:	dc06      	bgt.n	8011712 <__sflush_r+0xfe>
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801170a:	81a3      	strh	r3, [r4, #12]
 801170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011710:	e78e      	b.n	8011630 <__sflush_r+0x1c>
 8011712:	4407      	add	r7, r0
 8011714:	eba8 0800 	sub.w	r8, r8, r0
 8011718:	e7e9      	b.n	80116ee <__sflush_r+0xda>
 801171a:	bf00      	nop
 801171c:	20400001 	.word	0x20400001

08011720 <_fflush_r>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	690b      	ldr	r3, [r1, #16]
 8011724:	4605      	mov	r5, r0
 8011726:	460c      	mov	r4, r1
 8011728:	b913      	cbnz	r3, 8011730 <_fflush_r+0x10>
 801172a:	2500      	movs	r5, #0
 801172c:	4628      	mov	r0, r5
 801172e:	bd38      	pop	{r3, r4, r5, pc}
 8011730:	b118      	cbz	r0, 801173a <_fflush_r+0x1a>
 8011732:	6983      	ldr	r3, [r0, #24]
 8011734:	b90b      	cbnz	r3, 801173a <_fflush_r+0x1a>
 8011736:	f7ff fa15 	bl	8010b64 <__sinit>
 801173a:	4b14      	ldr	r3, [pc, #80]	; (801178c <_fflush_r+0x6c>)
 801173c:	429c      	cmp	r4, r3
 801173e:	d11b      	bne.n	8011778 <_fflush_r+0x58>
 8011740:	686c      	ldr	r4, [r5, #4]
 8011742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d0ef      	beq.n	801172a <_fflush_r+0xa>
 801174a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801174c:	07d0      	lsls	r0, r2, #31
 801174e:	d404      	bmi.n	801175a <_fflush_r+0x3a>
 8011750:	0599      	lsls	r1, r3, #22
 8011752:	d402      	bmi.n	801175a <_fflush_r+0x3a>
 8011754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011756:	f7ff faa3 	bl	8010ca0 <__retarget_lock_acquire_recursive>
 801175a:	4628      	mov	r0, r5
 801175c:	4621      	mov	r1, r4
 801175e:	f7ff ff59 	bl	8011614 <__sflush_r>
 8011762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011764:	07da      	lsls	r2, r3, #31
 8011766:	4605      	mov	r5, r0
 8011768:	d4e0      	bmi.n	801172c <_fflush_r+0xc>
 801176a:	89a3      	ldrh	r3, [r4, #12]
 801176c:	059b      	lsls	r3, r3, #22
 801176e:	d4dd      	bmi.n	801172c <_fflush_r+0xc>
 8011770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011772:	f7ff fa96 	bl	8010ca2 <__retarget_lock_release_recursive>
 8011776:	e7d9      	b.n	801172c <_fflush_r+0xc>
 8011778:	4b05      	ldr	r3, [pc, #20]	; (8011790 <_fflush_r+0x70>)
 801177a:	429c      	cmp	r4, r3
 801177c:	d101      	bne.n	8011782 <_fflush_r+0x62>
 801177e:	68ac      	ldr	r4, [r5, #8]
 8011780:	e7df      	b.n	8011742 <_fflush_r+0x22>
 8011782:	4b04      	ldr	r3, [pc, #16]	; (8011794 <_fflush_r+0x74>)
 8011784:	429c      	cmp	r4, r3
 8011786:	bf08      	it	eq
 8011788:	68ec      	ldreq	r4, [r5, #12]
 801178a:	e7da      	b.n	8011742 <_fflush_r+0x22>
 801178c:	08011c70 	.word	0x08011c70
 8011790:	08011c90 	.word	0x08011c90
 8011794:	08011c50 	.word	0x08011c50

08011798 <_lseek_r>:
 8011798:	b538      	push	{r3, r4, r5, lr}
 801179a:	4d07      	ldr	r5, [pc, #28]	; (80117b8 <_lseek_r+0x20>)
 801179c:	4604      	mov	r4, r0
 801179e:	4608      	mov	r0, r1
 80117a0:	4611      	mov	r1, r2
 80117a2:	2200      	movs	r2, #0
 80117a4:	602a      	str	r2, [r5, #0]
 80117a6:	461a      	mov	r2, r3
 80117a8:	f000 f912 	bl	80119d0 <_lseek>
 80117ac:	1c43      	adds	r3, r0, #1
 80117ae:	d102      	bne.n	80117b6 <_lseek_r+0x1e>
 80117b0:	682b      	ldr	r3, [r5, #0]
 80117b2:	b103      	cbz	r3, 80117b6 <_lseek_r+0x1e>
 80117b4:	6023      	str	r3, [r4, #0]
 80117b6:	bd38      	pop	{r3, r4, r5, pc}
 80117b8:	200025b4 	.word	0x200025b4

080117bc <__swhatbuf_r>:
 80117bc:	b570      	push	{r4, r5, r6, lr}
 80117be:	460e      	mov	r6, r1
 80117c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c4:	2900      	cmp	r1, #0
 80117c6:	b096      	sub	sp, #88	; 0x58
 80117c8:	4614      	mov	r4, r2
 80117ca:	461d      	mov	r5, r3
 80117cc:	da08      	bge.n	80117e0 <__swhatbuf_r+0x24>
 80117ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80117d2:	2200      	movs	r2, #0
 80117d4:	602a      	str	r2, [r5, #0]
 80117d6:	061a      	lsls	r2, r3, #24
 80117d8:	d410      	bmi.n	80117fc <__swhatbuf_r+0x40>
 80117da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117de:	e00e      	b.n	80117fe <__swhatbuf_r+0x42>
 80117e0:	466a      	mov	r2, sp
 80117e2:	f000 f8bb 	bl	801195c <_fstat_r>
 80117e6:	2800      	cmp	r0, #0
 80117e8:	dbf1      	blt.n	80117ce <__swhatbuf_r+0x12>
 80117ea:	9a01      	ldr	r2, [sp, #4]
 80117ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80117f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80117f4:	425a      	negs	r2, r3
 80117f6:	415a      	adcs	r2, r3
 80117f8:	602a      	str	r2, [r5, #0]
 80117fa:	e7ee      	b.n	80117da <__swhatbuf_r+0x1e>
 80117fc:	2340      	movs	r3, #64	; 0x40
 80117fe:	2000      	movs	r0, #0
 8011800:	6023      	str	r3, [r4, #0]
 8011802:	b016      	add	sp, #88	; 0x58
 8011804:	bd70      	pop	{r4, r5, r6, pc}
	...

08011808 <__smakebuf_r>:
 8011808:	898b      	ldrh	r3, [r1, #12]
 801180a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801180c:	079d      	lsls	r5, r3, #30
 801180e:	4606      	mov	r6, r0
 8011810:	460c      	mov	r4, r1
 8011812:	d507      	bpl.n	8011824 <__smakebuf_r+0x1c>
 8011814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011818:	6023      	str	r3, [r4, #0]
 801181a:	6123      	str	r3, [r4, #16]
 801181c:	2301      	movs	r3, #1
 801181e:	6163      	str	r3, [r4, #20]
 8011820:	b002      	add	sp, #8
 8011822:	bd70      	pop	{r4, r5, r6, pc}
 8011824:	ab01      	add	r3, sp, #4
 8011826:	466a      	mov	r2, sp
 8011828:	f7ff ffc8 	bl	80117bc <__swhatbuf_r>
 801182c:	9900      	ldr	r1, [sp, #0]
 801182e:	4605      	mov	r5, r0
 8011830:	4630      	mov	r0, r6
 8011832:	f7ff fa57 	bl	8010ce4 <_malloc_r>
 8011836:	b948      	cbnz	r0, 801184c <__smakebuf_r+0x44>
 8011838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183c:	059a      	lsls	r2, r3, #22
 801183e:	d4ef      	bmi.n	8011820 <__smakebuf_r+0x18>
 8011840:	f023 0303 	bic.w	r3, r3, #3
 8011844:	f043 0302 	orr.w	r3, r3, #2
 8011848:	81a3      	strh	r3, [r4, #12]
 801184a:	e7e3      	b.n	8011814 <__smakebuf_r+0xc>
 801184c:	4b0d      	ldr	r3, [pc, #52]	; (8011884 <__smakebuf_r+0x7c>)
 801184e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	6020      	str	r0, [r4, #0]
 8011854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011858:	81a3      	strh	r3, [r4, #12]
 801185a:	9b00      	ldr	r3, [sp, #0]
 801185c:	6163      	str	r3, [r4, #20]
 801185e:	9b01      	ldr	r3, [sp, #4]
 8011860:	6120      	str	r0, [r4, #16]
 8011862:	b15b      	cbz	r3, 801187c <__smakebuf_r+0x74>
 8011864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011868:	4630      	mov	r0, r6
 801186a:	f000 f889 	bl	8011980 <_isatty_r>
 801186e:	b128      	cbz	r0, 801187c <__smakebuf_r+0x74>
 8011870:	89a3      	ldrh	r3, [r4, #12]
 8011872:	f023 0303 	bic.w	r3, r3, #3
 8011876:	f043 0301 	orr.w	r3, r3, #1
 801187a:	81a3      	strh	r3, [r4, #12]
 801187c:	89a0      	ldrh	r0, [r4, #12]
 801187e:	4305      	orrs	r5, r0
 8011880:	81a5      	strh	r5, [r4, #12]
 8011882:	e7cd      	b.n	8011820 <__smakebuf_r+0x18>
 8011884:	08010afd 	.word	0x08010afd

08011888 <__malloc_lock>:
 8011888:	4801      	ldr	r0, [pc, #4]	; (8011890 <__malloc_lock+0x8>)
 801188a:	f7ff ba09 	b.w	8010ca0 <__retarget_lock_acquire_recursive>
 801188e:	bf00      	nop
 8011890:	200025a8 	.word	0x200025a8

08011894 <__malloc_unlock>:
 8011894:	4801      	ldr	r0, [pc, #4]	; (801189c <__malloc_unlock+0x8>)
 8011896:	f7ff ba04 	b.w	8010ca2 <__retarget_lock_release_recursive>
 801189a:	bf00      	nop
 801189c:	200025a8 	.word	0x200025a8

080118a0 <_free_r>:
 80118a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118a2:	2900      	cmp	r1, #0
 80118a4:	d044      	beq.n	8011930 <_free_r+0x90>
 80118a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118aa:	9001      	str	r0, [sp, #4]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	f1a1 0404 	sub.w	r4, r1, #4
 80118b2:	bfb8      	it	lt
 80118b4:	18e4      	addlt	r4, r4, r3
 80118b6:	f7ff ffe7 	bl	8011888 <__malloc_lock>
 80118ba:	4a1e      	ldr	r2, [pc, #120]	; (8011934 <_free_r+0x94>)
 80118bc:	9801      	ldr	r0, [sp, #4]
 80118be:	6813      	ldr	r3, [r2, #0]
 80118c0:	b933      	cbnz	r3, 80118d0 <_free_r+0x30>
 80118c2:	6063      	str	r3, [r4, #4]
 80118c4:	6014      	str	r4, [r2, #0]
 80118c6:	b003      	add	sp, #12
 80118c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118cc:	f7ff bfe2 	b.w	8011894 <__malloc_unlock>
 80118d0:	42a3      	cmp	r3, r4
 80118d2:	d908      	bls.n	80118e6 <_free_r+0x46>
 80118d4:	6825      	ldr	r5, [r4, #0]
 80118d6:	1961      	adds	r1, r4, r5
 80118d8:	428b      	cmp	r3, r1
 80118da:	bf01      	itttt	eq
 80118dc:	6819      	ldreq	r1, [r3, #0]
 80118de:	685b      	ldreq	r3, [r3, #4]
 80118e0:	1949      	addeq	r1, r1, r5
 80118e2:	6021      	streq	r1, [r4, #0]
 80118e4:	e7ed      	b.n	80118c2 <_free_r+0x22>
 80118e6:	461a      	mov	r2, r3
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	b10b      	cbz	r3, 80118f0 <_free_r+0x50>
 80118ec:	42a3      	cmp	r3, r4
 80118ee:	d9fa      	bls.n	80118e6 <_free_r+0x46>
 80118f0:	6811      	ldr	r1, [r2, #0]
 80118f2:	1855      	adds	r5, r2, r1
 80118f4:	42a5      	cmp	r5, r4
 80118f6:	d10b      	bne.n	8011910 <_free_r+0x70>
 80118f8:	6824      	ldr	r4, [r4, #0]
 80118fa:	4421      	add	r1, r4
 80118fc:	1854      	adds	r4, r2, r1
 80118fe:	42a3      	cmp	r3, r4
 8011900:	6011      	str	r1, [r2, #0]
 8011902:	d1e0      	bne.n	80118c6 <_free_r+0x26>
 8011904:	681c      	ldr	r4, [r3, #0]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	6053      	str	r3, [r2, #4]
 801190a:	4421      	add	r1, r4
 801190c:	6011      	str	r1, [r2, #0]
 801190e:	e7da      	b.n	80118c6 <_free_r+0x26>
 8011910:	d902      	bls.n	8011918 <_free_r+0x78>
 8011912:	230c      	movs	r3, #12
 8011914:	6003      	str	r3, [r0, #0]
 8011916:	e7d6      	b.n	80118c6 <_free_r+0x26>
 8011918:	6825      	ldr	r5, [r4, #0]
 801191a:	1961      	adds	r1, r4, r5
 801191c:	428b      	cmp	r3, r1
 801191e:	bf04      	itt	eq
 8011920:	6819      	ldreq	r1, [r3, #0]
 8011922:	685b      	ldreq	r3, [r3, #4]
 8011924:	6063      	str	r3, [r4, #4]
 8011926:	bf04      	itt	eq
 8011928:	1949      	addeq	r1, r1, r5
 801192a:	6021      	streq	r1, [r4, #0]
 801192c:	6054      	str	r4, [r2, #4]
 801192e:	e7ca      	b.n	80118c6 <_free_r+0x26>
 8011930:	b003      	add	sp, #12
 8011932:	bd30      	pop	{r4, r5, pc}
 8011934:	200025ac 	.word	0x200025ac

08011938 <_read_r>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4d07      	ldr	r5, [pc, #28]	; (8011958 <_read_r+0x20>)
 801193c:	4604      	mov	r4, r0
 801193e:	4608      	mov	r0, r1
 8011940:	4611      	mov	r1, r2
 8011942:	2200      	movs	r2, #0
 8011944:	602a      	str	r2, [r5, #0]
 8011946:	461a      	mov	r2, r3
 8011948:	f000 f84a 	bl	80119e0 <_read>
 801194c:	1c43      	adds	r3, r0, #1
 801194e:	d102      	bne.n	8011956 <_read_r+0x1e>
 8011950:	682b      	ldr	r3, [r5, #0]
 8011952:	b103      	cbz	r3, 8011956 <_read_r+0x1e>
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	bd38      	pop	{r3, r4, r5, pc}
 8011958:	200025b4 	.word	0x200025b4

0801195c <_fstat_r>:
 801195c:	b538      	push	{r3, r4, r5, lr}
 801195e:	4d07      	ldr	r5, [pc, #28]	; (801197c <_fstat_r+0x20>)
 8011960:	2300      	movs	r3, #0
 8011962:	4604      	mov	r4, r0
 8011964:	4608      	mov	r0, r1
 8011966:	4611      	mov	r1, r2
 8011968:	602b      	str	r3, [r5, #0]
 801196a:	f000 f821 	bl	80119b0 <_fstat>
 801196e:	1c43      	adds	r3, r0, #1
 8011970:	d102      	bne.n	8011978 <_fstat_r+0x1c>
 8011972:	682b      	ldr	r3, [r5, #0]
 8011974:	b103      	cbz	r3, 8011978 <_fstat_r+0x1c>
 8011976:	6023      	str	r3, [r4, #0]
 8011978:	bd38      	pop	{r3, r4, r5, pc}
 801197a:	bf00      	nop
 801197c:	200025b4 	.word	0x200025b4

08011980 <_isatty_r>:
 8011980:	b538      	push	{r3, r4, r5, lr}
 8011982:	4d06      	ldr	r5, [pc, #24]	; (801199c <_isatty_r+0x1c>)
 8011984:	2300      	movs	r3, #0
 8011986:	4604      	mov	r4, r0
 8011988:	4608      	mov	r0, r1
 801198a:	602b      	str	r3, [r5, #0]
 801198c:	f000 f818 	bl	80119c0 <_isatty>
 8011990:	1c43      	adds	r3, r0, #1
 8011992:	d102      	bne.n	801199a <_isatty_r+0x1a>
 8011994:	682b      	ldr	r3, [r5, #0]
 8011996:	b103      	cbz	r3, 801199a <_isatty_r+0x1a>
 8011998:	6023      	str	r3, [r4, #0]
 801199a:	bd38      	pop	{r3, r4, r5, pc}
 801199c:	200025b4 	.word	0x200025b4

080119a0 <_close>:
 80119a0:	4b02      	ldr	r3, [pc, #8]	; (80119ac <_close+0xc>)
 80119a2:	2258      	movs	r2, #88	; 0x58
 80119a4:	601a      	str	r2, [r3, #0]
 80119a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119aa:	4770      	bx	lr
 80119ac:	200025b4 	.word	0x200025b4

080119b0 <_fstat>:
 80119b0:	4b02      	ldr	r3, [pc, #8]	; (80119bc <_fstat+0xc>)
 80119b2:	2258      	movs	r2, #88	; 0x58
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119ba:	4770      	bx	lr
 80119bc:	200025b4 	.word	0x200025b4

080119c0 <_isatty>:
 80119c0:	4b02      	ldr	r3, [pc, #8]	; (80119cc <_isatty+0xc>)
 80119c2:	2258      	movs	r2, #88	; 0x58
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	2000      	movs	r0, #0
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop
 80119cc:	200025b4 	.word	0x200025b4

080119d0 <_lseek>:
 80119d0:	4b02      	ldr	r3, [pc, #8]	; (80119dc <_lseek+0xc>)
 80119d2:	2258      	movs	r2, #88	; 0x58
 80119d4:	601a      	str	r2, [r3, #0]
 80119d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119da:	4770      	bx	lr
 80119dc:	200025b4 	.word	0x200025b4

080119e0 <_read>:
 80119e0:	4b02      	ldr	r3, [pc, #8]	; (80119ec <_read+0xc>)
 80119e2:	2258      	movs	r2, #88	; 0x58
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119ea:	4770      	bx	lr
 80119ec:	200025b4 	.word	0x200025b4

080119f0 <_sbrk>:
 80119f0:	4a04      	ldr	r2, [pc, #16]	; (8011a04 <_sbrk+0x14>)
 80119f2:	6811      	ldr	r1, [r2, #0]
 80119f4:	4603      	mov	r3, r0
 80119f6:	b909      	cbnz	r1, 80119fc <_sbrk+0xc>
 80119f8:	4903      	ldr	r1, [pc, #12]	; (8011a08 <_sbrk+0x18>)
 80119fa:	6011      	str	r1, [r2, #0]
 80119fc:	6810      	ldr	r0, [r2, #0]
 80119fe:	4403      	add	r3, r0
 8011a00:	6013      	str	r3, [r2, #0]
 8011a02:	4770      	bx	lr
 8011a04:	200025b8 	.word	0x200025b8
 8011a08:	200025c0 	.word	0x200025c0

08011a0c <_write>:
 8011a0c:	4b02      	ldr	r3, [pc, #8]	; (8011a18 <_write+0xc>)
 8011a0e:	2258      	movs	r2, #88	; 0x58
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a16:	4770      	bx	lr
 8011a18:	200025b4 	.word	0x200025b4

08011a1c <_init>:
 8011a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a1e:	bf00      	nop
 8011a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a22:	bc08      	pop	{r3}
 8011a24:	469e      	mov	lr, r3
 8011a26:	4770      	bx	lr

08011a28 <_fini>:
 8011a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2a:	bf00      	nop
 8011a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a2e:	bc08      	pop	{r3}
 8011a30:	469e      	mov	lr, r3
 8011a32:	4770      	bx	lr
