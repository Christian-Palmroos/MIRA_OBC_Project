
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125d4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  08012798  08012798  00022798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e98  08012e98  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08012e98  08012e98  00022e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ea0  08012ea0  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ea0  08012ea0  00022ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ea4  08012ea4  00022ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08012ea8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002654  20000358  08013200  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200029ac  08013200  000329ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf19  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057e7  00000000  00000000  0005c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002228  00000000  00000000  00061a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  00063cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008790  00000000  00000000  00065c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c769  00000000  00000000  0006e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120604  00000000  00000000  0009ab89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bb18d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a22c  00000000  00000000  001bb1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c540c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c54d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000358 	.word	0x20000358
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801277c 	.word	0x0801277c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000035c 	.word	0x2000035c
 80001fc:	0801277c 	.word	0x0801277c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 f923 	bl	8003146 <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 f91a 	bl	8003162 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000374 	.word	0x20000374
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003c8 	.word	0x200003c8

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 f844 	bl	8003028 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 f8d8 	bl	8003162 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 f91a 	bl	80031f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00e fe51 	bl	800fc98 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fae8 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f001 fe12 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f001 fdfc 	bl	8002c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <HAL_UART_RxCpltCallback>:
	put_one_char(x + 48);

	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <HAL_UART_RxCpltCallback+0x30>)
 80010ae:	f001 ff89 	bl	8002fc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2120      	movs	r1, #32
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <HAL_UART_RxCpltCallback+0x30>)
 80010b8:	f001 ff84 	bl	8002fc4 <HAL_GPIO_WritePin>
		mira_ready_for_comm |= 1;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_UART_RxCpltCallback+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_UART_RxCpltCallback+0x34>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	48001000 	.word	0x48001000
 80010d4:	20000000 	.word	0x20000000

080010d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	f6ad 3d38 	subw	sp, sp, #2872	; 0xb38
 80010de:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80010e0:	4b92      	ldr	r3, [pc, #584]	; (800132c <main+0x254>)
 80010e2:	f607 24e4 	addw	r4, r7, #2788	; 0xae4
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f0:	c403      	stmia	r4!, {r0, r1}
 80010f2:	7022      	strb	r2, [r4, #0]
 80010f4:	f607 23fd 	addw	r3, r7, #2813	; 0xafd
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 8001108:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800110c:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8001110:	461a      	mov	r2, r3
 8001112:	2300      	movs	r3, #0
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	6053      	str	r3, [r2, #4]
 8001118:	6093      	str	r3, [r2, #8]
 800111a:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 800111c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001120:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 800112e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001132:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 800113e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001142:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 800115a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800115e:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	3304      	adds	r3, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8001176:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800117a:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	3304      	adds	r3, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8001192:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001196:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 800119a:	4a65      	ldr	r2, [pc, #404]	; (8001330 <main+0x258>)
 800119c:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 800119e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80011a2:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	3304      	adds	r3, #4
 80011ac:	2224      	movs	r2, #36	; 0x24
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00e fd71 	bl	800fc98 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 80011b6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80011ba:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	3304      	adds	r3, #4
 80011c4:	2224      	movs	r2, #36	; 0x24
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00e fd65 	bl	800fc98 <memset>

	//LoRa
	lora_sx1276 lora;

	//MIRA
	uint8_t mira_target_reg = 0x00;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3b2e 	strb.w	r3, [r7, #2862]	; 0xb2e
	uint8_t mira_Tx_payload[4] = {0x00,0x00,0x00,0x00};
 80011d4:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80011d8:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
	//	int message;
	//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80011ec:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80011f0:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80011f4:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	751a      	strb	r2, [r3, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800120c:	f001 f857 	bl	80022be <HAL_Init>

	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8001210:	f000 fcde 	bl	8001bd0 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 8001214:	f7ff fe62 	bl	8000edc <BSP_I2C2_Init>

	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 8001218:	4846      	ldr	r0, [pc, #280]	; (8001334 <main+0x25c>)
 800121a:	f000 fe41 	bl	8001ea0 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 800121e:	4846      	ldr	r0, [pc, #280]	; (8001338 <main+0x260>)
 8001220:	f000 fe3e 	bl	8001ea0 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001224:	f000 f892 	bl	800134c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001228:	f000 fada 	bl	80017e0 <MX_GPIO_Init>
	MX_DMA_Init();
 800122c:	f000 faa6 	bl	800177c <MX_DMA_Init>
	MX_I2C1_Init();
 8001230:	f000 f8f2 	bl	8001418 <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 8001234:	f000 f930 	bl	8001498 <MX_SDMMC1_SD_Init>
	MX_SPI1_Init();
 8001238:	f000 f950 	bl	80014dc <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800123c:	f000 fa02 	bl	8001644 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001240:	f000 fa4c 	bl	80016dc <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001244:	f00c f87a 	bl	800d33c <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8001248:	f00d ff02 	bl	800f050 <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 800124c:	f000 f984 	bl	8001558 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001250:	f000 f8ce 	bl	80013f0 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	/// MIRA Init /////////////////////////////////////////////////////////////////////////////////

	// enable channel 1 for MIRA communication
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2110      	movs	r1, #16
 8001258:	4838      	ldr	r0, [pc, #224]	; (800133c <main+0x264>)
 800125a:	f001 feb3 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	2120      	movs	r1, #32
 8001262:	4836      	ldr	r0, [pc, #216]	; (800133c <main+0x264>)
 8001264:	f001 feae 	bl	8002fc4 <HAL_GPIO_WritePin>

	// Enable ADC on MIRA.
	mira_target_reg = 0x02;
 8001268:	2302      	movs	r3, #2
 800126a:	f887 3b2e 	strb.w	r3, [r7, #2862]	; 0xb2e
	mira_Tx_payload[3] = 0x01;
 800126e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001272:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8001276:	2201      	movs	r2, #1
 8001278:	70da      	strb	r2, [r3, #3]
	status = mira_command(&huart1, WRITE_REGISTER, mira_target_reg, mira_Tx_payload, mira_Rx_buffer, 5000);
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <main+0x268>)
 800127c:	7819      	ldrb	r1, [r3, #0]
 800127e:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001282:	f897 2b2e 	ldrb.w	r2, [r7, #2862]	; 0xb2e
 8001286:	f241 3388 	movw	r3, #5000	; 0x1388
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	4603      	mov	r3, r0
 8001294:	4827      	ldr	r0, [pc, #156]	; (8001334 <main+0x25c>)
 8001296:	f000 fba7 	bl	80019e8 <mira_command>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 3b2f 	strb.w	r3, [r7, #2863]	; 0xb2f

	HAL_Delay(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f001 f881 	bl	80023a8 <HAL_Delay>
	while (CDC_Transmit_FS (mira_Rx_buffer, sizeof(mira_Rx_buffer)) == USBD_BUSY);
 80012a6:	bf00      	nop
 80012a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012ac:	210a      	movs	r1, #10
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00d ff8c 	bl	800f1cc <CDC_Transmit_FS>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d0f6      	beq.n	80012a8 <main+0x1d0>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80012ba:	2108      	movs	r1, #8
 80012bc:	4821      	ldr	r0, [pc, #132]	; (8001344 <main+0x26c>)
 80012be:	f001 fe99 	bl	8002ff4 <HAL_GPIO_TogglePin>


	while(1){

		mira_science_data(&huart1, mira_science_Rx_buffer, mira_response_Rx_buffer, 5000);
 80012c2:	f107 021c 	add.w	r2, r7, #28
 80012c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ce:	4819      	ldr	r0, [pc, #100]	; (8001334 <main+0x25c>)
 80012d0:	f000 fc44 	bl	8001b5c <mira_science_data>
		HAL_Delay(100);
 80012d4:	2064      	movs	r0, #100	; 0x64
 80012d6:	f001 f867 	bl	80023a8 <HAL_Delay>
		while (CDC_Transmit_FS (mira_science_Rx_buffer, sizeof(mira_science_Rx_buffer)) == USBD_BUSY);
 80012da:	bf00      	nop
 80012dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e0:	2199      	movs	r1, #153	; 0x99
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00d ff72 	bl	800f1cc <CDC_Transmit_FS>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d0f6      	beq.n	80012dc <main+0x204>
		while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 80012ee:	bf00      	nop
 80012f0:	2101      	movs	r1, #1
 80012f2:	4815      	ldr	r0, [pc, #84]	; (8001348 <main+0x270>)
 80012f4:	f00d ff6a 	bl	800f1cc <CDC_Transmit_FS>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d0f8      	beq.n	80012f0 <main+0x218>

		while (CDC_Transmit_FS (mira_response_Rx_buffer, sizeof(mira_response_Rx_buffer)) == USBD_BUSY);
 80012fe:	bf00      	nop
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	210a      	movs	r1, #10
 8001306:	4618      	mov	r0, r3
 8001308:	f00d ff60 	bl	800f1cc <CDC_Transmit_FS>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d0f6      	beq.n	8001300 <main+0x228>
		while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8001312:	bf00      	nop
 8001314:	2101      	movs	r1, #1
 8001316:	480c      	ldr	r0, [pc, #48]	; (8001348 <main+0x270>)
 8001318:	f00d ff58 	bl	800f1cc <CDC_Transmit_FS>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d0f8      	beq.n	8001314 <main+0x23c>
		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001322:	2110      	movs	r1, #16
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <main+0x26c>)
 8001326:	f001 fe65 	bl	8002ff4 <HAL_GPIO_TogglePin>
		mira_science_data(&huart1, mira_science_Rx_buffer, mira_response_Rx_buffer, 5000);
 800132a:	e7ca      	b.n	80012c2 <main+0x1ea>
 800132c:	0801279c 	.word	0x0801279c
 8001330:	00202d20 	.word	0x00202d20
 8001334:	20000550 	.word	0x20000550
 8001338:	200005e0 	.word	0x200005e0
 800133c:	48001000 	.word	0x48001000
 8001340:	0801282e 	.word	0x0801282e
 8001344:	48000c00 	.word	0x48000c00
 8001348:	08012798 	.word	0x08012798

0800134c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	; 0x58
 8001350:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2244      	movs	r2, #68	; 0x44
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f00e fc9c 	bl	800fc98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800136e:	2000      	movs	r0, #0
 8001370:	f003 f97a 	bl	8004668 <HAL_PWREx_ControlVoltageScaling>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x32>
	{
		Error_Handler();
 800137a:	f000 fb01 	bl	8001980 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800137e:	2321      	movs	r3, #33	; 0x21
 8001380:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001386:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	2303      	movs	r3, #3
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001394:	2301      	movs	r3, #1
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 8001398:	231e      	movs	r3, #30
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139c:	2302      	movs	r3, #2
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fa0f 	bl	80047d0 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x70>
	{
		Error_Handler();
 80013b8:	f000 fae2 	bl	8001980 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013bc:	230f      	movs	r3, #15
 80013be:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c0:	2303      	movs	r3, #3
 80013c2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	2105      	movs	r1, #5
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fe15 	bl	8005004 <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80013e0:	f000 face 	bl	8001980 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80013e4:	f004 f80c 	bl	8005400 <HAL_RCC_EnableCSS>
}
 80013e8:	bf00      	nop
 80013ea:	3758      	adds	r7, #88	; 0x58
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	201a      	movs	r0, #26
 80013fa:	f001 f8d4 	bl	80025a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013fe:	201a      	movs	r0, #26
 8001400:	f001 f8ed 	bl	80025de <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	2026      	movs	r0, #38	; 0x26
 800140a:	f001 f8cc 	bl	80025a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800140e:	2026      	movs	r0, #38	; 0x26
 8001410:	f001 f8e5 	bl	80025de <HAL_NVIC_EnableIRQ>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_I2C1_Init+0x74>)
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <MX_I2C1_Init+0x78>)
 8001420:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_I2C1_Init+0x74>)
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_I2C1_Init+0x7c>)
 8001426:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_I2C1_Init+0x74>)
 8001430:	2201      	movs	r2, #1
 8001432:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_I2C1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_I2C1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_I2C1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_I2C1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <MX_I2C1_Init+0x74>)
 8001454:	f001 fde8 	bl	8003028 <HAL_I2C_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800145e:	f000 fa8f 	bl	8001980 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001462:	2100      	movs	r1, #0
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <MX_I2C1_Init+0x74>)
 8001466:	f001 fe7c 	bl	8003162 <HAL_I2CEx_ConfigAnalogFilter>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001470:	f000 fa86 	bl	8001980 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001474:	2100      	movs	r1, #0
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_I2C1_Init+0x74>)
 8001478:	f001 febe 	bl	80031f8 <HAL_I2CEx_ConfigDigitalFilter>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001482:	f000 fa7d 	bl	8001980 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200003cc 	.word	0x200003cc
 8001490:	40005400 	.word	0x40005400
 8001494:	307075b1 	.word	0x307075b1

08001498 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_SDMMC1_SD_Init+0x3c>)
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <MX_SDMMC1_SD_Init+0x40>)
 80014a0:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_SDMMC1_SD_Init+0x3c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_SDMMC1_SD_Init+0x3c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_SDMMC1_SD_Init+0x3c>)
 80014b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b4:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_SDMMC1_SD_Init+0x3c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <MX_SDMMC1_SD_Init+0x3c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <MX_SDMMC1_SD_Init+0x3c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000420 	.word	0x20000420
 80014d8:	50062400 	.word	0x50062400

080014dc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_SPI1_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <MX_SPI1_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_SPI1_Init+0x74>)
 80014e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_SPI1_Init+0x74>)
 80014f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014fa:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_SPI1_Init+0x74>)
 800150a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_SPI1_Init+0x74>)
 8001512:	2228      	movs	r2, #40	; 0x28
 8001514:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_SPI1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_SPI1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_SPI1_Init+0x74>)
 800152a:	2207      	movs	r2, #7
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_SPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_SPI1_Init+0x74>)
 8001536:	2208      	movs	r2, #8
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_SPI1_Init+0x74>)
 800153c:	f007 f9d7 	bl	80088ee <HAL_SPI_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8001546:	f000 fa1b 	bl	8001980 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200004a0 	.word	0x200004a0
 8001554:	40013000 	.word	0x40013000

08001558 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b092      	sub	sp, #72	; 0x48
 800155c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800155e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	222c      	movs	r2, #44	; 0x2c
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00e fb8d 	bl	800fc98 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <MX_TIM17_Init+0xe4>)
 8001580:	4a2f      	ldr	r2, [pc, #188]	; (8001640 <MX_TIM17_Init+0xe8>)
 8001582:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <MX_TIM17_Init+0xe4>)
 8001586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158a:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_TIM17_Init+0xe4>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <MX_TIM17_Init+0xe4>)
 8001594:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001598:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_TIM17_Init+0xe4>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <MX_TIM17_Init+0xe4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <MX_TIM17_Init+0xe4>)
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015ac:	4823      	ldr	r0, [pc, #140]	; (800163c <MX_TIM17_Init+0xe4>)
 80015ae:	f007 fa41 	bl	8008a34 <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 80015b8:	f000 f9e2 	bl	8001980 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80015bc:	481f      	ldr	r0, [pc, #124]	; (800163c <MX_TIM17_Init+0xe4>)
 80015be:	f007 fa90 	bl	8008ae2 <HAL_TIM_OC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 80015c8:	f000 f9da 	bl	8001980 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d8:	2300      	movs	r3, #0
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM17_Init+0xe4>)
 80015f2:	f007 fbf7 	bl	8008de4 <HAL_TIM_OC_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 80015fc:	f000 f9c0 	bl	8001980 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM17_Init+0xe4>)
 8001624:	f007 fffa 	bl	800961c <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 800162e:	f000 f9a7 	bl	8001980 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3748      	adds	r7, #72	; 0x48
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000504 	.word	0x20000504
 8001640:	40014800 	.word	0x40014800

08001644 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <MX_USART1_UART_Init+0x94>)
 800164c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800168c:	4811      	ldr	r0, [pc, #68]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 800168e:	f008 f861 	bl	8009754 <HAL_UART_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001698:	f000 f972 	bl	8001980 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169c:	2100      	movs	r1, #0
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 80016a0:	f009 fc60 	bl	800af64 <HAL_UARTEx_SetTxFifoThreshold>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 80016aa:	f000 f969 	bl	8001980 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4808      	ldr	r0, [pc, #32]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 80016b2:	f009 fc95 	bl	800afe0 <HAL_UARTEx_SetRxFifoThreshold>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 80016bc:	f000 f960 	bl	8001980 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_USART1_UART_Init+0x90>)
 80016c2:	f009 fc16 	bl	800aef2 <HAL_UARTEx_DisableFifoMode>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 80016cc:	f000 f958 	bl	8001980 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000550 	.word	0x20000550
 80016d8:	40013800 	.word	0x40013800

080016dc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <MX_USART2_UART_Init+0x98>)
 80016e2:	4a25      	ldr	r2, [pc, #148]	; (8001778 <MX_USART2_UART_Init+0x9c>)
 80016e4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <MX_USART2_UART_Init+0x98>)
 80016e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016ec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <MX_USART2_UART_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <MX_USART2_UART_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <MX_USART2_UART_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <MX_USART2_UART_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <MX_USART2_UART_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001720:	2210      	movs	r2, #16
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800172c:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_USART2_UART_Init+0x98>)
 800172e:	f008 f811 	bl	8009754 <HAL_UART_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 8001738:	f000 f922 	bl	8001980 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173c:	2100      	movs	r1, #0
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001740:	f009 fc10 	bl	800af64 <HAL_UARTEx_SetTxFifoThreshold>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 800174a:	f000 f919 	bl	8001980 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001752:	f009 fc45 	bl	800afe0 <HAL_UARTEx_SetRxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 800175c:	f000 f910 	bl	8001980 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_USART2_UART_Init+0x98>)
 8001762:	f009 fbc6 	bl	800aef2 <HAL_UARTEx_DisableFifoMode>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 800176c:	f000 f908 	bl	8001980 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200005e0 	.word	0x200005e0
 8001778:	40004400 	.word	0x40004400

0800177c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_DMA_Init+0x60>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	4a15      	ldr	r2, [pc, #84]	; (80017dc <MX_DMA_Init+0x60>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6493      	str	r3, [r2, #72]	; 0x48
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_DMA_Init+0x60>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_DMA_Init+0x60>)
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <MX_DMA_Init+0x60>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6493      	str	r3, [r2, #72]	; 0x48
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MX_DMA_Init+0x60>)
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	200b      	movs	r0, #11
 80017b8:	f000 fef5 	bl	80025a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017bc:	200b      	movs	r0, #11
 80017be:	f000 ff0e 	bl	80025de <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	200c      	movs	r0, #12
 80017c8:	f000 feed 	bl	80025a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017cc:	200c      	movs	r0, #12
 80017ce:	f000 ff06 	bl	80025de <HAL_NVIC_EnableIRQ>

}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b5d      	ldr	r3, [pc, #372]	; (800196c <MX_GPIO_Init+0x18c>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4a5c      	ldr	r2, [pc, #368]	; (800196c <MX_GPIO_Init+0x18c>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <MX_GPIO_Init+0x18c>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b57      	ldr	r3, [pc, #348]	; (800196c <MX_GPIO_Init+0x18c>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a56      	ldr	r2, [pc, #344]	; (800196c <MX_GPIO_Init+0x18c>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b54      	ldr	r3, [pc, #336]	; (800196c <MX_GPIO_Init+0x18c>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <MX_GPIO_Init+0x18c>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a50      	ldr	r2, [pc, #320]	; (800196c <MX_GPIO_Init+0x18c>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b4e      	ldr	r3, [pc, #312]	; (800196c <MX_GPIO_Init+0x18c>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b4b      	ldr	r3, [pc, #300]	; (800196c <MX_GPIO_Init+0x18c>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a4a      	ldr	r2, [pc, #296]	; (800196c <MX_GPIO_Init+0x18c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b48      	ldr	r3, [pc, #288]	; (800196c <MX_GPIO_Init+0x18c>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <MX_GPIO_Init+0x18c>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a44      	ldr	r2, [pc, #272]	; (800196c <MX_GPIO_Init+0x18c>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b42      	ldr	r3, [pc, #264]	; (800196c <MX_GPIO_Init+0x18c>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <MX_GPIO_Init+0x18c>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a3e      	ldr	r2, [pc, #248]	; (800196c <MX_GPIO_Init+0x18c>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b3c      	ldr	r3, [pc, #240]	; (800196c <MX_GPIO_Init+0x18c>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001886:	2200      	movs	r2, #0
 8001888:	f641 013c 	movw	r1, #6204	; 0x183c
 800188c:	4838      	ldr	r0, [pc, #224]	; (8001970 <MX_GPIO_Init+0x190>)
 800188e:	f001 fb99 	bl	8002fc4 <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	2130      	movs	r1, #48	; 0x30
 8001896:	4837      	ldr	r0, [pc, #220]	; (8001974 <MX_GPIO_Init+0x194>)
 8001898:	f001 fb94 	bl	8002fc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2178      	movs	r1, #120	; 0x78
 80018a0:	4835      	ldr	r0, [pc, #212]	; (8001978 <MX_GPIO_Init+0x198>)
 80018a2:	f001 fb8f 	bl	8002fc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80018a6:	f641 033c 	movw	r3, #6204	; 0x183c
 80018aa:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	482c      	ldr	r0, [pc, #176]	; (8001970 <MX_GPIO_Init+0x190>)
 80018c0:	f001 f9d6 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4826      	ldr	r0, [pc, #152]	; (8001974 <MX_GPIO_Init+0x194>)
 80018da:	f001 f9c9 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 80018de:	f248 0302 	movw	r3, #32770	; 0x8002
 80018e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f001 f9bb 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 80018fa:	2330      	movs	r3, #48	; 0x30
 80018fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4818      	ldr	r0, [pc, #96]	; (8001974 <MX_GPIO_Init+0x194>)
 8001912:	f001 f9ad 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001920:	2301      	movs	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <MX_GPIO_Init+0x190>)
 800192c:	f001 f9a0 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001930:	2378      	movs	r3, #120	; 0x78
 8001932:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_GPIO_Init+0x198>)
 8001948:	f001 f992 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 800194c:	2320      	movs	r3, #32
 800194e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <MX_GPIO_Init+0x19c>)
 8001960:	f001 f986 	bl	8002c70 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	48001000 	.word	0x48001000
 8001974:	48000800 	.word	0x48000800
 8001978:	48000c00 	.word	0x48000c00
 800197c:	48000400 	.word	0x48000400

08001980 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 8001988:	4801      	ldr	r0, [pc, #4]	; (8001990 <Error_Handler+0x10>)
 800198a:	f00e fed7 	bl	801073c <iprintf>
	while (1)
 800198e:	e7fe      	b.n	800198e <Error_Handler+0xe>
 8001990:	080127d0 	.word	0x080127d0

08001994 <CRC16>:
//MIRA communication status
volatile unsigned mira_ready_for_comm = 1;


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
			0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
			0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
			0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 80019a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a4:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 80019a6:	e011      	b.n	80019cc <CRC16+0x38>
	{
		nTemp = *nData++ ^ wCRCWord;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4053      	eors	r3, r2
 80019b6:	737b      	strb	r3, [r7, #13]
		wCRCWord >>= 8;
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	81fb      	strh	r3, [r7, #14]
		wCRCWord ^= wCRCTable[nTemp];
 80019be:	7b7b      	ldrb	r3, [r7, #13]
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <CRC16+0x50>)
 80019c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	4053      	eors	r3, r2
 80019ca:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	807a      	strh	r2, [r7, #2]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1e8      	bne.n	80019a8 <CRC16+0x14>
	}
	return wCRCWord;
 80019d6:	89fb      	ldrh	r3, [r7, #14]

}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	08012830 	.word	0x08012830

080019e8 <mira_command>:


HAL_StatusTypeDef mira_command(UART_HandleTypeDef *huart, uint8_t command, uint8_t reg, uint8_t *data, uint8_t *rxBuffer, uint32_t Timeout){
 80019e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019ec:	b08e      	sub	sp, #56	; 0x38
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	72fb      	strb	r3, [r7, #11]
 80019f8:	4613      	mov	r3, r2
 80019fa:	72bb      	strb	r3, [r7, #10]
 80019fc:	466b      	mov	r3, sp
 80019fe:	469a      	mov	sl, r3

	//Wait that previous instance of communication is done (toggled by HAL_UART_RxCpltCallback)
	//while (!mira_ready_for_comm){HAL_Delay(100);}
	HAL_Delay(5000);
 8001a00:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a04:	f000 fcd0 	bl	80023a8 <HAL_Delay>

	uint8_t length_val = sizeof(data);
 8001a08:	2304      	movs	r3, #4
 8001a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_StatusTypeDef status;
	uint8_t message[10+length_val];
 8001a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a12:	f103 060a 	add.w	r6, r3, #10
 8001a16:	1e73      	subs	r3, r6, #1
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1a:	4632      	mov	r2, r6
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4690      	mov	r8, r2
 8001a20:	4699      	mov	r9, r3
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a36:	4632      	mov	r2, r6
 8001a38:	2300      	movs	r3, #0
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	00eb      	lsls	r3, r5, #3
 8001a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4c:	00e2      	lsls	r2, r4, #3
 8001a4e:	4633      	mov	r3, r6
 8001a50:	3307      	adds	r3, #7
 8001a52:	08db      	lsrs	r3, r3, #3
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	ebad 0d03 	sub.w	sp, sp, r3
 8001a5a:	466b      	mov	r3, sp
 8001a5c:	3300      	adds	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t sync[2] = {0x5a, 0xce};
 8001a60:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8001a64:	843b      	strh	r3, [r7, #32]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, length_val};
 8001a66:	2300      	movs	r3, #0
 8001a68:	773b      	strb	r3, [r7, #28]
 8001a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a6e:	777b      	strb	r3, [r7, #29]
	uint8_t src[1] = {0xc1};
 8001a70:	23c1      	movs	r3, #193	; 0xc1
 8001a72:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8001a74:	23e1      	movs	r3, #225	; 0xe1
 8001a76:	753b      	strb	r3, [r7, #20]
	uint16_t sum = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[0] = sync[0];
 8001a7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	701a      	strb	r2, [r3, #0]
	message[1] = sync[1];
 8001a84:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	705a      	strb	r2, [r3, #1]
	message[2] = length[0];
 8001a8c:	7f3a      	ldrb	r2, [r7, #28]
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a90:	709a      	strb	r2, [r3, #2]
	message[3] = length[1];
 8001a92:	7f7a      	ldrb	r2, [r7, #29]
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	70da      	strb	r2, [r3, #3]
	message[4] = src[0];
 8001a98:	7e3a      	ldrb	r2, [r7, #24]
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	711a      	strb	r2, [r3, #4]
	message[5] = dest[0];
 8001a9e:	7d3a      	ldrb	r2, [r7, #20]
 8001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa2:	715a      	strb	r2, [r3, #5]
	message[6] = command;
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	7afa      	ldrb	r2, [r7, #11]
 8001aa8:	719a      	strb	r2, [r3, #6]
	message[7] = reg;
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aac:	7aba      	ldrb	r2, [r7, #10]
 8001aae:	71da      	strb	r2, [r3, #7]

	int i;
	for (i = 0; i < length_val; i++) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab4:	e00a      	b.n	8001acc <mira_command+0xe4>
		message[8+i] = data[i];
 8001ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	441a      	add	r2, r3
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	3308      	adds	r3, #8
 8001ac0:	7811      	ldrb	r1, [r2, #0]
 8001ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < length_val; i++) {
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	3301      	adds	r3, #1
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
 8001acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbef      	blt.n	8001ab6 <mira_command+0xce>
	}

	sum = CRC16(message+2, 10);
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	3302      	adds	r3, #2
 8001ada:	210a      	movs	r1, #10
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff59 	bl	8001994 <CRC16>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[9+i] = (sum&0xFF00)>>8;
 8001ae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	3309      	adds	r3, #9
 8001af0:	b2d1      	uxtb	r1, r2
 8001af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af4:	54d1      	strb	r1, [r2, r3]
	message[10+i] = (sum&0x00FF);
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	330a      	adds	r3, #10
 8001afa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001afc:	b2d1      	uxtb	r1, r2
 8001afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b00:	54d1      	strb	r1, [r2, r3]

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, sizeof(message), Timeout);
 8001b02:	b2b2      	uxth	r2, r6
 8001b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f007 fe73 	bl	80097f4 <HAL_UART_Transmit>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	status = HAL_UART_Receive_DMA(huart, rxBuffer, sizeof(rxBuffer));
 8001b14:	2204      	movs	r2, #4
 8001b16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f007 ff03 	bl	8009924 <HAL_UART_Receive_DMA>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// Enable receiver and disable transmitter, remember to flip after receive (currently done by HAL_UART_RxCpltCallback)
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2110      	movs	r1, #16
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <mira_command+0x16c>)
 8001b2a:	f001 fa4b 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2120      	movs	r1, #32
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <mira_command+0x16c>)
 8001b34:	f001 fa46 	bl	8002fc4 <HAL_GPIO_WritePin>

	mira_ready_for_comm ^= 1;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <mira_command+0x170>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <mira_command+0x170>)
 8001b42:	6013      	str	r3, [r2, #0]

	return status;
 8001b44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b48:	46d5      	mov	sp, sl

}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3738      	adds	r7, #56	; 0x38
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b54:	48001000 	.word	0x48001000
 8001b58:	20000000 	.word	0x20000000

08001b5c <mira_science_data>:


HAL_StatusTypeDef mira_science_data(UART_HandleTypeDef *huart, uint8_t *science_Rx, uint8_t *response_Rx, uint32_t Timeout){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t mira_target_reg = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
	uint8_t mira_Tx_payload[0] = {};

	// Get the science data and save it to rxBuffer
	status = mira_command(huart, GET_SCIENCE_DATA, mira_target_reg, mira_Tx_payload, science_Rx, Timeout);
 8001b6e:	2040      	movs	r0, #64	; 0x40
 8001b70:	f107 0114 	add.w	r1, r7, #20
 8001b74:	7dfa      	ldrb	r2, [r7, #23]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4601      	mov	r1, r0
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f7ff ff30 	bl	80019e8 <mira_command>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	75bb      	strb	r3, [r7, #22]
	if (status != HAL_OK) {return status;}
 8001b8c:	7dbb      	ldrb	r3, [r7, #22]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <mira_science_data+0x3a>
 8001b92:	7dbb      	ldrb	r3, [r7, #22]
 8001b94:	e018      	b.n	8001bc8 <mira_science_data+0x6c>

	// Mark as read
	uint8_t mira_mark_as_read_Tx_payload[4] = {0x00, 0x00, 0x00, MARK_AS_READ};
 8001b96:	2300      	movs	r3, #0
 8001b98:	743b      	strb	r3, [r7, #16]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	747b      	strb	r3, [r7, #17]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	74bb      	strb	r3, [r7, #18]
 8001ba2:	2381      	movs	r3, #129	; 0x81
 8001ba4:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, CHECK_FOR_READ, mira_mark_as_read_Tx_payload, response_Rx, 5000);
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	2080      	movs	r0, #128	; 0x80
 8001baa:	f107 0210 	add.w	r2, r7, #16
 8001bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	4602      	mov	r2, r0
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff ff13 	bl	80019e8 <mira_command>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	75bb      	strb	r3, [r7, #22]

	// return status
	return status;
 8001bc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_MspInit+0x44>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_MspInit+0x44>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6613      	str	r3, [r2, #96]	; 0x60
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_MspInit+0x44>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_MspInit+0x44>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_MspInit+0x44>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_MspInit+0x44>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0ae      	sub	sp, #184	; 0xb8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	2294      	movs	r2, #148	; 0x94
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00e f82d 	bl	800fc98 <memset>
  if(hi2c->Instance==I2C1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <HAL_I2C_MspInit+0xb0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d13a      	bne.n	8001cbe <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c48:	2340      	movs	r3, #64	; 0x40
 8001c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fcbf 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c60:	f7ff fe8e 	bl	8001980 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_I2C_MspInit+0xb4>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_I2C_MspInit+0xb4>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_I2C_MspInit+0xb4>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c82:	2312      	movs	r3, #18
 8001c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c94:	2304      	movs	r3, #4
 8001c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <HAL_I2C_MspInit+0xb8>)
 8001ca2:	f000 ffe5 	bl	8002c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_I2C_MspInit+0xb4>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_I2C_MspInit+0xb4>)
 8001cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_I2C_MspInit+0xb4>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	37b8      	adds	r7, #184	; 0xb8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40005400 	.word	0x40005400
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0b0      	sub	sp, #192	; 0xc0
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	2294      	movs	r2, #148	; 0x94
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00d ffcf 	bl	800fc98 <memset>
  if(hsd->Instance==SDMMC1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <HAL_SD_MspInit+0xf8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d15e      	bne.n	8001dc2 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0318 	add.w	r3, r7, #24
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fc5f 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001d20:	f7ff fe2e 	bl	8001980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d5a:	f043 0308 	orr.w	r3, r3, #8
 8001d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_SD_MspInit+0xfc>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d6c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d86:	230c      	movs	r3, #12
 8001d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d90:	4619      	mov	r1, r3
 8001d92:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <HAL_SD_MspInit+0x100>)
 8001d94:	f000 ff6c 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001db0:	230c      	movs	r3, #12
 8001db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <HAL_SD_MspInit+0x104>)
 8001dbe:	f000 ff57 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	37c0      	adds	r7, #192	; 0xc0
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	50062400 	.word	0x50062400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000800 	.word	0x48000800
 8001dd8:	48000c00 	.word	0x48000c00

08001ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0x7c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d128      	bne.n	8001e50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e08:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8001e2e:	23f0      	movs	r3, #240	; 0xf0
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4c:	f000 ff10 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40013000 	.word	0x40013000
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_TIM_Base_MspInit+0x38>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10b      	bne.n	8001e8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_TIM_Base_MspInit+0x3c>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_TIM_Base_MspInit+0x3c>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_TIM_Base_MspInit+0x3c>)
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0b0      	sub	sp, #192	; 0xc0
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	2294      	movs	r2, #148	; 0x94
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f00d fee9 	bl	800fc98 <memset>
  if(huart->Instance==USART1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a70      	ldr	r2, [pc, #448]	; (800208c <HAL_UART_MspInit+0x1ec>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	f040 8098 	bne.w	8002002 <HAL_UART_MspInit+0x162>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fb7a 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eea:	f7ff fd49 	bl	8001980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eee:	4b68      	ldr	r3, [pc, #416]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	4a67      	ldr	r2, [pc, #412]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8001efa:	4b65      	ldr	r3, [pc, #404]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b62      	ldr	r3, [pc, #392]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a61      	ldr	r2, [pc, #388]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001f1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f48:	f000 fe92 	bl	8002c70 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001f4c:	4b51      	ldr	r3, [pc, #324]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f4e:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_UART_MspInit+0x1f8>)
 8001f50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001f52:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f54:	2218      	movs	r2, #24
 8001f56:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f58:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5e:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f82:	4844      	ldr	r0, [pc, #272]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f84:	f000 fb46 	bl	8002614 <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001f8e:	f7ff fcf7 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a3f      	ldr	r2, [pc, #252]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f96:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f98:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <HAL_UART_MspInit+0x1f4>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fa0:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <HAL_UART_MspInit+0x200>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fa6:	2219      	movs	r2, #25
 8001fa8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001faa:	4b3c      	ldr	r3, [pc, #240]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fac:	2210      	movs	r2, #16
 8001fae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fce:	4b33      	ldr	r3, [pc, #204]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fd4:	4831      	ldr	r0, [pc, #196]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fd6:	f000 fb1d 	bl	8002614 <HAL_DMA_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8001fe0:	f7ff fcce 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a2d      	ldr	r2, [pc, #180]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fe8:	679a      	str	r2, [r3, #120]	; 0x78
 8001fea:	4a2c      	ldr	r2, [pc, #176]	; (800209c <HAL_UART_MspInit+0x1fc>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2025      	movs	r0, #37	; 0x25
 8001ff6:	f000 fad6 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffa:	2025      	movs	r0, #37	; 0x25
 8001ffc:	f000 faef 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002000:	e040      	b.n	8002084 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_UART_MspInit+0x204>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d13b      	bne.n	8002084 <HAL_UART_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002010:	2300      	movs	r3, #0
 8002012:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fadd 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8002024:	f7ff fcac 	bl	8001980 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 800202e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002032:	6593      	str	r3, [r2, #88]	; 0x58
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_UART_MspInit+0x1f0>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002058:	230c      	movs	r3, #12
 800205a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002070:	2307      	movs	r3, #7
 8002072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002080:	f000 fdf6 	bl	8002c70 <HAL_GPIO_Init>
}
 8002084:	bf00      	nop
 8002086:	37c0      	adds	r7, #192	; 0xc0
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40013800 	.word	0x40013800
 8002090:	40021000 	.word	0x40021000
 8002094:	20000670 	.word	0x20000670
 8002098:	40020008 	.word	0x40020008
 800209c:	200006d0 	.word	0x200006d0
 80020a0:	4002001c 	.word	0x4002001c
 80020a4:	40004400 	.word	0x40004400

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	HAL_RCC_NMI_IRQHandler();
 80020ac:	f003 f9b8 	bl	8005420 <HAL_RCC_NMI_IRQHandler>
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80020b0:	e7fe      	b.n	80020b0 <NMI_Handler+0x8>

080020b2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80020b6:	e7fe      	b.n	80020b6 <HardFault_Handler+0x4>

080020b8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80020bc:	e7fe      	b.n	80020bc <MemManage_Handler+0x4>

080020be <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80020c2:	e7fe      	b.n	80020c2 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80020c8:	e7fe      	b.n	80020c8 <UsageFault_Handler+0x4>

080020ca <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80020f8:	f000 f936 	bl	8002368 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA1_Channel1_IRQHandler+0x10>)
 8002106:	f000 fc63 	bl	80029d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000670 	.word	0x20000670

08002114 <DMA1_Channel2_IRQHandler>:

/**
 * @brief This function handles DMA1 channel2 global interrupt.
 */
void DMA1_Channel2_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

	/* USER CODE END DMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <DMA1_Channel2_IRQHandler+0x10>)
 800211a:	f000 fc59 	bl	80029d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

	/* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200006d0 	.word	0x200006d0

08002128 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
 * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
 */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002142:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800215a:	701a      	strb	r2, [r3, #0]
	/* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
	HAL_TIM_IRQHandler(&htim17);
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 800215e:	f006 fd21 	bl	8008ba4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

	/* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000d7c 	.word	0x20000d7c
 800216c:	20000d7d 	.word	0x20000d7d
 8002170:	20000504 	.word	0x20000504

08002174 <USART1_IRQHandler>:
/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)

{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <USART1_IRQHandler+0x10>)
 800217a:	f007 fc29 	bl	80099d0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000550 	.word	0x20000550

08002188 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <USART2_IRQHandler+0x90>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002194:	b29b      	uxth	r3, r3
 8002196:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <USART2_IRQHandler+0x94>)
 800219a:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <USART2_IRQHandler+0x98>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <USART2_IRQHandler+0x94>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	b2c8      	uxtb	r0, r1
 80021aa:	491c      	ldr	r1, [pc, #112]	; (800221c <USART2_IRQHandler+0x94>)
 80021ac:	7008      	strb	r0, [r1, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b0a      	cmp	r3, #10
 80021b8:	d126      	bne.n	8002208 <USART2_IRQHandler+0x80>
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <USART2_IRQHandler+0x9c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d022      	beq.n	8002208 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <USART2_IRQHandler+0x98>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <USART2_IRQHandler+0x94>)
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	4413      	add	r3, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <USART2_IRQHandler+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <USART2_IRQHandler+0xa0>)
 80021dc:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <USART2_IRQHandler+0x9c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f083 0301 	eor.w	r3, r3, #1
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <USART2_IRQHandler+0x9c>)
 80021e8:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <USART2_IRQHandler+0x94>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <USART2_IRQHandler+0x98>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <USART2_IRQHandler+0xa4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d103      	bne.n	8002202 <USART2_IRQHandler+0x7a>
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <USART2_IRQHandler+0x98>)
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <USART2_IRQHandler+0xa8>)
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e002      	b.n	8002208 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <USART2_IRQHandler+0x98>)
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <USART2_IRQHandler+0xa4>)
 8002206:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <USART2_IRQHandler+0x90>)
 800220a:	f007 fbe1 	bl	80099d0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
	/* USER CODE END USART2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200005e0 	.word	0x200005e0
 800221c:	20000d74 	.word	0x20000d74
 8002220:	20000d70 	.word	0x20000d70
 8002224:	20000004 	.word	0x20000004
 8002228:	20000d78 	.word	0x20000d78
 800222c:	20000730 	.word	0x20000730
 8002230:	20000a50 	.word	0x20000a50

08002234 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB OTG FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <OTG_FS_IRQHandler+0x10>)
 800223a:	f001 f97c 	bl	8003536 <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000226c 	.word	0x2000226c

08002248 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <SystemInit+0x20>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <SystemInit+0x20>)
 8002254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002270:	f7ff ffea 	bl	8002248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <LoopForever+0xe>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <LoopForever+0x16>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229a:	f00d fcc3 	bl	800fc24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800229e:	f7fe ff1b 	bl	80010d8 <main>

080022a2 <LoopForever>:

LoopForever:
    b LoopForever
 80022a2:	e7fe      	b.n	80022a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80022b0:	08012ea8 	.word	0x08012ea8
  ldr r2, =_sbss
 80022b4:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80022b8:	200029ac 	.word	0x200029ac

080022bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_IRQHandler>

080022be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 f961 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ce:	200f      	movs	r0, #15
 80022d0:	f000 f80e 	bl	80022f0 <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	e001      	b.n	80022e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e0:	f7ff fc76 	bl	8001bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e4:	79fb      	ldrb	r3, [r7, #7]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_InitTick+0x6c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d023      	beq.n	800234c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_InitTick+0x70>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_InitTick+0x6c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002312:	fbb3 f3f1 	udiv	r3, r3, r1
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f96d 	bl	80025fa <HAL_SYSTICK_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b0f      	cmp	r3, #15
 800232a:	d809      	bhi.n	8002340 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232c:	2200      	movs	r2, #0
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	f000 f937 	bl	80025a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_InitTick+0x74>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e007      	b.n	8002350 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e004      	b.n	8002350 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e001      	b.n	8002350 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000010 	.word	0x20000010
 8002360:	20000008 	.word	0x20000008
 8002364:	2000000c 	.word	0x2000000c

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000010 	.word	0x20000010
 800238c:	20000d80 	.word	0x20000d80

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000d80 	.word	0x20000d80

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_Delay+0x44>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000010 	.word	0x20000010

080023f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60d3      	str	r3, [r2, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0b      	blt.n	800247e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <__NVIC_EnableIRQ+0x38>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2001      	movs	r0, #1
 8002476:	fa00 f202 	lsl.w	r2, r0, r2
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	; (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002570:	f7ff ff8e 	bl	8002490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

08002590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff29 	bl	80023f0 <__NVIC_SetPriorityGrouping>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff3e 	bl	8002438 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff8e 	bl	80024e4 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5d 	bl	8002490 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff31 	bl	8002454 <__NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffa2 	bl	800254c <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e08d      	b.n	8002742 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_DMA_Init+0x138>)
 800262e:	429a      	cmp	r2, r3
 8002630:	d80f      	bhi.n	8002652 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b45      	ldr	r3, [pc, #276]	; (8002750 <HAL_DMA_Init+0x13c>)
 800263a:	4413      	add	r3, r2
 800263c:	4a45      	ldr	r2, [pc, #276]	; (8002754 <HAL_DMA_Init+0x140>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	009a      	lsls	r2, r3, #2
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a42      	ldr	r2, [pc, #264]	; (8002758 <HAL_DMA_Init+0x144>)
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
 8002650:	e00e      	b.n	8002670 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <HAL_DMA_Init+0x148>)
 800265a:	4413      	add	r3, r2
 800265c:	4a3d      	ldr	r2, [pc, #244]	; (8002754 <HAL_DMA_Init+0x140>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	009a      	lsls	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a3c      	ldr	r2, [pc, #240]	; (8002760 <HAL_DMA_Init+0x14c>)
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa72 	bl	8002bac <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026d0:	d102      	bne.n	80026d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026ec:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_DMA_Init+0x104>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d80c      	bhi.n	8002718 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa92 	bl	8002c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	e008      	b.n	800272a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40020407 	.word	0x40020407
 8002750:	bffdfff8 	.word	0xbffdfff8
 8002754:	cccccccd 	.word	0xcccccccd
 8002758:	40020000 	.word	0x40020000
 800275c:	bffdfbf8 	.word	0xbffdfbf8
 8002760:	40020400 	.word	0x40020400

08002764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_DMA_Start_IT+0x20>
 8002780:	2302      	movs	r3, #2
 8002782:	e066      	b.n	8002852 <HAL_DMA_Start_IT+0xee>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d155      	bne.n	8002844 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f9b6 	bl	8002b2e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 020e 	orr.w	r2, r2, #14
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e00f      	b.n	80027fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0204 	bic.w	r2, r2, #4
 80027ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 020a 	orr.w	r2, r2, #10
 80027fa:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002818:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002830:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e005      	b.n	8002850 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800284c:	2302      	movs	r3, #2
 800284e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002850:	7dfb      	ldrb	r3, [r7, #23]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d008      	beq.n	8002884 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e040      	b.n	8002906 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 020e 	bic.w	r2, r2, #14
 8002892:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f003 021c 	and.w	r2, r3, #28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d005      	beq.n	8002936 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e047      	b.n	80029c6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 020e 	bic.w	r2, r2, #14
 8002944:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002964:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f003 021c 	and.w	r2, r3, #28
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002982:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00c      	beq.n	80029a6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029a4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
    }
  }
  return status;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f003 031c 	and.w	r3, r3, #28
 80029f0:	2204      	movs	r2, #4
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d026      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x7a>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d021      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f003 021c 	and.w	r2, r3, #28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2104      	movs	r1, #4
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d071      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a48:	e06c      	b.n	8002b24 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 031c 	and.w	r3, r3, #28
 8002a52:	2202      	movs	r2, #2
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02e      	beq.n	8002abc <HAL_DMA_IRQHandler+0xec>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d029      	beq.n	8002abc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 020a 	bic.w	r2, r2, #10
 8002a84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f003 021c 	and.w	r2, r3, #28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d038      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002aba:	e033      	b.n	8002b24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f003 031c 	and.w	r3, r3, #28
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02a      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d025      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 020e 	bic.w	r2, r2, #14
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 021c 	and.w	r2, r3, #28
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
}
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b44:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b56:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f003 021c 	and.w	r2, r3, #28
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d108      	bne.n	8002b8e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b8c:	e007      	b.n	8002b9e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	60da      	str	r2, [r3, #12]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d80a      	bhi.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bcc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6493      	str	r3, [r2, #72]	; 0x48
 8002bd4:	e007      	b.n	8002be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	009a      	lsls	r2, r3, #2
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002be0:	4413      	add	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3b08      	subs	r3, #8
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40020407 	.word	0x40020407
 8002c1c:	4002081c 	.word	0x4002081c
 8002c20:	cccccccd 	.word	0xcccccccd
 8002c24:	40020880 	.word	0x40020880

08002c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	461a      	mov	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	1000823f 	.word	0x1000823f
 8002c6c:	40020940 	.word	0x40020940

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7e:	e166      	b.n	8002f4e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8158 	beq.w	8002f48 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d005      	beq.n	8002cb0 <HAL_GPIO_Init+0x40>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d130      	bne.n	8002d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 0201 	and.w	r2, r3, #1
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d017      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d123      	bne.n	8002da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	08da      	lsrs	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3208      	adds	r2, #8
 8002d9c:	6939      	ldr	r1, [r7, #16]
 8002d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b2 	beq.w	8002f48 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_GPIO_Init+0x2fc>)
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	4a60      	ldr	r2, [pc, #384]	; (8002f6c <HAL_GPIO_Init+0x2fc>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6613      	str	r3, [r2, #96]	; 0x60
 8002df0:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <HAL_GPIO_Init+0x2fc>)
 8002df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dfc:	4a5c      	ldr	r2, [pc, #368]	; (8002f70 <HAL_GPIO_Init+0x300>)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e26:	d02b      	beq.n	8002e80 <HAL_GPIO_Init+0x210>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a52      	ldr	r2, [pc, #328]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d025      	beq.n	8002e7c <HAL_GPIO_Init+0x20c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a51      	ldr	r2, [pc, #324]	; (8002f78 <HAL_GPIO_Init+0x308>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d01f      	beq.n	8002e78 <HAL_GPIO_Init+0x208>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a50      	ldr	r2, [pc, #320]	; (8002f7c <HAL_GPIO_Init+0x30c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d019      	beq.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a4f      	ldr	r2, [pc, #316]	; (8002f80 <HAL_GPIO_Init+0x310>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <HAL_GPIO_Init+0x200>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a4e      	ldr	r2, [pc, #312]	; (8002f84 <HAL_GPIO_Init+0x314>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00d      	beq.n	8002e6c <HAL_GPIO_Init+0x1fc>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a4d      	ldr	r2, [pc, #308]	; (8002f88 <HAL_GPIO_Init+0x318>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d007      	beq.n	8002e68 <HAL_GPIO_Init+0x1f8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a4c      	ldr	r2, [pc, #304]	; (8002f8c <HAL_GPIO_Init+0x31c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d101      	bne.n	8002e64 <HAL_GPIO_Init+0x1f4>
 8002e60:	2307      	movs	r3, #7
 8002e62:	e00e      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e64:	2308      	movs	r3, #8
 8002e66:	e00c      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e68:	2306      	movs	r3, #6
 8002e6a:	e00a      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e6c:	2305      	movs	r3, #5
 8002e6e:	e008      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e006      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e74:	2303      	movs	r3, #3
 8002e76:	e004      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e002      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e80:	2300      	movs	r3, #0
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	f002 0203 	and.w	r2, r2, #3
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	4093      	lsls	r3, r2
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e92:	4937      	ldr	r1, [pc, #220]	; (8002f70 <HAL_GPIO_Init+0x300>)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	3302      	adds	r3, #2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ec4:	4a32      	ldr	r2, [pc, #200]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eee:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ef4:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f47f ae91 	bne.w	8002c80 <HAL_GPIO_Init+0x10>
  }
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010000 	.word	0x40010000
 8002f74:	48000400 	.word	0x48000400
 8002f78:	48000800 	.word	0x48000800
 8002f7c:	48000c00 	.word	0x48000c00
 8002f80:	48001000 	.word	0x48001000
 8002f84:	48001400 	.word	0x48001400
 8002f88:	48001800 	.word	0x48001800
 8002f8c:	48001c00 	.word	0x48001c00
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e001      	b.n	8002fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd4:	787b      	ldrb	r3, [r7, #1]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43d9      	mvns	r1, r3
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	400b      	ands	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e081      	b.n	800313e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe fde2 	bl	8001c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003078:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003088:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	e006      	b.n	80030b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d104      	bne.n	80030c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003154:	b2db      	uxtb	r3, r3
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d138      	bne.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003182:	2302      	movs	r3, #2
 8003184:	e032      	b.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2224      	movs	r2, #36	; 0x24
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d139      	bne.n	8003282 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003218:	2302      	movs	r3, #2
 800321a:	e033      	b.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800324a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003292:	b08f      	sub	sp, #60	; 0x3c
 8003294:	af0a      	add	r7, sp, #40	; 0x28
 8003296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e116      	b.n	80034d0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f00c f8cd 	bl	800f45c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2203      	movs	r2, #3
 80032c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f008 fdc8 	bl	800be76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	687e      	ldr	r6, [r7, #4]
 80032ee:	466d      	mov	r5, sp
 80032f0:	f106 0410 	add.w	r4, r6, #16
 80032f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003300:	e885 0003 	stmia.w	r5, {r0, r1}
 8003304:	1d33      	adds	r3, r6, #4
 8003306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003308:	6838      	ldr	r0, [r7, #0]
 800330a:	f008 fcdb 	bl	800bcc4 <USB_CoreInit>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0d7      	b.n	80034d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f008 fdb6 	bl	800be98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e04a      	b.n	80033c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	333d      	adds	r3, #61	; 0x3d
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	333c      	adds	r3, #60	; 0x3c
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	b298      	uxth	r0, r3
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3344      	adds	r3, #68	; 0x44
 800336e:	4602      	mov	r2, r0
 8003370:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3340      	adds	r3, #64	; 0x40
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	3348      	adds	r3, #72	; 0x48
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334c      	adds	r3, #76	; 0x4c
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3354      	adds	r3, #84	; 0x54
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	3301      	adds	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d3af      	bcc.n	8003332 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	e044      	b.n	8003462 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	3301      	adds	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	d3b5      	bcc.n	80033d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	687e      	ldr	r6, [r7, #4]
 8003474:	466d      	mov	r5, sp
 8003476:	f106 0410 	add.w	r4, r6, #16
 800347a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003486:	e885 0003 	stmia.w	r5, {r0, r1}
 800348a:	1d33      	adds	r3, r6, #4
 800348c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348e:	6838      	ldr	r0, [r7, #0]
 8003490:	f008 fd4e 	bl	800bf30 <USB_DevInit>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e014      	b.n	80034d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f001 f882 	bl	80045c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f009 fdd6 	bl	800d07a <USB_DevDisconnect>

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_PCD_Start+0x1c>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e01c      	b.n	800352e <HAL_PCD_Start+0x56>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f008 fc9d 	bl	800be54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f009 fd8a 	bl	800d038 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003536:	b590      	push	{r4, r7, lr}
 8003538:	b08d      	sub	sp, #52	; 0x34
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f009 fe48 	bl	800d1e2 <USB_GetMode>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 847e 	bne.w	8003e56 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f009 fdac 	bl	800d0bc <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8474 	beq.w	8003e54 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f009 fd99 	bl	800d0bc <USB_ReadInterrupts>
 800358a:	4603      	mov	r3, r0
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	d107      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f002 0202 	and.w	r2, r2, #2
 80035a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f009 fd87 	bl	800d0bc <USB_ReadInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d161      	bne.n	800367c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0210 	bic.w	r2, r2, #16
 80035c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	0c5b      	lsrs	r3, r3, #17
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d124      	bne.n	800363e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d035      	beq.n	800366c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800360a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	6a38      	ldr	r0, [r7, #32]
 8003614:	f009 fbbe 	bl	800cd94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003624:	441a      	add	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003636:	441a      	add	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
 800363c:	e016      	b.n	800366c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	0c5b      	lsrs	r3, r3, #17
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	2b06      	cmp	r3, #6
 8003648:	d110      	bne.n	800366c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003650:	2208      	movs	r2, #8
 8003652:	4619      	mov	r1, r3
 8003654:	6a38      	ldr	r0, [r7, #32]
 8003656:	f009 fb9d 	bl	800cd94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003666:	441a      	add	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0210 	orr.w	r2, r2, #16
 800367a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f009 fd1b 	bl	800d0bc <USB_ReadInterrupts>
 8003686:	4603      	mov	r3, r0
 8003688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003690:	f040 80a7 	bne.w	80037e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f009 fd20 	bl	800d0e2 <USB_ReadDevAllOutEpInterrupt>
 80036a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80036a4:	e099      	b.n	80037da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 808e 	beq.w	80037ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f009 fd44 	bl	800d14a <USB_ReadDevOutEPInterrupt>
 80036c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	461a      	mov	r2, r3
 80036dc:	2301      	movs	r3, #1
 80036de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fe96 	bl	8004414 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	2308      	movs	r3, #8
 8003702:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fed2 	bl	80044b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003722:	461a      	mov	r2, r3
 8003724:	2310      	movs	r3, #16
 8003726:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d030      	beq.n	8003794 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d109      	bne.n	8003752 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003750:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	78db      	ldrb	r3, [r3, #3]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d108      	bne.n	8003782 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f00b ffb1 	bl	800f6e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378e:	461a      	mov	r2, r3
 8003790:	2302      	movs	r3, #2
 8003792:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037aa:	461a      	mov	r2, r3
 80037ac:	2320      	movs	r3, #32
 80037ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	3301      	adds	r3, #1
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f47f af62 	bne.w	80036a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f009 fc68 	bl	800d0bc <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f6:	f040 80a4 	bne.w	8003942 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f009 fc89 	bl	800d116 <USB_ReadDevAllInEpInterrupt>
 8003804:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800380a:	e096      	b.n	800393a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 808b 	beq.w	800392e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f009 fcaf 	bl	800d186 <USB_ReadDevInEPInterrupt>
 8003828:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	2201      	movs	r2, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	43db      	mvns	r3, r3
 800384e:	69f9      	ldr	r1, [r7, #28]
 8003850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003854:	4013      	ands	r3, r2
 8003856:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	461a      	mov	r2, r3
 8003866:	2301      	movs	r3, #1
 8003868:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	b2db      	uxtb	r3, r3
 800386e:	4619      	mov	r1, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f00b fea2 	bl	800f5ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	461a      	mov	r2, r3
 800388e:	2308      	movs	r3, #8
 8003890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a8:	461a      	mov	r2, r3
 80038aa:	2310      	movs	r3, #16
 80038ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	461a      	mov	r2, r3
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d023      	beq.n	800391c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d6:	6a38      	ldr	r0, [r7, #32]
 80038d8:	f008 fc76 	bl	800c1c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	3338      	adds	r3, #56	; 0x38
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d108      	bne.n	800390a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2200      	movs	r2, #0
 80038fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f00b feff 	bl	800f708 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003916:	461a      	mov	r2, r3
 8003918:	2302      	movs	r3, #2
 800391a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fcea 	bl	8004302 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	3301      	adds	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f af65 	bne.w	800380c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f009 fbb8 	bl	800d0bc <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003956:	d122      	bne.n	800399e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003972:	2b01      	cmp	r3, #1
 8003974:	d108      	bne.n	8003988 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800397e:	2100      	movs	r1, #0
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fe45 	bl	8004610 <HAL_PCDEx_LPM_Callback>
 8003986:	e002      	b.n	800398e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f00b fe83 	bl	800f694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800399c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f009 fb8a 	bl	800d0bc <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b2:	d112      	bne.n	80039da <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d102      	bne.n	80039ca <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f00b fe3f 	bl	800f648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f009 fb6c 	bl	800d0bc <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ee:	d121      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80039fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d111      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a24:	2101      	movs	r1, #1
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fdf2 	bl	8004610 <HAL_PCDEx_LPM_Callback>
 8003a2c:	e002      	b.n	8003a34 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f00b fe0a 	bl	800f648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f009 fb3f 	bl	800d0bc <USB_ReadInterrupts>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	f040 80b5 	bne.w	8003bb6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2110      	movs	r1, #16
 8003a66:	4618      	mov	r0, r3
 8003a68:	f008 fbae 	bl	800c1c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a70:	e046      	b.n	8003b00 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a96:	0151      	lsls	r1, r2, #5
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003aa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ab8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aca:	0151      	lsls	r1, r2, #5
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	440a      	add	r2, r1
 8003ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ad8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003af8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	3301      	adds	r3, #1
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d3b3      	bcc.n	8003a72 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b36:	f043 030b 	orr.w	r3, r3, #11
 8003b3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4c:	f043 030b 	orr.w	r3, r3, #11
 8003b50:	6453      	str	r3, [r2, #68]	; 0x44
 8003b52:	e015      	b.n	8003b80 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b66:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7a:	f043 030b 	orr.w	r3, r3, #11
 8003b7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f009 fb4f 	bl	800d244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f009 fa7e 	bl	800d0bc <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bca:	d124      	bne.n	8003c16 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f009 fb14 	bl	800d1fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f008 fb71 	bl	800c2c2 <USB_GetDevSpeed>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681c      	ldr	r4, [r3, #0]
 8003bec:	f001 fbd0 	bl	8005390 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f008 f88e 	bl	800bd1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f00b fd02 	bl	800f60a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f009 fa4e 	bl	800d0bc <USB_ReadInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d10a      	bne.n	8003c40 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f00b fcdf 	bl	800f5ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f002 0208 	and.w	r2, r2, #8
 8003c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f009 fa39 	bl	800d0bc <USB_ReadInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b80      	cmp	r3, #128	; 0x80
 8003c52:	d122      	bne.n	8003c9a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c60:	2301      	movs	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
 8003c64:	e014      	b.n	8003c90 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d105      	bne.n	8003c8a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fb0b 	bl	80042a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3e5      	bcc.n	8003c66 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f009 fa0c 	bl	800d0bc <USB_ReadInterrupts>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cae:	d13b      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	e02b      	b.n	8003d0e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3340      	adds	r3, #64	; 0x40
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d115      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da12      	bge.n	8003d08 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	333f      	adds	r3, #63	; 0x3f
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 facc 	bl	80042a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d3ce      	bcc.n	8003cb6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f009 f9c5 	bl	800d0bc <USB_ReadInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d3c:	d155      	bne.n	8003dea <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d3e:	2301      	movs	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	e045      	b.n	8003dd0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d12e      	bne.n	8003dca <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da2b      	bge.n	8003dca <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d121      	bne.n	8003dca <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc6:	6053      	str	r3, [r2, #4]
            break;
 8003dc8:	e007      	b.n	8003dda <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	3301      	adds	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3b4      	bcc.n	8003d44 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f009 f964 	bl	800d0bc <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d10a      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00b fc93 	bl	800f72c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f009 f94e 	bl	800d0bc <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d115      	bne.n	8003e56 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f00b fc83 	bl	800f748 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	e000      	b.n	8003e56 <HAL_PCD_IRQHandler+0x920>
      return;
 8003e54:	bf00      	nop
    }
  }
}
 8003e56:	3734      	adds	r7, #52	; 0x34
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd90      	pop	{r4, r7, pc}

08003e5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_PCD_SetAddress+0x1a>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e013      	b.n	8003e9e <HAL_PCD_SetAddress+0x42>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f009 f8ac 	bl	800cfec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	4608      	mov	r0, r1
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	70fb      	strb	r3, [r7, #3]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	803b      	strh	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da0f      	bge.n	8003eec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	3338      	adds	r3, #56	; 0x38
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	705a      	strb	r2, [r3, #1]
 8003eea:	e00f      	b.n	8003f0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f18:	883a      	ldrh	r2, [r7, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	78ba      	ldrb	r2, [r7, #2]
 8003f22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f36:	78bb      	ldrb	r3, [r7, #2]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d102      	bne.n	8003f42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_PCD_EP_Open+0xaa>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e00e      	b.n	8003f6e <HAL_PCD_EP_Open+0xc8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f008 f9ce 	bl	800c300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	da0f      	bge.n	8003faa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	f003 020f 	and.w	r2, r3, #15
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	3338      	adds	r3, #56	; 0x38
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	705a      	strb	r2, [r3, #1]
 8003fa8:	e00f      	b.n	8003fca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_EP_Close+0x6e>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e00e      	b.n	8004002 <HAL_PCD_EP_Close+0x8c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f008 fa0c 	bl	800c410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	460b      	mov	r3, r1
 8004018:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800401a:	7afb      	ldrb	r3, [r7, #11]
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2200      	movs	r2, #0
 8004044:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800404c:	7afb      	ldrb	r3, [r7, #11]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	b2da      	uxtb	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004058:	7afb      	ldrb	r3, [r7, #11]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6979      	ldr	r1, [r7, #20]
 8004068:	4618      	mov	r0, r3
 800406a:	f008 fc8d 	bl	800c988 <USB_EP0StartXfer>
 800406e:	e005      	b.n	800407c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	4618      	mov	r0, r3
 8004078:	f008 faa6 	bl	800c5c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80040a8:	681b      	ldr	r3, [r3, #0]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	460b      	mov	r3, r1
 80040c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	f003 020f 	and.w	r2, r3, #15
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	3338      	adds	r3, #56	; 0x38
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	3304      	adds	r3, #4
 80040dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2201      	movs	r2, #1
 80040f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f6:	7afb      	ldrb	r3, [r7, #11]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004102:	7afb      	ldrb	r3, [r7, #11]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6979      	ldr	r1, [r7, #20]
 8004112:	4618      	mov	r0, r3
 8004114:	f008 fc38 	bl	800c988 <USB_EP0StartXfer>
 8004118:	e005      	b.n	8004126 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6979      	ldr	r1, [r7, #20]
 8004120:	4618      	mov	r0, r3
 8004122:	f008 fa51 	bl	800c5c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d901      	bls.n	800414e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e04e      	b.n	80041ec <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800414e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004152:	2b00      	cmp	r3, #0
 8004154:	da0f      	bge.n	8004176 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	3338      	adds	r3, #56	; 0x38
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	705a      	strb	r2, [r3, #1]
 8004174:	e00d      	b.n	8004192 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_PCD_EP_SetStall+0x82>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e01c      	b.n	80041ec <HAL_PCD_EP_SetStall+0xbc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f008 fe3f 	bl	800ce44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d108      	bne.n	80041e2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f009 f831 	bl	800d244 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d901      	bls.n	8004212 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e042      	b.n	8004298 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004216:	2b00      	cmp	r3, #0
 8004218:	da0f      	bge.n	800423a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	3338      	adds	r3, #56	; 0x38
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	3304      	adds	r3, #4
 8004230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	705a      	strb	r2, [r3, #1]
 8004238:	e00f      	b.n	800425a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	f003 020f 	and.w	r2, r3, #15
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	3304      	adds	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_PCD_EP_ClrStall+0x86>
 8004276:	2302      	movs	r3, #2
 8004278:	e00e      	b.n	8004298 <HAL_PCD_EP_ClrStall+0xa4>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	4618      	mov	r0, r3
 800428a:	f008 fe49 	bl	800cf20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80042ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	da0c      	bge.n	80042ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	3338      	adds	r3, #56	; 0x38
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	3304      	adds	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e00c      	b.n	80042e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	3304      	adds	r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68f9      	ldr	r1, [r7, #12]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f008 fc6c 	bl	800cbcc <USB_EPStopXfer>
 80042f4:	4603      	mov	r3, r0
 80042f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042f8:	7afb      	ldrb	r3, [r7, #11]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b088      	sub	sp, #32
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	3338      	adds	r3, #56	; 0x38
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1a      	ldr	r2, [r3, #32]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	429a      	cmp	r2, r3
 8004334:	d901      	bls.n	800433a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e067      	b.n	800440a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	429a      	cmp	r2, r3
 800434e:	d902      	bls.n	8004356 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3303      	adds	r3, #3
 800435a:	089b      	lsrs	r3, r3, #2
 800435c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800435e:	e026      	b.n	80043ae <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	429a      	cmp	r2, r3
 8004374:	d902      	bls.n	800437c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3303      	adds	r3, #3
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6919      	ldr	r1, [r3, #16]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	b29b      	uxth	r3, r3
 8004390:	6978      	ldr	r0, [r7, #20]
 8004392:	f008 fcc5 	bl	800cd20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	441a      	add	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d809      	bhi.n	80043d8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d203      	bcs.n	80043d8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1c3      	bne.n	8004360 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d811      	bhi.n	8004408 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	2201      	movs	r2, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	6939      	ldr	r1, [r7, #16]
 8004400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004404:	4013      	ands	r3, r2
 8004406:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	333c      	adds	r3, #60	; 0x3c
 800442c:	3304      	adds	r3, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <PCD_EP_OutXfrComplete_int+0x98>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d124      	bne.n	8004494 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	461a      	mov	r2, r3
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	6093      	str	r3, [r2, #8]
 8004468:	e01a      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	2320      	movs	r3, #32
 8004484:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f00b f879 	bl	800f584 <HAL_PCD_DataOutStageCallback>
 8004492:	e005      	b.n	80044a0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f00b f872 	bl	800f584 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	4f54310a 	.word	0x4f54310a

080044b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	333c      	adds	r3, #60	; 0x3c
 80044c8:	3304      	adds	r3, #4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <PCD_EP_OutSetupPacket_int+0x64>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d90e      	bls.n	8004504 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fc:	461a      	mov	r2, r3
 80044fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004502:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f00b f82b 	bl	800f560 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	4f54300a 	.word	0x4f54300a

08004518 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
 8004524:	4613      	mov	r3, r2
 8004526:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004536:	883b      	ldrh	r3, [r7, #0]
 8004538:	0419      	lsls	r1, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	430a      	orrs	r2, r1
 8004542:	629a      	str	r2, [r3, #40]	; 0x28
 8004544:	e028      	b.n	8004598 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	e00d      	b.n	8004576 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	3340      	adds	r3, #64	; 0x40
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	3301      	adds	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	3b01      	subs	r3, #1
 800457c:	429a      	cmp	r2, r3
 800457e:	d3ec      	bcc.n	800455a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004580:	883b      	ldrh	r3, [r7, #0]
 8004582:	0418      	lsls	r0, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	3b01      	subs	r3, #1
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4302      	orrs	r2, r0
 8004590:	3340      	adds	r3, #64	; 0x40
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	f043 0303 	orr.w	r3, r3, #3
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <HAL_PWREx_GetVoltageRange+0x3c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d102      	bne.n	8004640 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800463a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463e:	e00b      	b.n	8004658 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464e:	d102      	bne.n	8004656 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004654:	e000      	b.n	8004658 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004656:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40007000 	.word	0x40007000

08004668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d141      	bne.n	80046fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004676:	4b4b      	ldr	r3, [pc, #300]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	d131      	bne.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004684:	4b47      	ldr	r3, [pc, #284]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468a:	4a46      	ldr	r2, [pc, #280]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004694:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800469c:	4a41      	ldr	r2, [pc, #260]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80046a4:	4b40      	ldr	r3, [pc, #256]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2232      	movs	r2, #50	; 0x32
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	4a3f      	ldr	r2, [pc, #252]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	0c9b      	lsrs	r3, r3, #18
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ba:	e002      	b.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b01      	subs	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c2:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d102      	bne.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f2      	bne.n	80046bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e2:	d158      	bne.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e057      	b.n	8004798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e8:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ee:	4a2d      	ldr	r2, [pc, #180]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046f8:	e04d      	b.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004700:	d141      	bne.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d131      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004710:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004716:	4a23      	ldr	r2, [pc, #140]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004720:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004728:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2232      	movs	r2, #50	; 0x32
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	0c9b      	lsrs	r3, r3, #18
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004746:	e002      	b.n	800474e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3b01      	subs	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d102      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f2      	bne.n	8004748 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476e:	d112      	bne.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e011      	b.n	8004798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004784:	e007      	b.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004786:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800478e:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004794:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40007000 	.word	0x40007000
 80047a8:	20000008 	.word	0x20000008
 80047ac:	431bde83 	.word	0x431bde83

080047b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80047ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047be:	6053      	str	r3, [r2, #4]
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40007000 	.word	0x40007000

080047d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f000 bc08 	b.w	8004ff4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e4:	4b96      	ldr	r3, [pc, #600]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ee:	4b94      	ldr	r3, [pc, #592]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80e4 	beq.w	80049ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_RCC_OscConfig+0x4c>
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	f040 808b 	bne.w	800492a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	f040 8087 	bne.w	800492a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800481c:	4b88      	ldr	r3, [pc, #544]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_OscConfig+0x64>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e3df      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1a      	ldr	r2, [r3, #32]
 8004838:	4b81      	ldr	r3, [pc, #516]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <HAL_RCC_OscConfig+0x7e>
 8004844:	4b7e      	ldr	r3, [pc, #504]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800484c:	e005      	b.n	800485a <HAL_RCC_OscConfig+0x8a>
 800484e:	4b7c      	ldr	r3, [pc, #496]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485a:	4293      	cmp	r3, r2
 800485c:	d223      	bcs.n	80048a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fdf8 	bl	8005458 <RCC_SetFlashLatencyFromMSIRange>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e3c0      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004872:	4b73      	ldr	r3, [pc, #460]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a72      	ldr	r2, [pc, #456]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004878:	f043 0308 	orr.w	r3, r3, #8
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b70      	ldr	r3, [pc, #448]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	496d      	ldr	r1, [pc, #436]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004890:	4b6b      	ldr	r3, [pc, #428]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	4968      	ldr	r1, [pc, #416]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	e025      	b.n	80048f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a6:	4b66      	ldr	r3, [pc, #408]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a65      	ldr	r2, [pc, #404]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4960      	ldr	r1, [pc, #384]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c4:	4b5e      	ldr	r3, [pc, #376]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	495b      	ldr	r1, [pc, #364]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fdb8 	bl	8005458 <RCC_SetFlashLatencyFromMSIRange>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e380      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048f2:	f000 fcc1 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	4950      	ldr	r1, [pc, #320]	; (8004a44 <HAL_RCC_OscConfig+0x274>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a4e      	ldr	r2, [pc, #312]	; (8004a48 <HAL_RCC_OscConfig+0x278>)
 8004910:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004912:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <HAL_RCC_OscConfig+0x27c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd fcea 	bl	80022f0 <HAL_InitTick>
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d052      	beq.n	80049cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	e364      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d032      	beq.n	8004998 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004932:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800493e:	f7fd fd27 	bl	8002390 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004946:	f7fd fd23 	bl	8002390 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e34d      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004958:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004964:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a35      	ldr	r2, [pc, #212]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800496a:	f043 0308 	orr.w	r3, r3, #8
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4930      	ldr	r1, [pc, #192]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004982:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	492b      	ldr	r1, [pc, #172]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
 8004996:	e01a      	b.n	80049ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004998:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049a4:	f7fd fcf4 	bl	8002390 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ac:	f7fd fcf0 	bl	8002390 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e31a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x1dc>
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d073      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d005      	beq.n	80049ec <HAL_RCC_OscConfig+0x21c>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d10e      	bne.n	8004a04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d10b      	bne.n	8004a04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d063      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x2f0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d15f      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e2f7      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d106      	bne.n	8004a1c <HAL_RCC_OscConfig+0x24c>
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e025      	b.n	8004a68 <HAL_RCC_OscConfig+0x298>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a24:	d114      	bne.n	8004a50 <HAL_RCC_OscConfig+0x280>
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a02      	ldr	r2, [pc, #8]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e013      	b.n	8004a68 <HAL_RCC_OscConfig+0x298>
 8004a40:	40021000 	.word	0x40021000
 8004a44:	08012a30 	.word	0x08012a30
 8004a48:	20000008 	.word	0x20000008
 8004a4c:	2000000c 	.word	0x2000000c
 8004a50:	4ba0      	ldr	r3, [pc, #640]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a9f      	ldr	r2, [pc, #636]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b9d      	ldr	r3, [pc, #628]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a9c      	ldr	r2, [pc, #624]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fd fc8e 	bl	8002390 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fd fc8a 	bl	8002390 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e2b4      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8a:	4b92      	ldr	r3, [pc, #584]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x2a8>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fd fc7a 	bl	8002390 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd fc76 	bl	8002390 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e2a0      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ab2:	4b88      	ldr	r3, [pc, #544]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x2d0>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d060      	beq.n	8004b90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x310>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d119      	bne.n	8004b0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d116      	bne.n	8004b0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	4b7c      	ldr	r3, [pc, #496]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_OscConfig+0x328>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e27d      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	4973      	ldr	r1, [pc, #460]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	e040      	b.n	8004b90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d023      	beq.n	8004b5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b16:	4b6f      	ldr	r3, [pc, #444]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a6e      	ldr	r2, [pc, #440]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd fc35 	bl	8002390 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fd fc31 	bl	8002390 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e25b      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b3c:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b62      	ldr	r3, [pc, #392]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	495f      	ldr	r1, [pc, #380]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
 8004b5c:	e018      	b.n	8004b90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5e:	4b5d      	ldr	r3, [pc, #372]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a5c      	ldr	r2, [pc, #368]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fc11 	bl	8002390 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b72:	f7fd fc0d 	bl	8002390 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e237      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b84:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d03c      	beq.n	8004c16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01c      	beq.n	8004bde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba4:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004baa:	4a4a      	ldr	r2, [pc, #296]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fbec 	bl	8002390 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bbc:	f7fd fbe8 	bl	8002390 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e212      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bce:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <HAL_RCC_OscConfig+0x3ec>
 8004bdc:	e01b      	b.n	8004c16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bde:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be4:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fd fbcf 	bl	8002390 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf6:	f7fd fbcb 	bl	8002390 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e1f5      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c08:	4b32      	ldr	r3, [pc, #200]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1ef      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80a6 	beq.w	8004d70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c24:	2300      	movs	r3, #0
 8004c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c28:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10d      	bne.n	8004c50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c40:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c50:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <HAL_RCC_OscConfig+0x508>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d118      	bne.n	8004c8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c5c:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <HAL_RCC_OscConfig+0x508>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_RCC_OscConfig+0x508>)
 8004c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c68:	f7fd fb92 	bl	8002390 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c70:	f7fd fb8e 	bl	8002390 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e1b8      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_RCC_OscConfig+0x508>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d108      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x4d8>
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	4a0d      	ldr	r2, [pc, #52]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ca6:	e029      	b.n	8004cfc <HAL_RCC_OscConfig+0x52c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	d115      	bne.n	8004cdc <HAL_RCC_OscConfig+0x50c>
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	4a03      	ldr	r2, [pc, #12]	; (8004cd4 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cd0:	e014      	b.n	8004cfc <HAL_RCC_OscConfig+0x52c>
 8004cd2:	bf00      	nop
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	4b9d      	ldr	r3, [pc, #628]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	4a9c      	ldr	r2, [pc, #624]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cec:	4b99      	ldr	r3, [pc, #612]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	4a98      	ldr	r2, [pc, #608]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004cf4:	f023 0304 	bic.w	r3, r3, #4
 8004cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d016      	beq.n	8004d32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fd fb44 	bl	8002390 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7fd fb40 	bl	8002390 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e168      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d22:	4b8c      	ldr	r3, [pc, #560]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ed      	beq.n	8004d0c <HAL_RCC_OscConfig+0x53c>
 8004d30:	e015      	b.n	8004d5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fd fb2d 	bl	8002390 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fd fb29 	bl	8002390 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e151      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d50:	4b80      	ldr	r3, [pc, #512]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1ed      	bne.n	8004d3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d5e:	7ffb      	ldrb	r3, [r7, #31]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d64:	4b7b      	ldr	r3, [pc, #492]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	4a7a      	ldr	r2, [pc, #488]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d03c      	beq.n	8004df6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01c      	beq.n	8004dbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d84:	4b73      	ldr	r3, [pc, #460]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d8a:	4a72      	ldr	r2, [pc, #456]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fd fafc 	bl	8002390 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d9c:	f7fd faf8 	bl	8002390 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e122      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dae:	4b69      	ldr	r3, [pc, #420]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ef      	beq.n	8004d9c <HAL_RCC_OscConfig+0x5cc>
 8004dbc:	e01b      	b.n	8004df6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dbe:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dc4:	4a63      	ldr	r2, [pc, #396]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dce:	f7fd fadf 	bl	8002390 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd6:	f7fd fadb 	bl	8002390 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e105      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004de8:	4b5a      	ldr	r3, [pc, #360]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1ef      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80f9 	beq.w	8004ff2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	f040 80cf 	bne.w	8004fa8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e0a:	4b52      	ldr	r3, [pc, #328]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0203 	and.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d12c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d123      	bne.n	8004e78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d11b      	bne.n	8004e78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d113      	bne.n	8004e78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d109      	bne.n	8004e78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	3b01      	subs	r3, #1
 8004e72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d071      	beq.n	8004f5c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d068      	beq.n	8004f50 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e7e:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e8a:	4b32      	ldr	r3, [pc, #200]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e0ac      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2d      	ldr	r2, [pc, #180]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ea6:	f7fd fa73 	bl	8002390 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fd fa6f 	bl	8002390 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e099      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ecc:	4b21      	ldr	r3, [pc, #132]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <HAL_RCC_OscConfig+0x788>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004edc:	3a01      	subs	r2, #1
 8004ede:	0112      	lsls	r2, r2, #4
 8004ee0:	4311      	orrs	r1, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ee6:	0212      	lsls	r2, r2, #8
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eee:	0852      	lsrs	r2, r2, #1
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	0552      	lsls	r2, r2, #21
 8004ef4:	4311      	orrs	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004efa:	0852      	lsrs	r2, r2, #1
 8004efc:	3a01      	subs	r2, #1
 8004efe:	0652      	lsls	r2, r2, #25
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f06:	06d2      	lsls	r2, r2, #27
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	4912      	ldr	r1, [pc, #72]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f10:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a0f      	ldr	r2, [pc, #60]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4a0c      	ldr	r2, [pc, #48]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f28:	f7fd fa32 	bl	8002390 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fd fa2e 	bl	8002390 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e058      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f42:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <HAL_RCC_OscConfig+0x784>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f4e:	e050      	b.n	8004ff2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e04f      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
 8004f54:	40021000 	.word	0x40021000
 8004f58:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5c:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d144      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f68:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f74:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a20      	ldr	r2, [pc, #128]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f80:	f7fd fa06 	bl	8002390 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fd fa02 	bl	8002390 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e02c      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x7b8>
 8004fa6:	e024      	b.n	8004ff2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d01f      	beq.n	8004fee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fba:	f7fd f9e9 	bl	8002390 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7fd f9e5 	bl	8002390 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e00f      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f0      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	4905      	ldr	r1, [pc, #20]	; (8004ffc <HAL_RCC_OscConfig+0x82c>)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x830>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60cb      	str	r3, [r1, #12]
 8004fec:	e001      	b.n	8004ff2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	feeefffc 	.word	0xfeeefffc

08005004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e11d      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4b90      	ldr	r3, [pc, #576]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d910      	bls.n	800504c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b8d      	ldr	r3, [pc, #564]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 020f 	bic.w	r2, r3, #15
 8005032:	498b      	ldr	r1, [pc, #556]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b89      	ldr	r3, [pc, #548]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e105      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d010      	beq.n	800507a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	4b81      	ldr	r3, [pc, #516]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005064:	429a      	cmp	r2, r3
 8005066:	d908      	bls.n	800507a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b7e      	ldr	r3, [pc, #504]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	497b      	ldr	r1, [pc, #492]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d079      	beq.n	800517a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d11e      	bne.n	80050cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508e:	4b75      	ldr	r3, [pc, #468]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0dc      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800509e:	f000 fa35 	bl	800550c <RCC_GetSysClockFreqFromPLLSource>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a70      	ldr	r2, [pc, #448]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d946      	bls.n	8005138 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80050aa:	4b6e      	ldr	r3, [pc, #440]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d140      	bne.n	8005138 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050b6:	4b6b      	ldr	r3, [pc, #428]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050be:	4a69      	ldr	r2, [pc, #420]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80050c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e035      	b.n	8005138 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d4:	4b63      	ldr	r3, [pc, #396]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d115      	bne.n	800510c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0b9      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050ec:	4b5d      	ldr	r3, [pc, #372]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0ad      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050fc:	4b59      	ldr	r3, [pc, #356]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0a5      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800510c:	f000 f8b4 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005110:	4603      	mov	r3, r0
 8005112:	4a55      	ldr	r2, [pc, #340]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d90f      	bls.n	8005138 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005118:	4b52      	ldr	r3, [pc, #328]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005124:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800512c:	4a4d      	ldr	r2, [pc, #308]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800512e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005132:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 0203 	bic.w	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4947      	ldr	r1, [pc, #284]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514a:	f7fd f921 	bl	8002390 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005150:	e00a      	b.n	8005168 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005152:	f7fd f91d 	bl	8002390 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e077      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005168:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 020c 	and.w	r2, r3, #12
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	429a      	cmp	r2, r3
 8005178:	d1eb      	bne.n	8005152 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b80      	cmp	r3, #128	; 0x80
 800517e:	d105      	bne.n	800518c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a37      	ldr	r2, [pc, #220]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800518a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d010      	beq.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	4b31      	ldr	r3, [pc, #196]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d208      	bcs.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a8:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	492b      	ldr	r1, [pc, #172]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ba:	4b29      	ldr	r3, [pc, #164]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d210      	bcs.n	80051ea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c8:	4b25      	ldr	r3, [pc, #148]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 020f 	bic.w	r2, r3, #15
 80051d0:	4923      	ldr	r1, [pc, #140]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d8:	4b21      	ldr	r3, [pc, #132]	; (8005260 <HAL_RCC_ClockConfig+0x25c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e036      	b.n	8005258 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4918      	ldr	r1, [pc, #96]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005204:	4313      	orrs	r3, r2
 8005206:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4910      	ldr	r1, [pc, #64]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005224:	4313      	orrs	r3, r2
 8005226:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005228:	f000 f826 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	490c      	ldr	r1, [pc, #48]	; (800526c <HAL_RCC_ClockConfig+0x268>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <HAL_RCC_ClockConfig+0x26c>)
 8005246:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x270>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fd f84f 	bl	80022f0 <HAL_InitTick>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]

  return status;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40022000 	.word	0x40022000
 8005264:	40021000 	.word	0x40021000
 8005268:	04c4b400 	.word	0x04c4b400
 800526c:	08012a30 	.word	0x08012a30
 8005270:	20000008 	.word	0x20000008
 8005274:	2000000c 	.word	0x2000000c

08005278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	; 0x24
 800527c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	2300      	movs	r3, #0
 8005284:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005286:	4b3e      	ldr	r3, [pc, #248]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005290:	4b3b      	ldr	r3, [pc, #236]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x34>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d121      	bne.n	80052ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d11e      	bne.n	80052ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052ac:	4b34      	ldr	r3, [pc, #208]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052b8:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	e005      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052c8:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052d4:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10d      	bne.n	8005300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052e8:	e00a      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d102      	bne.n	80052f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052f0:	4b25      	ldr	r3, [pc, #148]	; (8005388 <HAL_RCC_GetSysClockFreq+0x110>)
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e004      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <HAL_RCC_GetSysClockFreq+0x114>)
 80052fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d134      	bne.n	8005370 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005306:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d003      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0xa6>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d003      	beq.n	8005324 <HAL_RCC_GetSysClockFreq+0xac>
 800531c:	e005      	b.n	800532a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <HAL_RCC_GetSysClockFreq+0x110>)
 8005320:	617b      	str	r3, [r7, #20]
      break;
 8005322:	e005      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_RCC_GetSysClockFreq+0x114>)
 8005326:	617b      	str	r3, [r7, #20]
      break;
 8005328:	e002      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	617b      	str	r3, [r7, #20]
      break;
 800532e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005330:	4b13      	ldr	r3, [pc, #76]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	3301      	adds	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800533e:	4b10      	ldr	r3, [pc, #64]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	fb03 f202 	mul.w	r2, r3, r2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <HAL_RCC_GetSysClockFreq+0x108>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	0e5b      	lsrs	r3, r3, #25
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	3301      	adds	r3, #1
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005370:	69bb      	ldr	r3, [r7, #24]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3724      	adds	r7, #36	; 0x24
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40021000 	.word	0x40021000
 8005384:	08012a48 	.word	0x08012a48
 8005388:	00f42400 	.word	0x00f42400
 800538c:	007a1200 	.word	0x007a1200

08005390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005396:	681b      	ldr	r3, [r3, #0]
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000008 	.word	0x20000008

080053a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053ac:	f7ff fff0 	bl	8005390 <HAL_RCC_GetHCLKFreq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	4904      	ldr	r1, [pc, #16]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053be:	5ccb      	ldrb	r3, [r1, r3]
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000
 80053d0:	08012a40 	.word	0x08012a40

080053d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053d8:	f7ff ffda 	bl	8005390 <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0adb      	lsrs	r3, r3, #11
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4904      	ldr	r1, [pc, #16]	; (80053fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000
 80053fc:	08012a40 	.word	0x08012a40

08005400 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_EnableCSS+0x1c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a04      	ldr	r2, [pc, #16]	; (800541c <HAL_RCC_EnableCSS+0x1c>)
 800540a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40021000 	.word	0x40021000

08005420 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005430:	d105      	bne.n	800543e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005432:	f000 f809 	bl	8005448 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800543c:	621a      	str	r2, [r3, #32]
  }
}
 800543e:	bf00      	nop
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000

08005448 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005470:	f7ff f8da 	bl	8004628 <HAL_PWREx_GetVoltageRange>
 8005474:	6178      	str	r0, [r7, #20]
 8005476:	e014      	b.n	80054a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	4a21      	ldr	r2, [pc, #132]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800547e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005482:	6593      	str	r3, [r2, #88]	; 0x58
 8005484:	4b1f      	ldr	r3, [pc, #124]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005490:	f7ff f8ca 	bl	8004628 <HAL_PWREx_GetVoltageRange>
 8005494:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800549c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d10b      	bne.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b80      	cmp	r3, #128	; 0x80
 80054ae:	d913      	bls.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2ba0      	cmp	r3, #160	; 0xa0
 80054b4:	d902      	bls.n	80054bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054b6:	2302      	movs	r3, #2
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e00d      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054bc:	2301      	movs	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e00a      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b7f      	cmp	r3, #127	; 0x7f
 80054c6:	d902      	bls.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80054c8:	2302      	movs	r3, #2
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e004      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d101      	bne.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d4:	2301      	movs	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 020f 	bic.w	r2, r3, #15
 80054e0:	4909      	ldr	r1, [pc, #36]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d001      	beq.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	40022000 	.word	0x40022000

0800550c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005512:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d00b      	beq.n	800553a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d825      	bhi.n	8005574 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d008      	beq.n	8005540 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11f      	bne.n	8005574 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005536:	613b      	str	r3, [r7, #16]
    break;
 8005538:	e01f      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800553a:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800553c:	613b      	str	r3, [r7, #16]
    break;
 800553e:	e01c      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d107      	bne.n	800555c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800554c:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800554e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e005      	b.n	8005568 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005568:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	613b      	str	r3, [r7, #16]
    break;
 8005572:	e002      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
    break;
 8005578:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	091b      	lsrs	r3, r3, #4
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	3301      	adds	r3, #1
 8005586:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005588:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	fb03 f202 	mul.w	r2, r3, r2
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055a0:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	0e5b      	lsrs	r3, r3, #25
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	3301      	adds	r3, #1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80055ba:	683b      	ldr	r3, [r7, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40021000 	.word	0x40021000
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	007a1200 	.word	0x007a1200
 80055d4:	08012a48 	.word	0x08012a48

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e0:	2300      	movs	r3, #0
 80055e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e4:	2300      	movs	r3, #0
 80055e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d040      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	d02a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055fc:	2b80      	cmp	r3, #128	; 0x80
 80055fe:	d825      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d026      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005604:	2b60      	cmp	r3, #96	; 0x60
 8005606:	d821      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d006      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d81d      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d010      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005618:	e018      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800561a:	4b89      	ldr	r3, [pc, #548]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	4a88      	ldr	r2, [pc, #544]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005624:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005626:	e015      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fa24 	bl	8006a7c <RCCEx_PLLSAI1_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005638:	e00c      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3320      	adds	r3, #32
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fb0f 	bl	8006c64 <RCCEx_PLLSAI2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800564a:	e003      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	74fb      	strb	r3, [r7, #19]
      break;
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800565a:	4b79      	ldr	r3, [pc, #484]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800565c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005660:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005668:	4975      	ldr	r1, [pc, #468]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005670:	e001      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	7cfb      	ldrb	r3, [r7, #19]
 8005674:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d047      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568a:	d030      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005690:	d82a      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005696:	d02a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800569c:	d824      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800569e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a2:	d008      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a8:	d81e      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b2:	d010      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056b4:	e018      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056b6:	4b62      	ldr	r3, [pc, #392]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a61      	ldr	r2, [pc, #388]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056c2:	e015      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f9d6 	bl	8006a7c <RCCEx_PLLSAI1_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056d4:	e00c      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3320      	adds	r3, #32
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 fac1 	bl	8006c64 <RCCEx_PLLSAI2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	74fb      	strb	r3, [r7, #19]
      break;
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80056ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056f6:	4b52      	ldr	r3, [pc, #328]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	494e      	ldr	r1, [pc, #312]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800570c:	e001      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 809f 	beq.w	800585e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005720:	2300      	movs	r3, #0
 8005722:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005724:	4b46      	ldr	r3, [pc, #280]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005734:	2300      	movs	r3, #0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	4a40      	ldr	r2, [pc, #256]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005744:	6593      	str	r3, [r2, #88]	; 0x58
 8005746:	4b3e      	ldr	r3, [pc, #248]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005752:	2301      	movs	r3, #1
 8005754:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005756:	4b3b      	ldr	r3, [pc, #236]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3a      	ldr	r2, [pc, #232]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800575c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005762:	f7fc fe15 	bl	8002390 <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005768:	e009      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576a:	f7fc fe11 	bl	8002390 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d902      	bls.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	74fb      	strb	r3, [r7, #19]
        break;
 800577c:	e005      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ef      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d15b      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005790:	4b2b      	ldr	r3, [pc, #172]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d019      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057ae:	4b24      	ldr	r3, [pc, #144]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ba:	4b21      	ldr	r3, [pc, #132]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	4a1f      	ldr	r2, [pc, #124]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057da:	4a19      	ldr	r2, [pc, #100]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d016      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fc fdd0 	bl	8002390 <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f2:	e00b      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f4:	f7fc fdcc 	bl	8002390 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d902      	bls.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	74fb      	strb	r3, [r7, #19]
            break;
 800580a:	e006      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ec      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	4903      	ldr	r1, [pc, #12]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005838:	e008      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	74bb      	strb	r3, [r7, #18]
 800583e:	e005      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005840:	40021000 	.word	0x40021000
 8005844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800584c:	7c7b      	ldrb	r3, [r7, #17]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4ba0      	ldr	r3, [pc, #640]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005856:	4a9f      	ldr	r2, [pc, #636]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586a:	4b9a      	ldr	r3, [pc, #616]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005878:	4996      	ldr	r1, [pc, #600]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588c:	4b91      	ldr	r3, [pc, #580]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f023 020c 	bic.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	498e      	ldr	r1, [pc, #568]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ae:	4b89      	ldr	r3, [pc, #548]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058bc:	4985      	ldr	r1, [pc, #532]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058d0:	4b80      	ldr	r3, [pc, #512]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058de:	497d      	ldr	r1, [pc, #500]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058f2:	4b78      	ldr	r3, [pc, #480]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	4974      	ldr	r1, [pc, #464]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005914:	4b6f      	ldr	r3, [pc, #444]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005922:	496c      	ldr	r1, [pc, #432]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005936:	4b67      	ldr	r3, [pc, #412]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005944:	4963      	ldr	r1, [pc, #396]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005958:	4b5e      	ldr	r3, [pc, #376]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005966:	495b      	ldr	r1, [pc, #364]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800597a:	4b56      	ldr	r3, [pc, #344]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005988:	4952      	ldr	r1, [pc, #328]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800599c:	4b4d      	ldr	r3, [pc, #308]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	494a      	ldr	r1, [pc, #296]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059be:	4b45      	ldr	r3, [pc, #276]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	4941      	ldr	r1, [pc, #260]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e0:	4b3c      	ldr	r3, [pc, #240]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	4939      	ldr	r1, [pc, #228]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d028      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a02:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a10:	4930      	ldr	r1, [pc, #192]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a20:	d106      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a22:	4b2c      	ldr	r3, [pc, #176]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a2c:	60d3      	str	r3, [r2, #12]
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f81b 	bl	8006a7c <RCCEx_PLLSAI1_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a4a:	7cfb      	ldrb	r3, [r7, #19]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d04d      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a68:	d108      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a6a:	4b1a      	ldr	r3, [pc, #104]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a70:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a7a:	e012      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a7c:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a82:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9a:	490e      	ldr	r1, [pc, #56]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aaa:	d106      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab6:	60d3      	str	r3, [r2, #12]
 8005ab8:	e020      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac2:	d109      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ac4:	4b03      	ldr	r3, [pc, #12]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a02      	ldr	r2, [pc, #8]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ace:	60d3      	str	r3, [r2, #12]
 8005ad0:	e014      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ad2:	bf00      	nop
 8005ad4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae0:	d10c      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 ffc7 	bl	8006a7c <RCCEx_PLLSAI1_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005af8:	7cfb      	ldrb	r3, [r7, #19]
 8005afa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d028      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b08:	4b4a      	ldr	r3, [pc, #296]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b16:	4947      	ldr	r1, [pc, #284]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b26:	d106      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b28:	4b42      	ldr	r3, [pc, #264]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a41      	ldr	r2, [pc, #260]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b32:	60d3      	str	r3, [r2, #12]
 8005b34:	e011      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 ff98 	bl	8006a7c <RCCEx_PLLSAI1_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01e      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b66:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b76:	492f      	ldr	r1, [pc, #188]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 ff73 	bl	8006a7c <RCCEx_PLLSAI1_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b9a:	7cfb      	ldrb	r3, [r7, #19]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb0:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bb6:	f023 0204 	bic.w	r2, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc0:	491c      	ldr	r1, [pc, #112]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bd4:	4b17      	ldr	r3, [pc, #92]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bda:	f023 0218 	bic.w	r2, r3, #24
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	4913      	ldr	r1, [pc, #76]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d017      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bf8:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c08:	490a      	ldr	r1, [pc, #40]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4a04      	ldr	r2, [pc, #16]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c28:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000

08005c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c4a:	d13e      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c4c:	4bb6      	ldr	r3, [pc, #728]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5e:	d028      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c66:	f200 86f4 	bhi.w	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d005      	beq.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c78:	d00e      	beq.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005c7a:	f000 beea 	b.w	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c7e:	4baa      	ldr	r3, [pc, #680]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	f040 86e4 	bne.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	61fb      	str	r3, [r7, #28]
      break;
 8005c94:	f000 bedf 	b.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c98:	4ba3      	ldr	r3, [pc, #652]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	f040 86d9 	bne.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005ca8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005cac:	61fb      	str	r3, [r7, #28]
      break;
 8005cae:	f000 bed4 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cb2:	4b9d      	ldr	r3, [pc, #628]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cbe:	f040 86ce 	bne.w	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005cc2:	4b9a      	ldr	r3, [pc, #616]	; (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005cc4:	61fb      	str	r3, [r7, #28]
      break;
 8005cc6:	f000 beca 	b.w	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cca:	4b97      	ldr	r3, [pc, #604]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d036      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d840      	bhi.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d003      	beq.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d020      	beq.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005cec:	e039      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005cee:	4b8e      	ldr	r3, [pc, #568]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d116      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005cfa:	4b8b      	ldr	r3, [pc, #556]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005d06:	4b88      	ldr	r3, [pc, #544]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	e005      	b.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005d12:	4b85      	ldr	r3, [pc, #532]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	4a84      	ldr	r2, [pc, #528]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d26:	e01f      	b.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
      break;
 8005d2c:	e01c      	b.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d2e:	4b7e      	ldr	r3, [pc, #504]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3a:	d102      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005d3c:	4b7d      	ldr	r3, [pc, #500]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005d3e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d40:	e012      	b.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
      break;
 8005d46:	e00f      	b.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d48:	4b77      	ldr	r3, [pc, #476]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d54:	d102      	bne.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005d56:	4b78      	ldr	r3, [pc, #480]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005d58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d5a:	e005      	b.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61bb      	str	r3, [r7, #24]
      break;
 8005d60:	e002      	b.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61bb      	str	r3, [r7, #24]
      break;
 8005d66:	bf00      	nop
    }

    switch(PeriphClk)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d6e:	f000 8606 	beq.w	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d78:	f200 8673 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d82:	f000 8469 	beq.w	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d8c:	f200 8669 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d96:	f000 8531 	beq.w	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da0:	f200 865f 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005daa:	f000 8187 	beq.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005db4:	f200 8655 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dbe:	f000 80cd 	beq.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dc8:	f200 864b 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	f000 8430 	beq.w	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	f200 8641 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de6:	f000 83e4 	beq.w	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df0:	f200 8637 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfa:	f000 80af 	beq.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e04:	f200 862d 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0e:	f000 809d 	beq.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e18:	f200 8623 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e22:	f000 808b 	beq.w	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2c:	f200 8619 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e36:	f000 8554 	beq.w	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e40:	f200 860f 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4a:	f000 8500 	beq.w	800684e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e54:	f200 8605 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	f000 84a1 	beq.w	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e68:	f200 85fb 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	f000 846c 	beq.w	800674c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	f200 85f3 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d84c      	bhi.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 85ec 	beq.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	2b1f      	cmp	r3, #31
 8005e90:	f200 85e7 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e94:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	080062b1 	.word	0x080062b1
 8005ea0:	0800631f 	.word	0x0800631f
 8005ea4:	08006a63 	.word	0x08006a63
 8005ea8:	080063b3 	.word	0x080063b3
 8005eac:	08006a63 	.word	0x08006a63
 8005eb0:	08006a63 	.word	0x08006a63
 8005eb4:	08006a63 	.word	0x08006a63
 8005eb8:	0800642b 	.word	0x0800642b
 8005ebc:	08006a63 	.word	0x08006a63
 8005ec0:	08006a63 	.word	0x08006a63
 8005ec4:	08006a63 	.word	0x08006a63
 8005ec8:	08006a63 	.word	0x08006a63
 8005ecc:	08006a63 	.word	0x08006a63
 8005ed0:	08006a63 	.word	0x08006a63
 8005ed4:	08006a63 	.word	0x08006a63
 8005ed8:	080064af 	.word	0x080064af
 8005edc:	08006a63 	.word	0x08006a63
 8005ee0:	08006a63 	.word	0x08006a63
 8005ee4:	08006a63 	.word	0x08006a63
 8005ee8:	08006a63 	.word	0x08006a63
 8005eec:	08006a63 	.word	0x08006a63
 8005ef0:	08006a63 	.word	0x08006a63
 8005ef4:	08006a63 	.word	0x08006a63
 8005ef8:	08006a63 	.word	0x08006a63
 8005efc:	08006a63 	.word	0x08006a63
 8005f00:	08006a63 	.word	0x08006a63
 8005f04:	08006a63 	.word	0x08006a63
 8005f08:	08006a63 	.word	0x08006a63
 8005f0c:	08006a63 	.word	0x08006a63
 8005f10:	08006a63 	.word	0x08006a63
 8005f14:	08006a63 	.word	0x08006a63
 8005f18:	08006531 	.word	0x08006531
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	f000 83e8 	beq.w	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005f24:	f000 bd9d 	b.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0003d090 	.word	0x0003d090
 8005f30:	08012a48 	.word	0x08012a48
 8005f34:	00f42400 	.word	0x00f42400
 8005f38:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f42:	f000 ff83 	bl	8006e4c <RCCEx_GetSAIxPeriphCLKFreq>
 8005f46:	61f8      	str	r0, [r7, #28]
      break;
 8005f48:	f000 bd8e 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005f4c:	69b9      	ldr	r1, [r7, #24]
 8005f4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f52:	f000 ff7b 	bl	8006e4c <RCCEx_GetSAIxPeriphCLKFreq>
 8005f56:	61f8      	str	r0, [r7, #28]
      break;
 8005f58:	f000 bd86 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005f5c:	4b9a      	ldr	r3, [pc, #616]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f6e:	d015      	beq.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f76:	f200 8092 	bhi.w	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f80:	d029      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f88:	f200 8089 	bhi.w	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d07b      	beq.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f98:	d04a      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005f9a:	e080      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f9c:	4b8a      	ldr	r3, [pc, #552]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d17d      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005fa8:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005fb4:	4b84      	ldr	r3, [pc, #528]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	e005      	b.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005fc0:	4b81      	ldr	r3, [pc, #516]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	4a7f      	ldr	r2, [pc, #508]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd2:	61fb      	str	r3, [r7, #28]
          break;
 8005fd4:	e066      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005fd6:	4b7c      	ldr	r3, [pc, #496]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fe2:	d162      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005fe4:	4b78      	ldr	r3, [pc, #480]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff0:	d15b      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ff2:	4b75      	ldr	r3, [pc, #468]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ffc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	fb03 f202 	mul.w	r2, r3, r2
 8006006:	4b70      	ldr	r3, [pc, #448]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	091b      	lsrs	r3, r3, #4
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	3301      	adds	r3, #1
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006018:	4b6b      	ldr	r3, [pc, #428]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	0d5b      	lsrs	r3, r3, #21
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	3301      	adds	r3, #1
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	61fb      	str	r3, [r7, #28]
          break;
 800602e:	e03c      	b.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006030:	4b65      	ldr	r3, [pc, #404]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800603c:	d138      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800603e:	4b62      	ldr	r3, [pc, #392]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604a:	d131      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800604c:	4b5e      	ldr	r3, [pc, #376]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	0a1b      	lsrs	r3, r3, #8
 8006052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006056:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	fb03 f202 	mul.w	r2, r3, r2
 8006060:	4b59      	ldr	r3, [pc, #356]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	3301      	adds	r3, #1
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006072:	4b55      	ldr	r3, [pc, #340]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	0d5b      	lsrs	r3, r3, #21
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	3301      	adds	r3, #1
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	61fb      	str	r3, [r7, #28]
          break;
 8006088:	e012      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800608a:	4b4f      	ldr	r3, [pc, #316]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800608c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b02      	cmp	r3, #2
 8006096:	d10e      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006098:	4b4d      	ldr	r3, [pc, #308]	; (80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800609a:	61fb      	str	r3, [r7, #28]
          break;
 800609c:	e00b      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800609e:	bf00      	nop
 80060a0:	f000 bce2 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060a4:	bf00      	nop
 80060a6:	f000 bcdf 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060aa:	bf00      	nop
 80060ac:	f000 bcdc 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060b0:	bf00      	nop
 80060b2:	f000 bcd9 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060b6:	bf00      	nop
        break;
 80060b8:	f000 bcd6 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80060bc:	4b42      	ldr	r3, [pc, #264]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ca:	d13d      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80060cc:	4b3e      	ldr	r3, [pc, #248]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060d8:	f040 84c5 	bne.w	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80060dc:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e8:	f040 84bd 	bne.w	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060ec:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	fb03 f202 	mul.w	r2, r3, r2
 8006100:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	3301      	adds	r3, #1
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006112:	4b2d      	ldr	r3, [pc, #180]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	0edb      	lsrs	r3, r3, #27
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006124:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006130:	2311      	movs	r3, #17
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e001      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006136:	2307      	movs	r3, #7
 8006138:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006142:	61fb      	str	r3, [r7, #28]
      break;
 8006144:	f000 bc8f 	b.w	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006148:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800615a:	d016      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006162:	f200 809b 	bhi.w	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800616c:	d032      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006174:	f200 8092 	bhi.w	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8084 	beq.w	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006186:	d052      	beq.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006188:	e088      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	f040 8084 	bne.w	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80061a4:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	e005      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	4a03      	ldr	r2, [pc, #12]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80061be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c2:	61fb      	str	r3, [r7, #28]
          break;
 80061c4:	e06c      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80061c6:	bf00      	nop
 80061c8:	40021000 	.word	0x40021000
 80061cc:	08012a48 	.word	0x08012a48
 80061d0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061d4:	4ba5      	ldr	r3, [pc, #660]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061e0:	d160      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80061e2:	4ba2      	ldr	r3, [pc, #648]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ee:	d159      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061f0:	4b9e      	ldr	r3, [pc, #632]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	fb03 f202 	mul.w	r2, r3, r2
 8006204:	4b99      	ldr	r3, [pc, #612]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	091b      	lsrs	r3, r3, #4
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	3301      	adds	r3, #1
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006216:	4b95      	ldr	r3, [pc, #596]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	0d5b      	lsrs	r3, r3, #21
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	3301      	adds	r3, #1
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	61fb      	str	r3, [r7, #28]
          break;
 800622c:	e03a      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800622e:	4b8f      	ldr	r3, [pc, #572]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623a:	d135      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800623c:	4b8b      	ldr	r3, [pc, #556]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006248:	d12e      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800624a:	4b88      	ldr	r3, [pc, #544]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	0a1b      	lsrs	r3, r3, #8
 8006250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006254:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	fb03 f202 	mul.w	r2, r3, r2
 800625e:	4b83      	ldr	r3, [pc, #524]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	3301      	adds	r3, #1
 800626a:	fbb2 f3f3 	udiv	r3, r2, r3
 800626e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006270:	4b7e      	ldr	r3, [pc, #504]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	0d5b      	lsrs	r3, r3, #21
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	3301      	adds	r3, #1
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	61fb      	str	r3, [r7, #28]
          break;
 8006286:	e00f      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006288:	4b78      	ldr	r3, [pc, #480]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800628a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d10a      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006296:	4b76      	ldr	r3, [pc, #472]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006298:	61fb      	str	r3, [r7, #28]
          break;
 800629a:	e007      	b.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800629c:	bf00      	nop
 800629e:	e3e2      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062a0:	bf00      	nop
 80062a2:	e3e0      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062a4:	bf00      	nop
 80062a6:	e3de      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062a8:	bf00      	nop
 80062aa:	e3dc      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062ac:	bf00      	nop
      break;
 80062ae:	e3da      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062b0:	4b6e      	ldr	r3, [pc, #440]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d827      	bhi.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062e1 	.word	0x080062e1
 80062d0:	080062e9 	.word	0x080062e9
 80062d4:	080062fd 	.word	0x080062fd
          frequency = HAL_RCC_GetPCLK2Freq();
 80062d8:	f7ff f87c 	bl	80053d4 <HAL_RCC_GetPCLK2Freq>
 80062dc:	61f8      	str	r0, [r7, #28]
          break;
 80062de:	e01d      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80062e0:	f7fe ffca 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80062e4:	61f8      	str	r0, [r7, #28]
          break;
 80062e6:	e019      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e8:	4b60      	ldr	r3, [pc, #384]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f4:	d10f      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80062f6:	4b5f      	ldr	r3, [pc, #380]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062f8:	61fb      	str	r3, [r7, #28]
          break;
 80062fa:	e00c      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062fc:	4b5b      	ldr	r3, [pc, #364]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d107      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630e:	61fb      	str	r3, [r7, #28]
          break;
 8006310:	e003      	b.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006312:	bf00      	nop
 8006314:	e3a8      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006316:	bf00      	nop
 8006318:	e3a6      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800631a:	bf00      	nop
        break;
 800631c:	e3a4      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800631e:	4b53      	ldr	r3, [pc, #332]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d83a      	bhi.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800636d 	.word	0x0800636d
 800633c:	080063a7 	.word	0x080063a7
 8006340:	080063a7 	.word	0x080063a7
 8006344:	080063a7 	.word	0x080063a7
 8006348:	08006375 	.word	0x08006375
 800634c:	080063a7 	.word	0x080063a7
 8006350:	080063a7 	.word	0x080063a7
 8006354:	080063a7 	.word	0x080063a7
 8006358:	0800637d 	.word	0x0800637d
 800635c:	080063a7 	.word	0x080063a7
 8006360:	080063a7 	.word	0x080063a7
 8006364:	080063a7 	.word	0x080063a7
 8006368:	08006391 	.word	0x08006391
          frequency = HAL_RCC_GetPCLK1Freq();
 800636c:	f7ff f81c 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006370:	61f8      	str	r0, [r7, #28]
          break;
 8006372:	e01d      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006374:	f7fe ff80 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8006378:	61f8      	str	r0, [r7, #28]
          break;
 800637a:	e019      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800637c:	4b3b      	ldr	r3, [pc, #236]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006388:	d10f      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800638a:	4b3a      	ldr	r3, [pc, #232]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800638c:	61fb      	str	r3, [r7, #28]
          break;
 800638e:	e00c      	b.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006390:	4b36      	ldr	r3, [pc, #216]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b02      	cmp	r3, #2
 800639c:	d107      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	61fb      	str	r3, [r7, #28]
          break;
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80063a6:	bf00      	nop
 80063a8:	e35e      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063aa:	bf00      	nop
 80063ac:	e35c      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063ae:	bf00      	nop
        break;
 80063b0:	e35a      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80063b2:	4b2e      	ldr	r3, [pc, #184]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d021      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b30      	cmp	r3, #48	; 0x30
 80063c8:	d829      	bhi.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d011      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d823      	bhi.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d004      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80063e2:	e01c      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063e4:	f7fe ffe0 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 80063e8:	61f8      	str	r0, [r7, #28]
          break;
 80063ea:	e01d      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80063ec:	f7fe ff44 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80063f0:	61f8      	str	r0, [r7, #28]
          break;
 80063f2:	e019      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f4:	4b1d      	ldr	r3, [pc, #116]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006400:	d10f      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006404:	61fb      	str	r3, [r7, #28]
          break;
 8006406:	e00c      	b.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006408:	4b18      	ldr	r3, [pc, #96]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d107      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641a:	61fb      	str	r3, [r7, #28]
          break;
 800641c:	e003      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800641e:	bf00      	nop
 8006420:	e322      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006422:	bf00      	nop
 8006424:	e320      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006426:	bf00      	nop
        break;
 8006428:	e31e      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2bc0      	cmp	r3, #192	; 0xc0
 800643a:	d027      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2bc0      	cmp	r3, #192	; 0xc0
 8006440:	d82f      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b80      	cmp	r3, #128	; 0x80
 8006446:	d017      	beq.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b80      	cmp	r3, #128	; 0x80
 800644c:	d829      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d004      	beq.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800645a:	e022      	b.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800645c:	f7fe ffa4 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006460:	61f8      	str	r0, [r7, #28]
          break;
 8006462:	e023      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006464:	f7fe ff08 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8006468:	61f8      	str	r0, [r7, #28]
          break;
 800646a:	e01f      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800646c:	40021000 	.word	0x40021000
 8006470:	02dc6c00 	.word	0x02dc6c00
 8006474:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006478:	4b9b      	ldr	r3, [pc, #620]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	d10f      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006486:	4b99      	ldr	r3, [pc, #612]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006488:	61fb      	str	r3, [r7, #28]
          break;
 800648a:	e00c      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800648c:	4b96      	ldr	r3, [pc, #600]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b02      	cmp	r3, #2
 8006498:	d107      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800649a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649e:	61fb      	str	r3, [r7, #28]
          break;
 80064a0:	e003      	b.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80064a2:	bf00      	nop
 80064a4:	e2e0      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064a6:	bf00      	nop
 80064a8:	e2de      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064aa:	bf00      	nop
        break;
 80064ac:	e2dc      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064ae:	4b8e      	ldr	r3, [pc, #568]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c0:	d025      	beq.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c8:	d82c      	bhi.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d0:	d013      	beq.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d824      	bhi.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e6:	d004      	beq.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80064e8:	e01c      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064ea:	f7fe ff5d 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 80064ee:	61f8      	str	r0, [r7, #28]
          break;
 80064f0:	e01d      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80064f2:	f7fe fec1 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80064f6:	61f8      	str	r0, [r7, #28]
          break;
 80064f8:	e019      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064fa:	4b7b      	ldr	r3, [pc, #492]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006506:	d10f      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006508:	4b78      	ldr	r3, [pc, #480]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800650a:	61fb      	str	r3, [r7, #28]
          break;
 800650c:	e00c      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800650e:	4b76      	ldr	r3, [pc, #472]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b02      	cmp	r3, #2
 800651a:	d107      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800651c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006520:	61fb      	str	r3, [r7, #28]
          break;
 8006522:	e003      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006524:	bf00      	nop
 8006526:	e29f      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006528:	bf00      	nop
 800652a:	e29d      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800652c:	bf00      	nop
        break;
 800652e:	e29b      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006530:	4b6d      	ldr	r3, [pc, #436]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006542:	d025      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800654a:	d82c      	bhi.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006552:	d013      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655a:	d824      	bhi.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d004      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800656a:	e01c      	b.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800656c:	f7fe ff1c 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006570:	61f8      	str	r0, [r7, #28]
          break;
 8006572:	e01d      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006574:	f7fe fe80 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8006578:	61f8      	str	r0, [r7, #28]
          break;
 800657a:	e019      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800657c:	4b5a      	ldr	r3, [pc, #360]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006588:	d10f      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800658a:	4b58      	ldr	r3, [pc, #352]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800658c:	61fb      	str	r3, [r7, #28]
          break;
 800658e:	e00c      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006590:	4b55      	ldr	r3, [pc, #340]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b02      	cmp	r3, #2
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	61fb      	str	r3, [r7, #28]
          break;
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80065a6:	bf00      	nop
 80065a8:	e25e      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065aa:	bf00      	nop
 80065ac:	e25c      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065ae:	bf00      	nop
        break;
 80065b0:	e25a      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80065b2:	4b4d      	ldr	r3, [pc, #308]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c4:	d007      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065cc:	d12f      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe fe53 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80065d2:	61f8      	str	r0, [r7, #28]
          break;
 80065d4:	e02e      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80065d6:	4b44      	ldr	r3, [pc, #272]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e2:	d126      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80065e4:	4b40      	ldr	r3, [pc, #256]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d020      	beq.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80065f0:	4b3d      	ldr	r3, [pc, #244]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	0a1b      	lsrs	r3, r3, #8
 80065f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065fa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	fb03 f202 	mul.w	r2, r3, r2
 8006604:	4b38      	ldr	r3, [pc, #224]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	3301      	adds	r3, #1
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006616:	4b34      	ldr	r3, [pc, #208]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	0e5b      	lsrs	r3, r3, #25
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	3301      	adds	r3, #1
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	fbb2 f3f3 	udiv	r3, r2, r3
 800662a:	61fb      	str	r3, [r7, #28]
          break;
 800662c:	e001      	b.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800662e:	bf00      	nop
 8006630:	e21a      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006632:	bf00      	nop
        break;
 8006634:	e218      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006636:	4b2c      	ldr	r3, [pc, #176]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006648:	f7fe fec4 	bl	80053d4 <HAL_RCC_GetPCLK2Freq>
 800664c:	61f8      	str	r0, [r7, #28]
        break;
 800664e:	e20b      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006650:	f7fe fe12 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8006654:	61f8      	str	r0, [r7, #28]
        break;
 8006656:	e207      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006658:	4b23      	ldr	r3, [pc, #140]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800665a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665e:	f003 0318 	and.w	r3, r3, #24
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b10      	cmp	r3, #16
 8006668:	d010      	beq.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b10      	cmp	r3, #16
 800666e:	d834      	bhi.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d024      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800667c:	e02d      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800667e:	69b9      	ldr	r1, [r7, #24]
 8006680:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006684:	f000 fbe2 	bl	8006e4c <RCCEx_GetSAIxPeriphCLKFreq>
 8006688:	61f8      	str	r0, [r7, #28]
          break;
 800668a:	e02b      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800668c:	4b16      	ldr	r3, [pc, #88]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d122      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006698:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	091b      	lsrs	r3, r3, #4
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	e005      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80066b0:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	4a0c      	ldr	r2, [pc, #48]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80066be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c2:	61fb      	str	r3, [r7, #28]
          break;
 80066c4:	e00b      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066c6:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80066d6:	61fb      	str	r3, [r7, #28]
          break;
 80066d8:	e003      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80066da:	bf00      	nop
 80066dc:	e1c4      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066de:	bf00      	nop
 80066e0:	e1c2      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066e2:	bf00      	nop
        break;
 80066e4:	e1c0      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000
 80066ec:	00f42400 	.word	0x00f42400
 80066f0:	08012a48 	.word	0x08012a48
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80066f4:	4b96      	ldr	r3, [pc, #600]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006706:	d013      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670e:	d819      	bhi.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671c:	d004      	beq.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800671e:	e011      	b.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006720:	f7fe fe42 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006724:	61f8      	str	r0, [r7, #28]
          break;
 8006726:	e010      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006728:	f7fe fda6 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800672c:	61f8      	str	r0, [r7, #28]
          break;
 800672e:	e00c      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006730:	4b87      	ldr	r3, [pc, #540]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800673c:	d104      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800673e:	4b85      	ldr	r3, [pc, #532]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006740:	61fb      	str	r3, [r7, #28]
          break;
 8006742:	e001      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006744:	bf00      	nop
 8006746:	e18f      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006748:	bf00      	nop
        break;
 800674a:	e18d      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800674c:	4b80      	ldr	r3, [pc, #512]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675e:	d013      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006766:	d819      	bhi.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006774:	d004      	beq.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006776:	e011      	b.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fe fe16 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 800677c:	61f8      	str	r0, [r7, #28]
          break;
 800677e:	e010      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006780:	f7fe fd7a 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8006784:	61f8      	str	r0, [r7, #28]
          break;
 8006786:	e00c      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006794:	d104      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006796:	4b6f      	ldr	r3, [pc, #444]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006798:	61fb      	str	r3, [r7, #28]
          break;
 800679a:	e001      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800679c:	bf00      	nop
 800679e:	e163      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067a0:	bf00      	nop
        break;
 80067a2:	e161      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80067a4:	4b6a      	ldr	r3, [pc, #424]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b6:	d013      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067be:	d819      	bhi.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067cc:	d004      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80067ce:	e011      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067d0:	f7fe fdea 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 80067d4:	61f8      	str	r0, [r7, #28]
          break;
 80067d6:	e010      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80067d8:	f7fe fd4e 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80067dc:	61f8      	str	r0, [r7, #28]
          break;
 80067de:	e00c      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067e0:	4b5b      	ldr	r3, [pc, #364]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ec:	d104      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80067ee:	4b59      	ldr	r3, [pc, #356]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80067f0:	61fb      	str	r3, [r7, #28]
          break;
 80067f2:	e001      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80067f4:	bf00      	nop
 80067f6:	e137      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067f8:	bf00      	nop
        break;
 80067fa:	e135      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80067fc:	4b54      	ldr	r3, [pc, #336]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d011      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d818      	bhi.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d004      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006820:	e011      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006822:	f7fe fdc1 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006826:	61f8      	str	r0, [r7, #28]
          break;
 8006828:	e010      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800682a:	f7fe fd25 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800682e:	61f8      	str	r0, [r7, #28]
          break;
 8006830:	e00c      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006832:	4b47      	ldr	r3, [pc, #284]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683e:	d104      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006840:	4b44      	ldr	r3, [pc, #272]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006842:	61fb      	str	r3, [r7, #28]
          break;
 8006844:	e001      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006846:	bf00      	nop
 8006848:	e10e      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800684a:	bf00      	nop
        break;
 800684c:	e10c      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800684e:	4b40      	ldr	r3, [pc, #256]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006854:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006860:	d02c      	beq.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006868:	d833      	bhi.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006870:	d01a      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006878:	d82b      	bhi.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006886:	d004      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006888:	e023      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800688a:	f7fe fd8d 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 800688e:	61f8      	str	r0, [r7, #28]
          break;
 8006890:	e026      	b.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006892:	4b2f      	ldr	r3, [pc, #188]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b02      	cmp	r3, #2
 800689e:	d11a      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80068a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068a4:	61fb      	str	r3, [r7, #28]
          break;
 80068a6:	e016      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068a8:	4b29      	ldr	r3, [pc, #164]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b4:	d111      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80068b6:	4b27      	ldr	r3, [pc, #156]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068b8:	61fb      	str	r3, [r7, #28]
          break;
 80068ba:	e00e      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068bc:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d109      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80068ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ce:	61fb      	str	r3, [r7, #28]
          break;
 80068d0:	e005      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80068d2:	bf00      	nop
 80068d4:	e0c8      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068d6:	bf00      	nop
 80068d8:	e0c6      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068da:	bf00      	nop
 80068dc:	e0c4      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068de:	bf00      	nop
        break;
 80068e0:	e0c2      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80068e2:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068f4:	d030      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068fc:	d837      	bhi.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006904:	d01a      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800690c:	d82f      	bhi.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d004      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691a:	d004      	beq.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800691c:	e027      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fe fd43 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006922:	61f8      	str	r0, [r7, #28]
          break;
 8006924:	e02a      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b02      	cmp	r3, #2
 8006932:	d11e      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006934:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006938:	61fb      	str	r3, [r7, #28]
          break;
 800693a:	e01a      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006948:	d115      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800694a:	4b02      	ldr	r3, [pc, #8]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800694c:	61fb      	str	r3, [r7, #28]
          break;
 800694e:	e012      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006950:	40021000 	.word	0x40021000
 8006954:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006958:	4b46      	ldr	r3, [pc, #280]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d109      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696a:	61fb      	str	r3, [r7, #28]
          break;
 800696c:	e005      	b.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800696e:	bf00      	nop
 8006970:	e07a      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006972:	bf00      	nop
 8006974:	e078      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006976:	bf00      	nop
 8006978:	e076      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800697a:	bf00      	nop
        break;
 800697c:	e074      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800697e:	4b3d      	ldr	r3, [pc, #244]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006984:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006990:	d02c      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006998:	d855      	bhi.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80069a8:	e04d      	b.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80069aa:	f7fe fc65 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80069ae:	61f8      	str	r0, [r7, #28]
          break;
 80069b0:	e04e      	b.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80069b2:	4b30      	ldr	r3, [pc, #192]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d145      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80069be:	4b2d      	ldr	r3, [pc, #180]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80069ca:	4b2a      	ldr	r3, [pc, #168]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	e005      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80069d6:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	4a25      	ldr	r2, [pc, #148]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80069e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e8:	61fb      	str	r3, [r7, #28]
          break;
 80069ea:	e02e      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069ec:	4b21      	ldr	r3, [pc, #132]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f8:	d129      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80069fa:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a06:	d122      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	0a1b      	lsrs	r3, r3, #8
 8006a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a12:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	fb03 f202 	mul.w	r2, r3, r2
 8006a1c:	4b15      	ldr	r3, [pc, #84]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	091b      	lsrs	r3, r3, #4
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	3301      	adds	r3, #1
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	0d5b      	lsrs	r3, r3, #21
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	3301      	adds	r3, #1
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	61fb      	str	r3, [r7, #28]
          break;
 8006a44:	e003      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006a46:	bf00      	nop
 8006a48:	e00e      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a4a:	bf00      	nop
 8006a4c:	e00c      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a4e:	bf00      	nop
        break;
 8006a50:	e00a      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006a52:	bf00      	nop
 8006a54:	e008      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006a56:	bf00      	nop
 8006a58:	e006      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e004      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e002      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006a62:	bf00      	nop
 8006a64:	e000      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006a66:	bf00      	nop
    }
  }

  return(frequency);
 8006a68:	69fb      	ldr	r3, [r7, #28]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40021000 	.word	0x40021000
 8006a78:	08012a48 	.word	0x08012a48

08006a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a8a:	4b72      	ldr	r3, [pc, #456]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00e      	beq.n	8006ab4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a96:	4b6f      	ldr	r3, [pc, #444]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f003 0203 	and.w	r2, r3, #3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d103      	bne.n	8006aae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d142      	bne.n	8006b34 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	73fb      	strb	r3, [r7, #15]
 8006ab2:	e03f      	b.n	8006b34 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d018      	beq.n	8006aee <RCCEx_PLLSAI1_Config+0x72>
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d825      	bhi.n	8006b0c <RCCEx_PLLSAI1_Config+0x90>
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d002      	beq.n	8006aca <RCCEx_PLLSAI1_Config+0x4e>
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d009      	beq.n	8006adc <RCCEx_PLLSAI1_Config+0x60>
 8006ac8:	e020      	b.n	8006b0c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006aca:	4b62      	ldr	r3, [pc, #392]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d11d      	bne.n	8006b12 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ada:	e01a      	b.n	8006b12 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006adc:	4b5d      	ldr	r3, [pc, #372]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d116      	bne.n	8006b16 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aec:	e013      	b.n	8006b16 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006aee:	4b59      	ldr	r3, [pc, #356]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10f      	bne.n	8006b1a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006afa:	4b56      	ldr	r3, [pc, #344]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b0a:	e006      	b.n	8006b1a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b10:	e004      	b.n	8006b1c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b12:	bf00      	nop
 8006b14:	e002      	b.n	8006b1c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b16:	bf00      	nop
 8006b18:	e000      	b.n	8006b1c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006b22:	4b4c      	ldr	r3, [pc, #304]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f023 0203 	bic.w	r2, r3, #3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4949      	ldr	r1, [pc, #292]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f040 8086 	bne.w	8006c48 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b3c:	4b45      	ldr	r3, [pc, #276]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a44      	ldr	r2, [pc, #272]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b48:	f7fb fc22 	bl	8002390 <HAL_GetTick>
 8006b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b4e:	e009      	b.n	8006b64 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b50:	f7fb fc1e 	bl	8002390 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d902      	bls.n	8006b64 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	73fb      	strb	r3, [r7, #15]
        break;
 8006b62:	e005      	b.n	8006b70 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b64:	4b3b      	ldr	r3, [pc, #236]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ef      	bne.n	8006b50 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d168      	bne.n	8006c48 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d113      	bne.n	8006ba4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b7c:	4b35      	ldr	r3, [pc, #212]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	4b35      	ldr	r3, [pc, #212]	; (8006c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b82:	4013      	ands	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6892      	ldr	r2, [r2, #8]
 8006b88:	0211      	lsls	r1, r2, #8
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68d2      	ldr	r2, [r2, #12]
 8006b8e:	06d2      	lsls	r2, r2, #27
 8006b90:	4311      	orrs	r1, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6852      	ldr	r2, [r2, #4]
 8006b96:	3a01      	subs	r2, #1
 8006b98:	0112      	lsls	r2, r2, #4
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	492d      	ldr	r1, [pc, #180]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	610b      	str	r3, [r1, #16]
 8006ba2:	e02d      	b.n	8006c00 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d115      	bne.n	8006bd6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006baa:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	4b2b      	ldr	r3, [pc, #172]	; (8006c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6892      	ldr	r2, [r2, #8]
 8006bb6:	0211      	lsls	r1, r2, #8
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6912      	ldr	r2, [r2, #16]
 8006bbc:	0852      	lsrs	r2, r2, #1
 8006bbe:	3a01      	subs	r2, #1
 8006bc0:	0552      	lsls	r2, r2, #21
 8006bc2:	4311      	orrs	r1, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6852      	ldr	r2, [r2, #4]
 8006bc8:	3a01      	subs	r2, #1
 8006bca:	0112      	lsls	r2, r2, #4
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	4921      	ldr	r1, [pc, #132]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	610b      	str	r3, [r1, #16]
 8006bd4:	e014      	b.n	8006c00 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bd6:	4b1f      	ldr	r3, [pc, #124]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6892      	ldr	r2, [r2, #8]
 8006be2:	0211      	lsls	r1, r2, #8
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6952      	ldr	r2, [r2, #20]
 8006be8:	0852      	lsrs	r2, r2, #1
 8006bea:	3a01      	subs	r2, #1
 8006bec:	0652      	lsls	r2, r2, #25
 8006bee:	4311      	orrs	r1, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6852      	ldr	r2, [r2, #4]
 8006bf4:	3a01      	subs	r2, #1
 8006bf6:	0112      	lsls	r2, r2, #4
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	4916      	ldr	r1, [pc, #88]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c00:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0c:	f7fb fbc0 	bl	8002390 <HAL_GetTick>
 8006c10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c12:	e009      	b.n	8006c28 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c14:	f7fb fbbc 	bl	8002390 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d902      	bls.n	8006c28 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	73fb      	strb	r3, [r7, #15]
          break;
 8006c26:	e005      	b.n	8006c34 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c28:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0ef      	beq.n	8006c14 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	4904      	ldr	r1, [pc, #16]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40021000 	.word	0x40021000
 8006c58:	07ff800f 	.word	0x07ff800f
 8006c5c:	ff9f800f 	.word	0xff9f800f
 8006c60:	f9ff800f 	.word	0xf9ff800f

08006c64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c72:	4b72      	ldr	r3, [pc, #456]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00e      	beq.n	8006c9c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c7e:	4b6f      	ldr	r3, [pc, #444]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f003 0203 	and.w	r2, r3, #3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d103      	bne.n	8006c96 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
       ||
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d142      	bne.n	8006d1c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	e03f      	b.n	8006d1c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d018      	beq.n	8006cd6 <RCCEx_PLLSAI2_Config+0x72>
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d825      	bhi.n	8006cf4 <RCCEx_PLLSAI2_Config+0x90>
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d002      	beq.n	8006cb2 <RCCEx_PLLSAI2_Config+0x4e>
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d009      	beq.n	8006cc4 <RCCEx_PLLSAI2_Config+0x60>
 8006cb0:	e020      	b.n	8006cf4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cb2:	4b62      	ldr	r3, [pc, #392]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d11d      	bne.n	8006cfa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc2:	e01a      	b.n	8006cfa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cc4:	4b5d      	ldr	r3, [pc, #372]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d116      	bne.n	8006cfe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cd4:	e013      	b.n	8006cfe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cd6:	4b59      	ldr	r3, [pc, #356]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10f      	bne.n	8006d02 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ce2:	4b56      	ldr	r3, [pc, #344]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cf2:	e006      	b.n	8006d02 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf8:	e004      	b.n	8006d04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006cfa:	bf00      	nop
 8006cfc:	e002      	b.n	8006d04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006d0a:	4b4c      	ldr	r3, [pc, #304]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f023 0203 	bic.w	r2, r3, #3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4949      	ldr	r1, [pc, #292]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 8086 	bne.w	8006e30 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d24:	4b45      	ldr	r3, [pc, #276]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a44      	ldr	r2, [pc, #272]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d30:	f7fb fb2e 	bl	8002390 <HAL_GetTick>
 8006d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d36:	e009      	b.n	8006d4c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d38:	f7fb fb2a 	bl	8002390 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d902      	bls.n	8006d4c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	73fb      	strb	r3, [r7, #15]
        break;
 8006d4a:	e005      	b.n	8006d58 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d4c:	4b3b      	ldr	r3, [pc, #236]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1ef      	bne.n	8006d38 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d168      	bne.n	8006e30 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d113      	bne.n	8006d8c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d64:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d66:	695a      	ldr	r2, [r3, #20]
 8006d68:	4b35      	ldr	r3, [pc, #212]	; (8006e40 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6892      	ldr	r2, [r2, #8]
 8006d70:	0211      	lsls	r1, r2, #8
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	68d2      	ldr	r2, [r2, #12]
 8006d76:	06d2      	lsls	r2, r2, #27
 8006d78:	4311      	orrs	r1, r2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	6852      	ldr	r2, [r2, #4]
 8006d7e:	3a01      	subs	r2, #1
 8006d80:	0112      	lsls	r2, r2, #4
 8006d82:	430a      	orrs	r2, r1
 8006d84:	492d      	ldr	r1, [pc, #180]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	614b      	str	r3, [r1, #20]
 8006d8a:	e02d      	b.n	8006de8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d115      	bne.n	8006dbe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d92:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6892      	ldr	r2, [r2, #8]
 8006d9e:	0211      	lsls	r1, r2, #8
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6912      	ldr	r2, [r2, #16]
 8006da4:	0852      	lsrs	r2, r2, #1
 8006da6:	3a01      	subs	r2, #1
 8006da8:	0552      	lsls	r2, r2, #21
 8006daa:	4311      	orrs	r1, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6852      	ldr	r2, [r2, #4]
 8006db0:	3a01      	subs	r2, #1
 8006db2:	0112      	lsls	r2, r2, #4
 8006db4:	430a      	orrs	r2, r1
 8006db6:	4921      	ldr	r1, [pc, #132]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	614b      	str	r3, [r1, #20]
 8006dbc:	e014      	b.n	8006de8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	4b21      	ldr	r3, [pc, #132]	; (8006e48 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6892      	ldr	r2, [r2, #8]
 8006dca:	0211      	lsls	r1, r2, #8
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6952      	ldr	r2, [r2, #20]
 8006dd0:	0852      	lsrs	r2, r2, #1
 8006dd2:	3a01      	subs	r2, #1
 8006dd4:	0652      	lsls	r2, r2, #25
 8006dd6:	4311      	orrs	r1, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6852      	ldr	r2, [r2, #4]
 8006ddc:	3a01      	subs	r2, #1
 8006dde:	0112      	lsls	r2, r2, #4
 8006de0:	430a      	orrs	r2, r1
 8006de2:	4916      	ldr	r1, [pc, #88]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006de8:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df4:	f7fb facc 	bl	8002390 <HAL_GetTick>
 8006df8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006dfa:	e009      	b.n	8006e10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dfc:	f7fb fac8 	bl	8002390 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d902      	bls.n	8006e10 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	73fb      	strb	r3, [r7, #15]
          break;
 8006e0e:	e005      	b.n	8006e1c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0ef      	beq.n	8006dfc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e22:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	4904      	ldr	r1, [pc, #16]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	07ff800f 	.word	0x07ff800f
 8006e44:	ff9f800f 	.word	0xff9f800f
 8006e48:	f9ff800f 	.word	0xf9ff800f

08006e4c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b089      	sub	sp, #36	; 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e68:	d10b      	bne.n	8006e82 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006e6a:	4b7e      	ldr	r3, [pc, #504]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e70:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006e74:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b60      	cmp	r3, #96	; 0x60
 8006e7a:	d112      	bne.n	8006ea2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e7c:	4b7a      	ldr	r3, [pc, #488]	; (8007068 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	e00f      	b.n	8006ea2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e88:	d10b      	bne.n	8006ea2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006e8a:	4b76      	ldr	r3, [pc, #472]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e94:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e9c:	d101      	bne.n	8006ea2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006e9e:	4b72      	ldr	r3, [pc, #456]	; (8007068 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006ea0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f040 80d6 	bne.w	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	d003      	beq.n	8006ebc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eba:	d13b      	bne.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006ebc:	4b69      	ldr	r3, [pc, #420]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ec8:	f040 80c4 	bne.w	8007054 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006ecc:	4b65      	ldr	r3, [pc, #404]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80bd 	beq.w	8007054 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006eda:	4b62      	ldr	r3, [pc, #392]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006eee:	4b5d      	ldr	r3, [pc, #372]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006efa:	4b5a      	ldr	r3, [pc, #360]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	0edb      	lsrs	r3, r3, #27
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006f0c:	4b55      	ldr	r3, [pc, #340]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006f18:	2311      	movs	r3, #17
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e001      	b.n	8006f22 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006f1e:	2307      	movs	r3, #7
 8006f20:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	fb03 f202 	mul.w	r2, r3, r2
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f30:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f32:	e08f      	b.n	8007054 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d13a      	bne.n	8006fb0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006f3a:	4b4a      	ldr	r3, [pc, #296]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f46:	f040 8086 	bne.w	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006f4a:	4b46      	ldr	r3, [pc, #280]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d07f      	beq.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006f56:	4b43      	ldr	r3, [pc, #268]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	091b      	lsrs	r3, r3, #4
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	3301      	adds	r3, #1
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f68:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006f6a:	4b3e      	ldr	r3, [pc, #248]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f74:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006f76:	4b3b      	ldr	r3, [pc, #236]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	0edb      	lsrs	r3, r3, #27
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006f88:	4b36      	ldr	r3, [pc, #216]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006f94:	2311      	movs	r3, #17
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e001      	b.n	8006f9e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006f9a:	2307      	movs	r3, #7
 8006f9c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	fb03 f202 	mul.w	r2, r3, r2
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	e052      	b.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b80      	cmp	r3, #128	; 0x80
 8006fb4:	d003      	beq.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbc:	d109      	bne.n	8006fd2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fbe:	4b29      	ldr	r3, [pc, #164]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fca:	d144      	bne.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006fce:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd0:	e041      	b.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b20      	cmp	r3, #32
 8006fd6:	d003      	beq.n	8006fe0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fde:	d13a      	bne.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006fe0:	4b20      	ldr	r3, [pc, #128]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fec:	d133      	bne.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006fee:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02d      	beq.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006ffa:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	3301      	adds	r3, #1
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800700e:	4b15      	ldr	r3, [pc, #84]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800701a:	4b12      	ldr	r3, [pc, #72]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	0edb      	lsrs	r3, r3, #27
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007038:	2311      	movs	r3, #17
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	e001      	b.n	8007042 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800703e:	2307      	movs	r3, #7
 8007040:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	fb03 f202 	mul.w	r2, r3, r2
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	e000      	b.n	8007056 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007054:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007056:	69fb      	ldr	r3, [r7, #28]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3724      	adds	r7, #36	; 0x24
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40021000 	.word	0x40021000
 8007068:	001fff68 	.word	0x001fff68
 800706c:	00f42400 	.word	0x00f42400

08007070 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e078      	b.n	8007174 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d105      	bne.n	800709a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7fa fe1d 	bl	8001cd4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2203      	movs	r2, #3
 800709e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f86a 	bl	800717c <HAL_SD_InitCard>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e060      	b.n	8007174 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80070b2:	f107 0308 	add.w	r3, r7, #8
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fdcd 	bl	8007c58 <HAL_SD_GetCardStatus>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e055      	b.n	8007174 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80070c8:	7e3b      	ldrb	r3, [r7, #24]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80070ce:	7e7b      	ldrb	r3, [r7, #25]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d10a      	bne.n	80070f2 <HAL_SD_Init+0x82>
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d102      	bne.n	80070e8 <HAL_SD_Init+0x78>
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d004      	beq.n	80070f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80070f0:	e00b      	b.n	800710a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d104      	bne.n	8007104 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007100:	65da      	str	r2, [r3, #92]	; 0x5c
 8007102:	e002      	b.n	800710a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fe83 	bl	8007e1c <HAL_SD_ConfigWideBusOperation>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e029      	b.n	8007174 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007120:	f7fb f936 	bl	8002390 <HAL_GetTick>
 8007124:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007126:	e014      	b.n	8007152 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007128:	f7fb f932 	bl	8002390 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007136:	d10c      	bne.n	8007152 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e010      	b.n	8007174 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 ff76 	bl	8008044 <HAL_SD_GetCardState>
 8007158:	4603      	mov	r3, r0
 800715a:	2b04      	cmp	r3, #4
 800715c:	d1e4      	bne.n	8007128 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3728      	adds	r7, #40	; 0x28
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800717c:	b5b0      	push	{r4, r5, r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af04      	add	r7, sp, #16
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007184:	2300      	movs	r3, #0
 8007186:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800718c:	2300      	movs	r3, #0
 800718e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007190:	2300      	movs	r3, #0
 8007192:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007194:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007198:	f7fe fd4e 	bl	8005c38 <HAL_RCCEx_GetPeriphCLKFreq>
 800719c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d109      	bne.n	80071b8 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e079      	b.n	80072ac <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	4a3d      	ldr	r2, [pc, #244]	; (80072b4 <HAL_SD_InitCard+0x138>)
 80071be:	fba2 2303 	umull	r2, r3, r2, r3
 80071c2:	091b      	lsrs	r3, r3, #4
 80071c4:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d107      	bne.n	80071e4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0210 	orr.w	r2, r2, #16
 80071e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681d      	ldr	r5, [r3, #0]
 80071e8:	466c      	mov	r4, sp
 80071ea:	f107 0314 	add.w	r3, r7, #20
 80071ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071f6:	f107 0308 	add.w	r3, r7, #8
 80071fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071fc:	4628      	mov	r0, r5
 80071fe:	f003 ff7b 	bl	800b0f8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f003 ffbe 	bl	800b188 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007212:	fbb2 f3f3 	udiv	r3, r2, r3
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007218:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <HAL_SD_InitCard+0x13c>)
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	3301      	adds	r3, #1
 8007222:	4618      	mov	r0, r3
 8007224:	f7fb f8c0 	bl	80023a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 ffeb 	bl	8008204 <SD_PowerON>
 800722e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e02e      	b.n	80072ac <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 ff18 	bl	8008084 <SD_InitCard>
 8007254:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e01b      	b.n	80072ac <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800727c:	4618      	mov	r0, r3
 800727e:	f004 f819 	bl	800b2b4 <SDMMC_CmdBlockLength>
 8007282:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00f      	beq.n	80072aa <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a0b      	ldr	r2, [pc, #44]	; (80072bc <HAL_SD_InitCard+0x140>)
 8007290:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3728      	adds	r7, #40	; 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bdb0      	pop	{r4, r5, r7, pc}
 80072b4:	014f8b59 	.word	0x014f8b59
 80072b8:	00012110 	.word	0x00012110
 80072bc:	1fe00fff 	.word	0x1fe00fff

080072c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b092      	sub	sp, #72	; 0x48
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072ce:	f7fb f85f 	bl	8002390 <HAL_GetTick>
 80072d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d107      	bne.n	80072f2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e170      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	f040 8163 	bne.w	80075c6 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	441a      	add	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007310:	429a      	cmp	r2, r3
 8007312:	d907      	bls.n	8007324 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e157      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2203      	movs	r2, #3
 8007328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2200      	movs	r2, #0
 8007332:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d002      	beq.n	8007342 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	025b      	lsls	r3, r3, #9
 8007340:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007346:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	025b      	lsls	r3, r3, #9
 800734c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800734e:	2390      	movs	r3, #144	; 0x90
 8007350:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007352:	2302      	movs	r3, #2
 8007354:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007356:	2300      	movs	r3, #0
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800735a:	2300      	movs	r3, #0
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f107 0214 	add.w	r2, r7, #20
 8007366:	4611      	mov	r1, r2
 8007368:	4618      	mov	r0, r3
 800736a:	f003 ff77 	bl	800b25c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800737c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d90a      	bls.n	800739a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2202      	movs	r2, #2
 8007388:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007390:	4618      	mov	r0, r3
 8007392:	f003 ffd5 	bl	800b340 <SDMMC_CmdReadMultiBlock>
 8007396:	6478      	str	r0, [r7, #68]	; 0x44
 8007398:	e009      	b.n	80073ae <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073a6:	4618      	mov	r0, r3
 80073a8:	f003 ffa7 	bl	800b2fa <SDMMC_CmdReadSingleBlock>
 80073ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d012      	beq.n	80073da <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a88      	ldr	r2, [pc, #544]	; (80075dc <HAL_SD_ReadBlocks+0x31c>)
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e0fc      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073de:	e061      	b.n	80074a4 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d03c      	beq.n	8007468 <HAL_SD_ReadBlocks+0x1a8>
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d039      	beq.n	8007468 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	643b      	str	r3, [r7, #64]	; 0x40
 80073f8:	e033      	b.n	8007462 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f003 fea4 	bl	800b14c <SDMMC_ReadFIFO>
 8007404:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	b2da      	uxtb	r2, r3
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	3301      	adds	r3, #1
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	3b01      	subs	r3, #1
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	b2da      	uxtb	r2, r3
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	3301      	adds	r3, #1
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800742a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742c:	3b01      	subs	r3, #1
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	b2da      	uxtb	r2, r3
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743c:	3301      	adds	r3, #1
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007442:	3b01      	subs	r3, #1
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	0e1b      	lsrs	r3, r3, #24
 800744a:	b2da      	uxtb	r2, r3
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	3301      	adds	r3, #1
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007458:	3b01      	subs	r3, #1
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800745c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745e:	3301      	adds	r3, #1
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
 8007462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007464:	2b07      	cmp	r3, #7
 8007466:	d9c8      	bls.n	80073fa <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007468:	f7fa ff92 	bl	8002390 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007474:	429a      	cmp	r2, r3
 8007476:	d902      	bls.n	800747e <HAL_SD_ReadBlocks+0x1be>
 8007478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747a:	2b00      	cmp	r3, #0
 800747c:	d112      	bne.n	80074a4 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a56      	ldr	r2, [pc, #344]	; (80075dc <HAL_SD_ReadBlocks+0x31c>)
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e097      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d096      	beq.n	80073e0 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d022      	beq.n	8007516 <HAL_SD_ReadBlocks+0x256>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d91f      	bls.n	8007516 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d01b      	beq.n	8007516 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f003 ff96 	bl	800b414 <SDMMC_CmdStopTransfer>
 80074e8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80074ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d012      	beq.n	8007516 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a39      	ldr	r2, [pc, #228]	; (80075dc <HAL_SD_ReadBlocks+0x31c>)
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074fe:	431a      	orrs	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e05e      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d012      	beq.n	800754a <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <HAL_SD_ReadBlocks+0x31c>)
 800752a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	f043 0208 	orr.w	r2, r3, #8
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e044      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d012      	beq.n	800757e <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <HAL_SD_ReadBlocks+0x31c>)
 800755e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	f043 0202 	orr.w	r2, r3, #2
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e02a      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d012      	beq.n	80075b2 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a12      	ldr	r2, [pc, #72]	; (80075dc <HAL_SD_ReadBlocks+0x31c>)
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	f043 0220 	orr.w	r2, r3, #32
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e010      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a0a      	ldr	r2, [pc, #40]	; (80075e0 <HAL_SD_ReadBlocks+0x320>)
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e006      	b.n	80075d4 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3748      	adds	r7, #72	; 0x48
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	1fe00fff 	.word	0x1fe00fff
 80075e0:	18000f3a 	.word	0x18000f3a

080075e4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b092      	sub	sp, #72	; 0x48
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80075f2:	f7fa fecd 	bl	8002390 <HAL_GetTick>
 80075f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d107      	bne.n	8007616 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e174      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b01      	cmp	r3, #1
 8007620:	f040 8167 	bne.w	80078f2 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800762a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	441a      	add	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007634:	429a      	cmp	r2, r3
 8007636:	d907      	bls.n	8007648 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e15b      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2203      	movs	r2, #3
 800764c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2200      	movs	r2, #0
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d002      	beq.n	8007666 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	025b      	lsls	r3, r3, #9
 8007664:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800766a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	025b      	lsls	r3, r3, #9
 8007670:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007672:	2390      	movs	r3, #144	; 0x90
 8007674:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007676:	2300      	movs	r3, #0
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800767a:	2300      	movs	r3, #0
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800767e:	2300      	movs	r3, #0
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f107 0218 	add.w	r2, r7, #24
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f003 fde5 	bl	800b25c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076a0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d90a      	bls.n	80076be <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2220      	movs	r2, #32
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076b4:	4618      	mov	r0, r3
 80076b6:	f003 fe89 	bl	800b3cc <SDMMC_CmdWriteMultiBlock>
 80076ba:	6478      	str	r0, [r7, #68]	; 0x44
 80076bc:	e009      	b.n	80076d2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2210      	movs	r2, #16
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076ca:	4618      	mov	r0, r3
 80076cc:	f003 fe5b 	bl	800b386 <SDMMC_CmdWriteSingleBlock>
 80076d0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80076d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d012      	beq.n	80076fe <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a8a      	ldr	r2, [pc, #552]	; (8007908 <HAL_SD_WriteBlocks+0x324>)
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e6:	431a      	orrs	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e100      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007702:	e065      	b.n	80077d0 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d040      	beq.n	8007794 <HAL_SD_WriteBlocks+0x1b0>
 8007712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d03d      	beq.n	8007794 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007718:	2300      	movs	r3, #0
 800771a:	643b      	str	r3, [r7, #64]	; 0x40
 800771c:	e037      	b.n	800778e <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007726:	3301      	adds	r3, #1
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800772a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772c:	3b01      	subs	r3, #1
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	021a      	lsls	r2, r3, #8
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	3301      	adds	r3, #1
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007744:	3b01      	subs	r3, #1
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	041a      	lsls	r2, r3, #16
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	3301      	adds	r3, #1
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800775a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775c:	3b01      	subs	r3, #1
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	061a      	lsls	r2, r3, #24
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776e:	3301      	adds	r3, #1
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	3b01      	subs	r3, #1
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f107 0214 	add.w	r2, r7, #20
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f003 fcef 	bl	800b166 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778a:	3301      	adds	r3, #1
 800778c:	643b      	str	r3, [r7, #64]	; 0x40
 800778e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007790:	2b07      	cmp	r3, #7
 8007792:	d9c4      	bls.n	800771e <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007794:	f7fa fdfc 	bl	8002390 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d902      	bls.n	80077aa <HAL_SD_WriteBlocks+0x1c6>
 80077a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d112      	bne.n	80077d0 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a56      	ldr	r2, [pc, #344]	; (8007908 <HAL_SD_WriteBlocks+0x324>)
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e097      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d092      	beq.n	8007704 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ec:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d022      	beq.n	8007842 <HAL_SD_WriteBlocks+0x25e>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d91f      	bls.n	8007842 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007806:	2b03      	cmp	r3, #3
 8007808:	d01b      	beq.n	8007842 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f003 fe00 	bl	800b414 <SDMMC_CmdStopTransfer>
 8007814:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007818:	2b00      	cmp	r3, #0
 800781a:	d012      	beq.n	8007842 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a39      	ldr	r2, [pc, #228]	; (8007908 <HAL_SD_WriteBlocks+0x324>)
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782a:	431a      	orrs	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e05e      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d012      	beq.n	8007876 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2c      	ldr	r2, [pc, #176]	; (8007908 <HAL_SD_WriteBlocks+0x324>)
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	f043 0208 	orr.w	r2, r3, #8
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e044      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d012      	beq.n	80078aa <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <HAL_SD_WriteBlocks+0x324>)
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	f043 0202 	orr.w	r2, r3, #2
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e02a      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b0:	f003 0310 	and.w	r3, r3, #16
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d012      	beq.n	80078de <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a12      	ldr	r2, [pc, #72]	; (8007908 <HAL_SD_WriteBlocks+0x324>)
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	f043 0210 	orr.w	r2, r3, #16
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e010      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a0a      	ldr	r2, [pc, #40]	; (800790c <HAL_SD_WriteBlocks+0x328>)
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	e006      	b.n	8007900 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
  }
}
 8007900:	4618      	mov	r0, r3
 8007902:	3748      	adds	r7, #72	; 0x48
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	1fe00fff 	.word	0x1fe00fff
 800790c:	18000f3a 	.word	0x18000f3a

08007910 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791e:	0f9b      	lsrs	r3, r3, #30
 8007920:	b2da      	uxtb	r2, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792a:	0e9b      	lsrs	r3, r3, #26
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	b2da      	uxtb	r2, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793c:	0e1b      	lsrs	r3, r3, #24
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	b2da      	uxtb	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794e:	0c1b      	lsrs	r3, r3, #16
 8007950:	b2da      	uxtb	r2, r3
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795a:	0a1b      	lsrs	r3, r3, #8
 800795c:	b2da      	uxtb	r2, r3
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007966:	b2da      	uxtb	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007970:	0d1b      	lsrs	r3, r3, #20
 8007972:	b29a      	uxth	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797c:	0c1b      	lsrs	r3, r3, #16
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f003 030f 	and.w	r3, r3, #15
 8007984:	b2da      	uxtb	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800798e:	0bdb      	lsrs	r3, r3, #15
 8007990:	b2db      	uxtb	r3, r3
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079a0:	0b9b      	lsrs	r3, r3, #14
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b2:	0b5b      	lsrs	r3, r3, #13
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c4:	0b1b      	lsrs	r3, r3, #12
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2200      	movs	r2, #0
 80079d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d163      	bne.n	8007aa8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e4:	009a      	lsls	r2, r3, #2
 80079e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079ea:	4013      	ands	r3, r2
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079f0:	0f92      	lsrs	r2, r2, #30
 80079f2:	431a      	orrs	r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079fc:	0edb      	lsrs	r3, r3, #27
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0e:	0e1b      	lsrs	r3, r3, #24
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a20:	0d5b      	lsrs	r3, r3, #21
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a32:	0c9b      	lsrs	r3, r3, #18
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a44:	0bdb      	lsrs	r3, r3, #15
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	7e1b      	ldrb	r3, [r3, #24]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	3302      	adds	r3, #2
 8007a68:	2201      	movs	r2, #1
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a72:	fb03 f202 	mul.w	r2, r3, r2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	7a1b      	ldrb	r3, [r3, #8]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	2201      	movs	r2, #1
 8007a86:	409a      	lsls	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a94:	0a52      	lsrs	r2, r2, #9
 8007a96:	fb03 f202 	mul.w	r2, r3, r2
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa4:	659a      	str	r2, [r3, #88]	; 0x58
 8007aa6:	e031      	b.n	8007b0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d11d      	bne.n	8007aec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007abe:	0c1b      	lsrs	r3, r3, #16
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	3301      	adds	r3, #1
 8007acc:	029a      	lsls	r2, r3, #10
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	659a      	str	r2, [r3, #88]	; 0x58
 8007aea:	e00f      	b.n	8007b0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a58      	ldr	r2, [pc, #352]	; (8007c54 <HAL_SD_GetCardCSD+0x344>)
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e09d      	b.n	8007c48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b10:	0b9b      	lsrs	r3, r3, #14
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b22:	09db      	lsrs	r3, r3, #7
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b44:	0fdb      	lsrs	r3, r3, #31
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b50:	0f5b      	lsrs	r3, r3, #29
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b62:	0e9b      	lsrs	r3, r3, #26
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b74:	0d9b      	lsrs	r3, r3, #22
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b86:	0d5b      	lsrs	r3, r3, #21
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ba2:	0c1b      	lsrs	r3, r3, #16
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb6:	0bdb      	lsrs	r3, r3, #15
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bca:	0b9b      	lsrs	r3, r3, #14
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bde:	0b5b      	lsrs	r3, r3, #13
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf2:	0b1b      	lsrs	r3, r3, #12
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c06:	0a9b      	lsrs	r3, r3, #10
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	1fe00fff 	.word	0x1fe00fff

08007c58 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b094      	sub	sp, #80	; 0x50
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007c68:	f107 0308 	add.w	r3, r7, #8
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fbd4 	bl	800841c <SD_SendSDStatus>
 8007c74:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d011      	beq.n	8007ca0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a4f      	ldr	r2, [pc, #316]	; (8007dc0 <HAL_SD_GetCardStatus+0x168>)
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007c9e:	e070      	b.n	8007d82 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	099b      	lsrs	r3, r3, #6
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	0a1b      	lsrs	r3, r3, #8
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	0e1b      	lsrs	r3, r3, #24
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	061a      	lsls	r2, r3, #24
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ce6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007cf0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	0e1b      	lsrs	r3, r3, #24
 8007cf6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	0d1b      	lsrs	r3, r3, #20
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 030f 	and.w	r3, r3, #15
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	0c1b      	lsrs	r3, r3, #16
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	4313      	orrs	r3, r2
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	0a9b      	lsrs	r3, r3, #10
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	0a1b      	lsrs	r3, r3, #8
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	091b      	lsrs	r3, r3, #4
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 030f 	and.w	r3, r3, #15
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	0e1b      	lsrs	r3, r3, #24
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f003 fa92 	bl	800b2b4 <SDMMC_CmdBlockLength>
 8007d90:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a08      	ldr	r2, [pc, #32]	; (8007dc0 <HAL_SD_GetCardStatus+0x168>)
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007db4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3750      	adds	r7, #80	; 0x50
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	1fe00fff 	.word	0x1fe00fff

08007dc4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007e1c:	b5b0      	push	{r4, r5, r7, lr}
 8007e1e:	b090      	sub	sp, #64	; 0x40
 8007e20:	af04      	add	r7, sp, #16
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d02e      	beq.n	8007e9a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e42:	d106      	bne.n	8007e52 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
 8007e50:	e029      	b.n	8007ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e58:	d10a      	bne.n	8007e70 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fbd6 	bl	800860c <SD_WideBus_Enable>
 8007e60:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e6e:	e01a      	b.n	8007ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc13 	bl	80086a2 <SD_WideBus_Disable>
 8007e7c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
 8007e8a:	e00c      	b.n	8007ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
 8007e98:	e005      	b.n	8007ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a60      	ldr	r2, [pc, #384]	; (8008034 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007eb4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ebc:	e097      	b.n	8007fee <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007ebe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007ec2:	f7fd feb9 	bl	8005c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ec6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8086 	beq.w	8007fdc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695a      	ldr	r2, [r3, #20]
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	4952      	ldr	r1, [pc, #328]	; (8008038 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007eee:	fba1 1303 	umull	r1, r3, r1, r3
 8007ef2:	0e1b      	lsrs	r3, r3, #24
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d303      	bcc.n	8007f00 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	61fb      	str	r3, [r7, #28]
 8007efe:	e05a      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f08:	d103      	bne.n	8007f12 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	61fb      	str	r3, [r7, #28]
 8007f10:	e051      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1a:	d126      	bne.n	8007f6a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10e      	bne.n	8007f42 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	4a45      	ldr	r2, [pc, #276]	; (800803c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d906      	bls.n	8007f3a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	4a42      	ldr	r2, [pc, #264]	; (8008038 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	0e5b      	lsrs	r3, r3, #25
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	e03d      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e039      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	4a3b      	ldr	r2, [pc, #236]	; (800803c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d906      	bls.n	8007f62 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	4a38      	ldr	r2, [pc, #224]	; (8008038 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	0e5b      	lsrs	r3, r3, #25
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	e029      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e025      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10e      	bne.n	8007f90 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	4a32      	ldr	r2, [pc, #200]	; (8008040 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d906      	bls.n	8007f88 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	4a2e      	ldr	r2, [pc, #184]	; (8008038 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f82:	0e1b      	lsrs	r3, r3, #24
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e016      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	e012      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	4a28      	ldr	r2, [pc, #160]	; (8008040 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d906      	bls.n	8007fb0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	4a24      	ldr	r2, [pc, #144]	; (8008038 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	0e1b      	lsrs	r3, r3, #24
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	e002      	b.n	8007fb6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681d      	ldr	r5, [r3, #0]
 8007fc0:	466c      	mov	r4, sp
 8007fc2:	f107 0318 	add.w	r3, r7, #24
 8007fc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f003 f88f 	bl	800b0f8 <SDMMC_Init>
 8007fda:	e008      	b.n	8007fee <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f003 f95c 	bl	800b2b4 <SDMMC_CmdBlockLength>
 8007ffc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00c      	beq.n	800801e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <HAL_SD_ConfigWideBusOperation+0x218>)
 800800a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800802a:	4618      	mov	r0, r3
 800802c:	3730      	adds	r7, #48	; 0x30
 800802e:	46bd      	mov	sp, r7
 8008030:	bdb0      	pop	{r4, r5, r7, pc}
 8008032:	bf00      	nop
 8008034:	1fe00fff 	.word	0x1fe00fff
 8008038:	55e63b89 	.word	0x55e63b89
 800803c:	02faf080 	.word	0x02faf080
 8008040:	017d7840 	.word	0x017d7840

08008044 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008050:	f107 030c 	add.w	r3, r7, #12
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fab0 	bl	80085bc <SD_SendStatus>
 800805c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	0a5b      	lsrs	r3, r3, #9
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800807a:	693b      	ldr	r3, [r7, #16]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008084:	b5b0      	push	{r4, r5, r7, lr}
 8008086:	b090      	sub	sp, #64	; 0x40
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800808c:	2301      	movs	r3, #1
 800808e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f003 f889 	bl	800b1ac <SDMMC_GetPowerState>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80080a4:	e0a9      	b.n	80081fa <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d02e      	beq.n	800810c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f003 face 	bl	800b654 <SDMMC_CmdSendCID>
 80080b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c2:	e09a      	b.n	80081fa <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f003 f8b3 	bl	800b236 <SDMMC_GetResponse>
 80080d0:	4602      	mov	r2, r0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2104      	movs	r1, #4
 80080dc:	4618      	mov	r0, r3
 80080de:	f003 f8aa 	bl	800b236 <SDMMC_GetResponse>
 80080e2:	4602      	mov	r2, r0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2108      	movs	r1, #8
 80080ee:	4618      	mov	r0, r3
 80080f0:	f003 f8a1 	bl	800b236 <SDMMC_GetResponse>
 80080f4:	4602      	mov	r2, r0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	210c      	movs	r1, #12
 8008100:	4618      	mov	r0, r3
 8008102:	f003 f898 	bl	800b236 <SDMMC_GetResponse>
 8008106:	4602      	mov	r2, r0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	2b03      	cmp	r3, #3
 8008112:	d00d      	beq.n	8008130 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f107 020e 	add.w	r2, r7, #14
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f003 fad7 	bl	800b6d2 <SDMMC_CmdSetRelAdd>
 8008124:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <SD_InitCard+0xac>
    {
      return errorstate;
 800812c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812e:	e064      	b.n	80081fa <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008134:	2b03      	cmp	r3, #3
 8008136:	d036      	beq.n	80081a6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008148:	041b      	lsls	r3, r3, #16
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f003 faa0 	bl	800b692 <SDMMC_CmdSendCSD>
 8008152:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <SD_InitCard+0xda>
    {
      return errorstate;
 800815a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815c:	e04d      	b.n	80081fa <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2100      	movs	r1, #0
 8008164:	4618      	mov	r0, r3
 8008166:	f003 f866 	bl	800b236 <SDMMC_GetResponse>
 800816a:	4602      	mov	r2, r0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2104      	movs	r1, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f003 f85d 	bl	800b236 <SDMMC_GetResponse>
 800817c:	4602      	mov	r2, r0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2108      	movs	r1, #8
 8008188:	4618      	mov	r0, r3
 800818a:	f003 f854 	bl	800b236 <SDMMC_GetResponse>
 800818e:	4602      	mov	r2, r0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	210c      	movs	r1, #12
 800819a:	4618      	mov	r0, r3
 800819c:	f003 f84b 	bl	800b236 <SDMMC_GetResponse>
 80081a0:	4602      	mov	r2, r0
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2104      	movs	r1, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f003 f842 	bl	800b236 <SDMMC_GetResponse>
 80081b2:	4603      	mov	r3, r0
 80081b4:	0d1a      	lsrs	r2, r3, #20
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80081ba:	f107 0310 	add.w	r3, r7, #16
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fba5 	bl	8007910 <HAL_SD_GetCardCSD>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081d0:	e013      	b.n	80081fa <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081da:	041b      	lsls	r3, r3, #16
 80081dc:	2200      	movs	r2, #0
 80081de:	461c      	mov	r4, r3
 80081e0:	4615      	mov	r5, r2
 80081e2:	4622      	mov	r2, r4
 80081e4:	462b      	mov	r3, r5
 80081e6:	4608      	mov	r0, r1
 80081e8:	f003 f94a 	bl	800b480 <SDMMC_CmdSelDesel>
 80081ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <SD_InitCard+0x174>
  {
    return errorstate;
 80081f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f6:	e000      	b.n	80081fa <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3740      	adds	r7, #64	; 0x40
 80081fe:	46bd      	mov	sp, r7
 8008200:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008204 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	2300      	movs	r3, #0
 8008216:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008218:	f7fa f8ba 	bl	8002390 <HAL_GetTick>
 800821c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f003 f950 	bl	800b4c8 <SDMMC_CmdGoIdleState>
 8008228:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <SD_PowerON+0x30>
  {
    return errorstate;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	e0ed      	b.n	8008410 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f003 f963 	bl	800b504 <SDMMC_CmdOperCond>
 800823e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f003 f939 	bl	800b4c8 <SDMMC_CmdGoIdleState>
 8008256:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d004      	beq.n	8008268 <SD_PowerON+0x64>
    {
      return errorstate;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	e0d6      	b.n	8008410 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	2b01      	cmp	r3, #1
 800826e:	d137      	bne.n	80082e0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f003 f964 	bl	800b544 <SDMMC_CmdAppCommand>
 800827c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d02d      	beq.n	80082e0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008284:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008288:	e0c2      	b.n	8008410 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2100      	movs	r1, #0
 8008290:	4618      	mov	r0, r3
 8008292:	f003 f957 	bl	800b544 <SDMMC_CmdAppCommand>
 8008296:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	e0b6      	b.n	8008410 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	495c      	ldr	r1, [pc, #368]	; (8008418 <SD_PowerON+0x214>)
 80082a8:	4618      	mov	r0, r3
 80082aa:	f003 f96e 	bl	800b58a <SDMMC_CmdAppOperCommand>
 80082ae:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082ba:	e0a9      	b.n	8008410 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 ffb7 	bl	800b236 <SDMMC_GetResponse>
 80082c8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	0fdb      	lsrs	r3, r3, #31
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <SD_PowerON+0xd2>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <SD_PowerON+0xd4>
 80082d6:	2300      	movs	r3, #0
 80082d8:	61bb      	str	r3, [r7, #24]

    count++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d802      	bhi.n	80082f0 <SD_PowerON+0xec>
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0cc      	beq.n	800828a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d902      	bls.n	8008300 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80082fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082fe:	e087      	b.n	8008410 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d07e      	beq.n	8008408 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d17a      	bne.n	800840e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d075      	beq.n	800840e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008328:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f042 0208 	orr.w	r2, r2, #8
 8008338:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f003 fa2e 	bl	800b7a0 <SDMMC_CmdVoltageSwitch>
 8008344:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <SD_PowerON+0x162>
        {
          return errorstate;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	e05f      	b.n	8008410 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008350:	f7fa f81e 	bl	8002390 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800835e:	d102      	bne.n	8008366 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008364:	e054      	b.n	8008410 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008374:	d1ec      	bne.n	8008350 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800837e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800838a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800838e:	d002      	beq.n	8008396 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008394:	e03c      	b.n	8008410 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008396:	2001      	movs	r0, #1
 8008398:	f000 fa9e 	bl	80088d8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0204 	orr.w	r2, r2, #4
 80083aa:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80083ac:	e00a      	b.n	80083c4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80083ae:	f7f9 ffef 	bl	8002390 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083bc:	d102      	bne.n	80083c4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80083be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083c2:	e025      	b.n	8008410 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083d2:	d1ec      	bne.n	80083ae <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ec:	d102      	bne.n	80083f4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083f2:	e00d      	b.n	8008410 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2213      	movs	r2, #19
 80083fa:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008404:	639a      	str	r2, [r3, #56]	; 0x38
 8008406:	e002      	b.n	800840e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3720      	adds	r7, #32
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	c1100000 	.word	0xc1100000

0800841c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008426:	f7f9 ffb3 	bl	8002390 <HAL_GetTick>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2100      	movs	r1, #0
 8008436:	4618      	mov	r0, r3
 8008438:	f002 fefd 	bl	800b236 <SDMMC_GetResponse>
 800843c:	4603      	mov	r3, r0
 800843e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008446:	d102      	bne.n	800844e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800844c:	e0b0      	b.n	80085b0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2140      	movs	r1, #64	; 0x40
 8008454:	4618      	mov	r0, r3
 8008456:	f002 ff2d 	bl	800b2b4 <SDMMC_CmdBlockLength>
 800845a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	e0a0      	b.n	80085b0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f003 f862 	bl	800b544 <SDMMC_CmdAppCommand>
 8008480:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	e08d      	b.n	80085b0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008498:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800849a:	2340      	movs	r3, #64	; 0x40
 800849c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800849e:	2360      	movs	r3, #96	; 0x60
 80084a0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084a2:	2302      	movs	r3, #2
 80084a4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80084aa:	2301      	movs	r3, #1
 80084ac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f107 0208 	add.w	r2, r7, #8
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f002 fecf 	bl	800b25c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f003 f94a 	bl	800b75c <SDMMC_CmdStatusRegister>
 80084c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d02b      	beq.n	8008528 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	e069      	b.n	80085b0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d013      	beq.n	8008512 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ee:	e00d      	b.n	800850c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f002 fe29 	bl	800b14c <SDMMC_ReadFIFO>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	601a      	str	r2, [r3, #0]
        pData++;
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	3304      	adds	r3, #4
 8008504:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	3301      	adds	r3, #1
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b07      	cmp	r3, #7
 8008510:	d9ee      	bls.n	80084f0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008512:	f7f9 ff3d 	bl	8002390 <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008520:	d102      	bne.n	8008528 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008522:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008526:	e043      	b.n	80085b0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0d2      	beq.n	80084dc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008544:	2308      	movs	r3, #8
 8008546:	e033      	b.n	80085b0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008556:	2302      	movs	r3, #2
 8008558:	e02a      	b.n	80085b0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b00      	cmp	r3, #0
 8008566:	d017      	beq.n	8008598 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008568:	2320      	movs	r3, #32
 800856a:	e021      	b.n	80085b0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f002 fdeb 	bl	800b14c <SDMMC_ReadFIFO>
 8008576:	4602      	mov	r2, r0
 8008578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857a:	601a      	str	r2, [r3, #0]
    pData++;
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3304      	adds	r3, #4
 8008580:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008582:	f7f9 ff05 	bl	8002390 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008590:	d102      	bne.n	8008598 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008592:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008596:	e00b      	b.n	80085b0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e2      	bne.n	800856c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a03      	ldr	r2, [pc, #12]	; (80085b8 <SD_SendSDStatus+0x19c>)
 80085ac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3730      	adds	r7, #48	; 0x30
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	18000f3a 	.word	0x18000f3a

080085bc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80085cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085d0:	e018      	b.n	8008604 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085da:	041b      	lsls	r3, r3, #16
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f003 f899 	bl	800b716 <SDMMC_CmdSendStatus>
 80085e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	e009      	b.n	8008604 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2100      	movs	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f002 fe1d 	bl	800b236 <SDMMC_GetResponse>
 80085fc:	4602      	mov	r2, r0
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008614:	2300      	movs	r3, #0
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2100      	movs	r1, #0
 8008622:	4618      	mov	r0, r3
 8008624:	f002 fe07 	bl	800b236 <SDMMC_GetResponse>
 8008628:	4603      	mov	r3, r0
 800862a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008632:	d102      	bne.n	800863a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008638:	e02f      	b.n	800869a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f879 	bl	8008738 <SD_FindSCR>
 8008646:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	e023      	b.n	800869a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01c      	beq.n	8008696 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008664:	041b      	lsls	r3, r3, #16
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f002 ff6b 	bl	800b544 <SDMMC_CmdAppCommand>
 800866e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	e00f      	b.n	800869a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2102      	movs	r1, #2
 8008680:	4618      	mov	r0, r3
 8008682:	f002 ffa2 	bl	800b5ca <SDMMC_CmdBusWidth>
 8008686:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	e003      	b.n	800869a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008692:	2300      	movs	r3, #0
 8008694:	e001      	b.n	800869a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008696:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	2300      	movs	r3, #0
 80086b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f002 fdbc 	bl	800b236 <SDMMC_GetResponse>
 80086be:	4603      	mov	r3, r0
 80086c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086c8:	d102      	bne.n	80086d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086ce:	e02f      	b.n	8008730 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f82e 	bl	8008738 <SD_FindSCR>
 80086dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	e023      	b.n	8008730 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01c      	beq.n	800872c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	f002 ff20 	bl	800b544 <SDMMC_CmdAppCommand>
 8008704:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	e00f      	b.n	8008730 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f002 ff57 	bl	800b5ca <SDMMC_CmdBusWidth>
 800871c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	e003      	b.n	8008730 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008728:	2300      	movs	r3, #0
 800872a:	e001      	b.n	8008730 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800872c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08e      	sub	sp, #56	; 0x38
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008742:	f7f9 fe25 	bl	8002390 <HAL_GetTick>
 8008746:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800874c:	2300      	movs	r3, #0
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2108      	movs	r1, #8
 800875e:	4618      	mov	r0, r3
 8008760:	f002 fda8 	bl	800b2b4 <SDMMC_CmdBlockLength>
 8008764:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <SD_FindSCR+0x38>
  {
    return errorstate;
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	e0ad      	b.n	80088cc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008778:	041b      	lsls	r3, r3, #16
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f002 fee1 	bl	800b544 <SDMMC_CmdAppCommand>
 8008782:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <SD_FindSCR+0x56>
  {
    return errorstate;
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	e09e      	b.n	80088cc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800878e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008792:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008794:	2308      	movs	r3, #8
 8008796:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008798:	2330      	movs	r3, #48	; 0x30
 800879a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800879c:	2302      	movs	r3, #2
 800879e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80087a4:	2301      	movs	r3, #1
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f107 0210 	add.w	r2, r7, #16
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f002 fd52 	bl	800b25c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 ff27 	bl	800b610 <SDMMC_CmdSendSCR>
 80087c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d027      	beq.n	800881a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	e07e      	b.n	80088cc <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d113      	bne.n	8008804 <SD_FindSCR+0xcc>
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d110      	bne.n	8008804 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f002 fcb0 	bl	800b14c <SDMMC_ReadFIFO>
 80087ec:	4603      	mov	r3, r0
 80087ee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f002 fca9 	bl	800b14c <SDMMC_ReadFIFO>
 80087fa:	4603      	mov	r3, r0
 80087fc:	60fb      	str	r3, [r7, #12]
      index++;
 80087fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008800:	3301      	adds	r3, #1
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008804:	f7f9 fdc4 	bl	8002390 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008812:	d102      	bne.n	800881a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008818:	e058      	b.n	80088cc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008820:	f240 532a 	movw	r3, #1322	; 0x52a
 8008824:	4013      	ands	r3, r2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0d1      	beq.n	80087ce <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2208      	movs	r2, #8
 800883e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008840:	2308      	movs	r3, #8
 8008842:	e043      	b.n	80088cc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2202      	movs	r2, #2
 8008858:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800885a:	2302      	movs	r3, #2
 800885c:	e036      	b.n	80088cc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2220      	movs	r2, #32
 8008872:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008874:	2320      	movs	r3, #32
 8008876:	e029      	b.n	80088cc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <SD_FindSCR+0x19c>)
 800887e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	061a      	lsls	r2, r3, #24
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800888c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	0a1b      	lsrs	r3, r3, #8
 8008892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008896:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	0e1b      	lsrs	r3, r3, #24
 800889c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	601a      	str	r2, [r3, #0]
    scr++;
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	3304      	adds	r3, #4
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	061a      	lsls	r2, r3, #24
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	0a1b      	lsrs	r3, r3, #8
 80088ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	0e1b      	lsrs	r3, r3, #24
 80088c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3738      	adds	r7, #56	; 0x38
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	18000f3a 	.word	0x18000f3a

080088d8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e095      	b.n	8008a2c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d108      	bne.n	800891a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008910:	d009      	beq.n	8008926 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	61da      	str	r2, [r3, #28]
 8008918:	e005      	b.n	8008926 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7f9 fa4b 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2202      	movs	r2, #2
 800894a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800895c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008966:	d902      	bls.n	800896e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e002      	b.n	8008974 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800896e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008972:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800897c:	d007      	beq.n	800898e <HAL_SPI_Init+0xa0>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008986:	d002      	beq.n	800898e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d0:	ea42 0103 	orr.w	r1, r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	0c1b      	lsrs	r3, r3, #16
 80089ea:	f003 0204 	and.w	r2, r3, #4
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	431a      	orrs	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a0a:	ea42 0103 	orr.w	r1, r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e049      	b.n	8008ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7f9 fa00 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f000 fa62 	bl	8008f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e049      	b.n	8008b88 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f841 	bl	8008b90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2202      	movs	r2, #2
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f000 fa0b 	bl	8008f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d122      	bne.n	8008c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d11b      	bne.n	8008c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0202 	mvn.w	r2, #2
 8008bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f98a 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008bec:	e005      	b.n	8008bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f97c 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f98d 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d122      	bne.n	8008c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d11b      	bne.n	8008c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f06f 0204 	mvn.w	r2, #4
 8008c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f960 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008c40:	e005      	b.n	8008c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f952 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f963 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d122      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d11b      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f06f 0208 	mvn.w	r2, #8
 8008c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f936 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008c94:	e005      	b.n	8008ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f928 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f939 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f003 0310 	and.w	r3, r3, #16
 8008cb2:	2b10      	cmp	r3, #16
 8008cb4:	d122      	bne.n	8008cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f003 0310 	and.w	r3, r3, #16
 8008cc0:	2b10      	cmp	r3, #16
 8008cc2:	d11b      	bne.n	8008cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f06f 0210 	mvn.w	r2, #16
 8008ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f90c 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008ce8:	e005      	b.n	8008cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f8fe 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f90f 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d10e      	bne.n	8008d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d107      	bne.n	8008d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f06f 0201 	mvn.w	r2, #1
 8008d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f8d8 	bl	8008ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d32:	2b80      	cmp	r3, #128	; 0x80
 8008d34:	d10e      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d40:	2b80      	cmp	r3, #128	; 0x80
 8008d42:	d107      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fcec 	bl	800972c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	d10e      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6e:	2b80      	cmp	r3, #128	; 0x80
 8008d70:	d107      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fcdf 	bl	8009740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8c:	2b40      	cmp	r3, #64	; 0x40
 8008d8e:	d10e      	bne.n	8008dae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d107      	bne.n	8008dae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f8bd 	bl	8008f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	d10e      	bne.n	8008dda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d107      	bne.n	8008dda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f06f 0220 	mvn.w	r2, #32
 8008dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fc9f 	bl	8009718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e066      	b.n	8008ed0 <HAL_TIM_OC_ConfigChannel+0xec>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b14      	cmp	r3, #20
 8008e0e:	d857      	bhi.n	8008ec0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e6d 	.word	0x08008e6d
 8008e1c:	08008ec1 	.word	0x08008ec1
 8008e20:	08008ec1 	.word	0x08008ec1
 8008e24:	08008ec1 	.word	0x08008ec1
 8008e28:	08008e7b 	.word	0x08008e7b
 8008e2c:	08008ec1 	.word	0x08008ec1
 8008e30:	08008ec1 	.word	0x08008ec1
 8008e34:	08008ec1 	.word	0x08008ec1
 8008e38:	08008e89 	.word	0x08008e89
 8008e3c:	08008ec1 	.word	0x08008ec1
 8008e40:	08008ec1 	.word	0x08008ec1
 8008e44:	08008ec1 	.word	0x08008ec1
 8008e48:	08008e97 	.word	0x08008e97
 8008e4c:	08008ec1 	.word	0x08008ec1
 8008e50:	08008ec1 	.word	0x08008ec1
 8008e54:	08008ec1 	.word	0x08008ec1
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008ec1 	.word	0x08008ec1
 8008e60:	08008ec1 	.word	0x08008ec1
 8008e64:	08008ec1 	.word	0x08008ec1
 8008e68:	08008eb3 	.word	0x08008eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f8fc 	bl	8009070 <TIM_OC1_SetConfig>
      break;
 8008e78:	e025      	b.n	8008ec6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f985 	bl	8009190 <TIM_OC2_SetConfig>
      break;
 8008e86:	e01e      	b.n	8008ec6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fa08 	bl	80092a4 <TIM_OC3_SetConfig>
      break;
 8008e94:	e017      	b.n	8008ec6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68b9      	ldr	r1, [r7, #8]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fa89 	bl	80093b4 <TIM_OC4_SetConfig>
      break;
 8008ea2:	e010      	b.n	8008ec6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 faec 	bl	8009488 <TIM_OC5_SetConfig>
      break;
 8008eb0:	e009      	b.n	8008ec6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fb49 	bl	8009550 <TIM_OC6_SetConfig>
      break;
 8008ebe:	e002      	b.n	8008ec6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a40      	ldr	r2, [pc, #256]	; (8009050 <TIM_Base_SetConfig+0x114>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d013      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5a:	d00f      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a3d      	ldr	r2, [pc, #244]	; (8009054 <TIM_Base_SetConfig+0x118>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00b      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a3c      	ldr	r2, [pc, #240]	; (8009058 <TIM_Base_SetConfig+0x11c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d007      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a3b      	ldr	r2, [pc, #236]	; (800905c <TIM_Base_SetConfig+0x120>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a3a      	ldr	r2, [pc, #232]	; (8009060 <TIM_Base_SetConfig+0x124>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d108      	bne.n	8008f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a2f      	ldr	r2, [pc, #188]	; (8009050 <TIM_Base_SetConfig+0x114>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01f      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9c:	d01b      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a2c      	ldr	r2, [pc, #176]	; (8009054 <TIM_Base_SetConfig+0x118>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d017      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a2b      	ldr	r2, [pc, #172]	; (8009058 <TIM_Base_SetConfig+0x11c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a2a      	ldr	r2, [pc, #168]	; (800905c <TIM_Base_SetConfig+0x120>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00f      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a29      	ldr	r2, [pc, #164]	; (8009060 <TIM_Base_SetConfig+0x124>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a28      	ldr	r2, [pc, #160]	; (8009064 <TIM_Base_SetConfig+0x128>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d007      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a27      	ldr	r2, [pc, #156]	; (8009068 <TIM_Base_SetConfig+0x12c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_Base_SetConfig+0x9a>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a26      	ldr	r2, [pc, #152]	; (800906c <TIM_Base_SetConfig+0x130>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d108      	bne.n	8008fe8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a10      	ldr	r2, [pc, #64]	; (8009050 <TIM_Base_SetConfig+0x114>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00f      	beq.n	8009034 <TIM_Base_SetConfig+0xf8>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a12      	ldr	r2, [pc, #72]	; (8009060 <TIM_Base_SetConfig+0x124>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00b      	beq.n	8009034 <TIM_Base_SetConfig+0xf8>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a11      	ldr	r2, [pc, #68]	; (8009064 <TIM_Base_SetConfig+0x128>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d007      	beq.n	8009034 <TIM_Base_SetConfig+0xf8>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a10      	ldr	r2, [pc, #64]	; (8009068 <TIM_Base_SetConfig+0x12c>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d003      	beq.n	8009034 <TIM_Base_SetConfig+0xf8>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a0f      	ldr	r2, [pc, #60]	; (800906c <TIM_Base_SetConfig+0x130>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d103      	bne.n	800903c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	615a      	str	r2, [r3, #20]
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40012c00 	.word	0x40012c00
 8009054:	40000400 	.word	0x40000400
 8009058:	40000800 	.word	0x40000800
 800905c:	40000c00 	.word	0x40000c00
 8009060:	40013400 	.word	0x40013400
 8009064:	40014000 	.word	0x40014000
 8009068:	40014400 	.word	0x40014400
 800906c:	40014800 	.word	0x40014800

08009070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f023 0201 	bic.w	r2, r3, #1
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800909e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0303 	bic.w	r3, r3, #3
 80090aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f023 0302 	bic.w	r3, r3, #2
 80090bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a2c      	ldr	r2, [pc, #176]	; (800917c <TIM_OC1_SetConfig+0x10c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d00f      	beq.n	80090f0 <TIM_OC1_SetConfig+0x80>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a2b      	ldr	r2, [pc, #172]	; (8009180 <TIM_OC1_SetConfig+0x110>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00b      	beq.n	80090f0 <TIM_OC1_SetConfig+0x80>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a2a      	ldr	r2, [pc, #168]	; (8009184 <TIM_OC1_SetConfig+0x114>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d007      	beq.n	80090f0 <TIM_OC1_SetConfig+0x80>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a29      	ldr	r2, [pc, #164]	; (8009188 <TIM_OC1_SetConfig+0x118>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d003      	beq.n	80090f0 <TIM_OC1_SetConfig+0x80>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a28      	ldr	r2, [pc, #160]	; (800918c <TIM_OC1_SetConfig+0x11c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10c      	bne.n	800910a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f023 0308 	bic.w	r3, r3, #8
 80090f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f023 0304 	bic.w	r3, r3, #4
 8009108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a1b      	ldr	r2, [pc, #108]	; (800917c <TIM_OC1_SetConfig+0x10c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d00f      	beq.n	8009132 <TIM_OC1_SetConfig+0xc2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a1a      	ldr	r2, [pc, #104]	; (8009180 <TIM_OC1_SetConfig+0x110>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d00b      	beq.n	8009132 <TIM_OC1_SetConfig+0xc2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a19      	ldr	r2, [pc, #100]	; (8009184 <TIM_OC1_SetConfig+0x114>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d007      	beq.n	8009132 <TIM_OC1_SetConfig+0xc2>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a18      	ldr	r2, [pc, #96]	; (8009188 <TIM_OC1_SetConfig+0x118>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d003      	beq.n	8009132 <TIM_OC1_SetConfig+0xc2>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a17      	ldr	r2, [pc, #92]	; (800918c <TIM_OC1_SetConfig+0x11c>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d111      	bne.n	8009156 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	4313      	orrs	r3, r2
 800914a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	621a      	str	r2, [r3, #32]
}
 8009170:	bf00      	nop
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	40012c00 	.word	0x40012c00
 8009180:	40013400 	.word	0x40013400
 8009184:	40014000 	.word	0x40014000
 8009188:	40014400 	.word	0x40014400
 800918c:	40014800 	.word	0x40014800

08009190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f023 0210 	bic.w	r2, r3, #16
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	021b      	lsls	r3, r3, #8
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f023 0320 	bic.w	r3, r3, #32
 80091de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a28      	ldr	r2, [pc, #160]	; (8009290 <TIM_OC2_SetConfig+0x100>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_OC2_SetConfig+0x6c>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a27      	ldr	r2, [pc, #156]	; (8009294 <TIM_OC2_SetConfig+0x104>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d10d      	bne.n	8009218 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a1d      	ldr	r2, [pc, #116]	; (8009290 <TIM_OC2_SetConfig+0x100>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00f      	beq.n	8009240 <TIM_OC2_SetConfig+0xb0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a1c      	ldr	r2, [pc, #112]	; (8009294 <TIM_OC2_SetConfig+0x104>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d00b      	beq.n	8009240 <TIM_OC2_SetConfig+0xb0>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <TIM_OC2_SetConfig+0x108>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d007      	beq.n	8009240 <TIM_OC2_SetConfig+0xb0>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a1a      	ldr	r2, [pc, #104]	; (800929c <TIM_OC2_SetConfig+0x10c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d003      	beq.n	8009240 <TIM_OC2_SetConfig+0xb0>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a19      	ldr	r2, [pc, #100]	; (80092a0 <TIM_OC2_SetConfig+0x110>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d113      	bne.n	8009268 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800924e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	4313      	orrs	r3, r2
 800925a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	621a      	str	r2, [r3, #32]
}
 8009282:	bf00      	nop
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40013400 	.word	0x40013400
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800

080092a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a27      	ldr	r2, [pc, #156]	; (80093a0 <TIM_OC3_SetConfig+0xfc>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d003      	beq.n	800930e <TIM_OC3_SetConfig+0x6a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a26      	ldr	r2, [pc, #152]	; (80093a4 <TIM_OC3_SetConfig+0x100>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d10d      	bne.n	800932a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	021b      	lsls	r3, r3, #8
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	4313      	orrs	r3, r2
 8009320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a1c      	ldr	r2, [pc, #112]	; (80093a0 <TIM_OC3_SetConfig+0xfc>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00f      	beq.n	8009352 <TIM_OC3_SetConfig+0xae>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a1b      	ldr	r2, [pc, #108]	; (80093a4 <TIM_OC3_SetConfig+0x100>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d00b      	beq.n	8009352 <TIM_OC3_SetConfig+0xae>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a1a      	ldr	r2, [pc, #104]	; (80093a8 <TIM_OC3_SetConfig+0x104>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d007      	beq.n	8009352 <TIM_OC3_SetConfig+0xae>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a19      	ldr	r2, [pc, #100]	; (80093ac <TIM_OC3_SetConfig+0x108>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d003      	beq.n	8009352 <TIM_OC3_SetConfig+0xae>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a18      	ldr	r2, [pc, #96]	; (80093b0 <TIM_OC3_SetConfig+0x10c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d113      	bne.n	800937a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	011b      	lsls	r3, r3, #4
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	621a      	str	r2, [r3, #32]
}
 8009394:	bf00      	nop
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	40012c00 	.word	0x40012c00
 80093a4:	40013400 	.word	0x40013400
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40014400 	.word	0x40014400
 80093b0:	40014800 	.word	0x40014800

080093b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	031b      	lsls	r3, r3, #12
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a18      	ldr	r2, [pc, #96]	; (8009474 <TIM_OC4_SetConfig+0xc0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00f      	beq.n	8009438 <TIM_OC4_SetConfig+0x84>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a17      	ldr	r2, [pc, #92]	; (8009478 <TIM_OC4_SetConfig+0xc4>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00b      	beq.n	8009438 <TIM_OC4_SetConfig+0x84>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a16      	ldr	r2, [pc, #88]	; (800947c <TIM_OC4_SetConfig+0xc8>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d007      	beq.n	8009438 <TIM_OC4_SetConfig+0x84>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a15      	ldr	r2, [pc, #84]	; (8009480 <TIM_OC4_SetConfig+0xcc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d003      	beq.n	8009438 <TIM_OC4_SetConfig+0x84>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a14      	ldr	r2, [pc, #80]	; (8009484 <TIM_OC4_SetConfig+0xd0>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d109      	bne.n	800944c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800943e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	019b      	lsls	r3, r3, #6
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	4313      	orrs	r3, r2
 800944a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	621a      	str	r2, [r3, #32]
}
 8009466:	bf00      	nop
 8009468:	371c      	adds	r7, #28
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40012c00 	.word	0x40012c00
 8009478:	40013400 	.word	0x40013400
 800947c:	40014000 	.word	0x40014000
 8009480:	40014400 	.word	0x40014400
 8009484:	40014800 	.word	0x40014800

08009488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	041b      	lsls	r3, r3, #16
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a17      	ldr	r2, [pc, #92]	; (800953c <TIM_OC5_SetConfig+0xb4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00f      	beq.n	8009502 <TIM_OC5_SetConfig+0x7a>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a16      	ldr	r2, [pc, #88]	; (8009540 <TIM_OC5_SetConfig+0xb8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00b      	beq.n	8009502 <TIM_OC5_SetConfig+0x7a>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a15      	ldr	r2, [pc, #84]	; (8009544 <TIM_OC5_SetConfig+0xbc>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d007      	beq.n	8009502 <TIM_OC5_SetConfig+0x7a>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a14      	ldr	r2, [pc, #80]	; (8009548 <TIM_OC5_SetConfig+0xc0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d003      	beq.n	8009502 <TIM_OC5_SetConfig+0x7a>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a13      	ldr	r2, [pc, #76]	; (800954c <TIM_OC5_SetConfig+0xc4>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d109      	bne.n	8009516 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	4313      	orrs	r3, r2
 8009514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	621a      	str	r2, [r3, #32]
}
 8009530:	bf00      	nop
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40012c00 	.word	0x40012c00
 8009540:	40013400 	.word	0x40013400
 8009544:	40014000 	.word	0x40014000
 8009548:	40014400 	.word	0x40014400
 800954c:	40014800 	.word	0x40014800

08009550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800957e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	021b      	lsls	r3, r3, #8
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	051b      	lsls	r3, r3, #20
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a18      	ldr	r2, [pc, #96]	; (8009608 <TIM_OC6_SetConfig+0xb8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00f      	beq.n	80095cc <TIM_OC6_SetConfig+0x7c>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a17      	ldr	r2, [pc, #92]	; (800960c <TIM_OC6_SetConfig+0xbc>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00b      	beq.n	80095cc <TIM_OC6_SetConfig+0x7c>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a16      	ldr	r2, [pc, #88]	; (8009610 <TIM_OC6_SetConfig+0xc0>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d007      	beq.n	80095cc <TIM_OC6_SetConfig+0x7c>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a15      	ldr	r2, [pc, #84]	; (8009614 <TIM_OC6_SetConfig+0xc4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <TIM_OC6_SetConfig+0x7c>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a14      	ldr	r2, [pc, #80]	; (8009618 <TIM_OC6_SetConfig+0xc8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d109      	bne.n	80095e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	029b      	lsls	r3, r3, #10
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	4313      	orrs	r3, r2
 80095de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	621a      	str	r2, [r3, #32]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40012c00 	.word	0x40012c00
 800960c:	40013400 	.word	0x40013400
 8009610:	40014000 	.word	0x40014000
 8009614:	40014400 	.word	0x40014400
 8009618:	40014800 	.word	0x40014800

0800961c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009634:	2302      	movs	r3, #2
 8009636:	e065      	b.n	8009704 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	4313      	orrs	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	4313      	orrs	r3, r2
 80096a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	041b      	lsls	r3, r3, #16
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a16      	ldr	r2, [pc, #88]	; (8009710 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d004      	beq.n	80096c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a14      	ldr	r2, [pc, #80]	; (8009714 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d115      	bne.n	80096f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	051b      	lsls	r3, r3, #20
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	40012c00 	.word	0x40012c00
 8009714:	40013400 	.word	0x40013400

08009718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e042      	b.n	80097ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7f8 fb91 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2224      	movs	r2, #36	; 0x24
 8009782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fc5c 	bl	800a054 <UART_SetConfig>
 800979c:	4603      	mov	r3, r0
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e022      	b.n	80097ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 ff4c 	bl	800a64c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 ffd3 	bl	800a790 <UART_CheckIdleState>
 80097ea:	4603      	mov	r3, r0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08a      	sub	sp, #40	; 0x28
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	4613      	mov	r3, r2
 8009802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800980a:	2b20      	cmp	r3, #32
 800980c:	f040 8084 	bne.w	8009918 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <HAL_UART_Transmit+0x28>
 8009816:	88fb      	ldrh	r3, [r7, #6]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e07c      	b.n	800991a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_UART_Transmit+0x3a>
 800982a:	2302      	movs	r3, #2
 800982c:	e075      	b.n	800991a <HAL_UART_Transmit+0x126>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2221      	movs	r2, #33	; 0x21
 8009842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009846:	f7f8 fda3 	bl	8002390 <HAL_GetTick>
 800984a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	88fa      	ldrh	r2, [r7, #6]
 8009850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	88fa      	ldrh	r2, [r7, #6]
 8009858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009864:	d108      	bne.n	8009878 <HAL_UART_Transmit+0x84>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d104      	bne.n	8009878 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	61bb      	str	r3, [r7, #24]
 8009876:	e003      	b.n	8009880 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009888:	e02d      	b.n	80098e6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2200      	movs	r2, #0
 8009892:	2180      	movs	r1, #128	; 0x80
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 ffc6 	bl	800a826 <UART_WaitOnFlagUntilTimeout>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e03a      	b.n	800991a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10b      	bne.n	80098c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	881a      	ldrh	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098b6:	b292      	uxth	r2, r2
 80098b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	3302      	adds	r3, #2
 80098be:	61bb      	str	r3, [r7, #24]
 80098c0:	e008      	b.n	80098d4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	781a      	ldrb	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	b292      	uxth	r2, r2
 80098cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	3301      	adds	r3, #1
 80098d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098da:	b29b      	uxth	r3, r3
 80098dc:	3b01      	subs	r3, #1
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1cb      	bne.n	800988a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2200      	movs	r2, #0
 80098fa:	2140      	movs	r1, #64	; 0x40
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 ff92 	bl	800a826 <UART_WaitOnFlagUntilTimeout>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e006      	b.n	800991a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2220      	movs	r2, #32
 8009910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	e000      	b.n	800991a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009918:	2302      	movs	r3, #2
  }
}
 800991a:	4618      	mov	r0, r3
 800991c:	3720      	adds	r7, #32
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	; 0x28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4613      	mov	r3, r2
 8009930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009938:	2b20      	cmp	r3, #32
 800993a:	d142      	bne.n	80099c2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <HAL_UART_Receive_DMA+0x24>
 8009942:	88fb      	ldrh	r3, [r7, #6]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e03b      	b.n	80099c4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <HAL_UART_Receive_DMA+0x36>
 8009956:	2302      	movs	r3, #2
 8009958:	e034      	b.n	80099c4 <HAL_UART_Receive_DMA+0xa0>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a17      	ldr	r2, [pc, #92]	; (80099cc <HAL_UART_Receive_DMA+0xa8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d01f      	beq.n	80099b2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d018      	beq.n	80099b2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	613b      	str	r3, [r7, #16]
   return(result);
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	623b      	str	r3, [r7, #32]
 80099a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	69f9      	ldr	r1, [r7, #28]
 80099a4:	6a3a      	ldr	r2, [r7, #32]
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e6      	bne.n	8009980 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	461a      	mov	r2, r3
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 fffd 	bl	800a9b8 <UART_Start_Receive_DMA>
 80099be:	4603      	mov	r3, r0
 80099c0:	e000      	b.n	80099c4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80099c2:	2302      	movs	r3, #2
  }
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3728      	adds	r7, #40	; 0x28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	40008000 	.word	0x40008000

080099d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b0ba      	sub	sp, #232	; 0xe8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80099fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80099fe:	4013      	ands	r3, r2
 8009a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11b      	bne.n	8009a44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a10:	f003 0320 	and.w	r3, r3, #32
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d015      	beq.n	8009a44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d105      	bne.n	8009a30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d009      	beq.n	8009a44 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 82d6 	beq.w	8009fe6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
      }
      return;
 8009a42:	e2d0      	b.n	8009fe6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 811f 	beq.w	8009c8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a52:	4b8b      	ldr	r3, [pc, #556]	; (8009c80 <HAL_UART_IRQHandler+0x2b0>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d106      	bne.n	8009a68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009a5e:	4b89      	ldr	r3, [pc, #548]	; (8009c84 <HAL_UART_IRQHandler+0x2b4>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 8112 	beq.w	8009c8c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d011      	beq.n	8009a98 <HAL_UART_IRQHandler+0xc8>
 8009a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2201      	movs	r2, #1
 8009a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a8e:	f043 0201 	orr.w	r2, r3, #1
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d011      	beq.n	8009ac8 <HAL_UART_IRQHandler+0xf8>
 8009aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009abe:	f043 0204 	orr.w	r2, r3, #4
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d011      	beq.n	8009af8 <HAL_UART_IRQHandler+0x128>
 8009ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2204      	movs	r2, #4
 8009ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aee:	f043 0202 	orr.w	r2, r3, #2
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d017      	beq.n	8009b34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d105      	bne.n	8009b1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009b14:	4b5a      	ldr	r3, [pc, #360]	; (8009c80 <HAL_UART_IRQHandler+0x2b0>)
 8009b16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2208      	movs	r2, #8
 8009b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b2a:	f043 0208 	orr.w	r2, r3, #8
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d012      	beq.n	8009b66 <HAL_UART_IRQHandler+0x196>
 8009b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00c      	beq.n	8009b66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b5c:	f043 0220 	orr.w	r2, r3, #32
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 823c 	beq.w	8009fea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d013      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bba:	2b40      	cmp	r3, #64	; 0x40
 8009bbc:	d005      	beq.n	8009bca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d04f      	beq.n	8009c6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 ffdd 	bl	800ab8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bda:	2b40      	cmp	r3, #64	; 0x40
 8009bdc:	d141      	bne.n	8009c62 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1d9      	bne.n	8009bde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d013      	beq.n	8009c5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c36:	4a14      	ldr	r2, [pc, #80]	; (8009c88 <HAL_UART_IRQHandler+0x2b8>)
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7f8 fe67 	bl	8002912 <HAL_DMA_Abort_IT>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d017      	beq.n	8009c7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c58:	e00f      	b.n	8009c7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f9e4 	bl	800a028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c60:	e00b      	b.n	8009c7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f9e0 	bl	800a028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c68:	e007      	b.n	8009c7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f9dc 	bl	800a028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009c78:	e1b7      	b.n	8009fea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c7a:	bf00      	nop
    return;
 8009c7c:	e1b5      	b.n	8009fea <HAL_UART_IRQHandler+0x61a>
 8009c7e:	bf00      	nop
 8009c80:	10000001 	.word	0x10000001
 8009c84:	04000120 	.word	0x04000120
 8009c88:	0800ae35 	.word	0x0800ae35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	f040 814a 	bne.w	8009f2a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c9a:	f003 0310 	and.w	r3, r3, #16
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 8143 	beq.w	8009f2a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca8:	f003 0310 	and.w	r3, r3, #16
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 813c 	beq.w	8009f2a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2210      	movs	r2, #16
 8009cb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc4:	2b40      	cmp	r3, #64	; 0x40
 8009cc6:	f040 80b5 	bne.w	8009e34 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8187 	beq.w	8009fee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cea:	429a      	cmp	r2, r3
 8009cec:	f080 817f 	bcs.w	8009fee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f040 8086 	bne.w	8009e18 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1da      	bne.n	8009d0c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d86:	e841 2300 	strex	r3, r2, [r1]
 8009d8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1e1      	bne.n	8009d56 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3308      	adds	r3, #8
 8009d98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3308      	adds	r3, #8
 8009db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009db6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009db8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009dbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e3      	bne.n	8009d92 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de8:	f023 0310 	bic.w	r3, r3, #16
 8009dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dfc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e4      	bne.n	8009dd8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f8 fd21 	bl	800285a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f905 	bl	800a03c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e32:	e0dc      	b.n	8009fee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 80ce 	beq.w	8009ff2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 80c9 	beq.w	8009ff2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e82:	647b      	str	r3, [r7, #68]	; 0x44
 8009e84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e4      	bne.n	8009e60 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3308      	adds	r3, #8
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ebe:	633a      	str	r2, [r7, #48]	; 0x30
 8009ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e1      	bne.n	8009e96 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0310 	bic.w	r3, r3, #16
 8009efa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f08:	61fb      	str	r3, [r7, #28]
 8009f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0c:	69b9      	ldr	r1, [r7, #24]
 8009f0e:	69fa      	ldr	r2, [r7, #28]
 8009f10:	e841 2300 	strex	r3, r2, [r1]
 8009f14:	617b      	str	r3, [r7, #20]
   return(result);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1e4      	bne.n	8009ee6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f88a 	bl	800a03c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f28:	e063      	b.n	8009ff2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00e      	beq.n	8009f54 <HAL_UART_IRQHandler+0x584>
 8009f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 ffb2 	bl	800aeb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f52:	e051      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d014      	beq.n	8009f8a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d105      	bne.n	8009f78 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d008      	beq.n	8009f8a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d03a      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	4798      	blx	r3
    }
    return;
 8009f88:	e035      	b.n	8009ff6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d009      	beq.n	8009faa <HAL_UART_IRQHandler+0x5da>
 8009f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 ff5c 	bl	800ae60 <UART_EndTransmit_IT>
    return;
 8009fa8:	e026      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d009      	beq.n	8009fca <HAL_UART_IRQHandler+0x5fa>
 8009fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 ff8b 	bl	800aede <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fc8:	e016      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d010      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x628>
 8009fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	da0c      	bge.n	8009ff8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 ff73 	bl	800aeca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fe4:	e008      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
      return;
 8009fe6:	bf00      	nop
 8009fe8:	e006      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
    return;
 8009fea:	bf00      	nop
 8009fec:	e004      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
      return;
 8009fee:	bf00      	nop
 8009ff0:	e002      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
      return;
 8009ff2:	bf00      	nop
 8009ff4:	e000      	b.n	8009ff8 <HAL_UART_IRQHandler+0x628>
    return;
 8009ff6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8009ff8:	37e8      	adds	r7, #232	; 0xe8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop

0800a000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a058:	b08c      	sub	sp, #48	; 0x30
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	431a      	orrs	r2, r3
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	4313      	orrs	r3, r2
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	4baa      	ldr	r3, [pc, #680]	; (800a32c <UART_SetConfig+0x2d8>)
 800a084:	4013      	ands	r3, r2
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	6812      	ldr	r2, [r2, #0]
 800a08a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a9f      	ldr	r2, [pc, #636]	; (800a330 <UART_SetConfig+0x2dc>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d004      	beq.n	800a0c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a0ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	6812      	ldr	r2, [r2, #0]
 800a0d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0de:	f023 010f 	bic.w	r1, r3, #15
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a90      	ldr	r2, [pc, #576]	; (800a334 <UART_SetConfig+0x2e0>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d125      	bne.n	800a144 <UART_SetConfig+0xf0>
 800a0f8:	4b8f      	ldr	r3, [pc, #572]	; (800a338 <UART_SetConfig+0x2e4>)
 800a0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b03      	cmp	r3, #3
 800a104:	d81a      	bhi.n	800a13c <UART_SetConfig+0xe8>
 800a106:	a201      	add	r2, pc, #4	; (adr r2, 800a10c <UART_SetConfig+0xb8>)
 800a108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10c:	0800a11d 	.word	0x0800a11d
 800a110:	0800a12d 	.word	0x0800a12d
 800a114:	0800a125 	.word	0x0800a125
 800a118:	0800a135 	.word	0x0800a135
 800a11c:	2301      	movs	r3, #1
 800a11e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a122:	e116      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a124:	2302      	movs	r3, #2
 800a126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a12a:	e112      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a12c:	2304      	movs	r3, #4
 800a12e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a132:	e10e      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a134:	2308      	movs	r3, #8
 800a136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a13a:	e10a      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a13c:	2310      	movs	r3, #16
 800a13e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a142:	e106      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a7c      	ldr	r2, [pc, #496]	; (800a33c <UART_SetConfig+0x2e8>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d138      	bne.n	800a1c0 <UART_SetConfig+0x16c>
 800a14e:	4b7a      	ldr	r3, [pc, #488]	; (800a338 <UART_SetConfig+0x2e4>)
 800a150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a154:	f003 030c 	and.w	r3, r3, #12
 800a158:	2b0c      	cmp	r3, #12
 800a15a:	d82d      	bhi.n	800a1b8 <UART_SetConfig+0x164>
 800a15c:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <UART_SetConfig+0x110>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a199 	.word	0x0800a199
 800a168:	0800a1b9 	.word	0x0800a1b9
 800a16c:	0800a1b9 	.word	0x0800a1b9
 800a170:	0800a1b9 	.word	0x0800a1b9
 800a174:	0800a1a9 	.word	0x0800a1a9
 800a178:	0800a1b9 	.word	0x0800a1b9
 800a17c:	0800a1b9 	.word	0x0800a1b9
 800a180:	0800a1b9 	.word	0x0800a1b9
 800a184:	0800a1a1 	.word	0x0800a1a1
 800a188:	0800a1b9 	.word	0x0800a1b9
 800a18c:	0800a1b9 	.word	0x0800a1b9
 800a190:	0800a1b9 	.word	0x0800a1b9
 800a194:	0800a1b1 	.word	0x0800a1b1
 800a198:	2300      	movs	r3, #0
 800a19a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a19e:	e0d8      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1a6:	e0d4      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1ae:	e0d0      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a1b0:	2308      	movs	r3, #8
 800a1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1b6:	e0cc      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a1b8:	2310      	movs	r3, #16
 800a1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1be:	e0c8      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a5e      	ldr	r2, [pc, #376]	; (800a340 <UART_SetConfig+0x2ec>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d125      	bne.n	800a216 <UART_SetConfig+0x1c2>
 800a1ca:	4b5b      	ldr	r3, [pc, #364]	; (800a338 <UART_SetConfig+0x2e4>)
 800a1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1d4:	2b30      	cmp	r3, #48	; 0x30
 800a1d6:	d016      	beq.n	800a206 <UART_SetConfig+0x1b2>
 800a1d8:	2b30      	cmp	r3, #48	; 0x30
 800a1da:	d818      	bhi.n	800a20e <UART_SetConfig+0x1ba>
 800a1dc:	2b20      	cmp	r3, #32
 800a1de:	d00a      	beq.n	800a1f6 <UART_SetConfig+0x1a2>
 800a1e0:	2b20      	cmp	r3, #32
 800a1e2:	d814      	bhi.n	800a20e <UART_SetConfig+0x1ba>
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <UART_SetConfig+0x19a>
 800a1e8:	2b10      	cmp	r3, #16
 800a1ea:	d008      	beq.n	800a1fe <UART_SetConfig+0x1aa>
 800a1ec:	e00f      	b.n	800a20e <UART_SetConfig+0x1ba>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1f4:	e0ad      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1fc:	e0a9      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a1fe:	2304      	movs	r3, #4
 800a200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a204:	e0a5      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a206:	2308      	movs	r3, #8
 800a208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a20c:	e0a1      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a20e:	2310      	movs	r3, #16
 800a210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a214:	e09d      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a4a      	ldr	r2, [pc, #296]	; (800a344 <UART_SetConfig+0x2f0>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d125      	bne.n	800a26c <UART_SetConfig+0x218>
 800a220:	4b45      	ldr	r3, [pc, #276]	; (800a338 <UART_SetConfig+0x2e4>)
 800a222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a22a:	2bc0      	cmp	r3, #192	; 0xc0
 800a22c:	d016      	beq.n	800a25c <UART_SetConfig+0x208>
 800a22e:	2bc0      	cmp	r3, #192	; 0xc0
 800a230:	d818      	bhi.n	800a264 <UART_SetConfig+0x210>
 800a232:	2b80      	cmp	r3, #128	; 0x80
 800a234:	d00a      	beq.n	800a24c <UART_SetConfig+0x1f8>
 800a236:	2b80      	cmp	r3, #128	; 0x80
 800a238:	d814      	bhi.n	800a264 <UART_SetConfig+0x210>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <UART_SetConfig+0x1f0>
 800a23e:	2b40      	cmp	r3, #64	; 0x40
 800a240:	d008      	beq.n	800a254 <UART_SetConfig+0x200>
 800a242:	e00f      	b.n	800a264 <UART_SetConfig+0x210>
 800a244:	2300      	movs	r3, #0
 800a246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a24a:	e082      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a24c:	2302      	movs	r3, #2
 800a24e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a252:	e07e      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a254:	2304      	movs	r3, #4
 800a256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a25a:	e07a      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a25c:	2308      	movs	r3, #8
 800a25e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a262:	e076      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a264:	2310      	movs	r3, #16
 800a266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a26a:	e072      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a35      	ldr	r2, [pc, #212]	; (800a348 <UART_SetConfig+0x2f4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d12a      	bne.n	800a2cc <UART_SetConfig+0x278>
 800a276:	4b30      	ldr	r3, [pc, #192]	; (800a338 <UART_SetConfig+0x2e4>)
 800a278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a284:	d01a      	beq.n	800a2bc <UART_SetConfig+0x268>
 800a286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a28a:	d81b      	bhi.n	800a2c4 <UART_SetConfig+0x270>
 800a28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a290:	d00c      	beq.n	800a2ac <UART_SetConfig+0x258>
 800a292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a296:	d815      	bhi.n	800a2c4 <UART_SetConfig+0x270>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <UART_SetConfig+0x250>
 800a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a0:	d008      	beq.n	800a2b4 <UART_SetConfig+0x260>
 800a2a2:	e00f      	b.n	800a2c4 <UART_SetConfig+0x270>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2aa:	e052      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2b2:	e04e      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ba:	e04a      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a2bc:	2308      	movs	r3, #8
 800a2be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2c2:	e046      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ca:	e042      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a17      	ldr	r2, [pc, #92]	; (800a330 <UART_SetConfig+0x2dc>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d13a      	bne.n	800a34c <UART_SetConfig+0x2f8>
 800a2d6:	4b18      	ldr	r3, [pc, #96]	; (800a338 <UART_SetConfig+0x2e4>)
 800a2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2e4:	d01a      	beq.n	800a31c <UART_SetConfig+0x2c8>
 800a2e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2ea:	d81b      	bhi.n	800a324 <UART_SetConfig+0x2d0>
 800a2ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2f0:	d00c      	beq.n	800a30c <UART_SetConfig+0x2b8>
 800a2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2f6:	d815      	bhi.n	800a324 <UART_SetConfig+0x2d0>
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <UART_SetConfig+0x2b0>
 800a2fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a300:	d008      	beq.n	800a314 <UART_SetConfig+0x2c0>
 800a302:	e00f      	b.n	800a324 <UART_SetConfig+0x2d0>
 800a304:	2300      	movs	r3, #0
 800a306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a30a:	e022      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a30c:	2302      	movs	r3, #2
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a312:	e01e      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a314:	2304      	movs	r3, #4
 800a316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a31a:	e01a      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a31c:	2308      	movs	r3, #8
 800a31e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a322:	e016      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a324:	2310      	movs	r3, #16
 800a326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a32a:	e012      	b.n	800a352 <UART_SetConfig+0x2fe>
 800a32c:	cfff69f3 	.word	0xcfff69f3
 800a330:	40008000 	.word	0x40008000
 800a334:	40013800 	.word	0x40013800
 800a338:	40021000 	.word	0x40021000
 800a33c:	40004400 	.word	0x40004400
 800a340:	40004800 	.word	0x40004800
 800a344:	40004c00 	.word	0x40004c00
 800a348:	40005000 	.word	0x40005000
 800a34c:	2310      	movs	r3, #16
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4aae      	ldr	r2, [pc, #696]	; (800a610 <UART_SetConfig+0x5bc>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	f040 8097 	bne.w	800a48c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a35e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a362:	2b08      	cmp	r3, #8
 800a364:	d823      	bhi.n	800a3ae <UART_SetConfig+0x35a>
 800a366:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <UART_SetConfig+0x318>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a3af 	.word	0x0800a3af
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a3af 	.word	0x0800a3af
 800a37c:	0800a39f 	.word	0x0800a39f
 800a380:	0800a3af 	.word	0x0800a3af
 800a384:	0800a3af 	.word	0x0800a3af
 800a388:	0800a3af 	.word	0x0800a3af
 800a38c:	0800a3a7 	.word	0x0800a3a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a390:	f7fb f80a 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 800a394:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a396:	e010      	b.n	800a3ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a398:	4b9e      	ldr	r3, [pc, #632]	; (800a614 <UART_SetConfig+0x5c0>)
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a39c:	e00d      	b.n	800a3ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a39e:	f7fa ff6b 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800a3a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a3a4:	e009      	b.n	800a3ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a3ac:	e005      	b.n	800a3ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a3b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8130 	beq.w	800a622 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	4a94      	ldr	r2, [pc, #592]	; (800a618 <UART_SetConfig+0x5c4>)
 800a3c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d305      	bcc.n	800a3f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d903      	bls.n	800a3fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a3f8:	e113      	b.n	800a622 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	60bb      	str	r3, [r7, #8]
 800a400:	60fa      	str	r2, [r7, #12]
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	4a84      	ldr	r2, [pc, #528]	; (800a618 <UART_SetConfig+0x5c4>)
 800a408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	2200      	movs	r2, #0
 800a410:	603b      	str	r3, [r7, #0]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a418:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a41c:	f7f6 fbdc 	bl	8000bd8 <__aeabi_uldivmod>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4610      	mov	r0, r2
 800a426:	4619      	mov	r1, r3
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	f04f 0300 	mov.w	r3, #0
 800a430:	020b      	lsls	r3, r1, #8
 800a432:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a436:	0202      	lsls	r2, r0, #8
 800a438:	6979      	ldr	r1, [r7, #20]
 800a43a:	6849      	ldr	r1, [r1, #4]
 800a43c:	0849      	lsrs	r1, r1, #1
 800a43e:	2000      	movs	r0, #0
 800a440:	460c      	mov	r4, r1
 800a442:	4605      	mov	r5, r0
 800a444:	eb12 0804 	adds.w	r8, r2, r4
 800a448:	eb43 0905 	adc.w	r9, r3, r5
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	469a      	mov	sl, r3
 800a454:	4693      	mov	fp, r2
 800a456:	4652      	mov	r2, sl
 800a458:	465b      	mov	r3, fp
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f6 fbbb 	bl	8000bd8 <__aeabi_uldivmod>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4613      	mov	r3, r2
 800a468:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a46a:	6a3b      	ldr	r3, [r7, #32]
 800a46c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a470:	d308      	bcc.n	800a484 <UART_SetConfig+0x430>
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a478:	d204      	bcs.n	800a484 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6a3a      	ldr	r2, [r7, #32]
 800a480:	60da      	str	r2, [r3, #12]
 800a482:	e0ce      	b.n	800a622 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a48a:	e0ca      	b.n	800a622 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a494:	d166      	bne.n	800a564 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d827      	bhi.n	800a4ee <UART_SetConfig+0x49a>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <UART_SetConfig+0x450>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4c9 	.word	0x0800a4c9
 800a4a8:	0800a4d1 	.word	0x0800a4d1
 800a4ac:	0800a4d9 	.word	0x0800a4d9
 800a4b0:	0800a4ef 	.word	0x0800a4ef
 800a4b4:	0800a4df 	.word	0x0800a4df
 800a4b8:	0800a4ef 	.word	0x0800a4ef
 800a4bc:	0800a4ef 	.word	0x0800a4ef
 800a4c0:	0800a4ef 	.word	0x0800a4ef
 800a4c4:	0800a4e7 	.word	0x0800a4e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c8:	f7fa ff6e 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 800a4cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4ce:	e014      	b.n	800a4fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4d0:	f7fa ff80 	bl	80053d4 <HAL_RCC_GetPCLK2Freq>
 800a4d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4d6:	e010      	b.n	800a4fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4d8:	4b4e      	ldr	r3, [pc, #312]	; (800a614 <UART_SetConfig+0x5c0>)
 800a4da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4dc:	e00d      	b.n	800a4fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4de:	f7fa fecb 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800a4e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4e4:	e009      	b.n	800a4fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4ec:	e005      	b.n	800a4fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a4f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 8090 	beq.w	800a622 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	4a44      	ldr	r2, [pc, #272]	; (800a618 <UART_SetConfig+0x5c4>)
 800a508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a50c:	461a      	mov	r2, r3
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	fbb3 f3f2 	udiv	r3, r3, r2
 800a514:	005a      	lsls	r2, r3, #1
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	441a      	add	r2, r3
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	fbb2 f3f3 	udiv	r3, r2, r3
 800a526:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	2b0f      	cmp	r3, #15
 800a52c:	d916      	bls.n	800a55c <UART_SetConfig+0x508>
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a534:	d212      	bcs.n	800a55c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f023 030f 	bic.w	r3, r3, #15
 800a53e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	085b      	lsrs	r3, r3, #1
 800a544:	b29b      	uxth	r3, r3
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	8bfb      	ldrh	r3, [r7, #30]
 800a54e:	4313      	orrs	r3, r2
 800a550:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	8bfa      	ldrh	r2, [r7, #30]
 800a558:	60da      	str	r2, [r3, #12]
 800a55a:	e062      	b.n	800a622 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a562:	e05e      	b.n	800a622 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a568:	2b08      	cmp	r3, #8
 800a56a:	d828      	bhi.n	800a5be <UART_SetConfig+0x56a>
 800a56c:	a201      	add	r2, pc, #4	; (adr r2, 800a574 <UART_SetConfig+0x520>)
 800a56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a572:	bf00      	nop
 800a574:	0800a599 	.word	0x0800a599
 800a578:	0800a5a1 	.word	0x0800a5a1
 800a57c:	0800a5a9 	.word	0x0800a5a9
 800a580:	0800a5bf 	.word	0x0800a5bf
 800a584:	0800a5af 	.word	0x0800a5af
 800a588:	0800a5bf 	.word	0x0800a5bf
 800a58c:	0800a5bf 	.word	0x0800a5bf
 800a590:	0800a5bf 	.word	0x0800a5bf
 800a594:	0800a5b7 	.word	0x0800a5b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a598:	f7fa ff06 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 800a59c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a59e:	e014      	b.n	800a5ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5a0:	f7fa ff18 	bl	80053d4 <HAL_RCC_GetPCLK2Freq>
 800a5a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5a6:	e010      	b.n	800a5ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5a8:	4b1a      	ldr	r3, [pc, #104]	; (800a614 <UART_SetConfig+0x5c0>)
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a5ac:	e00d      	b.n	800a5ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ae:	f7fa fe63 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800a5b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5b4:	e009      	b.n	800a5ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a5bc:	e005      	b.n	800a5ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a5c8:	bf00      	nop
    }

    if (pclk != 0U)
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d028      	beq.n	800a622 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	4a10      	ldr	r2, [pc, #64]	; (800a618 <UART_SetConfig+0x5c4>)
 800a5d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	085b      	lsrs	r3, r3, #1
 800a5e8:	441a      	add	r2, r3
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	2b0f      	cmp	r3, #15
 800a5f8:	d910      	bls.n	800a61c <UART_SetConfig+0x5c8>
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a600:	d20c      	bcs.n	800a61c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	b29a      	uxth	r2, r3
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60da      	str	r2, [r3, #12]
 800a60c:	e009      	b.n	800a622 <UART_SetConfig+0x5ce>
 800a60e:	bf00      	nop
 800a610:	40008000 	.word	0x40008000
 800a614:	00f42400 	.word	0x00f42400
 800a618:	08012a78 	.word	0x08012a78
      }
      else
      {
        ret = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2201      	movs	r2, #1
 800a626:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2200      	movs	r2, #0
 800a636:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2200      	movs	r2, #0
 800a63c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a63e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a642:	4618      	mov	r0, r3
 800a644:	3730      	adds	r7, #48	; 0x30
 800a646:	46bd      	mov	sp, r7
 800a648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a64c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00a      	beq.n	800a676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00a      	beq.n	800a6ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00a      	beq.n	800a6dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01a      	beq.n	800a762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a74a:	d10a      	bne.n	800a762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af02      	add	r7, sp, #8
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7a0:	f7f7 fdf6 	bl	8002390 <HAL_GetTick>
 800a7a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10e      	bne.n	800a7d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f82f 	bl	800a826 <UART_WaitOnFlagUntilTimeout>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e025      	b.n	800a81e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d10e      	bne.n	800a7fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f819 	bl	800a826 <UART_WaitOnFlagUntilTimeout>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e00f      	b.n	800a81e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b09c      	sub	sp, #112	; 0x70
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	603b      	str	r3, [r7, #0]
 800a832:	4613      	mov	r3, r2
 800a834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a836:	e0a9      	b.n	800a98c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a83a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a83e:	f000 80a5 	beq.w	800a98c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a842:	f7f7 fda5 	bl	8002390 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a84e:	429a      	cmp	r2, r3
 800a850:	d302      	bcc.n	800a858 <UART_WaitOnFlagUntilTimeout+0x32>
 800a852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a854:	2b00      	cmp	r3, #0
 800a856:	d140      	bne.n	800a8da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a860:	e853 3f00 	ldrex	r3, [r3]
 800a864:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a868:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a86c:	667b      	str	r3, [r7, #100]	; 0x64
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a876:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a878:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a87c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1e6      	bne.n	800a858 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a894:	e853 3f00 	ldrex	r3, [r3]
 800a898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	f023 0301 	bic.w	r3, r3, #1
 800a8a0:	663b      	str	r3, [r7, #96]	; 0x60
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8aa:	64ba      	str	r2, [r7, #72]	; 0x48
 800a8ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e5      	bne.n	800a88a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e069      	b.n	800a9ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 0304 	and.w	r3, r3, #4
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d051      	beq.n	800a98c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8f6:	d149      	bne.n	800a98c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	e853 3f00 	ldrex	r3, [r3]
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a916:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	461a      	mov	r2, r3
 800a91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a920:	637b      	str	r3, [r7, #52]	; 0x34
 800a922:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e6      	bne.n	800a902 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	613b      	str	r3, [r7, #16]
   return(result);
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f023 0301 	bic.w	r3, r3, #1
 800a94a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3308      	adds	r3, #8
 800a952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a954:	623a      	str	r2, [r7, #32]
 800a956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	69f9      	ldr	r1, [r7, #28]
 800a95a:	6a3a      	ldr	r2, [r7, #32]
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	61bb      	str	r3, [r7, #24]
   return(result);
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e5      	bne.n	800a934 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2220      	movs	r2, #32
 800a974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2220      	movs	r2, #32
 800a97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e010      	b.n	800a9ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	69da      	ldr	r2, [r3, #28]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	4013      	ands	r3, r2
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	429a      	cmp	r2, r3
 800a99a:	bf0c      	ite	eq
 800a99c:	2301      	moveq	r3, #1
 800a99e:	2300      	movne	r3, #0
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	f43f af46 	beq.w	800a838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3770      	adds	r7, #112	; 0x70
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b096      	sub	sp, #88	; 0x58
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	88fa      	ldrh	r2, [r7, #6]
 800a9d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2222      	movs	r2, #34	; 0x22
 800a9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d02c      	beq.n	800aa46 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f0:	4a42      	ldr	r2, [pc, #264]	; (800aafc <UART_Start_Receive_DMA+0x144>)
 800a9f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f8:	4a41      	ldr	r2, [pc, #260]	; (800ab00 <UART_Start_Receive_DMA+0x148>)
 800a9fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa00:	4a40      	ldr	r2, [pc, #256]	; (800ab04 <UART_Start_Receive_DMA+0x14c>)
 800aa02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa08:	2200      	movs	r2, #0
 800aa0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3324      	adds	r3, #36	; 0x24
 800aa16:	4619      	mov	r1, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	88fb      	ldrh	r3, [r7, #6]
 800aa20:	f7f7 fea0 	bl	8002764 <HAL_DMA_Start_IT>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00d      	beq.n	800aa46 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2210      	movs	r2, #16
 800aa2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e055      	b.n	800aaf2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d018      	beq.n	800aa88 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5e:	e853 3f00 	ldrex	r3, [r3]
 800aa62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa6a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	461a      	mov	r2, r3
 800aa72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa74:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa76:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e6      	bne.n	800aa56 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	f043 0301 	orr.w	r3, r3, #1
 800aa9e:	653b      	str	r3, [r7, #80]	; 0x50
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaa8:	637a      	str	r2, [r7, #52]	; 0x34
 800aaaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aaae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e5      	bne.n	800aa88 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	613b      	str	r3, [r7, #16]
   return(result);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3308      	adds	r3, #8
 800aada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aadc:	623a      	str	r2, [r7, #32]
 800aade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	69f9      	ldr	r1, [r7, #28]
 800aae2:	6a3a      	ldr	r2, [r7, #32]
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e5      	bne.n	800aabc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3758      	adds	r7, #88	; 0x58
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	0800ac57 	.word	0x0800ac57
 800ab00:	0800ad7d 	.word	0x0800ad7d
 800ab04:	0800adb5 	.word	0x0800adb5

0800ab08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b08f      	sub	sp, #60	; 0x3c
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	e853 3f00 	ldrex	r3, [r3]
 800ab1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ab24:	637b      	str	r3, [r7, #52]	; 0x34
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab36:	e841 2300 	strex	r3, r2, [r1]
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e6      	bne.n	800ab10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3308      	adds	r3, #8
 800ab48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ab58:	633b      	str	r3, [r7, #48]	; 0x30
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3308      	adds	r3, #8
 800ab60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab62:	61ba      	str	r2, [r7, #24]
 800ab64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	6979      	ldr	r1, [r7, #20]
 800ab68:	69ba      	ldr	r2, [r7, #24]
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e5      	bne.n	800ab42 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ab7e:	bf00      	nop
 800ab80:	373c      	adds	r7, #60	; 0x3c
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b095      	sub	sp, #84	; 0x54
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9a:	e853 3f00 	ldrex	r3, [r3]
 800ab9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	461a      	mov	r2, r3
 800abae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb0:	643b      	str	r3, [r7, #64]	; 0x40
 800abb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e6      	bne.n	800ab92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3308      	adds	r3, #8
 800abca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	e853 3f00 	ldrex	r3, [r3]
 800abd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abda:	f023 0301 	bic.w	r3, r3, #1
 800abde:	64bb      	str	r3, [r7, #72]	; 0x48
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3308      	adds	r3, #8
 800abe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e3      	bne.n	800abc4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d118      	bne.n	800ac36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	e853 3f00 	ldrex	r3, [r3]
 800ac10:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f023 0310 	bic.w	r3, r3, #16
 800ac18:	647b      	str	r3, [r7, #68]	; 0x44
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	6979      	ldr	r1, [r7, #20]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e6      	bne.n	800ac04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ac4a:	bf00      	nop
 800ac4c:	3754      	adds	r7, #84	; 0x54
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b09c      	sub	sp, #112	; 0x70
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d171      	bne.n	800ad56 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ac72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac74:	2200      	movs	r2, #0
 800ac76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac98:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac9a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e6      	bne.n	800ac7a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	3308      	adds	r3, #8
 800acb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	e853 3f00 	ldrex	r3, [r3]
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbe:	f023 0301 	bic.w	r3, r3, #1
 800acc2:	667b      	str	r3, [r7, #100]	; 0x64
 800acc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3308      	adds	r3, #8
 800acca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800accc:	647a      	str	r2, [r7, #68]	; 0x44
 800acce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acd4:	e841 2300 	strex	r3, r2, [r1]
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e5      	bne.n	800acac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ace0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3308      	adds	r3, #8
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	623b      	str	r3, [r7, #32]
   return(result);
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf6:	663b      	str	r3, [r7, #96]	; 0x60
 800acf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3308      	adds	r3, #8
 800acfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad00:	633a      	str	r2, [r7, #48]	; 0x30
 800ad02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e5      	bne.n	800ace0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad16:	2220      	movs	r2, #32
 800ad18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d118      	bne.n	800ad56 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f023 0310 	bic.w	r3, r3, #16
 800ad38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad42:	61fb      	str	r3, [r7, #28]
 800ad44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	69b9      	ldr	r1, [r7, #24]
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e6      	bne.n	800ad24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d107      	bne.n	800ad6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad64:	4619      	mov	r1, r3
 800ad66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad68:	f7ff f968 	bl	800a03c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad6c:	e002      	b.n	800ad74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ad6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad70:	f7f6 f996 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 800ad74:	bf00      	nop
 800ad76:	3770      	adds	r7, #112	; 0x70
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d109      	bne.n	800ada6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad98:	085b      	lsrs	r3, r3, #1
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7ff f94c 	bl	800a03c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ada4:	e002      	b.n	800adac <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff f934 	bl	800a014 <HAL_UART_RxHalfCpltCallback>
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adc8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800addc:	2b80      	cmp	r3, #128	; 0x80
 800adde:	d109      	bne.n	800adf4 <UART_DMAError+0x40>
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	2b21      	cmp	r3, #33	; 0x21
 800ade4:	d106      	bne.n	800adf4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800adee:	6978      	ldr	r0, [r7, #20]
 800adf0:	f7ff fe8a 	bl	800ab08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfe:	2b40      	cmp	r3, #64	; 0x40
 800ae00:	d109      	bne.n	800ae16 <UART_DMAError+0x62>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b22      	cmp	r3, #34	; 0x22
 800ae06:	d106      	bne.n	800ae16 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ae10:	6978      	ldr	r0, [r7, #20]
 800ae12:	f7ff feba 	bl	800ab8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae1c:	f043 0210 	orr.w	r2, r3, #16
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae26:	6978      	ldr	r0, [r7, #20]
 800ae28:	f7ff f8fe 	bl	800a028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae2c:	bf00      	nop
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f7ff f8e8 	bl	800a028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae58:	bf00      	nop
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae7c:	61fb      	str	r3, [r7, #28]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	61bb      	str	r3, [r7, #24]
 800ae88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8a:	6979      	ldr	r1, [r7, #20]
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	e841 2300 	strex	r3, r2, [r1]
 800ae92:	613b      	str	r3, [r7, #16]
   return(result);
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1e6      	bne.n	800ae68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff f8a9 	bl	800a000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeae:	bf00      	nop
 800aeb0:	3720      	adds	r7, #32
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b083      	sub	sp, #12
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aebe:	bf00      	nop
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b085      	sub	sp, #20
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af00:	2b01      	cmp	r3, #1
 800af02:	d101      	bne.n	800af08 <HAL_UARTEx_DisableFifoMode+0x16>
 800af04:	2302      	movs	r3, #2
 800af06:	e027      	b.n	800af58 <HAL_UARTEx_DisableFifoMode+0x66>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2224      	movs	r2, #36	; 0x24
 800af14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f022 0201 	bic.w	r2, r2, #1
 800af2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2220      	movs	r2, #32
 800af4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af74:	2b01      	cmp	r3, #1
 800af76:	d101      	bne.n	800af7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af78:	2302      	movs	r3, #2
 800af7a:	e02d      	b.n	800afd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2224      	movs	r2, #36	; 0x24
 800af88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f022 0201 	bic.w	r2, r2, #1
 800afa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f84f 	bl	800b05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d101      	bne.n	800aff8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aff4:	2302      	movs	r3, #2
 800aff6:	e02d      	b.n	800b054 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2224      	movs	r2, #36	; 0x24
 800b004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0201 	bic.w	r2, r2, #1
 800b01e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f811 	bl	800b05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2220      	movs	r2, #32
 800b046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d108      	bne.n	800b07e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b07c:	e031      	b.n	800b0e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b07e:	2308      	movs	r3, #8
 800b080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b082:	2308      	movs	r3, #8
 800b084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	0e5b      	lsrs	r3, r3, #25
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f003 0307 	and.w	r3, r3, #7
 800b094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	0f5b      	lsrs	r3, r3, #29
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	7b3a      	ldrb	r2, [r7, #12]
 800b0aa:	4911      	ldr	r1, [pc, #68]	; (800b0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ac:	5c8a      	ldrb	r2, [r1, r2]
 800b0ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0b2:	7b3a      	ldrb	r2, [r7, #12]
 800b0b4:	490f      	ldr	r1, [pc, #60]	; (800b0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	7b7a      	ldrb	r2, [r7, #13]
 800b0c8:	4909      	ldr	r1, [pc, #36]	; (800b0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ca:	5c8a      	ldrb	r2, [r1, r2]
 800b0cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0d0:	7b7a      	ldrb	r2, [r7, #13]
 800b0d2:	4908      	ldr	r1, [pc, #32]	; (800b0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0e2:	bf00      	nop
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	08012a90 	.word	0x08012a90
 800b0f4:	08012a98 	.word	0x08012a98

0800b0f8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	b480      	push	{r7}
 800b0fc:	b085      	sub	sp, #20
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	f107 001c 	add.w	r0, r7, #28
 800b106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b10e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b110:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b112:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b116:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b11a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b11e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	4b07      	ldr	r3, [pc, #28]	; (800b148 <SDMMC_Init+0x50>)
 800b12c:	4013      	ands	r3, r2
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	431a      	orrs	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	b004      	add	sp, #16
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	ffc02c00 	.word	0xffc02c00

0800b14c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f043 0203 	orr.w	r2, r3, #3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b19c:	2002      	movs	r0, #2
 800b19e:	f7f7 f903 	bl	80023a8 <HAL_Delay>

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0303 	and.w	r3, r3, #3
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b1ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b1f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68da      	ldr	r2, [r3, #12]
 800b1fe:	4b06      	ldr	r3, [pc, #24]	; (800b218 <SDMMC_SendCommand+0x50>)
 800b200:	4013      	ands	r3, r2
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	431a      	orrs	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	fffee0c0 	.word	0xfffee0c0

0800b21c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	b2db      	uxtb	r3, r3
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b236:	b480      	push	{r7}
 800b238:	b085      	sub	sp, #20
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3314      	adds	r3, #20
 800b244:	461a      	mov	r2, r3
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	4413      	add	r3, r2
 800b24a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b282:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b288:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b28e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4313      	orrs	r3, r2
 800b294:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0

}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b2c2:	2310      	movs	r3, #16
 800b2c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d6:	f107 0308 	add.w	r3, r7, #8
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff ff73 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e6:	2110      	movs	r1, #16
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fa7b 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2f0:	69fb      	ldr	r3, [r7, #28]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b088      	sub	sp, #32
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b308:	2311      	movs	r3, #17
 800b30a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b30c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b31a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b31c:	f107 0308 	add.w	r3, r7, #8
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff ff50 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b328:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32c:	2111      	movs	r1, #17
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fa58 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b336:	69fb      	ldr	r3, [r7, #28]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3720      	adds	r7, #32
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b34e:	2312      	movs	r3, #18
 800b350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b352:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b358:	2300      	movs	r3, #0
 800b35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b35c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b362:	f107 0308 	add.w	r3, r7, #8
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff ff2d 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b372:	2112      	movs	r1, #18
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fa35 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b37c:	69fb      	ldr	r3, [r7, #28]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3720      	adds	r7, #32
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b088      	sub	sp, #32
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b394:	2318      	movs	r3, #24
 800b396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3a8:	f107 0308 	add.w	r3, r7, #8
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff ff0a 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b8:	2118      	movs	r1, #24
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fa12 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c2:	69fb      	ldr	r3, [r7, #28]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b3da:	2319      	movs	r3, #25
 800b3dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ee:	f107 0308 	add.w	r3, r7, #8
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7ff fee7 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3fe:	2119      	movs	r1, #25
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f9ef 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b408:	69fb      	ldr	r3, [r7, #28]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b420:	230c      	movs	r3, #12
 800b422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b424:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b42a:	2300      	movs	r3, #0
 800b42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b42e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b432:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b44c:	f107 0308 	add.w	r3, r7, #8
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff feb8 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b458:	4a08      	ldr	r2, [pc, #32]	; (800b47c <SDMMC_CmdStopTransfer+0x68>)
 800b45a:	210c      	movs	r1, #12
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f9c1 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b462:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b470:	69fb      	ldr	r3, [r7, #28]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3720      	adds	r7, #32
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	05f5e100 	.word	0x05f5e100

0800b480 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b08a      	sub	sp, #40	; 0x28
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b490:	2307      	movs	r3, #7
 800b492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b498:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a4:	f107 0310 	add.w	r3, r7, #16
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fe8c 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b4:	2107      	movs	r1, #7
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 f994 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b4bc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3728      	adds	r7, #40	; 0x28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4e6:	f107 0308 	add.w	r3, r7, #8
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7ff fe6b 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fbb8 	bl	800bc68 <SDMMC_GetCmdError>
 800b4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b50c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b512:	2308      	movs	r3, #8
 800b514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b51c:	2300      	movs	r3, #0
 800b51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b526:	f107 0308 	add.w	r3, r7, #8
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fe4b 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fb4a 	bl	800bbcc <SDMMC_GetCmdResp7>
 800b538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53a:	69fb      	ldr	r3, [r7, #28]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3720      	adds	r7, #32
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b552:	2337      	movs	r3, #55	; 0x37
 800b554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b55a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b566:	f107 0308 	add.w	r3, r7, #8
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fe2b 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b572:	f241 3288 	movw	r2, #5000	; 0x1388
 800b576:	2137      	movs	r1, #55	; 0x37
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f933 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b57e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b580:	69fb      	ldr	r3, [r7, #28]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b088      	sub	sp, #32
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b598:	2329      	movs	r3, #41	; 0x29
 800b59a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b59c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ac:	f107 0308 	add.w	r3, r7, #8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff fe08 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fa4f 	bl	800ba5c <SDMMC_GetCmdResp3>
 800b5be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3720      	adds	r7, #32
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b088      	sub	sp, #32
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b5d8:	2306      	movs	r3, #6
 800b5da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fde8 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b5f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5fc:	2106      	movs	r1, #6
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f8f0 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b606:	69fb      	ldr	r3, [r7, #28]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3720      	adds	r7, #32
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b61c:	2333      	movs	r3, #51	; 0x33
 800b61e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b620:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b62a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b62e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff fdc6 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b640:	2133      	movs	r1, #51	; 0x33
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8ce 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b64a:	69fb      	ldr	r3, [r7, #28]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b660:	2302      	movs	r3, #2
 800b662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b664:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b66e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b674:	f107 0308 	add.w	r3, r7, #8
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fda4 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f9a1 	bl	800b9c8 <SDMMC_GetCmdResp2>
 800b686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b688:	69fb      	ldr	r3, [r7, #28]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b088      	sub	sp, #32
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6a0:	2309      	movs	r3, #9
 800b6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff fd84 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f981 	bl	800b9c8 <SDMMC_GetCmdResp2>
 800b6c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c8:	69fb      	ldr	r3, [r7, #28]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3720      	adds	r7, #32
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b088      	sub	sp, #32
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6f4:	f107 0308 	add.w	r3, r7, #8
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff fd64 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	2103      	movs	r1, #3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f9e9 	bl	800badc <SDMMC_GetCmdResp6>
 800b70a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b70c:	69fb      	ldr	r3, [r7, #28]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b088      	sub	sp, #32
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b724:	230d      	movs	r3, #13
 800b726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff fd42 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b744:	f241 3288 	movw	r2, #5000	; 0x1388
 800b748:	210d      	movs	r1, #13
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f84a 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b752:	69fb      	ldr	r3, [r7, #28]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3720      	adds	r7, #32
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b088      	sub	sp, #32
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b764:	2300      	movs	r3, #0
 800b766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b768:	230d      	movs	r3, #13
 800b76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b77a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b77c:	f107 0308 	add.w	r3, r7, #8
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff fd20 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b788:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78c:	210d      	movs	r1, #13
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f828 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b796:	69fb      	ldr	r3, [r7, #28]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3720      	adds	r7, #32
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b7ac:	230b      	movs	r3, #11
 800b7ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c0:	f107 0308 	add.w	r3, r7, #8
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fcfe 	bl	800b1c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d0:	210b      	movs	r1, #11
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f806 	bl	800b7e4 <SDMMC_GetCmdResp1>
 800b7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7da:	69fb      	ldr	r3, [r7, #28]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3720      	adds	r7, #32
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	607a      	str	r2, [r7, #4]
 800b7f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7f2:	4b70      	ldr	r3, [pc, #448]	; (800b9b4 <SDMMC_GetCmdResp1+0x1d0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a70      	ldr	r2, [pc, #448]	; (800b9b8 <SDMMC_GetCmdResp1+0x1d4>)
 800b7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fc:	0a5a      	lsrs	r2, r3, #9
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	fb02 f303 	mul.w	r3, r2, r3
 800b804:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	1e5a      	subs	r2, r3, #1
 800b80a:	61fa      	str	r2, [r7, #28]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b814:	e0c9      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	4b67      	ldr	r3, [pc, #412]	; (800b9bc <SDMMC_GetCmdResp1+0x1d8>)
 800b820:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0ef      	beq.n	800b806 <SDMMC_GetCmdResp1+0x22>
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1ea      	bne.n	800b806 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b834:	f003 0304 	and.w	r3, r3, #4
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2204      	movs	r2, #4
 800b840:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b842:	2304      	movs	r3, #4
 800b844:	e0b1      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d004      	beq.n	800b85c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2201      	movs	r2, #1
 800b856:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b858:	2301      	movs	r3, #1
 800b85a:	e0a6      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4a58      	ldr	r2, [pc, #352]	; (800b9c0 <SDMMC_GetCmdResp1+0x1dc>)
 800b860:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7ff fcda 	bl	800b21c <SDMMC_GetCommandResponse>
 800b868:	4603      	mov	r3, r0
 800b86a:	461a      	mov	r2, r3
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	4293      	cmp	r3, r2
 800b870:	d001      	beq.n	800b876 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b872:	2301      	movs	r3, #1
 800b874:	e099      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b876:	2100      	movs	r1, #0
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7ff fcdc 	bl	800b236 <SDMMC_GetResponse>
 800b87e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	4b50      	ldr	r3, [pc, #320]	; (800b9c4 <SDMMC_GetCmdResp1+0x1e0>)
 800b884:	4013      	ands	r3, r2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e08d      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2b00      	cmp	r3, #0
 800b892:	da02      	bge.n	800b89a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b898:	e087      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8a4:	2340      	movs	r3, #64	; 0x40
 800b8a6:	e080      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8b2:	2380      	movs	r3, #128	; 0x80
 800b8b4:	e079      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8c4:	e071      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8d4:	e069      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8e4:	e061      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8f4:	e059      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b904:	e051      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b914:	e049      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b924:	e041      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b934:	e039      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b944:	e031      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b950:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b954:	e029      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b960:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b964:	e021      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b974:	e019      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b980:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b984:	e011      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b990:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b994:	e009      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f003 0308 	and.w	r3, r3, #8
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b9a4:	e001      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3720      	adds	r7, #32
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000008 	.word	0x20000008
 800b9b8:	10624dd3 	.word	0x10624dd3
 800b9bc:	00200045 	.word	0x00200045
 800b9c0:	002000c5 	.word	0x002000c5
 800b9c4:	fdffe008 	.word	0xfdffe008

0800b9c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9d0:	4b1f      	ldr	r3, [pc, #124]	; (800ba50 <SDMMC_GetCmdResp2+0x88>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a1f      	ldr	r2, [pc, #124]	; (800ba54 <SDMMC_GetCmdResp2+0x8c>)
 800b9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9da:	0a5b      	lsrs	r3, r3, #9
 800b9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e0:	fb02 f303 	mul.w	r3, r2, r3
 800b9e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	1e5a      	subs	r2, r3, #1
 800b9ea:	60fa      	str	r2, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9f4:	e026      	b.n	800ba44 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0ef      	beq.n	800b9e6 <SDMMC_GetCmdResp2+0x1e>
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1ea      	bne.n	800b9e6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba14:	f003 0304 	and.w	r3, r3, #4
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d004      	beq.n	800ba26 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba22:	2304      	movs	r3, #4
 800ba24:	e00e      	b.n	800ba44 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d004      	beq.n	800ba3c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e003      	b.n	800ba44 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a06      	ldr	r2, [pc, #24]	; (800ba58 <SDMMC_GetCmdResp2+0x90>)
 800ba40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20000008 	.word	0x20000008
 800ba54:	10624dd3 	.word	0x10624dd3
 800ba58:	002000c5 	.word	0x002000c5

0800ba5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba64:	4b1a      	ldr	r3, [pc, #104]	; (800bad0 <SDMMC_GetCmdResp3+0x74>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a1a      	ldr	r2, [pc, #104]	; (800bad4 <SDMMC_GetCmdResp3+0x78>)
 800ba6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6e:	0a5b      	lsrs	r3, r3, #9
 800ba70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba74:	fb02 f303 	mul.w	r3, r2, r3
 800ba78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	1e5a      	subs	r2, r3, #1
 800ba7e:	60fa      	str	r2, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba88:	e01b      	b.n	800bac2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0ef      	beq.n	800ba7a <SDMMC_GetCmdResp3+0x1e>
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1ea      	bne.n	800ba7a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa8:	f003 0304 	and.w	r3, r3, #4
 800baac:	2b00      	cmp	r3, #0
 800baae:	d004      	beq.n	800baba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2204      	movs	r2, #4
 800bab4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bab6:	2304      	movs	r3, #4
 800bab8:	e003      	b.n	800bac2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a06      	ldr	r2, [pc, #24]	; (800bad8 <SDMMC_GetCmdResp3+0x7c>)
 800babe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3714      	adds	r7, #20
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	20000008 	.word	0x20000008
 800bad4:	10624dd3 	.word	0x10624dd3
 800bad8:	002000c5 	.word	0x002000c5

0800badc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	460b      	mov	r3, r1
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800baea:	4b35      	ldr	r3, [pc, #212]	; (800bbc0 <SDMMC_GetCmdResp6+0xe4>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a35      	ldr	r2, [pc, #212]	; (800bbc4 <SDMMC_GetCmdResp6+0xe8>)
 800baf0:	fba2 2303 	umull	r2, r3, r2, r3
 800baf4:	0a5b      	lsrs	r3, r3, #9
 800baf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafa:	fb02 f303 	mul.w	r3, r2, r3
 800bafe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	1e5a      	subs	r2, r3, #1
 800bb04:	61fa      	str	r2, [r7, #28]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d102      	bne.n	800bb10 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb0e:	e052      	b.n	800bbb6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb14:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0ef      	beq.n	800bb00 <SDMMC_GetCmdResp6+0x24>
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1ea      	bne.n	800bb00 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2e:	f003 0304 	and.w	r3, r3, #4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d004      	beq.n	800bb40 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2204      	movs	r2, #4
 800bb3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb3c:	2304      	movs	r3, #4
 800bb3e:	e03a      	b.n	800bbb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d004      	beq.n	800bb56 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e02f      	b.n	800bbb6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f7ff fb60 	bl	800b21c <SDMMC_GetCommandResponse>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	7afb      	ldrb	r3, [r7, #11]
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d001      	beq.n	800bb6a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e025      	b.n	800bbb6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	4a16      	ldr	r2, [pc, #88]	; (800bbc8 <SDMMC_GetCmdResp6+0xec>)
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb70:	2100      	movs	r1, #0
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f7ff fb5f 	bl	800b236 <SDMMC_GetResponse>
 800bb78:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d106      	bne.n	800bb92 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	0c1b      	lsrs	r3, r3, #16
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e011      	b.n	800bbb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bba0:	e009      	b.n	800bbb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbb0:	e001      	b.n	800bbb6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3720      	adds	r7, #32
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20000008 	.word	0x20000008
 800bbc4:	10624dd3 	.word	0x10624dd3
 800bbc8:	002000c5 	.word	0x002000c5

0800bbcc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbd4:	4b22      	ldr	r3, [pc, #136]	; (800bc60 <SDMMC_GetCmdResp7+0x94>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a22      	ldr	r2, [pc, #136]	; (800bc64 <SDMMC_GetCmdResp7+0x98>)
 800bbda:	fba2 2303 	umull	r2, r3, r2, r3
 800bbde:	0a5b      	lsrs	r3, r3, #9
 800bbe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbe4:	fb02 f303 	mul.w	r3, r2, r3
 800bbe8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	1e5a      	subs	r2, r3, #1
 800bbee:	60fa      	str	r2, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbf8:	e02c      	b.n	800bc54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d0ef      	beq.n	800bbea <SDMMC_GetCmdResp7+0x1e>
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1ea      	bne.n	800bbea <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc18:	f003 0304 	and.w	r3, r3, #4
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d004      	beq.n	800bc2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2204      	movs	r2, #4
 800bc24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc26:	2304      	movs	r3, #4
 800bc28:	e014      	b.n	800bc54 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e009      	b.n	800bc54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2240      	movs	r2, #64	; 0x40
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc52:	2300      	movs	r3, #0

}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	20000008 	.word	0x20000008
 800bc64:	10624dd3 	.word	0x10624dd3

0800bc68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc70:	4b11      	ldr	r3, [pc, #68]	; (800bcb8 <SDMMC_GetCmdError+0x50>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a11      	ldr	r2, [pc, #68]	; (800bcbc <SDMMC_GetCmdError+0x54>)
 800bc76:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7a:	0a5b      	lsrs	r3, r3, #9
 800bc7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc80:	fb02 f303 	mul.w	r3, r2, r3
 800bc84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	1e5a      	subs	r2, r3, #1
 800bc8a:	60fa      	str	r2, [r7, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc94:	e009      	b.n	800bcaa <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d0f1      	beq.n	800bc86 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a06      	ldr	r2, [pc, #24]	; (800bcc0 <SDMMC_GetCmdError+0x58>)
 800bca6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	20000008 	.word	0x20000008
 800bcbc:	10624dd3 	.word	0x10624dd3
 800bcc0:	002000c5 	.word	0x002000c5

0800bcc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcc4:	b084      	sub	sp, #16
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b084      	sub	sp, #16
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	f107 001c 	add.w	r0, r7, #28
 800bcd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 faf6 	bl	800d2d4 <USB_CoreReset>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800bcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d106      	bne.n	800bd00 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	639a      	str	r2, [r3, #56]	; 0x38
 800bcfe:	e005      	b.n	800bd0c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd18:	b004      	add	sp, #16
 800bd1a:	4770      	bx	lr

0800bd1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	4613      	mov	r3, r2
 800bd28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d165      	bne.n	800bdfc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	4a3e      	ldr	r2, [pc, #248]	; (800be2c <USB_SetTurnaroundTime+0x110>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d906      	bls.n	800bd46 <USB_SetTurnaroundTime+0x2a>
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	4a3d      	ldr	r2, [pc, #244]	; (800be30 <USB_SetTurnaroundTime+0x114>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d202      	bcs.n	800bd46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bd40:	230f      	movs	r3, #15
 800bd42:	617b      	str	r3, [r7, #20]
 800bd44:	e05c      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	4a39      	ldr	r2, [pc, #228]	; (800be30 <USB_SetTurnaroundTime+0x114>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d306      	bcc.n	800bd5c <USB_SetTurnaroundTime+0x40>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4a38      	ldr	r2, [pc, #224]	; (800be34 <USB_SetTurnaroundTime+0x118>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d202      	bcs.n	800bd5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bd56:	230e      	movs	r3, #14
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	e051      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	4a35      	ldr	r2, [pc, #212]	; (800be34 <USB_SetTurnaroundTime+0x118>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d306      	bcc.n	800bd72 <USB_SetTurnaroundTime+0x56>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	4a34      	ldr	r2, [pc, #208]	; (800be38 <USB_SetTurnaroundTime+0x11c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d202      	bcs.n	800bd72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bd6c:	230d      	movs	r3, #13
 800bd6e:	617b      	str	r3, [r7, #20]
 800bd70:	e046      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	4a30      	ldr	r2, [pc, #192]	; (800be38 <USB_SetTurnaroundTime+0x11c>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d306      	bcc.n	800bd88 <USB_SetTurnaroundTime+0x6c>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	4a2f      	ldr	r2, [pc, #188]	; (800be3c <USB_SetTurnaroundTime+0x120>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d802      	bhi.n	800bd88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bd82:	230c      	movs	r3, #12
 800bd84:	617b      	str	r3, [r7, #20]
 800bd86:	e03b      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	4a2c      	ldr	r2, [pc, #176]	; (800be3c <USB_SetTurnaroundTime+0x120>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d906      	bls.n	800bd9e <USB_SetTurnaroundTime+0x82>
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	4a2b      	ldr	r2, [pc, #172]	; (800be40 <USB_SetTurnaroundTime+0x124>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d802      	bhi.n	800bd9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bd98:	230b      	movs	r3, #11
 800bd9a:	617b      	str	r3, [r7, #20]
 800bd9c:	e030      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	4a27      	ldr	r2, [pc, #156]	; (800be40 <USB_SetTurnaroundTime+0x124>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d906      	bls.n	800bdb4 <USB_SetTurnaroundTime+0x98>
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	4a26      	ldr	r2, [pc, #152]	; (800be44 <USB_SetTurnaroundTime+0x128>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d802      	bhi.n	800bdb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bdae:	230a      	movs	r3, #10
 800bdb0:	617b      	str	r3, [r7, #20]
 800bdb2:	e025      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4a23      	ldr	r2, [pc, #140]	; (800be44 <USB_SetTurnaroundTime+0x128>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d906      	bls.n	800bdca <USB_SetTurnaroundTime+0xae>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	4a22      	ldr	r2, [pc, #136]	; (800be48 <USB_SetTurnaroundTime+0x12c>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d202      	bcs.n	800bdca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bdc4:	2309      	movs	r3, #9
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e01a      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	4a1e      	ldr	r2, [pc, #120]	; (800be48 <USB_SetTurnaroundTime+0x12c>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d306      	bcc.n	800bde0 <USB_SetTurnaroundTime+0xc4>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	4a1d      	ldr	r2, [pc, #116]	; (800be4c <USB_SetTurnaroundTime+0x130>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d802      	bhi.n	800bde0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bdda:	2308      	movs	r3, #8
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	e00f      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	4a1a      	ldr	r2, [pc, #104]	; (800be4c <USB_SetTurnaroundTime+0x130>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d906      	bls.n	800bdf6 <USB_SetTurnaroundTime+0xda>
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	4a19      	ldr	r2, [pc, #100]	; (800be50 <USB_SetTurnaroundTime+0x134>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d202      	bcs.n	800bdf6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bdf0:	2307      	movs	r3, #7
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	e004      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bdf6:	2306      	movs	r3, #6
 800bdf8:	617b      	str	r3, [r7, #20]
 800bdfa:	e001      	b.n	800be00 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bdfc:	2309      	movs	r3, #9
 800bdfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	68da      	ldr	r2, [r3, #12]
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	029b      	lsls	r3, r3, #10
 800be14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800be18:	431a      	orrs	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	371c      	adds	r7, #28
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	00d8acbf 	.word	0x00d8acbf
 800be30:	00e4e1c0 	.word	0x00e4e1c0
 800be34:	00f42400 	.word	0x00f42400
 800be38:	01067380 	.word	0x01067380
 800be3c:	011a499f 	.word	0x011a499f
 800be40:	01312cff 	.word	0x01312cff
 800be44:	014ca43f 	.word	0x014ca43f
 800be48:	016e3600 	.word	0x016e3600
 800be4c:	01a6ab1f 	.word	0x01a6ab1f
 800be50:	01e84800 	.word	0x01e84800

0800be54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	f043 0201 	orr.w	r2, r3, #1
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	f023 0201 	bic.w	r2, r3, #1
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800beb4:	78fb      	ldrb	r3, [r7, #3]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d115      	bne.n	800bee6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bec6:	2001      	movs	r0, #1
 800bec8:	f7f6 fa6e 	bl	80023a8 <HAL_Delay>
      ms++;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3301      	adds	r3, #1
 800bed0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f001 f985 	bl	800d1e2 <USB_GetMode>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d01e      	beq.n	800bf1c <USB_SetCurrentMode+0x84>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2b31      	cmp	r3, #49	; 0x31
 800bee2:	d9f0      	bls.n	800bec6 <USB_SetCurrentMode+0x2e>
 800bee4:	e01a      	b.n	800bf1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bee6:	78fb      	ldrb	r3, [r7, #3]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d115      	bne.n	800bf18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bef8:	2001      	movs	r0, #1
 800befa:	f7f6 fa55 	bl	80023a8 <HAL_Delay>
      ms++;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3301      	adds	r3, #1
 800bf02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 f96c 	bl	800d1e2 <USB_GetMode>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d005      	beq.n	800bf1c <USB_SetCurrentMode+0x84>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b31      	cmp	r3, #49	; 0x31
 800bf14:	d9f0      	bls.n	800bef8 <USB_SetCurrentMode+0x60>
 800bf16:	e001      	b.n	800bf1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e005      	b.n	800bf28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b32      	cmp	r3, #50	; 0x32
 800bf20:	d101      	bne.n	800bf26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf30:	b084      	sub	sp, #16
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b086      	sub	sp, #24
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	613b      	str	r3, [r7, #16]
 800bf4e:	e009      	b.n	800bf64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	3340      	adds	r3, #64	; 0x40
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3301      	adds	r3, #1
 800bf62:	613b      	str	r3, [r7, #16]
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	2b0e      	cmp	r3, #14
 800bf68:	d9f2      	bls.n	800bf50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bf6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d11c      	bne.n	800bfaa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf7e:	f043 0302 	orr.w	r3, r3, #2
 800bf82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	e005      	b.n	800bfb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc8:	4619      	mov	r1, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	680b      	ldr	r3, [r1, #0]
 800bfd4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bfd6:	2103      	movs	r1, #3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f959 	bl	800c290 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bfde:	2110      	movs	r1, #16
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f8f1 	bl	800c1c8 <USB_FlushTxFifo>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 f91d 	bl	800c230 <USB_FlushRxFifo>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c006:	461a      	mov	r2, r3
 800c008:	2300      	movs	r3, #0
 800c00a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c012:	461a      	mov	r2, r3
 800c014:	2300      	movs	r3, #0
 800c016:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01e:	461a      	mov	r2, r3
 800c020:	2300      	movs	r3, #0
 800c022:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c024:	2300      	movs	r3, #0
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	e043      	b.n	800c0b2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4413      	add	r3, r2
 800c032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c03c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c040:	d118      	bne.n	800c074 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10a      	bne.n	800c05e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c054:	461a      	mov	r2, r3
 800c056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c05a:	6013      	str	r3, [r2, #0]
 800c05c:	e013      	b.n	800c086 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06a:	461a      	mov	r2, r3
 800c06c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c070:	6013      	str	r3, [r2, #0]
 800c072:	e008      	b.n	800c086 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c080:	461a      	mov	r2, r3
 800c082:	2300      	movs	r3, #0
 800c084:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	015a      	lsls	r2, r3, #5
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	4413      	add	r3, r2
 800c08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c092:	461a      	mov	r2, r3
 800c094:	2300      	movs	r3, #0
 800c096:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c0aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	613b      	str	r3, [r7, #16]
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d3b7      	bcc.n	800c02a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	613b      	str	r3, [r7, #16]
 800c0be:	e043      	b.n	800c148 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0d6:	d118      	bne.n	800c10a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	015a      	lsls	r2, r3, #5
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	e013      	b.n	800c11c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c100:	461a      	mov	r2, r3
 800c102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	e008      	b.n	800c11c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	015a      	lsls	r2, r3, #5
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	4413      	add	r3, r2
 800c112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c116:	461a      	mov	r2, r3
 800c118:	2300      	movs	r3, #0
 800c11a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c128:	461a      	mov	r2, r3
 800c12a:	2300      	movs	r3, #0
 800c12c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c13a:	461a      	mov	r2, r3
 800c13c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	3301      	adds	r3, #1
 800c146:	613b      	str	r3, [r7, #16]
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d3b7      	bcc.n	800c0c0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c15e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c162:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c170:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	f043 0210 	orr.w	r2, r3, #16
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	699a      	ldr	r2, [r3, #24]
 800c182:	4b10      	ldr	r3, [pc, #64]	; (800c1c4 <USB_DevInit+0x294>)
 800c184:	4313      	orrs	r3, r2
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	f043 0208 	orr.w	r2, r3, #8
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d107      	bne.n	800c1b2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1aa:	f043 0304 	orr.w	r3, r3, #4
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1be:	b004      	add	sp, #16
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	803c3800 	.word	0x803c3800

0800c1c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4a13      	ldr	r2, [pc, #76]	; (800c22c <USB_FlushTxFifo+0x64>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d901      	bls.n	800c1e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	e01b      	b.n	800c220 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	daf2      	bge.n	800c1d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	019b      	lsls	r3, r3, #6
 800c1f8:	f043 0220 	orr.w	r2, r3, #32
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3301      	adds	r3, #1
 800c204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4a08      	ldr	r2, [pc, #32]	; (800c22c <USB_FlushTxFifo+0x64>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d901      	bls.n	800c212 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c20e:	2303      	movs	r3, #3
 800c210:	e006      	b.n	800c220 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b20      	cmp	r3, #32
 800c21c:	d0f0      	beq.n	800c200 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	00030d40 	.word	0x00030d40

0800c230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c238:	2300      	movs	r3, #0
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	3301      	adds	r3, #1
 800c240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	4a11      	ldr	r2, [pc, #68]	; (800c28c <USB_FlushRxFifo+0x5c>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d901      	bls.n	800c24e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e018      	b.n	800c280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	daf2      	bge.n	800c23c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2210      	movs	r2, #16
 800c25e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3301      	adds	r3, #1
 800c264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	4a08      	ldr	r2, [pc, #32]	; (800c28c <USB_FlushRxFifo+0x5c>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d901      	bls.n	800c272 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c26e:	2303      	movs	r3, #3
 800c270:	e006      	b.n	800c280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	f003 0310 	and.w	r3, r3, #16
 800c27a:	2b10      	cmp	r3, #16
 800c27c:	d0f0      	beq.n	800c260 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	00030d40 	.word	0x00030d40

0800c290 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	78fb      	ldrb	r3, [r7, #3]
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3714      	adds	r7, #20
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b087      	sub	sp, #28
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f003 0306 	and.w	r3, r3, #6
 800c2da:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d002      	beq.n	800c2e8 <USB_GetDevSpeed+0x26>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2b06      	cmp	r3, #6
 800c2e6:	d102      	bne.n	800c2ee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	75fb      	strb	r3, [r7, #23]
 800c2ec:	e001      	b.n	800c2f2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c2ee:	230f      	movs	r3, #15
 800c2f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	371c      	adds	r7, #28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	785b      	ldrb	r3, [r3, #1]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d13a      	bne.n	800c392 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c322:	69da      	ldr	r2, [r3, #28]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	f003 030f 	and.w	r3, r3, #15
 800c32c:	2101      	movs	r1, #1
 800c32e:	fa01 f303 	lsl.w	r3, r1, r3
 800c332:	b29b      	uxth	r3, r3
 800c334:	68f9      	ldr	r1, [r7, #12]
 800c336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c33a:	4313      	orrs	r3, r2
 800c33c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d155      	bne.n	800c400 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	791b      	ldrb	r3, [r3, #4]
 800c36e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c370:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	059b      	lsls	r3, r3, #22
 800c376:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c378:	4313      	orrs	r3, r2
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	0151      	lsls	r1, r2, #5
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	440a      	add	r2, r1
 800c382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c38a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c38e:	6013      	str	r3, [r2, #0]
 800c390:	e036      	b.n	800c400 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c398:	69da      	ldr	r2, [r3, #28]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	f003 030f 	and.w	r3, r3, #15
 800c3a2:	2101      	movs	r1, #1
 800c3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a8:	041b      	lsls	r3, r3, #16
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	015a      	lsls	r2, r3, #5
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d11a      	bne.n	800c400 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	015a      	lsls	r2, r3, #5
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	791b      	ldrb	r3, [r3, #4]
 800c3e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	0151      	lsls	r1, r2, #5
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	440a      	add	r2, r1
 800c3f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
	...

0800c410 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	785b      	ldrb	r3, [r3, #1]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d161      	bne.n	800c4f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c43e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c442:	d11f      	bne.n	800c484 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	0151      	lsls	r1, r2, #5
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	440a      	add	r2, r1
 800c45a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c45e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c462:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	015a      	lsls	r2, r3, #5
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	0151      	lsls	r1, r2, #5
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	440a      	add	r2, r1
 800c47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c47e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c48a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	f003 030f 	and.w	r3, r3, #15
 800c494:	2101      	movs	r1, #1
 800c496:	fa01 f303 	lsl.w	r3, r1, r3
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	43db      	mvns	r3, r3
 800c49e:	68f9      	ldr	r1, [r7, #12]
 800c4a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ae:	69da      	ldr	r2, [r3, #28]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	f003 030f 	and.w	r3, r3, #15
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	43db      	mvns	r3, r3
 800c4c2:	68f9      	ldr	r1, [r7, #12]
 800c4c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	0159      	lsls	r1, r3, #5
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	440b      	add	r3, r1
 800c4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4b35      	ldr	r3, [pc, #212]	; (800c5c0 <USB_DeactivateEndpoint+0x1b0>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	600b      	str	r3, [r1, #0]
 800c4ee:	e060      	b.n	800c5b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c506:	d11f      	bne.n	800c548 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	015a      	lsls	r2, r3, #5
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	4413      	add	r3, r2
 800c510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	0151      	lsls	r1, r2, #5
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	440a      	add	r2, r1
 800c51e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c526:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	0151      	lsls	r1, r2, #5
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	440a      	add	r2, r1
 800c53e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	f003 030f 	and.w	r3, r3, #15
 800c558:	2101      	movs	r1, #1
 800c55a:	fa01 f303 	lsl.w	r3, r1, r3
 800c55e:	041b      	lsls	r3, r3, #16
 800c560:	43db      	mvns	r3, r3
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c568:	4013      	ands	r3, r2
 800c56a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c572:	69da      	ldr	r2, [r3, #28]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	f003 030f 	and.w	r3, r3, #15
 800c57c:	2101      	movs	r1, #1
 800c57e:	fa01 f303 	lsl.w	r3, r1, r3
 800c582:	041b      	lsls	r3, r3, #16
 800c584:	43db      	mvns	r3, r3
 800c586:	68f9      	ldr	r1, [r7, #12]
 800c588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c58c:	4013      	ands	r3, r2
 800c58e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	0159      	lsls	r1, r3, #5
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	440b      	add	r3, r1
 800c5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <USB_DeactivateEndpoint+0x1b4>)
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	ec337800 	.word	0xec337800
 800c5c4:	eff37800 	.word	0xeff37800

0800c5c8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	785b      	ldrb	r3, [r3, #1]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	f040 810a 	bne.w	800c7fa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d132      	bne.n	800c654 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	015a      	lsls	r2, r3, #5
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	0151      	lsls	r1, r2, #5
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	440a      	add	r2, r1
 800c604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c60c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	0151      	lsls	r1, r2, #5
 800c624:	697a      	ldr	r2, [r7, #20]
 800c626:	440a      	add	r2, r1
 800c628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c62c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	0151      	lsls	r1, r2, #5
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	440a      	add	r2, r1
 800c648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c64c:	0cdb      	lsrs	r3, r3, #19
 800c64e:	04db      	lsls	r3, r3, #19
 800c650:	6113      	str	r3, [r2, #16]
 800c652:	e074      	b.n	800c73e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	015a      	lsls	r2, r3, #5
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	4413      	add	r3, r2
 800c65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	0151      	lsls	r1, r2, #5
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	440a      	add	r2, r1
 800c66a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c66e:	0cdb      	lsrs	r3, r3, #19
 800c670:	04db      	lsls	r3, r3, #19
 800c672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	015a      	lsls	r2, r3, #5
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	693a      	ldr	r2, [r7, #16]
 800c684:	0151      	lsls	r1, r2, #5
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	440a      	add	r2, r1
 800c68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c68e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	6999      	ldr	r1, [r3, #24]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	440b      	add	r3, r1
 800c6b0:	1e59      	subs	r1, r3, #1
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c6bc:	4b9e      	ldr	r3, [pc, #632]	; (800c938 <USB_EPStartXfer+0x370>)
 800c6be:	400b      	ands	r3, r1
 800c6c0:	6939      	ldr	r1, [r7, #16]
 800c6c2:	0148      	lsls	r0, r1, #5
 800c6c4:	6979      	ldr	r1, [r7, #20]
 800c6c6:	4401      	add	r1, r0
 800c6c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6dc:	691a      	ldr	r2, [r3, #16]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6e6:	6939      	ldr	r1, [r7, #16]
 800c6e8:	0148      	lsls	r0, r1, #5
 800c6ea:	6979      	ldr	r1, [r7, #20]
 800c6ec:	4401      	add	r1, r0
 800c6ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	791b      	ldrb	r3, [r3, #4]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d11f      	bne.n	800c73e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	440a      	add	r2, r1
 800c714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c718:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c71c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	4413      	add	r3, r2
 800c726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	0151      	lsls	r1, r2, #5
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	440a      	add	r2, r1
 800c734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c73c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	015a      	lsls	r2, r3, #5
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	4413      	add	r3, r2
 800c746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	0151      	lsls	r1, r2, #5
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	440a      	add	r2, r1
 800c754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c75c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	791b      	ldrb	r3, [r3, #4]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d015      	beq.n	800c792 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 8106 	beq.w	800c97c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	f003 030f 	and.w	r3, r3, #15
 800c780:	2101      	movs	r1, #1
 800c782:	fa01 f303 	lsl.w	r3, r1, r3
 800c786:	6979      	ldr	r1, [r7, #20]
 800c788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c78c:	4313      	orrs	r3, r2
 800c78e:	634b      	str	r3, [r1, #52]	; 0x34
 800c790:	e0f4      	b.n	800c97c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d110      	bne.n	800c7c4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	0151      	lsls	r1, r2, #5
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	440a      	add	r2, r1
 800c7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	e00f      	b.n	800c7e4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	0151      	lsls	r1, r2, #5
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	440a      	add	r2, r1
 800c7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7e2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	6919      	ldr	r1, [r3, #16]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	781a      	ldrb	r2, [r3, #0]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fa94 	bl	800cd20 <USB_WritePacket>
 800c7f8:	e0c0      	b.n	800c97c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	0151      	lsls	r1, r2, #5
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	440a      	add	r2, r1
 800c810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c814:	0cdb      	lsrs	r3, r3, #19
 800c816:	04db      	lsls	r3, r3, #19
 800c818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	015a      	lsls	r2, r3, #5
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	4413      	add	r3, r2
 800c822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	0151      	lsls	r1, r2, #5
 800c82c:	697a      	ldr	r2, [r7, #20]
 800c82e:	440a      	add	r2, r1
 800c830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c83c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d123      	bne.n	800c88e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c852:	691a      	ldr	r2, [r3, #16]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c85c:	6939      	ldr	r1, [r7, #16]
 800c85e:	0148      	lsls	r0, r1, #5
 800c860:	6979      	ldr	r1, [r7, #20]
 800c862:	4401      	add	r1, r0
 800c864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c868:	4313      	orrs	r3, r2
 800c86a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	0151      	lsls	r1, r2, #5
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	440a      	add	r2, r1
 800c882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c88a:	6113      	str	r3, [r2, #16]
 800c88c:	e037      	b.n	800c8fe <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	699a      	ldr	r2, [r3, #24]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	4413      	add	r3, r2
 800c898:	1e5a      	subs	r2, r3, #1
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	89fa      	ldrh	r2, [r7, #14]
 800c8aa:	fb03 f202 	mul.w	r2, r3, r2
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	015a      	lsls	r2, r3, #5
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8be:	691a      	ldr	r2, [r3, #16]
 800c8c0:	89fb      	ldrh	r3, [r7, #14]
 800c8c2:	04d9      	lsls	r1, r3, #19
 800c8c4:	4b1c      	ldr	r3, [pc, #112]	; (800c938 <USB_EPStartXfer+0x370>)
 800c8c6:	400b      	ands	r3, r1
 800c8c8:	6939      	ldr	r1, [r7, #16]
 800c8ca:	0148      	lsls	r0, r1, #5
 800c8cc:	6979      	ldr	r1, [r7, #20]
 800c8ce:	4401      	add	r1, r0
 800c8d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	015a      	lsls	r2, r3, #5
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	4413      	add	r3, r2
 800c8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e4:	691a      	ldr	r2, [r3, #16]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8ee:	6939      	ldr	r1, [r7, #16]
 800c8f0:	0148      	lsls	r0, r1, #5
 800c8f2:	6979      	ldr	r1, [r7, #20]
 800c8f4:	4401      	add	r1, r0
 800c8f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	791b      	ldrb	r3, [r3, #4]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d12a      	bne.n	800c95c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c912:	2b00      	cmp	r3, #0
 800c914:	d112      	bne.n	800c93c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	0151      	lsls	r1, r2, #5
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	440a      	add	r2, r1
 800c92c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	e011      	b.n	800c95c <USB_EPStartXfer+0x394>
 800c938:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	0151      	lsls	r1, r2, #5
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	440a      	add	r2, r1
 800c952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c95a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	440a      	add	r2, r1
 800c972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c97a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop

0800c988 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	785b      	ldrb	r3, [r3, #1]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	f040 80ab 	bne.w	800cafc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	699b      	ldr	r3, [r3, #24]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d132      	bne.n	800ca14 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	015a      	lsls	r2, r3, #5
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	0151      	lsls	r1, r2, #5
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	440a      	add	r2, r1
 800c9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c9cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c9d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	015a      	lsls	r2, r3, #5
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	4413      	add	r3, r2
 800c9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	0151      	lsls	r1, r2, #5
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	440a      	add	r2, r1
 800c9e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	0151      	lsls	r1, r2, #5
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	440a      	add	r2, r1
 800ca08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca0c:	0cdb      	lsrs	r3, r3, #19
 800ca0e:	04db      	lsls	r3, r3, #19
 800ca10:	6113      	str	r3, [r2, #16]
 800ca12:	e04e      	b.n	800cab2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	0151      	lsls	r1, r2, #5
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	440a      	add	r2, r1
 800ca2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca2e:	0cdb      	lsrs	r3, r3, #19
 800ca30:	04db      	lsls	r3, r3, #19
 800ca32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	0151      	lsls	r1, r2, #5
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	440a      	add	r2, r1
 800ca4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	699a      	ldr	r2, [r3, #24]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d903      	bls.n	800ca6c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	0151      	lsls	r1, r2, #5
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	440a      	add	r2, r1
 800ca82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca98:	691a      	ldr	r2, [r3, #16]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caa2:	68b9      	ldr	r1, [r7, #8]
 800caa4:	0148      	lsls	r0, r1, #5
 800caa6:	68f9      	ldr	r1, [r7, #12]
 800caa8:	4401      	add	r1, r0
 800caaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800caae:	4313      	orrs	r3, r2
 800cab0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	015a      	lsls	r2, r3, #5
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4413      	add	r3, r2
 800caba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	0151      	lsls	r1, r2, #5
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	440a      	add	r2, r1
 800cac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cacc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cad0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d071      	beq.n	800cbbe <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	f003 030f 	and.w	r3, r3, #15
 800caea:	2101      	movs	r1, #1
 800caec:	fa01 f303 	lsl.w	r3, r1, r3
 800caf0:	68f9      	ldr	r1, [r7, #12]
 800caf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caf6:	4313      	orrs	r3, r2
 800caf8:	634b      	str	r3, [r1, #52]	; 0x34
 800cafa:	e060      	b.n	800cbbe <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4413      	add	r3, r2
 800cb04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	0151      	lsls	r1, r2, #5
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	440a      	add	r2, r1
 800cb12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb16:	0cdb      	lsrs	r3, r3, #19
 800cb18:	04db      	lsls	r3, r3, #19
 800cb1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	015a      	lsls	r2, r3, #5
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4413      	add	r3, r2
 800cb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	0151      	lsls	r1, r2, #5
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	440a      	add	r2, r1
 800cb32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d003      	beq.n	800cb50 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	68da      	ldr	r2, [r3, #12]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	68da      	ldr	r2, [r3, #12]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	015a      	lsls	r2, r3, #5
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	0151      	lsls	r1, r2, #5
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	440a      	add	r2, r1
 800cb6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	015a      	lsls	r2, r3, #5
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4413      	add	r3, r2
 800cb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb84:	691a      	ldr	r2, [r3, #16]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb8e:	68b9      	ldr	r1, [r7, #8]
 800cb90:	0148      	lsls	r0, r1, #5
 800cb92:	68f9      	ldr	r1, [r7, #12]
 800cb94:	4401      	add	r1, r0
 800cb96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	015a      	lsls	r2, r3, #5
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68ba      	ldr	r2, [r7, #8]
 800cbae:	0151      	lsls	r1, r2, #5
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	440a      	add	r2, r1
 800cbb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cbbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b087      	sub	sp, #28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	785b      	ldrb	r3, [r3, #1]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d14a      	bne.n	800cc80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc02:	f040 8086 	bne.w	800cd12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	015a      	lsls	r2, r3, #5
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	7812      	ldrb	r2, [r2, #0]
 800cc1a:	0151      	lsls	r1, r2, #5
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	440a      	add	r2, r1
 800cc20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	7812      	ldrb	r2, [r2, #0]
 800cc3e:	0151      	lsls	r1, r2, #5
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	440a      	add	r2, r1
 800cc44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3301      	adds	r3, #1
 800cc52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d902      	bls.n	800cc64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	75fb      	strb	r3, [r7, #23]
          break;
 800cc62:	e056      	b.n	800cd12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	015a      	lsls	r2, r3, #5
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc7c:	d0e7      	beq.n	800cc4e <USB_EPStopXfer+0x82>
 800cc7e:	e048      	b.n	800cd12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	015a      	lsls	r2, r3, #5
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	4413      	add	r3, r2
 800cc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc98:	d13b      	bne.n	800cd12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	015a      	lsls	r2, r3, #5
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	7812      	ldrb	r2, [r2, #0]
 800ccae:	0151      	lsls	r1, r2, #5
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	440a      	add	r2, r1
 800ccb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	015a      	lsls	r2, r3, #5
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	7812      	ldrb	r2, [r2, #0]
 800ccd2:	0151      	lsls	r1, r2, #5
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	440a      	add	r2, r1
 800ccd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3301      	adds	r3, #1
 800cce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f242 7210 	movw	r2, #10000	; 0x2710
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d902      	bls.n	800ccf8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	75fb      	strb	r3, [r7, #23]
          break;
 800ccf6:	e00c      	b.n	800cd12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	015a      	lsls	r2, r3, #5
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	4413      	add	r3, r2
 800cd02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd10:	d0e7      	beq.n	800cce2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	371c      	adds	r7, #28
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b089      	sub	sp, #36	; 0x24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	460b      	mov	r3, r1
 800cd30:	71fb      	strb	r3, [r7, #7]
 800cd32:	4613      	mov	r3, r2
 800cd34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800cd3e:	88bb      	ldrh	r3, [r7, #4]
 800cd40:	3303      	adds	r3, #3
 800cd42:	089b      	lsrs	r3, r3, #2
 800cd44:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800cd46:	2300      	movs	r3, #0
 800cd48:	61bb      	str	r3, [r7, #24]
 800cd4a:	e018      	b.n	800cd7e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
 800cd4e:	031a      	lsls	r2, r3, #12
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd58:	461a      	mov	r2, r3
 800cd5a:	69fb      	ldr	r3, [r7, #28]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	3301      	adds	r3, #1
 800cd64:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	3301      	adds	r3, #1
 800cd76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	61bb      	str	r3, [r7, #24]
 800cd7e:	69ba      	ldr	r2, [r7, #24]
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d3e2      	bcc.n	800cd4c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3724      	adds	r7, #36	; 0x24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b08b      	sub	sp, #44	; 0x2c
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cdaa:	88fb      	ldrh	r3, [r7, #6]
 800cdac:	089b      	lsrs	r3, r3, #2
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cdb2:	88fb      	ldrh	r3, [r7, #6]
 800cdb4:	f003 0303 	and.w	r3, r3, #3
 800cdb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cdba:	2300      	movs	r3, #0
 800cdbc:	623b      	str	r3, [r7, #32]
 800cdbe:	e014      	b.n	800cdea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	601a      	str	r2, [r3, #0]
    pDest++;
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	3301      	adds	r3, #1
 800cdd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	3301      	adds	r3, #1
 800cddc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde0:	3301      	adds	r3, #1
 800cde2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	3301      	adds	r3, #1
 800cde8:	623b      	str	r3, [r7, #32]
 800cdea:	6a3a      	ldr	r2, [r7, #32]
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d3e6      	bcc.n	800cdc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cdf2:	8bfb      	ldrh	r3, [r7, #30]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01e      	beq.n	800ce36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce02:	461a      	mov	r2, r3
 800ce04:	f107 0310 	add.w	r3, r7, #16
 800ce08:	6812      	ldr	r2, [r2, #0]
 800ce0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	fa22 f303 	lsr.w	r3, r2, r3
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	701a      	strb	r2, [r3, #0]
      i++;
 800ce1e:	6a3b      	ldr	r3, [r7, #32]
 800ce20:	3301      	adds	r3, #1
 800ce22:	623b      	str	r3, [r7, #32]
      pDest++;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	3301      	adds	r3, #1
 800ce28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ce2a:	8bfb      	ldrh	r3, [r7, #30]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ce30:	8bfb      	ldrh	r3, [r7, #30]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1ea      	bne.n	800ce0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ce36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	372c      	adds	r7, #44	; 0x2c
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	785b      	ldrb	r3, [r3, #1]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d12c      	bne.n	800ceba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	db12      	blt.n	800ce98 <USB_EPSetStall+0x54>
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00f      	beq.n	800ce98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	0151      	lsls	r1, r2, #5
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	440a      	add	r2, r1
 800ce8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	0151      	lsls	r1, r2, #5
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	440a      	add	r2, r1
 800ceae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ceb6:	6013      	str	r3, [r2, #0]
 800ceb8:	e02b      	b.n	800cf12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	015a      	lsls	r2, r3, #5
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4413      	add	r3, r2
 800cec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	db12      	blt.n	800cef2 <USB_EPSetStall+0xae>
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00f      	beq.n	800cef2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	015a      	lsls	r2, r3, #5
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	4413      	add	r3, r2
 800ceda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	0151      	lsls	r1, r2, #5
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	440a      	add	r2, r1
 800cee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cef0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	015a      	lsls	r2, r3, #5
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	4413      	add	r3, r2
 800cefa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	0151      	lsls	r1, r2, #5
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	440a      	add	r2, r1
 800cf08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	785b      	ldrb	r3, [r3, #1]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d128      	bne.n	800cf8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	015a      	lsls	r2, r3, #5
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4413      	add	r3, r2
 800cf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	0151      	lsls	r1, r2, #5
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	440a      	add	r2, r1
 800cf52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	791b      	ldrb	r3, [r3, #4]
 800cf60:	2b03      	cmp	r3, #3
 800cf62:	d003      	beq.n	800cf6c <USB_EPClearStall+0x4c>
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	791b      	ldrb	r3, [r3, #4]
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d138      	bne.n	800cfde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	015a      	lsls	r2, r3, #5
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	4413      	add	r3, r2
 800cf74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	0151      	lsls	r1, r2, #5
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	440a      	add	r2, r1
 800cf82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf8a:	6013      	str	r3, [r2, #0]
 800cf8c:	e027      	b.n	800cfde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	015a      	lsls	r2, r3, #5
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4413      	add	r3, r2
 800cf96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	0151      	lsls	r1, r2, #5
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	440a      	add	r2, r1
 800cfa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cfac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	791b      	ldrb	r3, [r3, #4]
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d003      	beq.n	800cfbe <USB_EPClearStall+0x9e>
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	791b      	ldrb	r3, [r3, #4]
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	d10f      	bne.n	800cfde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	0151      	lsls	r1, r2, #5
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	440a      	add	r2, r1
 800cfd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d00a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d00e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d020:	68f9      	ldr	r1, [r7, #12]
 800d022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d026:	4313      	orrs	r3, r2
 800d028:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d066:	f023 0302 	bic.w	r3, r3, #2
 800d06a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d07a:	b480      	push	{r7}
 800d07c:	b085      	sub	sp, #20
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d094:	f023 0303 	bic.w	r3, r3, #3
 800d098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0a8:	f043 0302 	orr.w	r3, r3, #2
 800d0ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b085      	sub	sp, #20
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fe:	69db      	ldr	r3, [r3, #28]
 800d100:	68ba      	ldr	r2, [r7, #8]
 800d102:	4013      	ands	r3, r2
 800d104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	0c1b      	lsrs	r3, r3, #16
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d116:	b480      	push	{r7}
 800d118:	b085      	sub	sp, #20
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d132:	69db      	ldr	r3, [r3, #28]
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	4013      	ands	r3, r2
 800d138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	b29b      	uxth	r3, r3
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b085      	sub	sp, #20
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	460b      	mov	r3, r1
 800d154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d15a:	78fb      	ldrb	r3, [r7, #3]
 800d15c:	015a      	lsls	r2, r3, #5
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	4413      	add	r3, r2
 800d162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d170:	695b      	ldr	r3, [r3, #20]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	4013      	ands	r3, r2
 800d176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d178:	68bb      	ldr	r3, [r7, #8]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3714      	adds	r7, #20
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d186:	b480      	push	{r7}
 800d188:	b087      	sub	sp, #28
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	460b      	mov	r3, r1
 800d190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	f003 030f 	and.w	r3, r3, #15
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1b6:	01db      	lsls	r3, r3, #7
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	015a      	lsls	r2, r3, #5
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	371c      	adds	r7, #28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b083      	sub	sp, #12
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	f003 0301 	and.w	r3, r3, #1
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b085      	sub	sp, #20
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d218:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d21c:	f023 0307 	bic.w	r3, r3, #7
 800d220:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3714      	adds	r7, #20
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	333c      	adds	r3, #60	; 0x3c
 800d256:	3304      	adds	r3, #4
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	4a1c      	ldr	r2, [pc, #112]	; (800d2d0 <USB_EP0_OutStart+0x8c>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d90a      	bls.n	800d27a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d274:	d101      	bne.n	800d27a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	e024      	b.n	800d2c4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d280:	461a      	mov	r2, r3
 800d282:	2300      	movs	r3, #0
 800d284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a8:	f043 0318 	orr.w	r3, r3, #24
 800d2ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d2c0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3714      	adds	r7, #20
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	4f54300a 	.word	0x4f54300a

0800d2d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4a13      	ldr	r2, [pc, #76]	; (800d338 <USB_CoreReset+0x64>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d901      	bls.n	800d2f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e01b      	b.n	800d32a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	daf2      	bge.n	800d2e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	f043 0201 	orr.w	r2, r3, #1
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	3301      	adds	r3, #1
 800d30e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4a09      	ldr	r2, [pc, #36]	; (800d338 <USB_CoreReset+0x64>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d901      	bls.n	800d31c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d318:	2303      	movs	r3, #3
 800d31a:	e006      	b.n	800d32a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	f003 0301 	and.w	r3, r3, #1
 800d324:	2b01      	cmp	r3, #1
 800d326:	d0f0      	beq.n	800d30a <USB_CoreReset+0x36>

  return HAL_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	00030d40 	.word	0x00030d40

0800d33c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d340:	4904      	ldr	r1, [pc, #16]	; (800d354 <MX_FATFS_Init+0x18>)
 800d342:	4805      	ldr	r0, [pc, #20]	; (800d358 <MX_FATFS_Init+0x1c>)
 800d344:	f001 fe74 	bl	800f030 <FATFS_LinkDriver>
 800d348:	4603      	mov	r3, r0
 800d34a:	461a      	mov	r2, r3
 800d34c:	4b03      	ldr	r3, [pc, #12]	; (800d35c <MX_FATFS_Init+0x20>)
 800d34e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d350:	bf00      	nop
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20000d88 	.word	0x20000d88
 800d358:	08012aa0 	.word	0x08012aa0
 800d35c:	20000d84 	.word	0x20000d84

0800d360 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d36a:	f000 f879 	bl	800d460 <BSP_SD_IsDetected>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b01      	cmp	r3, #1
 800d372:	d001      	beq.n	800d378 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d374:	2302      	movs	r3, #2
 800d376:	e012      	b.n	800d39e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d378:	480b      	ldr	r0, [pc, #44]	; (800d3a8 <BSP_SD_Init+0x48>)
 800d37a:	f7f9 fe79 	bl	8007070 <HAL_SD_Init>
 800d37e:	4603      	mov	r3, r0
 800d380:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d38c:	4806      	ldr	r0, [pc, #24]	; (800d3a8 <BSP_SD_Init+0x48>)
 800d38e:	f7fa fd45 	bl	8007e1c <HAL_SD_ConfigWideBusOperation>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d39c:	79fb      	ldrb	r3, [r7, #7]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20000420 	.word	0x20000420

0800d3ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b088      	sub	sp, #32
 800d3b0:	af02      	add	r7, sp, #8
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	68f9      	ldr	r1, [r7, #12]
 800d3c8:	4806      	ldr	r0, [pc, #24]	; (800d3e4 <BSP_SD_ReadBlocks+0x38>)
 800d3ca:	f7f9 ff79 	bl	80072c0 <HAL_SD_ReadBlocks>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000420 	.word	0x20000420

0800d3e8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	4806      	ldr	r0, [pc, #24]	; (800d420 <BSP_SD_WriteBlocks+0x38>)
 800d406:	f7fa f8ed 	bl	80075e4 <HAL_SD_WriteBlocks>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d414:	7dfb      	ldrb	r3, [r7, #23]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20000420 	.word	0x20000420

0800d424 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d428:	4805      	ldr	r0, [pc, #20]	; (800d440 <BSP_SD_GetCardState+0x1c>)
 800d42a:	f7fa fe0b 	bl	8008044 <HAL_SD_GetCardState>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b04      	cmp	r3, #4
 800d432:	bf14      	ite	ne
 800d434:	2301      	movne	r3, #1
 800d436:	2300      	moveq	r3, #0
 800d438:	b2db      	uxtb	r3, r3
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	20000420 	.word	0x20000420

0800d444 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	4803      	ldr	r0, [pc, #12]	; (800d45c <BSP_SD_GetCardInfo+0x18>)
 800d450:	f7fa fcb8 	bl	8007dc4 <HAL_SD_GetCardInfo>
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20000420 	.word	0x20000420

0800d460 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d466:	2301      	movs	r3, #1
 800d468:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d46a:	f000 f80b 	bl	800d484 <BSP_PlatformIsDetected>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d101      	bne.n	800d478 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d474:	2300      	movs	r3, #0
 800d476:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d478:	79fb      	ldrb	r3, [r7, #7]
 800d47a:	b2db      	uxtb	r3, r3
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d48a:	2301      	movs	r3, #1
 800d48c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d48e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d496:	f7f5 fd7d 	bl	8002f94 <HAL_GPIO_ReadPin>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d001      	beq.n	800d4a4 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
	...

0800d4b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <SD_CheckStatus+0x38>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d4c0:	f7ff ffb0 	bl	800d424 <BSP_SD_GetCardState>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d107      	bne.n	800d4da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d4ca:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <SD_CheckStatus+0x38>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	f023 0301 	bic.w	r3, r3, #1
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <SD_CheckStatus+0x38>)
 800d4d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d4da:	4b03      	ldr	r3, [pc, #12]	; (800d4e8 <SD_CheckStatus+0x38>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	b2db      	uxtb	r3, r3
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20000011 	.word	0x20000011

0800d4ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d4f6:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <SD_initialize+0x38>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d4fc:	f7ff ff30 	bl	800d360 <BSP_SD_Init>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d107      	bne.n	800d516 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d506:	79fb      	ldrb	r3, [r7, #7]
 800d508:	4618      	mov	r0, r3
 800d50a:	f7ff ffd1 	bl	800d4b0 <SD_CheckStatus>
 800d50e:	4603      	mov	r3, r0
 800d510:	461a      	mov	r2, r3
 800d512:	4b04      	ldr	r3, [pc, #16]	; (800d524 <SD_initialize+0x38>)
 800d514:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d516:	4b03      	ldr	r3, [pc, #12]	; (800d524 <SD_initialize+0x38>)
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	b2db      	uxtb	r3, r3
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	20000011 	.word	0x20000011

0800d528 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff ffbb 	bl	800d4b0 <SD_CheckStatus>
 800d53a:	4603      	mov	r3, r0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	607a      	str	r2, [r7, #4]
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	4603      	mov	r3, r0
 800d552:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	6879      	ldr	r1, [r7, #4]
 800d560:	68b8      	ldr	r0, [r7, #8]
 800d562:	f7ff ff23 	bl	800d3ac <BSP_SD_ReadBlocks>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d107      	bne.n	800d57c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d56c:	bf00      	nop
 800d56e:	f7ff ff59 	bl	800d424 <BSP_SD_GetCardState>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1fa      	bne.n	800d56e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b086      	sub	sp, #24
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
 800d592:	4603      	mov	r3, r0
 800d594:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d59a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	68b8      	ldr	r0, [r7, #8]
 800d5a4:	f7ff ff20 	bl	800d3e8 <BSP_SD_WriteBlocks>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d107      	bne.n	800d5be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d5ae:	bf00      	nop
 800d5b0:	f7ff ff38 	bl	800d424 <BSP_SD_GetCardState>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1fa      	bne.n	800d5b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08c      	sub	sp, #48	; 0x30
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	603a      	str	r2, [r7, #0]
 800d5d2:	71fb      	strb	r3, [r7, #7]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d5de:	4b25      	ldr	r3, [pc, #148]	; (800d674 <SD_ioctl+0xac>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <SD_ioctl+0x28>
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e03c      	b.n	800d66a <SD_ioctl+0xa2>

  switch (cmd)
 800d5f0:	79bb      	ldrb	r3, [r7, #6]
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d834      	bhi.n	800d660 <SD_ioctl+0x98>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <SD_ioctl+0x34>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d615 	.word	0x0800d615
 800d604:	0800d62d 	.word	0x0800d62d
 800d608:	0800d647 	.word	0x0800d647
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d612:	e028      	b.n	800d666 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d614:	f107 0308 	add.w	r3, r7, #8
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff ff13 	bl	800d444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d61e:	6a3a      	ldr	r2, [r7, #32]
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d62a:	e01c      	b.n	800d666 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d62c:	f107 0308 	add.w	r3, r7, #8
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff ff07 	bl	800d444 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d638:	b29a      	uxth	r2, r3
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d644:	e00f      	b.n	800d666 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d646:	f107 0308 	add.w	r3, r7, #8
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7ff fefa 	bl	800d444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	0a5a      	lsrs	r2, r3, #9
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d65e:	e002      	b.n	800d666 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d660:	2304      	movs	r3, #4
 800d662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3730      	adds	r7, #48	; 0x30
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000011 	.word	0x20000011

0800d678 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	460b      	mov	r3, r1
 800d682:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d684:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d688:	f002 faae 	bl	800fbe8 <USBD_static_malloc>
 800d68c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d105      	bne.n	800d6a0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d69c:	2302      	movs	r3, #2
 800d69e:	e066      	b.n	800d76e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	7c1b      	ldrb	r3, [r3, #16]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d119      	bne.n	800d6e4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d6b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6b4:	2202      	movs	r2, #2
 800d6b6:	2181      	movs	r1, #129	; 0x81
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f002 f8cf 	bl	800f85c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f002 f8c5 	bl	800f85c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2210      	movs	r2, #16
 800d6de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d6e2:	e016      	b.n	800d712 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d6e4:	2340      	movs	r3, #64	; 0x40
 800d6e6:	2202      	movs	r2, #2
 800d6e8:	2181      	movs	r1, #129	; 0x81
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f002 f8b6 	bl	800f85c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d6f6:	2340      	movs	r3, #64	; 0x40
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	2101      	movs	r1, #1
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f002 f8ad 	bl	800f85c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2210      	movs	r2, #16
 800d70e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d712:	2308      	movs	r3, #8
 800d714:	2203      	movs	r2, #3
 800d716:	2182      	movs	r1, #130	; 0x82
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f002 f89f 	bl	800f85c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2201      	movs	r2, #1
 800d722:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	7c1b      	ldrb	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d109      	bne.n	800d75c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d74e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d752:	2101      	movs	r1, #1
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f002 f9fb 	bl	800fb50 <USBD_LL_PrepareReceive>
 800d75a:	e007      	b.n	800d76c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d762:	2340      	movs	r3, #64	; 0x40
 800d764:	2101      	movs	r1, #1
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f002 f9f2 	bl	800fb50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b082      	sub	sp, #8
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	460b      	mov	r3, r1
 800d780:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d782:	2181      	movs	r1, #129	; 0x81
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f002 f8a7 	bl	800f8d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d790:	2101      	movs	r1, #1
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f002 f8a0 	bl	800f8d8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d7a0:	2182      	movs	r1, #130	; 0x82
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f002 f898 	bl	800f8d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00e      	beq.n	800d7e0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f002 fa16 	bl	800fc04 <USBD_static_free>
    pdev->pClassData = NULL;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
	...

0800d7ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d7fe:	2300      	movs	r3, #0
 800d800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d802:	2300      	movs	r3, #0
 800d804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d810:	2303      	movs	r3, #3
 800d812:	e0af      	b.n	800d974 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d03f      	beq.n	800d8a0 <USBD_CDC_Setup+0xb4>
 800d820:	2b20      	cmp	r3, #32
 800d822:	f040 809f 	bne.w	800d964 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	88db      	ldrh	r3, [r3, #6]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d02e      	beq.n	800d88c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	b25b      	sxtb	r3, r3
 800d834:	2b00      	cmp	r3, #0
 800d836:	da16      	bge.n	800d866 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d844:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	88d2      	ldrh	r2, [r2, #6]
 800d84a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	88db      	ldrh	r3, [r3, #6]
 800d850:	2b07      	cmp	r3, #7
 800d852:	bf28      	it	cs
 800d854:	2307      	movcs	r3, #7
 800d856:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	89fa      	ldrh	r2, [r7, #14]
 800d85c:	4619      	mov	r1, r3
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f001 fb19 	bl	800ee96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d864:	e085      	b.n	800d972 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	785a      	ldrb	r2, [r3, #1]
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	88db      	ldrh	r3, [r3, #6]
 800d874:	b2da      	uxtb	r2, r3
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d87c:	6939      	ldr	r1, [r7, #16]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	88db      	ldrh	r3, [r3, #6]
 800d882:	461a      	mov	r2, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f001 fb32 	bl	800eeee <USBD_CtlPrepareRx>
      break;
 800d88a:	e072      	b.n	800d972 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	683a      	ldr	r2, [r7, #0]
 800d896:	7850      	ldrb	r0, [r2, #1]
 800d898:	2200      	movs	r2, #0
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	4798      	blx	r3
      break;
 800d89e:	e068      	b.n	800d972 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	785b      	ldrb	r3, [r3, #1]
 800d8a4:	2b0b      	cmp	r3, #11
 800d8a6:	d852      	bhi.n	800d94e <USBD_CDC_Setup+0x162>
 800d8a8:	a201      	add	r2, pc, #4	; (adr r2, 800d8b0 <USBD_CDC_Setup+0xc4>)
 800d8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ae:	bf00      	nop
 800d8b0:	0800d8e1 	.word	0x0800d8e1
 800d8b4:	0800d95d 	.word	0x0800d95d
 800d8b8:	0800d94f 	.word	0x0800d94f
 800d8bc:	0800d94f 	.word	0x0800d94f
 800d8c0:	0800d94f 	.word	0x0800d94f
 800d8c4:	0800d94f 	.word	0x0800d94f
 800d8c8:	0800d94f 	.word	0x0800d94f
 800d8cc:	0800d94f 	.word	0x0800d94f
 800d8d0:	0800d94f 	.word	0x0800d94f
 800d8d4:	0800d94f 	.word	0x0800d94f
 800d8d8:	0800d90b 	.word	0x0800d90b
 800d8dc:	0800d935 	.word	0x0800d935
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b03      	cmp	r3, #3
 800d8ea:	d107      	bne.n	800d8fc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d8ec:	f107 030a 	add.w	r3, r7, #10
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f001 face 	bl	800ee96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d8fa:	e032      	b.n	800d962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d8fc:	6839      	ldr	r1, [r7, #0]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f001 fa58 	bl	800edb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d904:	2303      	movs	r3, #3
 800d906:	75fb      	strb	r3, [r7, #23]
          break;
 800d908:	e02b      	b.n	800d962 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b03      	cmp	r3, #3
 800d914:	d107      	bne.n	800d926 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d916:	f107 030d 	add.w	r3, r7, #13
 800d91a:	2201      	movs	r2, #1
 800d91c:	4619      	mov	r1, r3
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f001 fab9 	bl	800ee96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d924:	e01d      	b.n	800d962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 fa43 	bl	800edb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d92e:	2303      	movs	r3, #3
 800d930:	75fb      	strb	r3, [r7, #23]
          break;
 800d932:	e016      	b.n	800d962 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b03      	cmp	r3, #3
 800d93e:	d00f      	beq.n	800d960 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f001 fa36 	bl	800edb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d948:	2303      	movs	r3, #3
 800d94a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d94c:	e008      	b.n	800d960 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f001 fa2f 	bl	800edb4 <USBD_CtlError>
          ret = USBD_FAIL;
 800d956:	2303      	movs	r3, #3
 800d958:	75fb      	strb	r3, [r7, #23]
          break;
 800d95a:	e002      	b.n	800d962 <USBD_CDC_Setup+0x176>
          break;
 800d95c:	bf00      	nop
 800d95e:	e008      	b.n	800d972 <USBD_CDC_Setup+0x186>
          break;
 800d960:	bf00      	nop
      }
      break;
 800d962:	e006      	b.n	800d972 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d964:	6839      	ldr	r1, [r7, #0]
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f001 fa24 	bl	800edb4 <USBD_CtlError>
      ret = USBD_FAIL;
 800d96c:	2303      	movs	r3, #3
 800d96e:	75fb      	strb	r3, [r7, #23]
      break;
 800d970:	bf00      	nop
  }

  return (uint8_t)ret;
 800d972:	7dfb      	ldrb	r3, [r7, #23]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d98e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d996:	2b00      	cmp	r3, #0
 800d998:	d101      	bne.n	800d99e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d99a:	2303      	movs	r3, #3
 800d99c:	e04f      	b.n	800da3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d9a6:	78fa      	ldrb	r2, [r7, #3]
 800d9a8:	6879      	ldr	r1, [r7, #4]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	440b      	add	r3, r1
 800d9b4:	3318      	adds	r3, #24
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d029      	beq.n	800da10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d9bc:	78fa      	ldrb	r2, [r7, #3]
 800d9be:	6879      	ldr	r1, [r7, #4]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4413      	add	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	440b      	add	r3, r1
 800d9ca:	3318      	adds	r3, #24
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	78f9      	ldrb	r1, [r7, #3]
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	00db      	lsls	r3, r3, #3
 800d9d6:	440b      	add	r3, r1
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	4403      	add	r3, r0
 800d9dc:	3348      	adds	r3, #72	; 0x48
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d9e4:	fb01 f303 	mul.w	r3, r1, r3
 800d9e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d110      	bne.n	800da10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d9ee:	78fa      	ldrb	r2, [r7, #3]
 800d9f0:	6879      	ldr	r1, [r7, #4]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	440b      	add	r3, r1
 800d9fc:	3318      	adds	r3, #24
 800d9fe:	2200      	movs	r2, #0
 800da00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800da02:	78f9      	ldrb	r1, [r7, #3]
 800da04:	2300      	movs	r3, #0
 800da06:	2200      	movs	r2, #0
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f002 f869 	bl	800fae0 <USBD_LL_Transmit>
 800da0e:	e015      	b.n	800da3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2200      	movs	r2, #0
 800da14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00b      	beq.n	800da3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800da38:	78fa      	ldrb	r2, [r7, #3]
 800da3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b084      	sub	sp, #16
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
 800da4e:	460b      	mov	r3, r1
 800da50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da64:	2303      	movs	r3, #3
 800da66:	e015      	b.n	800da94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da68:	78fb      	ldrb	r3, [r7, #3]
 800da6a:	4619      	mov	r1, r3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f002 f8a7 	bl	800fbc0 <USBD_LL_GetRxDataSize>
 800da72:	4602      	mov	r2, r0
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800da8e:	4611      	mov	r1, r2
 800da90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dab2:	2303      	movs	r3, #3
 800dab4:	e01b      	b.n	800daee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d015      	beq.n	800daec <USBD_CDC_EP0_RxReady+0x50>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dac6:	2bff      	cmp	r3, #255	; 0xff
 800dac8:	d010      	beq.n	800daec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dad8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dae0:	b292      	uxth	r2, r2
 800dae2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	22ff      	movs	r2, #255	; 0xff
 800dae8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
	...

0800daf8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2243      	movs	r2, #67	; 0x43
 800db04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800db06:	4b03      	ldr	r3, [pc, #12]	; (800db14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800db08:	4618      	mov	r0, r3
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	2000009c 	.word	0x2000009c

0800db18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2243      	movs	r2, #67	; 0x43
 800db24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800db26:	4b03      	ldr	r3, [pc, #12]	; (800db34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800db28:	4618      	mov	r0, r3
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	20000058 	.word	0x20000058

0800db38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2243      	movs	r2, #67	; 0x43
 800db44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800db46:	4b03      	ldr	r3, [pc, #12]	; (800db54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800db48:	4618      	mov	r0, r3
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr
 800db54:	200000e0 	.word	0x200000e0

0800db58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	220a      	movs	r2, #10
 800db64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800db66:	4b03      	ldr	r3, [pc, #12]	; (800db74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800db68:	4618      	mov	r0, r3
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr
 800db74:	20000014 	.word	0x20000014

0800db78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d101      	bne.n	800db8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800db88:	2303      	movs	r3, #3
 800db8a:	e004      	b.n	800db96 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr

0800dba2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dba2:	b480      	push	{r7}
 800dba4:	b087      	sub	sp, #28
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	60b9      	str	r1, [r7, #8]
 800dbac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbb4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d101      	bne.n	800dbc0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	e008      	b.n	800dbd2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	371c      	adds	r7, #28
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr

0800dbde <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dbde:	b480      	push	{r7}
 800dbe0:	b085      	sub	sp, #20
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
 800dbe6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	e004      	b.n	800dc04 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	683a      	ldr	r2, [r7, #0]
 800dbfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3714      	adds	r7, #20
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc1e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dc20:	2301      	movs	r3, #1
 800dc22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e01a      	b.n	800dc68 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d114      	bne.n	800dc66 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dc5a:	2181      	movs	r1, #129	; 0x81
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f001 ff3f 	bl	800fae0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	e016      	b.n	800dcbc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	7c1b      	ldrb	r3, [r3, #16]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d109      	bne.n	800dcaa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dc9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dca0:	2101      	movs	r1, #1
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f001 ff54 	bl	800fb50 <USBD_LL_PrepareReceive>
 800dca8:	e007      	b.n	800dcba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcb0:	2340      	movs	r3, #64	; 0x40
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f001 ff4b 	bl	800fb50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d101      	bne.n	800dcdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dcd8:	2303      	movs	r3, #3
 800dcda:	e01f      	b.n	800dd1c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	68ba      	ldr	r2, [r7, #8]
 800dcfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	79fa      	ldrb	r2, [r7, #7]
 800dd0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f001 fd27 	bl	800f764 <USBD_LL_Init>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3718      	adds	r7, #24
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	e016      	b.n	800dd6a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00b      	beq.n	800dd68 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd58:	f107 020e 	add.w	r2, r7, #14
 800dd5c:	4610      	mov	r0, r2
 800dd5e:	4798      	blx	r3
 800dd60:	4602      	mov	r2, r0
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f001 fd3c 	bl	800f7f8 <USBD_LL_Start>
 800dd80:	4603      	mov	r3, r0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dd8a:	b480      	push	{r7}
 800dd8c:	b083      	sub	sp, #12
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ddac:	2303      	movs	r3, #3
 800ddae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d009      	beq.n	800ddce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	78fa      	ldrb	r2, [r7, #3]
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
 800ddca:	4603      	mov	r3, r0
 800ddcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ddce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d007      	beq.n	800ddfe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	78fa      	ldrb	r2, [r7, #3]
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	4798      	blx	r3
  }

  return USBD_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 ff90 	bl	800ed40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800de2e:	461a      	mov	r2, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de3c:	f003 031f 	and.w	r3, r3, #31
 800de40:	2b02      	cmp	r3, #2
 800de42:	d01a      	beq.n	800de7a <USBD_LL_SetupStage+0x72>
 800de44:	2b02      	cmp	r3, #2
 800de46:	d822      	bhi.n	800de8e <USBD_LL_SetupStage+0x86>
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <USBD_LL_SetupStage+0x4a>
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d00a      	beq.n	800de66 <USBD_LL_SetupStage+0x5e>
 800de50:	e01d      	b.n	800de8e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de58:	4619      	mov	r1, r3
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 fa62 	bl	800e324 <USBD_StdDevReq>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]
      break;
 800de64:	e020      	b.n	800dea8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 fac6 	bl	800e400 <USBD_StdItfReq>
 800de74:	4603      	mov	r3, r0
 800de76:	73fb      	strb	r3, [r7, #15]
      break;
 800de78:	e016      	b.n	800dea8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fb05 	bl	800e492 <USBD_StdEPReq>
 800de88:	4603      	mov	r3, r0
 800de8a:	73fb      	strb	r3, [r7, #15]
      break;
 800de8c:	e00c      	b.n	800dea8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f001 fd51 	bl	800f944 <USBD_LL_StallEP>
 800dea2:	4603      	mov	r3, r0
 800dea4:	73fb      	strb	r3, [r7, #15]
      break;
 800dea6:	bf00      	nop
  }

  return ret;
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b086      	sub	sp, #24
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	460b      	mov	r3, r1
 800debc:	607a      	str	r2, [r7, #4]
 800debe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dec0:	7afb      	ldrb	r3, [r7, #11]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d138      	bne.n	800df38 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800decc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ded4:	2b03      	cmp	r3, #3
 800ded6:	d14a      	bne.n	800df6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	689a      	ldr	r2, [r3, #8]
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d913      	bls.n	800df0c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	689a      	ldr	r2, [r3, #8]
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	1ad2      	subs	r2, r2, r3
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	68da      	ldr	r2, [r3, #12]
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	4293      	cmp	r3, r2
 800defc:	bf28      	it	cs
 800defe:	4613      	movcs	r3, r2
 800df00:	461a      	mov	r2, r3
 800df02:	6879      	ldr	r1, [r7, #4]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f001 f80f 	bl	800ef28 <USBD_CtlContinueRx>
 800df0a:	e030      	b.n	800df6e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b03      	cmp	r3, #3
 800df16:	d10b      	bne.n	800df30 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d005      	beq.n	800df30 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f001 f80a 	bl	800ef4a <USBD_CtlSendStatus>
 800df36:	e01a      	b.n	800df6e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b03      	cmp	r3, #3
 800df42:	d114      	bne.n	800df6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df4a:	699b      	ldr	r3, [r3, #24]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00e      	beq.n	800df6e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	7afa      	ldrb	r2, [r7, #11]
 800df5a:	4611      	mov	r1, r2
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	4798      	blx	r3
 800df60:	4603      	mov	r3, r0
 800df62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800df64:	7dfb      	ldrb	r3, [r7, #23]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	e000      	b.n	800df70 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	460b      	mov	r3, r1
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800df86:	7afb      	ldrb	r3, [r7, #11]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d16b      	bne.n	800e064 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	3314      	adds	r3, #20
 800df90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df98:	2b02      	cmp	r3, #2
 800df9a:	d156      	bne.n	800e04a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d914      	bls.n	800dfd2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	689a      	ldr	r2, [r3, #8]
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	1ad2      	subs	r2, r2, r3
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	6879      	ldr	r1, [r7, #4]
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f000 ff84 	bl	800eecc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	2100      	movs	r1, #0
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f001 fdc0 	bl	800fb50 <USBD_LL_PrepareReceive>
 800dfd0:	e03b      	b.n	800e04a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d11c      	bne.n	800e018 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	685a      	ldr	r2, [r3, #4]
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d316      	bcc.n	800e018 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	685a      	ldr	r2, [r3, #4]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d20f      	bcs.n	800e018 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dff8:	2200      	movs	r2, #0
 800dffa:	2100      	movs	r1, #0
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f000 ff65 	bl	800eecc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e00a:	2300      	movs	r3, #0
 800e00c:	2200      	movs	r2, #0
 800e00e:	2100      	movs	r1, #0
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f001 fd9d 	bl	800fb50 <USBD_LL_PrepareReceive>
 800e016:	e018      	b.n	800e04a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	2b03      	cmp	r3, #3
 800e022:	d10b      	bne.n	800e03c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e03c:	2180      	movs	r1, #128	; 0x80
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f001 fc80 	bl	800f944 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 ff93 	bl	800ef70 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e050:	2b01      	cmp	r3, #1
 800e052:	d122      	bne.n	800e09a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f7ff fe98 	bl	800dd8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e062:	e01a      	b.n	800e09a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	d114      	bne.n	800e09a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00e      	beq.n	800e09a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	7afa      	ldrb	r2, [r7, #11]
 800e086:	4611      	mov	r1, r2
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	4798      	blx	r3
 800e08c:	4603      	mov	r3, r0
 800e08e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e090:	7dfb      	ldrb	r3, [r7, #23]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e096:	7dfb      	ldrb	r3, [r7, #23]
 800e098:	e000      	b.n	800e09c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3718      	adds	r7, #24
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e02f      	b.n	800e138 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00f      	beq.n	800e102 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d009      	beq.n	800e102 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	6852      	ldr	r2, [r2, #4]
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e102:	2340      	movs	r3, #64	; 0x40
 800e104:	2200      	movs	r2, #0
 800e106:	2100      	movs	r1, #0
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f001 fba7 	bl	800f85c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2240      	movs	r2, #64	; 0x40
 800e11a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e11e:	2340      	movs	r3, #64	; 0x40
 800e120:	2200      	movs	r2, #0
 800e122:	2180      	movs	r1, #128	; 0x80
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f001 fb99 	bl	800f85c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2240      	movs	r2, #64	; 0x40
 800e134:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	460b      	mov	r3, r1
 800e14a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	78fa      	ldrb	r2, [r7, #3]
 800e150:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2204      	movs	r2, #4
 800e17a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b04      	cmp	r3, #4
 800e19e:	d106      	bne.n	800e1ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	e012      	b.n	800e1f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	2b03      	cmp	r3, #3
 800e1dc:	d10b      	bne.n	800e1f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1e4:	69db      	ldr	r3, [r3, #28]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d005      	beq.n	800e1f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1f0:	69db      	ldr	r3, [r3, #28]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	460b      	mov	r3, r1
 800e20a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e212:	2b00      	cmp	r3, #0
 800e214:	d101      	bne.n	800e21a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e216:	2303      	movs	r3, #3
 800e218:	e014      	b.n	800e244 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b03      	cmp	r3, #3
 800e224:	d10d      	bne.n	800e242 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d007      	beq.n	800e242 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	78fa      	ldrb	r2, [r7, #3]
 800e23c:	4611      	mov	r1, r2
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	460b      	mov	r3, r1
 800e256:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e262:	2303      	movs	r3, #3
 800e264:	e014      	b.n	800e290 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	2b03      	cmp	r3, #3
 800e270:	d10d      	bne.n	800e28e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d007      	beq.n	800e28e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e286:	78fa      	ldrb	r2, [r7, #3]
 800e288:	4611      	mov	r1, r2
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	370c      	adds	r7, #12
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d009      	beq.n	800e2dc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	6852      	ldr	r2, [r2, #4]
 800e2d4:	b2d2      	uxtb	r2, r2
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	4798      	blx	r3
  }

  return USBD_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	b087      	sub	sp, #28
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e304:	8a3b      	ldrh	r3, [r7, #16]
 800e306:	021b      	lsls	r3, r3, #8
 800e308:	b21a      	sxth	r2, r3
 800e30a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e30e:	4313      	orrs	r3, r2
 800e310:	b21b      	sxth	r3, r3
 800e312:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e314:	89fb      	ldrh	r3, [r7, #14]
}
 800e316:	4618      	mov	r0, r3
 800e318:	371c      	adds	r7, #28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
	...

0800e324 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e33a:	2b40      	cmp	r3, #64	; 0x40
 800e33c:	d005      	beq.n	800e34a <USBD_StdDevReq+0x26>
 800e33e:	2b40      	cmp	r3, #64	; 0x40
 800e340:	d853      	bhi.n	800e3ea <USBD_StdDevReq+0xc6>
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00b      	beq.n	800e35e <USBD_StdDevReq+0x3a>
 800e346:	2b20      	cmp	r3, #32
 800e348:	d14f      	bne.n	800e3ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	4798      	blx	r3
 800e358:	4603      	mov	r3, r0
 800e35a:	73fb      	strb	r3, [r7, #15]
      break;
 800e35c:	e04a      	b.n	800e3f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	785b      	ldrb	r3, [r3, #1]
 800e362:	2b09      	cmp	r3, #9
 800e364:	d83b      	bhi.n	800e3de <USBD_StdDevReq+0xba>
 800e366:	a201      	add	r2, pc, #4	; (adr r2, 800e36c <USBD_StdDevReq+0x48>)
 800e368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e36c:	0800e3c1 	.word	0x0800e3c1
 800e370:	0800e3d5 	.word	0x0800e3d5
 800e374:	0800e3df 	.word	0x0800e3df
 800e378:	0800e3cb 	.word	0x0800e3cb
 800e37c:	0800e3df 	.word	0x0800e3df
 800e380:	0800e39f 	.word	0x0800e39f
 800e384:	0800e395 	.word	0x0800e395
 800e388:	0800e3df 	.word	0x0800e3df
 800e38c:	0800e3b7 	.word	0x0800e3b7
 800e390:	0800e3a9 	.word	0x0800e3a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f9de 	bl	800e758 <USBD_GetDescriptor>
          break;
 800e39c:	e024      	b.n	800e3e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e39e:	6839      	ldr	r1, [r7, #0]
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 fb43 	bl	800ea2c <USBD_SetAddress>
          break;
 800e3a6:	e01f      	b.n	800e3e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fb82 	bl	800eab4 <USBD_SetConfig>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	73fb      	strb	r3, [r7, #15]
          break;
 800e3b4:	e018      	b.n	800e3e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fc21 	bl	800ec00 <USBD_GetConfig>
          break;
 800e3be:	e013      	b.n	800e3e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e3c0:	6839      	ldr	r1, [r7, #0]
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 fc52 	bl	800ec6c <USBD_GetStatus>
          break;
 800e3c8:	e00e      	b.n	800e3e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fc81 	bl	800ecd4 <USBD_SetFeature>
          break;
 800e3d2:	e009      	b.n	800e3e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fc90 	bl	800ecfc <USBD_ClrFeature>
          break;
 800e3dc:	e004      	b.n	800e3e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fce7 	bl	800edb4 <USBD_CtlError>
          break;
 800e3e6:	bf00      	nop
      }
      break;
 800e3e8:	e004      	b.n	800e3f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 fce1 	bl	800edb4 <USBD_CtlError>
      break;
 800e3f2:	bf00      	nop
  }

  return ret;
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop

0800e400 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e416:	2b40      	cmp	r3, #64	; 0x40
 800e418:	d005      	beq.n	800e426 <USBD_StdItfReq+0x26>
 800e41a:	2b40      	cmp	r3, #64	; 0x40
 800e41c:	d82f      	bhi.n	800e47e <USBD_StdItfReq+0x7e>
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <USBD_StdItfReq+0x26>
 800e422:	2b20      	cmp	r3, #32
 800e424:	d12b      	bne.n	800e47e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	3b01      	subs	r3, #1
 800e430:	2b02      	cmp	r3, #2
 800e432:	d81d      	bhi.n	800e470 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	889b      	ldrh	r3, [r3, #4]
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d813      	bhi.n	800e466 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	4798      	blx	r3
 800e44c:	4603      	mov	r3, r0
 800e44e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	88db      	ldrh	r3, [r3, #6]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d110      	bne.n	800e47a <USBD_StdItfReq+0x7a>
 800e458:	7bfb      	ldrb	r3, [r7, #15]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10d      	bne.n	800e47a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 fd73 	bl	800ef4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e464:	e009      	b.n	800e47a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e466:	6839      	ldr	r1, [r7, #0]
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 fca3 	bl	800edb4 <USBD_CtlError>
          break;
 800e46e:	e004      	b.n	800e47a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e470:	6839      	ldr	r1, [r7, #0]
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fc9e 	bl	800edb4 <USBD_CtlError>
          break;
 800e478:	e000      	b.n	800e47c <USBD_StdItfReq+0x7c>
          break;
 800e47a:	bf00      	nop
      }
      break;
 800e47c:	e004      	b.n	800e488 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 fc97 	bl	800edb4 <USBD_CtlError>
      break;
 800e486:	bf00      	nop
  }

  return ret;
 800e488:	7bfb      	ldrb	r3, [r7, #15]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b084      	sub	sp, #16
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	889b      	ldrh	r3, [r3, #4]
 800e4a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4ae:	2b40      	cmp	r3, #64	; 0x40
 800e4b0:	d007      	beq.n	800e4c2 <USBD_StdEPReq+0x30>
 800e4b2:	2b40      	cmp	r3, #64	; 0x40
 800e4b4:	f200 8145 	bhi.w	800e742 <USBD_StdEPReq+0x2b0>
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00c      	beq.n	800e4d6 <USBD_StdEPReq+0x44>
 800e4bc:	2b20      	cmp	r3, #32
 800e4be:	f040 8140 	bne.w	800e742 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	4798      	blx	r3
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e4d4:	e13a      	b.n	800e74c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	785b      	ldrb	r3, [r3, #1]
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d007      	beq.n	800e4ee <USBD_StdEPReq+0x5c>
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	f300 8129 	bgt.w	800e736 <USBD_StdEPReq+0x2a4>
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d07f      	beq.n	800e5e8 <USBD_StdEPReq+0x156>
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d03c      	beq.n	800e566 <USBD_StdEPReq+0xd4>
 800e4ec:	e123      	b.n	800e736 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d002      	beq.n	800e500 <USBD_StdEPReq+0x6e>
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d016      	beq.n	800e52c <USBD_StdEPReq+0x9a>
 800e4fe:	e02c      	b.n	800e55a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e500:	7bbb      	ldrb	r3, [r7, #14]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00d      	beq.n	800e522 <USBD_StdEPReq+0x90>
 800e506:	7bbb      	ldrb	r3, [r7, #14]
 800e508:	2b80      	cmp	r3, #128	; 0x80
 800e50a:	d00a      	beq.n	800e522 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f001 fa17 	bl	800f944 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e516:	2180      	movs	r1, #128	; 0x80
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f001 fa13 	bl	800f944 <USBD_LL_StallEP>
 800e51e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e520:	e020      	b.n	800e564 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fc45 	bl	800edb4 <USBD_CtlError>
              break;
 800e52a:	e01b      	b.n	800e564 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	885b      	ldrh	r3, [r3, #2]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10e      	bne.n	800e552 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e534:	7bbb      	ldrb	r3, [r7, #14]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <USBD_StdEPReq+0xc0>
 800e53a:	7bbb      	ldrb	r3, [r7, #14]
 800e53c:	2b80      	cmp	r3, #128	; 0x80
 800e53e:	d008      	beq.n	800e552 <USBD_StdEPReq+0xc0>
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	88db      	ldrh	r3, [r3, #6]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d104      	bne.n	800e552 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e548:	7bbb      	ldrb	r3, [r7, #14]
 800e54a:	4619      	mov	r1, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f001 f9f9 	bl	800f944 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fcf9 	bl	800ef4a <USBD_CtlSendStatus>

              break;
 800e558:	e004      	b.n	800e564 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fc29 	bl	800edb4 <USBD_CtlError>
              break;
 800e562:	bf00      	nop
          }
          break;
 800e564:	e0ec      	b.n	800e740 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d002      	beq.n	800e578 <USBD_StdEPReq+0xe6>
 800e572:	2b03      	cmp	r3, #3
 800e574:	d016      	beq.n	800e5a4 <USBD_StdEPReq+0x112>
 800e576:	e030      	b.n	800e5da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e578:	7bbb      	ldrb	r3, [r7, #14]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00d      	beq.n	800e59a <USBD_StdEPReq+0x108>
 800e57e:	7bbb      	ldrb	r3, [r7, #14]
 800e580:	2b80      	cmp	r3, #128	; 0x80
 800e582:	d00a      	beq.n	800e59a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e584:	7bbb      	ldrb	r3, [r7, #14]
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 f9db 	bl	800f944 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e58e:	2180      	movs	r1, #128	; 0x80
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f001 f9d7 	bl	800f944 <USBD_LL_StallEP>
 800e596:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e598:	e025      	b.n	800e5e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e59a:	6839      	ldr	r1, [r7, #0]
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 fc09 	bl	800edb4 <USBD_CtlError>
              break;
 800e5a2:	e020      	b.n	800e5e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	885b      	ldrh	r3, [r3, #2]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d11b      	bne.n	800e5e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e5ac:	7bbb      	ldrb	r3, [r7, #14]
 800e5ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d004      	beq.n	800e5c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e5b6:	7bbb      	ldrb	r3, [r7, #14]
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f001 f9f8 	bl	800f9b0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fcc2 	bl	800ef4a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	6839      	ldr	r1, [r7, #0]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	4798      	blx	r3
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e5d8:	e004      	b.n	800e5e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 fbe9 	bl	800edb4 <USBD_CtlError>
              break;
 800e5e2:	e000      	b.n	800e5e6 <USBD_StdEPReq+0x154>
              break;
 800e5e4:	bf00      	nop
          }
          break;
 800e5e6:	e0ab      	b.n	800e740 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d002      	beq.n	800e5fa <USBD_StdEPReq+0x168>
 800e5f4:	2b03      	cmp	r3, #3
 800e5f6:	d032      	beq.n	800e65e <USBD_StdEPReq+0x1cc>
 800e5f8:	e097      	b.n	800e72a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5fa:	7bbb      	ldrb	r3, [r7, #14]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d007      	beq.n	800e610 <USBD_StdEPReq+0x17e>
 800e600:	7bbb      	ldrb	r3, [r7, #14]
 800e602:	2b80      	cmp	r3, #128	; 0x80
 800e604:	d004      	beq.n	800e610 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fbd3 	bl	800edb4 <USBD_CtlError>
                break;
 800e60e:	e091      	b.n	800e734 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e614:	2b00      	cmp	r3, #0
 800e616:	da0b      	bge.n	800e630 <USBD_StdEPReq+0x19e>
 800e618:	7bbb      	ldrb	r3, [r7, #14]
 800e61a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e61e:	4613      	mov	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	3310      	adds	r3, #16
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	4413      	add	r3, r2
 800e62c:	3304      	adds	r3, #4
 800e62e:	e00b      	b.n	800e648 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e630:	7bbb      	ldrb	r3, [r7, #14]
 800e632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e636:	4613      	mov	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4413      	add	r3, r2
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	4413      	add	r3, r2
 800e646:	3304      	adds	r3, #4
 800e648:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2200      	movs	r2, #0
 800e64e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	2202      	movs	r2, #2
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 fc1d 	bl	800ee96 <USBD_CtlSendData>
              break;
 800e65c:	e06a      	b.n	800e734 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e65e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e662:	2b00      	cmp	r3, #0
 800e664:	da11      	bge.n	800e68a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	f003 020f 	and.w	r2, r3, #15
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	4613      	mov	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	440b      	add	r3, r1
 800e678:	3324      	adds	r3, #36	; 0x24
 800e67a:	881b      	ldrh	r3, [r3, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d117      	bne.n	800e6b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fb96 	bl	800edb4 <USBD_CtlError>
                  break;
 800e688:	e054      	b.n	800e734 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e68a:	7bbb      	ldrb	r3, [r7, #14]
 800e68c:	f003 020f 	and.w	r2, r3, #15
 800e690:	6879      	ldr	r1, [r7, #4]
 800e692:	4613      	mov	r3, r2
 800e694:	009b      	lsls	r3, r3, #2
 800e696:	4413      	add	r3, r2
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	440b      	add	r3, r1
 800e69c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d104      	bne.n	800e6b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 fb83 	bl	800edb4 <USBD_CtlError>
                  break;
 800e6ae:	e041      	b.n	800e734 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	da0b      	bge.n	800e6d0 <USBD_StdEPReq+0x23e>
 800e6b8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6be:	4613      	mov	r3, r2
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	4413      	add	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	3310      	adds	r3, #16
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	3304      	adds	r3, #4
 800e6ce:	e00b      	b.n	800e6e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6d0:	7bbb      	ldrb	r3, [r7, #14]
 800e6d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4413      	add	r3, r2
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	3304      	adds	r3, #4
 800e6e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e6ea:	7bbb      	ldrb	r3, [r7, #14]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <USBD_StdEPReq+0x264>
 800e6f0:	7bbb      	ldrb	r3, [r7, #14]
 800e6f2:	2b80      	cmp	r3, #128	; 0x80
 800e6f4:	d103      	bne.n	800e6fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	601a      	str	r2, [r3, #0]
 800e6fc:	e00e      	b.n	800e71c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e6fe:	7bbb      	ldrb	r3, [r7, #14]
 800e700:	4619      	mov	r1, r3
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f001 f98a 	bl	800fa1c <USBD_LL_IsStallEP>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d003      	beq.n	800e716 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2201      	movs	r2, #1
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	e002      	b.n	800e71c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	2200      	movs	r2, #0
 800e71a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	2202      	movs	r2, #2
 800e720:	4619      	mov	r1, r3
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fbb7 	bl	800ee96 <USBD_CtlSendData>
              break;
 800e728:	e004      	b.n	800e734 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 fb41 	bl	800edb4 <USBD_CtlError>
              break;
 800e732:	bf00      	nop
          }
          break;
 800e734:	e004      	b.n	800e740 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fb3b 	bl	800edb4 <USBD_CtlError>
          break;
 800e73e:	bf00      	nop
      }
      break;
 800e740:	e004      	b.n	800e74c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e742:	6839      	ldr	r1, [r7, #0]
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 fb35 	bl	800edb4 <USBD_CtlError>
      break;
 800e74a:	bf00      	nop
  }

  return ret;
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e762:	2300      	movs	r3, #0
 800e764:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e766:	2300      	movs	r3, #0
 800e768:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e76a:	2300      	movs	r3, #0
 800e76c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	885b      	ldrh	r3, [r3, #2]
 800e772:	0a1b      	lsrs	r3, r3, #8
 800e774:	b29b      	uxth	r3, r3
 800e776:	3b01      	subs	r3, #1
 800e778:	2b06      	cmp	r3, #6
 800e77a:	f200 8128 	bhi.w	800e9ce <USBD_GetDescriptor+0x276>
 800e77e:	a201      	add	r2, pc, #4	; (adr r2, 800e784 <USBD_GetDescriptor+0x2c>)
 800e780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e784:	0800e7a1 	.word	0x0800e7a1
 800e788:	0800e7b9 	.word	0x0800e7b9
 800e78c:	0800e7f9 	.word	0x0800e7f9
 800e790:	0800e9cf 	.word	0x0800e9cf
 800e794:	0800e9cf 	.word	0x0800e9cf
 800e798:	0800e96f 	.word	0x0800e96f
 800e79c:	0800e99b 	.word	0x0800e99b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	7c12      	ldrb	r2, [r2, #16]
 800e7ac:	f107 0108 	add.w	r1, r7, #8
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	4798      	blx	r3
 800e7b4:	60f8      	str	r0, [r7, #12]
      break;
 800e7b6:	e112      	b.n	800e9de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	7c1b      	ldrb	r3, [r3, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10d      	bne.n	800e7dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c8:	f107 0208 	add.w	r2, r7, #8
 800e7cc:	4610      	mov	r0, r2
 800e7ce:	4798      	blx	r3
 800e7d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	2202      	movs	r2, #2
 800e7d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e7da:	e100      	b.n	800e9de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e4:	f107 0208 	add.w	r2, r7, #8
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	4798      	blx	r3
 800e7ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	701a      	strb	r2, [r3, #0]
      break;
 800e7f6:	e0f2      	b.n	800e9de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	885b      	ldrh	r3, [r3, #2]
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	2b05      	cmp	r3, #5
 800e800:	f200 80ac 	bhi.w	800e95c <USBD_GetDescriptor+0x204>
 800e804:	a201      	add	r2, pc, #4	; (adr r2, 800e80c <USBD_GetDescriptor+0xb4>)
 800e806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80a:	bf00      	nop
 800e80c:	0800e825 	.word	0x0800e825
 800e810:	0800e859 	.word	0x0800e859
 800e814:	0800e88d 	.word	0x0800e88d
 800e818:	0800e8c1 	.word	0x0800e8c1
 800e81c:	0800e8f5 	.word	0x0800e8f5
 800e820:	0800e929 	.word	0x0800e929
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00b      	beq.n	800e848 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	7c12      	ldrb	r2, [r2, #16]
 800e83c:	f107 0108 	add.w	r1, r7, #8
 800e840:	4610      	mov	r0, r2
 800e842:	4798      	blx	r3
 800e844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e846:	e091      	b.n	800e96c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fab2 	bl	800edb4 <USBD_CtlError>
            err++;
 800e850:	7afb      	ldrb	r3, [r7, #11]
 800e852:	3301      	adds	r3, #1
 800e854:	72fb      	strb	r3, [r7, #11]
          break;
 800e856:	e089      	b.n	800e96c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00b      	beq.n	800e87c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	7c12      	ldrb	r2, [r2, #16]
 800e870:	f107 0108 	add.w	r1, r7, #8
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
 800e878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e87a:	e077      	b.n	800e96c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 fa98 	bl	800edb4 <USBD_CtlError>
            err++;
 800e884:	7afb      	ldrb	r3, [r7, #11]
 800e886:	3301      	adds	r3, #1
 800e888:	72fb      	strb	r3, [r7, #11]
          break;
 800e88a:	e06f      	b.n	800e96c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00b      	beq.n	800e8b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	7c12      	ldrb	r2, [r2, #16]
 800e8a4:	f107 0108 	add.w	r1, r7, #8
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	4798      	blx	r3
 800e8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8ae:	e05d      	b.n	800e96c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8b0:	6839      	ldr	r1, [r7, #0]
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 fa7e 	bl	800edb4 <USBD_CtlError>
            err++;
 800e8b8:	7afb      	ldrb	r3, [r7, #11]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e8be:	e055      	b.n	800e96c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00b      	beq.n	800e8e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	7c12      	ldrb	r2, [r2, #16]
 800e8d8:	f107 0108 	add.w	r1, r7, #8
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4798      	blx	r3
 800e8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8e2:	e043      	b.n	800e96c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 fa64 	bl	800edb4 <USBD_CtlError>
            err++;
 800e8ec:	7afb      	ldrb	r3, [r7, #11]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8f2:	e03b      	b.n	800e96c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8fa:	695b      	ldr	r3, [r3, #20]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00b      	beq.n	800e918 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e906:	695b      	ldr	r3, [r3, #20]
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	7c12      	ldrb	r2, [r2, #16]
 800e90c:	f107 0108 	add.w	r1, r7, #8
 800e910:	4610      	mov	r0, r2
 800e912:	4798      	blx	r3
 800e914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e916:	e029      	b.n	800e96c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e918:	6839      	ldr	r1, [r7, #0]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 fa4a 	bl	800edb4 <USBD_CtlError>
            err++;
 800e920:	7afb      	ldrb	r3, [r7, #11]
 800e922:	3301      	adds	r3, #1
 800e924:	72fb      	strb	r3, [r7, #11]
          break;
 800e926:	e021      	b.n	800e96c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92e:	699b      	ldr	r3, [r3, #24]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00b      	beq.n	800e94c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e93a:	699b      	ldr	r3, [r3, #24]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	7c12      	ldrb	r2, [r2, #16]
 800e940:	f107 0108 	add.w	r1, r7, #8
 800e944:	4610      	mov	r0, r2
 800e946:	4798      	blx	r3
 800e948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e94a:	e00f      	b.n	800e96c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fa30 	bl	800edb4 <USBD_CtlError>
            err++;
 800e954:	7afb      	ldrb	r3, [r7, #11]
 800e956:	3301      	adds	r3, #1
 800e958:	72fb      	strb	r3, [r7, #11]
          break;
 800e95a:	e007      	b.n	800e96c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fa28 	bl	800edb4 <USBD_CtlError>
          err++;
 800e964:	7afb      	ldrb	r3, [r7, #11]
 800e966:	3301      	adds	r3, #1
 800e968:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e96a:	bf00      	nop
      }
      break;
 800e96c:	e037      	b.n	800e9de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	7c1b      	ldrb	r3, [r3, #16]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d109      	bne.n	800e98a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97e:	f107 0208 	add.w	r2, r7, #8
 800e982:	4610      	mov	r0, r2
 800e984:	4798      	blx	r3
 800e986:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e988:	e029      	b.n	800e9de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e98a:	6839      	ldr	r1, [r7, #0]
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fa11 	bl	800edb4 <USBD_CtlError>
        err++;
 800e992:	7afb      	ldrb	r3, [r7, #11]
 800e994:	3301      	adds	r3, #1
 800e996:	72fb      	strb	r3, [r7, #11]
      break;
 800e998:	e021      	b.n	800e9de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7c1b      	ldrb	r3, [r3, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10d      	bne.n	800e9be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9aa:	f107 0208 	add.w	r2, r7, #8
 800e9ae:	4610      	mov	r0, r2
 800e9b0:	4798      	blx	r3
 800e9b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	2207      	movs	r2, #7
 800e9ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9bc:	e00f      	b.n	800e9de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e9be:	6839      	ldr	r1, [r7, #0]
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f9f7 	bl	800edb4 <USBD_CtlError>
        err++;
 800e9c6:	7afb      	ldrb	r3, [r7, #11]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e9cc:	e007      	b.n	800e9de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e9ce:	6839      	ldr	r1, [r7, #0]
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 f9ef 	bl	800edb4 <USBD_CtlError>
      err++;
 800e9d6:	7afb      	ldrb	r3, [r7, #11]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	72fb      	strb	r3, [r7, #11]
      break;
 800e9dc:	bf00      	nop
  }

  if (err != 0U)
 800e9de:	7afb      	ldrb	r3, [r7, #11]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d11e      	bne.n	800ea22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	88db      	ldrh	r3, [r3, #6]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d016      	beq.n	800ea1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e9ec:	893b      	ldrh	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00e      	beq.n	800ea10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	88da      	ldrh	r2, [r3, #6]
 800e9f6:	893b      	ldrh	r3, [r7, #8]
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	bf28      	it	cs
 800e9fc:	4613      	movcs	r3, r2
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea02:	893b      	ldrh	r3, [r7, #8]
 800ea04:	461a      	mov	r2, r3
 800ea06:	68f9      	ldr	r1, [r7, #12]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fa44 	bl	800ee96 <USBD_CtlSendData>
 800ea0e:	e009      	b.n	800ea24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ea10:	6839      	ldr	r1, [r7, #0]
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f9ce 	bl	800edb4 <USBD_CtlError>
 800ea18:	e004      	b.n	800ea24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 fa95 	bl	800ef4a <USBD_CtlSendStatus>
 800ea20:	e000      	b.n	800ea24 <USBD_GetDescriptor+0x2cc>
    return;
 800ea22:	bf00      	nop
  }
}
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop

0800ea2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	889b      	ldrh	r3, [r3, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d131      	bne.n	800eaa2 <USBD_SetAddress+0x76>
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	88db      	ldrh	r3, [r3, #6]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d12d      	bne.n	800eaa2 <USBD_SetAddress+0x76>
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	885b      	ldrh	r3, [r3, #2]
 800ea4a:	2b7f      	cmp	r3, #127	; 0x7f
 800ea4c:	d829      	bhi.n	800eaa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	885b      	ldrh	r3, [r3, #2]
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d104      	bne.n	800ea70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f9a3 	bl	800edb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea6e:	e01d      	b.n	800eaac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7bfa      	ldrb	r2, [r7, #15]
 800ea74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fff9 	bl	800fa74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fa61 	bl	800ef4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ea88:	7bfb      	ldrb	r3, [r7, #15]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d004      	beq.n	800ea98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2202      	movs	r2, #2
 800ea92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea96:	e009      	b.n	800eaac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaa0:	e004      	b.n	800eaac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 f985 	bl	800edb4 <USBD_CtlError>
  }
}
 800eaaa:	bf00      	nop
 800eaac:	bf00      	nop
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	885b      	ldrh	r3, [r3, #2]
 800eac6:	b2da      	uxtb	r2, r3
 800eac8:	4b4c      	ldr	r3, [pc, #304]	; (800ebfc <USBD_SetConfig+0x148>)
 800eaca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eacc:	4b4b      	ldr	r3, [pc, #300]	; (800ebfc <USBD_SetConfig+0x148>)
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d905      	bls.n	800eae0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f96c 	bl	800edb4 <USBD_CtlError>
    return USBD_FAIL;
 800eadc:	2303      	movs	r3, #3
 800eade:	e088      	b.n	800ebf2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	2b02      	cmp	r3, #2
 800eaea:	d002      	beq.n	800eaf2 <USBD_SetConfig+0x3e>
 800eaec:	2b03      	cmp	r3, #3
 800eaee:	d025      	beq.n	800eb3c <USBD_SetConfig+0x88>
 800eaf0:	e071      	b.n	800ebd6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eaf2:	4b42      	ldr	r3, [pc, #264]	; (800ebfc <USBD_SetConfig+0x148>)
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d01c      	beq.n	800eb34 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800eafa:	4b40      	ldr	r3, [pc, #256]	; (800ebfc <USBD_SetConfig+0x148>)
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	461a      	mov	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb04:	4b3d      	ldr	r3, [pc, #244]	; (800ebfc <USBD_SetConfig+0x148>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	4619      	mov	r1, r3
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7ff f948 	bl	800dda0 <USBD_SetClassConfig>
 800eb10:	4603      	mov	r3, r0
 800eb12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d004      	beq.n	800eb24 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 f949 	bl	800edb4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb22:	e065      	b.n	800ebf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fa10 	bl	800ef4a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2203      	movs	r2, #3
 800eb2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb32:	e05d      	b.n	800ebf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 fa08 	bl	800ef4a <USBD_CtlSendStatus>
      break;
 800eb3a:	e059      	b.n	800ebf0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eb3c:	4b2f      	ldr	r3, [pc, #188]	; (800ebfc <USBD_SetConfig+0x148>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d112      	bne.n	800eb6a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2202      	movs	r2, #2
 800eb48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb4c:	4b2b      	ldr	r3, [pc, #172]	; (800ebfc <USBD_SetConfig+0x148>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	461a      	mov	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb56:	4b29      	ldr	r3, [pc, #164]	; (800ebfc <USBD_SetConfig+0x148>)
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff f93b 	bl	800ddd8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 f9f1 	bl	800ef4a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb68:	e042      	b.n	800ebf0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800eb6a:	4b24      	ldr	r3, [pc, #144]	; (800ebfc <USBD_SetConfig+0x148>)
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d02a      	beq.n	800ebce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	4619      	mov	r1, r3
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff f929 	bl	800ddd8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eb86:	4b1d      	ldr	r3, [pc, #116]	; (800ebfc <USBD_SetConfig+0x148>)
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb90:	4b1a      	ldr	r3, [pc, #104]	; (800ebfc <USBD_SetConfig+0x148>)
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff f902 	bl	800dda0 <USBD_SetClassConfig>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00f      	beq.n	800ebc6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f903 	bl	800edb4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7ff f90e 	bl	800ddd8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2202      	movs	r2, #2
 800ebc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebc4:	e014      	b.n	800ebf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 f9bf 	bl	800ef4a <USBD_CtlSendStatus>
      break;
 800ebcc:	e010      	b.n	800ebf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f9bb 	bl	800ef4a <USBD_CtlSendStatus>
      break;
 800ebd4:	e00c      	b.n	800ebf0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ebd6:	6839      	ldr	r1, [r7, #0]
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f8eb 	bl	800edb4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebde:	4b07      	ldr	r3, [pc, #28]	; (800ebfc <USBD_SetConfig+0x148>)
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7ff f8f7 	bl	800ddd8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ebea:	2303      	movs	r3, #3
 800ebec:	73fb      	strb	r3, [r7, #15]
      break;
 800ebee:	bf00      	nop
  }

  return ret;
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20000d8c 	.word	0x20000d8c

0800ec00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	88db      	ldrh	r3, [r3, #6]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d004      	beq.n	800ec1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f8cd 	bl	800edb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec1a:	e023      	b.n	800ec64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b02      	cmp	r3, #2
 800ec26:	dc02      	bgt.n	800ec2e <USBD_GetConfig+0x2e>
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	dc03      	bgt.n	800ec34 <USBD_GetConfig+0x34>
 800ec2c:	e015      	b.n	800ec5a <USBD_GetConfig+0x5a>
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	d00b      	beq.n	800ec4a <USBD_GetConfig+0x4a>
 800ec32:	e012      	b.n	800ec5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	3308      	adds	r3, #8
 800ec3e:	2201      	movs	r2, #1
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 f927 	bl	800ee96 <USBD_CtlSendData>
        break;
 800ec48:	e00c      	b.n	800ec64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	2201      	movs	r2, #1
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f91f 	bl	800ee96 <USBD_CtlSendData>
        break;
 800ec58:	e004      	b.n	800ec64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ec5a:	6839      	ldr	r1, [r7, #0]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 f8a9 	bl	800edb4 <USBD_CtlError>
        break;
 800ec62:	bf00      	nop
}
 800ec64:	bf00      	nop
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d81e      	bhi.n	800ecc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	88db      	ldrh	r3, [r3, #6]
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d004      	beq.n	800ec96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ec8c:	6839      	ldr	r1, [r7, #0]
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 f890 	bl	800edb4 <USBD_CtlError>
        break;
 800ec94:	e01a      	b.n	800eccc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d005      	beq.n	800ecb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	68db      	ldr	r3, [r3, #12]
 800ecaa:	f043 0202 	orr.w	r2, r3, #2
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	330c      	adds	r3, #12
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f8eb 	bl	800ee96 <USBD_CtlSendData>
      break;
 800ecc0:	e004      	b.n	800eccc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 f875 	bl	800edb4 <USBD_CtlError>
      break;
 800ecca:	bf00      	nop
  }
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	885b      	ldrh	r3, [r3, #2]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d106      	bne.n	800ecf4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 f92b 	bl	800ef4a <USBD_CtlSendStatus>
  }
}
 800ecf4:	bf00      	nop
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d80b      	bhi.n	800ed2c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	885b      	ldrh	r3, [r3, #2]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d10c      	bne.n	800ed36 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f910 	bl	800ef4a <USBD_CtlSendStatus>
      }
      break;
 800ed2a:	e004      	b.n	800ed36 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ed2c:	6839      	ldr	r1, [r7, #0]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f840 	bl	800edb4 <USBD_CtlError>
      break;
 800ed34:	e000      	b.n	800ed38 <USBD_ClrFeature+0x3c>
      break;
 800ed36:	bf00      	nop
  }
}
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	781a      	ldrb	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	781a      	ldrb	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	3301      	adds	r3, #1
 800ed68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7ff fabb 	bl	800e2e6 <SWAPBYTE>
 800ed70:	4603      	mov	r3, r0
 800ed72:	461a      	mov	r2, r3
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3301      	adds	r3, #1
 800ed82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7ff faae 	bl	800e2e6 <SWAPBYTE>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	3301      	adds	r3, #1
 800ed96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7ff faa1 	bl	800e2e6 <SWAPBYTE>
 800eda4:	4603      	mov	r3, r0
 800eda6:	461a      	mov	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	80da      	strh	r2, [r3, #6]
}
 800edac:	bf00      	nop
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800edbe:	2180      	movs	r1, #128	; 0x80
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 fdbf 	bl	800f944 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800edc6:	2100      	movs	r1, #0
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 fdbb 	bl	800f944 <USBD_LL_StallEP>
}
 800edce:	bf00      	nop
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b086      	sub	sp, #24
 800edda:	af00      	add	r7, sp, #0
 800eddc:	60f8      	str	r0, [r7, #12]
 800edde:	60b9      	str	r1, [r7, #8]
 800ede0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ede2:	2300      	movs	r3, #0
 800ede4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d036      	beq.n	800ee5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800edf0:	6938      	ldr	r0, [r7, #16]
 800edf2:	f000 f836 	bl	800ee62 <USBD_GetLen>
 800edf6:	4603      	mov	r3, r0
 800edf8:	3301      	adds	r3, #1
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	005b      	lsls	r3, r3, #1
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	4413      	add	r3, r2
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	7812      	ldrb	r2, [r2, #0]
 800ee0e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee10:	7dfb      	ldrb	r3, [r7, #23]
 800ee12:	3301      	adds	r3, #1
 800ee14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	68ba      	ldr	r2, [r7, #8]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	2203      	movs	r2, #3
 800ee1e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee20:	7dfb      	ldrb	r3, [r7, #23]
 800ee22:	3301      	adds	r3, #1
 800ee24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ee26:	e013      	b.n	800ee50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	7812      	ldrb	r2, [r2, #0]
 800ee32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	3301      	adds	r3, #1
 800ee38:	613b      	str	r3, [r7, #16]
    idx++;
 800ee3a:	7dfb      	ldrb	r3, [r7, #23]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	4413      	add	r3, r2
 800ee46:	2200      	movs	r2, #0
 800ee48:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d1e7      	bne.n	800ee28 <USBD_GetString+0x52>
 800ee58:	e000      	b.n	800ee5c <USBD_GetString+0x86>
    return;
 800ee5a:	bf00      	nop
  }
}
 800ee5c:	3718      	adds	r7, #24
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee62:	b480      	push	{r7}
 800ee64:	b085      	sub	sp, #20
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ee72:	e005      	b.n	800ee80 <USBD_GetLen+0x1e>
  {
    len++;
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	3301      	adds	r3, #1
 800ee78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1f5      	bne.n	800ee74 <USBD_GetLen+0x12>
  }

  return len;
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3714      	adds	r7, #20
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr

0800ee96 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	60f8      	str	r0, [r7, #12]
 800ee9e:	60b9      	str	r1, [r7, #8]
 800eea0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2202      	movs	r2, #2
 800eea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	2100      	movs	r1, #0
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 fe0f 	bl	800fae0 <USBD_LL_Transmit>

  return USBD_OK;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	68ba      	ldr	r2, [r7, #8]
 800eedc:	2100      	movs	r1, #0
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f000 fdfe 	bl	800fae0 <USBD_LL_Transmit>

  return USBD_OK;
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b084      	sub	sp, #16
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	60f8      	str	r0, [r7, #12]
 800eef6:	60b9      	str	r1, [r7, #8]
 800eef8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2203      	movs	r2, #3
 800eefe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	2100      	movs	r1, #0
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f000 fe19 	bl	800fb50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef1e:	2300      	movs	r3, #0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	2100      	movs	r1, #0
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f000 fe08 	bl	800fb50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b082      	sub	sp, #8
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2204      	movs	r2, #4
 800ef56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	2100      	movs	r1, #0
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 fdbd 	bl	800fae0 <USBD_LL_Transmit>

  return USBD_OK;
 800ef66:	2300      	movs	r3, #0
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2205      	movs	r2, #5
 800ef7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef80:	2300      	movs	r3, #0
 800ef82:	2200      	movs	r2, #0
 800ef84:	2100      	movs	r1, #0
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 fde2 	bl	800fb50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
	...

0800ef98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b087      	sub	sp, #28
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	4613      	mov	r3, r2
 800efa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800efa6:	2301      	movs	r3, #1
 800efa8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800efae:	4b1f      	ldr	r3, [pc, #124]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efb0:	7a5b      	ldrb	r3, [r3, #9]
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d131      	bne.n	800f01c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800efb8:	4b1c      	ldr	r3, [pc, #112]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efba:	7a5b      	ldrb	r3, [r3, #9]
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	461a      	mov	r2, r3
 800efc0:	4b1a      	ldr	r3, [pc, #104]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efc2:	2100      	movs	r1, #0
 800efc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800efc6:	4b19      	ldr	r3, [pc, #100]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efc8:	7a5b      	ldrb	r3, [r3, #9]
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	4a17      	ldr	r2, [pc, #92]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	4413      	add	r3, r2
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800efd6:	4b15      	ldr	r3, [pc, #84]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efd8:	7a5b      	ldrb	r3, [r3, #9]
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	461a      	mov	r2, r3
 800efde:	4b13      	ldr	r3, [pc, #76]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efe0:	4413      	add	r3, r2
 800efe2:	79fa      	ldrb	r2, [r7, #7]
 800efe4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800efe6:	4b11      	ldr	r3, [pc, #68]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800efe8:	7a5b      	ldrb	r3, [r3, #9]
 800efea:	b2db      	uxtb	r3, r3
 800efec:	1c5a      	adds	r2, r3, #1
 800efee:	b2d1      	uxtb	r1, r2
 800eff0:	4a0e      	ldr	r2, [pc, #56]	; (800f02c <FATFS_LinkDriverEx+0x94>)
 800eff2:	7251      	strb	r1, [r2, #9]
 800eff4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eff6:	7dbb      	ldrb	r3, [r7, #22]
 800eff8:	3330      	adds	r3, #48	; 0x30
 800effa:	b2da      	uxtb	r2, r3
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	3301      	adds	r3, #1
 800f004:	223a      	movs	r2, #58	; 0x3a
 800f006:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	3302      	adds	r3, #2
 800f00c:	222f      	movs	r2, #47	; 0x2f
 800f00e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	3303      	adds	r3, #3
 800f014:	2200      	movs	r2, #0
 800f016:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f018:	2300      	movs	r3, #0
 800f01a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	371c      	adds	r7, #28
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	20000d90 	.word	0x20000d90

0800f030 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f03a:	2200      	movs	r2, #0
 800f03c:	6839      	ldr	r1, [r7, #0]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7ff ffaa 	bl	800ef98 <FATFS_LinkDriverEx>
 800f044:	4603      	mov	r3, r0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
	...

0800f050 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f054:	2200      	movs	r2, #0
 800f056:	4912      	ldr	r1, [pc, #72]	; (800f0a0 <MX_USB_DEVICE_Init+0x50>)
 800f058:	4812      	ldr	r0, [pc, #72]	; (800f0a4 <MX_USB_DEVICE_Init+0x54>)
 800f05a:	f7fe fe33 	bl	800dcc4 <USBD_Init>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f064:	f7f2 fc8c 	bl	8001980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f068:	490f      	ldr	r1, [pc, #60]	; (800f0a8 <MX_USB_DEVICE_Init+0x58>)
 800f06a:	480e      	ldr	r0, [pc, #56]	; (800f0a4 <MX_USB_DEVICE_Init+0x54>)
 800f06c:	f7fe fe5a 	bl	800dd24 <USBD_RegisterClass>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f076:	f7f2 fc83 	bl	8001980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f07a:	490c      	ldr	r1, [pc, #48]	; (800f0ac <MX_USB_DEVICE_Init+0x5c>)
 800f07c:	4809      	ldr	r0, [pc, #36]	; (800f0a4 <MX_USB_DEVICE_Init+0x54>)
 800f07e:	f7fe fd7b 	bl	800db78 <USBD_CDC_RegisterInterface>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d001      	beq.n	800f08c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f088:	f7f2 fc7a 	bl	8001980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f08c:	4805      	ldr	r0, [pc, #20]	; (800f0a4 <MX_USB_DEVICE_Init+0x54>)
 800f08e:	f7fe fe70 	bl	800dd72 <USBD_Start>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f098:	f7f2 fc72 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f09c:	bf00      	nop
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	20000138 	.word	0x20000138
 800f0a4:	20000d9c 	.word	0x20000d9c
 800f0a8:	20000020 	.word	0x20000020
 800f0ac:	20000124 	.word	0x20000124

0800f0b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	4905      	ldr	r1, [pc, #20]	; (800f0cc <CDC_Init_FS+0x1c>)
 800f0b8:	4805      	ldr	r0, [pc, #20]	; (800f0d0 <CDC_Init_FS+0x20>)
 800f0ba:	f7fe fd72 	bl	800dba2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f0be:	4905      	ldr	r1, [pc, #20]	; (800f0d4 <CDC_Init_FS+0x24>)
 800f0c0:	4803      	ldr	r0, [pc, #12]	; (800f0d0 <CDC_Init_FS+0x20>)
 800f0c2:	f7fe fd8c 	bl	800dbde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f0c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	2000186c 	.word	0x2000186c
 800f0d0:	20000d9c 	.word	0x20000d9c
 800f0d4:	2000106c 	.word	0x2000106c

0800f0d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f0dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	6039      	str	r1, [r7, #0]
 800f0f2:	71fb      	strb	r3, [r7, #7]
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f0f8:	79fb      	ldrb	r3, [r7, #7]
 800f0fa:	2b23      	cmp	r3, #35	; 0x23
 800f0fc:	d84a      	bhi.n	800f194 <CDC_Control_FS+0xac>
 800f0fe:	a201      	add	r2, pc, #4	; (adr r2, 800f104 <CDC_Control_FS+0x1c>)
 800f100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f104:	0800f195 	.word	0x0800f195
 800f108:	0800f195 	.word	0x0800f195
 800f10c:	0800f195 	.word	0x0800f195
 800f110:	0800f195 	.word	0x0800f195
 800f114:	0800f195 	.word	0x0800f195
 800f118:	0800f195 	.word	0x0800f195
 800f11c:	0800f195 	.word	0x0800f195
 800f120:	0800f195 	.word	0x0800f195
 800f124:	0800f195 	.word	0x0800f195
 800f128:	0800f195 	.word	0x0800f195
 800f12c:	0800f195 	.word	0x0800f195
 800f130:	0800f195 	.word	0x0800f195
 800f134:	0800f195 	.word	0x0800f195
 800f138:	0800f195 	.word	0x0800f195
 800f13c:	0800f195 	.word	0x0800f195
 800f140:	0800f195 	.word	0x0800f195
 800f144:	0800f195 	.word	0x0800f195
 800f148:	0800f195 	.word	0x0800f195
 800f14c:	0800f195 	.word	0x0800f195
 800f150:	0800f195 	.word	0x0800f195
 800f154:	0800f195 	.word	0x0800f195
 800f158:	0800f195 	.word	0x0800f195
 800f15c:	0800f195 	.word	0x0800f195
 800f160:	0800f195 	.word	0x0800f195
 800f164:	0800f195 	.word	0x0800f195
 800f168:	0800f195 	.word	0x0800f195
 800f16c:	0800f195 	.word	0x0800f195
 800f170:	0800f195 	.word	0x0800f195
 800f174:	0800f195 	.word	0x0800f195
 800f178:	0800f195 	.word	0x0800f195
 800f17c:	0800f195 	.word	0x0800f195
 800f180:	0800f195 	.word	0x0800f195
 800f184:	0800f195 	.word	0x0800f195
 800f188:	0800f195 	.word	0x0800f195
 800f18c:	0800f195 	.word	0x0800f195
 800f190:	0800f195 	.word	0x0800f195
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f194:	bf00      	nop
  }

  return (USBD_OK);
 800f196:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f198:	4618      	mov	r0, r3
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f1ae:	6879      	ldr	r1, [r7, #4]
 800f1b0:	4805      	ldr	r0, [pc, #20]	; (800f1c8 <CDC_Receive_FS+0x24>)
 800f1b2:	f7fe fd14 	bl	800dbde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f1b6:	4804      	ldr	r0, [pc, #16]	; (800f1c8 <CDC_Receive_FS+0x24>)
 800f1b8:	f7fe fd5a 	bl	800dc70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f1bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	20000d9c 	.word	0x20000d9c

0800f1cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f1dc:	4b0d      	ldr	r3, [pc, #52]	; (800f214 <CDC_Transmit_FS+0x48>)
 800f1de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e00b      	b.n	800f20a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f1f2:	887b      	ldrh	r3, [r7, #2]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	6879      	ldr	r1, [r7, #4]
 800f1f8:	4806      	ldr	r0, [pc, #24]	; (800f214 <CDC_Transmit_FS+0x48>)
 800f1fa:	f7fe fcd2 	bl	800dba2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f1fe:	4805      	ldr	r0, [pc, #20]	; (800f214 <CDC_Transmit_FS+0x48>)
 800f200:	f7fe fd06 	bl	800dc10 <USBD_CDC_TransmitPacket>
 800f204:	4603      	mov	r3, r0
 800f206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f208:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	20000d9c 	.word	0x20000d9c

0800f218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f218:	b480      	push	{r7}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	4613      	mov	r3, r2
 800f224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f226:	2300      	movs	r3, #0
 800f228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	371c      	adds	r7, #28
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
	...

0800f23c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	4603      	mov	r3, r0
 800f244:	6039      	str	r1, [r7, #0]
 800f246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2212      	movs	r2, #18
 800f24c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f24e:	4b03      	ldr	r3, [pc, #12]	; (800f25c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f250:	4618      	mov	r0, r3
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	20000154 	.word	0x20000154

0800f260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	4603      	mov	r3, r0
 800f268:	6039      	str	r1, [r7, #0]
 800f26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2204      	movs	r2, #4
 800f270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f272:	4b03      	ldr	r3, [pc, #12]	; (800f280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f274:	4618      	mov	r0, r3
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	20000168 	.word	0x20000168

0800f284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	6039      	str	r1, [r7, #0]
 800f28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f290:	79fb      	ldrb	r3, [r7, #7]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d105      	bne.n	800f2a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	4907      	ldr	r1, [pc, #28]	; (800f2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f29a:	4808      	ldr	r0, [pc, #32]	; (800f2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f29c:	f7ff fd9b 	bl	800edd6 <USBD_GetString>
 800f2a0:	e004      	b.n	800f2ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	4904      	ldr	r1, [pc, #16]	; (800f2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2a6:	4805      	ldr	r0, [pc, #20]	; (800f2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f2a8:	f7ff fd95 	bl	800edd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	2000206c 	.word	0x2000206c
 800f2bc:	080127e8 	.word	0x080127e8

0800f2c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	6039      	str	r1, [r7, #0]
 800f2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f2cc:	683a      	ldr	r2, [r7, #0]
 800f2ce:	4904      	ldr	r1, [pc, #16]	; (800f2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f2d0:	4804      	ldr	r0, [pc, #16]	; (800f2e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f2d2:	f7ff fd80 	bl	800edd6 <USBD_GetString>
  return USBD_StrDesc;
 800f2d6:	4b02      	ldr	r3, [pc, #8]	; (800f2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	2000206c 	.word	0x2000206c
 800f2e4:	08012800 	.word	0x08012800

0800f2e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	6039      	str	r1, [r7, #0]
 800f2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	221a      	movs	r2, #26
 800f2f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f2fa:	f000 f843 	bl	800f384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f2fe:	4b02      	ldr	r3, [pc, #8]	; (800f308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f300:	4618      	mov	r0, r3
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	2000016c 	.word	0x2000016c

0800f30c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	6039      	str	r1, [r7, #0]
 800f316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f318:	79fb      	ldrb	r3, [r7, #7]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d105      	bne.n	800f32a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	4907      	ldr	r1, [pc, #28]	; (800f340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f322:	4808      	ldr	r0, [pc, #32]	; (800f344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f324:	f7ff fd57 	bl	800edd6 <USBD_GetString>
 800f328:	e004      	b.n	800f334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f32a:	683a      	ldr	r2, [r7, #0]
 800f32c:	4904      	ldr	r1, [pc, #16]	; (800f340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f32e:	4805      	ldr	r0, [pc, #20]	; (800f344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f330:	f7ff fd51 	bl	800edd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f334:	4b02      	ldr	r3, [pc, #8]	; (800f340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f336:	4618      	mov	r0, r3
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	2000206c 	.word	0x2000206c
 800f344:	08012814 	.word	0x08012814

0800f348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	4603      	mov	r3, r0
 800f350:	6039      	str	r1, [r7, #0]
 800f352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f354:	79fb      	ldrb	r3, [r7, #7]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d105      	bne.n	800f366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f35a:	683a      	ldr	r2, [r7, #0]
 800f35c:	4907      	ldr	r1, [pc, #28]	; (800f37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f35e:	4808      	ldr	r0, [pc, #32]	; (800f380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f360:	f7ff fd39 	bl	800edd6 <USBD_GetString>
 800f364:	e004      	b.n	800f370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f366:	683a      	ldr	r2, [r7, #0]
 800f368:	4904      	ldr	r1, [pc, #16]	; (800f37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f36a:	4805      	ldr	r0, [pc, #20]	; (800f380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f36c:	f7ff fd33 	bl	800edd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f370:	4b02      	ldr	r3, [pc, #8]	; (800f37c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f372:	4618      	mov	r0, r3
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	2000206c 	.word	0x2000206c
 800f380:	08012820 	.word	0x08012820

0800f384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f38a:	4b0f      	ldr	r3, [pc, #60]	; (800f3c8 <Get_SerialNum+0x44>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f390:	4b0e      	ldr	r3, [pc, #56]	; (800f3cc <Get_SerialNum+0x48>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f396:	4b0e      	ldr	r3, [pc, #56]	; (800f3d0 <Get_SerialNum+0x4c>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d009      	beq.n	800f3be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3aa:	2208      	movs	r2, #8
 800f3ac:	4909      	ldr	r1, [pc, #36]	; (800f3d4 <Get_SerialNum+0x50>)
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	f000 f814 	bl	800f3dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f3b4:	2204      	movs	r2, #4
 800f3b6:	4908      	ldr	r1, [pc, #32]	; (800f3d8 <Get_SerialNum+0x54>)
 800f3b8:	68b8      	ldr	r0, [r7, #8]
 800f3ba:	f000 f80f 	bl	800f3dc <IntToUnicode>
  }
}
 800f3be:	bf00      	nop
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	1fff7590 	.word	0x1fff7590
 800f3cc:	1fff7594 	.word	0x1fff7594
 800f3d0:	1fff7598 	.word	0x1fff7598
 800f3d4:	2000016e 	.word	0x2000016e
 800f3d8:	2000017e 	.word	0x2000017e

0800f3dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b087      	sub	sp, #28
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	75fb      	strb	r3, [r7, #23]
 800f3f2:	e027      	b.n	800f444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	0f1b      	lsrs	r3, r3, #28
 800f3f8:	2b09      	cmp	r3, #9
 800f3fa:	d80b      	bhi.n	800f414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	0f1b      	lsrs	r3, r3, #28
 800f400:	b2da      	uxtb	r2, r3
 800f402:	7dfb      	ldrb	r3, [r7, #23]
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	4619      	mov	r1, r3
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	440b      	add	r3, r1
 800f40c:	3230      	adds	r2, #48	; 0x30
 800f40e:	b2d2      	uxtb	r2, r2
 800f410:	701a      	strb	r2, [r3, #0]
 800f412:	e00a      	b.n	800f42a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	0f1b      	lsrs	r3, r3, #28
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	7dfb      	ldrb	r3, [r7, #23]
 800f41c:	005b      	lsls	r3, r3, #1
 800f41e:	4619      	mov	r1, r3
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	440b      	add	r3, r1
 800f424:	3237      	adds	r2, #55	; 0x37
 800f426:	b2d2      	uxtb	r2, r2
 800f428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	3301      	adds	r3, #1
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	4413      	add	r3, r2
 800f43a:	2200      	movs	r2, #0
 800f43c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f43e:	7dfb      	ldrb	r3, [r7, #23]
 800f440:	3301      	adds	r3, #1
 800f442:	75fb      	strb	r3, [r7, #23]
 800f444:	7dfa      	ldrb	r2, [r7, #23]
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d3d3      	bcc.n	800f3f4 <IntToUnicode+0x18>
  }
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	371c      	adds	r7, #28
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
	...

0800f45c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b0b0      	sub	sp, #192	; 0xc0
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f464:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f468:	2200      	movs	r2, #0
 800f46a:	601a      	str	r2, [r3, #0]
 800f46c:	605a      	str	r2, [r3, #4]
 800f46e:	609a      	str	r2, [r3, #8]
 800f470:	60da      	str	r2, [r3, #12]
 800f472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f474:	f107 0318 	add.w	r3, r7, #24
 800f478:	2294      	movs	r2, #148	; 0x94
 800f47a:	2100      	movs	r1, #0
 800f47c:	4618      	mov	r0, r3
 800f47e:	f000 fc0b 	bl	800fc98 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f48a:	d163      	bne.n	800f554 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f48c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f490:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f492:	2300      	movs	r3, #0
 800f494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f498:	f107 0318 	add.w	r3, r7, #24
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f6 f89b 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f4a8:	f7f2 fa6a 	bl	8001980 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4ac:	4b2b      	ldr	r3, [pc, #172]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4b0:	4a2a      	ldr	r2, [pc, #168]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f4b2:	f043 0301 	orr.w	r3, r3, #1
 800f4b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f4b8:	4b28      	ldr	r3, [pc, #160]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4bc:	f003 0301 	and.w	r3, r3, #1
 800f4c0:	617b      	str	r3, [r7, #20]
 800f4c2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f4c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f4c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4d8:	2303      	movs	r3, #3
 800f4da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f4de:	230a      	movs	r3, #10
 800f4e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f4ee:	f7f3 fbbf 	bl	8002c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f4f2:	4b1a      	ldr	r3, [pc, #104]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4f6:	4a19      	ldr	r2, [pc, #100]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f4f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f4fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f4fe:	4b17      	ldr	r3, [pc, #92]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f506:	613b      	str	r3, [r7, #16]
 800f508:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f50a:	4b14      	ldr	r3, [pc, #80]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f512:	2b00      	cmp	r3, #0
 800f514:	d114      	bne.n	800f540 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f516:	4b11      	ldr	r3, [pc, #68]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f51a:	4a10      	ldr	r2, [pc, #64]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f51c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f520:	6593      	str	r3, [r2, #88]	; 0x58
 800f522:	4b0e      	ldr	r3, [pc, #56]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f52a:	60fb      	str	r3, [r7, #12]
 800f52c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f52e:	f7f5 f93f 	bl	80047b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f532:	4b0a      	ldr	r3, [pc, #40]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f536:	4a09      	ldr	r2, [pc, #36]	; (800f55c <HAL_PCD_MspInit+0x100>)
 800f538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f53c:	6593      	str	r3, [r2, #88]	; 0x58
 800f53e:	e001      	b.n	800f544 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f540:	f7f5 f936 	bl	80047b0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f544:	2200      	movs	r2, #0
 800f546:	2100      	movs	r1, #0
 800f548:	2043      	movs	r0, #67	; 0x43
 800f54a:	f7f3 f82c 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f54e:	2043      	movs	r0, #67	; 0x43
 800f550:	f7f3 f845 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f554:	bf00      	nop
 800f556:	37c0      	adds	r7, #192	; 0xc0
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	40021000 	.word	0x40021000

0800f560 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f574:	4619      	mov	r1, r3
 800f576:	4610      	mov	r0, r2
 800f578:	f7fe fc46 	bl	800de08 <USBD_LL_SetupStage>
}
 800f57c:	bf00      	nop
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f596:	78fa      	ldrb	r2, [r7, #3]
 800f598:	6879      	ldr	r1, [r7, #4]
 800f59a:	4613      	mov	r3, r2
 800f59c:	00db      	lsls	r3, r3, #3
 800f59e:	4413      	add	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	440b      	add	r3, r1
 800f5a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	78fb      	ldrb	r3, [r7, #3]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	f7fe fc80 	bl	800deb2 <USBD_LL_DataOutStage>
}
 800f5b2:	bf00      	nop
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
 800f5c2:	460b      	mov	r3, r1
 800f5c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f5cc:	78fa      	ldrb	r2, [r7, #3]
 800f5ce:	6879      	ldr	r1, [r7, #4]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	4413      	add	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	440b      	add	r3, r1
 800f5da:	334c      	adds	r3, #76	; 0x4c
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	78fb      	ldrb	r3, [r7, #3]
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	f7fe fcc9 	bl	800df78 <USBD_LL_DataInStage>
}
 800f5e6:	bf00      	nop
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b082      	sub	sp, #8
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fe fddd 	bl	800e1bc <USBD_LL_SOF>
}
 800f602:	bf00      	nop
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f612:	2301      	movs	r3, #1
 800f614:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	2b02      	cmp	r3, #2
 800f61c:	d001      	beq.n	800f622 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f61e:	f7f2 f9af 	bl	8001980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f628:	7bfa      	ldrb	r2, [r7, #15]
 800f62a:	4611      	mov	r1, r2
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fe fd87 	bl	800e140 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fe fd33 	bl	800e0a4 <USBD_LL_Reset>
}
 800f63e:	bf00      	nop
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
	...

0800f648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	6812      	ldr	r2, [r2, #0]
 800f65e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f662:	f043 0301 	orr.w	r3, r3, #1
 800f666:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fe fd76 	bl	800e160 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6a1b      	ldr	r3, [r3, #32]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d005      	beq.n	800f688 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f67c:	4b04      	ldr	r3, [pc, #16]	; (800f690 <HAL_PCD_SuspendCallback+0x48>)
 800f67e:	691b      	ldr	r3, [r3, #16]
 800f680:	4a03      	ldr	r2, [pc, #12]	; (800f690 <HAL_PCD_SuspendCallback+0x48>)
 800f682:	f043 0306 	orr.w	r3, r3, #6
 800f686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f688:	bf00      	nop
 800f68a:	3708      	adds	r7, #8
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	e000ed00 	.word	0xe000ed00

0800f694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	6812      	ldr	r2, [r2, #0]
 800f6aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f6ae:	f023 0301 	bic.w	r3, r3, #1
 800f6b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a1b      	ldr	r3, [r3, #32]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d007      	beq.n	800f6cc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6bc:	4b08      	ldr	r3, [pc, #32]	; (800f6e0 <HAL_PCD_ResumeCallback+0x4c>)
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	4a07      	ldr	r2, [pc, #28]	; (800f6e0 <HAL_PCD_ResumeCallback+0x4c>)
 800f6c2:	f023 0306 	bic.w	r3, r3, #6
 800f6c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f6c8:	f000 faa6 	bl	800fc18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fe fd5a 	bl	800e18c <USBD_LL_Resume>
}
 800f6d8:	bf00      	nop
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	e000ed00 	.word	0xe000ed00

0800f6e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6f6:	78fa      	ldrb	r2, [r7, #3]
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fe fda6 	bl	800e24c <USBD_LL_IsoOUTIncomplete>
}
 800f700:	bf00      	nop
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	460b      	mov	r3, r1
 800f712:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f71a:	78fa      	ldrb	r2, [r7, #3]
 800f71c:	4611      	mov	r1, r2
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fe fd6e 	bl	800e200 <USBD_LL_IsoINIncomplete>
}
 800f724:	bf00      	nop
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe fdac 	bl	800e298 <USBD_LL_DevConnected>
}
 800f740:	bf00      	nop
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f756:	4618      	mov	r0, r3
 800f758:	f7fe fda9 	bl	800e2ae <USBD_LL_DevDisconnected>
}
 800f75c:	bf00      	nop
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d139      	bne.n	800f7e8 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f774:	4a1f      	ldr	r2, [pc, #124]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4a1d      	ldr	r2, [pc, #116]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f780:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f784:	4b1b      	ldr	r3, [pc, #108]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f786:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f78a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f78c:	4b19      	ldr	r3, [pc, #100]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f78e:	2206      	movs	r2, #6
 800f790:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f792:	4b18      	ldr	r3, [pc, #96]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f794:	2202      	movs	r2, #2
 800f796:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f798:	4b16      	ldr	r3, [pc, #88]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f79e:	4b15      	ldr	r3, [pc, #84]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f7a4:	4b13      	ldr	r3, [pc, #76]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f7aa:	4b12      	ldr	r3, [pc, #72]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f7b0:	4b10      	ldr	r3, [pc, #64]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f7b6:	4b0f      	ldr	r3, [pc, #60]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f7bc:	480d      	ldr	r0, [pc, #52]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7be:	f7f3 fd67 	bl	8003290 <HAL_PCD_Init>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800f7c8:	f7f2 f8da 	bl	8001980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f7cc:	2180      	movs	r1, #128	; 0x80
 800f7ce:	4809      	ldr	r0, [pc, #36]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7d0:	f7f4 fee9 	bl	80045a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f7d4:	2240      	movs	r2, #64	; 0x40
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	4806      	ldr	r0, [pc, #24]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7da:	f7f4 fe9d 	bl	8004518 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f7de:	2280      	movs	r2, #128	; 0x80
 800f7e0:	2101      	movs	r1, #1
 800f7e2:	4804      	ldr	r0, [pc, #16]	; (800f7f4 <USBD_LL_Init+0x90>)
 800f7e4:	f7f4 fe98 	bl	8004518 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f7e8:	2300      	movs	r3, #0
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3708      	adds	r7, #8
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	2000226c 	.word	0x2000226c

0800f7f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f804:	2300      	movs	r3, #0
 800f806:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f80e:	4618      	mov	r0, r3
 800f810:	f7f3 fe62 	bl	80034d8 <HAL_PCD_Start>
 800f814:	4603      	mov	r3, r0
 800f816:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f818:	7bbb      	ldrb	r3, [r7, #14]
 800f81a:	2b03      	cmp	r3, #3
 800f81c:	d816      	bhi.n	800f84c <USBD_LL_Start+0x54>
 800f81e:	a201      	add	r2, pc, #4	; (adr r2, 800f824 <USBD_LL_Start+0x2c>)
 800f820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f824:	0800f835 	.word	0x0800f835
 800f828:	0800f83b 	.word	0x0800f83b
 800f82c:	0800f841 	.word	0x0800f841
 800f830:	0800f847 	.word	0x0800f847
    case HAL_OK :
      usb_status = USBD_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	73fb      	strb	r3, [r7, #15]
    break;
 800f838:	e00b      	b.n	800f852 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f83a:	2303      	movs	r3, #3
 800f83c:	73fb      	strb	r3, [r7, #15]
    break;
 800f83e:	e008      	b.n	800f852 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f840:	2301      	movs	r3, #1
 800f842:	73fb      	strb	r3, [r7, #15]
    break;
 800f844:	e005      	b.n	800f852 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f846:	2303      	movs	r3, #3
 800f848:	73fb      	strb	r3, [r7, #15]
    break;
 800f84a:	e002      	b.n	800f852 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f84c:	2303      	movs	r3, #3
 800f84e:	73fb      	strb	r3, [r7, #15]
    break;
 800f850:	bf00      	nop
  }
  return usb_status;
 800f852:	7bfb      	ldrb	r3, [r7, #15]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	4608      	mov	r0, r1
 800f866:	4611      	mov	r1, r2
 800f868:	461a      	mov	r2, r3
 800f86a:	4603      	mov	r3, r0
 800f86c:	70fb      	strb	r3, [r7, #3]
 800f86e:	460b      	mov	r3, r1
 800f870:	70bb      	strb	r3, [r7, #2]
 800f872:	4613      	mov	r3, r2
 800f874:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f876:	2300      	movs	r3, #0
 800f878:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f87a:	2300      	movs	r3, #0
 800f87c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f884:	78bb      	ldrb	r3, [r7, #2]
 800f886:	883a      	ldrh	r2, [r7, #0]
 800f888:	78f9      	ldrb	r1, [r7, #3]
 800f88a:	f7f4 fb0c 	bl	8003ea6 <HAL_PCD_EP_Open>
 800f88e:	4603      	mov	r3, r0
 800f890:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f892:	7bbb      	ldrb	r3, [r7, #14]
 800f894:	2b03      	cmp	r3, #3
 800f896:	d817      	bhi.n	800f8c8 <USBD_LL_OpenEP+0x6c>
 800f898:	a201      	add	r2, pc, #4	; (adr r2, 800f8a0 <USBD_LL_OpenEP+0x44>)
 800f89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f89e:	bf00      	nop
 800f8a0:	0800f8b1 	.word	0x0800f8b1
 800f8a4:	0800f8b7 	.word	0x0800f8b7
 800f8a8:	0800f8bd 	.word	0x0800f8bd
 800f8ac:	0800f8c3 	.word	0x0800f8c3
    case HAL_OK :
      usb_status = USBD_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8b4:	e00b      	b.n	800f8ce <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ba:	e008      	b.n	800f8ce <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c0:	e005      	b.n	800f8ce <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c6:	e002      	b.n	800f8ce <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f8cc:	bf00      	nop
  }
  return usb_status;
 800f8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8f2:	78fa      	ldrb	r2, [r7, #3]
 800f8f4:	4611      	mov	r1, r2
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7f4 fb3d 	bl	8003f76 <HAL_PCD_EP_Close>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f900:	7bbb      	ldrb	r3, [r7, #14]
 800f902:	2b03      	cmp	r3, #3
 800f904:	d816      	bhi.n	800f934 <USBD_LL_CloseEP+0x5c>
 800f906:	a201      	add	r2, pc, #4	; (adr r2, 800f90c <USBD_LL_CloseEP+0x34>)
 800f908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90c:	0800f91d 	.word	0x0800f91d
 800f910:	0800f923 	.word	0x0800f923
 800f914:	0800f929 	.word	0x0800f929
 800f918:	0800f92f 	.word	0x0800f92f
    case HAL_OK :
      usb_status = USBD_OK;
 800f91c:	2300      	movs	r3, #0
 800f91e:	73fb      	strb	r3, [r7, #15]
    break;
 800f920:	e00b      	b.n	800f93a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f922:	2303      	movs	r3, #3
 800f924:	73fb      	strb	r3, [r7, #15]
    break;
 800f926:	e008      	b.n	800f93a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f928:	2301      	movs	r3, #1
 800f92a:	73fb      	strb	r3, [r7, #15]
    break;
 800f92c:	e005      	b.n	800f93a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f92e:	2303      	movs	r3, #3
 800f930:	73fb      	strb	r3, [r7, #15]
    break;
 800f932:	e002      	b.n	800f93a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f934:	2303      	movs	r3, #3
 800f936:	73fb      	strb	r3, [r7, #15]
    break;
 800f938:	bf00      	nop
  }
  return usb_status;
 800f93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	460b      	mov	r3, r1
 800f94e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f950:	2300      	movs	r3, #0
 800f952:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f954:	2300      	movs	r3, #0
 800f956:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f95e:	78fa      	ldrb	r2, [r7, #3]
 800f960:	4611      	mov	r1, r2
 800f962:	4618      	mov	r0, r3
 800f964:	f7f4 fbe4 	bl	8004130 <HAL_PCD_EP_SetStall>
 800f968:	4603      	mov	r3, r0
 800f96a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f96c:	7bbb      	ldrb	r3, [r7, #14]
 800f96e:	2b03      	cmp	r3, #3
 800f970:	d816      	bhi.n	800f9a0 <USBD_LL_StallEP+0x5c>
 800f972:	a201      	add	r2, pc, #4	; (adr r2, 800f978 <USBD_LL_StallEP+0x34>)
 800f974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f978:	0800f989 	.word	0x0800f989
 800f97c:	0800f98f 	.word	0x0800f98f
 800f980:	0800f995 	.word	0x0800f995
 800f984:	0800f99b 	.word	0x0800f99b
    case HAL_OK :
      usb_status = USBD_OK;
 800f988:	2300      	movs	r3, #0
 800f98a:	73fb      	strb	r3, [r7, #15]
    break;
 800f98c:	e00b      	b.n	800f9a6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f98e:	2303      	movs	r3, #3
 800f990:	73fb      	strb	r3, [r7, #15]
    break;
 800f992:	e008      	b.n	800f9a6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f994:	2301      	movs	r3, #1
 800f996:	73fb      	strb	r3, [r7, #15]
    break;
 800f998:	e005      	b.n	800f9a6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f99a:	2303      	movs	r3, #3
 800f99c:	73fb      	strb	r3, [r7, #15]
    break;
 800f99e:	e002      	b.n	800f9a6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f9a4:	bf00      	nop
  }
  return usb_status;
 800f9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f9ca:	78fa      	ldrb	r2, [r7, #3]
 800f9cc:	4611      	mov	r1, r2
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7f4 fc10 	bl	80041f4 <HAL_PCD_EP_ClrStall>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f9d8:	7bbb      	ldrb	r3, [r7, #14]
 800f9da:	2b03      	cmp	r3, #3
 800f9dc:	d816      	bhi.n	800fa0c <USBD_LL_ClearStallEP+0x5c>
 800f9de:	a201      	add	r2, pc, #4	; (adr r2, 800f9e4 <USBD_LL_ClearStallEP+0x34>)
 800f9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e4:	0800f9f5 	.word	0x0800f9f5
 800f9e8:	0800f9fb 	.word	0x0800f9fb
 800f9ec:	0800fa01 	.word	0x0800fa01
 800f9f0:	0800fa07 	.word	0x0800fa07
    case HAL_OK :
      usb_status = USBD_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9f8:	e00b      	b.n	800fa12 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9fa:	2303      	movs	r3, #3
 800f9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f9fe:	e008      	b.n	800fa12 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa00:	2301      	movs	r3, #1
 800fa02:	73fb      	strb	r3, [r7, #15]
    break;
 800fa04:	e005      	b.n	800fa12 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa06:	2303      	movs	r3, #3
 800fa08:	73fb      	strb	r3, [r7, #15]
    break;
 800fa0a:	e002      	b.n	800fa12 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa10:	bf00      	nop
  }
  return usb_status;
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	460b      	mov	r3, r1
 800fa26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	da0b      	bge.n	800fa50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa38:	78fb      	ldrb	r3, [r7, #3]
 800fa3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa3e:	68f9      	ldr	r1, [r7, #12]
 800fa40:	4613      	mov	r3, r2
 800fa42:	00db      	lsls	r3, r3, #3
 800fa44:	4413      	add	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	440b      	add	r3, r1
 800fa4a:	333e      	adds	r3, #62	; 0x3e
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	e00b      	b.n	800fa68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa50:	78fb      	ldrb	r3, [r7, #3]
 800fa52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa56:	68f9      	ldr	r1, [r7, #12]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	00db      	lsls	r3, r3, #3
 800fa5c:	4413      	add	r3, r2
 800fa5e:	009b      	lsls	r3, r3, #2
 800fa60:	440b      	add	r3, r1
 800fa62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fa66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3714      	adds	r7, #20
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa80:	2300      	movs	r3, #0
 800fa82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa8e:	78fa      	ldrb	r2, [r7, #3]
 800fa90:	4611      	mov	r1, r2
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7f4 f9e2 	bl	8003e5c <HAL_PCD_SetAddress>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa9c:	7bbb      	ldrb	r3, [r7, #14]
 800fa9e:	2b03      	cmp	r3, #3
 800faa0:	d816      	bhi.n	800fad0 <USBD_LL_SetUSBAddress+0x5c>
 800faa2:	a201      	add	r2, pc, #4	; (adr r2, 800faa8 <USBD_LL_SetUSBAddress+0x34>)
 800faa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa8:	0800fab9 	.word	0x0800fab9
 800faac:	0800fabf 	.word	0x0800fabf
 800fab0:	0800fac5 	.word	0x0800fac5
 800fab4:	0800facb 	.word	0x0800facb
    case HAL_OK :
      usb_status = USBD_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	73fb      	strb	r3, [r7, #15]
    break;
 800fabc:	e00b      	b.n	800fad6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fabe:	2303      	movs	r3, #3
 800fac0:	73fb      	strb	r3, [r7, #15]
    break;
 800fac2:	e008      	b.n	800fad6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fac4:	2301      	movs	r3, #1
 800fac6:	73fb      	strb	r3, [r7, #15]
    break;
 800fac8:	e005      	b.n	800fad6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800faca:	2303      	movs	r3, #3
 800facc:	73fb      	strb	r3, [r7, #15]
    break;
 800face:	e002      	b.n	800fad6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fad0:	2303      	movs	r3, #3
 800fad2:	73fb      	strb	r3, [r7, #15]
    break;
 800fad4:	bf00      	nop
  }
  return usb_status;
 800fad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	607a      	str	r2, [r7, #4]
 800faea:	603b      	str	r3, [r7, #0]
 800faec:	460b      	mov	r3, r1
 800faee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf0:	2300      	movs	r3, #0
 800faf2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faf4:	2300      	movs	r3, #0
 800faf6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fafe:	7af9      	ldrb	r1, [r7, #11]
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	f7f4 fad7 	bl	80040b6 <HAL_PCD_EP_Transmit>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fb0c:	7dbb      	ldrb	r3, [r7, #22]
 800fb0e:	2b03      	cmp	r3, #3
 800fb10:	d816      	bhi.n	800fb40 <USBD_LL_Transmit+0x60>
 800fb12:	a201      	add	r2, pc, #4	; (adr r2, 800fb18 <USBD_LL_Transmit+0x38>)
 800fb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb18:	0800fb29 	.word	0x0800fb29
 800fb1c:	0800fb2f 	.word	0x0800fb2f
 800fb20:	0800fb35 	.word	0x0800fb35
 800fb24:	0800fb3b 	.word	0x0800fb3b
    case HAL_OK :
      usb_status = USBD_OK;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	75fb      	strb	r3, [r7, #23]
    break;
 800fb2c:	e00b      	b.n	800fb46 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb2e:	2303      	movs	r3, #3
 800fb30:	75fb      	strb	r3, [r7, #23]
    break;
 800fb32:	e008      	b.n	800fb46 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb34:	2301      	movs	r3, #1
 800fb36:	75fb      	strb	r3, [r7, #23]
    break;
 800fb38:	e005      	b.n	800fb46 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb3a:	2303      	movs	r3, #3
 800fb3c:	75fb      	strb	r3, [r7, #23]
    break;
 800fb3e:	e002      	b.n	800fb46 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800fb40:	2303      	movs	r3, #3
 800fb42:	75fb      	strb	r3, [r7, #23]
    break;
 800fb44:	bf00      	nop
  }
  return usb_status;
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3718      	adds	r7, #24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	607a      	str	r2, [r7, #4]
 800fb5a:	603b      	str	r3, [r7, #0]
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb60:	2300      	movs	r3, #0
 800fb62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb64:	2300      	movs	r3, #0
 800fb66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fb6e:	7af9      	ldrb	r1, [r7, #11]
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	f7f4 fa49 	bl	800400a <HAL_PCD_EP_Receive>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fb7c:	7dbb      	ldrb	r3, [r7, #22]
 800fb7e:	2b03      	cmp	r3, #3
 800fb80:	d816      	bhi.n	800fbb0 <USBD_LL_PrepareReceive+0x60>
 800fb82:	a201      	add	r2, pc, #4	; (adr r2, 800fb88 <USBD_LL_PrepareReceive+0x38>)
 800fb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb88:	0800fb99 	.word	0x0800fb99
 800fb8c:	0800fb9f 	.word	0x0800fb9f
 800fb90:	0800fba5 	.word	0x0800fba5
 800fb94:	0800fbab 	.word	0x0800fbab
    case HAL_OK :
      usb_status = USBD_OK;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	75fb      	strb	r3, [r7, #23]
    break;
 800fb9c:	e00b      	b.n	800fbb6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb9e:	2303      	movs	r3, #3
 800fba0:	75fb      	strb	r3, [r7, #23]
    break;
 800fba2:	e008      	b.n	800fbb6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fba4:	2301      	movs	r3, #1
 800fba6:	75fb      	strb	r3, [r7, #23]
    break;
 800fba8:	e005      	b.n	800fbb6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbaa:	2303      	movs	r3, #3
 800fbac:	75fb      	strb	r3, [r7, #23]
    break;
 800fbae:	e002      	b.n	800fbb6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800fbb0:	2303      	movs	r3, #3
 800fbb2:	75fb      	strb	r3, [r7, #23]
    break;
 800fbb4:	bf00      	nop
  }
  return usb_status;
 800fbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3718      	adds	r7, #24
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbd2:	78fa      	ldrb	r2, [r7, #3]
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7f4 fa55 	bl	8004086 <HAL_PCD_EP_GetRxCount>
 800fbdc:	4603      	mov	r3, r0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fbf0:	4b03      	ldr	r3, [pc, #12]	; (800fc00 <USBD_static_malloc+0x18>)
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	20002778 	.word	0x20002778

0800fc04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]

}
 800fc0c:	bf00      	nop
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fc1c:	f7f1 fb96 	bl	800134c <SystemClock_Config>
}
 800fc20:	bf00      	nop
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <__libc_init_array>:
 800fc24:	b570      	push	{r4, r5, r6, lr}
 800fc26:	4d0d      	ldr	r5, [pc, #52]	; (800fc5c <__libc_init_array+0x38>)
 800fc28:	4c0d      	ldr	r4, [pc, #52]	; (800fc60 <__libc_init_array+0x3c>)
 800fc2a:	1b64      	subs	r4, r4, r5
 800fc2c:	10a4      	asrs	r4, r4, #2
 800fc2e:	2600      	movs	r6, #0
 800fc30:	42a6      	cmp	r6, r4
 800fc32:	d109      	bne.n	800fc48 <__libc_init_array+0x24>
 800fc34:	4d0b      	ldr	r5, [pc, #44]	; (800fc64 <__libc_init_array+0x40>)
 800fc36:	4c0c      	ldr	r4, [pc, #48]	; (800fc68 <__libc_init_array+0x44>)
 800fc38:	f002 fda0 	bl	801277c <_init>
 800fc3c:	1b64      	subs	r4, r4, r5
 800fc3e:	10a4      	asrs	r4, r4, #2
 800fc40:	2600      	movs	r6, #0
 800fc42:	42a6      	cmp	r6, r4
 800fc44:	d105      	bne.n	800fc52 <__libc_init_array+0x2e>
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc4c:	4798      	blx	r3
 800fc4e:	3601      	adds	r6, #1
 800fc50:	e7ee      	b.n	800fc30 <__libc_init_array+0xc>
 800fc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc56:	4798      	blx	r3
 800fc58:	3601      	adds	r6, #1
 800fc5a:	e7f2      	b.n	800fc42 <__libc_init_array+0x1e>
 800fc5c:	08012ea0 	.word	0x08012ea0
 800fc60:	08012ea0 	.word	0x08012ea0
 800fc64:	08012ea0 	.word	0x08012ea0
 800fc68:	08012ea4 	.word	0x08012ea4

0800fc6c <malloc>:
 800fc6c:	4b02      	ldr	r3, [pc, #8]	; (800fc78 <malloc+0xc>)
 800fc6e:	4601      	mov	r1, r0
 800fc70:	6818      	ldr	r0, [r3, #0]
 800fc72:	f000 b885 	b.w	800fd80 <_malloc_r>
 800fc76:	bf00      	nop
 800fc78:	20000188 	.word	0x20000188

0800fc7c <memcpy>:
 800fc7c:	440a      	add	r2, r1
 800fc7e:	4291      	cmp	r1, r2
 800fc80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc84:	d100      	bne.n	800fc88 <memcpy+0xc>
 800fc86:	4770      	bx	lr
 800fc88:	b510      	push	{r4, lr}
 800fc8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc92:	4291      	cmp	r1, r2
 800fc94:	d1f9      	bne.n	800fc8a <memcpy+0xe>
 800fc96:	bd10      	pop	{r4, pc}

0800fc98 <memset>:
 800fc98:	4402      	add	r2, r0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d100      	bne.n	800fca2 <memset+0xa>
 800fca0:	4770      	bx	lr
 800fca2:	f803 1b01 	strb.w	r1, [r3], #1
 800fca6:	e7f9      	b.n	800fc9c <memset+0x4>

0800fca8 <_free_r>:
 800fca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcaa:	2900      	cmp	r1, #0
 800fcac:	d044      	beq.n	800fd38 <_free_r+0x90>
 800fcae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcb2:	9001      	str	r0, [sp, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f1a1 0404 	sub.w	r4, r1, #4
 800fcba:	bfb8      	it	lt
 800fcbc:	18e4      	addlt	r4, r4, r3
 800fcbe:	f001 fd1f 	bl	8011700 <__malloc_lock>
 800fcc2:	4a1e      	ldr	r2, [pc, #120]	; (800fd3c <_free_r+0x94>)
 800fcc4:	9801      	ldr	r0, [sp, #4]
 800fcc6:	6813      	ldr	r3, [r2, #0]
 800fcc8:	b933      	cbnz	r3, 800fcd8 <_free_r+0x30>
 800fcca:	6063      	str	r3, [r4, #4]
 800fccc:	6014      	str	r4, [r2, #0]
 800fcce:	b003      	add	sp, #12
 800fcd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcd4:	f001 bd1a 	b.w	801170c <__malloc_unlock>
 800fcd8:	42a3      	cmp	r3, r4
 800fcda:	d908      	bls.n	800fcee <_free_r+0x46>
 800fcdc:	6825      	ldr	r5, [r4, #0]
 800fcde:	1961      	adds	r1, r4, r5
 800fce0:	428b      	cmp	r3, r1
 800fce2:	bf01      	itttt	eq
 800fce4:	6819      	ldreq	r1, [r3, #0]
 800fce6:	685b      	ldreq	r3, [r3, #4]
 800fce8:	1949      	addeq	r1, r1, r5
 800fcea:	6021      	streq	r1, [r4, #0]
 800fcec:	e7ed      	b.n	800fcca <_free_r+0x22>
 800fcee:	461a      	mov	r2, r3
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	b10b      	cbz	r3, 800fcf8 <_free_r+0x50>
 800fcf4:	42a3      	cmp	r3, r4
 800fcf6:	d9fa      	bls.n	800fcee <_free_r+0x46>
 800fcf8:	6811      	ldr	r1, [r2, #0]
 800fcfa:	1855      	adds	r5, r2, r1
 800fcfc:	42a5      	cmp	r5, r4
 800fcfe:	d10b      	bne.n	800fd18 <_free_r+0x70>
 800fd00:	6824      	ldr	r4, [r4, #0]
 800fd02:	4421      	add	r1, r4
 800fd04:	1854      	adds	r4, r2, r1
 800fd06:	42a3      	cmp	r3, r4
 800fd08:	6011      	str	r1, [r2, #0]
 800fd0a:	d1e0      	bne.n	800fcce <_free_r+0x26>
 800fd0c:	681c      	ldr	r4, [r3, #0]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	6053      	str	r3, [r2, #4]
 800fd12:	4421      	add	r1, r4
 800fd14:	6011      	str	r1, [r2, #0]
 800fd16:	e7da      	b.n	800fcce <_free_r+0x26>
 800fd18:	d902      	bls.n	800fd20 <_free_r+0x78>
 800fd1a:	230c      	movs	r3, #12
 800fd1c:	6003      	str	r3, [r0, #0]
 800fd1e:	e7d6      	b.n	800fcce <_free_r+0x26>
 800fd20:	6825      	ldr	r5, [r4, #0]
 800fd22:	1961      	adds	r1, r4, r5
 800fd24:	428b      	cmp	r3, r1
 800fd26:	bf04      	itt	eq
 800fd28:	6819      	ldreq	r1, [r3, #0]
 800fd2a:	685b      	ldreq	r3, [r3, #4]
 800fd2c:	6063      	str	r3, [r4, #4]
 800fd2e:	bf04      	itt	eq
 800fd30:	1949      	addeq	r1, r1, r5
 800fd32:	6021      	streq	r1, [r4, #0]
 800fd34:	6054      	str	r4, [r2, #4]
 800fd36:	e7ca      	b.n	800fcce <_free_r+0x26>
 800fd38:	b003      	add	sp, #12
 800fd3a:	bd30      	pop	{r4, r5, pc}
 800fd3c:	20002998 	.word	0x20002998

0800fd40 <sbrk_aligned>:
 800fd40:	b570      	push	{r4, r5, r6, lr}
 800fd42:	4e0e      	ldr	r6, [pc, #56]	; (800fd7c <sbrk_aligned+0x3c>)
 800fd44:	460c      	mov	r4, r1
 800fd46:	6831      	ldr	r1, [r6, #0]
 800fd48:	4605      	mov	r5, r0
 800fd4a:	b911      	cbnz	r1, 800fd52 <sbrk_aligned+0x12>
 800fd4c:	f000 fd0e 	bl	801076c <_sbrk_r>
 800fd50:	6030      	str	r0, [r6, #0]
 800fd52:	4621      	mov	r1, r4
 800fd54:	4628      	mov	r0, r5
 800fd56:	f000 fd09 	bl	801076c <_sbrk_r>
 800fd5a:	1c43      	adds	r3, r0, #1
 800fd5c:	d00a      	beq.n	800fd74 <sbrk_aligned+0x34>
 800fd5e:	1cc4      	adds	r4, r0, #3
 800fd60:	f024 0403 	bic.w	r4, r4, #3
 800fd64:	42a0      	cmp	r0, r4
 800fd66:	d007      	beq.n	800fd78 <sbrk_aligned+0x38>
 800fd68:	1a21      	subs	r1, r4, r0
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f000 fcfe 	bl	801076c <_sbrk_r>
 800fd70:	3001      	adds	r0, #1
 800fd72:	d101      	bne.n	800fd78 <sbrk_aligned+0x38>
 800fd74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd78:	4620      	mov	r0, r4
 800fd7a:	bd70      	pop	{r4, r5, r6, pc}
 800fd7c:	2000299c 	.word	0x2000299c

0800fd80 <_malloc_r>:
 800fd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd84:	1ccd      	adds	r5, r1, #3
 800fd86:	f025 0503 	bic.w	r5, r5, #3
 800fd8a:	3508      	adds	r5, #8
 800fd8c:	2d0c      	cmp	r5, #12
 800fd8e:	bf38      	it	cc
 800fd90:	250c      	movcc	r5, #12
 800fd92:	2d00      	cmp	r5, #0
 800fd94:	4607      	mov	r7, r0
 800fd96:	db01      	blt.n	800fd9c <_malloc_r+0x1c>
 800fd98:	42a9      	cmp	r1, r5
 800fd9a:	d905      	bls.n	800fda8 <_malloc_r+0x28>
 800fd9c:	230c      	movs	r3, #12
 800fd9e:	603b      	str	r3, [r7, #0]
 800fda0:	2600      	movs	r6, #0
 800fda2:	4630      	mov	r0, r6
 800fda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda8:	4e2e      	ldr	r6, [pc, #184]	; (800fe64 <_malloc_r+0xe4>)
 800fdaa:	f001 fca9 	bl	8011700 <__malloc_lock>
 800fdae:	6833      	ldr	r3, [r6, #0]
 800fdb0:	461c      	mov	r4, r3
 800fdb2:	bb34      	cbnz	r4, 800fe02 <_malloc_r+0x82>
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	4638      	mov	r0, r7
 800fdb8:	f7ff ffc2 	bl	800fd40 <sbrk_aligned>
 800fdbc:	1c43      	adds	r3, r0, #1
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	d14d      	bne.n	800fe5e <_malloc_r+0xde>
 800fdc2:	6834      	ldr	r4, [r6, #0]
 800fdc4:	4626      	mov	r6, r4
 800fdc6:	2e00      	cmp	r6, #0
 800fdc8:	d140      	bne.n	800fe4c <_malloc_r+0xcc>
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	4631      	mov	r1, r6
 800fdce:	4638      	mov	r0, r7
 800fdd0:	eb04 0803 	add.w	r8, r4, r3
 800fdd4:	f000 fcca 	bl	801076c <_sbrk_r>
 800fdd8:	4580      	cmp	r8, r0
 800fdda:	d13a      	bne.n	800fe52 <_malloc_r+0xd2>
 800fddc:	6821      	ldr	r1, [r4, #0]
 800fdde:	3503      	adds	r5, #3
 800fde0:	1a6d      	subs	r5, r5, r1
 800fde2:	f025 0503 	bic.w	r5, r5, #3
 800fde6:	3508      	adds	r5, #8
 800fde8:	2d0c      	cmp	r5, #12
 800fdea:	bf38      	it	cc
 800fdec:	250c      	movcc	r5, #12
 800fdee:	4629      	mov	r1, r5
 800fdf0:	4638      	mov	r0, r7
 800fdf2:	f7ff ffa5 	bl	800fd40 <sbrk_aligned>
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	d02b      	beq.n	800fe52 <_malloc_r+0xd2>
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	442b      	add	r3, r5
 800fdfe:	6023      	str	r3, [r4, #0]
 800fe00:	e00e      	b.n	800fe20 <_malloc_r+0xa0>
 800fe02:	6822      	ldr	r2, [r4, #0]
 800fe04:	1b52      	subs	r2, r2, r5
 800fe06:	d41e      	bmi.n	800fe46 <_malloc_r+0xc6>
 800fe08:	2a0b      	cmp	r2, #11
 800fe0a:	d916      	bls.n	800fe3a <_malloc_r+0xba>
 800fe0c:	1961      	adds	r1, r4, r5
 800fe0e:	42a3      	cmp	r3, r4
 800fe10:	6025      	str	r5, [r4, #0]
 800fe12:	bf18      	it	ne
 800fe14:	6059      	strne	r1, [r3, #4]
 800fe16:	6863      	ldr	r3, [r4, #4]
 800fe18:	bf08      	it	eq
 800fe1a:	6031      	streq	r1, [r6, #0]
 800fe1c:	5162      	str	r2, [r4, r5]
 800fe1e:	604b      	str	r3, [r1, #4]
 800fe20:	4638      	mov	r0, r7
 800fe22:	f104 060b 	add.w	r6, r4, #11
 800fe26:	f001 fc71 	bl	801170c <__malloc_unlock>
 800fe2a:	f026 0607 	bic.w	r6, r6, #7
 800fe2e:	1d23      	adds	r3, r4, #4
 800fe30:	1af2      	subs	r2, r6, r3
 800fe32:	d0b6      	beq.n	800fda2 <_malloc_r+0x22>
 800fe34:	1b9b      	subs	r3, r3, r6
 800fe36:	50a3      	str	r3, [r4, r2]
 800fe38:	e7b3      	b.n	800fda2 <_malloc_r+0x22>
 800fe3a:	6862      	ldr	r2, [r4, #4]
 800fe3c:	42a3      	cmp	r3, r4
 800fe3e:	bf0c      	ite	eq
 800fe40:	6032      	streq	r2, [r6, #0]
 800fe42:	605a      	strne	r2, [r3, #4]
 800fe44:	e7ec      	b.n	800fe20 <_malloc_r+0xa0>
 800fe46:	4623      	mov	r3, r4
 800fe48:	6864      	ldr	r4, [r4, #4]
 800fe4a:	e7b2      	b.n	800fdb2 <_malloc_r+0x32>
 800fe4c:	4634      	mov	r4, r6
 800fe4e:	6876      	ldr	r6, [r6, #4]
 800fe50:	e7b9      	b.n	800fdc6 <_malloc_r+0x46>
 800fe52:	230c      	movs	r3, #12
 800fe54:	603b      	str	r3, [r7, #0]
 800fe56:	4638      	mov	r0, r7
 800fe58:	f001 fc58 	bl	801170c <__malloc_unlock>
 800fe5c:	e7a1      	b.n	800fda2 <_malloc_r+0x22>
 800fe5e:	6025      	str	r5, [r4, #0]
 800fe60:	e7de      	b.n	800fe20 <_malloc_r+0xa0>
 800fe62:	bf00      	nop
 800fe64:	20002998 	.word	0x20002998

0800fe68 <__cvt>:
 800fe68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe6c:	ec55 4b10 	vmov	r4, r5, d0
 800fe70:	2d00      	cmp	r5, #0
 800fe72:	460e      	mov	r6, r1
 800fe74:	4619      	mov	r1, r3
 800fe76:	462b      	mov	r3, r5
 800fe78:	bfbb      	ittet	lt
 800fe7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fe7e:	461d      	movlt	r5, r3
 800fe80:	2300      	movge	r3, #0
 800fe82:	232d      	movlt	r3, #45	; 0x2d
 800fe84:	700b      	strb	r3, [r1, #0]
 800fe86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fe8c:	4691      	mov	r9, r2
 800fe8e:	f023 0820 	bic.w	r8, r3, #32
 800fe92:	bfbc      	itt	lt
 800fe94:	4622      	movlt	r2, r4
 800fe96:	4614      	movlt	r4, r2
 800fe98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe9c:	d005      	beq.n	800feaa <__cvt+0x42>
 800fe9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fea2:	d100      	bne.n	800fea6 <__cvt+0x3e>
 800fea4:	3601      	adds	r6, #1
 800fea6:	2102      	movs	r1, #2
 800fea8:	e000      	b.n	800feac <__cvt+0x44>
 800feaa:	2103      	movs	r1, #3
 800feac:	ab03      	add	r3, sp, #12
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	ab02      	add	r3, sp, #8
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	ec45 4b10 	vmov	d0, r4, r5
 800feb8:	4653      	mov	r3, sl
 800feba:	4632      	mov	r2, r6
 800febc:	f000 fd10 	bl	80108e0 <_dtoa_r>
 800fec0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fec4:	4607      	mov	r7, r0
 800fec6:	d102      	bne.n	800fece <__cvt+0x66>
 800fec8:	f019 0f01 	tst.w	r9, #1
 800fecc:	d022      	beq.n	800ff14 <__cvt+0xac>
 800fece:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fed2:	eb07 0906 	add.w	r9, r7, r6
 800fed6:	d110      	bne.n	800fefa <__cvt+0x92>
 800fed8:	783b      	ldrb	r3, [r7, #0]
 800feda:	2b30      	cmp	r3, #48	; 0x30
 800fedc:	d10a      	bne.n	800fef4 <__cvt+0x8c>
 800fede:	2200      	movs	r2, #0
 800fee0:	2300      	movs	r3, #0
 800fee2:	4620      	mov	r0, r4
 800fee4:	4629      	mov	r1, r5
 800fee6:	f7f0 fe07 	bl	8000af8 <__aeabi_dcmpeq>
 800feea:	b918      	cbnz	r0, 800fef4 <__cvt+0x8c>
 800feec:	f1c6 0601 	rsb	r6, r6, #1
 800fef0:	f8ca 6000 	str.w	r6, [sl]
 800fef4:	f8da 3000 	ldr.w	r3, [sl]
 800fef8:	4499      	add	r9, r3
 800fefa:	2200      	movs	r2, #0
 800fefc:	2300      	movs	r3, #0
 800fefe:	4620      	mov	r0, r4
 800ff00:	4629      	mov	r1, r5
 800ff02:	f7f0 fdf9 	bl	8000af8 <__aeabi_dcmpeq>
 800ff06:	b108      	cbz	r0, 800ff0c <__cvt+0xa4>
 800ff08:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff0c:	2230      	movs	r2, #48	; 0x30
 800ff0e:	9b03      	ldr	r3, [sp, #12]
 800ff10:	454b      	cmp	r3, r9
 800ff12:	d307      	bcc.n	800ff24 <__cvt+0xbc>
 800ff14:	9b03      	ldr	r3, [sp, #12]
 800ff16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff18:	1bdb      	subs	r3, r3, r7
 800ff1a:	4638      	mov	r0, r7
 800ff1c:	6013      	str	r3, [r2, #0]
 800ff1e:	b004      	add	sp, #16
 800ff20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff24:	1c59      	adds	r1, r3, #1
 800ff26:	9103      	str	r1, [sp, #12]
 800ff28:	701a      	strb	r2, [r3, #0]
 800ff2a:	e7f0      	b.n	800ff0e <__cvt+0xa6>

0800ff2c <__exponent>:
 800ff2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2900      	cmp	r1, #0
 800ff32:	bfb8      	it	lt
 800ff34:	4249      	neglt	r1, r1
 800ff36:	f803 2b02 	strb.w	r2, [r3], #2
 800ff3a:	bfb4      	ite	lt
 800ff3c:	222d      	movlt	r2, #45	; 0x2d
 800ff3e:	222b      	movge	r2, #43	; 0x2b
 800ff40:	2909      	cmp	r1, #9
 800ff42:	7042      	strb	r2, [r0, #1]
 800ff44:	dd2a      	ble.n	800ff9c <__exponent+0x70>
 800ff46:	f10d 0407 	add.w	r4, sp, #7
 800ff4a:	46a4      	mov	ip, r4
 800ff4c:	270a      	movs	r7, #10
 800ff4e:	46a6      	mov	lr, r4
 800ff50:	460a      	mov	r2, r1
 800ff52:	fb91 f6f7 	sdiv	r6, r1, r7
 800ff56:	fb07 1516 	mls	r5, r7, r6, r1
 800ff5a:	3530      	adds	r5, #48	; 0x30
 800ff5c:	2a63      	cmp	r2, #99	; 0x63
 800ff5e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ff62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ff66:	4631      	mov	r1, r6
 800ff68:	dcf1      	bgt.n	800ff4e <__exponent+0x22>
 800ff6a:	3130      	adds	r1, #48	; 0x30
 800ff6c:	f1ae 0502 	sub.w	r5, lr, #2
 800ff70:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ff74:	1c44      	adds	r4, r0, #1
 800ff76:	4629      	mov	r1, r5
 800ff78:	4561      	cmp	r1, ip
 800ff7a:	d30a      	bcc.n	800ff92 <__exponent+0x66>
 800ff7c:	f10d 0209 	add.w	r2, sp, #9
 800ff80:	eba2 020e 	sub.w	r2, r2, lr
 800ff84:	4565      	cmp	r5, ip
 800ff86:	bf88      	it	hi
 800ff88:	2200      	movhi	r2, #0
 800ff8a:	4413      	add	r3, r2
 800ff8c:	1a18      	subs	r0, r3, r0
 800ff8e:	b003      	add	sp, #12
 800ff90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff96:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff9a:	e7ed      	b.n	800ff78 <__exponent+0x4c>
 800ff9c:	2330      	movs	r3, #48	; 0x30
 800ff9e:	3130      	adds	r1, #48	; 0x30
 800ffa0:	7083      	strb	r3, [r0, #2]
 800ffa2:	70c1      	strb	r1, [r0, #3]
 800ffa4:	1d03      	adds	r3, r0, #4
 800ffa6:	e7f1      	b.n	800ff8c <__exponent+0x60>

0800ffa8 <_printf_float>:
 800ffa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffac:	ed2d 8b02 	vpush	{d8}
 800ffb0:	b08d      	sub	sp, #52	; 0x34
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ffb8:	4616      	mov	r6, r2
 800ffba:	461f      	mov	r7, r3
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	f001 fb85 	bl	80116cc <_localeconv_r>
 800ffc2:	f8d0 a000 	ldr.w	sl, [r0]
 800ffc6:	4650      	mov	r0, sl
 800ffc8:	f7f0 f91a 	bl	8000200 <strlen>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	930a      	str	r3, [sp, #40]	; 0x28
 800ffd0:	6823      	ldr	r3, [r4, #0]
 800ffd2:	9305      	str	r3, [sp, #20]
 800ffd4:	f8d8 3000 	ldr.w	r3, [r8]
 800ffd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ffdc:	3307      	adds	r3, #7
 800ffde:	f023 0307 	bic.w	r3, r3, #7
 800ffe2:	f103 0208 	add.w	r2, r3, #8
 800ffe6:	f8c8 2000 	str.w	r2, [r8]
 800ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fff2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fff6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fffa:	9307      	str	r3, [sp, #28]
 800fffc:	f8cd 8018 	str.w	r8, [sp, #24]
 8010000:	ee08 0a10 	vmov	s16, r0
 8010004:	4b9f      	ldr	r3, [pc, #636]	; (8010284 <_printf_float+0x2dc>)
 8010006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801000a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801000e:	f7f0 fda5 	bl	8000b5c <__aeabi_dcmpun>
 8010012:	bb88      	cbnz	r0, 8010078 <_printf_float+0xd0>
 8010014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010018:	4b9a      	ldr	r3, [pc, #616]	; (8010284 <_printf_float+0x2dc>)
 801001a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801001e:	f7f0 fd7f 	bl	8000b20 <__aeabi_dcmple>
 8010022:	bb48      	cbnz	r0, 8010078 <_printf_float+0xd0>
 8010024:	2200      	movs	r2, #0
 8010026:	2300      	movs	r3, #0
 8010028:	4640      	mov	r0, r8
 801002a:	4649      	mov	r1, r9
 801002c:	f7f0 fd6e 	bl	8000b0c <__aeabi_dcmplt>
 8010030:	b110      	cbz	r0, 8010038 <_printf_float+0x90>
 8010032:	232d      	movs	r3, #45	; 0x2d
 8010034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010038:	4b93      	ldr	r3, [pc, #588]	; (8010288 <_printf_float+0x2e0>)
 801003a:	4894      	ldr	r0, [pc, #592]	; (801028c <_printf_float+0x2e4>)
 801003c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010040:	bf94      	ite	ls
 8010042:	4698      	movls	r8, r3
 8010044:	4680      	movhi	r8, r0
 8010046:	2303      	movs	r3, #3
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	9b05      	ldr	r3, [sp, #20]
 801004c:	f023 0204 	bic.w	r2, r3, #4
 8010050:	6022      	str	r2, [r4, #0]
 8010052:	f04f 0900 	mov.w	r9, #0
 8010056:	9700      	str	r7, [sp, #0]
 8010058:	4633      	mov	r3, r6
 801005a:	aa0b      	add	r2, sp, #44	; 0x2c
 801005c:	4621      	mov	r1, r4
 801005e:	4628      	mov	r0, r5
 8010060:	f000 f9d8 	bl	8010414 <_printf_common>
 8010064:	3001      	adds	r0, #1
 8010066:	f040 8090 	bne.w	801018a <_printf_float+0x1e2>
 801006a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801006e:	b00d      	add	sp, #52	; 0x34
 8010070:	ecbd 8b02 	vpop	{d8}
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010078:	4642      	mov	r2, r8
 801007a:	464b      	mov	r3, r9
 801007c:	4640      	mov	r0, r8
 801007e:	4649      	mov	r1, r9
 8010080:	f7f0 fd6c 	bl	8000b5c <__aeabi_dcmpun>
 8010084:	b140      	cbz	r0, 8010098 <_printf_float+0xf0>
 8010086:	464b      	mov	r3, r9
 8010088:	2b00      	cmp	r3, #0
 801008a:	bfbc      	itt	lt
 801008c:	232d      	movlt	r3, #45	; 0x2d
 801008e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010092:	487f      	ldr	r0, [pc, #508]	; (8010290 <_printf_float+0x2e8>)
 8010094:	4b7f      	ldr	r3, [pc, #508]	; (8010294 <_printf_float+0x2ec>)
 8010096:	e7d1      	b.n	801003c <_printf_float+0x94>
 8010098:	6863      	ldr	r3, [r4, #4]
 801009a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801009e:	9206      	str	r2, [sp, #24]
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	d13f      	bne.n	8010124 <_printf_float+0x17c>
 80100a4:	2306      	movs	r3, #6
 80100a6:	6063      	str	r3, [r4, #4]
 80100a8:	9b05      	ldr	r3, [sp, #20]
 80100aa:	6861      	ldr	r1, [r4, #4]
 80100ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80100b0:	2300      	movs	r3, #0
 80100b2:	9303      	str	r3, [sp, #12]
 80100b4:	ab0a      	add	r3, sp, #40	; 0x28
 80100b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80100ba:	ab09      	add	r3, sp, #36	; 0x24
 80100bc:	ec49 8b10 	vmov	d0, r8, r9
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	6022      	str	r2, [r4, #0]
 80100c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80100c8:	4628      	mov	r0, r5
 80100ca:	f7ff fecd 	bl	800fe68 <__cvt>
 80100ce:	9b06      	ldr	r3, [sp, #24]
 80100d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100d2:	2b47      	cmp	r3, #71	; 0x47
 80100d4:	4680      	mov	r8, r0
 80100d6:	d108      	bne.n	80100ea <_printf_float+0x142>
 80100d8:	1cc8      	adds	r0, r1, #3
 80100da:	db02      	blt.n	80100e2 <_printf_float+0x13a>
 80100dc:	6863      	ldr	r3, [r4, #4]
 80100de:	4299      	cmp	r1, r3
 80100e0:	dd41      	ble.n	8010166 <_printf_float+0x1be>
 80100e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80100e6:	fa5f fb8b 	uxtb.w	fp, fp
 80100ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80100ee:	d820      	bhi.n	8010132 <_printf_float+0x18a>
 80100f0:	3901      	subs	r1, #1
 80100f2:	465a      	mov	r2, fp
 80100f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80100f8:	9109      	str	r1, [sp, #36]	; 0x24
 80100fa:	f7ff ff17 	bl	800ff2c <__exponent>
 80100fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010100:	1813      	adds	r3, r2, r0
 8010102:	2a01      	cmp	r2, #1
 8010104:	4681      	mov	r9, r0
 8010106:	6123      	str	r3, [r4, #16]
 8010108:	dc02      	bgt.n	8010110 <_printf_float+0x168>
 801010a:	6822      	ldr	r2, [r4, #0]
 801010c:	07d2      	lsls	r2, r2, #31
 801010e:	d501      	bpl.n	8010114 <_printf_float+0x16c>
 8010110:	3301      	adds	r3, #1
 8010112:	6123      	str	r3, [r4, #16]
 8010114:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010118:	2b00      	cmp	r3, #0
 801011a:	d09c      	beq.n	8010056 <_printf_float+0xae>
 801011c:	232d      	movs	r3, #45	; 0x2d
 801011e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010122:	e798      	b.n	8010056 <_printf_float+0xae>
 8010124:	9a06      	ldr	r2, [sp, #24]
 8010126:	2a47      	cmp	r2, #71	; 0x47
 8010128:	d1be      	bne.n	80100a8 <_printf_float+0x100>
 801012a:	2b00      	cmp	r3, #0
 801012c:	d1bc      	bne.n	80100a8 <_printf_float+0x100>
 801012e:	2301      	movs	r3, #1
 8010130:	e7b9      	b.n	80100a6 <_printf_float+0xfe>
 8010132:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010136:	d118      	bne.n	801016a <_printf_float+0x1c2>
 8010138:	2900      	cmp	r1, #0
 801013a:	6863      	ldr	r3, [r4, #4]
 801013c:	dd0b      	ble.n	8010156 <_printf_float+0x1ae>
 801013e:	6121      	str	r1, [r4, #16]
 8010140:	b913      	cbnz	r3, 8010148 <_printf_float+0x1a0>
 8010142:	6822      	ldr	r2, [r4, #0]
 8010144:	07d0      	lsls	r0, r2, #31
 8010146:	d502      	bpl.n	801014e <_printf_float+0x1a6>
 8010148:	3301      	adds	r3, #1
 801014a:	440b      	add	r3, r1
 801014c:	6123      	str	r3, [r4, #16]
 801014e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010150:	f04f 0900 	mov.w	r9, #0
 8010154:	e7de      	b.n	8010114 <_printf_float+0x16c>
 8010156:	b913      	cbnz	r3, 801015e <_printf_float+0x1b6>
 8010158:	6822      	ldr	r2, [r4, #0]
 801015a:	07d2      	lsls	r2, r2, #31
 801015c:	d501      	bpl.n	8010162 <_printf_float+0x1ba>
 801015e:	3302      	adds	r3, #2
 8010160:	e7f4      	b.n	801014c <_printf_float+0x1a4>
 8010162:	2301      	movs	r3, #1
 8010164:	e7f2      	b.n	801014c <_printf_float+0x1a4>
 8010166:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801016a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801016c:	4299      	cmp	r1, r3
 801016e:	db05      	blt.n	801017c <_printf_float+0x1d4>
 8010170:	6823      	ldr	r3, [r4, #0]
 8010172:	6121      	str	r1, [r4, #16]
 8010174:	07d8      	lsls	r0, r3, #31
 8010176:	d5ea      	bpl.n	801014e <_printf_float+0x1a6>
 8010178:	1c4b      	adds	r3, r1, #1
 801017a:	e7e7      	b.n	801014c <_printf_float+0x1a4>
 801017c:	2900      	cmp	r1, #0
 801017e:	bfd4      	ite	le
 8010180:	f1c1 0202 	rsble	r2, r1, #2
 8010184:	2201      	movgt	r2, #1
 8010186:	4413      	add	r3, r2
 8010188:	e7e0      	b.n	801014c <_printf_float+0x1a4>
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	055a      	lsls	r2, r3, #21
 801018e:	d407      	bmi.n	80101a0 <_printf_float+0x1f8>
 8010190:	6923      	ldr	r3, [r4, #16]
 8010192:	4642      	mov	r2, r8
 8010194:	4631      	mov	r1, r6
 8010196:	4628      	mov	r0, r5
 8010198:	47b8      	blx	r7
 801019a:	3001      	adds	r0, #1
 801019c:	d12c      	bne.n	80101f8 <_printf_float+0x250>
 801019e:	e764      	b.n	801006a <_printf_float+0xc2>
 80101a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80101a4:	f240 80e0 	bls.w	8010368 <_printf_float+0x3c0>
 80101a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101ac:	2200      	movs	r2, #0
 80101ae:	2300      	movs	r3, #0
 80101b0:	f7f0 fca2 	bl	8000af8 <__aeabi_dcmpeq>
 80101b4:	2800      	cmp	r0, #0
 80101b6:	d034      	beq.n	8010222 <_printf_float+0x27a>
 80101b8:	4a37      	ldr	r2, [pc, #220]	; (8010298 <_printf_float+0x2f0>)
 80101ba:	2301      	movs	r3, #1
 80101bc:	4631      	mov	r1, r6
 80101be:	4628      	mov	r0, r5
 80101c0:	47b8      	blx	r7
 80101c2:	3001      	adds	r0, #1
 80101c4:	f43f af51 	beq.w	801006a <_printf_float+0xc2>
 80101c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101cc:	429a      	cmp	r2, r3
 80101ce:	db02      	blt.n	80101d6 <_printf_float+0x22e>
 80101d0:	6823      	ldr	r3, [r4, #0]
 80101d2:	07d8      	lsls	r0, r3, #31
 80101d4:	d510      	bpl.n	80101f8 <_printf_float+0x250>
 80101d6:	ee18 3a10 	vmov	r3, s16
 80101da:	4652      	mov	r2, sl
 80101dc:	4631      	mov	r1, r6
 80101de:	4628      	mov	r0, r5
 80101e0:	47b8      	blx	r7
 80101e2:	3001      	adds	r0, #1
 80101e4:	f43f af41 	beq.w	801006a <_printf_float+0xc2>
 80101e8:	f04f 0800 	mov.w	r8, #0
 80101ec:	f104 091a 	add.w	r9, r4, #26
 80101f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101f2:	3b01      	subs	r3, #1
 80101f4:	4543      	cmp	r3, r8
 80101f6:	dc09      	bgt.n	801020c <_printf_float+0x264>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	079b      	lsls	r3, r3, #30
 80101fc:	f100 8105 	bmi.w	801040a <_printf_float+0x462>
 8010200:	68e0      	ldr	r0, [r4, #12]
 8010202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010204:	4298      	cmp	r0, r3
 8010206:	bfb8      	it	lt
 8010208:	4618      	movlt	r0, r3
 801020a:	e730      	b.n	801006e <_printf_float+0xc6>
 801020c:	2301      	movs	r3, #1
 801020e:	464a      	mov	r2, r9
 8010210:	4631      	mov	r1, r6
 8010212:	4628      	mov	r0, r5
 8010214:	47b8      	blx	r7
 8010216:	3001      	adds	r0, #1
 8010218:	f43f af27 	beq.w	801006a <_printf_float+0xc2>
 801021c:	f108 0801 	add.w	r8, r8, #1
 8010220:	e7e6      	b.n	80101f0 <_printf_float+0x248>
 8010222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010224:	2b00      	cmp	r3, #0
 8010226:	dc39      	bgt.n	801029c <_printf_float+0x2f4>
 8010228:	4a1b      	ldr	r2, [pc, #108]	; (8010298 <_printf_float+0x2f0>)
 801022a:	2301      	movs	r3, #1
 801022c:	4631      	mov	r1, r6
 801022e:	4628      	mov	r0, r5
 8010230:	47b8      	blx	r7
 8010232:	3001      	adds	r0, #1
 8010234:	f43f af19 	beq.w	801006a <_printf_float+0xc2>
 8010238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801023c:	4313      	orrs	r3, r2
 801023e:	d102      	bne.n	8010246 <_printf_float+0x29e>
 8010240:	6823      	ldr	r3, [r4, #0]
 8010242:	07d9      	lsls	r1, r3, #31
 8010244:	d5d8      	bpl.n	80101f8 <_printf_float+0x250>
 8010246:	ee18 3a10 	vmov	r3, s16
 801024a:	4652      	mov	r2, sl
 801024c:	4631      	mov	r1, r6
 801024e:	4628      	mov	r0, r5
 8010250:	47b8      	blx	r7
 8010252:	3001      	adds	r0, #1
 8010254:	f43f af09 	beq.w	801006a <_printf_float+0xc2>
 8010258:	f04f 0900 	mov.w	r9, #0
 801025c:	f104 0a1a 	add.w	sl, r4, #26
 8010260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010262:	425b      	negs	r3, r3
 8010264:	454b      	cmp	r3, r9
 8010266:	dc01      	bgt.n	801026c <_printf_float+0x2c4>
 8010268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801026a:	e792      	b.n	8010192 <_printf_float+0x1ea>
 801026c:	2301      	movs	r3, #1
 801026e:	4652      	mov	r2, sl
 8010270:	4631      	mov	r1, r6
 8010272:	4628      	mov	r0, r5
 8010274:	47b8      	blx	r7
 8010276:	3001      	adds	r0, #1
 8010278:	f43f aef7 	beq.w	801006a <_printf_float+0xc2>
 801027c:	f109 0901 	add.w	r9, r9, #1
 8010280:	e7ee      	b.n	8010260 <_printf_float+0x2b8>
 8010282:	bf00      	nop
 8010284:	7fefffff 	.word	0x7fefffff
 8010288:	08012ab8 	.word	0x08012ab8
 801028c:	08012abc 	.word	0x08012abc
 8010290:	08012ac4 	.word	0x08012ac4
 8010294:	08012ac0 	.word	0x08012ac0
 8010298:	08012ac8 	.word	0x08012ac8
 801029c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801029e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80102a0:	429a      	cmp	r2, r3
 80102a2:	bfa8      	it	ge
 80102a4:	461a      	movge	r2, r3
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	4691      	mov	r9, r2
 80102aa:	dc37      	bgt.n	801031c <_printf_float+0x374>
 80102ac:	f04f 0b00 	mov.w	fp, #0
 80102b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102b4:	f104 021a 	add.w	r2, r4, #26
 80102b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80102ba:	9305      	str	r3, [sp, #20]
 80102bc:	eba3 0309 	sub.w	r3, r3, r9
 80102c0:	455b      	cmp	r3, fp
 80102c2:	dc33      	bgt.n	801032c <_printf_float+0x384>
 80102c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102c8:	429a      	cmp	r2, r3
 80102ca:	db3b      	blt.n	8010344 <_printf_float+0x39c>
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	07da      	lsls	r2, r3, #31
 80102d0:	d438      	bmi.n	8010344 <_printf_float+0x39c>
 80102d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102d4:	9a05      	ldr	r2, [sp, #20]
 80102d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102d8:	1a9a      	subs	r2, r3, r2
 80102da:	eba3 0901 	sub.w	r9, r3, r1
 80102de:	4591      	cmp	r9, r2
 80102e0:	bfa8      	it	ge
 80102e2:	4691      	movge	r9, r2
 80102e4:	f1b9 0f00 	cmp.w	r9, #0
 80102e8:	dc35      	bgt.n	8010356 <_printf_float+0x3ae>
 80102ea:	f04f 0800 	mov.w	r8, #0
 80102ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102f2:	f104 0a1a 	add.w	sl, r4, #26
 80102f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102fa:	1a9b      	subs	r3, r3, r2
 80102fc:	eba3 0309 	sub.w	r3, r3, r9
 8010300:	4543      	cmp	r3, r8
 8010302:	f77f af79 	ble.w	80101f8 <_printf_float+0x250>
 8010306:	2301      	movs	r3, #1
 8010308:	4652      	mov	r2, sl
 801030a:	4631      	mov	r1, r6
 801030c:	4628      	mov	r0, r5
 801030e:	47b8      	blx	r7
 8010310:	3001      	adds	r0, #1
 8010312:	f43f aeaa 	beq.w	801006a <_printf_float+0xc2>
 8010316:	f108 0801 	add.w	r8, r8, #1
 801031a:	e7ec      	b.n	80102f6 <_printf_float+0x34e>
 801031c:	4613      	mov	r3, r2
 801031e:	4631      	mov	r1, r6
 8010320:	4642      	mov	r2, r8
 8010322:	4628      	mov	r0, r5
 8010324:	47b8      	blx	r7
 8010326:	3001      	adds	r0, #1
 8010328:	d1c0      	bne.n	80102ac <_printf_float+0x304>
 801032a:	e69e      	b.n	801006a <_printf_float+0xc2>
 801032c:	2301      	movs	r3, #1
 801032e:	4631      	mov	r1, r6
 8010330:	4628      	mov	r0, r5
 8010332:	9205      	str	r2, [sp, #20]
 8010334:	47b8      	blx	r7
 8010336:	3001      	adds	r0, #1
 8010338:	f43f ae97 	beq.w	801006a <_printf_float+0xc2>
 801033c:	9a05      	ldr	r2, [sp, #20]
 801033e:	f10b 0b01 	add.w	fp, fp, #1
 8010342:	e7b9      	b.n	80102b8 <_printf_float+0x310>
 8010344:	ee18 3a10 	vmov	r3, s16
 8010348:	4652      	mov	r2, sl
 801034a:	4631      	mov	r1, r6
 801034c:	4628      	mov	r0, r5
 801034e:	47b8      	blx	r7
 8010350:	3001      	adds	r0, #1
 8010352:	d1be      	bne.n	80102d2 <_printf_float+0x32a>
 8010354:	e689      	b.n	801006a <_printf_float+0xc2>
 8010356:	9a05      	ldr	r2, [sp, #20]
 8010358:	464b      	mov	r3, r9
 801035a:	4442      	add	r2, r8
 801035c:	4631      	mov	r1, r6
 801035e:	4628      	mov	r0, r5
 8010360:	47b8      	blx	r7
 8010362:	3001      	adds	r0, #1
 8010364:	d1c1      	bne.n	80102ea <_printf_float+0x342>
 8010366:	e680      	b.n	801006a <_printf_float+0xc2>
 8010368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801036a:	2a01      	cmp	r2, #1
 801036c:	dc01      	bgt.n	8010372 <_printf_float+0x3ca>
 801036e:	07db      	lsls	r3, r3, #31
 8010370:	d538      	bpl.n	80103e4 <_printf_float+0x43c>
 8010372:	2301      	movs	r3, #1
 8010374:	4642      	mov	r2, r8
 8010376:	4631      	mov	r1, r6
 8010378:	4628      	mov	r0, r5
 801037a:	47b8      	blx	r7
 801037c:	3001      	adds	r0, #1
 801037e:	f43f ae74 	beq.w	801006a <_printf_float+0xc2>
 8010382:	ee18 3a10 	vmov	r3, s16
 8010386:	4652      	mov	r2, sl
 8010388:	4631      	mov	r1, r6
 801038a:	4628      	mov	r0, r5
 801038c:	47b8      	blx	r7
 801038e:	3001      	adds	r0, #1
 8010390:	f43f ae6b 	beq.w	801006a <_printf_float+0xc2>
 8010394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010398:	2200      	movs	r2, #0
 801039a:	2300      	movs	r3, #0
 801039c:	f7f0 fbac 	bl	8000af8 <__aeabi_dcmpeq>
 80103a0:	b9d8      	cbnz	r0, 80103da <_printf_float+0x432>
 80103a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103a4:	f108 0201 	add.w	r2, r8, #1
 80103a8:	3b01      	subs	r3, #1
 80103aa:	4631      	mov	r1, r6
 80103ac:	4628      	mov	r0, r5
 80103ae:	47b8      	blx	r7
 80103b0:	3001      	adds	r0, #1
 80103b2:	d10e      	bne.n	80103d2 <_printf_float+0x42a>
 80103b4:	e659      	b.n	801006a <_printf_float+0xc2>
 80103b6:	2301      	movs	r3, #1
 80103b8:	4652      	mov	r2, sl
 80103ba:	4631      	mov	r1, r6
 80103bc:	4628      	mov	r0, r5
 80103be:	47b8      	blx	r7
 80103c0:	3001      	adds	r0, #1
 80103c2:	f43f ae52 	beq.w	801006a <_printf_float+0xc2>
 80103c6:	f108 0801 	add.w	r8, r8, #1
 80103ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103cc:	3b01      	subs	r3, #1
 80103ce:	4543      	cmp	r3, r8
 80103d0:	dcf1      	bgt.n	80103b6 <_printf_float+0x40e>
 80103d2:	464b      	mov	r3, r9
 80103d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80103d8:	e6dc      	b.n	8010194 <_printf_float+0x1ec>
 80103da:	f04f 0800 	mov.w	r8, #0
 80103de:	f104 0a1a 	add.w	sl, r4, #26
 80103e2:	e7f2      	b.n	80103ca <_printf_float+0x422>
 80103e4:	2301      	movs	r3, #1
 80103e6:	4642      	mov	r2, r8
 80103e8:	e7df      	b.n	80103aa <_printf_float+0x402>
 80103ea:	2301      	movs	r3, #1
 80103ec:	464a      	mov	r2, r9
 80103ee:	4631      	mov	r1, r6
 80103f0:	4628      	mov	r0, r5
 80103f2:	47b8      	blx	r7
 80103f4:	3001      	adds	r0, #1
 80103f6:	f43f ae38 	beq.w	801006a <_printf_float+0xc2>
 80103fa:	f108 0801 	add.w	r8, r8, #1
 80103fe:	68e3      	ldr	r3, [r4, #12]
 8010400:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010402:	1a5b      	subs	r3, r3, r1
 8010404:	4543      	cmp	r3, r8
 8010406:	dcf0      	bgt.n	80103ea <_printf_float+0x442>
 8010408:	e6fa      	b.n	8010200 <_printf_float+0x258>
 801040a:	f04f 0800 	mov.w	r8, #0
 801040e:	f104 0919 	add.w	r9, r4, #25
 8010412:	e7f4      	b.n	80103fe <_printf_float+0x456>

08010414 <_printf_common>:
 8010414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010418:	4616      	mov	r6, r2
 801041a:	4699      	mov	r9, r3
 801041c:	688a      	ldr	r2, [r1, #8]
 801041e:	690b      	ldr	r3, [r1, #16]
 8010420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010424:	4293      	cmp	r3, r2
 8010426:	bfb8      	it	lt
 8010428:	4613      	movlt	r3, r2
 801042a:	6033      	str	r3, [r6, #0]
 801042c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010430:	4607      	mov	r7, r0
 8010432:	460c      	mov	r4, r1
 8010434:	b10a      	cbz	r2, 801043a <_printf_common+0x26>
 8010436:	3301      	adds	r3, #1
 8010438:	6033      	str	r3, [r6, #0]
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	0699      	lsls	r1, r3, #26
 801043e:	bf42      	ittt	mi
 8010440:	6833      	ldrmi	r3, [r6, #0]
 8010442:	3302      	addmi	r3, #2
 8010444:	6033      	strmi	r3, [r6, #0]
 8010446:	6825      	ldr	r5, [r4, #0]
 8010448:	f015 0506 	ands.w	r5, r5, #6
 801044c:	d106      	bne.n	801045c <_printf_common+0x48>
 801044e:	f104 0a19 	add.w	sl, r4, #25
 8010452:	68e3      	ldr	r3, [r4, #12]
 8010454:	6832      	ldr	r2, [r6, #0]
 8010456:	1a9b      	subs	r3, r3, r2
 8010458:	42ab      	cmp	r3, r5
 801045a:	dc26      	bgt.n	80104aa <_printf_common+0x96>
 801045c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010460:	1e13      	subs	r3, r2, #0
 8010462:	6822      	ldr	r2, [r4, #0]
 8010464:	bf18      	it	ne
 8010466:	2301      	movne	r3, #1
 8010468:	0692      	lsls	r2, r2, #26
 801046a:	d42b      	bmi.n	80104c4 <_printf_common+0xb0>
 801046c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010470:	4649      	mov	r1, r9
 8010472:	4638      	mov	r0, r7
 8010474:	47c0      	blx	r8
 8010476:	3001      	adds	r0, #1
 8010478:	d01e      	beq.n	80104b8 <_printf_common+0xa4>
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	68e5      	ldr	r5, [r4, #12]
 801047e:	6832      	ldr	r2, [r6, #0]
 8010480:	f003 0306 	and.w	r3, r3, #6
 8010484:	2b04      	cmp	r3, #4
 8010486:	bf08      	it	eq
 8010488:	1aad      	subeq	r5, r5, r2
 801048a:	68a3      	ldr	r3, [r4, #8]
 801048c:	6922      	ldr	r2, [r4, #16]
 801048e:	bf0c      	ite	eq
 8010490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010494:	2500      	movne	r5, #0
 8010496:	4293      	cmp	r3, r2
 8010498:	bfc4      	itt	gt
 801049a:	1a9b      	subgt	r3, r3, r2
 801049c:	18ed      	addgt	r5, r5, r3
 801049e:	2600      	movs	r6, #0
 80104a0:	341a      	adds	r4, #26
 80104a2:	42b5      	cmp	r5, r6
 80104a4:	d11a      	bne.n	80104dc <_printf_common+0xc8>
 80104a6:	2000      	movs	r0, #0
 80104a8:	e008      	b.n	80104bc <_printf_common+0xa8>
 80104aa:	2301      	movs	r3, #1
 80104ac:	4652      	mov	r2, sl
 80104ae:	4649      	mov	r1, r9
 80104b0:	4638      	mov	r0, r7
 80104b2:	47c0      	blx	r8
 80104b4:	3001      	adds	r0, #1
 80104b6:	d103      	bne.n	80104c0 <_printf_common+0xac>
 80104b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c0:	3501      	adds	r5, #1
 80104c2:	e7c6      	b.n	8010452 <_printf_common+0x3e>
 80104c4:	18e1      	adds	r1, r4, r3
 80104c6:	1c5a      	adds	r2, r3, #1
 80104c8:	2030      	movs	r0, #48	; 0x30
 80104ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104ce:	4422      	add	r2, r4
 80104d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104d8:	3302      	adds	r3, #2
 80104da:	e7c7      	b.n	801046c <_printf_common+0x58>
 80104dc:	2301      	movs	r3, #1
 80104de:	4622      	mov	r2, r4
 80104e0:	4649      	mov	r1, r9
 80104e2:	4638      	mov	r0, r7
 80104e4:	47c0      	blx	r8
 80104e6:	3001      	adds	r0, #1
 80104e8:	d0e6      	beq.n	80104b8 <_printf_common+0xa4>
 80104ea:	3601      	adds	r6, #1
 80104ec:	e7d9      	b.n	80104a2 <_printf_common+0x8e>
	...

080104f0 <_printf_i>:
 80104f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104f4:	7e0f      	ldrb	r7, [r1, #24]
 80104f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104f8:	2f78      	cmp	r7, #120	; 0x78
 80104fa:	4691      	mov	r9, r2
 80104fc:	4680      	mov	r8, r0
 80104fe:	460c      	mov	r4, r1
 8010500:	469a      	mov	sl, r3
 8010502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010506:	d807      	bhi.n	8010518 <_printf_i+0x28>
 8010508:	2f62      	cmp	r7, #98	; 0x62
 801050a:	d80a      	bhi.n	8010522 <_printf_i+0x32>
 801050c:	2f00      	cmp	r7, #0
 801050e:	f000 80d8 	beq.w	80106c2 <_printf_i+0x1d2>
 8010512:	2f58      	cmp	r7, #88	; 0x58
 8010514:	f000 80a3 	beq.w	801065e <_printf_i+0x16e>
 8010518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801051c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010520:	e03a      	b.n	8010598 <_printf_i+0xa8>
 8010522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010526:	2b15      	cmp	r3, #21
 8010528:	d8f6      	bhi.n	8010518 <_printf_i+0x28>
 801052a:	a101      	add	r1, pc, #4	; (adr r1, 8010530 <_printf_i+0x40>)
 801052c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010530:	08010589 	.word	0x08010589
 8010534:	0801059d 	.word	0x0801059d
 8010538:	08010519 	.word	0x08010519
 801053c:	08010519 	.word	0x08010519
 8010540:	08010519 	.word	0x08010519
 8010544:	08010519 	.word	0x08010519
 8010548:	0801059d 	.word	0x0801059d
 801054c:	08010519 	.word	0x08010519
 8010550:	08010519 	.word	0x08010519
 8010554:	08010519 	.word	0x08010519
 8010558:	08010519 	.word	0x08010519
 801055c:	080106a9 	.word	0x080106a9
 8010560:	080105cd 	.word	0x080105cd
 8010564:	0801068b 	.word	0x0801068b
 8010568:	08010519 	.word	0x08010519
 801056c:	08010519 	.word	0x08010519
 8010570:	080106cb 	.word	0x080106cb
 8010574:	08010519 	.word	0x08010519
 8010578:	080105cd 	.word	0x080105cd
 801057c:	08010519 	.word	0x08010519
 8010580:	08010519 	.word	0x08010519
 8010584:	08010693 	.word	0x08010693
 8010588:	682b      	ldr	r3, [r5, #0]
 801058a:	1d1a      	adds	r2, r3, #4
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	602a      	str	r2, [r5, #0]
 8010590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010598:	2301      	movs	r3, #1
 801059a:	e0a3      	b.n	80106e4 <_printf_i+0x1f4>
 801059c:	6820      	ldr	r0, [r4, #0]
 801059e:	6829      	ldr	r1, [r5, #0]
 80105a0:	0606      	lsls	r6, r0, #24
 80105a2:	f101 0304 	add.w	r3, r1, #4
 80105a6:	d50a      	bpl.n	80105be <_printf_i+0xce>
 80105a8:	680e      	ldr	r6, [r1, #0]
 80105aa:	602b      	str	r3, [r5, #0]
 80105ac:	2e00      	cmp	r6, #0
 80105ae:	da03      	bge.n	80105b8 <_printf_i+0xc8>
 80105b0:	232d      	movs	r3, #45	; 0x2d
 80105b2:	4276      	negs	r6, r6
 80105b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105b8:	485e      	ldr	r0, [pc, #376]	; (8010734 <_printf_i+0x244>)
 80105ba:	230a      	movs	r3, #10
 80105bc:	e019      	b.n	80105f2 <_printf_i+0x102>
 80105be:	680e      	ldr	r6, [r1, #0]
 80105c0:	602b      	str	r3, [r5, #0]
 80105c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80105c6:	bf18      	it	ne
 80105c8:	b236      	sxthne	r6, r6
 80105ca:	e7ef      	b.n	80105ac <_printf_i+0xbc>
 80105cc:	682b      	ldr	r3, [r5, #0]
 80105ce:	6820      	ldr	r0, [r4, #0]
 80105d0:	1d19      	adds	r1, r3, #4
 80105d2:	6029      	str	r1, [r5, #0]
 80105d4:	0601      	lsls	r1, r0, #24
 80105d6:	d501      	bpl.n	80105dc <_printf_i+0xec>
 80105d8:	681e      	ldr	r6, [r3, #0]
 80105da:	e002      	b.n	80105e2 <_printf_i+0xf2>
 80105dc:	0646      	lsls	r6, r0, #25
 80105de:	d5fb      	bpl.n	80105d8 <_printf_i+0xe8>
 80105e0:	881e      	ldrh	r6, [r3, #0]
 80105e2:	4854      	ldr	r0, [pc, #336]	; (8010734 <_printf_i+0x244>)
 80105e4:	2f6f      	cmp	r7, #111	; 0x6f
 80105e6:	bf0c      	ite	eq
 80105e8:	2308      	moveq	r3, #8
 80105ea:	230a      	movne	r3, #10
 80105ec:	2100      	movs	r1, #0
 80105ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105f2:	6865      	ldr	r5, [r4, #4]
 80105f4:	60a5      	str	r5, [r4, #8]
 80105f6:	2d00      	cmp	r5, #0
 80105f8:	bfa2      	ittt	ge
 80105fa:	6821      	ldrge	r1, [r4, #0]
 80105fc:	f021 0104 	bicge.w	r1, r1, #4
 8010600:	6021      	strge	r1, [r4, #0]
 8010602:	b90e      	cbnz	r6, 8010608 <_printf_i+0x118>
 8010604:	2d00      	cmp	r5, #0
 8010606:	d04d      	beq.n	80106a4 <_printf_i+0x1b4>
 8010608:	4615      	mov	r5, r2
 801060a:	fbb6 f1f3 	udiv	r1, r6, r3
 801060e:	fb03 6711 	mls	r7, r3, r1, r6
 8010612:	5dc7      	ldrb	r7, [r0, r7]
 8010614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010618:	4637      	mov	r7, r6
 801061a:	42bb      	cmp	r3, r7
 801061c:	460e      	mov	r6, r1
 801061e:	d9f4      	bls.n	801060a <_printf_i+0x11a>
 8010620:	2b08      	cmp	r3, #8
 8010622:	d10b      	bne.n	801063c <_printf_i+0x14c>
 8010624:	6823      	ldr	r3, [r4, #0]
 8010626:	07de      	lsls	r6, r3, #31
 8010628:	d508      	bpl.n	801063c <_printf_i+0x14c>
 801062a:	6923      	ldr	r3, [r4, #16]
 801062c:	6861      	ldr	r1, [r4, #4]
 801062e:	4299      	cmp	r1, r3
 8010630:	bfde      	ittt	le
 8010632:	2330      	movle	r3, #48	; 0x30
 8010634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010638:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801063c:	1b52      	subs	r2, r2, r5
 801063e:	6122      	str	r2, [r4, #16]
 8010640:	f8cd a000 	str.w	sl, [sp]
 8010644:	464b      	mov	r3, r9
 8010646:	aa03      	add	r2, sp, #12
 8010648:	4621      	mov	r1, r4
 801064a:	4640      	mov	r0, r8
 801064c:	f7ff fee2 	bl	8010414 <_printf_common>
 8010650:	3001      	adds	r0, #1
 8010652:	d14c      	bne.n	80106ee <_printf_i+0x1fe>
 8010654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010658:	b004      	add	sp, #16
 801065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801065e:	4835      	ldr	r0, [pc, #212]	; (8010734 <_printf_i+0x244>)
 8010660:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010664:	6829      	ldr	r1, [r5, #0]
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	f851 6b04 	ldr.w	r6, [r1], #4
 801066c:	6029      	str	r1, [r5, #0]
 801066e:	061d      	lsls	r5, r3, #24
 8010670:	d514      	bpl.n	801069c <_printf_i+0x1ac>
 8010672:	07df      	lsls	r7, r3, #31
 8010674:	bf44      	itt	mi
 8010676:	f043 0320 	orrmi.w	r3, r3, #32
 801067a:	6023      	strmi	r3, [r4, #0]
 801067c:	b91e      	cbnz	r6, 8010686 <_printf_i+0x196>
 801067e:	6823      	ldr	r3, [r4, #0]
 8010680:	f023 0320 	bic.w	r3, r3, #32
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	2310      	movs	r3, #16
 8010688:	e7b0      	b.n	80105ec <_printf_i+0xfc>
 801068a:	6823      	ldr	r3, [r4, #0]
 801068c:	f043 0320 	orr.w	r3, r3, #32
 8010690:	6023      	str	r3, [r4, #0]
 8010692:	2378      	movs	r3, #120	; 0x78
 8010694:	4828      	ldr	r0, [pc, #160]	; (8010738 <_printf_i+0x248>)
 8010696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801069a:	e7e3      	b.n	8010664 <_printf_i+0x174>
 801069c:	0659      	lsls	r1, r3, #25
 801069e:	bf48      	it	mi
 80106a0:	b2b6      	uxthmi	r6, r6
 80106a2:	e7e6      	b.n	8010672 <_printf_i+0x182>
 80106a4:	4615      	mov	r5, r2
 80106a6:	e7bb      	b.n	8010620 <_printf_i+0x130>
 80106a8:	682b      	ldr	r3, [r5, #0]
 80106aa:	6826      	ldr	r6, [r4, #0]
 80106ac:	6961      	ldr	r1, [r4, #20]
 80106ae:	1d18      	adds	r0, r3, #4
 80106b0:	6028      	str	r0, [r5, #0]
 80106b2:	0635      	lsls	r5, r6, #24
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	d501      	bpl.n	80106bc <_printf_i+0x1cc>
 80106b8:	6019      	str	r1, [r3, #0]
 80106ba:	e002      	b.n	80106c2 <_printf_i+0x1d2>
 80106bc:	0670      	lsls	r0, r6, #25
 80106be:	d5fb      	bpl.n	80106b8 <_printf_i+0x1c8>
 80106c0:	8019      	strh	r1, [r3, #0]
 80106c2:	2300      	movs	r3, #0
 80106c4:	6123      	str	r3, [r4, #16]
 80106c6:	4615      	mov	r5, r2
 80106c8:	e7ba      	b.n	8010640 <_printf_i+0x150>
 80106ca:	682b      	ldr	r3, [r5, #0]
 80106cc:	1d1a      	adds	r2, r3, #4
 80106ce:	602a      	str	r2, [r5, #0]
 80106d0:	681d      	ldr	r5, [r3, #0]
 80106d2:	6862      	ldr	r2, [r4, #4]
 80106d4:	2100      	movs	r1, #0
 80106d6:	4628      	mov	r0, r5
 80106d8:	f7ef fd9a 	bl	8000210 <memchr>
 80106dc:	b108      	cbz	r0, 80106e2 <_printf_i+0x1f2>
 80106de:	1b40      	subs	r0, r0, r5
 80106e0:	6060      	str	r0, [r4, #4]
 80106e2:	6863      	ldr	r3, [r4, #4]
 80106e4:	6123      	str	r3, [r4, #16]
 80106e6:	2300      	movs	r3, #0
 80106e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106ec:	e7a8      	b.n	8010640 <_printf_i+0x150>
 80106ee:	6923      	ldr	r3, [r4, #16]
 80106f0:	462a      	mov	r2, r5
 80106f2:	4649      	mov	r1, r9
 80106f4:	4640      	mov	r0, r8
 80106f6:	47d0      	blx	sl
 80106f8:	3001      	adds	r0, #1
 80106fa:	d0ab      	beq.n	8010654 <_printf_i+0x164>
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	079b      	lsls	r3, r3, #30
 8010700:	d413      	bmi.n	801072a <_printf_i+0x23a>
 8010702:	68e0      	ldr	r0, [r4, #12]
 8010704:	9b03      	ldr	r3, [sp, #12]
 8010706:	4298      	cmp	r0, r3
 8010708:	bfb8      	it	lt
 801070a:	4618      	movlt	r0, r3
 801070c:	e7a4      	b.n	8010658 <_printf_i+0x168>
 801070e:	2301      	movs	r3, #1
 8010710:	4632      	mov	r2, r6
 8010712:	4649      	mov	r1, r9
 8010714:	4640      	mov	r0, r8
 8010716:	47d0      	blx	sl
 8010718:	3001      	adds	r0, #1
 801071a:	d09b      	beq.n	8010654 <_printf_i+0x164>
 801071c:	3501      	adds	r5, #1
 801071e:	68e3      	ldr	r3, [r4, #12]
 8010720:	9903      	ldr	r1, [sp, #12]
 8010722:	1a5b      	subs	r3, r3, r1
 8010724:	42ab      	cmp	r3, r5
 8010726:	dcf2      	bgt.n	801070e <_printf_i+0x21e>
 8010728:	e7eb      	b.n	8010702 <_printf_i+0x212>
 801072a:	2500      	movs	r5, #0
 801072c:	f104 0619 	add.w	r6, r4, #25
 8010730:	e7f5      	b.n	801071e <_printf_i+0x22e>
 8010732:	bf00      	nop
 8010734:	08012aca 	.word	0x08012aca
 8010738:	08012adb 	.word	0x08012adb

0801073c <iprintf>:
 801073c:	b40f      	push	{r0, r1, r2, r3}
 801073e:	4b0a      	ldr	r3, [pc, #40]	; (8010768 <iprintf+0x2c>)
 8010740:	b513      	push	{r0, r1, r4, lr}
 8010742:	681c      	ldr	r4, [r3, #0]
 8010744:	b124      	cbz	r4, 8010750 <iprintf+0x14>
 8010746:	69a3      	ldr	r3, [r4, #24]
 8010748:	b913      	cbnz	r3, 8010750 <iprintf+0x14>
 801074a:	4620      	mov	r0, r4
 801074c:	f000 ff0e 	bl	801156c <__sinit>
 8010750:	ab05      	add	r3, sp, #20
 8010752:	9a04      	ldr	r2, [sp, #16]
 8010754:	68a1      	ldr	r1, [r4, #8]
 8010756:	9301      	str	r3, [sp, #4]
 8010758:	4620      	mov	r0, r4
 801075a:	f001 fba1 	bl	8011ea0 <_vfiprintf_r>
 801075e:	b002      	add	sp, #8
 8010760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010764:	b004      	add	sp, #16
 8010766:	4770      	bx	lr
 8010768:	20000188 	.word	0x20000188

0801076c <_sbrk_r>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4d06      	ldr	r5, [pc, #24]	; (8010788 <_sbrk_r+0x1c>)
 8010770:	2300      	movs	r3, #0
 8010772:	4604      	mov	r4, r0
 8010774:	4608      	mov	r0, r1
 8010776:	602b      	str	r3, [r5, #0]
 8010778:	f001 ffe8 	bl	801274c <_sbrk>
 801077c:	1c43      	adds	r3, r0, #1
 801077e:	d102      	bne.n	8010786 <_sbrk_r+0x1a>
 8010780:	682b      	ldr	r3, [r5, #0]
 8010782:	b103      	cbz	r3, 8010786 <_sbrk_r+0x1a>
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	bd38      	pop	{r3, r4, r5, pc}
 8010788:	200029a4 	.word	0x200029a4

0801078c <__assert_func>:
 801078c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801078e:	4614      	mov	r4, r2
 8010790:	461a      	mov	r2, r3
 8010792:	4b09      	ldr	r3, [pc, #36]	; (80107b8 <__assert_func+0x2c>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4605      	mov	r5, r0
 8010798:	68d8      	ldr	r0, [r3, #12]
 801079a:	b14c      	cbz	r4, 80107b0 <__assert_func+0x24>
 801079c:	4b07      	ldr	r3, [pc, #28]	; (80107bc <__assert_func+0x30>)
 801079e:	9100      	str	r1, [sp, #0]
 80107a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107a4:	4906      	ldr	r1, [pc, #24]	; (80107c0 <__assert_func+0x34>)
 80107a6:	462b      	mov	r3, r5
 80107a8:	f000 ff5e 	bl	8011668 <fiprintf>
 80107ac:	f001 fdcc 	bl	8012348 <abort>
 80107b0:	4b04      	ldr	r3, [pc, #16]	; (80107c4 <__assert_func+0x38>)
 80107b2:	461c      	mov	r4, r3
 80107b4:	e7f3      	b.n	801079e <__assert_func+0x12>
 80107b6:	bf00      	nop
 80107b8:	20000188 	.word	0x20000188
 80107bc:	08012aec 	.word	0x08012aec
 80107c0:	08012af9 	.word	0x08012af9
 80107c4:	08012b27 	.word	0x08012b27

080107c8 <quorem>:
 80107c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	6903      	ldr	r3, [r0, #16]
 80107ce:	690c      	ldr	r4, [r1, #16]
 80107d0:	42a3      	cmp	r3, r4
 80107d2:	4607      	mov	r7, r0
 80107d4:	f2c0 8081 	blt.w	80108da <quorem+0x112>
 80107d8:	3c01      	subs	r4, #1
 80107da:	f101 0814 	add.w	r8, r1, #20
 80107de:	f100 0514 	add.w	r5, r0, #20
 80107e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107e6:	9301      	str	r3, [sp, #4]
 80107e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107f0:	3301      	adds	r3, #1
 80107f2:	429a      	cmp	r2, r3
 80107f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80107f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010800:	d331      	bcc.n	8010866 <quorem+0x9e>
 8010802:	f04f 0e00 	mov.w	lr, #0
 8010806:	4640      	mov	r0, r8
 8010808:	46ac      	mov	ip, r5
 801080a:	46f2      	mov	sl, lr
 801080c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010810:	b293      	uxth	r3, r2
 8010812:	fb06 e303 	mla	r3, r6, r3, lr
 8010816:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801081a:	b29b      	uxth	r3, r3
 801081c:	ebaa 0303 	sub.w	r3, sl, r3
 8010820:	f8dc a000 	ldr.w	sl, [ip]
 8010824:	0c12      	lsrs	r2, r2, #16
 8010826:	fa13 f38a 	uxtah	r3, r3, sl
 801082a:	fb06 e202 	mla	r2, r6, r2, lr
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	9b00      	ldr	r3, [sp, #0]
 8010832:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010836:	b292      	uxth	r2, r2
 8010838:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801083c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010840:	f8bd 3000 	ldrh.w	r3, [sp]
 8010844:	4581      	cmp	r9, r0
 8010846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801084a:	f84c 3b04 	str.w	r3, [ip], #4
 801084e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010852:	d2db      	bcs.n	801080c <quorem+0x44>
 8010854:	f855 300b 	ldr.w	r3, [r5, fp]
 8010858:	b92b      	cbnz	r3, 8010866 <quorem+0x9e>
 801085a:	9b01      	ldr	r3, [sp, #4]
 801085c:	3b04      	subs	r3, #4
 801085e:	429d      	cmp	r5, r3
 8010860:	461a      	mov	r2, r3
 8010862:	d32e      	bcc.n	80108c2 <quorem+0xfa>
 8010864:	613c      	str	r4, [r7, #16]
 8010866:	4638      	mov	r0, r7
 8010868:	f001 f9d8 	bl	8011c1c <__mcmp>
 801086c:	2800      	cmp	r0, #0
 801086e:	db24      	blt.n	80108ba <quorem+0xf2>
 8010870:	3601      	adds	r6, #1
 8010872:	4628      	mov	r0, r5
 8010874:	f04f 0c00 	mov.w	ip, #0
 8010878:	f858 2b04 	ldr.w	r2, [r8], #4
 801087c:	f8d0 e000 	ldr.w	lr, [r0]
 8010880:	b293      	uxth	r3, r2
 8010882:	ebac 0303 	sub.w	r3, ip, r3
 8010886:	0c12      	lsrs	r2, r2, #16
 8010888:	fa13 f38e 	uxtah	r3, r3, lr
 801088c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010894:	b29b      	uxth	r3, r3
 8010896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801089a:	45c1      	cmp	r9, r8
 801089c:	f840 3b04 	str.w	r3, [r0], #4
 80108a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80108a4:	d2e8      	bcs.n	8010878 <quorem+0xb0>
 80108a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108ae:	b922      	cbnz	r2, 80108ba <quorem+0xf2>
 80108b0:	3b04      	subs	r3, #4
 80108b2:	429d      	cmp	r5, r3
 80108b4:	461a      	mov	r2, r3
 80108b6:	d30a      	bcc.n	80108ce <quorem+0x106>
 80108b8:	613c      	str	r4, [r7, #16]
 80108ba:	4630      	mov	r0, r6
 80108bc:	b003      	add	sp, #12
 80108be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c2:	6812      	ldr	r2, [r2, #0]
 80108c4:	3b04      	subs	r3, #4
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	d1cc      	bne.n	8010864 <quorem+0x9c>
 80108ca:	3c01      	subs	r4, #1
 80108cc:	e7c7      	b.n	801085e <quorem+0x96>
 80108ce:	6812      	ldr	r2, [r2, #0]
 80108d0:	3b04      	subs	r3, #4
 80108d2:	2a00      	cmp	r2, #0
 80108d4:	d1f0      	bne.n	80108b8 <quorem+0xf0>
 80108d6:	3c01      	subs	r4, #1
 80108d8:	e7eb      	b.n	80108b2 <quorem+0xea>
 80108da:	2000      	movs	r0, #0
 80108dc:	e7ee      	b.n	80108bc <quorem+0xf4>
	...

080108e0 <_dtoa_r>:
 80108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	ed2d 8b04 	vpush	{d8-d9}
 80108e8:	ec57 6b10 	vmov	r6, r7, d0
 80108ec:	b093      	sub	sp, #76	; 0x4c
 80108ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80108f4:	9106      	str	r1, [sp, #24]
 80108f6:	ee10 aa10 	vmov	sl, s0
 80108fa:	4604      	mov	r4, r0
 80108fc:	9209      	str	r2, [sp, #36]	; 0x24
 80108fe:	930c      	str	r3, [sp, #48]	; 0x30
 8010900:	46bb      	mov	fp, r7
 8010902:	b975      	cbnz	r5, 8010922 <_dtoa_r+0x42>
 8010904:	2010      	movs	r0, #16
 8010906:	f7ff f9b1 	bl	800fc6c <malloc>
 801090a:	4602      	mov	r2, r0
 801090c:	6260      	str	r0, [r4, #36]	; 0x24
 801090e:	b920      	cbnz	r0, 801091a <_dtoa_r+0x3a>
 8010910:	4ba7      	ldr	r3, [pc, #668]	; (8010bb0 <_dtoa_r+0x2d0>)
 8010912:	21ea      	movs	r1, #234	; 0xea
 8010914:	48a7      	ldr	r0, [pc, #668]	; (8010bb4 <_dtoa_r+0x2d4>)
 8010916:	f7ff ff39 	bl	801078c <__assert_func>
 801091a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801091e:	6005      	str	r5, [r0, #0]
 8010920:	60c5      	str	r5, [r0, #12]
 8010922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010924:	6819      	ldr	r1, [r3, #0]
 8010926:	b151      	cbz	r1, 801093e <_dtoa_r+0x5e>
 8010928:	685a      	ldr	r2, [r3, #4]
 801092a:	604a      	str	r2, [r1, #4]
 801092c:	2301      	movs	r3, #1
 801092e:	4093      	lsls	r3, r2
 8010930:	608b      	str	r3, [r1, #8]
 8010932:	4620      	mov	r0, r4
 8010934:	f000 ff30 	bl	8011798 <_Bfree>
 8010938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801093a:	2200      	movs	r2, #0
 801093c:	601a      	str	r2, [r3, #0]
 801093e:	1e3b      	subs	r3, r7, #0
 8010940:	bfaa      	itet	ge
 8010942:	2300      	movge	r3, #0
 8010944:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010948:	f8c8 3000 	strge.w	r3, [r8]
 801094c:	4b9a      	ldr	r3, [pc, #616]	; (8010bb8 <_dtoa_r+0x2d8>)
 801094e:	bfbc      	itt	lt
 8010950:	2201      	movlt	r2, #1
 8010952:	f8c8 2000 	strlt.w	r2, [r8]
 8010956:	ea33 030b 	bics.w	r3, r3, fp
 801095a:	d11b      	bne.n	8010994 <_dtoa_r+0xb4>
 801095c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801095e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010962:	6013      	str	r3, [r2, #0]
 8010964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010968:	4333      	orrs	r3, r6
 801096a:	f000 8592 	beq.w	8011492 <_dtoa_r+0xbb2>
 801096e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010970:	b963      	cbnz	r3, 801098c <_dtoa_r+0xac>
 8010972:	4b92      	ldr	r3, [pc, #584]	; (8010bbc <_dtoa_r+0x2dc>)
 8010974:	e022      	b.n	80109bc <_dtoa_r+0xdc>
 8010976:	4b92      	ldr	r3, [pc, #584]	; (8010bc0 <_dtoa_r+0x2e0>)
 8010978:	9301      	str	r3, [sp, #4]
 801097a:	3308      	adds	r3, #8
 801097c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801097e:	6013      	str	r3, [r2, #0]
 8010980:	9801      	ldr	r0, [sp, #4]
 8010982:	b013      	add	sp, #76	; 0x4c
 8010984:	ecbd 8b04 	vpop	{d8-d9}
 8010988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098c:	4b8b      	ldr	r3, [pc, #556]	; (8010bbc <_dtoa_r+0x2dc>)
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	3303      	adds	r3, #3
 8010992:	e7f3      	b.n	801097c <_dtoa_r+0x9c>
 8010994:	2200      	movs	r2, #0
 8010996:	2300      	movs	r3, #0
 8010998:	4650      	mov	r0, sl
 801099a:	4659      	mov	r1, fp
 801099c:	f7f0 f8ac 	bl	8000af8 <__aeabi_dcmpeq>
 80109a0:	ec4b ab19 	vmov	d9, sl, fp
 80109a4:	4680      	mov	r8, r0
 80109a6:	b158      	cbz	r0, 80109c0 <_dtoa_r+0xe0>
 80109a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109aa:	2301      	movs	r3, #1
 80109ac:	6013      	str	r3, [r2, #0]
 80109ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f000 856b 	beq.w	801148c <_dtoa_r+0xbac>
 80109b6:	4883      	ldr	r0, [pc, #524]	; (8010bc4 <_dtoa_r+0x2e4>)
 80109b8:	6018      	str	r0, [r3, #0]
 80109ba:	1e43      	subs	r3, r0, #1
 80109bc:	9301      	str	r3, [sp, #4]
 80109be:	e7df      	b.n	8010980 <_dtoa_r+0xa0>
 80109c0:	ec4b ab10 	vmov	d0, sl, fp
 80109c4:	aa10      	add	r2, sp, #64	; 0x40
 80109c6:	a911      	add	r1, sp, #68	; 0x44
 80109c8:	4620      	mov	r0, r4
 80109ca:	f001 f9cd 	bl	8011d68 <__d2b>
 80109ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80109d2:	ee08 0a10 	vmov	s16, r0
 80109d6:	2d00      	cmp	r5, #0
 80109d8:	f000 8084 	beq.w	8010ae4 <_dtoa_r+0x204>
 80109dc:	ee19 3a90 	vmov	r3, s19
 80109e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80109e8:	4656      	mov	r6, sl
 80109ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80109ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80109f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80109f6:	4b74      	ldr	r3, [pc, #464]	; (8010bc8 <_dtoa_r+0x2e8>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	4630      	mov	r0, r6
 80109fc:	4639      	mov	r1, r7
 80109fe:	f7ef fc5b 	bl	80002b8 <__aeabi_dsub>
 8010a02:	a365      	add	r3, pc, #404	; (adr r3, 8010b98 <_dtoa_r+0x2b8>)
 8010a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a08:	f7ef fe0e 	bl	8000628 <__aeabi_dmul>
 8010a0c:	a364      	add	r3, pc, #400	; (adr r3, 8010ba0 <_dtoa_r+0x2c0>)
 8010a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a12:	f7ef fc53 	bl	80002bc <__adddf3>
 8010a16:	4606      	mov	r6, r0
 8010a18:	4628      	mov	r0, r5
 8010a1a:	460f      	mov	r7, r1
 8010a1c:	f7ef fd9a 	bl	8000554 <__aeabi_i2d>
 8010a20:	a361      	add	r3, pc, #388	; (adr r3, 8010ba8 <_dtoa_r+0x2c8>)
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	f7ef fdff 	bl	8000628 <__aeabi_dmul>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	4630      	mov	r0, r6
 8010a30:	4639      	mov	r1, r7
 8010a32:	f7ef fc43 	bl	80002bc <__adddf3>
 8010a36:	4606      	mov	r6, r0
 8010a38:	460f      	mov	r7, r1
 8010a3a:	f7f0 f8a5 	bl	8000b88 <__aeabi_d2iz>
 8010a3e:	2200      	movs	r2, #0
 8010a40:	9000      	str	r0, [sp, #0]
 8010a42:	2300      	movs	r3, #0
 8010a44:	4630      	mov	r0, r6
 8010a46:	4639      	mov	r1, r7
 8010a48:	f7f0 f860 	bl	8000b0c <__aeabi_dcmplt>
 8010a4c:	b150      	cbz	r0, 8010a64 <_dtoa_r+0x184>
 8010a4e:	9800      	ldr	r0, [sp, #0]
 8010a50:	f7ef fd80 	bl	8000554 <__aeabi_i2d>
 8010a54:	4632      	mov	r2, r6
 8010a56:	463b      	mov	r3, r7
 8010a58:	f7f0 f84e 	bl	8000af8 <__aeabi_dcmpeq>
 8010a5c:	b910      	cbnz	r0, 8010a64 <_dtoa_r+0x184>
 8010a5e:	9b00      	ldr	r3, [sp, #0]
 8010a60:	3b01      	subs	r3, #1
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	9b00      	ldr	r3, [sp, #0]
 8010a66:	2b16      	cmp	r3, #22
 8010a68:	d85a      	bhi.n	8010b20 <_dtoa_r+0x240>
 8010a6a:	9a00      	ldr	r2, [sp, #0]
 8010a6c:	4b57      	ldr	r3, [pc, #348]	; (8010bcc <_dtoa_r+0x2ec>)
 8010a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	ec51 0b19 	vmov	r0, r1, d9
 8010a7a:	f7f0 f847 	bl	8000b0c <__aeabi_dcmplt>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d050      	beq.n	8010b24 <_dtoa_r+0x244>
 8010a82:	9b00      	ldr	r3, [sp, #0]
 8010a84:	3b01      	subs	r3, #1
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	2300      	movs	r3, #0
 8010a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a8e:	1b5d      	subs	r5, r3, r5
 8010a90:	1e6b      	subs	r3, r5, #1
 8010a92:	9305      	str	r3, [sp, #20]
 8010a94:	bf45      	ittet	mi
 8010a96:	f1c5 0301 	rsbmi	r3, r5, #1
 8010a9a:	9304      	strmi	r3, [sp, #16]
 8010a9c:	2300      	movpl	r3, #0
 8010a9e:	2300      	movmi	r3, #0
 8010aa0:	bf4c      	ite	mi
 8010aa2:	9305      	strmi	r3, [sp, #20]
 8010aa4:	9304      	strpl	r3, [sp, #16]
 8010aa6:	9b00      	ldr	r3, [sp, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	db3d      	blt.n	8010b28 <_dtoa_r+0x248>
 8010aac:	9b05      	ldr	r3, [sp, #20]
 8010aae:	9a00      	ldr	r2, [sp, #0]
 8010ab0:	920a      	str	r2, [sp, #40]	; 0x28
 8010ab2:	4413      	add	r3, r2
 8010ab4:	9305      	str	r3, [sp, #20]
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	9307      	str	r3, [sp, #28]
 8010aba:	9b06      	ldr	r3, [sp, #24]
 8010abc:	2b09      	cmp	r3, #9
 8010abe:	f200 8089 	bhi.w	8010bd4 <_dtoa_r+0x2f4>
 8010ac2:	2b05      	cmp	r3, #5
 8010ac4:	bfc4      	itt	gt
 8010ac6:	3b04      	subgt	r3, #4
 8010ac8:	9306      	strgt	r3, [sp, #24]
 8010aca:	9b06      	ldr	r3, [sp, #24]
 8010acc:	f1a3 0302 	sub.w	r3, r3, #2
 8010ad0:	bfcc      	ite	gt
 8010ad2:	2500      	movgt	r5, #0
 8010ad4:	2501      	movle	r5, #1
 8010ad6:	2b03      	cmp	r3, #3
 8010ad8:	f200 8087 	bhi.w	8010bea <_dtoa_r+0x30a>
 8010adc:	e8df f003 	tbb	[pc, r3]
 8010ae0:	59383a2d 	.word	0x59383a2d
 8010ae4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010ae8:	441d      	add	r5, r3
 8010aea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010aee:	2b20      	cmp	r3, #32
 8010af0:	bfc1      	itttt	gt
 8010af2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010af6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010afa:	fa0b f303 	lslgt.w	r3, fp, r3
 8010afe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010b02:	bfda      	itte	le
 8010b04:	f1c3 0320 	rsble	r3, r3, #32
 8010b08:	fa06 f003 	lslle.w	r0, r6, r3
 8010b0c:	4318      	orrgt	r0, r3
 8010b0e:	f7ef fd11 	bl	8000534 <__aeabi_ui2d>
 8010b12:	2301      	movs	r3, #1
 8010b14:	4606      	mov	r6, r0
 8010b16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010b1a:	3d01      	subs	r5, #1
 8010b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8010b1e:	e76a      	b.n	80109f6 <_dtoa_r+0x116>
 8010b20:	2301      	movs	r3, #1
 8010b22:	e7b2      	b.n	8010a8a <_dtoa_r+0x1aa>
 8010b24:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b26:	e7b1      	b.n	8010a8c <_dtoa_r+0x1ac>
 8010b28:	9b04      	ldr	r3, [sp, #16]
 8010b2a:	9a00      	ldr	r2, [sp, #0]
 8010b2c:	1a9b      	subs	r3, r3, r2
 8010b2e:	9304      	str	r3, [sp, #16]
 8010b30:	4253      	negs	r3, r2
 8010b32:	9307      	str	r3, [sp, #28]
 8010b34:	2300      	movs	r3, #0
 8010b36:	930a      	str	r3, [sp, #40]	; 0x28
 8010b38:	e7bf      	b.n	8010aba <_dtoa_r+0x1da>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	9308      	str	r3, [sp, #32]
 8010b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	dc55      	bgt.n	8010bf0 <_dtoa_r+0x310>
 8010b44:	2301      	movs	r3, #1
 8010b46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b4e:	e00c      	b.n	8010b6a <_dtoa_r+0x28a>
 8010b50:	2301      	movs	r3, #1
 8010b52:	e7f3      	b.n	8010b3c <_dtoa_r+0x25c>
 8010b54:	2300      	movs	r3, #0
 8010b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b58:	9308      	str	r3, [sp, #32]
 8010b5a:	9b00      	ldr	r3, [sp, #0]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	9302      	str	r3, [sp, #8]
 8010b60:	3301      	adds	r3, #1
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	9303      	str	r3, [sp, #12]
 8010b66:	bfb8      	it	lt
 8010b68:	2301      	movlt	r3, #1
 8010b6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	6042      	str	r2, [r0, #4]
 8010b70:	2204      	movs	r2, #4
 8010b72:	f102 0614 	add.w	r6, r2, #20
 8010b76:	429e      	cmp	r6, r3
 8010b78:	6841      	ldr	r1, [r0, #4]
 8010b7a:	d93d      	bls.n	8010bf8 <_dtoa_r+0x318>
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f000 fdcb 	bl	8011718 <_Balloc>
 8010b82:	9001      	str	r0, [sp, #4]
 8010b84:	2800      	cmp	r0, #0
 8010b86:	d13b      	bne.n	8010c00 <_dtoa_r+0x320>
 8010b88:	4b11      	ldr	r3, [pc, #68]	; (8010bd0 <_dtoa_r+0x2f0>)
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b90:	e6c0      	b.n	8010914 <_dtoa_r+0x34>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e7df      	b.n	8010b56 <_dtoa_r+0x276>
 8010b96:	bf00      	nop
 8010b98:	636f4361 	.word	0x636f4361
 8010b9c:	3fd287a7 	.word	0x3fd287a7
 8010ba0:	8b60c8b3 	.word	0x8b60c8b3
 8010ba4:	3fc68a28 	.word	0x3fc68a28
 8010ba8:	509f79fb 	.word	0x509f79fb
 8010bac:	3fd34413 	.word	0x3fd34413
 8010bb0:	08012c36 	.word	0x08012c36
 8010bb4:	08012c4d 	.word	0x08012c4d
 8010bb8:	7ff00000 	.word	0x7ff00000
 8010bbc:	08012c32 	.word	0x08012c32
 8010bc0:	08012c29 	.word	0x08012c29
 8010bc4:	08012ac9 	.word	0x08012ac9
 8010bc8:	3ff80000 	.word	0x3ff80000
 8010bcc:	08012db0 	.word	0x08012db0
 8010bd0:	08012ca8 	.word	0x08012ca8
 8010bd4:	2501      	movs	r5, #1
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	9306      	str	r3, [sp, #24]
 8010bda:	9508      	str	r5, [sp, #32]
 8010bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010be0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010be4:	2200      	movs	r2, #0
 8010be6:	2312      	movs	r3, #18
 8010be8:	e7b0      	b.n	8010b4c <_dtoa_r+0x26c>
 8010bea:	2301      	movs	r3, #1
 8010bec:	9308      	str	r3, [sp, #32]
 8010bee:	e7f5      	b.n	8010bdc <_dtoa_r+0x2fc>
 8010bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010bf6:	e7b8      	b.n	8010b6a <_dtoa_r+0x28a>
 8010bf8:	3101      	adds	r1, #1
 8010bfa:	6041      	str	r1, [r0, #4]
 8010bfc:	0052      	lsls	r2, r2, #1
 8010bfe:	e7b8      	b.n	8010b72 <_dtoa_r+0x292>
 8010c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c02:	9a01      	ldr	r2, [sp, #4]
 8010c04:	601a      	str	r2, [r3, #0]
 8010c06:	9b03      	ldr	r3, [sp, #12]
 8010c08:	2b0e      	cmp	r3, #14
 8010c0a:	f200 809d 	bhi.w	8010d48 <_dtoa_r+0x468>
 8010c0e:	2d00      	cmp	r5, #0
 8010c10:	f000 809a 	beq.w	8010d48 <_dtoa_r+0x468>
 8010c14:	9b00      	ldr	r3, [sp, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	dd32      	ble.n	8010c80 <_dtoa_r+0x3a0>
 8010c1a:	4ab7      	ldr	r2, [pc, #732]	; (8010ef8 <_dtoa_r+0x618>)
 8010c1c:	f003 030f 	and.w	r3, r3, #15
 8010c20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c28:	9b00      	ldr	r3, [sp, #0]
 8010c2a:	05d8      	lsls	r0, r3, #23
 8010c2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010c30:	d516      	bpl.n	8010c60 <_dtoa_r+0x380>
 8010c32:	4bb2      	ldr	r3, [pc, #712]	; (8010efc <_dtoa_r+0x61c>)
 8010c34:	ec51 0b19 	vmov	r0, r1, d9
 8010c38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c3c:	f7ef fe1e 	bl	800087c <__aeabi_ddiv>
 8010c40:	f007 070f 	and.w	r7, r7, #15
 8010c44:	4682      	mov	sl, r0
 8010c46:	468b      	mov	fp, r1
 8010c48:	2503      	movs	r5, #3
 8010c4a:	4eac      	ldr	r6, [pc, #688]	; (8010efc <_dtoa_r+0x61c>)
 8010c4c:	b957      	cbnz	r7, 8010c64 <_dtoa_r+0x384>
 8010c4e:	4642      	mov	r2, r8
 8010c50:	464b      	mov	r3, r9
 8010c52:	4650      	mov	r0, sl
 8010c54:	4659      	mov	r1, fp
 8010c56:	f7ef fe11 	bl	800087c <__aeabi_ddiv>
 8010c5a:	4682      	mov	sl, r0
 8010c5c:	468b      	mov	fp, r1
 8010c5e:	e028      	b.n	8010cb2 <_dtoa_r+0x3d2>
 8010c60:	2502      	movs	r5, #2
 8010c62:	e7f2      	b.n	8010c4a <_dtoa_r+0x36a>
 8010c64:	07f9      	lsls	r1, r7, #31
 8010c66:	d508      	bpl.n	8010c7a <_dtoa_r+0x39a>
 8010c68:	4640      	mov	r0, r8
 8010c6a:	4649      	mov	r1, r9
 8010c6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c70:	f7ef fcda 	bl	8000628 <__aeabi_dmul>
 8010c74:	3501      	adds	r5, #1
 8010c76:	4680      	mov	r8, r0
 8010c78:	4689      	mov	r9, r1
 8010c7a:	107f      	asrs	r7, r7, #1
 8010c7c:	3608      	adds	r6, #8
 8010c7e:	e7e5      	b.n	8010c4c <_dtoa_r+0x36c>
 8010c80:	f000 809b 	beq.w	8010dba <_dtoa_r+0x4da>
 8010c84:	9b00      	ldr	r3, [sp, #0]
 8010c86:	4f9d      	ldr	r7, [pc, #628]	; (8010efc <_dtoa_r+0x61c>)
 8010c88:	425e      	negs	r6, r3
 8010c8a:	4b9b      	ldr	r3, [pc, #620]	; (8010ef8 <_dtoa_r+0x618>)
 8010c8c:	f006 020f 	and.w	r2, r6, #15
 8010c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c98:	ec51 0b19 	vmov	r0, r1, d9
 8010c9c:	f7ef fcc4 	bl	8000628 <__aeabi_dmul>
 8010ca0:	1136      	asrs	r6, r6, #4
 8010ca2:	4682      	mov	sl, r0
 8010ca4:	468b      	mov	fp, r1
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	2502      	movs	r5, #2
 8010caa:	2e00      	cmp	r6, #0
 8010cac:	d17a      	bne.n	8010da4 <_dtoa_r+0x4c4>
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1d3      	bne.n	8010c5a <_dtoa_r+0x37a>
 8010cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f000 8082 	beq.w	8010dbe <_dtoa_r+0x4de>
 8010cba:	4b91      	ldr	r3, [pc, #580]	; (8010f00 <_dtoa_r+0x620>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	4650      	mov	r0, sl
 8010cc0:	4659      	mov	r1, fp
 8010cc2:	f7ef ff23 	bl	8000b0c <__aeabi_dcmplt>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d079      	beq.n	8010dbe <_dtoa_r+0x4de>
 8010cca:	9b03      	ldr	r3, [sp, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d076      	beq.n	8010dbe <_dtoa_r+0x4de>
 8010cd0:	9b02      	ldr	r3, [sp, #8]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	dd36      	ble.n	8010d44 <_dtoa_r+0x464>
 8010cd6:	9b00      	ldr	r3, [sp, #0]
 8010cd8:	4650      	mov	r0, sl
 8010cda:	4659      	mov	r1, fp
 8010cdc:	1e5f      	subs	r7, r3, #1
 8010cde:	2200      	movs	r2, #0
 8010ce0:	4b88      	ldr	r3, [pc, #544]	; (8010f04 <_dtoa_r+0x624>)
 8010ce2:	f7ef fca1 	bl	8000628 <__aeabi_dmul>
 8010ce6:	9e02      	ldr	r6, [sp, #8]
 8010ce8:	4682      	mov	sl, r0
 8010cea:	468b      	mov	fp, r1
 8010cec:	3501      	adds	r5, #1
 8010cee:	4628      	mov	r0, r5
 8010cf0:	f7ef fc30 	bl	8000554 <__aeabi_i2d>
 8010cf4:	4652      	mov	r2, sl
 8010cf6:	465b      	mov	r3, fp
 8010cf8:	f7ef fc96 	bl	8000628 <__aeabi_dmul>
 8010cfc:	4b82      	ldr	r3, [pc, #520]	; (8010f08 <_dtoa_r+0x628>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f7ef fadc 	bl	80002bc <__adddf3>
 8010d04:	46d0      	mov	r8, sl
 8010d06:	46d9      	mov	r9, fp
 8010d08:	4682      	mov	sl, r0
 8010d0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010d0e:	2e00      	cmp	r6, #0
 8010d10:	d158      	bne.n	8010dc4 <_dtoa_r+0x4e4>
 8010d12:	4b7e      	ldr	r3, [pc, #504]	; (8010f0c <_dtoa_r+0x62c>)
 8010d14:	2200      	movs	r2, #0
 8010d16:	4640      	mov	r0, r8
 8010d18:	4649      	mov	r1, r9
 8010d1a:	f7ef facd 	bl	80002b8 <__aeabi_dsub>
 8010d1e:	4652      	mov	r2, sl
 8010d20:	465b      	mov	r3, fp
 8010d22:	4680      	mov	r8, r0
 8010d24:	4689      	mov	r9, r1
 8010d26:	f7ef ff0f 	bl	8000b48 <__aeabi_dcmpgt>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	f040 8295 	bne.w	801125a <_dtoa_r+0x97a>
 8010d30:	4652      	mov	r2, sl
 8010d32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010d36:	4640      	mov	r0, r8
 8010d38:	4649      	mov	r1, r9
 8010d3a:	f7ef fee7 	bl	8000b0c <__aeabi_dcmplt>
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	f040 8289 	bne.w	8011256 <_dtoa_r+0x976>
 8010d44:	ec5b ab19 	vmov	sl, fp, d9
 8010d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	f2c0 8148 	blt.w	8010fe0 <_dtoa_r+0x700>
 8010d50:	9a00      	ldr	r2, [sp, #0]
 8010d52:	2a0e      	cmp	r2, #14
 8010d54:	f300 8144 	bgt.w	8010fe0 <_dtoa_r+0x700>
 8010d58:	4b67      	ldr	r3, [pc, #412]	; (8010ef8 <_dtoa_r+0x618>)
 8010d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f280 80d5 	bge.w	8010f14 <_dtoa_r+0x634>
 8010d6a:	9b03      	ldr	r3, [sp, #12]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f300 80d1 	bgt.w	8010f14 <_dtoa_r+0x634>
 8010d72:	f040 826f 	bne.w	8011254 <_dtoa_r+0x974>
 8010d76:	4b65      	ldr	r3, [pc, #404]	; (8010f0c <_dtoa_r+0x62c>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	4640      	mov	r0, r8
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	f7ef fc53 	bl	8000628 <__aeabi_dmul>
 8010d82:	4652      	mov	r2, sl
 8010d84:	465b      	mov	r3, fp
 8010d86:	f7ef fed5 	bl	8000b34 <__aeabi_dcmpge>
 8010d8a:	9e03      	ldr	r6, [sp, #12]
 8010d8c:	4637      	mov	r7, r6
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	f040 8245 	bne.w	801121e <_dtoa_r+0x93e>
 8010d94:	9d01      	ldr	r5, [sp, #4]
 8010d96:	2331      	movs	r3, #49	; 0x31
 8010d98:	f805 3b01 	strb.w	r3, [r5], #1
 8010d9c:	9b00      	ldr	r3, [sp, #0]
 8010d9e:	3301      	adds	r3, #1
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	e240      	b.n	8011226 <_dtoa_r+0x946>
 8010da4:	07f2      	lsls	r2, r6, #31
 8010da6:	d505      	bpl.n	8010db4 <_dtoa_r+0x4d4>
 8010da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dac:	f7ef fc3c 	bl	8000628 <__aeabi_dmul>
 8010db0:	3501      	adds	r5, #1
 8010db2:	2301      	movs	r3, #1
 8010db4:	1076      	asrs	r6, r6, #1
 8010db6:	3708      	adds	r7, #8
 8010db8:	e777      	b.n	8010caa <_dtoa_r+0x3ca>
 8010dba:	2502      	movs	r5, #2
 8010dbc:	e779      	b.n	8010cb2 <_dtoa_r+0x3d2>
 8010dbe:	9f00      	ldr	r7, [sp, #0]
 8010dc0:	9e03      	ldr	r6, [sp, #12]
 8010dc2:	e794      	b.n	8010cee <_dtoa_r+0x40e>
 8010dc4:	9901      	ldr	r1, [sp, #4]
 8010dc6:	4b4c      	ldr	r3, [pc, #304]	; (8010ef8 <_dtoa_r+0x618>)
 8010dc8:	4431      	add	r1, r6
 8010dca:	910d      	str	r1, [sp, #52]	; 0x34
 8010dcc:	9908      	ldr	r1, [sp, #32]
 8010dce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010dd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010dd6:	2900      	cmp	r1, #0
 8010dd8:	d043      	beq.n	8010e62 <_dtoa_r+0x582>
 8010dda:	494d      	ldr	r1, [pc, #308]	; (8010f10 <_dtoa_r+0x630>)
 8010ddc:	2000      	movs	r0, #0
 8010dde:	f7ef fd4d 	bl	800087c <__aeabi_ddiv>
 8010de2:	4652      	mov	r2, sl
 8010de4:	465b      	mov	r3, fp
 8010de6:	f7ef fa67 	bl	80002b8 <__aeabi_dsub>
 8010dea:	9d01      	ldr	r5, [sp, #4]
 8010dec:	4682      	mov	sl, r0
 8010dee:	468b      	mov	fp, r1
 8010df0:	4649      	mov	r1, r9
 8010df2:	4640      	mov	r0, r8
 8010df4:	f7ef fec8 	bl	8000b88 <__aeabi_d2iz>
 8010df8:	4606      	mov	r6, r0
 8010dfa:	f7ef fbab 	bl	8000554 <__aeabi_i2d>
 8010dfe:	4602      	mov	r2, r0
 8010e00:	460b      	mov	r3, r1
 8010e02:	4640      	mov	r0, r8
 8010e04:	4649      	mov	r1, r9
 8010e06:	f7ef fa57 	bl	80002b8 <__aeabi_dsub>
 8010e0a:	3630      	adds	r6, #48	; 0x30
 8010e0c:	f805 6b01 	strb.w	r6, [r5], #1
 8010e10:	4652      	mov	r2, sl
 8010e12:	465b      	mov	r3, fp
 8010e14:	4680      	mov	r8, r0
 8010e16:	4689      	mov	r9, r1
 8010e18:	f7ef fe78 	bl	8000b0c <__aeabi_dcmplt>
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d163      	bne.n	8010ee8 <_dtoa_r+0x608>
 8010e20:	4642      	mov	r2, r8
 8010e22:	464b      	mov	r3, r9
 8010e24:	4936      	ldr	r1, [pc, #216]	; (8010f00 <_dtoa_r+0x620>)
 8010e26:	2000      	movs	r0, #0
 8010e28:	f7ef fa46 	bl	80002b8 <__aeabi_dsub>
 8010e2c:	4652      	mov	r2, sl
 8010e2e:	465b      	mov	r3, fp
 8010e30:	f7ef fe6c 	bl	8000b0c <__aeabi_dcmplt>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	f040 80b5 	bne.w	8010fa4 <_dtoa_r+0x6c4>
 8010e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e3c:	429d      	cmp	r5, r3
 8010e3e:	d081      	beq.n	8010d44 <_dtoa_r+0x464>
 8010e40:	4b30      	ldr	r3, [pc, #192]	; (8010f04 <_dtoa_r+0x624>)
 8010e42:	2200      	movs	r2, #0
 8010e44:	4650      	mov	r0, sl
 8010e46:	4659      	mov	r1, fp
 8010e48:	f7ef fbee 	bl	8000628 <__aeabi_dmul>
 8010e4c:	4b2d      	ldr	r3, [pc, #180]	; (8010f04 <_dtoa_r+0x624>)
 8010e4e:	4682      	mov	sl, r0
 8010e50:	468b      	mov	fp, r1
 8010e52:	4640      	mov	r0, r8
 8010e54:	4649      	mov	r1, r9
 8010e56:	2200      	movs	r2, #0
 8010e58:	f7ef fbe6 	bl	8000628 <__aeabi_dmul>
 8010e5c:	4680      	mov	r8, r0
 8010e5e:	4689      	mov	r9, r1
 8010e60:	e7c6      	b.n	8010df0 <_dtoa_r+0x510>
 8010e62:	4650      	mov	r0, sl
 8010e64:	4659      	mov	r1, fp
 8010e66:	f7ef fbdf 	bl	8000628 <__aeabi_dmul>
 8010e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e6c:	9d01      	ldr	r5, [sp, #4]
 8010e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e70:	4682      	mov	sl, r0
 8010e72:	468b      	mov	fp, r1
 8010e74:	4649      	mov	r1, r9
 8010e76:	4640      	mov	r0, r8
 8010e78:	f7ef fe86 	bl	8000b88 <__aeabi_d2iz>
 8010e7c:	4606      	mov	r6, r0
 8010e7e:	f7ef fb69 	bl	8000554 <__aeabi_i2d>
 8010e82:	3630      	adds	r6, #48	; 0x30
 8010e84:	4602      	mov	r2, r0
 8010e86:	460b      	mov	r3, r1
 8010e88:	4640      	mov	r0, r8
 8010e8a:	4649      	mov	r1, r9
 8010e8c:	f7ef fa14 	bl	80002b8 <__aeabi_dsub>
 8010e90:	f805 6b01 	strb.w	r6, [r5], #1
 8010e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e96:	429d      	cmp	r5, r3
 8010e98:	4680      	mov	r8, r0
 8010e9a:	4689      	mov	r9, r1
 8010e9c:	f04f 0200 	mov.w	r2, #0
 8010ea0:	d124      	bne.n	8010eec <_dtoa_r+0x60c>
 8010ea2:	4b1b      	ldr	r3, [pc, #108]	; (8010f10 <_dtoa_r+0x630>)
 8010ea4:	4650      	mov	r0, sl
 8010ea6:	4659      	mov	r1, fp
 8010ea8:	f7ef fa08 	bl	80002bc <__adddf3>
 8010eac:	4602      	mov	r2, r0
 8010eae:	460b      	mov	r3, r1
 8010eb0:	4640      	mov	r0, r8
 8010eb2:	4649      	mov	r1, r9
 8010eb4:	f7ef fe48 	bl	8000b48 <__aeabi_dcmpgt>
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	d173      	bne.n	8010fa4 <_dtoa_r+0x6c4>
 8010ebc:	4652      	mov	r2, sl
 8010ebe:	465b      	mov	r3, fp
 8010ec0:	4913      	ldr	r1, [pc, #76]	; (8010f10 <_dtoa_r+0x630>)
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	f7ef f9f8 	bl	80002b8 <__aeabi_dsub>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4640      	mov	r0, r8
 8010ece:	4649      	mov	r1, r9
 8010ed0:	f7ef fe1c 	bl	8000b0c <__aeabi_dcmplt>
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	f43f af35 	beq.w	8010d44 <_dtoa_r+0x464>
 8010eda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010edc:	1e6b      	subs	r3, r5, #1
 8010ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ee0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ee4:	2b30      	cmp	r3, #48	; 0x30
 8010ee6:	d0f8      	beq.n	8010eda <_dtoa_r+0x5fa>
 8010ee8:	9700      	str	r7, [sp, #0]
 8010eea:	e049      	b.n	8010f80 <_dtoa_r+0x6a0>
 8010eec:	4b05      	ldr	r3, [pc, #20]	; (8010f04 <_dtoa_r+0x624>)
 8010eee:	f7ef fb9b 	bl	8000628 <__aeabi_dmul>
 8010ef2:	4680      	mov	r8, r0
 8010ef4:	4689      	mov	r9, r1
 8010ef6:	e7bd      	b.n	8010e74 <_dtoa_r+0x594>
 8010ef8:	08012db0 	.word	0x08012db0
 8010efc:	08012d88 	.word	0x08012d88
 8010f00:	3ff00000 	.word	0x3ff00000
 8010f04:	40240000 	.word	0x40240000
 8010f08:	401c0000 	.word	0x401c0000
 8010f0c:	40140000 	.word	0x40140000
 8010f10:	3fe00000 	.word	0x3fe00000
 8010f14:	9d01      	ldr	r5, [sp, #4]
 8010f16:	4656      	mov	r6, sl
 8010f18:	465f      	mov	r7, fp
 8010f1a:	4642      	mov	r2, r8
 8010f1c:	464b      	mov	r3, r9
 8010f1e:	4630      	mov	r0, r6
 8010f20:	4639      	mov	r1, r7
 8010f22:	f7ef fcab 	bl	800087c <__aeabi_ddiv>
 8010f26:	f7ef fe2f 	bl	8000b88 <__aeabi_d2iz>
 8010f2a:	4682      	mov	sl, r0
 8010f2c:	f7ef fb12 	bl	8000554 <__aeabi_i2d>
 8010f30:	4642      	mov	r2, r8
 8010f32:	464b      	mov	r3, r9
 8010f34:	f7ef fb78 	bl	8000628 <__aeabi_dmul>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	4639      	mov	r1, r7
 8010f40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010f44:	f7ef f9b8 	bl	80002b8 <__aeabi_dsub>
 8010f48:	f805 6b01 	strb.w	r6, [r5], #1
 8010f4c:	9e01      	ldr	r6, [sp, #4]
 8010f4e:	9f03      	ldr	r7, [sp, #12]
 8010f50:	1bae      	subs	r6, r5, r6
 8010f52:	42b7      	cmp	r7, r6
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	d135      	bne.n	8010fc6 <_dtoa_r+0x6e6>
 8010f5a:	f7ef f9af 	bl	80002bc <__adddf3>
 8010f5e:	4642      	mov	r2, r8
 8010f60:	464b      	mov	r3, r9
 8010f62:	4606      	mov	r6, r0
 8010f64:	460f      	mov	r7, r1
 8010f66:	f7ef fdef 	bl	8000b48 <__aeabi_dcmpgt>
 8010f6a:	b9d0      	cbnz	r0, 8010fa2 <_dtoa_r+0x6c2>
 8010f6c:	4642      	mov	r2, r8
 8010f6e:	464b      	mov	r3, r9
 8010f70:	4630      	mov	r0, r6
 8010f72:	4639      	mov	r1, r7
 8010f74:	f7ef fdc0 	bl	8000af8 <__aeabi_dcmpeq>
 8010f78:	b110      	cbz	r0, 8010f80 <_dtoa_r+0x6a0>
 8010f7a:	f01a 0f01 	tst.w	sl, #1
 8010f7e:	d110      	bne.n	8010fa2 <_dtoa_r+0x6c2>
 8010f80:	4620      	mov	r0, r4
 8010f82:	ee18 1a10 	vmov	r1, s16
 8010f86:	f000 fc07 	bl	8011798 <_Bfree>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	9800      	ldr	r0, [sp, #0]
 8010f8e:	702b      	strb	r3, [r5, #0]
 8010f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f92:	3001      	adds	r0, #1
 8010f94:	6018      	str	r0, [r3, #0]
 8010f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f43f acf1 	beq.w	8010980 <_dtoa_r+0xa0>
 8010f9e:	601d      	str	r5, [r3, #0]
 8010fa0:	e4ee      	b.n	8010980 <_dtoa_r+0xa0>
 8010fa2:	9f00      	ldr	r7, [sp, #0]
 8010fa4:	462b      	mov	r3, r5
 8010fa6:	461d      	mov	r5, r3
 8010fa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fac:	2a39      	cmp	r2, #57	; 0x39
 8010fae:	d106      	bne.n	8010fbe <_dtoa_r+0x6de>
 8010fb0:	9a01      	ldr	r2, [sp, #4]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d1f7      	bne.n	8010fa6 <_dtoa_r+0x6c6>
 8010fb6:	9901      	ldr	r1, [sp, #4]
 8010fb8:	2230      	movs	r2, #48	; 0x30
 8010fba:	3701      	adds	r7, #1
 8010fbc:	700a      	strb	r2, [r1, #0]
 8010fbe:	781a      	ldrb	r2, [r3, #0]
 8010fc0:	3201      	adds	r2, #1
 8010fc2:	701a      	strb	r2, [r3, #0]
 8010fc4:	e790      	b.n	8010ee8 <_dtoa_r+0x608>
 8010fc6:	4ba6      	ldr	r3, [pc, #664]	; (8011260 <_dtoa_r+0x980>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f7ef fb2d 	bl	8000628 <__aeabi_dmul>
 8010fce:	2200      	movs	r2, #0
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	460f      	mov	r7, r1
 8010fd6:	f7ef fd8f 	bl	8000af8 <__aeabi_dcmpeq>
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	d09d      	beq.n	8010f1a <_dtoa_r+0x63a>
 8010fde:	e7cf      	b.n	8010f80 <_dtoa_r+0x6a0>
 8010fe0:	9a08      	ldr	r2, [sp, #32]
 8010fe2:	2a00      	cmp	r2, #0
 8010fe4:	f000 80d7 	beq.w	8011196 <_dtoa_r+0x8b6>
 8010fe8:	9a06      	ldr	r2, [sp, #24]
 8010fea:	2a01      	cmp	r2, #1
 8010fec:	f300 80ba 	bgt.w	8011164 <_dtoa_r+0x884>
 8010ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ff2:	2a00      	cmp	r2, #0
 8010ff4:	f000 80b2 	beq.w	801115c <_dtoa_r+0x87c>
 8010ff8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010ffc:	9e07      	ldr	r6, [sp, #28]
 8010ffe:	9d04      	ldr	r5, [sp, #16]
 8011000:	9a04      	ldr	r2, [sp, #16]
 8011002:	441a      	add	r2, r3
 8011004:	9204      	str	r2, [sp, #16]
 8011006:	9a05      	ldr	r2, [sp, #20]
 8011008:	2101      	movs	r1, #1
 801100a:	441a      	add	r2, r3
 801100c:	4620      	mov	r0, r4
 801100e:	9205      	str	r2, [sp, #20]
 8011010:	f000 fc7a 	bl	8011908 <__i2b>
 8011014:	4607      	mov	r7, r0
 8011016:	2d00      	cmp	r5, #0
 8011018:	dd0c      	ble.n	8011034 <_dtoa_r+0x754>
 801101a:	9b05      	ldr	r3, [sp, #20]
 801101c:	2b00      	cmp	r3, #0
 801101e:	dd09      	ble.n	8011034 <_dtoa_r+0x754>
 8011020:	42ab      	cmp	r3, r5
 8011022:	9a04      	ldr	r2, [sp, #16]
 8011024:	bfa8      	it	ge
 8011026:	462b      	movge	r3, r5
 8011028:	1ad2      	subs	r2, r2, r3
 801102a:	9204      	str	r2, [sp, #16]
 801102c:	9a05      	ldr	r2, [sp, #20]
 801102e:	1aed      	subs	r5, r5, r3
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	9305      	str	r3, [sp, #20]
 8011034:	9b07      	ldr	r3, [sp, #28]
 8011036:	b31b      	cbz	r3, 8011080 <_dtoa_r+0x7a0>
 8011038:	9b08      	ldr	r3, [sp, #32]
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 80af 	beq.w	801119e <_dtoa_r+0x8be>
 8011040:	2e00      	cmp	r6, #0
 8011042:	dd13      	ble.n	801106c <_dtoa_r+0x78c>
 8011044:	4639      	mov	r1, r7
 8011046:	4632      	mov	r2, r6
 8011048:	4620      	mov	r0, r4
 801104a:	f000 fd1d 	bl	8011a88 <__pow5mult>
 801104e:	ee18 2a10 	vmov	r2, s16
 8011052:	4601      	mov	r1, r0
 8011054:	4607      	mov	r7, r0
 8011056:	4620      	mov	r0, r4
 8011058:	f000 fc6c 	bl	8011934 <__multiply>
 801105c:	ee18 1a10 	vmov	r1, s16
 8011060:	4680      	mov	r8, r0
 8011062:	4620      	mov	r0, r4
 8011064:	f000 fb98 	bl	8011798 <_Bfree>
 8011068:	ee08 8a10 	vmov	s16, r8
 801106c:	9b07      	ldr	r3, [sp, #28]
 801106e:	1b9a      	subs	r2, r3, r6
 8011070:	d006      	beq.n	8011080 <_dtoa_r+0x7a0>
 8011072:	ee18 1a10 	vmov	r1, s16
 8011076:	4620      	mov	r0, r4
 8011078:	f000 fd06 	bl	8011a88 <__pow5mult>
 801107c:	ee08 0a10 	vmov	s16, r0
 8011080:	2101      	movs	r1, #1
 8011082:	4620      	mov	r0, r4
 8011084:	f000 fc40 	bl	8011908 <__i2b>
 8011088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801108a:	2b00      	cmp	r3, #0
 801108c:	4606      	mov	r6, r0
 801108e:	f340 8088 	ble.w	80111a2 <_dtoa_r+0x8c2>
 8011092:	461a      	mov	r2, r3
 8011094:	4601      	mov	r1, r0
 8011096:	4620      	mov	r0, r4
 8011098:	f000 fcf6 	bl	8011a88 <__pow5mult>
 801109c:	9b06      	ldr	r3, [sp, #24]
 801109e:	2b01      	cmp	r3, #1
 80110a0:	4606      	mov	r6, r0
 80110a2:	f340 8081 	ble.w	80111a8 <_dtoa_r+0x8c8>
 80110a6:	f04f 0800 	mov.w	r8, #0
 80110aa:	6933      	ldr	r3, [r6, #16]
 80110ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80110b0:	6918      	ldr	r0, [r3, #16]
 80110b2:	f000 fbd9 	bl	8011868 <__hi0bits>
 80110b6:	f1c0 0020 	rsb	r0, r0, #32
 80110ba:	9b05      	ldr	r3, [sp, #20]
 80110bc:	4418      	add	r0, r3
 80110be:	f010 001f 	ands.w	r0, r0, #31
 80110c2:	f000 8092 	beq.w	80111ea <_dtoa_r+0x90a>
 80110c6:	f1c0 0320 	rsb	r3, r0, #32
 80110ca:	2b04      	cmp	r3, #4
 80110cc:	f340 808a 	ble.w	80111e4 <_dtoa_r+0x904>
 80110d0:	f1c0 001c 	rsb	r0, r0, #28
 80110d4:	9b04      	ldr	r3, [sp, #16]
 80110d6:	4403      	add	r3, r0
 80110d8:	9304      	str	r3, [sp, #16]
 80110da:	9b05      	ldr	r3, [sp, #20]
 80110dc:	4403      	add	r3, r0
 80110de:	4405      	add	r5, r0
 80110e0:	9305      	str	r3, [sp, #20]
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	dd07      	ble.n	80110f8 <_dtoa_r+0x818>
 80110e8:	ee18 1a10 	vmov	r1, s16
 80110ec:	461a      	mov	r2, r3
 80110ee:	4620      	mov	r0, r4
 80110f0:	f000 fd24 	bl	8011b3c <__lshift>
 80110f4:	ee08 0a10 	vmov	s16, r0
 80110f8:	9b05      	ldr	r3, [sp, #20]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	dd05      	ble.n	801110a <_dtoa_r+0x82a>
 80110fe:	4631      	mov	r1, r6
 8011100:	461a      	mov	r2, r3
 8011102:	4620      	mov	r0, r4
 8011104:	f000 fd1a 	bl	8011b3c <__lshift>
 8011108:	4606      	mov	r6, r0
 801110a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801110c:	2b00      	cmp	r3, #0
 801110e:	d06e      	beq.n	80111ee <_dtoa_r+0x90e>
 8011110:	ee18 0a10 	vmov	r0, s16
 8011114:	4631      	mov	r1, r6
 8011116:	f000 fd81 	bl	8011c1c <__mcmp>
 801111a:	2800      	cmp	r0, #0
 801111c:	da67      	bge.n	80111ee <_dtoa_r+0x90e>
 801111e:	9b00      	ldr	r3, [sp, #0]
 8011120:	3b01      	subs	r3, #1
 8011122:	ee18 1a10 	vmov	r1, s16
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	220a      	movs	r2, #10
 801112a:	2300      	movs	r3, #0
 801112c:	4620      	mov	r0, r4
 801112e:	f000 fb55 	bl	80117dc <__multadd>
 8011132:	9b08      	ldr	r3, [sp, #32]
 8011134:	ee08 0a10 	vmov	s16, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	f000 81b1 	beq.w	80114a0 <_dtoa_r+0xbc0>
 801113e:	2300      	movs	r3, #0
 8011140:	4639      	mov	r1, r7
 8011142:	220a      	movs	r2, #10
 8011144:	4620      	mov	r0, r4
 8011146:	f000 fb49 	bl	80117dc <__multadd>
 801114a:	9b02      	ldr	r3, [sp, #8]
 801114c:	2b00      	cmp	r3, #0
 801114e:	4607      	mov	r7, r0
 8011150:	f300 808e 	bgt.w	8011270 <_dtoa_r+0x990>
 8011154:	9b06      	ldr	r3, [sp, #24]
 8011156:	2b02      	cmp	r3, #2
 8011158:	dc51      	bgt.n	80111fe <_dtoa_r+0x91e>
 801115a:	e089      	b.n	8011270 <_dtoa_r+0x990>
 801115c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801115e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011162:	e74b      	b.n	8010ffc <_dtoa_r+0x71c>
 8011164:	9b03      	ldr	r3, [sp, #12]
 8011166:	1e5e      	subs	r6, r3, #1
 8011168:	9b07      	ldr	r3, [sp, #28]
 801116a:	42b3      	cmp	r3, r6
 801116c:	bfbf      	itttt	lt
 801116e:	9b07      	ldrlt	r3, [sp, #28]
 8011170:	9607      	strlt	r6, [sp, #28]
 8011172:	1af2      	sublt	r2, r6, r3
 8011174:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011176:	bfb6      	itet	lt
 8011178:	189b      	addlt	r3, r3, r2
 801117a:	1b9e      	subge	r6, r3, r6
 801117c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801117e:	9b03      	ldr	r3, [sp, #12]
 8011180:	bfb8      	it	lt
 8011182:	2600      	movlt	r6, #0
 8011184:	2b00      	cmp	r3, #0
 8011186:	bfb7      	itett	lt
 8011188:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801118c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011190:	1a9d      	sublt	r5, r3, r2
 8011192:	2300      	movlt	r3, #0
 8011194:	e734      	b.n	8011000 <_dtoa_r+0x720>
 8011196:	9e07      	ldr	r6, [sp, #28]
 8011198:	9d04      	ldr	r5, [sp, #16]
 801119a:	9f08      	ldr	r7, [sp, #32]
 801119c:	e73b      	b.n	8011016 <_dtoa_r+0x736>
 801119e:	9a07      	ldr	r2, [sp, #28]
 80111a0:	e767      	b.n	8011072 <_dtoa_r+0x792>
 80111a2:	9b06      	ldr	r3, [sp, #24]
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	dc18      	bgt.n	80111da <_dtoa_r+0x8fa>
 80111a8:	f1ba 0f00 	cmp.w	sl, #0
 80111ac:	d115      	bne.n	80111da <_dtoa_r+0x8fa>
 80111ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111b2:	b993      	cbnz	r3, 80111da <_dtoa_r+0x8fa>
 80111b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111b8:	0d1b      	lsrs	r3, r3, #20
 80111ba:	051b      	lsls	r3, r3, #20
 80111bc:	b183      	cbz	r3, 80111e0 <_dtoa_r+0x900>
 80111be:	9b04      	ldr	r3, [sp, #16]
 80111c0:	3301      	adds	r3, #1
 80111c2:	9304      	str	r3, [sp, #16]
 80111c4:	9b05      	ldr	r3, [sp, #20]
 80111c6:	3301      	adds	r3, #1
 80111c8:	9305      	str	r3, [sp, #20]
 80111ca:	f04f 0801 	mov.w	r8, #1
 80111ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f47f af6a 	bne.w	80110aa <_dtoa_r+0x7ca>
 80111d6:	2001      	movs	r0, #1
 80111d8:	e76f      	b.n	80110ba <_dtoa_r+0x7da>
 80111da:	f04f 0800 	mov.w	r8, #0
 80111de:	e7f6      	b.n	80111ce <_dtoa_r+0x8ee>
 80111e0:	4698      	mov	r8, r3
 80111e2:	e7f4      	b.n	80111ce <_dtoa_r+0x8ee>
 80111e4:	f43f af7d 	beq.w	80110e2 <_dtoa_r+0x802>
 80111e8:	4618      	mov	r0, r3
 80111ea:	301c      	adds	r0, #28
 80111ec:	e772      	b.n	80110d4 <_dtoa_r+0x7f4>
 80111ee:	9b03      	ldr	r3, [sp, #12]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	dc37      	bgt.n	8011264 <_dtoa_r+0x984>
 80111f4:	9b06      	ldr	r3, [sp, #24]
 80111f6:	2b02      	cmp	r3, #2
 80111f8:	dd34      	ble.n	8011264 <_dtoa_r+0x984>
 80111fa:	9b03      	ldr	r3, [sp, #12]
 80111fc:	9302      	str	r3, [sp, #8]
 80111fe:	9b02      	ldr	r3, [sp, #8]
 8011200:	b96b      	cbnz	r3, 801121e <_dtoa_r+0x93e>
 8011202:	4631      	mov	r1, r6
 8011204:	2205      	movs	r2, #5
 8011206:	4620      	mov	r0, r4
 8011208:	f000 fae8 	bl	80117dc <__multadd>
 801120c:	4601      	mov	r1, r0
 801120e:	4606      	mov	r6, r0
 8011210:	ee18 0a10 	vmov	r0, s16
 8011214:	f000 fd02 	bl	8011c1c <__mcmp>
 8011218:	2800      	cmp	r0, #0
 801121a:	f73f adbb 	bgt.w	8010d94 <_dtoa_r+0x4b4>
 801121e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011220:	9d01      	ldr	r5, [sp, #4]
 8011222:	43db      	mvns	r3, r3
 8011224:	9300      	str	r3, [sp, #0]
 8011226:	f04f 0800 	mov.w	r8, #0
 801122a:	4631      	mov	r1, r6
 801122c:	4620      	mov	r0, r4
 801122e:	f000 fab3 	bl	8011798 <_Bfree>
 8011232:	2f00      	cmp	r7, #0
 8011234:	f43f aea4 	beq.w	8010f80 <_dtoa_r+0x6a0>
 8011238:	f1b8 0f00 	cmp.w	r8, #0
 801123c:	d005      	beq.n	801124a <_dtoa_r+0x96a>
 801123e:	45b8      	cmp	r8, r7
 8011240:	d003      	beq.n	801124a <_dtoa_r+0x96a>
 8011242:	4641      	mov	r1, r8
 8011244:	4620      	mov	r0, r4
 8011246:	f000 faa7 	bl	8011798 <_Bfree>
 801124a:	4639      	mov	r1, r7
 801124c:	4620      	mov	r0, r4
 801124e:	f000 faa3 	bl	8011798 <_Bfree>
 8011252:	e695      	b.n	8010f80 <_dtoa_r+0x6a0>
 8011254:	2600      	movs	r6, #0
 8011256:	4637      	mov	r7, r6
 8011258:	e7e1      	b.n	801121e <_dtoa_r+0x93e>
 801125a:	9700      	str	r7, [sp, #0]
 801125c:	4637      	mov	r7, r6
 801125e:	e599      	b.n	8010d94 <_dtoa_r+0x4b4>
 8011260:	40240000 	.word	0x40240000
 8011264:	9b08      	ldr	r3, [sp, #32]
 8011266:	2b00      	cmp	r3, #0
 8011268:	f000 80ca 	beq.w	8011400 <_dtoa_r+0xb20>
 801126c:	9b03      	ldr	r3, [sp, #12]
 801126e:	9302      	str	r3, [sp, #8]
 8011270:	2d00      	cmp	r5, #0
 8011272:	dd05      	ble.n	8011280 <_dtoa_r+0x9a0>
 8011274:	4639      	mov	r1, r7
 8011276:	462a      	mov	r2, r5
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fc5f 	bl	8011b3c <__lshift>
 801127e:	4607      	mov	r7, r0
 8011280:	f1b8 0f00 	cmp.w	r8, #0
 8011284:	d05b      	beq.n	801133e <_dtoa_r+0xa5e>
 8011286:	6879      	ldr	r1, [r7, #4]
 8011288:	4620      	mov	r0, r4
 801128a:	f000 fa45 	bl	8011718 <_Balloc>
 801128e:	4605      	mov	r5, r0
 8011290:	b928      	cbnz	r0, 801129e <_dtoa_r+0x9be>
 8011292:	4b87      	ldr	r3, [pc, #540]	; (80114b0 <_dtoa_r+0xbd0>)
 8011294:	4602      	mov	r2, r0
 8011296:	f240 21ea 	movw	r1, #746	; 0x2ea
 801129a:	f7ff bb3b 	b.w	8010914 <_dtoa_r+0x34>
 801129e:	693a      	ldr	r2, [r7, #16]
 80112a0:	3202      	adds	r2, #2
 80112a2:	0092      	lsls	r2, r2, #2
 80112a4:	f107 010c 	add.w	r1, r7, #12
 80112a8:	300c      	adds	r0, #12
 80112aa:	f7fe fce7 	bl	800fc7c <memcpy>
 80112ae:	2201      	movs	r2, #1
 80112b0:	4629      	mov	r1, r5
 80112b2:	4620      	mov	r0, r4
 80112b4:	f000 fc42 	bl	8011b3c <__lshift>
 80112b8:	9b01      	ldr	r3, [sp, #4]
 80112ba:	f103 0901 	add.w	r9, r3, #1
 80112be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80112c2:	4413      	add	r3, r2
 80112c4:	9305      	str	r3, [sp, #20]
 80112c6:	f00a 0301 	and.w	r3, sl, #1
 80112ca:	46b8      	mov	r8, r7
 80112cc:	9304      	str	r3, [sp, #16]
 80112ce:	4607      	mov	r7, r0
 80112d0:	4631      	mov	r1, r6
 80112d2:	ee18 0a10 	vmov	r0, s16
 80112d6:	f7ff fa77 	bl	80107c8 <quorem>
 80112da:	4641      	mov	r1, r8
 80112dc:	9002      	str	r0, [sp, #8]
 80112de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80112e2:	ee18 0a10 	vmov	r0, s16
 80112e6:	f000 fc99 	bl	8011c1c <__mcmp>
 80112ea:	463a      	mov	r2, r7
 80112ec:	9003      	str	r0, [sp, #12]
 80112ee:	4631      	mov	r1, r6
 80112f0:	4620      	mov	r0, r4
 80112f2:	f000 fcaf 	bl	8011c54 <__mdiff>
 80112f6:	68c2      	ldr	r2, [r0, #12]
 80112f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80112fc:	4605      	mov	r5, r0
 80112fe:	bb02      	cbnz	r2, 8011342 <_dtoa_r+0xa62>
 8011300:	4601      	mov	r1, r0
 8011302:	ee18 0a10 	vmov	r0, s16
 8011306:	f000 fc89 	bl	8011c1c <__mcmp>
 801130a:	4602      	mov	r2, r0
 801130c:	4629      	mov	r1, r5
 801130e:	4620      	mov	r0, r4
 8011310:	9207      	str	r2, [sp, #28]
 8011312:	f000 fa41 	bl	8011798 <_Bfree>
 8011316:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801131a:	ea43 0102 	orr.w	r1, r3, r2
 801131e:	9b04      	ldr	r3, [sp, #16]
 8011320:	430b      	orrs	r3, r1
 8011322:	464d      	mov	r5, r9
 8011324:	d10f      	bne.n	8011346 <_dtoa_r+0xa66>
 8011326:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801132a:	d02a      	beq.n	8011382 <_dtoa_r+0xaa2>
 801132c:	9b03      	ldr	r3, [sp, #12]
 801132e:	2b00      	cmp	r3, #0
 8011330:	dd02      	ble.n	8011338 <_dtoa_r+0xa58>
 8011332:	9b02      	ldr	r3, [sp, #8]
 8011334:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011338:	f88b a000 	strb.w	sl, [fp]
 801133c:	e775      	b.n	801122a <_dtoa_r+0x94a>
 801133e:	4638      	mov	r0, r7
 8011340:	e7ba      	b.n	80112b8 <_dtoa_r+0x9d8>
 8011342:	2201      	movs	r2, #1
 8011344:	e7e2      	b.n	801130c <_dtoa_r+0xa2c>
 8011346:	9b03      	ldr	r3, [sp, #12]
 8011348:	2b00      	cmp	r3, #0
 801134a:	db04      	blt.n	8011356 <_dtoa_r+0xa76>
 801134c:	9906      	ldr	r1, [sp, #24]
 801134e:	430b      	orrs	r3, r1
 8011350:	9904      	ldr	r1, [sp, #16]
 8011352:	430b      	orrs	r3, r1
 8011354:	d122      	bne.n	801139c <_dtoa_r+0xabc>
 8011356:	2a00      	cmp	r2, #0
 8011358:	ddee      	ble.n	8011338 <_dtoa_r+0xa58>
 801135a:	ee18 1a10 	vmov	r1, s16
 801135e:	2201      	movs	r2, #1
 8011360:	4620      	mov	r0, r4
 8011362:	f000 fbeb 	bl	8011b3c <__lshift>
 8011366:	4631      	mov	r1, r6
 8011368:	ee08 0a10 	vmov	s16, r0
 801136c:	f000 fc56 	bl	8011c1c <__mcmp>
 8011370:	2800      	cmp	r0, #0
 8011372:	dc03      	bgt.n	801137c <_dtoa_r+0xa9c>
 8011374:	d1e0      	bne.n	8011338 <_dtoa_r+0xa58>
 8011376:	f01a 0f01 	tst.w	sl, #1
 801137a:	d0dd      	beq.n	8011338 <_dtoa_r+0xa58>
 801137c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011380:	d1d7      	bne.n	8011332 <_dtoa_r+0xa52>
 8011382:	2339      	movs	r3, #57	; 0x39
 8011384:	f88b 3000 	strb.w	r3, [fp]
 8011388:	462b      	mov	r3, r5
 801138a:	461d      	mov	r5, r3
 801138c:	3b01      	subs	r3, #1
 801138e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011392:	2a39      	cmp	r2, #57	; 0x39
 8011394:	d071      	beq.n	801147a <_dtoa_r+0xb9a>
 8011396:	3201      	adds	r2, #1
 8011398:	701a      	strb	r2, [r3, #0]
 801139a:	e746      	b.n	801122a <_dtoa_r+0x94a>
 801139c:	2a00      	cmp	r2, #0
 801139e:	dd07      	ble.n	80113b0 <_dtoa_r+0xad0>
 80113a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113a4:	d0ed      	beq.n	8011382 <_dtoa_r+0xaa2>
 80113a6:	f10a 0301 	add.w	r3, sl, #1
 80113aa:	f88b 3000 	strb.w	r3, [fp]
 80113ae:	e73c      	b.n	801122a <_dtoa_r+0x94a>
 80113b0:	9b05      	ldr	r3, [sp, #20]
 80113b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80113b6:	4599      	cmp	r9, r3
 80113b8:	d047      	beq.n	801144a <_dtoa_r+0xb6a>
 80113ba:	ee18 1a10 	vmov	r1, s16
 80113be:	2300      	movs	r3, #0
 80113c0:	220a      	movs	r2, #10
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 fa0a 	bl	80117dc <__multadd>
 80113c8:	45b8      	cmp	r8, r7
 80113ca:	ee08 0a10 	vmov	s16, r0
 80113ce:	f04f 0300 	mov.w	r3, #0
 80113d2:	f04f 020a 	mov.w	r2, #10
 80113d6:	4641      	mov	r1, r8
 80113d8:	4620      	mov	r0, r4
 80113da:	d106      	bne.n	80113ea <_dtoa_r+0xb0a>
 80113dc:	f000 f9fe 	bl	80117dc <__multadd>
 80113e0:	4680      	mov	r8, r0
 80113e2:	4607      	mov	r7, r0
 80113e4:	f109 0901 	add.w	r9, r9, #1
 80113e8:	e772      	b.n	80112d0 <_dtoa_r+0x9f0>
 80113ea:	f000 f9f7 	bl	80117dc <__multadd>
 80113ee:	4639      	mov	r1, r7
 80113f0:	4680      	mov	r8, r0
 80113f2:	2300      	movs	r3, #0
 80113f4:	220a      	movs	r2, #10
 80113f6:	4620      	mov	r0, r4
 80113f8:	f000 f9f0 	bl	80117dc <__multadd>
 80113fc:	4607      	mov	r7, r0
 80113fe:	e7f1      	b.n	80113e4 <_dtoa_r+0xb04>
 8011400:	9b03      	ldr	r3, [sp, #12]
 8011402:	9302      	str	r3, [sp, #8]
 8011404:	9d01      	ldr	r5, [sp, #4]
 8011406:	ee18 0a10 	vmov	r0, s16
 801140a:	4631      	mov	r1, r6
 801140c:	f7ff f9dc 	bl	80107c8 <quorem>
 8011410:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011414:	9b01      	ldr	r3, [sp, #4]
 8011416:	f805 ab01 	strb.w	sl, [r5], #1
 801141a:	1aea      	subs	r2, r5, r3
 801141c:	9b02      	ldr	r3, [sp, #8]
 801141e:	4293      	cmp	r3, r2
 8011420:	dd09      	ble.n	8011436 <_dtoa_r+0xb56>
 8011422:	ee18 1a10 	vmov	r1, s16
 8011426:	2300      	movs	r3, #0
 8011428:	220a      	movs	r2, #10
 801142a:	4620      	mov	r0, r4
 801142c:	f000 f9d6 	bl	80117dc <__multadd>
 8011430:	ee08 0a10 	vmov	s16, r0
 8011434:	e7e7      	b.n	8011406 <_dtoa_r+0xb26>
 8011436:	9b02      	ldr	r3, [sp, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	bfc8      	it	gt
 801143c:	461d      	movgt	r5, r3
 801143e:	9b01      	ldr	r3, [sp, #4]
 8011440:	bfd8      	it	le
 8011442:	2501      	movle	r5, #1
 8011444:	441d      	add	r5, r3
 8011446:	f04f 0800 	mov.w	r8, #0
 801144a:	ee18 1a10 	vmov	r1, s16
 801144e:	2201      	movs	r2, #1
 8011450:	4620      	mov	r0, r4
 8011452:	f000 fb73 	bl	8011b3c <__lshift>
 8011456:	4631      	mov	r1, r6
 8011458:	ee08 0a10 	vmov	s16, r0
 801145c:	f000 fbde 	bl	8011c1c <__mcmp>
 8011460:	2800      	cmp	r0, #0
 8011462:	dc91      	bgt.n	8011388 <_dtoa_r+0xaa8>
 8011464:	d102      	bne.n	801146c <_dtoa_r+0xb8c>
 8011466:	f01a 0f01 	tst.w	sl, #1
 801146a:	d18d      	bne.n	8011388 <_dtoa_r+0xaa8>
 801146c:	462b      	mov	r3, r5
 801146e:	461d      	mov	r5, r3
 8011470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011474:	2a30      	cmp	r2, #48	; 0x30
 8011476:	d0fa      	beq.n	801146e <_dtoa_r+0xb8e>
 8011478:	e6d7      	b.n	801122a <_dtoa_r+0x94a>
 801147a:	9a01      	ldr	r2, [sp, #4]
 801147c:	429a      	cmp	r2, r3
 801147e:	d184      	bne.n	801138a <_dtoa_r+0xaaa>
 8011480:	9b00      	ldr	r3, [sp, #0]
 8011482:	3301      	adds	r3, #1
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	2331      	movs	r3, #49	; 0x31
 8011488:	7013      	strb	r3, [r2, #0]
 801148a:	e6ce      	b.n	801122a <_dtoa_r+0x94a>
 801148c:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <_dtoa_r+0xbd4>)
 801148e:	f7ff ba95 	b.w	80109bc <_dtoa_r+0xdc>
 8011492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011494:	2b00      	cmp	r3, #0
 8011496:	f47f aa6e 	bne.w	8010976 <_dtoa_r+0x96>
 801149a:	4b07      	ldr	r3, [pc, #28]	; (80114b8 <_dtoa_r+0xbd8>)
 801149c:	f7ff ba8e 	b.w	80109bc <_dtoa_r+0xdc>
 80114a0:	9b02      	ldr	r3, [sp, #8]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	dcae      	bgt.n	8011404 <_dtoa_r+0xb24>
 80114a6:	9b06      	ldr	r3, [sp, #24]
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	f73f aea8 	bgt.w	80111fe <_dtoa_r+0x91e>
 80114ae:	e7a9      	b.n	8011404 <_dtoa_r+0xb24>
 80114b0:	08012ca8 	.word	0x08012ca8
 80114b4:	08012ac8 	.word	0x08012ac8
 80114b8:	08012c29 	.word	0x08012c29

080114bc <std>:
 80114bc:	2300      	movs	r3, #0
 80114be:	b510      	push	{r4, lr}
 80114c0:	4604      	mov	r4, r0
 80114c2:	e9c0 3300 	strd	r3, r3, [r0]
 80114c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114ca:	6083      	str	r3, [r0, #8]
 80114cc:	8181      	strh	r1, [r0, #12]
 80114ce:	6643      	str	r3, [r0, #100]	; 0x64
 80114d0:	81c2      	strh	r2, [r0, #14]
 80114d2:	6183      	str	r3, [r0, #24]
 80114d4:	4619      	mov	r1, r3
 80114d6:	2208      	movs	r2, #8
 80114d8:	305c      	adds	r0, #92	; 0x5c
 80114da:	f7fe fbdd 	bl	800fc98 <memset>
 80114de:	4b05      	ldr	r3, [pc, #20]	; (80114f4 <std+0x38>)
 80114e0:	6263      	str	r3, [r4, #36]	; 0x24
 80114e2:	4b05      	ldr	r3, [pc, #20]	; (80114f8 <std+0x3c>)
 80114e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80114e6:	4b05      	ldr	r3, [pc, #20]	; (80114fc <std+0x40>)
 80114e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114ea:	4b05      	ldr	r3, [pc, #20]	; (8011500 <std+0x44>)
 80114ec:	6224      	str	r4, [r4, #32]
 80114ee:	6323      	str	r3, [r4, #48]	; 0x30
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	bf00      	nop
 80114f4:	08012101 	.word	0x08012101
 80114f8:	08012123 	.word	0x08012123
 80114fc:	0801215b 	.word	0x0801215b
 8011500:	0801217f 	.word	0x0801217f

08011504 <_cleanup_r>:
 8011504:	4901      	ldr	r1, [pc, #4]	; (801150c <_cleanup_r+0x8>)
 8011506:	f000 b8c1 	b.w	801168c <_fwalk_reent>
 801150a:	bf00      	nop
 801150c:	08012485 	.word	0x08012485

08011510 <__sfmoreglue>:
 8011510:	b570      	push	{r4, r5, r6, lr}
 8011512:	2268      	movs	r2, #104	; 0x68
 8011514:	1e4d      	subs	r5, r1, #1
 8011516:	4355      	muls	r5, r2
 8011518:	460e      	mov	r6, r1
 801151a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801151e:	f7fe fc2f 	bl	800fd80 <_malloc_r>
 8011522:	4604      	mov	r4, r0
 8011524:	b140      	cbz	r0, 8011538 <__sfmoreglue+0x28>
 8011526:	2100      	movs	r1, #0
 8011528:	e9c0 1600 	strd	r1, r6, [r0]
 801152c:	300c      	adds	r0, #12
 801152e:	60a0      	str	r0, [r4, #8]
 8011530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011534:	f7fe fbb0 	bl	800fc98 <memset>
 8011538:	4620      	mov	r0, r4
 801153a:	bd70      	pop	{r4, r5, r6, pc}

0801153c <__sfp_lock_acquire>:
 801153c:	4801      	ldr	r0, [pc, #4]	; (8011544 <__sfp_lock_acquire+0x8>)
 801153e:	f000 b8ca 	b.w	80116d6 <__retarget_lock_acquire_recursive>
 8011542:	bf00      	nop
 8011544:	200029a1 	.word	0x200029a1

08011548 <__sfp_lock_release>:
 8011548:	4801      	ldr	r0, [pc, #4]	; (8011550 <__sfp_lock_release+0x8>)
 801154a:	f000 b8c5 	b.w	80116d8 <__retarget_lock_release_recursive>
 801154e:	bf00      	nop
 8011550:	200029a1 	.word	0x200029a1

08011554 <__sinit_lock_acquire>:
 8011554:	4801      	ldr	r0, [pc, #4]	; (801155c <__sinit_lock_acquire+0x8>)
 8011556:	f000 b8be 	b.w	80116d6 <__retarget_lock_acquire_recursive>
 801155a:	bf00      	nop
 801155c:	200029a2 	.word	0x200029a2

08011560 <__sinit_lock_release>:
 8011560:	4801      	ldr	r0, [pc, #4]	; (8011568 <__sinit_lock_release+0x8>)
 8011562:	f000 b8b9 	b.w	80116d8 <__retarget_lock_release_recursive>
 8011566:	bf00      	nop
 8011568:	200029a2 	.word	0x200029a2

0801156c <__sinit>:
 801156c:	b510      	push	{r4, lr}
 801156e:	4604      	mov	r4, r0
 8011570:	f7ff fff0 	bl	8011554 <__sinit_lock_acquire>
 8011574:	69a3      	ldr	r3, [r4, #24]
 8011576:	b11b      	cbz	r3, 8011580 <__sinit+0x14>
 8011578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801157c:	f7ff bff0 	b.w	8011560 <__sinit_lock_release>
 8011580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011584:	6523      	str	r3, [r4, #80]	; 0x50
 8011586:	4b13      	ldr	r3, [pc, #76]	; (80115d4 <__sinit+0x68>)
 8011588:	4a13      	ldr	r2, [pc, #76]	; (80115d8 <__sinit+0x6c>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	62a2      	str	r2, [r4, #40]	; 0x28
 801158e:	42a3      	cmp	r3, r4
 8011590:	bf04      	itt	eq
 8011592:	2301      	moveq	r3, #1
 8011594:	61a3      	streq	r3, [r4, #24]
 8011596:	4620      	mov	r0, r4
 8011598:	f000 f820 	bl	80115dc <__sfp>
 801159c:	6060      	str	r0, [r4, #4]
 801159e:	4620      	mov	r0, r4
 80115a0:	f000 f81c 	bl	80115dc <__sfp>
 80115a4:	60a0      	str	r0, [r4, #8]
 80115a6:	4620      	mov	r0, r4
 80115a8:	f000 f818 	bl	80115dc <__sfp>
 80115ac:	2200      	movs	r2, #0
 80115ae:	60e0      	str	r0, [r4, #12]
 80115b0:	2104      	movs	r1, #4
 80115b2:	6860      	ldr	r0, [r4, #4]
 80115b4:	f7ff ff82 	bl	80114bc <std>
 80115b8:	68a0      	ldr	r0, [r4, #8]
 80115ba:	2201      	movs	r2, #1
 80115bc:	2109      	movs	r1, #9
 80115be:	f7ff ff7d 	bl	80114bc <std>
 80115c2:	68e0      	ldr	r0, [r4, #12]
 80115c4:	2202      	movs	r2, #2
 80115c6:	2112      	movs	r1, #18
 80115c8:	f7ff ff78 	bl	80114bc <std>
 80115cc:	2301      	movs	r3, #1
 80115ce:	61a3      	str	r3, [r4, #24]
 80115d0:	e7d2      	b.n	8011578 <__sinit+0xc>
 80115d2:	bf00      	nop
 80115d4:	08012ab4 	.word	0x08012ab4
 80115d8:	08011505 	.word	0x08011505

080115dc <__sfp>:
 80115dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115de:	4607      	mov	r7, r0
 80115e0:	f7ff ffac 	bl	801153c <__sfp_lock_acquire>
 80115e4:	4b1e      	ldr	r3, [pc, #120]	; (8011660 <__sfp+0x84>)
 80115e6:	681e      	ldr	r6, [r3, #0]
 80115e8:	69b3      	ldr	r3, [r6, #24]
 80115ea:	b913      	cbnz	r3, 80115f2 <__sfp+0x16>
 80115ec:	4630      	mov	r0, r6
 80115ee:	f7ff ffbd 	bl	801156c <__sinit>
 80115f2:	3648      	adds	r6, #72	; 0x48
 80115f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80115f8:	3b01      	subs	r3, #1
 80115fa:	d503      	bpl.n	8011604 <__sfp+0x28>
 80115fc:	6833      	ldr	r3, [r6, #0]
 80115fe:	b30b      	cbz	r3, 8011644 <__sfp+0x68>
 8011600:	6836      	ldr	r6, [r6, #0]
 8011602:	e7f7      	b.n	80115f4 <__sfp+0x18>
 8011604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011608:	b9d5      	cbnz	r5, 8011640 <__sfp+0x64>
 801160a:	4b16      	ldr	r3, [pc, #88]	; (8011664 <__sfp+0x88>)
 801160c:	60e3      	str	r3, [r4, #12]
 801160e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011612:	6665      	str	r5, [r4, #100]	; 0x64
 8011614:	f000 f85e 	bl	80116d4 <__retarget_lock_init_recursive>
 8011618:	f7ff ff96 	bl	8011548 <__sfp_lock_release>
 801161c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011624:	6025      	str	r5, [r4, #0]
 8011626:	61a5      	str	r5, [r4, #24]
 8011628:	2208      	movs	r2, #8
 801162a:	4629      	mov	r1, r5
 801162c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011630:	f7fe fb32 	bl	800fc98 <memset>
 8011634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801163c:	4620      	mov	r0, r4
 801163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011640:	3468      	adds	r4, #104	; 0x68
 8011642:	e7d9      	b.n	80115f8 <__sfp+0x1c>
 8011644:	2104      	movs	r1, #4
 8011646:	4638      	mov	r0, r7
 8011648:	f7ff ff62 	bl	8011510 <__sfmoreglue>
 801164c:	4604      	mov	r4, r0
 801164e:	6030      	str	r0, [r6, #0]
 8011650:	2800      	cmp	r0, #0
 8011652:	d1d5      	bne.n	8011600 <__sfp+0x24>
 8011654:	f7ff ff78 	bl	8011548 <__sfp_lock_release>
 8011658:	230c      	movs	r3, #12
 801165a:	603b      	str	r3, [r7, #0]
 801165c:	e7ee      	b.n	801163c <__sfp+0x60>
 801165e:	bf00      	nop
 8011660:	08012ab4 	.word	0x08012ab4
 8011664:	ffff0001 	.word	0xffff0001

08011668 <fiprintf>:
 8011668:	b40e      	push	{r1, r2, r3}
 801166a:	b503      	push	{r0, r1, lr}
 801166c:	4601      	mov	r1, r0
 801166e:	ab03      	add	r3, sp, #12
 8011670:	4805      	ldr	r0, [pc, #20]	; (8011688 <fiprintf+0x20>)
 8011672:	f853 2b04 	ldr.w	r2, [r3], #4
 8011676:	6800      	ldr	r0, [r0, #0]
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	f000 fc11 	bl	8011ea0 <_vfiprintf_r>
 801167e:	b002      	add	sp, #8
 8011680:	f85d eb04 	ldr.w	lr, [sp], #4
 8011684:	b003      	add	sp, #12
 8011686:	4770      	bx	lr
 8011688:	20000188 	.word	0x20000188

0801168c <_fwalk_reent>:
 801168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011690:	4606      	mov	r6, r0
 8011692:	4688      	mov	r8, r1
 8011694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011698:	2700      	movs	r7, #0
 801169a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801169e:	f1b9 0901 	subs.w	r9, r9, #1
 80116a2:	d505      	bpl.n	80116b0 <_fwalk_reent+0x24>
 80116a4:	6824      	ldr	r4, [r4, #0]
 80116a6:	2c00      	cmp	r4, #0
 80116a8:	d1f7      	bne.n	801169a <_fwalk_reent+0xe>
 80116aa:	4638      	mov	r0, r7
 80116ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b0:	89ab      	ldrh	r3, [r5, #12]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d907      	bls.n	80116c6 <_fwalk_reent+0x3a>
 80116b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116ba:	3301      	adds	r3, #1
 80116bc:	d003      	beq.n	80116c6 <_fwalk_reent+0x3a>
 80116be:	4629      	mov	r1, r5
 80116c0:	4630      	mov	r0, r6
 80116c2:	47c0      	blx	r8
 80116c4:	4307      	orrs	r7, r0
 80116c6:	3568      	adds	r5, #104	; 0x68
 80116c8:	e7e9      	b.n	801169e <_fwalk_reent+0x12>
	...

080116cc <_localeconv_r>:
 80116cc:	4800      	ldr	r0, [pc, #0]	; (80116d0 <_localeconv_r+0x4>)
 80116ce:	4770      	bx	lr
 80116d0:	200002dc 	.word	0x200002dc

080116d4 <__retarget_lock_init_recursive>:
 80116d4:	4770      	bx	lr

080116d6 <__retarget_lock_acquire_recursive>:
 80116d6:	4770      	bx	lr

080116d8 <__retarget_lock_release_recursive>:
 80116d8:	4770      	bx	lr

080116da <__ascii_mbtowc>:
 80116da:	b082      	sub	sp, #8
 80116dc:	b901      	cbnz	r1, 80116e0 <__ascii_mbtowc+0x6>
 80116de:	a901      	add	r1, sp, #4
 80116e0:	b142      	cbz	r2, 80116f4 <__ascii_mbtowc+0x1a>
 80116e2:	b14b      	cbz	r3, 80116f8 <__ascii_mbtowc+0x1e>
 80116e4:	7813      	ldrb	r3, [r2, #0]
 80116e6:	600b      	str	r3, [r1, #0]
 80116e8:	7812      	ldrb	r2, [r2, #0]
 80116ea:	1e10      	subs	r0, r2, #0
 80116ec:	bf18      	it	ne
 80116ee:	2001      	movne	r0, #1
 80116f0:	b002      	add	sp, #8
 80116f2:	4770      	bx	lr
 80116f4:	4610      	mov	r0, r2
 80116f6:	e7fb      	b.n	80116f0 <__ascii_mbtowc+0x16>
 80116f8:	f06f 0001 	mvn.w	r0, #1
 80116fc:	e7f8      	b.n	80116f0 <__ascii_mbtowc+0x16>
	...

08011700 <__malloc_lock>:
 8011700:	4801      	ldr	r0, [pc, #4]	; (8011708 <__malloc_lock+0x8>)
 8011702:	f7ff bfe8 	b.w	80116d6 <__retarget_lock_acquire_recursive>
 8011706:	bf00      	nop
 8011708:	200029a0 	.word	0x200029a0

0801170c <__malloc_unlock>:
 801170c:	4801      	ldr	r0, [pc, #4]	; (8011714 <__malloc_unlock+0x8>)
 801170e:	f7ff bfe3 	b.w	80116d8 <__retarget_lock_release_recursive>
 8011712:	bf00      	nop
 8011714:	200029a0 	.word	0x200029a0

08011718 <_Balloc>:
 8011718:	b570      	push	{r4, r5, r6, lr}
 801171a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801171c:	4604      	mov	r4, r0
 801171e:	460d      	mov	r5, r1
 8011720:	b976      	cbnz	r6, 8011740 <_Balloc+0x28>
 8011722:	2010      	movs	r0, #16
 8011724:	f7fe faa2 	bl	800fc6c <malloc>
 8011728:	4602      	mov	r2, r0
 801172a:	6260      	str	r0, [r4, #36]	; 0x24
 801172c:	b920      	cbnz	r0, 8011738 <_Balloc+0x20>
 801172e:	4b18      	ldr	r3, [pc, #96]	; (8011790 <_Balloc+0x78>)
 8011730:	4818      	ldr	r0, [pc, #96]	; (8011794 <_Balloc+0x7c>)
 8011732:	2166      	movs	r1, #102	; 0x66
 8011734:	f7ff f82a 	bl	801078c <__assert_func>
 8011738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801173c:	6006      	str	r6, [r0, #0]
 801173e:	60c6      	str	r6, [r0, #12]
 8011740:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011742:	68f3      	ldr	r3, [r6, #12]
 8011744:	b183      	cbz	r3, 8011768 <_Balloc+0x50>
 8011746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801174e:	b9b8      	cbnz	r0, 8011780 <_Balloc+0x68>
 8011750:	2101      	movs	r1, #1
 8011752:	fa01 f605 	lsl.w	r6, r1, r5
 8011756:	1d72      	adds	r2, r6, #5
 8011758:	0092      	lsls	r2, r2, #2
 801175a:	4620      	mov	r0, r4
 801175c:	f000 fb60 	bl	8011e20 <_calloc_r>
 8011760:	b160      	cbz	r0, 801177c <_Balloc+0x64>
 8011762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011766:	e00e      	b.n	8011786 <_Balloc+0x6e>
 8011768:	2221      	movs	r2, #33	; 0x21
 801176a:	2104      	movs	r1, #4
 801176c:	4620      	mov	r0, r4
 801176e:	f000 fb57 	bl	8011e20 <_calloc_r>
 8011772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011774:	60f0      	str	r0, [r6, #12]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1e4      	bne.n	8011746 <_Balloc+0x2e>
 801177c:	2000      	movs	r0, #0
 801177e:	bd70      	pop	{r4, r5, r6, pc}
 8011780:	6802      	ldr	r2, [r0, #0]
 8011782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011786:	2300      	movs	r3, #0
 8011788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801178c:	e7f7      	b.n	801177e <_Balloc+0x66>
 801178e:	bf00      	nop
 8011790:	08012c36 	.word	0x08012c36
 8011794:	08012d26 	.word	0x08012d26

08011798 <_Bfree>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801179c:	4605      	mov	r5, r0
 801179e:	460c      	mov	r4, r1
 80117a0:	b976      	cbnz	r6, 80117c0 <_Bfree+0x28>
 80117a2:	2010      	movs	r0, #16
 80117a4:	f7fe fa62 	bl	800fc6c <malloc>
 80117a8:	4602      	mov	r2, r0
 80117aa:	6268      	str	r0, [r5, #36]	; 0x24
 80117ac:	b920      	cbnz	r0, 80117b8 <_Bfree+0x20>
 80117ae:	4b09      	ldr	r3, [pc, #36]	; (80117d4 <_Bfree+0x3c>)
 80117b0:	4809      	ldr	r0, [pc, #36]	; (80117d8 <_Bfree+0x40>)
 80117b2:	218a      	movs	r1, #138	; 0x8a
 80117b4:	f7fe ffea 	bl	801078c <__assert_func>
 80117b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117bc:	6006      	str	r6, [r0, #0]
 80117be:	60c6      	str	r6, [r0, #12]
 80117c0:	b13c      	cbz	r4, 80117d2 <_Bfree+0x3a>
 80117c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117c4:	6862      	ldr	r2, [r4, #4]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117cc:	6021      	str	r1, [r4, #0]
 80117ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117d2:	bd70      	pop	{r4, r5, r6, pc}
 80117d4:	08012c36 	.word	0x08012c36
 80117d8:	08012d26 	.word	0x08012d26

080117dc <__multadd>:
 80117dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e0:	690d      	ldr	r5, [r1, #16]
 80117e2:	4607      	mov	r7, r0
 80117e4:	460c      	mov	r4, r1
 80117e6:	461e      	mov	r6, r3
 80117e8:	f101 0c14 	add.w	ip, r1, #20
 80117ec:	2000      	movs	r0, #0
 80117ee:	f8dc 3000 	ldr.w	r3, [ip]
 80117f2:	b299      	uxth	r1, r3
 80117f4:	fb02 6101 	mla	r1, r2, r1, r6
 80117f8:	0c1e      	lsrs	r6, r3, #16
 80117fa:	0c0b      	lsrs	r3, r1, #16
 80117fc:	fb02 3306 	mla	r3, r2, r6, r3
 8011800:	b289      	uxth	r1, r1
 8011802:	3001      	adds	r0, #1
 8011804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011808:	4285      	cmp	r5, r0
 801180a:	f84c 1b04 	str.w	r1, [ip], #4
 801180e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011812:	dcec      	bgt.n	80117ee <__multadd+0x12>
 8011814:	b30e      	cbz	r6, 801185a <__multadd+0x7e>
 8011816:	68a3      	ldr	r3, [r4, #8]
 8011818:	42ab      	cmp	r3, r5
 801181a:	dc19      	bgt.n	8011850 <__multadd+0x74>
 801181c:	6861      	ldr	r1, [r4, #4]
 801181e:	4638      	mov	r0, r7
 8011820:	3101      	adds	r1, #1
 8011822:	f7ff ff79 	bl	8011718 <_Balloc>
 8011826:	4680      	mov	r8, r0
 8011828:	b928      	cbnz	r0, 8011836 <__multadd+0x5a>
 801182a:	4602      	mov	r2, r0
 801182c:	4b0c      	ldr	r3, [pc, #48]	; (8011860 <__multadd+0x84>)
 801182e:	480d      	ldr	r0, [pc, #52]	; (8011864 <__multadd+0x88>)
 8011830:	21b5      	movs	r1, #181	; 0xb5
 8011832:	f7fe ffab 	bl	801078c <__assert_func>
 8011836:	6922      	ldr	r2, [r4, #16]
 8011838:	3202      	adds	r2, #2
 801183a:	f104 010c 	add.w	r1, r4, #12
 801183e:	0092      	lsls	r2, r2, #2
 8011840:	300c      	adds	r0, #12
 8011842:	f7fe fa1b 	bl	800fc7c <memcpy>
 8011846:	4621      	mov	r1, r4
 8011848:	4638      	mov	r0, r7
 801184a:	f7ff ffa5 	bl	8011798 <_Bfree>
 801184e:	4644      	mov	r4, r8
 8011850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011854:	3501      	adds	r5, #1
 8011856:	615e      	str	r6, [r3, #20]
 8011858:	6125      	str	r5, [r4, #16]
 801185a:	4620      	mov	r0, r4
 801185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011860:	08012ca8 	.word	0x08012ca8
 8011864:	08012d26 	.word	0x08012d26

08011868 <__hi0bits>:
 8011868:	0c03      	lsrs	r3, r0, #16
 801186a:	041b      	lsls	r3, r3, #16
 801186c:	b9d3      	cbnz	r3, 80118a4 <__hi0bits+0x3c>
 801186e:	0400      	lsls	r0, r0, #16
 8011870:	2310      	movs	r3, #16
 8011872:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011876:	bf04      	itt	eq
 8011878:	0200      	lsleq	r0, r0, #8
 801187a:	3308      	addeq	r3, #8
 801187c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011880:	bf04      	itt	eq
 8011882:	0100      	lsleq	r0, r0, #4
 8011884:	3304      	addeq	r3, #4
 8011886:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801188a:	bf04      	itt	eq
 801188c:	0080      	lsleq	r0, r0, #2
 801188e:	3302      	addeq	r3, #2
 8011890:	2800      	cmp	r0, #0
 8011892:	db05      	blt.n	80118a0 <__hi0bits+0x38>
 8011894:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011898:	f103 0301 	add.w	r3, r3, #1
 801189c:	bf08      	it	eq
 801189e:	2320      	moveq	r3, #32
 80118a0:	4618      	mov	r0, r3
 80118a2:	4770      	bx	lr
 80118a4:	2300      	movs	r3, #0
 80118a6:	e7e4      	b.n	8011872 <__hi0bits+0xa>

080118a8 <__lo0bits>:
 80118a8:	6803      	ldr	r3, [r0, #0]
 80118aa:	f013 0207 	ands.w	r2, r3, #7
 80118ae:	4601      	mov	r1, r0
 80118b0:	d00b      	beq.n	80118ca <__lo0bits+0x22>
 80118b2:	07da      	lsls	r2, r3, #31
 80118b4:	d423      	bmi.n	80118fe <__lo0bits+0x56>
 80118b6:	0798      	lsls	r0, r3, #30
 80118b8:	bf49      	itett	mi
 80118ba:	085b      	lsrmi	r3, r3, #1
 80118bc:	089b      	lsrpl	r3, r3, #2
 80118be:	2001      	movmi	r0, #1
 80118c0:	600b      	strmi	r3, [r1, #0]
 80118c2:	bf5c      	itt	pl
 80118c4:	600b      	strpl	r3, [r1, #0]
 80118c6:	2002      	movpl	r0, #2
 80118c8:	4770      	bx	lr
 80118ca:	b298      	uxth	r0, r3
 80118cc:	b9a8      	cbnz	r0, 80118fa <__lo0bits+0x52>
 80118ce:	0c1b      	lsrs	r3, r3, #16
 80118d0:	2010      	movs	r0, #16
 80118d2:	b2da      	uxtb	r2, r3
 80118d4:	b90a      	cbnz	r2, 80118da <__lo0bits+0x32>
 80118d6:	3008      	adds	r0, #8
 80118d8:	0a1b      	lsrs	r3, r3, #8
 80118da:	071a      	lsls	r2, r3, #28
 80118dc:	bf04      	itt	eq
 80118de:	091b      	lsreq	r3, r3, #4
 80118e0:	3004      	addeq	r0, #4
 80118e2:	079a      	lsls	r2, r3, #30
 80118e4:	bf04      	itt	eq
 80118e6:	089b      	lsreq	r3, r3, #2
 80118e8:	3002      	addeq	r0, #2
 80118ea:	07da      	lsls	r2, r3, #31
 80118ec:	d403      	bmi.n	80118f6 <__lo0bits+0x4e>
 80118ee:	085b      	lsrs	r3, r3, #1
 80118f0:	f100 0001 	add.w	r0, r0, #1
 80118f4:	d005      	beq.n	8011902 <__lo0bits+0x5a>
 80118f6:	600b      	str	r3, [r1, #0]
 80118f8:	4770      	bx	lr
 80118fa:	4610      	mov	r0, r2
 80118fc:	e7e9      	b.n	80118d2 <__lo0bits+0x2a>
 80118fe:	2000      	movs	r0, #0
 8011900:	4770      	bx	lr
 8011902:	2020      	movs	r0, #32
 8011904:	4770      	bx	lr
	...

08011908 <__i2b>:
 8011908:	b510      	push	{r4, lr}
 801190a:	460c      	mov	r4, r1
 801190c:	2101      	movs	r1, #1
 801190e:	f7ff ff03 	bl	8011718 <_Balloc>
 8011912:	4602      	mov	r2, r0
 8011914:	b928      	cbnz	r0, 8011922 <__i2b+0x1a>
 8011916:	4b05      	ldr	r3, [pc, #20]	; (801192c <__i2b+0x24>)
 8011918:	4805      	ldr	r0, [pc, #20]	; (8011930 <__i2b+0x28>)
 801191a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801191e:	f7fe ff35 	bl	801078c <__assert_func>
 8011922:	2301      	movs	r3, #1
 8011924:	6144      	str	r4, [r0, #20]
 8011926:	6103      	str	r3, [r0, #16]
 8011928:	bd10      	pop	{r4, pc}
 801192a:	bf00      	nop
 801192c:	08012ca8 	.word	0x08012ca8
 8011930:	08012d26 	.word	0x08012d26

08011934 <__multiply>:
 8011934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011938:	4691      	mov	r9, r2
 801193a:	690a      	ldr	r2, [r1, #16]
 801193c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011940:	429a      	cmp	r2, r3
 8011942:	bfb8      	it	lt
 8011944:	460b      	movlt	r3, r1
 8011946:	460c      	mov	r4, r1
 8011948:	bfbc      	itt	lt
 801194a:	464c      	movlt	r4, r9
 801194c:	4699      	movlt	r9, r3
 801194e:	6927      	ldr	r7, [r4, #16]
 8011950:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011954:	68a3      	ldr	r3, [r4, #8]
 8011956:	6861      	ldr	r1, [r4, #4]
 8011958:	eb07 060a 	add.w	r6, r7, sl
 801195c:	42b3      	cmp	r3, r6
 801195e:	b085      	sub	sp, #20
 8011960:	bfb8      	it	lt
 8011962:	3101      	addlt	r1, #1
 8011964:	f7ff fed8 	bl	8011718 <_Balloc>
 8011968:	b930      	cbnz	r0, 8011978 <__multiply+0x44>
 801196a:	4602      	mov	r2, r0
 801196c:	4b44      	ldr	r3, [pc, #272]	; (8011a80 <__multiply+0x14c>)
 801196e:	4845      	ldr	r0, [pc, #276]	; (8011a84 <__multiply+0x150>)
 8011970:	f240 115d 	movw	r1, #349	; 0x15d
 8011974:	f7fe ff0a 	bl	801078c <__assert_func>
 8011978:	f100 0514 	add.w	r5, r0, #20
 801197c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011980:	462b      	mov	r3, r5
 8011982:	2200      	movs	r2, #0
 8011984:	4543      	cmp	r3, r8
 8011986:	d321      	bcc.n	80119cc <__multiply+0x98>
 8011988:	f104 0314 	add.w	r3, r4, #20
 801198c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011990:	f109 0314 	add.w	r3, r9, #20
 8011994:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011998:	9202      	str	r2, [sp, #8]
 801199a:	1b3a      	subs	r2, r7, r4
 801199c:	3a15      	subs	r2, #21
 801199e:	f022 0203 	bic.w	r2, r2, #3
 80119a2:	3204      	adds	r2, #4
 80119a4:	f104 0115 	add.w	r1, r4, #21
 80119a8:	428f      	cmp	r7, r1
 80119aa:	bf38      	it	cc
 80119ac:	2204      	movcc	r2, #4
 80119ae:	9201      	str	r2, [sp, #4]
 80119b0:	9a02      	ldr	r2, [sp, #8]
 80119b2:	9303      	str	r3, [sp, #12]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d80c      	bhi.n	80119d2 <__multiply+0x9e>
 80119b8:	2e00      	cmp	r6, #0
 80119ba:	dd03      	ble.n	80119c4 <__multiply+0x90>
 80119bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d05a      	beq.n	8011a7a <__multiply+0x146>
 80119c4:	6106      	str	r6, [r0, #16]
 80119c6:	b005      	add	sp, #20
 80119c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119cc:	f843 2b04 	str.w	r2, [r3], #4
 80119d0:	e7d8      	b.n	8011984 <__multiply+0x50>
 80119d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80119d6:	f1ba 0f00 	cmp.w	sl, #0
 80119da:	d024      	beq.n	8011a26 <__multiply+0xf2>
 80119dc:	f104 0e14 	add.w	lr, r4, #20
 80119e0:	46a9      	mov	r9, r5
 80119e2:	f04f 0c00 	mov.w	ip, #0
 80119e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119ea:	f8d9 1000 	ldr.w	r1, [r9]
 80119ee:	fa1f fb82 	uxth.w	fp, r2
 80119f2:	b289      	uxth	r1, r1
 80119f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80119f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80119fc:	f8d9 2000 	ldr.w	r2, [r9]
 8011a00:	4461      	add	r1, ip
 8011a02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a06:	fb0a c20b 	mla	r2, sl, fp, ip
 8011a0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011a0e:	b289      	uxth	r1, r1
 8011a10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a14:	4577      	cmp	r7, lr
 8011a16:	f849 1b04 	str.w	r1, [r9], #4
 8011a1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a1e:	d8e2      	bhi.n	80119e6 <__multiply+0xb2>
 8011a20:	9a01      	ldr	r2, [sp, #4]
 8011a22:	f845 c002 	str.w	ip, [r5, r2]
 8011a26:	9a03      	ldr	r2, [sp, #12]
 8011a28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	f1b9 0f00 	cmp.w	r9, #0
 8011a32:	d020      	beq.n	8011a76 <__multiply+0x142>
 8011a34:	6829      	ldr	r1, [r5, #0]
 8011a36:	f104 0c14 	add.w	ip, r4, #20
 8011a3a:	46ae      	mov	lr, r5
 8011a3c:	f04f 0a00 	mov.w	sl, #0
 8011a40:	f8bc b000 	ldrh.w	fp, [ip]
 8011a44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a48:	fb09 220b 	mla	r2, r9, fp, r2
 8011a4c:	4492      	add	sl, r2
 8011a4e:	b289      	uxth	r1, r1
 8011a50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011a54:	f84e 1b04 	str.w	r1, [lr], #4
 8011a58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011a5c:	f8be 1000 	ldrh.w	r1, [lr]
 8011a60:	0c12      	lsrs	r2, r2, #16
 8011a62:	fb09 1102 	mla	r1, r9, r2, r1
 8011a66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011a6a:	4567      	cmp	r7, ip
 8011a6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a70:	d8e6      	bhi.n	8011a40 <__multiply+0x10c>
 8011a72:	9a01      	ldr	r2, [sp, #4]
 8011a74:	50a9      	str	r1, [r5, r2]
 8011a76:	3504      	adds	r5, #4
 8011a78:	e79a      	b.n	80119b0 <__multiply+0x7c>
 8011a7a:	3e01      	subs	r6, #1
 8011a7c:	e79c      	b.n	80119b8 <__multiply+0x84>
 8011a7e:	bf00      	nop
 8011a80:	08012ca8 	.word	0x08012ca8
 8011a84:	08012d26 	.word	0x08012d26

08011a88 <__pow5mult>:
 8011a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a8c:	4615      	mov	r5, r2
 8011a8e:	f012 0203 	ands.w	r2, r2, #3
 8011a92:	4606      	mov	r6, r0
 8011a94:	460f      	mov	r7, r1
 8011a96:	d007      	beq.n	8011aa8 <__pow5mult+0x20>
 8011a98:	4c25      	ldr	r4, [pc, #148]	; (8011b30 <__pow5mult+0xa8>)
 8011a9a:	3a01      	subs	r2, #1
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011aa2:	f7ff fe9b 	bl	80117dc <__multadd>
 8011aa6:	4607      	mov	r7, r0
 8011aa8:	10ad      	asrs	r5, r5, #2
 8011aaa:	d03d      	beq.n	8011b28 <__pow5mult+0xa0>
 8011aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011aae:	b97c      	cbnz	r4, 8011ad0 <__pow5mult+0x48>
 8011ab0:	2010      	movs	r0, #16
 8011ab2:	f7fe f8db 	bl	800fc6c <malloc>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	6270      	str	r0, [r6, #36]	; 0x24
 8011aba:	b928      	cbnz	r0, 8011ac8 <__pow5mult+0x40>
 8011abc:	4b1d      	ldr	r3, [pc, #116]	; (8011b34 <__pow5mult+0xac>)
 8011abe:	481e      	ldr	r0, [pc, #120]	; (8011b38 <__pow5mult+0xb0>)
 8011ac0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011ac4:	f7fe fe62 	bl	801078c <__assert_func>
 8011ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011acc:	6004      	str	r4, [r0, #0]
 8011ace:	60c4      	str	r4, [r0, #12]
 8011ad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ad8:	b94c      	cbnz	r4, 8011aee <__pow5mult+0x66>
 8011ada:	f240 2171 	movw	r1, #625	; 0x271
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f7ff ff12 	bl	8011908 <__i2b>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011aea:	4604      	mov	r4, r0
 8011aec:	6003      	str	r3, [r0, #0]
 8011aee:	f04f 0900 	mov.w	r9, #0
 8011af2:	07eb      	lsls	r3, r5, #31
 8011af4:	d50a      	bpl.n	8011b0c <__pow5mult+0x84>
 8011af6:	4639      	mov	r1, r7
 8011af8:	4622      	mov	r2, r4
 8011afa:	4630      	mov	r0, r6
 8011afc:	f7ff ff1a 	bl	8011934 <__multiply>
 8011b00:	4639      	mov	r1, r7
 8011b02:	4680      	mov	r8, r0
 8011b04:	4630      	mov	r0, r6
 8011b06:	f7ff fe47 	bl	8011798 <_Bfree>
 8011b0a:	4647      	mov	r7, r8
 8011b0c:	106d      	asrs	r5, r5, #1
 8011b0e:	d00b      	beq.n	8011b28 <__pow5mult+0xa0>
 8011b10:	6820      	ldr	r0, [r4, #0]
 8011b12:	b938      	cbnz	r0, 8011b24 <__pow5mult+0x9c>
 8011b14:	4622      	mov	r2, r4
 8011b16:	4621      	mov	r1, r4
 8011b18:	4630      	mov	r0, r6
 8011b1a:	f7ff ff0b 	bl	8011934 <__multiply>
 8011b1e:	6020      	str	r0, [r4, #0]
 8011b20:	f8c0 9000 	str.w	r9, [r0]
 8011b24:	4604      	mov	r4, r0
 8011b26:	e7e4      	b.n	8011af2 <__pow5mult+0x6a>
 8011b28:	4638      	mov	r0, r7
 8011b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b2e:	bf00      	nop
 8011b30:	08012e78 	.word	0x08012e78
 8011b34:	08012c36 	.word	0x08012c36
 8011b38:	08012d26 	.word	0x08012d26

08011b3c <__lshift>:
 8011b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b40:	460c      	mov	r4, r1
 8011b42:	6849      	ldr	r1, [r1, #4]
 8011b44:	6923      	ldr	r3, [r4, #16]
 8011b46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b4a:	68a3      	ldr	r3, [r4, #8]
 8011b4c:	4607      	mov	r7, r0
 8011b4e:	4691      	mov	r9, r2
 8011b50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b54:	f108 0601 	add.w	r6, r8, #1
 8011b58:	42b3      	cmp	r3, r6
 8011b5a:	db0b      	blt.n	8011b74 <__lshift+0x38>
 8011b5c:	4638      	mov	r0, r7
 8011b5e:	f7ff fddb 	bl	8011718 <_Balloc>
 8011b62:	4605      	mov	r5, r0
 8011b64:	b948      	cbnz	r0, 8011b7a <__lshift+0x3e>
 8011b66:	4602      	mov	r2, r0
 8011b68:	4b2a      	ldr	r3, [pc, #168]	; (8011c14 <__lshift+0xd8>)
 8011b6a:	482b      	ldr	r0, [pc, #172]	; (8011c18 <__lshift+0xdc>)
 8011b6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011b70:	f7fe fe0c 	bl	801078c <__assert_func>
 8011b74:	3101      	adds	r1, #1
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	e7ee      	b.n	8011b58 <__lshift+0x1c>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	f100 0114 	add.w	r1, r0, #20
 8011b80:	f100 0210 	add.w	r2, r0, #16
 8011b84:	4618      	mov	r0, r3
 8011b86:	4553      	cmp	r3, sl
 8011b88:	db37      	blt.n	8011bfa <__lshift+0xbe>
 8011b8a:	6920      	ldr	r0, [r4, #16]
 8011b8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b90:	f104 0314 	add.w	r3, r4, #20
 8011b94:	f019 091f 	ands.w	r9, r9, #31
 8011b98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011ba0:	d02f      	beq.n	8011c02 <__lshift+0xc6>
 8011ba2:	f1c9 0e20 	rsb	lr, r9, #32
 8011ba6:	468a      	mov	sl, r1
 8011ba8:	f04f 0c00 	mov.w	ip, #0
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	fa02 f209 	lsl.w	r2, r2, r9
 8011bb2:	ea42 020c 	orr.w	r2, r2, ip
 8011bb6:	f84a 2b04 	str.w	r2, [sl], #4
 8011bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bbe:	4298      	cmp	r0, r3
 8011bc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011bc4:	d8f2      	bhi.n	8011bac <__lshift+0x70>
 8011bc6:	1b03      	subs	r3, r0, r4
 8011bc8:	3b15      	subs	r3, #21
 8011bca:	f023 0303 	bic.w	r3, r3, #3
 8011bce:	3304      	adds	r3, #4
 8011bd0:	f104 0215 	add.w	r2, r4, #21
 8011bd4:	4290      	cmp	r0, r2
 8011bd6:	bf38      	it	cc
 8011bd8:	2304      	movcc	r3, #4
 8011bda:	f841 c003 	str.w	ip, [r1, r3]
 8011bde:	f1bc 0f00 	cmp.w	ip, #0
 8011be2:	d001      	beq.n	8011be8 <__lshift+0xac>
 8011be4:	f108 0602 	add.w	r6, r8, #2
 8011be8:	3e01      	subs	r6, #1
 8011bea:	4638      	mov	r0, r7
 8011bec:	612e      	str	r6, [r5, #16]
 8011bee:	4621      	mov	r1, r4
 8011bf0:	f7ff fdd2 	bl	8011798 <_Bfree>
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8011bfe:	3301      	adds	r3, #1
 8011c00:	e7c1      	b.n	8011b86 <__lshift+0x4a>
 8011c02:	3904      	subs	r1, #4
 8011c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c08:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c0c:	4298      	cmp	r0, r3
 8011c0e:	d8f9      	bhi.n	8011c04 <__lshift+0xc8>
 8011c10:	e7ea      	b.n	8011be8 <__lshift+0xac>
 8011c12:	bf00      	nop
 8011c14:	08012ca8 	.word	0x08012ca8
 8011c18:	08012d26 	.word	0x08012d26

08011c1c <__mcmp>:
 8011c1c:	b530      	push	{r4, r5, lr}
 8011c1e:	6902      	ldr	r2, [r0, #16]
 8011c20:	690c      	ldr	r4, [r1, #16]
 8011c22:	1b12      	subs	r2, r2, r4
 8011c24:	d10e      	bne.n	8011c44 <__mcmp+0x28>
 8011c26:	f100 0314 	add.w	r3, r0, #20
 8011c2a:	3114      	adds	r1, #20
 8011c2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c3c:	42a5      	cmp	r5, r4
 8011c3e:	d003      	beq.n	8011c48 <__mcmp+0x2c>
 8011c40:	d305      	bcc.n	8011c4e <__mcmp+0x32>
 8011c42:	2201      	movs	r2, #1
 8011c44:	4610      	mov	r0, r2
 8011c46:	bd30      	pop	{r4, r5, pc}
 8011c48:	4283      	cmp	r3, r0
 8011c4a:	d3f3      	bcc.n	8011c34 <__mcmp+0x18>
 8011c4c:	e7fa      	b.n	8011c44 <__mcmp+0x28>
 8011c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c52:	e7f7      	b.n	8011c44 <__mcmp+0x28>

08011c54 <__mdiff>:
 8011c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c58:	460c      	mov	r4, r1
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	4611      	mov	r1, r2
 8011c5e:	4620      	mov	r0, r4
 8011c60:	4690      	mov	r8, r2
 8011c62:	f7ff ffdb 	bl	8011c1c <__mcmp>
 8011c66:	1e05      	subs	r5, r0, #0
 8011c68:	d110      	bne.n	8011c8c <__mdiff+0x38>
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	4630      	mov	r0, r6
 8011c6e:	f7ff fd53 	bl	8011718 <_Balloc>
 8011c72:	b930      	cbnz	r0, 8011c82 <__mdiff+0x2e>
 8011c74:	4b3a      	ldr	r3, [pc, #232]	; (8011d60 <__mdiff+0x10c>)
 8011c76:	4602      	mov	r2, r0
 8011c78:	f240 2132 	movw	r1, #562	; 0x232
 8011c7c:	4839      	ldr	r0, [pc, #228]	; (8011d64 <__mdiff+0x110>)
 8011c7e:	f7fe fd85 	bl	801078c <__assert_func>
 8011c82:	2301      	movs	r3, #1
 8011c84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c8c:	bfa4      	itt	ge
 8011c8e:	4643      	movge	r3, r8
 8011c90:	46a0      	movge	r8, r4
 8011c92:	4630      	mov	r0, r6
 8011c94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c98:	bfa6      	itte	ge
 8011c9a:	461c      	movge	r4, r3
 8011c9c:	2500      	movge	r5, #0
 8011c9e:	2501      	movlt	r5, #1
 8011ca0:	f7ff fd3a 	bl	8011718 <_Balloc>
 8011ca4:	b920      	cbnz	r0, 8011cb0 <__mdiff+0x5c>
 8011ca6:	4b2e      	ldr	r3, [pc, #184]	; (8011d60 <__mdiff+0x10c>)
 8011ca8:	4602      	mov	r2, r0
 8011caa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011cae:	e7e5      	b.n	8011c7c <__mdiff+0x28>
 8011cb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011cb4:	6926      	ldr	r6, [r4, #16]
 8011cb6:	60c5      	str	r5, [r0, #12]
 8011cb8:	f104 0914 	add.w	r9, r4, #20
 8011cbc:	f108 0514 	add.w	r5, r8, #20
 8011cc0:	f100 0e14 	add.w	lr, r0, #20
 8011cc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011cc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ccc:	f108 0210 	add.w	r2, r8, #16
 8011cd0:	46f2      	mov	sl, lr
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011cdc:	fa1f f883 	uxth.w	r8, r3
 8011ce0:	fa11 f18b 	uxtah	r1, r1, fp
 8011ce4:	0c1b      	lsrs	r3, r3, #16
 8011ce6:	eba1 0808 	sub.w	r8, r1, r8
 8011cea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011cee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cf2:	fa1f f888 	uxth.w	r8, r8
 8011cf6:	1419      	asrs	r1, r3, #16
 8011cf8:	454e      	cmp	r6, r9
 8011cfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011cfe:	f84a 3b04 	str.w	r3, [sl], #4
 8011d02:	d8e7      	bhi.n	8011cd4 <__mdiff+0x80>
 8011d04:	1b33      	subs	r3, r6, r4
 8011d06:	3b15      	subs	r3, #21
 8011d08:	f023 0303 	bic.w	r3, r3, #3
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	3415      	adds	r4, #21
 8011d10:	42a6      	cmp	r6, r4
 8011d12:	bf38      	it	cc
 8011d14:	2304      	movcc	r3, #4
 8011d16:	441d      	add	r5, r3
 8011d18:	4473      	add	r3, lr
 8011d1a:	469e      	mov	lr, r3
 8011d1c:	462e      	mov	r6, r5
 8011d1e:	4566      	cmp	r6, ip
 8011d20:	d30e      	bcc.n	8011d40 <__mdiff+0xec>
 8011d22:	f10c 0203 	add.w	r2, ip, #3
 8011d26:	1b52      	subs	r2, r2, r5
 8011d28:	f022 0203 	bic.w	r2, r2, #3
 8011d2c:	3d03      	subs	r5, #3
 8011d2e:	45ac      	cmp	ip, r5
 8011d30:	bf38      	it	cc
 8011d32:	2200      	movcc	r2, #0
 8011d34:	441a      	add	r2, r3
 8011d36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d3a:	b17b      	cbz	r3, 8011d5c <__mdiff+0x108>
 8011d3c:	6107      	str	r7, [r0, #16]
 8011d3e:	e7a3      	b.n	8011c88 <__mdiff+0x34>
 8011d40:	f856 8b04 	ldr.w	r8, [r6], #4
 8011d44:	fa11 f288 	uxtah	r2, r1, r8
 8011d48:	1414      	asrs	r4, r2, #16
 8011d4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d4e:	b292      	uxth	r2, r2
 8011d50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d54:	f84e 2b04 	str.w	r2, [lr], #4
 8011d58:	1421      	asrs	r1, r4, #16
 8011d5a:	e7e0      	b.n	8011d1e <__mdiff+0xca>
 8011d5c:	3f01      	subs	r7, #1
 8011d5e:	e7ea      	b.n	8011d36 <__mdiff+0xe2>
 8011d60:	08012ca8 	.word	0x08012ca8
 8011d64:	08012d26 	.word	0x08012d26

08011d68 <__d2b>:
 8011d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d6c:	4689      	mov	r9, r1
 8011d6e:	2101      	movs	r1, #1
 8011d70:	ec57 6b10 	vmov	r6, r7, d0
 8011d74:	4690      	mov	r8, r2
 8011d76:	f7ff fccf 	bl	8011718 <_Balloc>
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	b930      	cbnz	r0, 8011d8c <__d2b+0x24>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	4b25      	ldr	r3, [pc, #148]	; (8011e18 <__d2b+0xb0>)
 8011d82:	4826      	ldr	r0, [pc, #152]	; (8011e1c <__d2b+0xb4>)
 8011d84:	f240 310a 	movw	r1, #778	; 0x30a
 8011d88:	f7fe fd00 	bl	801078c <__assert_func>
 8011d8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011d90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011d94:	bb35      	cbnz	r5, 8011de4 <__d2b+0x7c>
 8011d96:	2e00      	cmp	r6, #0
 8011d98:	9301      	str	r3, [sp, #4]
 8011d9a:	d028      	beq.n	8011dee <__d2b+0x86>
 8011d9c:	4668      	mov	r0, sp
 8011d9e:	9600      	str	r6, [sp, #0]
 8011da0:	f7ff fd82 	bl	80118a8 <__lo0bits>
 8011da4:	9900      	ldr	r1, [sp, #0]
 8011da6:	b300      	cbz	r0, 8011dea <__d2b+0x82>
 8011da8:	9a01      	ldr	r2, [sp, #4]
 8011daa:	f1c0 0320 	rsb	r3, r0, #32
 8011dae:	fa02 f303 	lsl.w	r3, r2, r3
 8011db2:	430b      	orrs	r3, r1
 8011db4:	40c2      	lsrs	r2, r0
 8011db6:	6163      	str	r3, [r4, #20]
 8011db8:	9201      	str	r2, [sp, #4]
 8011dba:	9b01      	ldr	r3, [sp, #4]
 8011dbc:	61a3      	str	r3, [r4, #24]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	bf14      	ite	ne
 8011dc2:	2202      	movne	r2, #2
 8011dc4:	2201      	moveq	r2, #1
 8011dc6:	6122      	str	r2, [r4, #16]
 8011dc8:	b1d5      	cbz	r5, 8011e00 <__d2b+0x98>
 8011dca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011dce:	4405      	add	r5, r0
 8011dd0:	f8c9 5000 	str.w	r5, [r9]
 8011dd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011dd8:	f8c8 0000 	str.w	r0, [r8]
 8011ddc:	4620      	mov	r0, r4
 8011dde:	b003      	add	sp, #12
 8011de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011de8:	e7d5      	b.n	8011d96 <__d2b+0x2e>
 8011dea:	6161      	str	r1, [r4, #20]
 8011dec:	e7e5      	b.n	8011dba <__d2b+0x52>
 8011dee:	a801      	add	r0, sp, #4
 8011df0:	f7ff fd5a 	bl	80118a8 <__lo0bits>
 8011df4:	9b01      	ldr	r3, [sp, #4]
 8011df6:	6163      	str	r3, [r4, #20]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	6122      	str	r2, [r4, #16]
 8011dfc:	3020      	adds	r0, #32
 8011dfe:	e7e3      	b.n	8011dc8 <__d2b+0x60>
 8011e00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011e08:	f8c9 0000 	str.w	r0, [r9]
 8011e0c:	6918      	ldr	r0, [r3, #16]
 8011e0e:	f7ff fd2b 	bl	8011868 <__hi0bits>
 8011e12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e16:	e7df      	b.n	8011dd8 <__d2b+0x70>
 8011e18:	08012ca8 	.word	0x08012ca8
 8011e1c:	08012d26 	.word	0x08012d26

08011e20 <_calloc_r>:
 8011e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e22:	fba1 2402 	umull	r2, r4, r1, r2
 8011e26:	b94c      	cbnz	r4, 8011e3c <_calloc_r+0x1c>
 8011e28:	4611      	mov	r1, r2
 8011e2a:	9201      	str	r2, [sp, #4]
 8011e2c:	f7fd ffa8 	bl	800fd80 <_malloc_r>
 8011e30:	9a01      	ldr	r2, [sp, #4]
 8011e32:	4605      	mov	r5, r0
 8011e34:	b930      	cbnz	r0, 8011e44 <_calloc_r+0x24>
 8011e36:	4628      	mov	r0, r5
 8011e38:	b003      	add	sp, #12
 8011e3a:	bd30      	pop	{r4, r5, pc}
 8011e3c:	220c      	movs	r2, #12
 8011e3e:	6002      	str	r2, [r0, #0]
 8011e40:	2500      	movs	r5, #0
 8011e42:	e7f8      	b.n	8011e36 <_calloc_r+0x16>
 8011e44:	4621      	mov	r1, r4
 8011e46:	f7fd ff27 	bl	800fc98 <memset>
 8011e4a:	e7f4      	b.n	8011e36 <_calloc_r+0x16>

08011e4c <__sfputc_r>:
 8011e4c:	6893      	ldr	r3, [r2, #8]
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	b410      	push	{r4}
 8011e54:	6093      	str	r3, [r2, #8]
 8011e56:	da08      	bge.n	8011e6a <__sfputc_r+0x1e>
 8011e58:	6994      	ldr	r4, [r2, #24]
 8011e5a:	42a3      	cmp	r3, r4
 8011e5c:	db01      	blt.n	8011e62 <__sfputc_r+0x16>
 8011e5e:	290a      	cmp	r1, #10
 8011e60:	d103      	bne.n	8011e6a <__sfputc_r+0x1e>
 8011e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e66:	f000 b98f 	b.w	8012188 <__swbuf_r>
 8011e6a:	6813      	ldr	r3, [r2, #0]
 8011e6c:	1c58      	adds	r0, r3, #1
 8011e6e:	6010      	str	r0, [r2, #0]
 8011e70:	7019      	strb	r1, [r3, #0]
 8011e72:	4608      	mov	r0, r1
 8011e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e78:	4770      	bx	lr

08011e7a <__sfputs_r>:
 8011e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e7c:	4606      	mov	r6, r0
 8011e7e:	460f      	mov	r7, r1
 8011e80:	4614      	mov	r4, r2
 8011e82:	18d5      	adds	r5, r2, r3
 8011e84:	42ac      	cmp	r4, r5
 8011e86:	d101      	bne.n	8011e8c <__sfputs_r+0x12>
 8011e88:	2000      	movs	r0, #0
 8011e8a:	e007      	b.n	8011e9c <__sfputs_r+0x22>
 8011e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e90:	463a      	mov	r2, r7
 8011e92:	4630      	mov	r0, r6
 8011e94:	f7ff ffda 	bl	8011e4c <__sfputc_r>
 8011e98:	1c43      	adds	r3, r0, #1
 8011e9a:	d1f3      	bne.n	8011e84 <__sfputs_r+0xa>
 8011e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ea0 <_vfiprintf_r>:
 8011ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea4:	460d      	mov	r5, r1
 8011ea6:	b09d      	sub	sp, #116	; 0x74
 8011ea8:	4614      	mov	r4, r2
 8011eaa:	4698      	mov	r8, r3
 8011eac:	4606      	mov	r6, r0
 8011eae:	b118      	cbz	r0, 8011eb8 <_vfiprintf_r+0x18>
 8011eb0:	6983      	ldr	r3, [r0, #24]
 8011eb2:	b90b      	cbnz	r3, 8011eb8 <_vfiprintf_r+0x18>
 8011eb4:	f7ff fb5a 	bl	801156c <__sinit>
 8011eb8:	4b89      	ldr	r3, [pc, #548]	; (80120e0 <_vfiprintf_r+0x240>)
 8011eba:	429d      	cmp	r5, r3
 8011ebc:	d11b      	bne.n	8011ef6 <_vfiprintf_r+0x56>
 8011ebe:	6875      	ldr	r5, [r6, #4]
 8011ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ec2:	07d9      	lsls	r1, r3, #31
 8011ec4:	d405      	bmi.n	8011ed2 <_vfiprintf_r+0x32>
 8011ec6:	89ab      	ldrh	r3, [r5, #12]
 8011ec8:	059a      	lsls	r2, r3, #22
 8011eca:	d402      	bmi.n	8011ed2 <_vfiprintf_r+0x32>
 8011ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ece:	f7ff fc02 	bl	80116d6 <__retarget_lock_acquire_recursive>
 8011ed2:	89ab      	ldrh	r3, [r5, #12]
 8011ed4:	071b      	lsls	r3, r3, #28
 8011ed6:	d501      	bpl.n	8011edc <_vfiprintf_r+0x3c>
 8011ed8:	692b      	ldr	r3, [r5, #16]
 8011eda:	b9eb      	cbnz	r3, 8011f18 <_vfiprintf_r+0x78>
 8011edc:	4629      	mov	r1, r5
 8011ede:	4630      	mov	r0, r6
 8011ee0:	f000 f9c4 	bl	801226c <__swsetup_r>
 8011ee4:	b1c0      	cbz	r0, 8011f18 <_vfiprintf_r+0x78>
 8011ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ee8:	07dc      	lsls	r4, r3, #31
 8011eea:	d50e      	bpl.n	8011f0a <_vfiprintf_r+0x6a>
 8011eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ef0:	b01d      	add	sp, #116	; 0x74
 8011ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef6:	4b7b      	ldr	r3, [pc, #492]	; (80120e4 <_vfiprintf_r+0x244>)
 8011ef8:	429d      	cmp	r5, r3
 8011efa:	d101      	bne.n	8011f00 <_vfiprintf_r+0x60>
 8011efc:	68b5      	ldr	r5, [r6, #8]
 8011efe:	e7df      	b.n	8011ec0 <_vfiprintf_r+0x20>
 8011f00:	4b79      	ldr	r3, [pc, #484]	; (80120e8 <_vfiprintf_r+0x248>)
 8011f02:	429d      	cmp	r5, r3
 8011f04:	bf08      	it	eq
 8011f06:	68f5      	ldreq	r5, [r6, #12]
 8011f08:	e7da      	b.n	8011ec0 <_vfiprintf_r+0x20>
 8011f0a:	89ab      	ldrh	r3, [r5, #12]
 8011f0c:	0598      	lsls	r0, r3, #22
 8011f0e:	d4ed      	bmi.n	8011eec <_vfiprintf_r+0x4c>
 8011f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f12:	f7ff fbe1 	bl	80116d8 <__retarget_lock_release_recursive>
 8011f16:	e7e9      	b.n	8011eec <_vfiprintf_r+0x4c>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8011f1c:	2320      	movs	r3, #32
 8011f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f26:	2330      	movs	r3, #48	; 0x30
 8011f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80120ec <_vfiprintf_r+0x24c>
 8011f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f30:	f04f 0901 	mov.w	r9, #1
 8011f34:	4623      	mov	r3, r4
 8011f36:	469a      	mov	sl, r3
 8011f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f3c:	b10a      	cbz	r2, 8011f42 <_vfiprintf_r+0xa2>
 8011f3e:	2a25      	cmp	r2, #37	; 0x25
 8011f40:	d1f9      	bne.n	8011f36 <_vfiprintf_r+0x96>
 8011f42:	ebba 0b04 	subs.w	fp, sl, r4
 8011f46:	d00b      	beq.n	8011f60 <_vfiprintf_r+0xc0>
 8011f48:	465b      	mov	r3, fp
 8011f4a:	4622      	mov	r2, r4
 8011f4c:	4629      	mov	r1, r5
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f7ff ff93 	bl	8011e7a <__sfputs_r>
 8011f54:	3001      	adds	r0, #1
 8011f56:	f000 80aa 	beq.w	80120ae <_vfiprintf_r+0x20e>
 8011f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f5c:	445a      	add	r2, fp
 8011f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8011f60:	f89a 3000 	ldrb.w	r3, [sl]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	f000 80a2 	beq.w	80120ae <_vfiprintf_r+0x20e>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f74:	f10a 0a01 	add.w	sl, sl, #1
 8011f78:	9304      	str	r3, [sp, #16]
 8011f7a:	9307      	str	r3, [sp, #28]
 8011f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f80:	931a      	str	r3, [sp, #104]	; 0x68
 8011f82:	4654      	mov	r4, sl
 8011f84:	2205      	movs	r2, #5
 8011f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f8a:	4858      	ldr	r0, [pc, #352]	; (80120ec <_vfiprintf_r+0x24c>)
 8011f8c:	f7ee f940 	bl	8000210 <memchr>
 8011f90:	9a04      	ldr	r2, [sp, #16]
 8011f92:	b9d8      	cbnz	r0, 8011fcc <_vfiprintf_r+0x12c>
 8011f94:	06d1      	lsls	r1, r2, #27
 8011f96:	bf44      	itt	mi
 8011f98:	2320      	movmi	r3, #32
 8011f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f9e:	0713      	lsls	r3, r2, #28
 8011fa0:	bf44      	itt	mi
 8011fa2:	232b      	movmi	r3, #43	; 0x2b
 8011fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8011fac:	2b2a      	cmp	r3, #42	; 0x2a
 8011fae:	d015      	beq.n	8011fdc <_vfiprintf_r+0x13c>
 8011fb0:	9a07      	ldr	r2, [sp, #28]
 8011fb2:	4654      	mov	r4, sl
 8011fb4:	2000      	movs	r0, #0
 8011fb6:	f04f 0c0a 	mov.w	ip, #10
 8011fba:	4621      	mov	r1, r4
 8011fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fc0:	3b30      	subs	r3, #48	; 0x30
 8011fc2:	2b09      	cmp	r3, #9
 8011fc4:	d94e      	bls.n	8012064 <_vfiprintf_r+0x1c4>
 8011fc6:	b1b0      	cbz	r0, 8011ff6 <_vfiprintf_r+0x156>
 8011fc8:	9207      	str	r2, [sp, #28]
 8011fca:	e014      	b.n	8011ff6 <_vfiprintf_r+0x156>
 8011fcc:	eba0 0308 	sub.w	r3, r0, r8
 8011fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	9304      	str	r3, [sp, #16]
 8011fd8:	46a2      	mov	sl, r4
 8011fda:	e7d2      	b.n	8011f82 <_vfiprintf_r+0xe2>
 8011fdc:	9b03      	ldr	r3, [sp, #12]
 8011fde:	1d19      	adds	r1, r3, #4
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	9103      	str	r1, [sp, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	bfbb      	ittet	lt
 8011fe8:	425b      	neglt	r3, r3
 8011fea:	f042 0202 	orrlt.w	r2, r2, #2
 8011fee:	9307      	strge	r3, [sp, #28]
 8011ff0:	9307      	strlt	r3, [sp, #28]
 8011ff2:	bfb8      	it	lt
 8011ff4:	9204      	strlt	r2, [sp, #16]
 8011ff6:	7823      	ldrb	r3, [r4, #0]
 8011ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8011ffa:	d10c      	bne.n	8012016 <_vfiprintf_r+0x176>
 8011ffc:	7863      	ldrb	r3, [r4, #1]
 8011ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8012000:	d135      	bne.n	801206e <_vfiprintf_r+0x1ce>
 8012002:	9b03      	ldr	r3, [sp, #12]
 8012004:	1d1a      	adds	r2, r3, #4
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	9203      	str	r2, [sp, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	bfb8      	it	lt
 801200e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012012:	3402      	adds	r4, #2
 8012014:	9305      	str	r3, [sp, #20]
 8012016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80120fc <_vfiprintf_r+0x25c>
 801201a:	7821      	ldrb	r1, [r4, #0]
 801201c:	2203      	movs	r2, #3
 801201e:	4650      	mov	r0, sl
 8012020:	f7ee f8f6 	bl	8000210 <memchr>
 8012024:	b140      	cbz	r0, 8012038 <_vfiprintf_r+0x198>
 8012026:	2340      	movs	r3, #64	; 0x40
 8012028:	eba0 000a 	sub.w	r0, r0, sl
 801202c:	fa03 f000 	lsl.w	r0, r3, r0
 8012030:	9b04      	ldr	r3, [sp, #16]
 8012032:	4303      	orrs	r3, r0
 8012034:	3401      	adds	r4, #1
 8012036:	9304      	str	r3, [sp, #16]
 8012038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801203c:	482c      	ldr	r0, [pc, #176]	; (80120f0 <_vfiprintf_r+0x250>)
 801203e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012042:	2206      	movs	r2, #6
 8012044:	f7ee f8e4 	bl	8000210 <memchr>
 8012048:	2800      	cmp	r0, #0
 801204a:	d03f      	beq.n	80120cc <_vfiprintf_r+0x22c>
 801204c:	4b29      	ldr	r3, [pc, #164]	; (80120f4 <_vfiprintf_r+0x254>)
 801204e:	bb1b      	cbnz	r3, 8012098 <_vfiprintf_r+0x1f8>
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	3307      	adds	r3, #7
 8012054:	f023 0307 	bic.w	r3, r3, #7
 8012058:	3308      	adds	r3, #8
 801205a:	9303      	str	r3, [sp, #12]
 801205c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801205e:	443b      	add	r3, r7
 8012060:	9309      	str	r3, [sp, #36]	; 0x24
 8012062:	e767      	b.n	8011f34 <_vfiprintf_r+0x94>
 8012064:	fb0c 3202 	mla	r2, ip, r2, r3
 8012068:	460c      	mov	r4, r1
 801206a:	2001      	movs	r0, #1
 801206c:	e7a5      	b.n	8011fba <_vfiprintf_r+0x11a>
 801206e:	2300      	movs	r3, #0
 8012070:	3401      	adds	r4, #1
 8012072:	9305      	str	r3, [sp, #20]
 8012074:	4619      	mov	r1, r3
 8012076:	f04f 0c0a 	mov.w	ip, #10
 801207a:	4620      	mov	r0, r4
 801207c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012080:	3a30      	subs	r2, #48	; 0x30
 8012082:	2a09      	cmp	r2, #9
 8012084:	d903      	bls.n	801208e <_vfiprintf_r+0x1ee>
 8012086:	2b00      	cmp	r3, #0
 8012088:	d0c5      	beq.n	8012016 <_vfiprintf_r+0x176>
 801208a:	9105      	str	r1, [sp, #20]
 801208c:	e7c3      	b.n	8012016 <_vfiprintf_r+0x176>
 801208e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012092:	4604      	mov	r4, r0
 8012094:	2301      	movs	r3, #1
 8012096:	e7f0      	b.n	801207a <_vfiprintf_r+0x1da>
 8012098:	ab03      	add	r3, sp, #12
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	462a      	mov	r2, r5
 801209e:	4b16      	ldr	r3, [pc, #88]	; (80120f8 <_vfiprintf_r+0x258>)
 80120a0:	a904      	add	r1, sp, #16
 80120a2:	4630      	mov	r0, r6
 80120a4:	f7fd ff80 	bl	800ffa8 <_printf_float>
 80120a8:	4607      	mov	r7, r0
 80120aa:	1c78      	adds	r0, r7, #1
 80120ac:	d1d6      	bne.n	801205c <_vfiprintf_r+0x1bc>
 80120ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120b0:	07d9      	lsls	r1, r3, #31
 80120b2:	d405      	bmi.n	80120c0 <_vfiprintf_r+0x220>
 80120b4:	89ab      	ldrh	r3, [r5, #12]
 80120b6:	059a      	lsls	r2, r3, #22
 80120b8:	d402      	bmi.n	80120c0 <_vfiprintf_r+0x220>
 80120ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120bc:	f7ff fb0c 	bl	80116d8 <__retarget_lock_release_recursive>
 80120c0:	89ab      	ldrh	r3, [r5, #12]
 80120c2:	065b      	lsls	r3, r3, #25
 80120c4:	f53f af12 	bmi.w	8011eec <_vfiprintf_r+0x4c>
 80120c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120ca:	e711      	b.n	8011ef0 <_vfiprintf_r+0x50>
 80120cc:	ab03      	add	r3, sp, #12
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	462a      	mov	r2, r5
 80120d2:	4b09      	ldr	r3, [pc, #36]	; (80120f8 <_vfiprintf_r+0x258>)
 80120d4:	a904      	add	r1, sp, #16
 80120d6:	4630      	mov	r0, r6
 80120d8:	f7fe fa0a 	bl	80104f0 <_printf_i>
 80120dc:	e7e4      	b.n	80120a8 <_vfiprintf_r+0x208>
 80120de:	bf00      	nop
 80120e0:	08012cdc 	.word	0x08012cdc
 80120e4:	08012cfc 	.word	0x08012cfc
 80120e8:	08012cbc 	.word	0x08012cbc
 80120ec:	08012e84 	.word	0x08012e84
 80120f0:	08012e8e 	.word	0x08012e8e
 80120f4:	0800ffa9 	.word	0x0800ffa9
 80120f8:	08011e7b 	.word	0x08011e7b
 80120fc:	08012e8a 	.word	0x08012e8a

08012100 <__sread>:
 8012100:	b510      	push	{r4, lr}
 8012102:	460c      	mov	r4, r1
 8012104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012108:	f000 fa70 	bl	80125ec <_read_r>
 801210c:	2800      	cmp	r0, #0
 801210e:	bfab      	itete	ge
 8012110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012112:	89a3      	ldrhlt	r3, [r4, #12]
 8012114:	181b      	addge	r3, r3, r0
 8012116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801211a:	bfac      	ite	ge
 801211c:	6563      	strge	r3, [r4, #84]	; 0x54
 801211e:	81a3      	strhlt	r3, [r4, #12]
 8012120:	bd10      	pop	{r4, pc}

08012122 <__swrite>:
 8012122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012126:	461f      	mov	r7, r3
 8012128:	898b      	ldrh	r3, [r1, #12]
 801212a:	05db      	lsls	r3, r3, #23
 801212c:	4605      	mov	r5, r0
 801212e:	460c      	mov	r4, r1
 8012130:	4616      	mov	r6, r2
 8012132:	d505      	bpl.n	8012140 <__swrite+0x1e>
 8012134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012138:	2302      	movs	r3, #2
 801213a:	2200      	movs	r2, #0
 801213c:	f000 f9de 	bl	80124fc <_lseek_r>
 8012140:	89a3      	ldrh	r3, [r4, #12]
 8012142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801214a:	81a3      	strh	r3, [r4, #12]
 801214c:	4632      	mov	r2, r6
 801214e:	463b      	mov	r3, r7
 8012150:	4628      	mov	r0, r5
 8012152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012156:	f000 b877 	b.w	8012248 <_write_r>

0801215a <__sseek>:
 801215a:	b510      	push	{r4, lr}
 801215c:	460c      	mov	r4, r1
 801215e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012162:	f000 f9cb 	bl	80124fc <_lseek_r>
 8012166:	1c43      	adds	r3, r0, #1
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	bf15      	itete	ne
 801216c:	6560      	strne	r0, [r4, #84]	; 0x54
 801216e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012176:	81a3      	strheq	r3, [r4, #12]
 8012178:	bf18      	it	ne
 801217a:	81a3      	strhne	r3, [r4, #12]
 801217c:	bd10      	pop	{r4, pc}

0801217e <__sclose>:
 801217e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012182:	f000 b8e9 	b.w	8012358 <_close_r>
	...

08012188 <__swbuf_r>:
 8012188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218a:	460e      	mov	r6, r1
 801218c:	4614      	mov	r4, r2
 801218e:	4605      	mov	r5, r0
 8012190:	b118      	cbz	r0, 801219a <__swbuf_r+0x12>
 8012192:	6983      	ldr	r3, [r0, #24]
 8012194:	b90b      	cbnz	r3, 801219a <__swbuf_r+0x12>
 8012196:	f7ff f9e9 	bl	801156c <__sinit>
 801219a:	4b21      	ldr	r3, [pc, #132]	; (8012220 <__swbuf_r+0x98>)
 801219c:	429c      	cmp	r4, r3
 801219e:	d12b      	bne.n	80121f8 <__swbuf_r+0x70>
 80121a0:	686c      	ldr	r4, [r5, #4]
 80121a2:	69a3      	ldr	r3, [r4, #24]
 80121a4:	60a3      	str	r3, [r4, #8]
 80121a6:	89a3      	ldrh	r3, [r4, #12]
 80121a8:	071a      	lsls	r2, r3, #28
 80121aa:	d52f      	bpl.n	801220c <__swbuf_r+0x84>
 80121ac:	6923      	ldr	r3, [r4, #16]
 80121ae:	b36b      	cbz	r3, 801220c <__swbuf_r+0x84>
 80121b0:	6923      	ldr	r3, [r4, #16]
 80121b2:	6820      	ldr	r0, [r4, #0]
 80121b4:	1ac0      	subs	r0, r0, r3
 80121b6:	6963      	ldr	r3, [r4, #20]
 80121b8:	b2f6      	uxtb	r6, r6
 80121ba:	4283      	cmp	r3, r0
 80121bc:	4637      	mov	r7, r6
 80121be:	dc04      	bgt.n	80121ca <__swbuf_r+0x42>
 80121c0:	4621      	mov	r1, r4
 80121c2:	4628      	mov	r0, r5
 80121c4:	f000 f95e 	bl	8012484 <_fflush_r>
 80121c8:	bb30      	cbnz	r0, 8012218 <__swbuf_r+0x90>
 80121ca:	68a3      	ldr	r3, [r4, #8]
 80121cc:	3b01      	subs	r3, #1
 80121ce:	60a3      	str	r3, [r4, #8]
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	1c5a      	adds	r2, r3, #1
 80121d4:	6022      	str	r2, [r4, #0]
 80121d6:	701e      	strb	r6, [r3, #0]
 80121d8:	6963      	ldr	r3, [r4, #20]
 80121da:	3001      	adds	r0, #1
 80121dc:	4283      	cmp	r3, r0
 80121de:	d004      	beq.n	80121ea <__swbuf_r+0x62>
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	07db      	lsls	r3, r3, #31
 80121e4:	d506      	bpl.n	80121f4 <__swbuf_r+0x6c>
 80121e6:	2e0a      	cmp	r6, #10
 80121e8:	d104      	bne.n	80121f4 <__swbuf_r+0x6c>
 80121ea:	4621      	mov	r1, r4
 80121ec:	4628      	mov	r0, r5
 80121ee:	f000 f949 	bl	8012484 <_fflush_r>
 80121f2:	b988      	cbnz	r0, 8012218 <__swbuf_r+0x90>
 80121f4:	4638      	mov	r0, r7
 80121f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121f8:	4b0a      	ldr	r3, [pc, #40]	; (8012224 <__swbuf_r+0x9c>)
 80121fa:	429c      	cmp	r4, r3
 80121fc:	d101      	bne.n	8012202 <__swbuf_r+0x7a>
 80121fe:	68ac      	ldr	r4, [r5, #8]
 8012200:	e7cf      	b.n	80121a2 <__swbuf_r+0x1a>
 8012202:	4b09      	ldr	r3, [pc, #36]	; (8012228 <__swbuf_r+0xa0>)
 8012204:	429c      	cmp	r4, r3
 8012206:	bf08      	it	eq
 8012208:	68ec      	ldreq	r4, [r5, #12]
 801220a:	e7ca      	b.n	80121a2 <__swbuf_r+0x1a>
 801220c:	4621      	mov	r1, r4
 801220e:	4628      	mov	r0, r5
 8012210:	f000 f82c 	bl	801226c <__swsetup_r>
 8012214:	2800      	cmp	r0, #0
 8012216:	d0cb      	beq.n	80121b0 <__swbuf_r+0x28>
 8012218:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801221c:	e7ea      	b.n	80121f4 <__swbuf_r+0x6c>
 801221e:	bf00      	nop
 8012220:	08012cdc 	.word	0x08012cdc
 8012224:	08012cfc 	.word	0x08012cfc
 8012228:	08012cbc 	.word	0x08012cbc

0801222c <__ascii_wctomb>:
 801222c:	b149      	cbz	r1, 8012242 <__ascii_wctomb+0x16>
 801222e:	2aff      	cmp	r2, #255	; 0xff
 8012230:	bf85      	ittet	hi
 8012232:	238a      	movhi	r3, #138	; 0x8a
 8012234:	6003      	strhi	r3, [r0, #0]
 8012236:	700a      	strbls	r2, [r1, #0]
 8012238:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801223c:	bf98      	it	ls
 801223e:	2001      	movls	r0, #1
 8012240:	4770      	bx	lr
 8012242:	4608      	mov	r0, r1
 8012244:	4770      	bx	lr
	...

08012248 <_write_r>:
 8012248:	b538      	push	{r3, r4, r5, lr}
 801224a:	4d07      	ldr	r5, [pc, #28]	; (8012268 <_write_r+0x20>)
 801224c:	4604      	mov	r4, r0
 801224e:	4608      	mov	r0, r1
 8012250:	4611      	mov	r1, r2
 8012252:	2200      	movs	r2, #0
 8012254:	602a      	str	r2, [r5, #0]
 8012256:	461a      	mov	r2, r3
 8012258:	f000 fa86 	bl	8012768 <_write>
 801225c:	1c43      	adds	r3, r0, #1
 801225e:	d102      	bne.n	8012266 <_write_r+0x1e>
 8012260:	682b      	ldr	r3, [r5, #0]
 8012262:	b103      	cbz	r3, 8012266 <_write_r+0x1e>
 8012264:	6023      	str	r3, [r4, #0]
 8012266:	bd38      	pop	{r3, r4, r5, pc}
 8012268:	200029a4 	.word	0x200029a4

0801226c <__swsetup_r>:
 801226c:	4b32      	ldr	r3, [pc, #200]	; (8012338 <__swsetup_r+0xcc>)
 801226e:	b570      	push	{r4, r5, r6, lr}
 8012270:	681d      	ldr	r5, [r3, #0]
 8012272:	4606      	mov	r6, r0
 8012274:	460c      	mov	r4, r1
 8012276:	b125      	cbz	r5, 8012282 <__swsetup_r+0x16>
 8012278:	69ab      	ldr	r3, [r5, #24]
 801227a:	b913      	cbnz	r3, 8012282 <__swsetup_r+0x16>
 801227c:	4628      	mov	r0, r5
 801227e:	f7ff f975 	bl	801156c <__sinit>
 8012282:	4b2e      	ldr	r3, [pc, #184]	; (801233c <__swsetup_r+0xd0>)
 8012284:	429c      	cmp	r4, r3
 8012286:	d10f      	bne.n	80122a8 <__swsetup_r+0x3c>
 8012288:	686c      	ldr	r4, [r5, #4]
 801228a:	89a3      	ldrh	r3, [r4, #12]
 801228c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012290:	0719      	lsls	r1, r3, #28
 8012292:	d42c      	bmi.n	80122ee <__swsetup_r+0x82>
 8012294:	06dd      	lsls	r5, r3, #27
 8012296:	d411      	bmi.n	80122bc <__swsetup_r+0x50>
 8012298:	2309      	movs	r3, #9
 801229a:	6033      	str	r3, [r6, #0]
 801229c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122a0:	81a3      	strh	r3, [r4, #12]
 80122a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122a6:	e03e      	b.n	8012326 <__swsetup_r+0xba>
 80122a8:	4b25      	ldr	r3, [pc, #148]	; (8012340 <__swsetup_r+0xd4>)
 80122aa:	429c      	cmp	r4, r3
 80122ac:	d101      	bne.n	80122b2 <__swsetup_r+0x46>
 80122ae:	68ac      	ldr	r4, [r5, #8]
 80122b0:	e7eb      	b.n	801228a <__swsetup_r+0x1e>
 80122b2:	4b24      	ldr	r3, [pc, #144]	; (8012344 <__swsetup_r+0xd8>)
 80122b4:	429c      	cmp	r4, r3
 80122b6:	bf08      	it	eq
 80122b8:	68ec      	ldreq	r4, [r5, #12]
 80122ba:	e7e6      	b.n	801228a <__swsetup_r+0x1e>
 80122bc:	0758      	lsls	r0, r3, #29
 80122be:	d512      	bpl.n	80122e6 <__swsetup_r+0x7a>
 80122c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122c2:	b141      	cbz	r1, 80122d6 <__swsetup_r+0x6a>
 80122c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122c8:	4299      	cmp	r1, r3
 80122ca:	d002      	beq.n	80122d2 <__swsetup_r+0x66>
 80122cc:	4630      	mov	r0, r6
 80122ce:	f7fd fceb 	bl	800fca8 <_free_r>
 80122d2:	2300      	movs	r3, #0
 80122d4:	6363      	str	r3, [r4, #52]	; 0x34
 80122d6:	89a3      	ldrh	r3, [r4, #12]
 80122d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122dc:	81a3      	strh	r3, [r4, #12]
 80122de:	2300      	movs	r3, #0
 80122e0:	6063      	str	r3, [r4, #4]
 80122e2:	6923      	ldr	r3, [r4, #16]
 80122e4:	6023      	str	r3, [r4, #0]
 80122e6:	89a3      	ldrh	r3, [r4, #12]
 80122e8:	f043 0308 	orr.w	r3, r3, #8
 80122ec:	81a3      	strh	r3, [r4, #12]
 80122ee:	6923      	ldr	r3, [r4, #16]
 80122f0:	b94b      	cbnz	r3, 8012306 <__swsetup_r+0x9a>
 80122f2:	89a3      	ldrh	r3, [r4, #12]
 80122f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122fc:	d003      	beq.n	8012306 <__swsetup_r+0x9a>
 80122fe:	4621      	mov	r1, r4
 8012300:	4630      	mov	r0, r6
 8012302:	f000 f933 	bl	801256c <__smakebuf_r>
 8012306:	89a0      	ldrh	r0, [r4, #12]
 8012308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801230c:	f010 0301 	ands.w	r3, r0, #1
 8012310:	d00a      	beq.n	8012328 <__swsetup_r+0xbc>
 8012312:	2300      	movs	r3, #0
 8012314:	60a3      	str	r3, [r4, #8]
 8012316:	6963      	ldr	r3, [r4, #20]
 8012318:	425b      	negs	r3, r3
 801231a:	61a3      	str	r3, [r4, #24]
 801231c:	6923      	ldr	r3, [r4, #16]
 801231e:	b943      	cbnz	r3, 8012332 <__swsetup_r+0xc6>
 8012320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012324:	d1ba      	bne.n	801229c <__swsetup_r+0x30>
 8012326:	bd70      	pop	{r4, r5, r6, pc}
 8012328:	0781      	lsls	r1, r0, #30
 801232a:	bf58      	it	pl
 801232c:	6963      	ldrpl	r3, [r4, #20]
 801232e:	60a3      	str	r3, [r4, #8]
 8012330:	e7f4      	b.n	801231c <__swsetup_r+0xb0>
 8012332:	2000      	movs	r0, #0
 8012334:	e7f7      	b.n	8012326 <__swsetup_r+0xba>
 8012336:	bf00      	nop
 8012338:	20000188 	.word	0x20000188
 801233c:	08012cdc 	.word	0x08012cdc
 8012340:	08012cfc 	.word	0x08012cfc
 8012344:	08012cbc 	.word	0x08012cbc

08012348 <abort>:
 8012348:	b508      	push	{r3, lr}
 801234a:	2006      	movs	r0, #6
 801234c:	f000 f988 	bl	8012660 <raise>
 8012350:	2001      	movs	r0, #1
 8012352:	f000 fa11 	bl	8012778 <_exit>
	...

08012358 <_close_r>:
 8012358:	b538      	push	{r3, r4, r5, lr}
 801235a:	4d06      	ldr	r5, [pc, #24]	; (8012374 <_close_r+0x1c>)
 801235c:	2300      	movs	r3, #0
 801235e:	4604      	mov	r4, r0
 8012360:	4608      	mov	r0, r1
 8012362:	602b      	str	r3, [r5, #0]
 8012364:	f000 f9ba 	bl	80126dc <_close>
 8012368:	1c43      	adds	r3, r0, #1
 801236a:	d102      	bne.n	8012372 <_close_r+0x1a>
 801236c:	682b      	ldr	r3, [r5, #0]
 801236e:	b103      	cbz	r3, 8012372 <_close_r+0x1a>
 8012370:	6023      	str	r3, [r4, #0]
 8012372:	bd38      	pop	{r3, r4, r5, pc}
 8012374:	200029a4 	.word	0x200029a4

08012378 <__sflush_r>:
 8012378:	898a      	ldrh	r2, [r1, #12]
 801237a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801237e:	4605      	mov	r5, r0
 8012380:	0710      	lsls	r0, r2, #28
 8012382:	460c      	mov	r4, r1
 8012384:	d458      	bmi.n	8012438 <__sflush_r+0xc0>
 8012386:	684b      	ldr	r3, [r1, #4]
 8012388:	2b00      	cmp	r3, #0
 801238a:	dc05      	bgt.n	8012398 <__sflush_r+0x20>
 801238c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801238e:	2b00      	cmp	r3, #0
 8012390:	dc02      	bgt.n	8012398 <__sflush_r+0x20>
 8012392:	2000      	movs	r0, #0
 8012394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801239a:	2e00      	cmp	r6, #0
 801239c:	d0f9      	beq.n	8012392 <__sflush_r+0x1a>
 801239e:	2300      	movs	r3, #0
 80123a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123a4:	682f      	ldr	r7, [r5, #0]
 80123a6:	602b      	str	r3, [r5, #0]
 80123a8:	d032      	beq.n	8012410 <__sflush_r+0x98>
 80123aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123ac:	89a3      	ldrh	r3, [r4, #12]
 80123ae:	075a      	lsls	r2, r3, #29
 80123b0:	d505      	bpl.n	80123be <__sflush_r+0x46>
 80123b2:	6863      	ldr	r3, [r4, #4]
 80123b4:	1ac0      	subs	r0, r0, r3
 80123b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123b8:	b10b      	cbz	r3, 80123be <__sflush_r+0x46>
 80123ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123bc:	1ac0      	subs	r0, r0, r3
 80123be:	2300      	movs	r3, #0
 80123c0:	4602      	mov	r2, r0
 80123c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123c4:	6a21      	ldr	r1, [r4, #32]
 80123c6:	4628      	mov	r0, r5
 80123c8:	47b0      	blx	r6
 80123ca:	1c43      	adds	r3, r0, #1
 80123cc:	89a3      	ldrh	r3, [r4, #12]
 80123ce:	d106      	bne.n	80123de <__sflush_r+0x66>
 80123d0:	6829      	ldr	r1, [r5, #0]
 80123d2:	291d      	cmp	r1, #29
 80123d4:	d82c      	bhi.n	8012430 <__sflush_r+0xb8>
 80123d6:	4a2a      	ldr	r2, [pc, #168]	; (8012480 <__sflush_r+0x108>)
 80123d8:	40ca      	lsrs	r2, r1
 80123da:	07d6      	lsls	r6, r2, #31
 80123dc:	d528      	bpl.n	8012430 <__sflush_r+0xb8>
 80123de:	2200      	movs	r2, #0
 80123e0:	6062      	str	r2, [r4, #4]
 80123e2:	04d9      	lsls	r1, r3, #19
 80123e4:	6922      	ldr	r2, [r4, #16]
 80123e6:	6022      	str	r2, [r4, #0]
 80123e8:	d504      	bpl.n	80123f4 <__sflush_r+0x7c>
 80123ea:	1c42      	adds	r2, r0, #1
 80123ec:	d101      	bne.n	80123f2 <__sflush_r+0x7a>
 80123ee:	682b      	ldr	r3, [r5, #0]
 80123f0:	b903      	cbnz	r3, 80123f4 <__sflush_r+0x7c>
 80123f2:	6560      	str	r0, [r4, #84]	; 0x54
 80123f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123f6:	602f      	str	r7, [r5, #0]
 80123f8:	2900      	cmp	r1, #0
 80123fa:	d0ca      	beq.n	8012392 <__sflush_r+0x1a>
 80123fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012400:	4299      	cmp	r1, r3
 8012402:	d002      	beq.n	801240a <__sflush_r+0x92>
 8012404:	4628      	mov	r0, r5
 8012406:	f7fd fc4f 	bl	800fca8 <_free_r>
 801240a:	2000      	movs	r0, #0
 801240c:	6360      	str	r0, [r4, #52]	; 0x34
 801240e:	e7c1      	b.n	8012394 <__sflush_r+0x1c>
 8012410:	6a21      	ldr	r1, [r4, #32]
 8012412:	2301      	movs	r3, #1
 8012414:	4628      	mov	r0, r5
 8012416:	47b0      	blx	r6
 8012418:	1c41      	adds	r1, r0, #1
 801241a:	d1c7      	bne.n	80123ac <__sflush_r+0x34>
 801241c:	682b      	ldr	r3, [r5, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d0c4      	beq.n	80123ac <__sflush_r+0x34>
 8012422:	2b1d      	cmp	r3, #29
 8012424:	d001      	beq.n	801242a <__sflush_r+0xb2>
 8012426:	2b16      	cmp	r3, #22
 8012428:	d101      	bne.n	801242e <__sflush_r+0xb6>
 801242a:	602f      	str	r7, [r5, #0]
 801242c:	e7b1      	b.n	8012392 <__sflush_r+0x1a>
 801242e:	89a3      	ldrh	r3, [r4, #12]
 8012430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012434:	81a3      	strh	r3, [r4, #12]
 8012436:	e7ad      	b.n	8012394 <__sflush_r+0x1c>
 8012438:	690f      	ldr	r7, [r1, #16]
 801243a:	2f00      	cmp	r7, #0
 801243c:	d0a9      	beq.n	8012392 <__sflush_r+0x1a>
 801243e:	0793      	lsls	r3, r2, #30
 8012440:	680e      	ldr	r6, [r1, #0]
 8012442:	bf08      	it	eq
 8012444:	694b      	ldreq	r3, [r1, #20]
 8012446:	600f      	str	r7, [r1, #0]
 8012448:	bf18      	it	ne
 801244a:	2300      	movne	r3, #0
 801244c:	eba6 0807 	sub.w	r8, r6, r7
 8012450:	608b      	str	r3, [r1, #8]
 8012452:	f1b8 0f00 	cmp.w	r8, #0
 8012456:	dd9c      	ble.n	8012392 <__sflush_r+0x1a>
 8012458:	6a21      	ldr	r1, [r4, #32]
 801245a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801245c:	4643      	mov	r3, r8
 801245e:	463a      	mov	r2, r7
 8012460:	4628      	mov	r0, r5
 8012462:	47b0      	blx	r6
 8012464:	2800      	cmp	r0, #0
 8012466:	dc06      	bgt.n	8012476 <__sflush_r+0xfe>
 8012468:	89a3      	ldrh	r3, [r4, #12]
 801246a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801246e:	81a3      	strh	r3, [r4, #12]
 8012470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012474:	e78e      	b.n	8012394 <__sflush_r+0x1c>
 8012476:	4407      	add	r7, r0
 8012478:	eba8 0800 	sub.w	r8, r8, r0
 801247c:	e7e9      	b.n	8012452 <__sflush_r+0xda>
 801247e:	bf00      	nop
 8012480:	20400001 	.word	0x20400001

08012484 <_fflush_r>:
 8012484:	b538      	push	{r3, r4, r5, lr}
 8012486:	690b      	ldr	r3, [r1, #16]
 8012488:	4605      	mov	r5, r0
 801248a:	460c      	mov	r4, r1
 801248c:	b913      	cbnz	r3, 8012494 <_fflush_r+0x10>
 801248e:	2500      	movs	r5, #0
 8012490:	4628      	mov	r0, r5
 8012492:	bd38      	pop	{r3, r4, r5, pc}
 8012494:	b118      	cbz	r0, 801249e <_fflush_r+0x1a>
 8012496:	6983      	ldr	r3, [r0, #24]
 8012498:	b90b      	cbnz	r3, 801249e <_fflush_r+0x1a>
 801249a:	f7ff f867 	bl	801156c <__sinit>
 801249e:	4b14      	ldr	r3, [pc, #80]	; (80124f0 <_fflush_r+0x6c>)
 80124a0:	429c      	cmp	r4, r3
 80124a2:	d11b      	bne.n	80124dc <_fflush_r+0x58>
 80124a4:	686c      	ldr	r4, [r5, #4]
 80124a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d0ef      	beq.n	801248e <_fflush_r+0xa>
 80124ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124b0:	07d0      	lsls	r0, r2, #31
 80124b2:	d404      	bmi.n	80124be <_fflush_r+0x3a>
 80124b4:	0599      	lsls	r1, r3, #22
 80124b6:	d402      	bmi.n	80124be <_fflush_r+0x3a>
 80124b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ba:	f7ff f90c 	bl	80116d6 <__retarget_lock_acquire_recursive>
 80124be:	4628      	mov	r0, r5
 80124c0:	4621      	mov	r1, r4
 80124c2:	f7ff ff59 	bl	8012378 <__sflush_r>
 80124c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124c8:	07da      	lsls	r2, r3, #31
 80124ca:	4605      	mov	r5, r0
 80124cc:	d4e0      	bmi.n	8012490 <_fflush_r+0xc>
 80124ce:	89a3      	ldrh	r3, [r4, #12]
 80124d0:	059b      	lsls	r3, r3, #22
 80124d2:	d4dd      	bmi.n	8012490 <_fflush_r+0xc>
 80124d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124d6:	f7ff f8ff 	bl	80116d8 <__retarget_lock_release_recursive>
 80124da:	e7d9      	b.n	8012490 <_fflush_r+0xc>
 80124dc:	4b05      	ldr	r3, [pc, #20]	; (80124f4 <_fflush_r+0x70>)
 80124de:	429c      	cmp	r4, r3
 80124e0:	d101      	bne.n	80124e6 <_fflush_r+0x62>
 80124e2:	68ac      	ldr	r4, [r5, #8]
 80124e4:	e7df      	b.n	80124a6 <_fflush_r+0x22>
 80124e6:	4b04      	ldr	r3, [pc, #16]	; (80124f8 <_fflush_r+0x74>)
 80124e8:	429c      	cmp	r4, r3
 80124ea:	bf08      	it	eq
 80124ec:	68ec      	ldreq	r4, [r5, #12]
 80124ee:	e7da      	b.n	80124a6 <_fflush_r+0x22>
 80124f0:	08012cdc 	.word	0x08012cdc
 80124f4:	08012cfc 	.word	0x08012cfc
 80124f8:	08012cbc 	.word	0x08012cbc

080124fc <_lseek_r>:
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	4d07      	ldr	r5, [pc, #28]	; (801251c <_lseek_r+0x20>)
 8012500:	4604      	mov	r4, r0
 8012502:	4608      	mov	r0, r1
 8012504:	4611      	mov	r1, r2
 8012506:	2200      	movs	r2, #0
 8012508:	602a      	str	r2, [r5, #0]
 801250a:	461a      	mov	r2, r3
 801250c:	f000 f90e 	bl	801272c <_lseek>
 8012510:	1c43      	adds	r3, r0, #1
 8012512:	d102      	bne.n	801251a <_lseek_r+0x1e>
 8012514:	682b      	ldr	r3, [r5, #0]
 8012516:	b103      	cbz	r3, 801251a <_lseek_r+0x1e>
 8012518:	6023      	str	r3, [r4, #0]
 801251a:	bd38      	pop	{r3, r4, r5, pc}
 801251c:	200029a4 	.word	0x200029a4

08012520 <__swhatbuf_r>:
 8012520:	b570      	push	{r4, r5, r6, lr}
 8012522:	460e      	mov	r6, r1
 8012524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012528:	2900      	cmp	r1, #0
 801252a:	b096      	sub	sp, #88	; 0x58
 801252c:	4614      	mov	r4, r2
 801252e:	461d      	mov	r5, r3
 8012530:	da08      	bge.n	8012544 <__swhatbuf_r+0x24>
 8012532:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012536:	2200      	movs	r2, #0
 8012538:	602a      	str	r2, [r5, #0]
 801253a:	061a      	lsls	r2, r3, #24
 801253c:	d410      	bmi.n	8012560 <__swhatbuf_r+0x40>
 801253e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012542:	e00e      	b.n	8012562 <__swhatbuf_r+0x42>
 8012544:	466a      	mov	r2, sp
 8012546:	f000 f8a7 	bl	8012698 <_fstat_r>
 801254a:	2800      	cmp	r0, #0
 801254c:	dbf1      	blt.n	8012532 <__swhatbuf_r+0x12>
 801254e:	9a01      	ldr	r2, [sp, #4]
 8012550:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012554:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012558:	425a      	negs	r2, r3
 801255a:	415a      	adcs	r2, r3
 801255c:	602a      	str	r2, [r5, #0]
 801255e:	e7ee      	b.n	801253e <__swhatbuf_r+0x1e>
 8012560:	2340      	movs	r3, #64	; 0x40
 8012562:	2000      	movs	r0, #0
 8012564:	6023      	str	r3, [r4, #0]
 8012566:	b016      	add	sp, #88	; 0x58
 8012568:	bd70      	pop	{r4, r5, r6, pc}
	...

0801256c <__smakebuf_r>:
 801256c:	898b      	ldrh	r3, [r1, #12]
 801256e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012570:	079d      	lsls	r5, r3, #30
 8012572:	4606      	mov	r6, r0
 8012574:	460c      	mov	r4, r1
 8012576:	d507      	bpl.n	8012588 <__smakebuf_r+0x1c>
 8012578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801257c:	6023      	str	r3, [r4, #0]
 801257e:	6123      	str	r3, [r4, #16]
 8012580:	2301      	movs	r3, #1
 8012582:	6163      	str	r3, [r4, #20]
 8012584:	b002      	add	sp, #8
 8012586:	bd70      	pop	{r4, r5, r6, pc}
 8012588:	ab01      	add	r3, sp, #4
 801258a:	466a      	mov	r2, sp
 801258c:	f7ff ffc8 	bl	8012520 <__swhatbuf_r>
 8012590:	9900      	ldr	r1, [sp, #0]
 8012592:	4605      	mov	r5, r0
 8012594:	4630      	mov	r0, r6
 8012596:	f7fd fbf3 	bl	800fd80 <_malloc_r>
 801259a:	b948      	cbnz	r0, 80125b0 <__smakebuf_r+0x44>
 801259c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125a0:	059a      	lsls	r2, r3, #22
 80125a2:	d4ef      	bmi.n	8012584 <__smakebuf_r+0x18>
 80125a4:	f023 0303 	bic.w	r3, r3, #3
 80125a8:	f043 0302 	orr.w	r3, r3, #2
 80125ac:	81a3      	strh	r3, [r4, #12]
 80125ae:	e7e3      	b.n	8012578 <__smakebuf_r+0xc>
 80125b0:	4b0d      	ldr	r3, [pc, #52]	; (80125e8 <__smakebuf_r+0x7c>)
 80125b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80125b4:	89a3      	ldrh	r3, [r4, #12]
 80125b6:	6020      	str	r0, [r4, #0]
 80125b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125bc:	81a3      	strh	r3, [r4, #12]
 80125be:	9b00      	ldr	r3, [sp, #0]
 80125c0:	6163      	str	r3, [r4, #20]
 80125c2:	9b01      	ldr	r3, [sp, #4]
 80125c4:	6120      	str	r0, [r4, #16]
 80125c6:	b15b      	cbz	r3, 80125e0 <__smakebuf_r+0x74>
 80125c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125cc:	4630      	mov	r0, r6
 80125ce:	f000 f875 	bl	80126bc <_isatty_r>
 80125d2:	b128      	cbz	r0, 80125e0 <__smakebuf_r+0x74>
 80125d4:	89a3      	ldrh	r3, [r4, #12]
 80125d6:	f023 0303 	bic.w	r3, r3, #3
 80125da:	f043 0301 	orr.w	r3, r3, #1
 80125de:	81a3      	strh	r3, [r4, #12]
 80125e0:	89a0      	ldrh	r0, [r4, #12]
 80125e2:	4305      	orrs	r5, r0
 80125e4:	81a5      	strh	r5, [r4, #12]
 80125e6:	e7cd      	b.n	8012584 <__smakebuf_r+0x18>
 80125e8:	08011505 	.word	0x08011505

080125ec <_read_r>:
 80125ec:	b538      	push	{r3, r4, r5, lr}
 80125ee:	4d07      	ldr	r5, [pc, #28]	; (801260c <_read_r+0x20>)
 80125f0:	4604      	mov	r4, r0
 80125f2:	4608      	mov	r0, r1
 80125f4:	4611      	mov	r1, r2
 80125f6:	2200      	movs	r2, #0
 80125f8:	602a      	str	r2, [r5, #0]
 80125fa:	461a      	mov	r2, r3
 80125fc:	f000 f89e 	bl	801273c <_read>
 8012600:	1c43      	adds	r3, r0, #1
 8012602:	d102      	bne.n	801260a <_read_r+0x1e>
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	b103      	cbz	r3, 801260a <_read_r+0x1e>
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	bd38      	pop	{r3, r4, r5, pc}
 801260c:	200029a4 	.word	0x200029a4

08012610 <_raise_r>:
 8012610:	291f      	cmp	r1, #31
 8012612:	b538      	push	{r3, r4, r5, lr}
 8012614:	4604      	mov	r4, r0
 8012616:	460d      	mov	r5, r1
 8012618:	d904      	bls.n	8012624 <_raise_r+0x14>
 801261a:	2316      	movs	r3, #22
 801261c:	6003      	str	r3, [r0, #0]
 801261e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012622:	bd38      	pop	{r3, r4, r5, pc}
 8012624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012626:	b112      	cbz	r2, 801262e <_raise_r+0x1e>
 8012628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801262c:	b94b      	cbnz	r3, 8012642 <_raise_r+0x32>
 801262e:	4620      	mov	r0, r4
 8012630:	f000 f830 	bl	8012694 <_getpid_r>
 8012634:	462a      	mov	r2, r5
 8012636:	4601      	mov	r1, r0
 8012638:	4620      	mov	r0, r4
 801263a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801263e:	f000 b817 	b.w	8012670 <_kill_r>
 8012642:	2b01      	cmp	r3, #1
 8012644:	d00a      	beq.n	801265c <_raise_r+0x4c>
 8012646:	1c59      	adds	r1, r3, #1
 8012648:	d103      	bne.n	8012652 <_raise_r+0x42>
 801264a:	2316      	movs	r3, #22
 801264c:	6003      	str	r3, [r0, #0]
 801264e:	2001      	movs	r0, #1
 8012650:	e7e7      	b.n	8012622 <_raise_r+0x12>
 8012652:	2400      	movs	r4, #0
 8012654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012658:	4628      	mov	r0, r5
 801265a:	4798      	blx	r3
 801265c:	2000      	movs	r0, #0
 801265e:	e7e0      	b.n	8012622 <_raise_r+0x12>

08012660 <raise>:
 8012660:	4b02      	ldr	r3, [pc, #8]	; (801266c <raise+0xc>)
 8012662:	4601      	mov	r1, r0
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	f7ff bfd3 	b.w	8012610 <_raise_r>
 801266a:	bf00      	nop
 801266c:	20000188 	.word	0x20000188

08012670 <_kill_r>:
 8012670:	b538      	push	{r3, r4, r5, lr}
 8012672:	4d07      	ldr	r5, [pc, #28]	; (8012690 <_kill_r+0x20>)
 8012674:	2300      	movs	r3, #0
 8012676:	4604      	mov	r4, r0
 8012678:	4608      	mov	r0, r1
 801267a:	4611      	mov	r1, r2
 801267c:	602b      	str	r3, [r5, #0]
 801267e:	f000 f84d 	bl	801271c <_kill>
 8012682:	1c43      	adds	r3, r0, #1
 8012684:	d102      	bne.n	801268c <_kill_r+0x1c>
 8012686:	682b      	ldr	r3, [r5, #0]
 8012688:	b103      	cbz	r3, 801268c <_kill_r+0x1c>
 801268a:	6023      	str	r3, [r4, #0]
 801268c:	bd38      	pop	{r3, r4, r5, pc}
 801268e:	bf00      	nop
 8012690:	200029a4 	.word	0x200029a4

08012694 <_getpid_r>:
 8012694:	f000 b832 	b.w	80126fc <_getpid>

08012698 <_fstat_r>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	4d07      	ldr	r5, [pc, #28]	; (80126b8 <_fstat_r+0x20>)
 801269c:	2300      	movs	r3, #0
 801269e:	4604      	mov	r4, r0
 80126a0:	4608      	mov	r0, r1
 80126a2:	4611      	mov	r1, r2
 80126a4:	602b      	str	r3, [r5, #0]
 80126a6:	f000 f821 	bl	80126ec <_fstat>
 80126aa:	1c43      	adds	r3, r0, #1
 80126ac:	d102      	bne.n	80126b4 <_fstat_r+0x1c>
 80126ae:	682b      	ldr	r3, [r5, #0]
 80126b0:	b103      	cbz	r3, 80126b4 <_fstat_r+0x1c>
 80126b2:	6023      	str	r3, [r4, #0]
 80126b4:	bd38      	pop	{r3, r4, r5, pc}
 80126b6:	bf00      	nop
 80126b8:	200029a4 	.word	0x200029a4

080126bc <_isatty_r>:
 80126bc:	b538      	push	{r3, r4, r5, lr}
 80126be:	4d06      	ldr	r5, [pc, #24]	; (80126d8 <_isatty_r+0x1c>)
 80126c0:	2300      	movs	r3, #0
 80126c2:	4604      	mov	r4, r0
 80126c4:	4608      	mov	r0, r1
 80126c6:	602b      	str	r3, [r5, #0]
 80126c8:	f000 f820 	bl	801270c <_isatty>
 80126cc:	1c43      	adds	r3, r0, #1
 80126ce:	d102      	bne.n	80126d6 <_isatty_r+0x1a>
 80126d0:	682b      	ldr	r3, [r5, #0]
 80126d2:	b103      	cbz	r3, 80126d6 <_isatty_r+0x1a>
 80126d4:	6023      	str	r3, [r4, #0]
 80126d6:	bd38      	pop	{r3, r4, r5, pc}
 80126d8:	200029a4 	.word	0x200029a4

080126dc <_close>:
 80126dc:	4b02      	ldr	r3, [pc, #8]	; (80126e8 <_close+0xc>)
 80126de:	2258      	movs	r2, #88	; 0x58
 80126e0:	601a      	str	r2, [r3, #0]
 80126e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126e6:	4770      	bx	lr
 80126e8:	200029a4 	.word	0x200029a4

080126ec <_fstat>:
 80126ec:	4b02      	ldr	r3, [pc, #8]	; (80126f8 <_fstat+0xc>)
 80126ee:	2258      	movs	r2, #88	; 0x58
 80126f0:	601a      	str	r2, [r3, #0]
 80126f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126f6:	4770      	bx	lr
 80126f8:	200029a4 	.word	0x200029a4

080126fc <_getpid>:
 80126fc:	4b02      	ldr	r3, [pc, #8]	; (8012708 <_getpid+0xc>)
 80126fe:	2258      	movs	r2, #88	; 0x58
 8012700:	601a      	str	r2, [r3, #0]
 8012702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012706:	4770      	bx	lr
 8012708:	200029a4 	.word	0x200029a4

0801270c <_isatty>:
 801270c:	4b02      	ldr	r3, [pc, #8]	; (8012718 <_isatty+0xc>)
 801270e:	2258      	movs	r2, #88	; 0x58
 8012710:	601a      	str	r2, [r3, #0]
 8012712:	2000      	movs	r0, #0
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	200029a4 	.word	0x200029a4

0801271c <_kill>:
 801271c:	4b02      	ldr	r3, [pc, #8]	; (8012728 <_kill+0xc>)
 801271e:	2258      	movs	r2, #88	; 0x58
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012726:	4770      	bx	lr
 8012728:	200029a4 	.word	0x200029a4

0801272c <_lseek>:
 801272c:	4b02      	ldr	r3, [pc, #8]	; (8012738 <_lseek+0xc>)
 801272e:	2258      	movs	r2, #88	; 0x58
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012736:	4770      	bx	lr
 8012738:	200029a4 	.word	0x200029a4

0801273c <_read>:
 801273c:	4b02      	ldr	r3, [pc, #8]	; (8012748 <_read+0xc>)
 801273e:	2258      	movs	r2, #88	; 0x58
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012746:	4770      	bx	lr
 8012748:	200029a4 	.word	0x200029a4

0801274c <_sbrk>:
 801274c:	4a04      	ldr	r2, [pc, #16]	; (8012760 <_sbrk+0x14>)
 801274e:	6811      	ldr	r1, [r2, #0]
 8012750:	4603      	mov	r3, r0
 8012752:	b909      	cbnz	r1, 8012758 <_sbrk+0xc>
 8012754:	4903      	ldr	r1, [pc, #12]	; (8012764 <_sbrk+0x18>)
 8012756:	6011      	str	r1, [r2, #0]
 8012758:	6810      	ldr	r0, [r2, #0]
 801275a:	4403      	add	r3, r0
 801275c:	6013      	str	r3, [r2, #0]
 801275e:	4770      	bx	lr
 8012760:	200029a8 	.word	0x200029a8
 8012764:	200029b0 	.word	0x200029b0

08012768 <_write>:
 8012768:	4b02      	ldr	r3, [pc, #8]	; (8012774 <_write+0xc>)
 801276a:	2258      	movs	r2, #88	; 0x58
 801276c:	601a      	str	r2, [r3, #0]
 801276e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012772:	4770      	bx	lr
 8012774:	200029a4 	.word	0x200029a4

08012778 <_exit>:
 8012778:	e7fe      	b.n	8012778 <_exit>
	...

0801277c <_init>:
 801277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277e:	bf00      	nop
 8012780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012782:	bc08      	pop	{r3}
 8012784:	469e      	mov	lr, r3
 8012786:	4770      	bx	lr

08012788 <_fini>:
 8012788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278a:	bf00      	nop
 801278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801278e:	bc08      	pop	{r3}
 8012790:	469e      	mov	lr, r3
 8012792:	4770      	bx	lr
