
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b54  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08011d18  08011d18  00021d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012410  08012410  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08012410  08012410  00022410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012418  08012418  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012418  08012418  00022418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801241c  0801241c  0002241c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08012420  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c8  20000358  08012778  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002920  08012778  00032920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c094  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005887  00000000  00000000  0005c41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002220  00000000  00000000  00061ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd8  00000000  00000000  00063ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008790  00000000  00000000  00065ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c789  00000000  00000000  0006e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012051a  00000000  00000000  0009adb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bb2d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a214  00000000  00000000  001bb324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c5538  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c5604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000358 	.word	0x20000358
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011cfc 	.word	0x08011cfc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000035c 	.word	0x2000035c
 80001fc:	08011cfc 	.word	0x08011cfc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f001 fe1b 	bl	8002b36 <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f001 fe12 	bl	8002b52 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000374 	.word	0x20000374
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003c8 	.word	0x200003c8

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fd3c 	bl	8002a18 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 fdd0 	bl	8002b52 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f001 fe12 	bl	8002be8 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00e f911 	bl	800f218 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f003 ffe0 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f001 fb0a 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f001 faf4 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	f5ad 6d2e 	sub.w	sp, sp, #2784	; 0xae0
 80010a6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80010a8:	4bc0      	ldr	r3, [pc, #768]	; (80013ac <main+0x30c>)
 80010aa:	f607 2444 	addw	r4, r7, #2628	; 0xa44
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	c403      	stmia	r4!, {r0, r1}
 80010ba:	7022      	strb	r2, [r4, #0]
 80010bc:	f607 235d 	addw	r3, r7, #2653	; 0xa5d
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 80010d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80010d4:	f6a3 1358 	subw	r3, r3, #2392	; 0x958
 80010d8:	461a      	mov	r2, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	6053      	str	r3, [r2, #4]
 80010e0:	6093      	str	r3, [r2, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 80010e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80010e8:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 80010f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80010fa:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 8001106:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800110a:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8001122:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001126:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	3304      	adds	r3, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 800113e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001142:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 800115a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800115e:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8001162:	4a93      	ldr	r2, [pc, #588]	; (80013b0 <main+0x310>)
 8001164:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 8001166:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800116a:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	3304      	adds	r3, #4
 8001174:	2224      	movs	r2, #36	; 0x24
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00e f84d 	bl	800f218 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 800117e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001182:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	3304      	adds	r3, #4
 800118c:	2224      	movs	r2, #36	; 0x24
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00e f841 	bl	800f218 <memset>
//	int message;
//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 80011a2:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80011a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80011aa:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f000 ffe8 	bl	8002196 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f907 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f000 fb1f 	bl	800180c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ce:	f000 f969 	bl	80014a4 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 80011d2:	f000 f9a7 	bl	8001524 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80011d6:	f000 f9c7 	bl	8001568 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011da:	f000 fa79 	bl	80016d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011de:	f000 fac5 	bl	800176c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80011e2:	f00b fb6b 	bl	800c8bc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80011e6:	f00d f9f3 	bl	800e5d0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 80011ea:	f000 f9fb 	bl	80015e4 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011ee:	f000 f945 	bl	800147c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize HAL for uart interrupts
  HAL_MspInit();
 80011f2:	f000 fc73 	bl	8001adc <HAL_MspInit>
  // Initialize i2c2 with custom driver
  BSP_I2C2_Init();
 80011f6:	f7ff fe71 	bl	8000edc <BSP_I2C2_Init>
  //Initialize msp for both uarts
  HAL_UART_MspInit(&huart1);
 80011fa:	486e      	ldr	r0, [pc, #440]	; (80013b4 <main+0x314>)
 80011fc:	f000 fdd6 	bl	8001dac <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8001200:	486d      	ldr	r0, [pc, #436]	; (80013b8 <main+0x318>)
 8001202:	f000 fdd3 	bl	8001dac <HAL_UART_MspInit>

  HAL_StatusTypeDef status;


  // enable channel 1 for MIRA communication
  HAL_GPIO_TogglePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin);
 8001206:	2110      	movs	r1, #16
 8001208:	486c      	ldr	r0, [pc, #432]	; (80013bc <main+0x31c>)
 800120a:	f001 fbeb 	bl	80029e4 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin);
 800120e:	2120      	movs	r1, #32
 8001210:	486a      	ldr	r0, [pc, #424]	; (80013bc <main+0x31c>)
 8001212:	f001 fbe7 	bl	80029e4 <HAL_GPIO_TogglePin>

  //msg_size = build_message(&message, &command, &payload);
  //status = mira_write(&huart1, message, 5000);
	mira_rxBuffer = mira_rxBuffer1;
 8001216:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <main+0x320>)
 8001218:	4a6a      	ldr	r2, [pc, #424]	; (80013c4 <main+0x324>)
 800121a:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_UE);
 800121c:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <main+0x314>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001224:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8001228:	e853 3f00 	ldrex	r3, [r3]
 800122c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
   return(result);
 8001230:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 800123c:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <main+0x314>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 8001246:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 800124a:	f8c7 2aa0 	str.w	r2, [r7, #2720]	; 0xaa0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800124e:	f8d7 1aa0 	ldr.w	r1, [r7, #2720]	; 0xaa0
 8001252:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 8001256:	e841 2300 	strex	r3, r2, [r1]
 800125a:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
   return(result);
 800125e:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1da      	bne.n	800121c <main+0x17c>
	ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_RE);
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <main+0x314>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800126e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8001272:	e853 3f00 	ldrex	r3, [r3]
 8001276:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
   return(result);
 800127a:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
 8001286:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <main+0x314>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8001290:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8001294:	f8c7 2ab0 	str.w	r2, [r7, #2736]	; 0xab0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001298:	f8d7 1ab0 	ldr.w	r1, [r7, #2736]	; 0xab0
 800129c:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 80012a0:	e841 2300 	strex	r3, r2, [r1]
 80012a4:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
   return(result);
 80012a8:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1da      	bne.n	8001266 <main+0x1c6>
	ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80012b0:	4b40      	ldr	r3, [pc, #256]	; (80013b4 <main+0x314>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012b8:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80012bc:	e853 3f00 	ldrex	r3, [r3]
 80012c0:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0
   return(result);
 80012c4:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <main+0x314>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80012da:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 80012de:	f8c7 2ac8 	str.w	r2, [r7, #2760]	; 0xac8
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012e2:	f8d7 1ac8 	ldr.w	r1, [r7, #2760]	; 0xac8
 80012e6:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 80012ea:	e841 2300 	strex	r3, r2, [r1]
 80012ee:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
   return(result);
 80012f2:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1da      	bne.n	80012b0 <main+0x210>
	uint8_t reg[1] = {0x02};
 80012fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80012fe:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 8001302:	2202      	movs	r2, #2
 8001304:	701a      	strb	r2, [r3, #0]
	uint8_t data[4] = {0x00,0x00,0x00,0x01};
 8001306:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800130a:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 800130e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001312:	601a      	str	r2, [r3, #0]
	uint8_t mira_rx[10];
	status = mira_write_register(&huart1, reg, data, mira_rx, 5000);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	f107 0210 	add.w	r2, r7, #16
 800131a:	f107 0114 	add.w	r1, r7, #20
 800131e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001322:	9000      	str	r0, [sp, #0]
 8001324:	4823      	ldr	r0, [pc, #140]	; (80013b4 <main+0x314>)
 8001326:	f000 fb75 	bl	8001a14 <mira_write_register>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 3a9b 	strb.w	r3, [r7, #2715]	; 0xa9b

	while(mira_data_ready != 1);
 8001330:	bf00      	nop
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <main+0x328>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d1fb      	bne.n	8001332 <main+0x292>
	// Toggle LED on board whenever printing data
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800133a:	2108      	movs	r1, #8
 800133c:	4823      	ldr	r0, [pc, #140]	; (80013cc <main+0x32c>)
 800133e:	f001 fb51 	bl	80029e4 <HAL_GPIO_TogglePin>
	//while (CDC_Transmit_FS ("GPS START\n", 10) == USBD_BUSY);

	// Choose the buffer from the two data buffers that is nit currently being written into
	if (mira_rxBuffer == mira_rxBuffer1)
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <main+0x320>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <main+0x324>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d10d      	bne.n	8001368 <main+0x2c8>
		{
		while (CDC_Transmit_FS (mira_rxBuffer2, strlen(mira_rxBuffer2)) == USBD_BUSY);
 800134c:	bf00      	nop
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <main+0x330>)
 8001350:	f7fe ff56 	bl	8000200 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29b      	uxth	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <main+0x330>)
 800135c:	f00d f9f6 	bl	800e74c <CDC_Transmit_FS>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d0f3      	beq.n	800134e <main+0x2ae>
 8001366:	e00c      	b.n	8001382 <main+0x2e2>
		}
	else
		{
		while (CDC_Transmit_FS (mira_rxBuffer1, strlen(mira_rxBuffer1)) == USBD_BUSY);
 8001368:	bf00      	nop
 800136a:	4816      	ldr	r0, [pc, #88]	; (80013c4 <main+0x324>)
 800136c:	f7fe ff48 	bl	8000200 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29b      	uxth	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <main+0x324>)
 8001378:	f00d f9e8 	bl	800e74c <CDC_Transmit_FS>
 800137c:	4603      	mov	r3, r0
 800137e:	2b01      	cmp	r3, #1
 8001380:	d0f3      	beq.n	800136a <main+0x2ca>
		}

	// Toggle flags to allow for buffer swapping and next data batch sending
	mira_data_ready ^= 1;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <main+0x328>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f083 0301 	eor.w	r3, r3, #1
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <main+0x328>)
 800138c:	6013      	str	r3, [r2, #0]
	mira_send_ready |= 1;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <main+0x334>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <main+0x334>)
 8001398:	6013      	str	r3, [r2, #0]

	if (status == HAL_OK) {
 800139a:	f897 3a9b 	ldrb.w	r3, [r7, #2715]	; 0xa9b
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <main+0x30a>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80013a2:	2140      	movs	r1, #64	; 0x40
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <main+0x32c>)
 80013a6:	f001 fb1d 	bl	80029e4 <HAL_GPIO_TogglePin>

	//reg[0] = 0x00;
	//data[3] = 0x05;
	//status = mira_write_register(&huart1, reg, data, 5000);

	while(1);
 80013aa:	e7fe      	b.n	80013aa <main+0x30a>
 80013ac:	08011d18 	.word	0x08011d18
 80013b0:	00202d20 	.word	0x00202d20
 80013b4:	20000550 	.word	0x20000550
 80013b8:	200005e0 	.word	0x200005e0
 80013bc:	48001000 	.word	0x48001000
 80013c0:	20000ce8 	.word	0x20000ce8
 80013c4:	20000cc0 	.word	0x20000cc0
 80013c8:	20000cf0 	.word	0x20000cf0
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	20000cd4 	.word	0x20000cd4
 80013d4:	20000004 	.word	0x20000004

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b096      	sub	sp, #88	; 0x58
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2244      	movs	r2, #68	; 0x44
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00d ff16 	bl	800f218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80013fa:	2000      	movs	r0, #0
 80013fc:	f002 fe2c 	bl	8004058 <HAL_PWREx_ControlVoltageScaling>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001406:	f000 fad1 	bl	80019ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800140a:	2321      	movs	r3, #33	; 0x21
 800140c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141c:	2303      	movs	r3, #3
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001424:	231e      	movs	r3, #30
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001430:	2302      	movs	r3, #2
 8001432:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fec1 	bl	80041c0 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001444:	f000 fab2 	bl	80019ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2303      	movs	r3, #3
 800144e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2105      	movs	r1, #5
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fac7 	bl	80049f4 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800146c:	f000 fa9e 	bl	80019ac <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001470:	f003 fcbe 	bl	8004df0 <HAL_RCC_EnableCSS>
}
 8001474:	bf00      	nop
 8001476:	3758      	adds	r7, #88	; 0x58
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	201a      	movs	r0, #26
 8001486:	f000 fffa 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800148a:	201a      	movs	r0, #26
 800148c:	f001 f813 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2026      	movs	r0, #38	; 0x26
 8001496:	f000 fff2 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149a:	2026      	movs	r0, #38	; 0x26
 800149c:	f001 f80b 	bl	80024b6 <HAL_NVIC_EnableIRQ>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_I2C1_Init+0x74>)
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <MX_I2C1_Init+0x78>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_I2C1_Init+0x74>)
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <MX_I2C1_Init+0x7c>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_I2C1_Init+0x74>)
 80014bc:	2201      	movs	r2, #1
 80014be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_I2C1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_I2C1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <MX_I2C1_Init+0x74>)
 80014e0:	f001 fa9a 	bl	8002a18 <HAL_I2C_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ea:	f000 fa5f 	bl	80019ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ee:	2100      	movs	r1, #0
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <MX_I2C1_Init+0x74>)
 80014f2:	f001 fb2e 	bl	8002b52 <HAL_I2CEx_ConfigAnalogFilter>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014fc:	f000 fa56 	bl	80019ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_I2C1_Init+0x74>)
 8001504:	f001 fb70 	bl	8002be8 <HAL_I2CEx_ConfigDigitalFilter>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800150e:	f000 fa4d 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003cc 	.word	0x200003cc
 800151c:	40005400 	.word	0x40005400
 8001520:	307075b1 	.word	0x307075b1

08001524 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_SDMMC1_SD_Init+0x3c>)
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <MX_SDMMC1_SD_Init+0x40>)
 800152c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_SDMMC1_SD_Init+0x3c>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_SDMMC1_SD_Init+0x3c>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_SDMMC1_SD_Init+0x3c>)
 800153c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001540:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_SDMMC1_SD_Init+0x3c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <MX_SDMMC1_SD_Init+0x3c>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <MX_SDMMC1_SD_Init+0x3c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000420 	.word	0x20000420
 8001564:	50062400 	.word	0x50062400

08001568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_SPI1_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_SPI1_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_SPI1_Init+0x74>)
 8001574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI1_Init+0x74>)
 8001582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_SPI1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI1_Init+0x74>)
 8001596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI1_Init+0x74>)
 800159e:	2228      	movs	r2, #40	; 0x28
 80015a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c2:	2208      	movs	r2, #8
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c8:	f006 fe89 	bl	80082de <HAL_SPI_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f000 f9eb 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200004a0 	.word	0x200004a0
 80015e0:	40013000 	.word	0x40013000

080015e4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b092      	sub	sp, #72	; 0x48
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fe:	463b      	mov	r3, r7
 8001600:	222c      	movs	r2, #44	; 0x2c
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00d fe07 	bl	800f218 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <MX_TIM17_Init+0xe4>)
 800160c:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <MX_TIM17_Init+0xe8>)
 800160e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <MX_TIM17_Init+0xe4>)
 8001612:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001616:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_TIM17_Init+0xe4>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <MX_TIM17_Init+0xe4>)
 8001620:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001624:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_TIM17_Init+0xe4>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <MX_TIM17_Init+0xe4>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_TIM17_Init+0xe4>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001638:	4823      	ldr	r0, [pc, #140]	; (80016c8 <MX_TIM17_Init+0xe4>)
 800163a:	f006 fef3 	bl	8008424 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001644:	f000 f9b2 	bl	80019ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001648:	481f      	ldr	r0, [pc, #124]	; (80016c8 <MX_TIM17_Init+0xe4>)
 800164a:	f006 ff42 	bl	80084d2 <HAL_TIM_OC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001654:	f000 f9aa 	bl	80019ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001678:	2200      	movs	r2, #0
 800167a:	4619      	mov	r1, r3
 800167c:	4812      	ldr	r0, [pc, #72]	; (80016c8 <MX_TIM17_Init+0xe4>)
 800167e:	f007 f8a9 	bl	80087d4 <HAL_TIM_OC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001688:	f000 f990 	bl	80019ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_TIM17_Init+0xe4>)
 80016b0:	f007 fcac 	bl	800900c <HAL_TIMEx_ConfigBreakDeadTime>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80016ba:	f000 f977 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3748      	adds	r7, #72	; 0x48
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000504 	.word	0x20000504
 80016cc:	40014800 	.word	0x40014800

080016d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_USART1_UART_Init+0x90>)
 80016d6:	4a23      	ldr	r2, [pc, #140]	; (8001764 <MX_USART1_UART_Init+0x94>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <MX_USART1_UART_Init+0x90>)
 80016dc:	4a22      	ldr	r2, [pc, #136]	; (8001768 <MX_USART1_UART_Init+0x98>)
 80016de:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_USART1_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_USART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_USART1_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_USART1_UART_Init+0x90>)
 80016f4:	220c      	movs	r2, #12
 80016f6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_USART1_UART_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_USART1_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_USART1_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_USART1_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_USART1_UART_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001716:	4812      	ldr	r0, [pc, #72]	; (8001760 <MX_USART1_UART_Init+0x90>)
 8001718:	f007 fd14 	bl	8009144 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001722:	f000 f943 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <MX_USART1_UART_Init+0x90>)
 800172a:	f008 feda 	bl	800a4e2 <HAL_UARTEx_SetTxFifoThreshold>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001734:	f000 f93a 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001738:	2100      	movs	r1, #0
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <MX_USART1_UART_Init+0x90>)
 800173c:	f008 ff0f 	bl	800a55e <HAL_UARTEx_SetRxFifoThreshold>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001746:	f000 f931 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_USART1_UART_Init+0x90>)
 800174c:	f008 fe90 	bl	800a470 <HAL_UARTEx_DisableFifoMode>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001756:	f000 f929 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000550 	.word	0x20000550
 8001764:	40013800 	.word	0x40013800
 8001768:	0001c138 	.word	0x0001c138

0800176c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <MX_USART2_UART_Init+0x98>)
 8001772:	4a25      	ldr	r2, [pc, #148]	; (8001808 <MX_USART2_UART_Init+0x9c>)
 8001774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <MX_USART2_UART_Init+0x98>)
 8001778:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800177c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <MX_USART2_UART_Init+0x98>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <MX_USART2_UART_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_USART2_UART_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <MX_USART2_UART_Init+0x98>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_USART2_UART_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_USART2_UART_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017b0:	2210      	movs	r2, #16
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017be:	f007 fcc1 	bl	8009144 <HAL_UART_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80017c8:	f000 f8f0 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017cc:	2100      	movs	r1, #0
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017d0:	f008 fe87 	bl	800a4e2 <HAL_UARTEx_SetTxFifoThreshold>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80017da:	f000 f8e7 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017de:	2100      	movs	r1, #0
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017e2:	f008 febc 	bl	800a55e <HAL_UARTEx_SetRxFifoThreshold>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80017ec:	f000 f8de 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_USART2_UART_Init+0x98>)
 80017f2:	f008 fe3d 	bl	800a470 <HAL_UARTEx_DisableFifoMode>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80017fc:	f000 f8d6 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200005e0 	.word	0x200005e0
 8001808:	40004400 	.word	0x40004400

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001822:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a5c      	ldr	r2, [pc, #368]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	4b57      	ldr	r3, [pc, #348]	; (8001998 <MX_GPIO_Init+0x18c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a56      	ldr	r2, [pc, #344]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b54      	ldr	r3, [pc, #336]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	4b51      	ldr	r3, [pc, #324]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4a50      	ldr	r2, [pc, #320]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185e:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <MX_GPIO_Init+0x18c>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b48      	ldr	r3, [pc, #288]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b45      	ldr	r3, [pc, #276]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a44      	ldr	r2, [pc, #272]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b42      	ldr	r3, [pc, #264]	; (8001998 <MX_GPIO_Init+0x18c>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <MX_GPIO_Init+0x18c>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a3e      	ldr	r2, [pc, #248]	; (8001998 <MX_GPIO_Init+0x18c>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <MX_GPIO_Init+0x18c>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80018b2:	2200      	movs	r2, #0
 80018b4:	f641 013c 	movw	r1, #6204	; 0x183c
 80018b8:	4838      	ldr	r0, [pc, #224]	; (800199c <MX_GPIO_Init+0x190>)
 80018ba:	f001 f87b 	bl	80029b4 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	2130      	movs	r1, #48	; 0x30
 80018c2:	4837      	ldr	r0, [pc, #220]	; (80019a0 <MX_GPIO_Init+0x194>)
 80018c4:	f001 f876 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2178      	movs	r1, #120	; 0x78
 80018cc:	4835      	ldr	r0, [pc, #212]	; (80019a4 <MX_GPIO_Init+0x198>)
 80018ce:	f001 f871 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80018d2:	f641 033c 	movw	r3, #6204	; 0x183c
 80018d6:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	482c      	ldr	r0, [pc, #176]	; (800199c <MX_GPIO_Init+0x190>)
 80018ec:	f000 feb8 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	4826      	ldr	r0, [pc, #152]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001906:	f000 feab 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 800190a:	f248 0302 	movw	r3, #32770	; 0x8002
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 fe9d 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8001926:	2330      	movs	r3, #48	; 0x30
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4818      	ldr	r0, [pc, #96]	; (80019a0 <MX_GPIO_Init+0x194>)
 800193e:	f000 fe8f 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8001942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194c:	2301      	movs	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4811      	ldr	r0, [pc, #68]	; (800199c <MX_GPIO_Init+0x190>)
 8001958:	f000 fe82 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800195c:	2378      	movs	r3, #120	; 0x78
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <MX_GPIO_Init+0x198>)
 8001974:	f000 fe74 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8001978:	2320      	movs	r3, #32
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_GPIO_Init+0x19c>)
 800198c:	f000 fe68 	bl	8002660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001990:	bf00      	nop
 8001992:	3730      	adds	r7, #48	; 0x30
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	48001000 	.word	0x48001000
 80019a0:	48000800 	.word	0x48000800
 80019a4:	48000c00 	.word	0x48000c00
 80019a8:	48000400 	.word	0x48000400

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <Error_Handler+0x10>)
 80019b6:	f00e f981 	bl	800fcbc <iprintf>
  while (1)
 80019ba:	e7fe      	b.n	80019ba <Error_Handler+0xe>
 80019bc:	08011d4c 	.word	0x08011d4c

080019c0 <CRC16>:
//empty payload
const uint8_t EMPTY_PAYLOAD[1] = {0x99}; //Check that this is not used


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
	0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
	0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
	0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 80019cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d0:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 80019d2:	e011      	b.n	80019f8 <CRC16+0x38>
	{
	  nTemp = *nData++ ^ wCRCWord;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	89fb      	ldrh	r3, [r7, #14]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4053      	eors	r3, r2
 80019e2:	737b      	strb	r3, [r7, #13]
	  wCRCWord >>= 8;
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	81fb      	strh	r3, [r7, #14]
	  wCRCWord ^= wCRCTable[nTemp];
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <CRC16+0x50>)
 80019ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	4053      	eors	r3, r2
 80019f6:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	807a      	strh	r2, [r7, #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1e8      	bne.n	80019d4 <CRC16+0x14>
	}
	return wCRCWord;
 8001a02:	89fb      	ldrh	r3, [r7, #14]

}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	08011dac 	.word	0x08011dac

08001a14 <mira_write_register>:


HAL_StatusTypeDef mira_write_register(UART_HandleTypeDef *huart, uint8_t *reg, uint8_t *data, uint8_t *rxBuffer, uint32_t Timeout){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t message[14];

	uint8_t sync[2] = {0x5a, 0xce};
 8001a22:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8001a26:	843b      	strh	r3, [r7, #32]
	uint8_t length[2] = {0x00, 0x05};
 8001a28:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001a2c:	83bb      	strh	r3, [r7, #28]
	uint8_t src[1] = {0xc1};
 8001a2e:	23c1      	movs	r3, #193	; 0xc1
 8001a30:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8001a32:	23e1      	movs	r3, #225	; 0xe1
 8001a34:	753b      	strb	r3, [r7, #20]
	uint8_t command[1] = {0x03};
 8001a36:	2303      	movs	r3, #3
 8001a38:	743b      	strb	r3, [r7, #16]
	//uint8_t payload[5] = {0x02,0x00,0x00,0x00,0x01};
	uint16_t sum = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[0] = sync[0];
 8001a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	message[1] = sync[1];
 8001a46:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	message[2] = length[0];
 8001a4e:	7f3b      	ldrb	r3, [r7, #28]
 8001a50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	message[3] = length[1];
 8001a54:	7f7b      	ldrb	r3, [r7, #29]
 8001a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[4] = src[0];
 8001a5a:	7e3b      	ldrb	r3, [r7, #24]
 8001a5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	message[5] = dest[0];
 8001a60:	7d3b      	ldrb	r3, [r7, #20]
 8001a62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	message[6] = command[0];
 8001a66:	7c3b      	ldrb	r3, [r7, #16]
 8001a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	message[7] = reg[0];
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	message[8] = data[0];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message[9] = data[1];
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	message[10] = data[2];
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	789b      	ldrb	r3, [r3, #2]
 8001a88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	message[11] = data[3];
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	78db      	ldrb	r3, [r3, #3]
 8001a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	sum = CRC16(message+2, 10);
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	3302      	adds	r3, #2
 8001a9a:	210a      	movs	r1, #10
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff8f 	bl	80019c0 <CRC16>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[12] = (sum&0xFF00)>>8;
 8001aa6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	message[13] = (sum&0x00FF);
 8001ab2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, 14, Timeout);
 8001aba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac0:	220e      	movs	r2, #14
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f007 fb8e 	bl	80091e4 <HAL_UART_Transmit>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		//status = mira_read_reply(huart, rxBuffer, Timeout);
	//	status = HAL_UART_Receive(huart, rxBuffer, 10, Timeout);
	//}

	// return status
	return status;
 8001ace:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3738      	adds	r7, #56	; 0x38
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x44>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_MspInit+0x44>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6613      	str	r3, [r2, #96]	; 0x60
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x44>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_MspInit+0x44>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_MspInit+0x44>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_MspInit+0x44>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ae      	sub	sp, #184	; 0xb8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	2294      	movs	r2, #148	; 0x94
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00d fb67 	bl	800f218 <memset>
  if(hi2c->Instance==I2C1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_I2C_MspInit+0xb0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d13a      	bne.n	8001bca <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b54:	2340      	movs	r3, #64	; 0x40
 8001b56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fa31 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b6c:	f7ff ff1e 	bl	80019ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_I2C_MspInit+0xb4>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_I2C_MspInit+0xb4>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_I2C_MspInit+0xb4>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b88:	23c0      	movs	r3, #192	; 0xc0
 8001b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <HAL_I2C_MspInit+0xb8>)
 8001bae:	f000 fd57 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_I2C_MspInit+0xb4>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_I2C_MspInit+0xb4>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_I2C_MspInit+0xb4>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	37b8      	adds	r7, #184	; 0xb8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	48000400 	.word	0x48000400

08001be0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0b0      	sub	sp, #192	; 0xc0
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	2294      	movs	r2, #148	; 0x94
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00d fb09 	bl	800f218 <memset>
  if(hsd->Instance==SDMMC1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_SD_MspInit+0xf8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d15e      	bne.n	8001cce <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001c10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 f9d1 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001c2c:	f7ff febe 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_SD_MspInit+0xfc>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c78:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c92:	230c      	movs	r3, #12
 8001c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <HAL_SD_MspInit+0x100>)
 8001ca0:	f000 fcde 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <HAL_SD_MspInit+0x104>)
 8001cca:	f000 fcc9 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	37c0      	adds	r7, #192	; 0xc0
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	50062400 	.word	0x50062400
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000c00 	.word	0x48000c00

08001ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_SPI_MspInit+0x7c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d128      	bne.n	8001d5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d14:	6613      	str	r3, [r2, #96]	; 0x60
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8001d3a:	23f0      	movs	r3, #240	; 0xf0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f000 fc82 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013000 	.word	0x40013000
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_TIM_Base_MspInit+0x38>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10b      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_TIM_Base_MspInit+0x3c>)
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_TIM_Base_MspInit+0x3c>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_TIM_Base_MspInit+0x3c>)
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40014800 	.word	0x40014800
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b0b0      	sub	sp, #192	; 0xc0
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	2294      	movs	r2, #148	; 0x94
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f00d fa23 	bl	800f218 <memset>
  if(huart->Instance==USART1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_UART_MspInit+0x148>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d145      	bne.n	8001e68 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001de0:	2300      	movs	r3, #0
 8001de2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 f8ed 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001df4:	f7ff fdda 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df8:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4a3e      	ldr	r2, [pc, #248]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e02:	6613      	str	r3, [r2, #96]	; 0x60
 8001e04:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	4a38      	ldr	r2, [pc, #224]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001e28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e42:	2307      	movs	r3, #7
 8001e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f000 fc05 	bl	8002660 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2025      	movs	r0, #37	; 0x25
 8001e5c:	f000 fb0f 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e60:	2025      	movs	r0, #37	; 0x25
 8001e62:	f000 fb28 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e66:	e040      	b.n	8001eea <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	; (8001efc <HAL_UART_MspInit+0x150>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d13b      	bne.n	8001eea <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 f8a2 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001e8a:	f7ff fd8f 	bl	80019ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_UART_MspInit+0x14c>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f000 fbbb 	bl	8002660 <HAL_GPIO_Init>
}
 8001eea:	bf00      	nop
 8001eec:	37c0      	adds	r7, #192	; 0xc0
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40004400 	.word	0x40004400

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f04:	f002 ff84 	bl	8004e10 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x8>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f50:	f000 f976 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001f72:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001f8a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8001f8e:	f006 fb01 	bl	8008594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000cbc 	.word	0x20000cbc
 8001f9c:	20000cbd 	.word	0x20000cbd
 8001fa0:	20000504 	.word	0x20000504

08001fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	 char c = huart1.Instance->RDR;
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <USART1_IRQHandler+0x9c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	71fb      	strb	r3, [r7, #7]
	    if (mira_rxBufferPos < mira_RXBUFSIZE - 1)
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <USART1_IRQHandler+0xa0>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d80b      	bhi.n	8001fd6 <USART1_IRQHandler+0x32>
	    	{ mira_rxBuffer[mira_rxBufferPos++] = (uint8_t) c; }
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <USART1_IRQHandler+0xa4>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <USART1_IRQHandler+0xa0>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	b2c8      	uxtb	r0, r1
 8001fcc:	491d      	ldr	r1, [pc, #116]	; (8002044 <USART1_IRQHandler+0xa0>)
 8001fce:	7008      	strb	r0, [r1, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	701a      	strb	r2, [r3, #0]

	    if ((c == '\n') && (mira_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b0a      	cmp	r3, #10
 8001fda:	d12a      	bne.n	8002032 <USART1_IRQHandler+0x8e>
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <USART1_IRQHandler+0xa8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d026      	beq.n	8002032 <USART1_IRQHandler+0x8e>
	    {
	    	//tickGPS = 1;
	    	mira_rxBuffer[mira_rxBufferPos] = 0;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <USART1_IRQHandler+0xa4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <USART1_IRQHandler+0xa0>)
 8001fea:	7812      	ldrb	r2, [r2, #0]
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	4413      	add	r3, r2
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
	    	mira_data_ready |= 1;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <USART1_IRQHandler+0xac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <USART1_IRQHandler+0xac>)
 8001ffe:	6013      	str	r3, [r2, #0]
	    	mira_send_ready ^= 1;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <USART1_IRQHandler+0xa8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	4a10      	ldr	r2, [pc, #64]	; (800204c <USART1_IRQHandler+0xa8>)
 800200a:	6013      	str	r3, [r2, #0]
	    	mira_rxBufferPos = 0;
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <USART1_IRQHandler+0xa0>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
			if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <USART1_IRQHandler+0xa4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <USART1_IRQHandler+0xb0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d103      	bne.n	8002024 <USART1_IRQHandler+0x80>
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <USART1_IRQHandler+0xa4>)
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <USART1_IRQHandler+0xb4>)
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e002      	b.n	800202a <USART1_IRQHandler+0x86>
			else {mira_rxBuffer = mira_rxBuffer1;}
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <USART1_IRQHandler+0xa4>)
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <USART1_IRQHandler+0xb0>)
 8002028:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800202a:	2110      	movs	r1, #16
 800202c:	480b      	ldr	r0, [pc, #44]	; (800205c <USART1_IRQHandler+0xb8>)
 800202e:	f000 fcd9 	bl	80029e4 <HAL_GPIO_TogglePin>
	    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002032:	4803      	ldr	r0, [pc, #12]	; (8002040 <USART1_IRQHandler+0x9c>)
 8002034:	f007 f96e 	bl	8009314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000550 	.word	0x20000550
 8002044:	20000cec 	.word	0x20000cec
 8002048:	20000ce8 	.word	0x20000ce8
 800204c:	20000004 	.word	0x20000004
 8002050:	20000cf0 	.word	0x20000cf0
 8002054:	20000cc0 	.word	0x20000cc0
 8002058:	20000cd4 	.word	0x20000cd4
 800205c:	48000c00 	.word	0x48000c00

08002060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <USART2_IRQHandler+0x90>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800206c:	b29b      	uxth	r3, r3
 800206e:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <USART2_IRQHandler+0x94>)
 8002072:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <USART2_IRQHandler+0x98>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <USART2_IRQHandler+0x94>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	b2c8      	uxtb	r0, r1
 8002082:	491c      	ldr	r1, [pc, #112]	; (80020f4 <USART2_IRQHandler+0x94>)
 8002084:	7008      	strb	r0, [r1, #0]
 8002086:	4413      	add	r3, r2
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b0a      	cmp	r3, #10
 8002090:	d126      	bne.n	80020e0 <USART2_IRQHandler+0x80>
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <USART2_IRQHandler+0x9c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d022      	beq.n	80020e0 <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <USART2_IRQHandler+0x98>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <USART2_IRQHandler+0x94>)
 80020a0:	7812      	ldrb	r2, [r2, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	4413      	add	r3, r2
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <USART2_IRQHandler+0xa0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <USART2_IRQHandler+0xa0>)
 80020b4:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <USART2_IRQHandler+0x9c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <USART2_IRQHandler+0x9c>)
 80020c0:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <USART2_IRQHandler+0x94>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <USART2_IRQHandler+0x98>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <USART2_IRQHandler+0xa4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d103      	bne.n	80020da <USART2_IRQHandler+0x7a>
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <USART2_IRQHandler+0x98>)
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <USART2_IRQHandler+0xa8>)
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e002      	b.n	80020e0 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <USART2_IRQHandler+0x98>)
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <USART2_IRQHandler+0xa4>)
 80020de:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <USART2_IRQHandler+0x90>)
 80020e2:	f007 f917 	bl	8009314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200005e0 	.word	0x200005e0
 80020f4:	20000cb4 	.word	0x20000cb4
 80020f8:	20000cb0 	.word	0x20000cb0
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000cb8 	.word	0x20000cb8
 8002104:	20000670 	.word	0x20000670
 8002108:	20000990 	.word	0x20000990

0800210c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <OTG_FS_IRQHandler+0x10>)
 8002112:	f000 ff08 	bl	8002f26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200021e0 	.word	0x200021e0

08002120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800217c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002148:	f7ff ffea 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <LoopForever+0x6>)
  ldr r1, =_edata
 800214e:	490d      	ldr	r1, [pc, #52]	; (8002184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <LoopForever+0xe>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002164:	4c0a      	ldr	r4, [pc, #40]	; (8002190 <LoopForever+0x16>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002172:	f00d f817 	bl	800f1a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002176:	f7fe ff93 	bl	80010a0 <main>

0800217a <LoopForever>:

LoopForever:
    b LoopForever
 800217a:	e7fe      	b.n	800217a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800217c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002184:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002188:	08012420 	.word	0x08012420
  ldr r2, =_sbss
 800218c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002190:	20002920 	.word	0x20002920

08002194 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC1_IRQHandler>

08002196 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f961 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a6:	200f      	movs	r0, #15
 80021a8:	f000 f80e 	bl	80021c8 <HAL_InitTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	71fb      	strb	r3, [r7, #7]
 80021b6:	e001      	b.n	80021bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021b8:	f7ff fc90 	bl	8001adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021bc:	79fb      	ldrb	r3, [r7, #7]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_InitTick+0x6c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_InitTick+0x70>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_InitTick+0x6c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f96d 	bl	80024d2 <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d809      	bhi.n	8002218 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800220c:	f000 f937 	bl	800247e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_InitTick+0x74>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e007      	b.n	8002228 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e004      	b.n	8002228 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e001      	b.n	8002228 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000010 	.word	0x20000010
 8002238:	20000008 	.word	0x20000008
 800223c:	2000000c 	.word	0x2000000c

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000010 	.word	0x20000010
 8002264:	20000cf4 	.word	0x20000cf4

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000cf4 	.word	0x20000cf4

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000010 	.word	0x20000010

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002448:	f7ff ff8e 	bl	8002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff29 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff3e 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff8e 	bl	80023bc <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5d 	bl	8002368 <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff31 	bl	800232c <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d008      	beq.n	8002514 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2204      	movs	r2, #4
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e040      	b.n	8002596 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020e 	bic.w	r2, r2, #14
 8002522:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002532:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	f003 021c 	and.w	r2, r3, #28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002560:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002578:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002582:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d005      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e047      	b.n	8002656 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 020e 	bic.w	r2, r2, #14
 80025d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 021c 	and.w	r2, r3, #28
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002612:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002634:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
    }
  }
  return status;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266e:	e166      	b.n	800293e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8158 	beq.w	8002938 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d005      	beq.n	80026a0 <HAL_GPIO_Init+0x40>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d130      	bne.n	8002702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d6:	2201      	movs	r2, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0201 	and.w	r2, r3, #1
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d017      	beq.n	800273e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d123      	bne.n	8002792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	08da      	lsrs	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3208      	adds	r2, #8
 8002752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	6939      	ldr	r1, [r7, #16]
 800278e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0203 	and.w	r2, r3, #3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80b2 	beq.w	8002938 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <HAL_GPIO_Init+0x2fc>)
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	4a60      	ldr	r2, [pc, #384]	; (800295c <HAL_GPIO_Init+0x2fc>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6613      	str	r3, [r2, #96]	; 0x60
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_GPIO_Init+0x2fc>)
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ec:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_GPIO_Init+0x300>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002816:	d02b      	beq.n	8002870 <HAL_GPIO_Init+0x210>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_GPIO_Init+0x304>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d025      	beq.n	800286c <HAL_GPIO_Init+0x20c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a51      	ldr	r2, [pc, #324]	; (8002968 <HAL_GPIO_Init+0x308>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d01f      	beq.n	8002868 <HAL_GPIO_Init+0x208>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a50      	ldr	r2, [pc, #320]	; (800296c <HAL_GPIO_Init+0x30c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d019      	beq.n	8002864 <HAL_GPIO_Init+0x204>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_GPIO_Init+0x310>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_GPIO_Init+0x200>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_GPIO_Init+0x314>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_GPIO_Init+0x1fc>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_GPIO_Init+0x318>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <HAL_GPIO_Init+0x1f8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a4c      	ldr	r2, [pc, #304]	; (800297c <HAL_GPIO_Init+0x31c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_GPIO_Init+0x1f4>
 8002850:	2307      	movs	r3, #7
 8002852:	e00e      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002854:	2308      	movs	r3, #8
 8002856:	e00c      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002858:	2306      	movs	r3, #6
 800285a:	e00a      	b.n	8002872 <HAL_GPIO_Init+0x212>
 800285c:	2305      	movs	r3, #5
 800285e:	e008      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002860:	2304      	movs	r3, #4
 8002862:	e006      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002864:	2303      	movs	r3, #3
 8002866:	e004      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002868:	2302      	movs	r3, #2
 800286a:	e002      	b.n	8002872 <HAL_GPIO_Init+0x212>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002870:	2300      	movs	r3, #0
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	f002 0203 	and.w	r2, r2, #3
 8002878:	0092      	lsls	r2, r2, #2
 800287a:	4093      	lsls	r3, r2
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002882:	4937      	ldr	r1, [pc, #220]	; (8002960 <HAL_GPIO_Init+0x300>)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002890:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_GPIO_Init+0x320>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028b4:	4a32      	ldr	r2, [pc, #200]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ba:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028de:	4a28      	ldr	r2, [pc, #160]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_GPIO_Init+0x320>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800290e:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_GPIO_Init+0x320>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002932:	4a13      	ldr	r2, [pc, #76]	; (8002980 <HAL_GPIO_Init+0x320>)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f ae91 	bne.w	8002670 <HAL_GPIO_Init+0x10>
  }
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40021000 	.word	0x40021000
 8002960:	40010000 	.word	0x40010000
 8002964:	48000400 	.word	0x48000400
 8002968:	48000800 	.word	0x48000800
 800296c:	48000c00 	.word	0x48000c00
 8002970:	48001000 	.word	0x48001000
 8002974:	48001400 	.word	0x48001400
 8002978:	48001800 	.word	0x48001800
 800297c:	48001c00 	.word	0x48001c00
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e001      	b.n	80029a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	43d9      	mvns	r1, r3
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	400b      	ands	r3, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	619a      	str	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e081      	b.n	8002b2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff f870 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	e006      	b.n	8002aa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d104      	bne.n	8002ab2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69d9      	ldr	r1, [r3, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b44:	b2db      	uxtb	r3, r3
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d138      	bne.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e032      	b.n	8002bdc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2224      	movs	r2, #36	; 0x24
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d139      	bne.n	8002c72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e033      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	b08f      	sub	sp, #60	; 0x3c
 8002c84:	af0a      	add	r7, sp, #40	; 0x28
 8002c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e116      	b.n	8002ec0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f00b fe95 	bl	800e9dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f008 fb90 	bl	800b3f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	687e      	ldr	r6, [r7, #4]
 8002cde:	466d      	mov	r5, sp
 8002ce0:	f106 0410 	add.w	r4, r6, #16
 8002ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf4:	1d33      	adds	r3, r6, #4
 8002cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	f008 faa3 	bl	800b244 <USB_CoreInit>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d7      	b.n	8002ec0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f008 fb7e 	bl	800b418 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e04a      	b.n	8002db8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	333d      	adds	r3, #61	; 0x3d
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	333c      	adds	r3, #60	; 0x3c
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	b298      	uxth	r0, r3
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3344      	adds	r3, #68	; 0x44
 8002d5e:	4602      	mov	r2, r0
 8002d60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3340      	adds	r3, #64	; 0x40
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3348      	adds	r3, #72	; 0x48
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	334c      	adds	r3, #76	; 0x4c
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3354      	adds	r3, #84	; 0x54
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	3301      	adds	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3af      	bcc.n	8002d22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e044      	b.n	8002e52 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3b5      	bcc.n	8002dc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	687e      	ldr	r6, [r7, #4]
 8002e64:	466d      	mov	r5, sp
 8002e66:	f106 0410 	add.w	r4, r6, #16
 8002e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e7a:	1d33      	adds	r3, r6, #4
 8002e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	f008 fb16 	bl	800b4b0 <USB_DevInit>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e014      	b.n	8002ec0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d102      	bne.n	8002eb4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f001 f882 	bl	8003fb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f009 fb9e 	bl	800c5fa <USB_DevDisconnect>

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_PCD_Start+0x1c>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e01c      	b.n	8002f1e <HAL_PCD_Start+0x56>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f008 fa65 	bl	800b3d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f009 fb52 	bl	800c5b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f26:	b590      	push	{r4, r7, lr}
 8002f28:	b08d      	sub	sp, #52	; 0x34
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f009 fc10 	bl	800c762 <USB_GetMode>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 847e 	bne.w	8003846 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f009 fb74 	bl	800c63c <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8474 	beq.w	8003844 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f009 fb61 	bl	800c63c <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d107      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f002 0202 	and.w	r2, r2, #2
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f009 fb4f 	bl	800c63c <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d161      	bne.n	800306c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0210 	bic.w	r2, r2, #16
 8002fb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	0c5b      	lsrs	r3, r3, #17
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d124      	bne.n	800302e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d035      	beq.n	800305c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	6a38      	ldr	r0, [r7, #32]
 8003004:	f009 f986 	bl	800c314 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003014:	441a      	add	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	6a1a      	ldr	r2, [r3, #32]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003026:	441a      	add	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	621a      	str	r2, [r3, #32]
 800302c:	e016      	b.n	800305c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	0c5b      	lsrs	r3, r3, #17
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	2b06      	cmp	r3, #6
 8003038:	d110      	bne.n	800305c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003040:	2208      	movs	r2, #8
 8003042:	4619      	mov	r1, r3
 8003044:	6a38      	ldr	r0, [r7, #32]
 8003046:	f009 f965 	bl	800c314 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003056:	441a      	add	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0210 	orr.w	r2, r2, #16
 800306a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f009 fae3 	bl	800c63c <USB_ReadInterrupts>
 8003076:	4603      	mov	r3, r0
 8003078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003080:	f040 80a7 	bne.w	80031d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f009 fae8 	bl	800c662 <USB_ReadDevAllOutEpInterrupt>
 8003092:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003094:	e099      	b.n	80031ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 808e 	beq.w	80031be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f009 fb0c 	bl	800c6ca <USB_ReadDevOutEPInterrupt>
 80030b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ca:	461a      	mov	r2, r3
 80030cc:	2301      	movs	r3, #1
 80030ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fe96 	bl	8003e04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ee:	461a      	mov	r2, r3
 80030f0:	2308      	movs	r3, #8
 80030f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fed2 	bl	8003ea0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	461a      	mov	r2, r3
 8003114:	2310      	movs	r3, #16
 8003116:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d030      	beq.n	8003184 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d109      	bne.n	8003142 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003140:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d108      	bne.n	8003172 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f00b fd79 	bl	800ec64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	2302      	movs	r3, #2
 8003182:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319a:	461a      	mov	r2, r3
 800319c:	2320      	movs	r3, #32
 800319e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	3301      	adds	r3, #1
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f47f af62 	bne.w	8003096 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f009 fa30 	bl	800c63c <USB_ReadInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031e6:	f040 80a4 	bne.w	8003332 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f009 fa51 	bl	800c696 <USB_ReadDevAllInEpInterrupt>
 80031f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80031fa:	e096      	b.n	800332a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 808b 	beq.w	800331e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f009 fa77 	bl	800c706 <USB_ReadDevInEPInterrupt>
 8003218:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	2201      	movs	r2, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43db      	mvns	r3, r3
 800323e:	69f9      	ldr	r1, [r7, #28]
 8003240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003244:	4013      	ands	r3, r2
 8003246:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003254:	461a      	mov	r2, r3
 8003256:	2301      	movs	r3, #1
 8003258:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	b2db      	uxtb	r3, r3
 800325e:	4619      	mov	r1, r3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f00b fc6a 	bl	800eb3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327c:	461a      	mov	r2, r3
 800327e:	2308      	movs	r3, #8
 8003280:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003298:	461a      	mov	r2, r3
 800329a:	2310      	movs	r3, #16
 800329c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b4:	461a      	mov	r2, r3
 80032b6:	2340      	movs	r3, #64	; 0x40
 80032b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d023      	beq.n	800330c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c6:	6a38      	ldr	r0, [r7, #32]
 80032c8:	f008 fa3e 	bl	800b748 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3338      	adds	r3, #56	; 0x38
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2200      	movs	r2, #0
 80032ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f00b fcc7 	bl	800ec88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003306:	461a      	mov	r2, r3
 8003308:	2302      	movs	r3, #2
 800330a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fcea 	bl	8003cf2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	3301      	adds	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	f47f af65 	bne.w	80031fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f009 f980 	bl	800c63c <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003346:	d122      	bne.n	800338e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003362:	2b01      	cmp	r3, #1
 8003364:	d108      	bne.n	8003378 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800336e:	2100      	movs	r1, #0
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fe45 	bl	8004000 <HAL_PCDEx_LPM_Callback>
 8003376:	e002      	b.n	800337e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f00b fc4b 	bl	800ec14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800338c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f009 f952 	bl	800c63c <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a2:	d112      	bne.n	80033ca <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f00b fc07 	bl	800ebc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f009 f934 	bl	800c63c <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d121      	bne.n	8003424 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80033ee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d111      	bne.n	800341e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	f003 020f 	and.w	r2, r3, #15
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003414:	2101      	movs	r1, #1
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fdf2 	bl	8004000 <HAL_PCDEx_LPM_Callback>
 800341c:	e002      	b.n	8003424 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f00b fbd2 	bl	800ebc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f009 f907 	bl	800c63c <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003438:	f040 80b5 	bne.w	80035a6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2110      	movs	r1, #16
 8003456:	4618      	mov	r0, r3
 8003458:	f008 f976 	bl	800b748 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003460:	e046      	b.n	80034f0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346e:	461a      	mov	r2, r3
 8003470:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003474:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	440a      	add	r2, r1
 800348c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003490:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003494:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ba:	0151      	lsls	r1, r2, #5
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	440a      	add	r2, r1
 80034c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	3301      	adds	r3, #1
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d3b3      	bcc.n	8003462 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003508:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800350c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003526:	f043 030b 	orr.w	r3, r3, #11
 800352a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353c:	f043 030b 	orr.w	r3, r3, #11
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
 8003542:	e015      	b.n	8003570 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003552:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003556:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800355a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800356a:	f043 030b 	orr.w	r3, r3, #11
 800356e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003582:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f009 f917 	bl	800c7c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f009 f846 	bl	800c63c <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ba:	d124      	bne.n	8003606 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f009 f8dc 	bl	800c77e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f008 f939 	bl	800b842 <USB_GetDevSpeed>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681c      	ldr	r4, [r3, #0]
 80035dc:	f001 fbd0 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 80035e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	4620      	mov	r0, r4
 80035ec:	f007 fe56 	bl	800b29c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f00b faca 	bl	800eb8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003604:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f009 f816 	bl	800c63c <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d10a      	bne.n	8003630 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00b faa7 	bl	800eb6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f002 0208 	and.w	r2, r2, #8
 800362e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f009 f801 	bl	800c63c <USB_ReadInterrupts>
 800363a:	4603      	mov	r3, r0
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d122      	bne.n	800368a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003650:	2301      	movs	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	e014      	b.n	8003680 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb0b 	bl	8003c90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	3301      	adds	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	429a      	cmp	r2, r3
 8003688:	d3e5      	bcc.n	8003656 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f008 ffd4 	bl	800c63c <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369e:	d13b      	bne.n	8003718 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a0:	2301      	movs	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	e02b      	b.n	80036fe <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3340      	adds	r3, #64	; 0x40
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d115      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80036cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da12      	bge.n	80036f8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	333f      	adds	r3, #63	; 0x3f
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 facc 	bl	8003c90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	3301      	adds	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	429a      	cmp	r2, r3
 8003706:	d3ce      	bcc.n	80036a6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f008 ff8d 	bl	800c63c <USB_ReadInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800372c:	d155      	bne.n	80037da <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800372e:	2301      	movs	r3, #1
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	e045      	b.n	80037c0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d12e      	bne.n	80037ba <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800375c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800375e:	2b00      	cmp	r3, #0
 8003760:	da2b      	bge.n	80037ba <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800376e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003772:	429a      	cmp	r2, r3
 8003774:	d121      	bne.n	80037ba <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b6:	6053      	str	r3, [r2, #4]
            break;
 80037b8:	e007      	b.n	80037ca <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	3301      	adds	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3b4      	bcc.n	8003734 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f008 ff2c 	bl	800c63c <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ee:	d10a      	bne.n	8003806 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f00b fa5b 	bl	800ecac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f008 ff16 	bl	800c63c <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d115      	bne.n	8003846 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f00b fa4b 	bl	800ecc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	e000      	b.n	8003846 <HAL_PCD_IRQHandler+0x920>
      return;
 8003844:	bf00      	nop
    }
  }
}
 8003846:	3734      	adds	r7, #52	; 0x34
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}

0800384c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_PCD_SetAddress+0x1a>
 8003862:	2302      	movs	r3, #2
 8003864:	e013      	b.n	800388e <HAL_PCD_SetAddress+0x42>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f008 fe74 	bl	800c56c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	4608      	mov	r0, r1
 80038a0:	4611      	mov	r1, r2
 80038a2:	461a      	mov	r2, r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	70fb      	strb	r3, [r7, #3]
 80038a8:	460b      	mov	r3, r1
 80038aa:	803b      	strh	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da0f      	bge.n	80038dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	3338      	adds	r3, #56	; 0x38
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	705a      	strb	r2, [r3, #1]
 80038da:	e00f      	b.n	80038fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	3304      	adds	r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003908:	883a      	ldrh	r2, [r7, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	78ba      	ldrb	r2, [r7, #2]
 8003912:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003926:	78bb      	ldrb	r3, [r7, #2]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d102      	bne.n	8003932 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_PCD_EP_Open+0xaa>
 800393c:	2302      	movs	r3, #2
 800393e:	e00e      	b.n	800395e <HAL_PCD_EP_Open+0xc8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68f9      	ldr	r1, [r7, #12]
 800394e:	4618      	mov	r0, r3
 8003950:	f007 ff96 	bl	800b880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800395c:	7afb      	ldrb	r3, [r7, #11]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003976:	2b00      	cmp	r3, #0
 8003978:	da0f      	bge.n	800399a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	3338      	adds	r3, #56	; 0x38
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
 8003998:	e00f      	b.n	80039ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	3304      	adds	r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_PCD_EP_Close+0x6e>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e00e      	b.n	80039f2 <HAL_PCD_EP_Close+0x8c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f007 ffd4 	bl	800b990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	460b      	mov	r3, r1
 8003a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3304      	adds	r3, #4
 8003a22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a48:	7afb      	ldrb	r3, [r7, #11]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f008 fa55 	bl	800bf08 <USB_EP0StartXfer>
 8003a5e:	e005      	b.n	8003a6c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6979      	ldr	r1, [r7, #20]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f008 f86e 	bl	800bb48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 020f 	and.w	r2, r3, #15
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003a98:	681b      	ldr	r3, [r3, #0]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	3338      	adds	r3, #56	; 0x38
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	3304      	adds	r3, #4
 8003acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6979      	ldr	r1, [r7, #20]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f008 fa00 	bl	800bf08 <USB_EP0StartXfer>
 8003b08:	e005      	b.n	8003b16 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6979      	ldr	r1, [r7, #20]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f008 f819 	bl	800bb48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d901      	bls.n	8003b3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e04e      	b.n	8003bdc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da0f      	bge.n	8003b66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	3338      	adds	r3, #56	; 0x38
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	705a      	strb	r2, [r3, #1]
 8003b64:	e00d      	b.n	8003b82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_PCD_EP_SetStall+0x82>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e01c      	b.n	8003bdc <HAL_PCD_EP_SetStall+0xbc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f008 fc07 	bl	800c3c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d108      	bne.n	8003bd2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f008 fdf9 	bl	800c7c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d901      	bls.n	8003c02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e042      	b.n	8003c88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da0f      	bge.n	8003c2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 020f 	and.w	r2, r3, #15
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	3338      	adds	r3, #56	; 0x38
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	705a      	strb	r2, [r3, #1]
 8003c28:	e00f      	b.n	8003c4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	f003 020f 	and.w	r2, r3, #15
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_PCD_EP_ClrStall+0x86>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e00e      	b.n	8003c88 <HAL_PCD_EP_ClrStall+0xa4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f008 fc11 	bl	800c4a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da0c      	bge.n	8003cbe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e00c      	b.n	8003cd8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	f003 020f 	and.w	r2, r3, #15
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f008 fa34 	bl	800c14c <USB_EPStopXfer>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b088      	sub	sp, #32
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	3338      	adds	r3, #56	; 0x38
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d901      	bls.n	8003d2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e067      	b.n	8003dfa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d902      	bls.n	8003d46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d4e:	e026      	b.n	8003d9e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d902      	bls.n	8003d6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3303      	adds	r3, #3
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6919      	ldr	r1, [r3, #16]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f008 fa8d 	bl	800c2a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	441a      	add	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	441a      	add	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d809      	bhi.n	8003dc8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d203      	bcs.n	8003dc8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1c3      	bne.n	8003d50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d811      	bhi.n	8003df8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	2201      	movs	r2, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	6939      	ldr	r1, [r7, #16]
 8003df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df4:	4013      	ands	r3, r2
 8003df6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	333c      	adds	r3, #60	; 0x3c
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <PCD_EP_OutXfrComplete_int+0x98>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d124      	bne.n	8003e84 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	461a      	mov	r2, r3
 8003e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e56:	6093      	str	r3, [r2, #8]
 8003e58:	e01a      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	461a      	mov	r2, r3
 8003e72:	2320      	movs	r3, #32
 8003e74:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f00a fe41 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
 8003e82:	e005      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f00a fe3a 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	4f54310a 	.word	0x4f54310a

08003ea0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	333c      	adds	r3, #60	; 0x3c
 8003eb8:	3304      	adds	r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <PCD_EP_OutSetupPacket_int+0x64>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d90e      	bls.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	461a      	mov	r2, r3
 8003eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f00a fdf3 	bl	800eae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	4f54300a 	.word	0x4f54300a

08003f08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
 8003f14:	4613      	mov	r3, r2
 8003f16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d107      	bne.n	8003f36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f26:	883b      	ldrh	r3, [r7, #0]
 8003f28:	0419      	lsls	r1, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
 8003f34:	e028      	b.n	8003f88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4413      	add	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e00d      	b.n	8003f66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	3340      	adds	r3, #64	; 0x40
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	3301      	adds	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3ec      	bcc.n	8003f4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f70:	883b      	ldrh	r3, [r7, #0]
 8003f72:	0418      	lsls	r0, r3, #16
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6819      	ldr	r1, [r3, #0]
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	4302      	orrs	r2, r0
 8003f80:	3340      	adds	r3, #64	; 0x40
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fea:	f043 0303 	orr.w	r3, r3, #3
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_PWREx_GetVoltageRange+0x3c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004028:	d102      	bne.n	8004030 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800402a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402e:	e00b      	b.n	8004048 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	d102      	bne.n	8004046 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004044:	e000      	b.n	8004048 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004046:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40007000 	.word	0x40007000

08004058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d141      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	d131      	bne.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004074:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800407a:	4a46      	ldr	r2, [pc, #280]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004084:	4b43      	ldr	r3, [pc, #268]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800408c:	4a41      	ldr	r2, [pc, #260]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004094:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2232      	movs	r2, #50	; 0x32
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	4a3f      	ldr	r2, [pc, #252]	; (800419c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	0c9b      	lsrs	r3, r3, #18
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040aa:	e002      	b.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040b2:	4b38      	ldr	r3, [pc, #224]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040be:	d102      	bne.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f2      	bne.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c6:	4b33      	ldr	r3, [pc, #204]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d158      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e057      	b.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040de:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040e8:	e04d      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f0:	d141      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040f2:	4b28      	ldr	r3, [pc, #160]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d131      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004106:	4a23      	ldr	r2, [pc, #140]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004118:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800411e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2232      	movs	r2, #50	; 0x32
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	4a1c      	ldr	r2, [pc, #112]	; (800419c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004136:	e002      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d102      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f2      	bne.n	8004138 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d112      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e011      	b.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416a:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004174:	e007      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800417e:	4a05      	ldr	r2, [pc, #20]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004184:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40007000 	.word	0x40007000
 8004198:	20000008 	.word	0x20000008
 800419c:	431bde83 	.word	0x431bde83

080041a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80041aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ae:	6053      	str	r3, [r2, #4]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40007000 	.word	0x40007000

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f000 bc08 	b.w	80049e4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d4:	4b96      	ldr	r3, [pc, #600]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041de:	4b94      	ldr	r3, [pc, #592]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80e4 	beq.w	80043be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_RCC_OscConfig+0x4c>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	f040 808b 	bne.w	800431a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b01      	cmp	r3, #1
 8004208:	f040 8087 	bne.w	800431a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800420c:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_OscConfig+0x64>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e3df      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	4b81      	ldr	r3, [pc, #516]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_RCC_OscConfig+0x7e>
 8004234:	4b7e      	ldr	r3, [pc, #504]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423c:	e005      	b.n	800424a <HAL_RCC_OscConfig+0x8a>
 800423e:	4b7c      	ldr	r3, [pc, #496]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800424a:	4293      	cmp	r3, r2
 800424c:	d223      	bcs.n	8004296 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fdf8 	bl	8004e48 <RCC_SetFlashLatencyFromMSIRange>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e3c0      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004262:	4b73      	ldr	r3, [pc, #460]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a72      	ldr	r2, [pc, #456]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004268:	f043 0308 	orr.w	r3, r3, #8
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b70      	ldr	r3, [pc, #448]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	496d      	ldr	r1, [pc, #436]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004280:	4b6b      	ldr	r3, [pc, #428]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	4968      	ldr	r1, [pc, #416]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
 8004294:	e025      	b.n	80042e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004296:	4b66      	ldr	r3, [pc, #408]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a65      	ldr	r2, [pc, #404]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800429c:	f043 0308 	orr.w	r3, r3, #8
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b63      	ldr	r3, [pc, #396]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4960      	ldr	r1, [pc, #384]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b4:	4b5e      	ldr	r3, [pc, #376]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	495b      	ldr	r1, [pc, #364]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fdb8 	bl	8004e48 <RCC_SetFlashLatencyFromMSIRange>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e380      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e2:	f000 fcc1 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 80042e6:	4602      	mov	r2, r0
 80042e8:	4b51      	ldr	r3, [pc, #324]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	4950      	ldr	r1, [pc, #320]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80042f4:	5ccb      	ldrb	r3, [r1, r3]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a4e      	ldr	r2, [pc, #312]	; (8004438 <HAL_RCC_OscConfig+0x278>)
 8004300:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004302:	4b4e      	ldr	r3, [pc, #312]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fd ff5e 	bl	80021c8 <HAL_InitTick>
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d052      	beq.n	80043bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	e364      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d032      	beq.n	8004388 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004322:	4b43      	ldr	r3, [pc, #268]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a42      	ldr	r2, [pc, #264]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800432e:	f7fd ff9b 	bl	8002268 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004336:	f7fd ff97 	bl	8002268 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e34d      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004348:	4b39      	ldr	r3, [pc, #228]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004354:	4b36      	ldr	r3, [pc, #216]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a35      	ldr	r2, [pc, #212]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b33      	ldr	r3, [pc, #204]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4930      	ldr	r1, [pc, #192]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004372:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	492b      	ldr	r1, [pc, #172]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
 8004386:	e01a      	b.n	80043be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004388:	4b29      	ldr	r3, [pc, #164]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a28      	ldr	r2, [pc, #160]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004394:	f7fd ff68 	bl	8002268 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800439c:	f7fd ff64 	bl	8002268 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e31a      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x1dc>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d073      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_OscConfig+0x21c>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d10e      	bne.n	80043f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d10b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d063      	beq.n	80044b0 <HAL_RCC_OscConfig+0x2f0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d15f      	bne.n	80044b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e2f7      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x24c>
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e025      	b.n	8004458 <HAL_RCC_OscConfig+0x298>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d114      	bne.n	8004440 <HAL_RCC_OscConfig+0x280>
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a05      	ldr	r2, [pc, #20]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b03      	ldr	r3, [pc, #12]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a02      	ldr	r2, [pc, #8]	; (8004430 <HAL_RCC_OscConfig+0x270>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e013      	b.n	8004458 <HAL_RCC_OscConfig+0x298>
 8004430:	40021000 	.word	0x40021000
 8004434:	08011fac 	.word	0x08011fac
 8004438:	20000008 	.word	0x20000008
 800443c:	2000000c 	.word	0x2000000c
 8004440:	4ba0      	ldr	r3, [pc, #640]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a9f      	ldr	r2, [pc, #636]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b9d      	ldr	r3, [pc, #628]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a9c      	ldr	r2, [pc, #624]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd ff02 	bl	8002268 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd fefe 	bl	8002268 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e2b4      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447a:	4b92      	ldr	r3, [pc, #584]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x2a8>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd feee 	bl	8002268 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fd feea 	bl	8002268 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e2a0      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044a2:	4b88      	ldr	r3, [pc, #544]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x2d0>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d060      	beq.n	8004580 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_OscConfig+0x310>
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d119      	bne.n	80044fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d116      	bne.n	80044fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	4b7c      	ldr	r3, [pc, #496]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x328>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e27d      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b76      	ldr	r3, [pc, #472]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	4973      	ldr	r1, [pc, #460]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044fc:	e040      	b.n	8004580 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d023      	beq.n	800454e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004506:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a6e      	ldr	r2, [pc, #440]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd fea9 	bl	8002268 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451a:	f7fd fea5 	bl	8002268 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e25b      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800452c:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	495f      	ldr	r1, [pc, #380]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e018      	b.n	8004580 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b5d      	ldr	r3, [pc, #372]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5c      	ldr	r2, [pc, #368]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd fe85 	bl	8002268 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004562:	f7fd fe81 	bl	8002268 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e237      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004574:	4b53      	ldr	r3, [pc, #332]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d03c      	beq.n	8004606 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01c      	beq.n	80045ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004594:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459a:	4a4a      	ldr	r2, [pc, #296]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fe60 	bl	8002268 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ac:	f7fd fe5c 	bl	8002268 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e212      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ef      	beq.n	80045ac <HAL_RCC_OscConfig+0x3ec>
 80045cc:	e01b      	b.n	8004606 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ce:	4b3d      	ldr	r3, [pc, #244]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80045d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d4:	4a3b      	ldr	r2, [pc, #236]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fd fe43 	bl	8002268 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e6:	f7fd fe3f 	bl	8002268 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e1f5      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80045fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ef      	bne.n	80045e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80a6 	beq.w	8004760 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004614:	2300      	movs	r3, #0
 8004616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004618:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10d      	bne.n	8004640 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463c:	2301      	movs	r3, #1
 800463e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004640:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_RCC_OscConfig+0x508>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d118      	bne.n	800467e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <HAL_RCC_OscConfig+0x508>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <HAL_RCC_OscConfig+0x508>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004658:	f7fd fe06 	bl	8002268 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004660:	f7fd fe02 	bl	8002268 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e1b8      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_RCC_OscConfig+0x508>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d108      	bne.n	8004698 <HAL_RCC_OscConfig+0x4d8>
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004696:	e029      	b.n	80046ec <HAL_RCC_OscConfig+0x52c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b05      	cmp	r3, #5
 800469e:	d115      	bne.n	80046cc <HAL_RCC_OscConfig+0x50c>
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80046a8:	f043 0304 	orr.w	r3, r3, #4
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	4a03      	ldr	r2, [pc, #12]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046c0:	e014      	b.n	80046ec <HAL_RCC_OscConfig+0x52c>
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40007000 	.word	0x40007000
 80046cc:	4b9d      	ldr	r3, [pc, #628]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	4a9c      	ldr	r2, [pc, #624]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046dc:	4b99      	ldr	r3, [pc, #612]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	4a98      	ldr	r2, [pc, #608]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d016      	beq.n	8004722 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fd fdb8 	bl	8002268 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fd fdb4 	bl	8002268 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e168      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004712:	4b8c      	ldr	r3, [pc, #560]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ed      	beq.n	80046fc <HAL_RCC_OscConfig+0x53c>
 8004720:	e015      	b.n	800474e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fd fda1 	bl	8002268 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fd fd9d 	bl	8002268 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e151      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004740:	4b80      	ldr	r3, [pc, #512]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ed      	bne.n	800472a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800474e:	7ffb      	ldrb	r3, [r7, #31]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b7b      	ldr	r3, [pc, #492]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	4a7a      	ldr	r2, [pc, #488]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d03c      	beq.n	80047e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01c      	beq.n	80047ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004774:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800477a:	4a72      	ldr	r2, [pc, #456]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fd fd70 	bl	8002268 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800478c:	f7fd fd6c 	bl	8002268 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e122      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800479e:	4b69      	ldr	r3, [pc, #420]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80047a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ef      	beq.n	800478c <HAL_RCC_OscConfig+0x5cc>
 80047ac:	e01b      	b.n	80047e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80047b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047b4:	4a63      	ldr	r2, [pc, #396]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047be:	f7fd fd53 	bl	8002268 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047c6:	f7fd fd4f 	bl	8002268 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e105      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047d8:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80047da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ef      	bne.n	80047c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80f9 	beq.w	80049e2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	f040 80cf 	bne.w	8004998 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047fa:	4b52      	ldr	r3, [pc, #328]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0203 	and.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	429a      	cmp	r2, r3
 800480c:	d12c      	bne.n	8004868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	3b01      	subs	r3, #1
 800481a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d123      	bne.n	8004868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d11b      	bne.n	8004868 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d113      	bne.n	8004868 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	3b01      	subs	r3, #1
 800484e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004850:	429a      	cmp	r2, r3
 8004852:	d109      	bne.n	8004868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	3b01      	subs	r3, #1
 8004862:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d071      	beq.n	800494c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d068      	beq.n	8004940 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800486e:	4b35      	ldr	r3, [pc, #212]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800487a:	4b32      	ldr	r3, [pc, #200]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0ac      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800488a:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004894:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004896:	f7fd fce7 	bl	8002268 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489e:	f7fd fce3 	bl	8002268 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e099      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048bc:	4b21      	ldr	r3, [pc, #132]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	4b21      	ldr	r3, [pc, #132]	; (8004948 <HAL_RCC_OscConfig+0x788>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048cc:	3a01      	subs	r2, #1
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	4311      	orrs	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048d6:	0212      	lsls	r2, r2, #8
 80048d8:	4311      	orrs	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0552      	lsls	r2, r2, #21
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0652      	lsls	r2, r2, #25
 80048f0:	4311      	orrs	r1, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f6:	06d2      	lsls	r2, r2, #27
 80048f8:	430a      	orrs	r2, r1
 80048fa:	4912      	ldr	r1, [pc, #72]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004900:	4b10      	ldr	r3, [pc, #64]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a0f      	ldr	r2, [pc, #60]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800490c:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004918:	f7fd fca6 	bl	8002268 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd fca2 	bl	8002268 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e058      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <HAL_RCC_OscConfig+0x784>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800493e:	e050      	b.n	80049e2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04f      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
 8004944:	40021000 	.word	0x40021000
 8004948:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494c:	4b27      	ldr	r3, [pc, #156]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d144      	bne.n	80049e2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 800495e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004962:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004970:	f7fd fc7a 	bl	8002268 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd fc76 	bl	8002268 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e02c      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x7b8>
 8004996:	e024      	b.n	80049e2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d01f      	beq.n	80049de <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a12      	ldr	r2, [pc, #72]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 80049a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fd fc5d 	bl	8002268 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fd fc59 	bl	8002268 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e00f      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c4:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	4905      	ldr	r1, [pc, #20]	; (80049ec <HAL_RCC_OscConfig+0x82c>)
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_OscConfig+0x830>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60cb      	str	r3, [r1, #12]
 80049dc:	e001      	b.n	80049e2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	feeefffc 	.word	0xfeeefffc

080049f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e11d      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b90      	ldr	r3, [pc, #576]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d910      	bls.n	8004a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b8d      	ldr	r3, [pc, #564]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 020f 	bic.w	r2, r3, #15
 8004a22:	498b      	ldr	r1, [pc, #556]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b89      	ldr	r3, [pc, #548]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e105      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d010      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	4b81      	ldr	r3, [pc, #516]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d908      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b7e      	ldr	r3, [pc, #504]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	497b      	ldr	r1, [pc, #492]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d079      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d11e      	bne.n	8004abc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7e:	4b75      	ldr	r3, [pc, #468]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0dc      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a8e:	f000 fa35 	bl	8004efc <RCC_GetSysClockFreqFromPLLSource>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4a70      	ldr	r2, [pc, #448]	; (8004c58 <HAL_RCC_ClockConfig+0x264>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d946      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a9a:	4b6e      	ldr	r3, [pc, #440]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d140      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aa6:	4b6b      	ldr	r3, [pc, #428]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aae:	4a69      	ldr	r2, [pc, #420]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	e035      	b.n	8004b28 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac4:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d115      	bne.n	8004afc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0b9      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004adc:	4b5d      	ldr	r3, [pc, #372]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0ad      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aec:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0a5      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004afc:	f000 f8b4 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4a55      	ldr	r2, [pc, #340]	; (8004c58 <HAL_RCC_ClockConfig+0x264>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d90f      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b08:	4b52      	ldr	r3, [pc, #328]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b14:	4b4f      	ldr	r3, [pc, #316]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1c:	4a4d      	ldr	r2, [pc, #308]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b28:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 0203 	bic.w	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4947      	ldr	r1, [pc, #284]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3a:	f7fd fb95 	bl	8002268 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b42:	f7fd fb91 	bl	8002268 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e077      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b58:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 020c 	and.w	r2, r3, #12
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d1eb      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b70:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a37      	ldr	r2, [pc, #220]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b7a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d208      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	492b      	ldr	r1, [pc, #172]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d210      	bcs.n	8004bda <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 020f 	bic.w	r2, r3, #15
 8004bc0:	4923      	ldr	r1, [pc, #140]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc8:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <HAL_RCC_ClockConfig+0x25c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e036      	b.n	8004c48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4918      	ldr	r1, [pc, #96]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4910      	ldr	r1, [pc, #64]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c18:	f000 f826 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCC_ClockConfig+0x260>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	490c      	ldr	r1, [pc, #48]	; (8004c5c <HAL_RCC_ClockConfig+0x268>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <HAL_RCC_ClockConfig+0x26c>)
 8004c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_RCC_ClockConfig+0x270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fd fac3 	bl	80021c8 <HAL_InitTick>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]

  return status;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40022000 	.word	0x40022000
 8004c54:	40021000 	.word	0x40021000
 8004c58:	04c4b400 	.word	0x04c4b400
 8004c5c:	08011fac 	.word	0x08011fac
 8004c60:	20000008 	.word	0x20000008
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x34>
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d121      	bne.n	8004cda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d11e      	bne.n	8004cda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c9c:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ca8:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cc4:	4a2b      	ldr	r2, [pc, #172]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ccc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d102      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	e004      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cec:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d134      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0xac>
 8004d0c:	e005      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d10:	617b      	str	r3, [r7, #20]
      break;
 8004d12:	e005      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x114>)
 8004d16:	617b      	str	r3, [r7, #20]
      break;
 8004d18:	e002      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	617b      	str	r3, [r7, #20]
      break;
 8004d1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	fb03 f202 	mul.w	r2, r3, r2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	0e5b      	lsrs	r3, r3, #25
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	3301      	adds	r3, #1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d60:	69bb      	ldr	r3, [r7, #24]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40021000 	.word	0x40021000
 8004d74:	08011fc4 	.word	0x08011fc4
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	007a1200 	.word	0x007a1200

08004d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000008 	.word	0x20000008

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d9c:	f7ff fff0 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	; (8004dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	08011fbc 	.word	0x08011fbc

08004dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dc8:	f7ff ffda 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0adb      	lsrs	r3, r3, #11
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4904      	ldr	r1, [pc, #16]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	08011fbc 	.word	0x08011fbc

08004df0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCC_EnableCSS+0x1c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <HAL_RCC_EnableCSS+0x1c>)
 8004dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000

08004e10 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e20:	d105      	bne.n	8004e2e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004e22:	f000 f809 	bl	8004e38 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004e26:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e2c:	621a      	str	r2, [r3, #32]
  }
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000

08004e38 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e60:	f7ff f8da 	bl	8004018 <HAL_PWREx_GetVoltageRange>
 8004e64:	6178      	str	r0, [r7, #20]
 8004e66:	e014      	b.n	8004e92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	4b22      	ldr	r3, [pc, #136]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6593      	str	r3, [r2, #88]	; 0x58
 8004e74:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e80:	f7ff f8ca 	bl	8004018 <HAL_PWREx_GetVoltageRange>
 8004e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e98:	d10b      	bne.n	8004eb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d913      	bls.n	8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ea4:	d902      	bls.n	8004eac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	e00d      	b.n	8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eac:	2301      	movs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	e00a      	b.n	8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb6:	d902      	bls.n	8004ebe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004eb8:	2302      	movs	r3, #2
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e004      	b.n	8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b70      	cmp	r3, #112	; 0x70
 8004ec2:	d101      	bne.n	8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 020f 	bic.w	r2, r3, #15
 8004ed0:	4909      	ldr	r1, [pc, #36]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40022000 	.word	0x40022000

08004efc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f02:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d00b      	beq.n	8004f2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d825      	bhi.n	8004f64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d008      	beq.n	8004f30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d11f      	bne.n	8004f64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f26:	613b      	str	r3, [r7, #16]
    break;
 8004f28:	e01f      	b.n	8004f6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004f2a:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004f2c:	613b      	str	r3, [r7, #16]
    break;
 8004f2e:	e01c      	b.n	8004f6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f30:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f3c:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e005      	b.n	8004f58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004f58:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	613b      	str	r3, [r7, #16]
    break;
 8004f62:	e002      	b.n	8004f6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
    break;
 8004f68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	3301      	adds	r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	0a1b      	lsrs	r3, r3, #8
 8004f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	fb03 f202 	mul.w	r2, r3, r2
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f90:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	0e5b      	lsrs	r3, r3, #25
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004faa:	683b      	ldr	r3, [r7, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	00f42400 	.word	0x00f42400
 8004fc0:	007a1200 	.word	0x007a1200
 8004fc4:	08011fc4 	.word	0x08011fc4

08004fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d040      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe8:	2b80      	cmp	r3, #128	; 0x80
 8004fea:	d02a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fec:	2b80      	cmp	r3, #128	; 0x80
 8004fee:	d825      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ff0:	2b60      	cmp	r3, #96	; 0x60
 8004ff2:	d026      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ff4:	2b60      	cmp	r3, #96	; 0x60
 8004ff6:	d821      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d006      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d81d      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d009      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d010      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005008:	e018      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800500a:	4b89      	ldr	r3, [pc, #548]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	4a88      	ldr	r2, [pc, #544]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005016:	e015      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	2100      	movs	r1, #0
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fa24 	bl	800646c <RCCEx_PLLSAI1_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005028:	e00c      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3320      	adds	r3, #32
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fb0f 	bl	8006654 <RCCEx_PLLSAI2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800503a:	e003      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	74fb      	strb	r3, [r7, #19]
      break;
 8005040:	e000      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800504a:	4b79      	ldr	r3, [pc, #484]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005050:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005058:	4975      	ldr	r1, [pc, #468]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005060:	e001      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d047      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507a:	d030      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x116>
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005080:	d82a      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005086:	d02a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508c:	d824      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800508e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005098:	d81e      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d010      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050a4:	e018      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050a6:	4b62      	ldr	r3, [pc, #392]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4a61      	ldr	r2, [pc, #388]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050b2:	e015      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	2100      	movs	r1, #0
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 f9d6 	bl	800646c <RCCEx_PLLSAI1_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050c4:	e00c      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3320      	adds	r3, #32
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 fac1 	bl	8006654 <RCCEx_PLLSAI2_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050d6:	e003      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	74fb      	strb	r3, [r7, #19]
      break;
 80050dc:	e000      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80050de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050e6:	4b52      	ldr	r3, [pc, #328]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	494e      	ldr	r1, [pc, #312]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050fc:	e001      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	7cfb      	ldrb	r3, [r7, #19]
 8005100:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 809f 	beq.w	800524e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005110:	2300      	movs	r3, #0
 8005112:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005114:	4b46      	ldr	r3, [pc, #280]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005124:	2300      	movs	r3, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800512a:	4b41      	ldr	r3, [pc, #260]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	4a40      	ldr	r2, [pc, #256]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005134:	6593      	str	r3, [r2, #88]	; 0x58
 8005136:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005142:	2301      	movs	r3, #1
 8005144:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005146:	4b3b      	ldr	r3, [pc, #236]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3a      	ldr	r2, [pc, #232]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005152:	f7fd f889 	bl	8002268 <HAL_GetTick>
 8005156:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005158:	e009      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515a:	f7fd f885 	bl	8002268 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d902      	bls.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	74fb      	strb	r3, [r7, #19]
        break;
 800516c:	e005      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800516e:	4b31      	ldr	r3, [pc, #196]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0ef      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d15b      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01f      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	429a      	cmp	r2, r3
 800519c:	d019      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051aa:	4b21      	ldr	r3, [pc, #132]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	4a1f      	ldr	r2, [pc, #124]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051ca:	4a19      	ldr	r2, [pc, #100]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d016      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd f844 	bl	8002268 <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e2:	e00b      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f7fd f840 	bl	8002268 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d902      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	74fb      	strb	r3, [r7, #19]
            break;
 80051fa:	e006      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0ec      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10c      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	4903      	ldr	r1, [pc, #12]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005228:	e008      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800522a:	7cfb      	ldrb	r3, [r7, #19]
 800522c:	74bb      	strb	r3, [r7, #18]
 800522e:	e005      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005230:	40021000 	.word	0x40021000
 8005234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800523c:	7c7b      	ldrb	r3, [r7, #17]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d105      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005242:	4ba0      	ldr	r3, [pc, #640]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005246:	4a9f      	ldr	r2, [pc, #636]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800524c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800525a:	4b9a      	ldr	r3, [pc, #616]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f023 0203 	bic.w	r2, r3, #3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005268:	4996      	ldr	r1, [pc, #600]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800527c:	4b91      	ldr	r3, [pc, #580]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f023 020c 	bic.w	r2, r3, #12
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	498e      	ldr	r1, [pc, #568]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800529e:	4b89      	ldr	r3, [pc, #548]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ac:	4985      	ldr	r1, [pc, #532]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052c0:	4b80      	ldr	r3, [pc, #512]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ce:	497d      	ldr	r1, [pc, #500]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052e2:	4b78      	ldr	r3, [pc, #480]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	4974      	ldr	r1, [pc, #464]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005304:	4b6f      	ldr	r3, [pc, #444]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	496c      	ldr	r1, [pc, #432]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005326:	4b67      	ldr	r3, [pc, #412]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005334:	4963      	ldr	r1, [pc, #396]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005348:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005356:	495b      	ldr	r1, [pc, #364]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800536a:	4b56      	ldr	r3, [pc, #344]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	4952      	ldr	r1, [pc, #328]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800538c:	4b4d      	ldr	r3, [pc, #308]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	494a      	ldr	r1, [pc, #296]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ae:	4b45      	ldr	r3, [pc, #276]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	4941      	ldr	r1, [pc, #260]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053d0:	4b3c      	ldr	r3, [pc, #240]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d6:	f023 0203 	bic.w	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	4939      	ldr	r1, [pc, #228]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d028      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f2:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005400:	4930      	ldr	r1, [pc, #192]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005410:	d106      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005412:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4a2b      	ldr	r2, [pc, #172]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541c:	60d3      	str	r3, [r2, #12]
 800541e:	e011      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005428:	d10c      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	2101      	movs	r1, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f001 f81b 	bl	800646c <RCCEx_PLLSAI1_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800543a:	7cfb      	ldrb	r3, [r7, #19]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d04d      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005458:	d108      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800545a:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800545c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005460:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005466:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800546a:	e012      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800546c:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005472:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005478:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800548a:	490e      	ldr	r1, [pc, #56]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800549a:	d106      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a6:	60d3      	str	r3, [r2, #12]
 80054a8:	e020      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b2:	d109      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a02      	ldr	r2, [pc, #8]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054be:	60d3      	str	r3, [r2, #12]
 80054c0:	e014      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 ffc7 	bl	800646c <RCCEx_PLLSAI1_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d028      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f8:	4b4a      	ldr	r3, [pc, #296]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005506:	4947      	ldr	r1, [pc, #284]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005516:	d106      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005518:	4b42      	ldr	r3, [pc, #264]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a41      	ldr	r2, [pc, #260]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800551e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005522:	60d3      	str	r3, [r2, #12]
 8005524:	e011      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800552a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800552e:	d10c      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	2101      	movs	r1, #1
 8005536:	4618      	mov	r0, r3
 8005538:	f000 ff98 	bl	800646c <RCCEx_PLLSAI1_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005546:	7cfb      	ldrb	r3, [r7, #19]
 8005548:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01e      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005556:	4b33      	ldr	r3, [pc, #204]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005566:	492f      	ldr	r1, [pc, #188]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005578:	d10c      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	2102      	movs	r1, #2
 8005580:	4618      	mov	r0, r3
 8005582:	f000 ff73 	bl	800646c <RCCEx_PLLSAI1_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055a0:	4b20      	ldr	r3, [pc, #128]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a6:	f023 0204 	bic.w	r2, r3, #4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b0:	491c      	ldr	r1, [pc, #112]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055c4:	4b17      	ldr	r3, [pc, #92]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ca:	f023 0218 	bic.w	r2, r3, #24
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	4913      	ldr	r1, [pc, #76]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80055e8:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f8:	490a      	ldr	r1, [pc, #40]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560a:	d105      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a04      	ldr	r2, [pc, #16]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005616:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005618:	7cbb      	ldrb	r3, [r7, #18]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000

08005628 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800563a:	d13e      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800563c:	4bb6      	ldr	r3, [pc, #728]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800564e:	d028      	beq.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005656:	f200 86f4 	bhi.w	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005660:	d005      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005668:	d00e      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800566a:	f000 beea 	b.w	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800566e:	4baa      	ldr	r3, [pc, #680]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	f040 86e4 	bne.w	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800567e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005682:	61fb      	str	r3, [r7, #28]
      break;
 8005684:	f000 bedf 	b.w	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005688:	4ba3      	ldr	r3, [pc, #652]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800568a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b02      	cmp	r3, #2
 8005694:	f040 86d9 	bne.w	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005698:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800569c:	61fb      	str	r3, [r7, #28]
      break;
 800569e:	f000 bed4 	b.w	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056a2:	4b9d      	ldr	r3, [pc, #628]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ae:	f040 86ce 	bne.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80056b2:	4b9a      	ldr	r3, [pc, #616]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056b4:	61fb      	str	r3, [r7, #28]
      break;
 80056b6:	f000 beca 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ba:	4b97      	ldr	r3, [pc, #604]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d036      	beq.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d840      	bhi.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d003      	beq.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d020      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80056dc:	e039      	b.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80056de:	4b8e      	ldr	r3, [pc, #568]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d116      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80056ea:	4b8b      	ldr	r3, [pc, #556]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80056f6:	4b88      	ldr	r3, [pc, #544]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	e005      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005702:	4b85      	ldr	r3, [pc, #532]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	4a84      	ldr	r2, [pc, #528]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005716:	e01f      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	61bb      	str	r3, [r7, #24]
      break;
 800571c:	e01c      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800571e:	4b7e      	ldr	r3, [pc, #504]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572a:	d102      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800572c:	4b7d      	ldr	r3, [pc, #500]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800572e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005730:	e012      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
      break;
 8005736:	e00f      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005738:	4b77      	ldr	r3, [pc, #476]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005744:	d102      	bne.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005746:	4b78      	ldr	r3, [pc, #480]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005748:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800574a:	e005      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	61bb      	str	r3, [r7, #24]
      break;
 8005750:	e002      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
      break;
 8005756:	bf00      	nop
    }

    switch(PeriphClk)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800575e:	f000 8606 	beq.w	800636e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005768:	f200 8673 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005772:	f000 8469 	beq.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800577c:	f200 8669 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005786:	f000 8531 	beq.w	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005790:	f200 865f 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800579a:	f000 8187 	beq.w	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057a4:	f200 8655 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ae:	f000 80cd 	beq.w	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057b8:	f200 864b 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c2:	f000 8430 	beq.w	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057cc:	f200 8641 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d6:	f000 83e4 	beq.w	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057e0:	f200 8637 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ea:	f000 80af 	beq.w	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	f200 862d 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	f000 809d 	beq.w	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005808:	f200 8623 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005812:	f000 808b 	beq.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800581c:	f200 8619 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005826:	f000 8554 	beq.w	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005830:	f200 860f 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583a:	f000 8500 	beq.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005844:	f200 8605 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584e:	f000 84a1 	beq.w	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005858:	f200 85fb 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	f000 846c 	beq.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	f200 85f3 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b20      	cmp	r3, #32
 8005870:	d84c      	bhi.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 85ec 	beq.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3b01      	subs	r3, #1
 800587e:	2b1f      	cmp	r3, #31
 8005880:	f200 85e7 	bhi.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	08005ca1 	.word	0x08005ca1
 8005890:	08005d0f 	.word	0x08005d0f
 8005894:	08006453 	.word	0x08006453
 8005898:	08005da3 	.word	0x08005da3
 800589c:	08006453 	.word	0x08006453
 80058a0:	08006453 	.word	0x08006453
 80058a4:	08006453 	.word	0x08006453
 80058a8:	08005e1b 	.word	0x08005e1b
 80058ac:	08006453 	.word	0x08006453
 80058b0:	08006453 	.word	0x08006453
 80058b4:	08006453 	.word	0x08006453
 80058b8:	08006453 	.word	0x08006453
 80058bc:	08006453 	.word	0x08006453
 80058c0:	08006453 	.word	0x08006453
 80058c4:	08006453 	.word	0x08006453
 80058c8:	08005e9f 	.word	0x08005e9f
 80058cc:	08006453 	.word	0x08006453
 80058d0:	08006453 	.word	0x08006453
 80058d4:	08006453 	.word	0x08006453
 80058d8:	08006453 	.word	0x08006453
 80058dc:	08006453 	.word	0x08006453
 80058e0:	08006453 	.word	0x08006453
 80058e4:	08006453 	.word	0x08006453
 80058e8:	08006453 	.word	0x08006453
 80058ec:	08006453 	.word	0x08006453
 80058f0:	08006453 	.word	0x08006453
 80058f4:	08006453 	.word	0x08006453
 80058f8:	08006453 	.word	0x08006453
 80058fc:	08006453 	.word	0x08006453
 8005900:	08006453 	.word	0x08006453
 8005904:	08006453 	.word	0x08006453
 8005908:	08005f21 	.word	0x08005f21
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	f000 83e8 	beq.w	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005914:	f000 bd9d 	b.w	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005918:	40021000 	.word	0x40021000
 800591c:	0003d090 	.word	0x0003d090
 8005920:	08011fc4 	.word	0x08011fc4
 8005924:	00f42400 	.word	0x00f42400
 8005928:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005932:	f000 ff83 	bl	800683c <RCCEx_GetSAIxPeriphCLKFreq>
 8005936:	61f8      	str	r0, [r7, #28]
      break;
 8005938:	f000 bd8e 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800593c:	69b9      	ldr	r1, [r7, #24]
 800593e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005942:	f000 ff7b 	bl	800683c <RCCEx_GetSAIxPeriphCLKFreq>
 8005946:	61f8      	str	r0, [r7, #28]
      break;
 8005948:	f000 bd86 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800594c:	4b9a      	ldr	r3, [pc, #616]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800595e:	d015      	beq.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005966:	f200 8092 	bhi.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005970:	d029      	beq.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005978:	f200 8089 	bhi.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d07b      	beq.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005988:	d04a      	beq.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800598a:	e080      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800598c:	4b8a      	ldr	r3, [pc, #552]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d17d      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005998:	4b87      	ldr	r3, [pc, #540]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80059a4:	4b84      	ldr	r3, [pc, #528]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	e005      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80059b0:	4b81      	ldr	r3, [pc, #516]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	4a7f      	ldr	r2, [pc, #508]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80059be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c2:	61fb      	str	r3, [r7, #28]
          break;
 80059c4:	e066      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059c6:	4b7c      	ldr	r3, [pc, #496]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d2:	d162      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059d4:	4b78      	ldr	r3, [pc, #480]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e0:	d15b      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059e2:	4b75      	ldr	r3, [pc, #468]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ec:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	fb03 f202 	mul.w	r2, r3, r2
 80059f6:	4b70      	ldr	r3, [pc, #448]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	091b      	lsrs	r3, r3, #4
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	3301      	adds	r3, #1
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005a08:	4b6b      	ldr	r3, [pc, #428]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0d5b      	lsrs	r3, r3, #21
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	3301      	adds	r3, #1
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	61fb      	str	r3, [r7, #28]
          break;
 8005a1e:	e03c      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005a20:	4b65      	ldr	r3, [pc, #404]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d138      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005a2e:	4b62      	ldr	r3, [pc, #392]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3a:	d131      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a3c:	4b5e      	ldr	r3, [pc, #376]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a46:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	fb03 f202 	mul.w	r2, r3, r2
 8005a50:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005a62:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	0d5b      	lsrs	r3, r3, #21
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a76:	61fb      	str	r3, [r7, #28]
          break;
 8005a78:	e012      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005a7a:	4b4f      	ldr	r3, [pc, #316]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d10e      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005a88:	4b4d      	ldr	r3, [pc, #308]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a8a:	61fb      	str	r3, [r7, #28]
          break;
 8005a8c:	e00b      	b.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005a8e:	bf00      	nop
 8005a90:	f000 bce2 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a94:	bf00      	nop
 8005a96:	f000 bcdf 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a9a:	bf00      	nop
 8005a9c:	f000 bcdc 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aa0:	bf00      	nop
 8005aa2:	f000 bcd9 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aa6:	bf00      	nop
        break;
 8005aa8:	f000 bcd6 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005aac:	4b42      	ldr	r3, [pc, #264]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aba:	d13d      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005abc:	4b3e      	ldr	r3, [pc, #248]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac8:	f040 84c5 	bne.w	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005acc:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	f040 84bd 	bne.w	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005adc:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	fb03 f202 	mul.w	r2, r3, r2
 8005af0:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	3301      	adds	r3, #1
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005b02:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	0edb      	lsrs	r3, r3, #27
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005b14:	4b28      	ldr	r3, [pc, #160]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005b20:	2311      	movs	r3, #17
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e001      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005b26:	2307      	movs	r3, #7
 8005b28:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	61fb      	str	r3, [r7, #28]
      break;
 8005b34:	f000 bc8f 	b.w	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005b38:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b4a:	d016      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b52:	f200 809b 	bhi.w	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5c:	d032      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b64:	f200 8092 	bhi.w	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8084 	beq.w	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b76:	d052      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005b78:	e088      	b.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b7a:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	f040 8084 	bne.w	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005b94:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	e005      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	4a03      	ldr	r2, [pc, #12]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb2:	61fb      	str	r3, [r7, #28]
          break;
 8005bb4:	e06c      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	08011fc4 	.word	0x08011fc4
 8005bc0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005bc4:	4ba5      	ldr	r3, [pc, #660]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bd0:	d160      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005bd2:	4ba2      	ldr	r3, [pc, #648]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bde:	d159      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005be0:	4b9e      	ldr	r3, [pc, #632]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	fb03 f202 	mul.w	r2, r3, r2
 8005bf4:	4b99      	ldr	r3, [pc, #612]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	3301      	adds	r3, #1
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005c06:	4b95      	ldr	r3, [pc, #596]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	0d5b      	lsrs	r3, r3, #21
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	3301      	adds	r3, #1
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	61fb      	str	r3, [r7, #28]
          break;
 8005c1c:	e03a      	b.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005c1e:	4b8f      	ldr	r3, [pc, #572]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c2a:	d135      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005c2c:	4b8b      	ldr	r3, [pc, #556]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c38:	d12e      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c3a:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c44:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	fb03 f202 	mul.w	r2, r3, r2
 8005c4e:	4b83      	ldr	r3, [pc, #524]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	091b      	lsrs	r3, r3, #4
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	3301      	adds	r3, #1
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005c60:	4b7e      	ldr	r3, [pc, #504]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	0d5b      	lsrs	r3, r3, #21
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	61fb      	str	r3, [r7, #28]
          break;
 8005c76:	e00f      	b.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005c78:	4b78      	ldr	r3, [pc, #480]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d10a      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005c86:	4b76      	ldr	r3, [pc, #472]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005c88:	61fb      	str	r3, [r7, #28]
          break;
 8005c8a:	e007      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005c8c:	bf00      	nop
 8005c8e:	e3e2      	b.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c90:	bf00      	nop
 8005c92:	e3e0      	b.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c94:	bf00      	nop
 8005c96:	e3de      	b.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c98:	bf00      	nop
 8005c9a:	e3dc      	b.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c9c:	bf00      	nop
      break;
 8005c9e:	e3da      	b.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ca0:	4b6e      	ldr	r3, [pc, #440]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d827      	bhi.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005cb2:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cd1 	.word	0x08005cd1
 8005cc0:	08005cd9 	.word	0x08005cd9
 8005cc4:	08005ced 	.word	0x08005ced
          frequency = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7ff f87c 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8005ccc:	61f8      	str	r0, [r7, #28]
          break;
 8005cce:	e01d      	b.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cd0:	f7fe ffca 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005cd4:	61f8      	str	r0, [r7, #28]
          break;
 8005cd6:	e019      	b.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cd8:	4b60      	ldr	r3, [pc, #384]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce4:	d10f      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005ce6:	4b5f      	ldr	r3, [pc, #380]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ce8:	61fb      	str	r3, [r7, #28]
          break;
 8005cea:	e00c      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cec:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d107      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfe:	61fb      	str	r3, [r7, #28]
          break;
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005d02:	bf00      	nop
 8005d04:	e3a8      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d06:	bf00      	nop
 8005d08:	e3a6      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d0a:	bf00      	nop
        break;
 8005d0c:	e3a4      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005d0e:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	d83a      	bhi.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d5d 	.word	0x08005d5d
 8005d2c:	08005d97 	.word	0x08005d97
 8005d30:	08005d97 	.word	0x08005d97
 8005d34:	08005d97 	.word	0x08005d97
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	08005d97 	.word	0x08005d97
 8005d40:	08005d97 	.word	0x08005d97
 8005d44:	08005d97 	.word	0x08005d97
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d97 	.word	0x08005d97
 8005d50:	08005d97 	.word	0x08005d97
 8005d54:	08005d97 	.word	0x08005d97
 8005d58:	08005d81 	.word	0x08005d81
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f7ff f81c 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005d60:	61f8      	str	r0, [r7, #28]
          break;
 8005d62:	e01d      	b.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d64:	f7fe ff80 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005d68:	61f8      	str	r0, [r7, #28]
          break;
 8005d6a:	e019      	b.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d6c:	4b3b      	ldr	r3, [pc, #236]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d78:	d10f      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005d7a:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d7c:	61fb      	str	r3, [r7, #28]
          break;
 8005d7e:	e00c      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d80:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d92:	61fb      	str	r3, [r7, #28]
          break;
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005d96:	bf00      	nop
 8005d98:	e35e      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d9a:	bf00      	nop
 8005d9c:	e35c      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d9e:	bf00      	nop
        break;
 8005da0:	e35a      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005da2:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b30      	cmp	r3, #48	; 0x30
 8005db2:	d021      	beq.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b30      	cmp	r3, #48	; 0x30
 8005db8:	d829      	bhi.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d011      	beq.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d823      	bhi.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d004      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005dd2:	e01c      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f7fe ffe0 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	61f8      	str	r0, [r7, #28]
          break;
 8005dda:	e01d      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ddc:	f7fe ff44 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005de0:	61f8      	str	r0, [r7, #28]
          break;
 8005de2:	e019      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005de4:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df0:	d10f      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005df2:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005df4:	61fb      	str	r3, [r7, #28]
          break;
 8005df6:	e00c      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d107      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0a:	61fb      	str	r3, [r7, #28]
          break;
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005e0e:	bf00      	nop
 8005e10:	e322      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e12:	bf00      	nop
 8005e14:	e320      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e16:	bf00      	nop
        break;
 8005e18:	e31e      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2bc0      	cmp	r3, #192	; 0xc0
 8005e2a:	d027      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e30:	d82f      	bhi.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b80      	cmp	r3, #128	; 0x80
 8005e36:	d017      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d829      	bhi.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d004      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005e4a:	e022      	b.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e4c:	f7fe ffa4 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005e50:	61f8      	str	r0, [r7, #28]
          break;
 8005e52:	e023      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e54:	f7fe ff08 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005e58:	61f8      	str	r0, [r7, #28]
          break;
 8005e5a:	e01f      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	02dc6c00 	.word	0x02dc6c00
 8005e64:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e68:	4b9b      	ldr	r3, [pc, #620]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e74:	d10f      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005e76:	4b99      	ldr	r3, [pc, #612]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e78:	61fb      	str	r3, [r7, #28]
          break;
 8005e7a:	e00c      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e7c:	4b96      	ldr	r3, [pc, #600]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d107      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	61fb      	str	r3, [r7, #28]
          break;
 8005e90:	e003      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005e92:	bf00      	nop
 8005e94:	e2e0      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e96:	bf00      	nop
 8005e98:	e2de      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e9a:	bf00      	nop
        break;
 8005e9c:	e2dc      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005e9e:	4b8e      	ldr	r3, [pc, #568]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb0:	d025      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb8:	d82c      	bhi.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec0:	d013      	beq.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec8:	d824      	bhi.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d004      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005ed8:	e01c      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005eda:	f7fe ff5d 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005ede:	61f8      	str	r0, [r7, #28]
          break;
 8005ee0:	e01d      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ee2:	f7fe fec1 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005ee6:	61f8      	str	r0, [r7, #28]
          break;
 8005ee8:	e019      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eea:	4b7b      	ldr	r3, [pc, #492]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d10f      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005ef8:	4b78      	ldr	r3, [pc, #480]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005efa:	61fb      	str	r3, [r7, #28]
          break;
 8005efc:	e00c      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005efe:	4b76      	ldr	r3, [pc, #472]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f10:	61fb      	str	r3, [r7, #28]
          break;
 8005f12:	e003      	b.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005f14:	bf00      	nop
 8005f16:	e29f      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f18:	bf00      	nop
 8005f1a:	e29d      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f1c:	bf00      	nop
        break;
 8005f1e:	e29b      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005f20:	4b6d      	ldr	r3, [pc, #436]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f32:	d025      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f3a:	d82c      	bhi.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	d013      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d824      	bhi.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f58:	d004      	beq.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005f5a:	e01c      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f7fe ff1c 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8005f60:	61f8      	str	r0, [r7, #28]
          break;
 8005f62:	e01d      	b.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f64:	f7fe fe80 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005f68:	61f8      	str	r0, [r7, #28]
          break;
 8005f6a:	e019      	b.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f6c:	4b5a      	ldr	r3, [pc, #360]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f78:	d10f      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005f7a:	4b58      	ldr	r3, [pc, #352]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005f7c:	61fb      	str	r3, [r7, #28]
          break;
 8005f7e:	e00c      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f80:	4b55      	ldr	r3, [pc, #340]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f92:	61fb      	str	r3, [r7, #28]
          break;
 8005f94:	e003      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005f96:	bf00      	nop
 8005f98:	e25e      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f9a:	bf00      	nop
 8005f9c:	e25c      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f9e:	bf00      	nop
        break;
 8005fa0:	e25a      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005fa2:	4b4d      	ldr	r3, [pc, #308]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb4:	d007      	beq.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fbc:	d12f      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fbe:	f7fe fe53 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8005fc2:	61f8      	str	r0, [r7, #28]
          break;
 8005fc4:	e02e      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005fc6:	4b44      	ldr	r3, [pc, #272]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fd2:	d126      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005fd4:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005fe0:	4b3d      	ldr	r3, [pc, #244]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	0a1b      	lsrs	r3, r3, #8
 8005fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fea:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	fb03 f202 	mul.w	r2, r3, r2
 8005ff4:	4b38      	ldr	r3, [pc, #224]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	3301      	adds	r3, #1
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	0e5b      	lsrs	r3, r3, #25
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	3301      	adds	r3, #1
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	61fb      	str	r3, [r7, #28]
          break;
 800601c:	e001      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800601e:	bf00      	nop
 8006020:	e21a      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006022:	bf00      	nop
        break;
 8006024:	e218      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006026:	4b2c      	ldr	r3, [pc, #176]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006038:	f7fe fec4 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 800603c:	61f8      	str	r0, [r7, #28]
        break;
 800603e:	e20b      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006040:	f7fe fe12 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8006044:	61f8      	str	r0, [r7, #28]
        break;
 8006046:	e207      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006048:	4b23      	ldr	r3, [pc, #140]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800604a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800604e:	f003 0318 	and.w	r3, r3, #24
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b10      	cmp	r3, #16
 8006058:	d010      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b10      	cmp	r3, #16
 800605e:	d834      	bhi.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d024      	beq.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800606c:	e02d      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800606e:	69b9      	ldr	r1, [r7, #24]
 8006070:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006074:	f000 fbe2 	bl	800683c <RCCEx_GetSAIxPeriphCLKFreq>
 8006078:	61f8      	str	r0, [r7, #28]
          break;
 800607a:	e02b      	b.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800607c:	4b16      	ldr	r3, [pc, #88]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b02      	cmp	r3, #2
 8006086:	d122      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006088:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0308 	and.w	r3, r3, #8
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	e005      	b.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80060a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	4a0c      	ldr	r2, [pc, #48]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80060ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b2:	61fb      	str	r3, [r7, #28]
          break;
 80060b4:	e00b      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	d106      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80060c6:	61fb      	str	r3, [r7, #28]
          break;
 80060c8:	e003      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80060ca:	bf00      	nop
 80060cc:	e1c4      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ce:	bf00      	nop
 80060d0:	e1c2      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060d2:	bf00      	nop
        break;
 80060d4:	e1c0      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80060d6:	bf00      	nop
 80060d8:	40021000 	.word	0x40021000
 80060dc:	00f42400 	.word	0x00f42400
 80060e0:	08011fc4 	.word	0x08011fc4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80060e4:	4b96      	ldr	r3, [pc, #600]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f6:	d013      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fe:	d819      	bhi.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610c:	d004      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800610e:	e011      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fe fe42 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8006114:	61f8      	str	r0, [r7, #28]
          break;
 8006116:	e010      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006118:	f7fe fda6 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 800611c:	61f8      	str	r0, [r7, #28]
          break;
 800611e:	e00c      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006120:	4b87      	ldr	r3, [pc, #540]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612c:	d104      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800612e:	4b85      	ldr	r3, [pc, #532]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006130:	61fb      	str	r3, [r7, #28]
          break;
 8006132:	e001      	b.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006134:	bf00      	nop
 8006136:	e18f      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006138:	bf00      	nop
        break;
 800613a:	e18d      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800613c:	4b80      	ldr	r3, [pc, #512]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614e:	d013      	beq.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006156:	d819      	bhi.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006164:	d004      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006166:	e011      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006168:	f7fe fe16 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 800616c:	61f8      	str	r0, [r7, #28]
          break;
 800616e:	e010      	b.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006170:	f7fe fd7a 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8006174:	61f8      	str	r0, [r7, #28]
          break;
 8006176:	e00c      	b.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006178:	4b71      	ldr	r3, [pc, #452]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006184:	d104      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006186:	4b6f      	ldr	r3, [pc, #444]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006188:	61fb      	str	r3, [r7, #28]
          break;
 800618a:	e001      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800618c:	bf00      	nop
 800618e:	e163      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006190:	bf00      	nop
        break;
 8006192:	e161      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006194:	4b6a      	ldr	r3, [pc, #424]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a6:	d013      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061ae:	d819      	bhi.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061bc:	d004      	beq.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80061be:	e011      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061c0:	f7fe fdea 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 80061c4:	61f8      	str	r0, [r7, #28]
          break;
 80061c6:	e010      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80061c8:	f7fe fd4e 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 80061cc:	61f8      	str	r0, [r7, #28]
          break;
 80061ce:	e00c      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061d0:	4b5b      	ldr	r3, [pc, #364]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061dc:	d104      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80061de:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80061e0:	61fb      	str	r3, [r7, #28]
          break;
 80061e2:	e001      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80061e4:	bf00      	nop
 80061e6:	e137      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061e8:	bf00      	nop
        break;
 80061ea:	e135      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80061ec:	4b54      	ldr	r3, [pc, #336]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d011      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d818      	bhi.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d004      	beq.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006210:	e011      	b.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006212:	f7fe fdc1 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8006216:	61f8      	str	r0, [r7, #28]
          break;
 8006218:	e010      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800621a:	f7fe fd25 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 800621e:	61f8      	str	r0, [r7, #28]
          break;
 8006220:	e00c      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006222:	4b47      	ldr	r3, [pc, #284]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622e:	d104      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006230:	4b44      	ldr	r3, [pc, #272]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006232:	61fb      	str	r3, [r7, #28]
          break;
 8006234:	e001      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006236:	bf00      	nop
 8006238:	e10e      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800623a:	bf00      	nop
        break;
 800623c:	e10c      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800623e:	4b40      	ldr	r3, [pc, #256]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006250:	d02c      	beq.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006258:	d833      	bhi.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006260:	d01a      	beq.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006268:	d82b      	bhi.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006276:	d004      	beq.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006278:	e023      	b.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800627a:	f7fe fd8d 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 800627e:	61f8      	str	r0, [r7, #28]
          break;
 8006280:	e026      	b.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b02      	cmp	r3, #2
 800628e:	d11a      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006290:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006294:	61fb      	str	r3, [r7, #28]
          break;
 8006296:	e016      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006298:	4b29      	ldr	r3, [pc, #164]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a4:	d111      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80062a8:	61fb      	str	r3, [r7, #28]
          break;
 80062aa:	e00e      	b.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062ac:	4b24      	ldr	r3, [pc, #144]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d109      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80062ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062be:	61fb      	str	r3, [r7, #28]
          break;
 80062c0:	e005      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80062c2:	bf00      	nop
 80062c4:	e0c8      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062c6:	bf00      	nop
 80062c8:	e0c6      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062ca:	bf00      	nop
 80062cc:	e0c4      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062ce:	bf00      	nop
        break;
 80062d0:	e0c2      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062e4:	d030      	beq.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ec:	d837      	bhi.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f4:	d01a      	beq.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062fc:	d82f      	bhi.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630a:	d004      	beq.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800630c:	e027      	b.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fe fd43 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8006312:	61f8      	str	r0, [r7, #28]
          break;
 8006314:	e02a      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006316:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d11e      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006324:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006328:	61fb      	str	r3, [r7, #28]
          break;
 800632a:	e01a      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006338:	d115      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800633a:	4b02      	ldr	r3, [pc, #8]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800633c:	61fb      	str	r3, [r7, #28]
          break;
 800633e:	e012      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006340:	40021000 	.word	0x40021000
 8006344:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006348:	4b46      	ldr	r3, [pc, #280]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d109      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635a:	61fb      	str	r3, [r7, #28]
          break;
 800635c:	e005      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800635e:	bf00      	nop
 8006360:	e07a      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006362:	bf00      	nop
 8006364:	e078      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006366:	bf00      	nop
 8006368:	e076      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800636a:	bf00      	nop
        break;
 800636c:	e074      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800636e:	4b3d      	ldr	r3, [pc, #244]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006374:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006380:	d02c      	beq.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006388:	d855      	bhi.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006396:	d004      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006398:	e04d      	b.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800639a:	f7fe fc65 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 800639e:	61f8      	str	r0, [r7, #28]
          break;
 80063a0:	e04e      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80063a2:	4b30      	ldr	r3, [pc, #192]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d145      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80063ae:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80063ba:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	e005      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80063c6:	4b27      	ldr	r3, [pc, #156]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	4a25      	ldr	r2, [pc, #148]	; (8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80063d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d8:	61fb      	str	r3, [r7, #28]
          break;
 80063da:	e02e      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063dc:	4b21      	ldr	r3, [pc, #132]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063e8:	d129      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80063ea:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f6:	d122      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063f8:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006402:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	fb03 f202 	mul.w	r2, r3, r2
 800640c:	4b15      	ldr	r3, [pc, #84]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	3301      	adds	r3, #1
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	0d5b      	lsrs	r3, r3, #21
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	3301      	adds	r3, #1
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006432:	61fb      	str	r3, [r7, #28]
          break;
 8006434:	e003      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006436:	bf00      	nop
 8006438:	e00e      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643a:	bf00      	nop
 800643c:	e00c      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643e:	bf00      	nop
        break;
 8006440:	e00a      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006442:	bf00      	nop
 8006444:	e008      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006446:	bf00      	nop
 8006448:	e006      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800644a:	bf00      	nop
 800644c:	e004      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006456:	bf00      	nop
    }
  }

  return(frequency);
 8006458:	69fb      	ldr	r3, [r7, #28]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40021000 	.word	0x40021000
 8006468:	08011fc4 	.word	0x08011fc4

0800646c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800647a:	4b72      	ldr	r3, [pc, #456]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006486:	4b6f      	ldr	r3, [pc, #444]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0203 	and.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d103      	bne.n	800649e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
       ||
 800649a:	2b00      	cmp	r3, #0
 800649c:	d142      	bne.n	8006524 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	e03f      	b.n	8006524 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d018      	beq.n	80064de <RCCEx_PLLSAI1_Config+0x72>
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d825      	bhi.n	80064fc <RCCEx_PLLSAI1_Config+0x90>
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d002      	beq.n	80064ba <RCCEx_PLLSAI1_Config+0x4e>
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d009      	beq.n	80064cc <RCCEx_PLLSAI1_Config+0x60>
 80064b8:	e020      	b.n	80064fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064ba:	4b62      	ldr	r3, [pc, #392]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d11d      	bne.n	8006502 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ca:	e01a      	b.n	8006502 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064cc:	4b5d      	ldr	r3, [pc, #372]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d116      	bne.n	8006506 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064dc:	e013      	b.n	8006506 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064de:	4b59      	ldr	r3, [pc, #356]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10f      	bne.n	800650a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064ea:	4b56      	ldr	r3, [pc, #344]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064fa:	e006      	b.n	800650a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006500:	e004      	b.n	800650c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800650a:	bf00      	nop
    }

    if(status == HAL_OK)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d108      	bne.n	8006524 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006512:	4b4c      	ldr	r3, [pc, #304]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f023 0203 	bic.w	r2, r3, #3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4949      	ldr	r1, [pc, #292]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006520:	4313      	orrs	r3, r2
 8006522:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f040 8086 	bne.w	8006638 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800652c:	4b45      	ldr	r3, [pc, #276]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a44      	ldr	r2, [pc, #272]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006538:	f7fb fe96 	bl	8002268 <HAL_GetTick>
 800653c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800653e:	e009      	b.n	8006554 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006540:	f7fb fe92 	bl	8002268 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d902      	bls.n	8006554 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	73fb      	strb	r3, [r7, #15]
        break;
 8006552:	e005      	b.n	8006560 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006554:	4b3b      	ldr	r3, [pc, #236]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ef      	bne.n	8006540 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d168      	bne.n	8006638 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d113      	bne.n	8006594 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800656c:	4b35      	ldr	r3, [pc, #212]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	4b35      	ldr	r3, [pc, #212]	; (8006648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006572:	4013      	ands	r3, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6892      	ldr	r2, [r2, #8]
 8006578:	0211      	lsls	r1, r2, #8
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68d2      	ldr	r2, [r2, #12]
 800657e:	06d2      	lsls	r2, r2, #27
 8006580:	4311      	orrs	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6852      	ldr	r2, [r2, #4]
 8006586:	3a01      	subs	r2, #1
 8006588:	0112      	lsls	r2, r2, #4
 800658a:	430a      	orrs	r2, r1
 800658c:	492d      	ldr	r1, [pc, #180]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 800658e:	4313      	orrs	r3, r2
 8006590:	610b      	str	r3, [r1, #16]
 8006592:	e02d      	b.n	80065f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d115      	bne.n	80065c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	4b2b      	ldr	r3, [pc, #172]	; (800664c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6892      	ldr	r2, [r2, #8]
 80065a6:	0211      	lsls	r1, r2, #8
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6912      	ldr	r2, [r2, #16]
 80065ac:	0852      	lsrs	r2, r2, #1
 80065ae:	3a01      	subs	r2, #1
 80065b0:	0552      	lsls	r2, r2, #21
 80065b2:	4311      	orrs	r1, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6852      	ldr	r2, [r2, #4]
 80065b8:	3a01      	subs	r2, #1
 80065ba:	0112      	lsls	r2, r2, #4
 80065bc:	430a      	orrs	r2, r1
 80065be:	4921      	ldr	r1, [pc, #132]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	610b      	str	r3, [r1, #16]
 80065c4:	e014      	b.n	80065f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065c6:	4b1f      	ldr	r3, [pc, #124]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6892      	ldr	r2, [r2, #8]
 80065d2:	0211      	lsls	r1, r2, #8
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6952      	ldr	r2, [r2, #20]
 80065d8:	0852      	lsrs	r2, r2, #1
 80065da:	3a01      	subs	r2, #1
 80065dc:	0652      	lsls	r2, r2, #25
 80065de:	4311      	orrs	r1, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6852      	ldr	r2, [r2, #4]
 80065e4:	3a01      	subs	r2, #1
 80065e6:	0112      	lsls	r2, r2, #4
 80065e8:	430a      	orrs	r2, r1
 80065ea:	4916      	ldr	r1, [pc, #88]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065f0:	4b14      	ldr	r3, [pc, #80]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a13      	ldr	r2, [pc, #76]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fc:	f7fb fe34 	bl	8002268 <HAL_GetTick>
 8006600:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006602:	e009      	b.n	8006618 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006604:	f7fb fe30 	bl	8002268 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d902      	bls.n	8006618 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	73fb      	strb	r3, [r7, #15]
          break;
 8006616:	e005      	b.n	8006624 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0ef      	beq.n	8006604 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800662a:	4b06      	ldr	r3, [pc, #24]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	4904      	ldr	r1, [pc, #16]	; (8006644 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006634:	4313      	orrs	r3, r2
 8006636:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000
 8006648:	07ff800f 	.word	0x07ff800f
 800664c:	ff9f800f 	.word	0xff9f800f
 8006650:	f9ff800f 	.word	0xf9ff800f

08006654 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006662:	4b72      	ldr	r3, [pc, #456]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800666e:	4b6f      	ldr	r3, [pc, #444]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0203 	and.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d103      	bne.n	8006686 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
       ||
 8006682:	2b00      	cmp	r3, #0
 8006684:	d142      	bne.n	800670c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	e03f      	b.n	800670c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d018      	beq.n	80066c6 <RCCEx_PLLSAI2_Config+0x72>
 8006694:	2b03      	cmp	r3, #3
 8006696:	d825      	bhi.n	80066e4 <RCCEx_PLLSAI2_Config+0x90>
 8006698:	2b01      	cmp	r3, #1
 800669a:	d002      	beq.n	80066a2 <RCCEx_PLLSAI2_Config+0x4e>
 800669c:	2b02      	cmp	r3, #2
 800669e:	d009      	beq.n	80066b4 <RCCEx_PLLSAI2_Config+0x60>
 80066a0:	e020      	b.n	80066e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066a2:	4b62      	ldr	r3, [pc, #392]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d11d      	bne.n	80066ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066b2:	e01a      	b.n	80066ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066b4:	4b5d      	ldr	r3, [pc, #372]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d116      	bne.n	80066ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066c4:	e013      	b.n	80066ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066c6:	4b59      	ldr	r3, [pc, #356]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10f      	bne.n	80066f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066d2:	4b56      	ldr	r3, [pc, #344]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066e2:	e006      	b.n	80066f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e004      	b.n	80066f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80066fa:	4b4c      	ldr	r3, [pc, #304]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f023 0203 	bic.w	r2, r3, #3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4949      	ldr	r1, [pc, #292]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 8086 	bne.w	8006820 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006714:	4b45      	ldr	r3, [pc, #276]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a44      	ldr	r2, [pc, #272]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 800671a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006720:	f7fb fda2 	bl	8002268 <HAL_GetTick>
 8006724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006726:	e009      	b.n	800673c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006728:	f7fb fd9e 	bl	8002268 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d902      	bls.n	800673c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	73fb      	strb	r3, [r7, #15]
        break;
 800673a:	e005      	b.n	8006748 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800673c:	4b3b      	ldr	r3, [pc, #236]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ef      	bne.n	8006728 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d168      	bne.n	8006820 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d113      	bne.n	800677c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006754:	4b35      	ldr	r3, [pc, #212]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006756:	695a      	ldr	r2, [r3, #20]
 8006758:	4b35      	ldr	r3, [pc, #212]	; (8006830 <RCCEx_PLLSAI2_Config+0x1dc>)
 800675a:	4013      	ands	r3, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6892      	ldr	r2, [r2, #8]
 8006760:	0211      	lsls	r1, r2, #8
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68d2      	ldr	r2, [r2, #12]
 8006766:	06d2      	lsls	r2, r2, #27
 8006768:	4311      	orrs	r1, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6852      	ldr	r2, [r2, #4]
 800676e:	3a01      	subs	r2, #1
 8006770:	0112      	lsls	r2, r2, #4
 8006772:	430a      	orrs	r2, r1
 8006774:	492d      	ldr	r1, [pc, #180]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006776:	4313      	orrs	r3, r2
 8006778:	614b      	str	r3, [r1, #20]
 800677a:	e02d      	b.n	80067d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d115      	bne.n	80067ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006782:	4b2a      	ldr	r3, [pc, #168]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6892      	ldr	r2, [r2, #8]
 800678e:	0211      	lsls	r1, r2, #8
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6912      	ldr	r2, [r2, #16]
 8006794:	0852      	lsrs	r2, r2, #1
 8006796:	3a01      	subs	r2, #1
 8006798:	0552      	lsls	r2, r2, #21
 800679a:	4311      	orrs	r1, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6852      	ldr	r2, [r2, #4]
 80067a0:	3a01      	subs	r2, #1
 80067a2:	0112      	lsls	r2, r2, #4
 80067a4:	430a      	orrs	r2, r1
 80067a6:	4921      	ldr	r1, [pc, #132]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	614b      	str	r3, [r1, #20]
 80067ac:	e014      	b.n	80067d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067ae:	4b1f      	ldr	r3, [pc, #124]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067b0:	695a      	ldr	r2, [r3, #20]
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <RCCEx_PLLSAI2_Config+0x1e4>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6892      	ldr	r2, [r2, #8]
 80067ba:	0211      	lsls	r1, r2, #8
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6952      	ldr	r2, [r2, #20]
 80067c0:	0852      	lsrs	r2, r2, #1
 80067c2:	3a01      	subs	r2, #1
 80067c4:	0652      	lsls	r2, r2, #25
 80067c6:	4311      	orrs	r1, r2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6852      	ldr	r2, [r2, #4]
 80067cc:	3a01      	subs	r2, #1
 80067ce:	0112      	lsls	r2, r2, #4
 80067d0:	430a      	orrs	r2, r1
 80067d2:	4916      	ldr	r1, [pc, #88]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067d8:	4b14      	ldr	r3, [pc, #80]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a13      	ldr	r2, [pc, #76]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e4:	f7fb fd40 	bl	8002268 <HAL_GetTick>
 80067e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067ea:	e009      	b.n	8006800 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067ec:	f7fb fd3c 	bl	8002268 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d902      	bls.n	8006800 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	73fb      	strb	r3, [r7, #15]
          break;
 80067fe:	e005      	b.n	800680c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0ef      	beq.n	80067ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	4904      	ldr	r1, [pc, #16]	; (800682c <RCCEx_PLLSAI2_Config+0x1d8>)
 800681c:	4313      	orrs	r3, r2
 800681e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000
 8006830:	07ff800f 	.word	0x07ff800f
 8006834:	ff9f800f 	.word	0xff9f800f
 8006838:	f9ff800f 	.word	0xf9ff800f

0800683c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800683c:	b480      	push	{r7}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d10b      	bne.n	8006872 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800685a:	4b7e      	ldr	r3, [pc, #504]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800685c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006860:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006864:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b60      	cmp	r3, #96	; 0x60
 800686a:	d112      	bne.n	8006892 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800686c:	4b7a      	ldr	r3, [pc, #488]	; (8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e00f      	b.n	8006892 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006878:	d10b      	bne.n	8006892 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800687a:	4b76      	ldr	r3, [pc, #472]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800687c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006884:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688c:	d101      	bne.n	8006892 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800688e:	4b72      	ldr	r3, [pc, #456]	; (8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006890:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 80d6 	bne.w	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b40      	cmp	r3, #64	; 0x40
 80068a2:	d003      	beq.n	80068ac <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068aa:	d13b      	bne.n	8006924 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80068ac:	4b69      	ldr	r3, [pc, #420]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b8:	f040 80c4 	bne.w	8006a44 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80068bc:	4b65      	ldr	r3, [pc, #404]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80bd 	beq.w	8006a44 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068ca:	4b62      	ldr	r3, [pc, #392]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	3301      	adds	r3, #1
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068de:	4b5d      	ldr	r3, [pc, #372]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80068ea:	4b5a      	ldr	r3, [pc, #360]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	0edb      	lsrs	r3, r3, #27
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80068fc:	4b55      	ldr	r3, [pc, #340]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006908:	2311      	movs	r3, #17
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	e001      	b.n	8006912 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800690e:	2307      	movs	r3, #7
 8006910:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	fb03 f202 	mul.w	r2, r3, r2
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006922:	e08f      	b.n	8006a44 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d13a      	bne.n	80069a0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800692a:	4b4a      	ldr	r3, [pc, #296]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006936:	f040 8086 	bne.w	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800693a:	4b46      	ldr	r3, [pc, #280]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d07f      	beq.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006946:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	091b      	lsrs	r3, r3, #4
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	3301      	adds	r3, #1
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	fbb2 f3f3 	udiv	r3, r2, r3
 8006958:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800695a:	4b3e      	ldr	r3, [pc, #248]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006964:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006966:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	0edb      	lsrs	r3, r3, #27
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006978:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006984:	2311      	movs	r3, #17
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	e001      	b.n	800698e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800698a:	2307      	movs	r3, #7
 800698c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	fb03 f202 	mul.w	r2, r3, r2
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	fbb2 f3f3 	udiv	r3, r2, r3
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	e052      	b.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d003      	beq.n	80069ae <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ac:	d109      	bne.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069ae:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ba:	d144      	bne.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80069bc:	4b27      	ldr	r3, [pc, #156]	; (8006a5c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80069be:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069c0:	e041      	b.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d003      	beq.n	80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ce:	d13a      	bne.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80069d0:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069dc:	d133      	bne.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80069de:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d02d      	beq.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	3301      	adds	r3, #1
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80069fe:	4b15      	ldr	r3, [pc, #84]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a08:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006a0a:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	0edb      	lsrs	r3, r3, #27
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006a28:	2311      	movs	r3, #17
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e001      	b.n	8006a32 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006a2e:	2307      	movs	r3, #7
 8006a30:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	fb03 f202 	mul.w	r2, r3, r2
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	e000      	b.n	8006a46 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006a44:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006a46:	69fb      	ldr	r3, [r7, #28]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3724      	adds	r7, #36	; 0x24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40021000 	.word	0x40021000
 8006a58:	001fff68 	.word	0x001fff68
 8006a5c:	00f42400 	.word	0x00f42400

08006a60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e078      	b.n	8006b64 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fb f8ab 	bl	8001be0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f86a 	bl	8006b6c <HAL_SD_InitCard>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e060      	b.n	8006b64 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fdcd 	bl	8007648 <HAL_SD_GetCardStatus>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e055      	b.n	8006b64 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006ab8:	7e3b      	ldrb	r3, [r7, #24]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006abe:	7e7b      	ldrb	r3, [r7, #25]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d10a      	bne.n	8006ae2 <HAL_SD_Init+0x82>
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SD_Init+0x78>
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ade:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ae0:	e00b      	b.n	8006afa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d104      	bne.n	8006af4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006af2:	e002      	b.n	8006afa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fe83 	bl	800780c <HAL_SD_ConfigWideBusOperation>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e029      	b.n	8006b64 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006b10:	f7fb fbaa 	bl	8002268 <HAL_GetTick>
 8006b14:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b16:	e014      	b.n	8006b42 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006b18:	f7fb fba6 	bl	8002268 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b26:	d10c      	bne.n	8006b42 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e010      	b.n	8006b64 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 ff76 	bl	8007a34 <HAL_SD_GetCardState>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d1e4      	bne.n	8006b18 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3728      	adds	r7, #40	; 0x28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b6c:	b5b0      	push	{r4, r5, r7, lr}
 8006b6e:	b08e      	sub	sp, #56	; 0x38
 8006b70:	af04      	add	r7, sp, #16
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006b84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b88:	f7fe fd4e 	bl	8005628 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b8c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e079      	b.n	8006c9c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	4a3d      	ldr	r2, [pc, #244]	; (8006ca4 <HAL_SD_InitCard+0x138>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d107      	bne.n	8006bd4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0210 	orr.w	r2, r2, #16
 8006bd2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681d      	ldr	r5, [r3, #0]
 8006bd8:	466c      	mov	r4, sp
 8006bda:	f107 0314 	add.w	r3, r7, #20
 8006bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bec:	4628      	mov	r0, r5
 8006bee:	f003 fd43 	bl	800a678 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f003 fd86 	bl	800a708 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006c08:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <HAL_SD_InitCard+0x13c>)
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c10:	3301      	adds	r3, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fb fb34 	bl	8002280 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 ffeb 	bl	8007bf4 <SD_PowerON>
 8006c1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e02e      	b.n	8006c9c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 ff18 	bl	8007a74 <SD_InitCard>
 8006c44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e01b      	b.n	8006c9c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f003 fde1 	bl	800a834 <SDMMC_CmdBlockLength>
 8006c72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00f      	beq.n	8006c9a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <HAL_SD_InitCard+0x140>)
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3728      	adds	r7, #40	; 0x28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca4:	014f8b59 	.word	0x014f8b59
 8006ca8:	00012110 	.word	0x00012110
 8006cac:	1fe00fff 	.word	0x1fe00fff

08006cb0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b092      	sub	sp, #72	; 0x48
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006cbe:	f7fb fad3 	bl	8002268 <HAL_GetTick>
 8006cc2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d107      	bne.n	8006ce2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e170      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	f040 8163 	bne.w	8006fb6 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d907      	bls.n	8006d14 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e157      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2203      	movs	r2, #3
 8006d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2200      	movs	r2, #0
 8006d22:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d002      	beq.n	8006d32 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	025b      	lsls	r3, r3, #9
 8006d30:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d36:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	025b      	lsls	r3, r3, #9
 8006d3c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d3e:	2390      	movs	r3, #144	; 0x90
 8006d40:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d42:	2302      	movs	r3, #2
 8006d44:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f107 0214 	add.w	r2, r7, #20
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f003 fd3f 	bl	800a7dc <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d6c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d90a      	bls.n	8006d8a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2202      	movs	r2, #2
 8006d78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d80:	4618      	mov	r0, r3
 8006d82:	f003 fd9d 	bl	800a8c0 <SDMMC_CmdReadMultiBlock>
 8006d86:	6478      	str	r0, [r7, #68]	; 0x44
 8006d88:	e009      	b.n	8006d9e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d96:	4618      	mov	r0, r3
 8006d98:	f003 fd6f 	bl	800a87a <SDMMC_CmdReadSingleBlock>
 8006d9c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d012      	beq.n	8006dca <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a88      	ldr	r2, [pc, #544]	; (8006fcc <HAL_SD_ReadBlocks+0x31c>)
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db2:	431a      	orrs	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e0fc      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006dce:	e061      	b.n	8006e94 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d03c      	beq.n	8006e58 <HAL_SD_ReadBlocks+0x1a8>
 8006dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d039      	beq.n	8006e58 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	643b      	str	r3, [r7, #64]	; 0x40
 8006de8:	e033      	b.n	8006e52 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f003 fc6c 	bl	800a6cc <SDMMC_ReadFIFO>
 8006df4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	3301      	adds	r3, #1
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e06:	3b01      	subs	r3, #1
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	0a1b      	lsrs	r3, r3, #8
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e12:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	3301      	adds	r3, #1
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	0c1b      	lsrs	r3, r3, #16
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e32:	3b01      	subs	r3, #1
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	0e1b      	lsrs	r3, r3, #24
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	3301      	adds	r3, #1
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4e:	3301      	adds	r3, #1
 8006e50:	643b      	str	r3, [r7, #64]	; 0x40
 8006e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e54:	2b07      	cmp	r3, #7
 8006e56:	d9c8      	bls.n	8006dea <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e58:	f7fb fa06 	bl	8002268 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d902      	bls.n	8006e6e <HAL_SD_ReadBlocks+0x1be>
 8006e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d112      	bne.n	8006e94 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a56      	ldr	r2, [pc, #344]	; (8006fcc <HAL_SD_ReadBlocks+0x31c>)
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e097      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d096      	beq.n	8006dd0 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d022      	beq.n	8006f06 <HAL_SD_ReadBlocks+0x256>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d91f      	bls.n	8006f06 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d01b      	beq.n	8006f06 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f003 fd5e 	bl	800a994 <SDMMC_CmdStopTransfer>
 8006ed8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d012      	beq.n	8006f06 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a39      	ldr	r2, [pc, #228]	; (8006fcc <HAL_SD_ReadBlocks+0x31c>)
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e05e      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2c      	ldr	r2, [pc, #176]	; (8006fcc <HAL_SD_ReadBlocks+0x31c>)
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	f043 0208 	orr.w	r2, r3, #8
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e044      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1f      	ldr	r2, [pc, #124]	; (8006fcc <HAL_SD_ReadBlocks+0x31c>)
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	f043 0202 	orr.w	r2, r3, #2
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e02a      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d012      	beq.n	8006fa2 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <HAL_SD_ReadBlocks+0x31c>)
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	f043 0220 	orr.w	r2, r3, #32
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e010      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <HAL_SD_ReadBlocks+0x320>)
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e006      	b.n	8006fc4 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
  }
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3748      	adds	r7, #72	; 0x48
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	1fe00fff 	.word	0x1fe00fff
 8006fd0:	18000f3a 	.word	0x18000f3a

08006fd4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b092      	sub	sp, #72	; 0x48
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fe2:	f7fb f941 	bl	8002268 <HAL_GetTick>
 8006fe6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d107      	bne.n	8007006 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e174      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b01      	cmp	r3, #1
 8007010:	f040 8167 	bne.w	80072e2 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800701a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007024:	429a      	cmp	r2, r3
 8007026:	d907      	bls.n	8007038 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e15b      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2203      	movs	r2, #3
 800703c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2200      	movs	r2, #0
 8007046:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d002      	beq.n	8007056 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	025b      	lsls	r3, r3, #9
 8007054:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800705a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	025b      	lsls	r3, r3, #9
 8007060:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007062:	2390      	movs	r3, #144	; 0x90
 8007064:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007066:	2300      	movs	r3, #0
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800706a:	2300      	movs	r3, #0
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800706e:	2300      	movs	r3, #0
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f107 0218 	add.w	r2, r7, #24
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f003 fbad 	bl	800a7dc <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007090:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d90a      	bls.n	80070ae <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070a4:	4618      	mov	r0, r3
 80070a6:	f003 fc51 	bl	800a94c <SDMMC_CmdWriteMultiBlock>
 80070aa:	6478      	str	r0, [r7, #68]	; 0x44
 80070ac:	e009      	b.n	80070c2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2210      	movs	r2, #16
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070ba:	4618      	mov	r0, r3
 80070bc:	f003 fc23 	bl	800a906 <SDMMC_CmdWriteSingleBlock>
 80070c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80070c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d012      	beq.n	80070ee <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a8a      	ldr	r2, [pc, #552]	; (80072f8 <HAL_SD_WriteBlocks+0x324>)
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e100      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070f2:	e065      	b.n	80071c0 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d040      	beq.n	8007184 <HAL_SD_WriteBlocks+0x1b0>
 8007102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d03d      	beq.n	8007184 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007108:	2300      	movs	r3, #0
 800710a:	643b      	str	r3, [r7, #64]	; 0x40
 800710c:	e037      	b.n	800717e <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	3301      	adds	r3, #1
 8007118:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711c:	3b01      	subs	r3, #1
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	021a      	lsls	r2, r3, #8
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	4313      	orrs	r3, r2
 800712a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	3301      	adds	r3, #1
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007134:	3b01      	subs	r3, #1
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	041a      	lsls	r2, r3, #16
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	3301      	adds	r3, #1
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	3b01      	subs	r3, #1
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	061a      	lsls	r2, r3, #24
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	3301      	adds	r3, #1
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	3b01      	subs	r3, #1
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f107 0214 	add.w	r2, r7, #20
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f003 fab7 	bl	800a6e6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717a:	3301      	adds	r3, #1
 800717c:	643b      	str	r3, [r7, #64]	; 0x40
 800717e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007180:	2b07      	cmp	r3, #7
 8007182:	d9c4      	bls.n	800710e <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007184:	f7fb f870 	bl	8002268 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007190:	429a      	cmp	r2, r3
 8007192:	d902      	bls.n	800719a <HAL_SD_WriteBlocks+0x1c6>
 8007194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007196:	2b00      	cmp	r3, #0
 8007198:	d112      	bne.n	80071c0 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a56      	ldr	r2, [pc, #344]	; (80072f8 <HAL_SD_WriteBlocks+0x324>)
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a8:	431a      	orrs	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e097      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d092      	beq.n	80070f4 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071dc:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d022      	beq.n	8007232 <HAL_SD_WriteBlocks+0x25e>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d91f      	bls.n	8007232 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d01b      	beq.n	8007232 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f003 fbc8 	bl	800a994 <SDMMC_CmdStopTransfer>
 8007204:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007208:	2b00      	cmp	r3, #0
 800720a:	d012      	beq.n	8007232 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a39      	ldr	r2, [pc, #228]	; (80072f8 <HAL_SD_WriteBlocks+0x324>)
 8007212:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721a:	431a      	orrs	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e05e      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d012      	beq.n	8007266 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2c      	ldr	r2, [pc, #176]	; (80072f8 <HAL_SD_WriteBlocks+0x324>)
 8007246:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	f043 0208 	orr.w	r2, r3, #8
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e044      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d012      	beq.n	800729a <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <HAL_SD_WriteBlocks+0x324>)
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	f043 0202 	orr.w	r2, r3, #2
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e02a      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d012      	beq.n	80072ce <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <HAL_SD_WriteBlocks+0x324>)
 80072ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	f043 0210 	orr.w	r2, r3, #16
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e010      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <HAL_SD_WriteBlocks+0x328>)
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e006      	b.n	80072f0 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3748      	adds	r7, #72	; 0x48
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	1fe00fff 	.word	0x1fe00fff
 80072fc:	18000f3a 	.word	0x18000f3a

08007300 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730e:	0f9b      	lsrs	r3, r3, #30
 8007310:	b2da      	uxtb	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731a:	0e9b      	lsrs	r3, r3, #26
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	b2da      	uxtb	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732c:	0e1b      	lsrs	r3, r3, #24
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	b2da      	uxtb	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734a:	0a1b      	lsrs	r3, r3, #8
 800734c:	b2da      	uxtb	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007356:	b2da      	uxtb	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007360:	0d1b      	lsrs	r3, r3, #20
 8007362:	b29a      	uxth	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800736c:	0c1b      	lsrs	r3, r3, #16
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	b2da      	uxtb	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800737e:	0bdb      	lsrs	r3, r3, #15
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007390:	0b9b      	lsrs	r3, r3, #14
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a2:	0b5b      	lsrs	r3, r3, #13
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b4:	0b1b      	lsrs	r3, r3, #12
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2200      	movs	r2, #0
 80073c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d163      	bne.n	8007498 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d4:	009a      	lsls	r2, r3, #2
 80073d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073da:	4013      	ands	r3, r2
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073e0:	0f92      	lsrs	r2, r2, #30
 80073e2:	431a      	orrs	r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ec:	0edb      	lsrs	r3, r3, #27
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073fe:	0e1b      	lsrs	r3, r3, #24
 8007400:	b2db      	uxtb	r3, r3
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	b2da      	uxtb	r2, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007410:	0d5b      	lsrs	r3, r3, #21
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	b2da      	uxtb	r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007422:	0c9b      	lsrs	r3, r3, #18
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	b2da      	uxtb	r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007434:	0bdb      	lsrs	r3, r3, #15
 8007436:	b2db      	uxtb	r3, r3
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	b2da      	uxtb	r2, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	7e1b      	ldrb	r3, [r3, #24]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	3302      	adds	r3, #2
 8007458:	2201      	movs	r2, #1
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007462:	fb03 f202 	mul.w	r2, r3, r2
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	7a1b      	ldrb	r3, [r3, #8]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	2201      	movs	r2, #1
 8007476:	409a      	lsls	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007484:	0a52      	lsrs	r2, r2, #9
 8007486:	fb03 f202 	mul.w	r2, r3, r2
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007494:	659a      	str	r2, [r3, #88]	; 0x58
 8007496:	e031      	b.n	80074fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	2b01      	cmp	r3, #1
 800749e:	d11d      	bne.n	80074dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	431a      	orrs	r2, r3
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	3301      	adds	r3, #1
 80074bc:	029a      	lsls	r2, r3, #10
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	659a      	str	r2, [r3, #88]	; 0x58
 80074da:	e00f      	b.n	80074fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a58      	ldr	r2, [pc, #352]	; (8007644 <HAL_SD_GetCardCSD+0x344>)
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e09d      	b.n	8007638 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007500:	0b9b      	lsrs	r3, r3, #14
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	b2da      	uxtb	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007512:	09db      	lsrs	r3, r3, #7
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	b2da      	uxtb	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752a:	b2da      	uxtb	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	0fdb      	lsrs	r3, r3, #31
 8007536:	b2da      	uxtb	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007540:	0f5b      	lsrs	r3, r3, #29
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 0303 	and.w	r3, r3, #3
 8007548:	b2da      	uxtb	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007552:	0e9b      	lsrs	r3, r3, #26
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007564:	0d9b      	lsrs	r3, r3, #22
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	b2da      	uxtb	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007576:	0d5b      	lsrs	r3, r3, #21
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007592:	0c1b      	lsrs	r3, r3, #16
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a6:	0bdb      	lsrs	r3, r3, #15
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ba:	0b9b      	lsrs	r3, r3, #14
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ce:	0b5b      	lsrs	r3, r3, #13
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e2:	0b1b      	lsrs	r3, r3, #12
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f6:	0a9b      	lsrs	r3, r3, #10
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	b2da      	uxtb	r2, r3
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007626:	b2da      	uxtb	r2, r3
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	1fe00fff 	.word	0x1fe00fff

08007648 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b094      	sub	sp, #80	; 0x50
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007658:	f107 0308 	add.w	r3, r7, #8
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fbd4 	bl	8007e0c <SD_SendSDStatus>
 8007664:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007668:	2b00      	cmp	r3, #0
 800766a:	d011      	beq.n	8007690 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a4f      	ldr	r2, [pc, #316]	; (80077b0 <HAL_SD_GetCardStatus+0x168>)
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800768e:	e070      	b.n	8007772 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	099b      	lsrs	r3, r3, #6
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	b2da      	uxtb	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	0e1b      	lsrs	r3, r3, #24
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	061a      	lsls	r2, r3, #24
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076d6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076e0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	0e1b      	lsrs	r3, r3, #24
 80076e6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	0a1b      	lsrs	r3, r3, #8
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	0d1b      	lsrs	r3, r3, #20
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	b2da      	uxtb	r2, r3
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	0c1b      	lsrs	r3, r3, #16
 8007712:	b29b      	uxth	r3, r3
 8007714:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007718:	b29a      	uxth	r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	b29b      	uxth	r3, r3
 800771e:	b2db      	uxtb	r3, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	b29a      	uxth	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	0a9b      	lsrs	r3, r3, #10
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007734:	b2da      	uxtb	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	0a1b      	lsrs	r3, r3, #8
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	b2da      	uxtb	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	091b      	lsrs	r3, r3, #4
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	b2da      	uxtb	r2, r3
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	b2da      	uxtb	r2, r3
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	0e1b      	lsrs	r3, r3, #24
 800776c:	b2da      	uxtb	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800777a:	4618      	mov	r0, r3
 800777c:	f003 f85a 	bl	800a834 <SDMMC_CmdBlockLength>
 8007780:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00d      	beq.n	80077a4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a08      	ldr	r2, [pc, #32]	; (80077b0 <HAL_SD_GetCardStatus+0x168>)
 800778e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80077a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3750      	adds	r7, #80	; 0x50
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	1fe00fff 	.word	0x1fe00fff

080077b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800780c:	b5b0      	push	{r4, r5, r7, lr}
 800780e:	b090      	sub	sp, #64	; 0x40
 8007810:	af04      	add	r7, sp, #16
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2203      	movs	r2, #3
 8007820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007828:	2b03      	cmp	r3, #3
 800782a:	d02e      	beq.n	800788a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007832:	d106      	bne.n	8007842 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
 8007840:	e029      	b.n	8007896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007848:	d10a      	bne.n	8007860 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fbd6 	bl	8007ffc <SD_WideBus_Enable>
 8007850:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
 800785e:	e01a      	b.n	8007896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fc13 	bl	8008092 <SD_WideBus_Disable>
 800786c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	639a      	str	r2, [r3, #56]	; 0x38
 800787a:	e00c      	b.n	8007896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38
 8007888:	e005      	b.n	8007896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a60      	ldr	r2, [pc, #384]	; (8007a24 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078ac:	e097      	b.n	80079de <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80078ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80078b2:	f7fd feb9 	bl	8005628 <HAL_RCCEx_GetPeriphCLKFreq>
 80078b6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 8086 	beq.w	80079cc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	695a      	ldr	r2, [r3, #20]
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	4952      	ldr	r1, [pc, #328]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80078de:	fba1 1303 	umull	r1, r3, r1, r3
 80078e2:	0e1b      	lsrs	r3, r3, #24
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d303      	bcc.n	80078f0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	61fb      	str	r3, [r7, #28]
 80078ee:	e05a      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f8:	d103      	bne.n	8007902 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e051      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790a:	d126      	bne.n	800795a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10e      	bne.n	8007932 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	4a45      	ldr	r2, [pc, #276]	; (8007a2c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d906      	bls.n	800792a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	4a42      	ldr	r2, [pc, #264]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007920:	fba2 2303 	umull	r2, r3, r2, r3
 8007924:	0e5b      	lsrs	r3, r3, #25
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	e03d      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	e039      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793a:	fbb2 f3f3 	udiv	r3, r2, r3
 800793e:	4a3b      	ldr	r2, [pc, #236]	; (8007a2c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d906      	bls.n	8007952 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	4a38      	ldr	r2, [pc, #224]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	0e5b      	lsrs	r3, r3, #25
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e029      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	e025      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10e      	bne.n	8007980 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	4a32      	ldr	r2, [pc, #200]	; (8007a30 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d906      	bls.n	8007978 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	4a2e      	ldr	r2, [pc, #184]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800796e:	fba2 2303 	umull	r2, r3, r2, r3
 8007972:	0e1b      	lsrs	r3, r3, #24
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	e016      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	e012      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	4a28      	ldr	r2, [pc, #160]	; (8007a30 <HAL_SD_ConfigWideBusOperation+0x224>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d906      	bls.n	80079a0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	4a24      	ldr	r2, [pc, #144]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	0e1b      	lsrs	r3, r3, #24
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	e002      	b.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681d      	ldr	r5, [r3, #0]
 80079b0:	466c      	mov	r4, sp
 80079b2:	f107 0318 	add.w	r3, r7, #24
 80079b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079be:	f107 030c 	add.w	r3, r7, #12
 80079c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079c4:	4628      	mov	r0, r5
 80079c6:	f002 fe57 	bl	800a678 <SDMMC_Init>
 80079ca:	e008      	b.n	80079de <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079e6:	4618      	mov	r0, r3
 80079e8:	f002 ff24 	bl	800a834 <SDMMC_CmdBlockLength>
 80079ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00c      	beq.n	8007a0e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <HAL_SD_ConfigWideBusOperation+0x218>)
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3730      	adds	r7, #48	; 0x30
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bdb0      	pop	{r4, r5, r7, pc}
 8007a22:	bf00      	nop
 8007a24:	1fe00fff 	.word	0x1fe00fff
 8007a28:	55e63b89 	.word	0x55e63b89
 8007a2c:	02faf080 	.word	0x02faf080
 8007a30:	017d7840 	.word	0x017d7840

08007a34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a40:	f107 030c 	add.w	r3, r7, #12
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fab0 	bl	8007fac <SD_SendStatus>
 8007a4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0a5b      	lsrs	r3, r3, #9
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007a6a:	693b      	ldr	r3, [r7, #16]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a74:	b5b0      	push	{r4, r5, r7, lr}
 8007a76:	b090      	sub	sp, #64	; 0x40
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f002 fe51 	bl	800a72c <SDMMC_GetPowerState>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007a94:	e0a9      	b.n	8007bea <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d02e      	beq.n	8007afc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f003 f896 	bl	800abd4 <SDMMC_CmdSendCID>
 8007aa8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <SD_InitCard+0x40>
    {
      return errorstate;
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	e09a      	b.n	8007bea <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f002 fe7b 	bl	800a7b6 <SDMMC_GetResponse>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2104      	movs	r1, #4
 8007acc:	4618      	mov	r0, r3
 8007ace:	f002 fe72 	bl	800a7b6 <SDMMC_GetResponse>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2108      	movs	r1, #8
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f002 fe69 	bl	800a7b6 <SDMMC_GetResponse>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	210c      	movs	r1, #12
 8007af0:	4618      	mov	r0, r3
 8007af2:	f002 fe60 	bl	800a7b6 <SDMMC_GetResponse>
 8007af6:	4602      	mov	r2, r0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d00d      	beq.n	8007b20 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f107 020e 	add.w	r2, r7, #14
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f003 f89f 	bl	800ac52 <SDMMC_CmdSetRelAdd>
 8007b14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <SD_InitCard+0xac>
    {
      return errorstate;
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	e064      	b.n	8007bea <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d036      	beq.n	8007b96 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f003 f868 	bl	800ac12 <SDMMC_CmdSendCSD>
 8007b42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <SD_InitCard+0xda>
    {
      return errorstate;
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4c:	e04d      	b.n	8007bea <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f002 fe2e 	bl	800a7b6 <SDMMC_GetResponse>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2104      	movs	r1, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f002 fe25 	bl	800a7b6 <SDMMC_GetResponse>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2108      	movs	r1, #8
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f002 fe1c 	bl	800a7b6 <SDMMC_GetResponse>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	210c      	movs	r1, #12
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f002 fe13 	bl	800a7b6 <SDMMC_GetResponse>
 8007b90:	4602      	mov	r2, r0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2104      	movs	r1, #4
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f002 fe0a 	bl	800a7b6 <SDMMC_GetResponse>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	0d1a      	lsrs	r2, r3, #20
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007baa:	f107 0310 	add.w	r3, r7, #16
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fba5 	bl	8007300 <HAL_SD_GetCardCSD>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bc0:	e013      	b.n	8007bea <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6819      	ldr	r1, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	2200      	movs	r2, #0
 8007bce:	461c      	mov	r4, r3
 8007bd0:	4615      	mov	r5, r2
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	f002 ff12 	bl	800aa00 <SDMMC_CmdSelDesel>
 8007bdc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <SD_InitCard+0x174>
  {
    return errorstate;
 8007be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be6:	e000      	b.n	8007bea <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3740      	adds	r7, #64	; 0x40
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007bf4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	2300      	movs	r3, #0
 8007c06:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007c08:	f7fa fb2e 	bl	8002268 <HAL_GetTick>
 8007c0c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 ff18 	bl	800aa48 <SDMMC_CmdGoIdleState>
 8007c18:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <SD_PowerON+0x30>
  {
    return errorstate;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	e0ed      	b.n	8007e00 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f002 ff2b 	bl	800aa84 <SDMMC_CmdOperCond>
 8007c2e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f002 ff01 	bl	800aa48 <SDMMC_CmdGoIdleState>
 8007c46:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <SD_PowerON+0x64>
    {
      return errorstate;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	e0d6      	b.n	8007e00 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d137      	bne.n	8007cd0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2100      	movs	r1, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f002 ff2c 	bl	800aac4 <SDMMC_CmdAppCommand>
 8007c6c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d02d      	beq.n	8007cd0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c78:	e0c2      	b.n	8007e00 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 ff1f 	bl	800aac4 <SDMMC_CmdAppCommand>
 8007c86:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <SD_PowerON+0x9e>
    {
      return errorstate;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	e0b6      	b.n	8007e00 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	495c      	ldr	r1, [pc, #368]	; (8007e08 <SD_PowerON+0x214>)
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f002 ff36 	bl	800ab0a <SDMMC_CmdAppOperCommand>
 8007c9e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ca6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007caa:	e0a9      	b.n	8007e00 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f002 fd7f 	bl	800a7b6 <SDMMC_GetResponse>
 8007cb8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	0fdb      	lsrs	r3, r3, #31
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <SD_PowerON+0xd2>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <SD_PowerON+0xd4>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61bb      	str	r3, [r7, #24]

    count++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d802      	bhi.n	8007ce0 <SD_PowerON+0xec>
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0cc      	beq.n	8007c7a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d902      	bls.n	8007cf0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007cea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cee:	e087      	b.n	8007e00 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d07e      	beq.n	8007df8 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d17a      	bne.n	8007dfe <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d075      	beq.n	8007dfe <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d18:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0208 	orr.w	r2, r2, #8
 8007d28:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f002 fff6 	bl	800ad20 <SDMMC_CmdVoltageSwitch>
 8007d34:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00c      	beq.n	8007d56 <SD_PowerON+0x162>
        {
          return errorstate;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	e05f      	b.n	8007e00 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d40:	f7fa fa92 	bl	8002268 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d4e:	d102      	bne.n	8007d56 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007d50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d54:	e054      	b.n	8007e00 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d64:	d1ec      	bne.n	8007d40 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d7e:	d002      	beq.n	8007d86 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007d80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d84:	e03c      	b.n	8007e00 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8007d86:	2001      	movs	r0, #1
 8007d88:	f000 fa9e 	bl	80082c8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0204 	orr.w	r2, r2, #4
 8007d9a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007d9c:	e00a      	b.n	8007db4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d9e:	f7fa fa63 	bl	8002268 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dac:	d102      	bne.n	8007db4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007dae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007db2:	e025      	b.n	8007e00 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dc2:	d1ec      	bne.n	8007d9e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ddc:	d102      	bne.n	8007de4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de2:	e00d      	b.n	8007e00 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2213      	movs	r2, #19
 8007dea:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38
 8007df6:	e002      	b.n	8007dfe <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	c1100000 	.word	0xc1100000

08007e0c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	; 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e16:	f7fa fa27 	bl	8002268 <HAL_GetTick>
 8007e1a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f002 fcc5 	bl	800a7b6 <SDMMC_GetResponse>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e36:	d102      	bne.n	8007e3e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e3c:	e0b0      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2140      	movs	r1, #64	; 0x40
 8007e44:	4618      	mov	r0, r3
 8007e46:	f002 fcf5 	bl	800a834 <SDMMC_CmdBlockLength>
 8007e4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	e0a0      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	041b      	lsls	r3, r3, #16
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f002 fe2a 	bl	800aac4 <SDMMC_CmdAppCommand>
 8007e70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	e08d      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e88:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007e8a:	2340      	movs	r3, #64	; 0x40
 8007e8c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007e8e:	2360      	movs	r3, #96	; 0x60
 8007e90:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e92:	2302      	movs	r3, #2
 8007e94:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f107 0208 	add.w	r2, r7, #8
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f002 fc97 	bl	800a7dc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f002 ff12 	bl	800acdc <SDMMC_CmdStatusRegister>
 8007eb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d02b      	beq.n	8007f18 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	e069      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d013      	beq.n	8007f02 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ede:	e00d      	b.n	8007efc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f002 fbf1 	bl	800a6cc <SDMMC_ReadFIFO>
 8007eea:	4602      	mov	r2, r0
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	601a      	str	r2, [r3, #0]
        pData++;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	3301      	adds	r3, #1
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	2b07      	cmp	r3, #7
 8007f00:	d9ee      	bls.n	8007ee0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f02:	f7fa f9b1 	bl	8002268 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f10:	d102      	bne.n	8007f18 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f16:	e043      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0d2      	beq.n	8007ecc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2c:	f003 0308 	and.w	r3, r3, #8
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f34:	2308      	movs	r3, #8
 8007f36:	e033      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f46:	2302      	movs	r3, #2
 8007f48:	e02a      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d017      	beq.n	8007f88 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007f58:	2320      	movs	r3, #32
 8007f5a:	e021      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 fbb3 	bl	800a6cc <SDMMC_ReadFIFO>
 8007f66:	4602      	mov	r2, r0
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	601a      	str	r2, [r3, #0]
    pData++;
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	3304      	adds	r3, #4
 8007f70:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f72:	f7fa f979 	bl	8002268 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f80:	d102      	bne.n	8007f88 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f86:	e00b      	b.n	8007fa0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e2      	bne.n	8007f5c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a03      	ldr	r2, [pc, #12]	; (8007fa8 <SD_SendSDStatus+0x19c>)
 8007f9c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3730      	adds	r7, #48	; 0x30
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	18000f3a 	.word	0x18000f3a

08007fac <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fc0:	e018      	b.n	8007ff4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f002 fe61 	bl	800ac96 <SDMMC_CmdSendStatus>
 8007fd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	e009      	b.n	8007ff4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f002 fbe5 	bl	800a7b6 <SDMMC_GetResponse>
 8007fec:	4602      	mov	r2, r0
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f002 fbcf 	bl	800a7b6 <SDMMC_GetResponse>
 8008018:	4603      	mov	r3, r0
 800801a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008022:	d102      	bne.n	800802a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008028:	e02f      	b.n	800808a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f879 	bl	8008128 <SD_FindSCR>
 8008036:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	e023      	b.n	800808a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01c      	beq.n	8008086 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008054:	041b      	lsls	r3, r3, #16
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f002 fd33 	bl	800aac4 <SDMMC_CmdAppCommand>
 800805e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	e00f      	b.n	800808a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2102      	movs	r1, #2
 8008070:	4618      	mov	r0, r3
 8008072:	f002 fd6a 	bl	800ab4a <SDMMC_CmdBusWidth>
 8008076:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	e003      	b.n	800808a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008082:	2300      	movs	r3, #0
 8008084:	e001      	b.n	800808a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008086:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	2300      	movs	r3, #0
 80080a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2100      	movs	r1, #0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 fb84 	bl	800a7b6 <SDMMC_GetResponse>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b8:	d102      	bne.n	80080c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080be:	e02f      	b.n	8008120 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080c0:	f107 030c 	add.w	r3, r7, #12
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f82e 	bl	8008128 <SD_FindSCR>
 80080cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	e023      	b.n	8008120 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d01c      	beq.n	800811c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ea:	041b      	lsls	r3, r3, #16
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f002 fce8 	bl	800aac4 <SDMMC_CmdAppCommand>
 80080f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	e00f      	b.n	8008120 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f002 fd1f 	bl	800ab4a <SDMMC_CmdBusWidth>
 800810c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	e003      	b.n	8008120 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008118:	2300      	movs	r3, #0
 800811a:	e001      	b.n	8008120 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800811c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08e      	sub	sp, #56	; 0x38
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008132:	f7fa f899 	bl	8002268 <HAL_GetTick>
 8008136:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800813c:	2300      	movs	r3, #0
 800813e:	60bb      	str	r3, [r7, #8]
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2108      	movs	r1, #8
 800814e:	4618      	mov	r0, r3
 8008150:	f002 fb70 	bl	800a834 <SDMMC_CmdBlockLength>
 8008154:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <SD_FindSCR+0x38>
  {
    return errorstate;
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	e0ad      	b.n	80082bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f002 fca9 	bl	800aac4 <SDMMC_CmdAppCommand>
 8008172:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <SD_FindSCR+0x56>
  {
    return errorstate;
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	e09e      	b.n	80082bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008182:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008184:	2308      	movs	r3, #8
 8008186:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008188:	2330      	movs	r3, #48	; 0x30
 800818a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800818c:	2302      	movs	r3, #2
 800818e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008190:	2300      	movs	r3, #0
 8008192:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008194:	2301      	movs	r3, #1
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f107 0210 	add.w	r2, r7, #16
 80081a0:	4611      	mov	r1, r2
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 fb1a 	bl	800a7dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f002 fcef 	bl	800ab90 <SDMMC_CmdSendSCR>
 80081b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d027      	beq.n	800820a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	e07e      	b.n	80082bc <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d113      	bne.n	80081f4 <SD_FindSCR+0xcc>
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d110      	bne.n	80081f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f002 fa78 	bl	800a6cc <SDMMC_ReadFIFO>
 80081dc:	4603      	mov	r3, r0
 80081de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f002 fa71 	bl	800a6cc <SDMMC_ReadFIFO>
 80081ea:	4603      	mov	r3, r0
 80081ec:	60fb      	str	r3, [r7, #12]
      index++;
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	3301      	adds	r3, #1
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081f4:	f7fa f838 	bl	8002268 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008202:	d102      	bne.n	800820a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008208:	e058      	b.n	80082bc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008210:	f240 532a 	movw	r3, #1322	; 0x52a
 8008214:	4013      	ands	r3, r2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0d1      	beq.n	80081be <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2208      	movs	r2, #8
 800822e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008230:	2308      	movs	r3, #8
 8008232:	e043      	b.n	80082bc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2202      	movs	r2, #2
 8008248:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800824a:	2302      	movs	r3, #2
 800824c:	e036      	b.n	80082bc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2220      	movs	r2, #32
 8008262:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008264:	2320      	movs	r3, #32
 8008266:	e029      	b.n	80082bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <SD_FindSCR+0x19c>)
 800826e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	061a      	lsls	r2, r3, #24
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	021b      	lsls	r3, r3, #8
 8008278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800827c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	0a1b      	lsrs	r3, r3, #8
 8008282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008286:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0e1b      	lsrs	r3, r3, #24
 800828c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	601a      	str	r2, [r3, #0]
    scr++;
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	3304      	adds	r3, #4
 8008296:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	061a      	lsls	r2, r3, #24
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	0a1b      	lsrs	r3, r3, #8
 80082aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	0e1b      	lsrs	r3, r3, #24
 80082b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3738      	adds	r7, #56	; 0x38
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	18000f3a 	.word	0x18000f3a

080082c8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e095      	b.n	800841c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008300:	d009      	beq.n	8008316 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	61da      	str	r2, [r3, #28]
 8008308:	e005      	b.n	8008316 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7f9 fcd9 	bl	8001ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008356:	d902      	bls.n	800835e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e002      	b.n	8008364 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800835e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008362:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800836c:	d007      	beq.n	800837e <HAL_SPI_Init+0xa0>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008376:	d002      	beq.n	800837e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	ea42 0103 	orr.w	r1, r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	0c1b      	lsrs	r3, r3, #16
 80083da:	f003 0204 	and.w	r2, r3, #4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	431a      	orrs	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ec:	f003 0308 	and.w	r3, r3, #8
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083fa:	ea42 0103 	orr.w	r1, r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e049      	b.n	80084ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7f9 fc8e 	bl	8001d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	4619      	mov	r1, r3
 8008462:	4610      	mov	r0, r2
 8008464:	f000 fa62 	bl	800892c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e049      	b.n	8008578 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f841 	bl	8008580 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3304      	adds	r3, #4
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f000 fa0b 	bl	800892c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d122      	bne.n	80085f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d11b      	bne.n	80085f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f06f 0202 	mvn.w	r2, #2
 80085c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f98a 	bl	80088f0 <HAL_TIM_IC_CaptureCallback>
 80085dc:	e005      	b.n	80085ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f97c 	bl	80088dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f98d 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d122      	bne.n	8008644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b04      	cmp	r3, #4
 800860a:	d11b      	bne.n	8008644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f06f 0204 	mvn.w	r2, #4
 8008614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2202      	movs	r2, #2
 800861a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f960 	bl	80088f0 <HAL_TIM_IC_CaptureCallback>
 8008630:	e005      	b.n	800863e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f952 	bl	80088dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f963 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0308 	and.w	r3, r3, #8
 800864e:	2b08      	cmp	r3, #8
 8008650:	d122      	bne.n	8008698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b08      	cmp	r3, #8
 800865e:	d11b      	bne.n	8008698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0208 	mvn.w	r2, #8
 8008668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2204      	movs	r2, #4
 800866e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f936 	bl	80088f0 <HAL_TIM_IC_CaptureCallback>
 8008684:	e005      	b.n	8008692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f928 	bl	80088dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f939 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b10      	cmp	r3, #16
 80086a4:	d122      	bne.n	80086ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f003 0310 	and.w	r3, r3, #16
 80086b0:	2b10      	cmp	r3, #16
 80086b2:	d11b      	bne.n	80086ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f06f 0210 	mvn.w	r2, #16
 80086bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2208      	movs	r2, #8
 80086c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f90c 	bl	80088f0 <HAL_TIM_IC_CaptureCallback>
 80086d8:	e005      	b.n	80086e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f8fe 	bl	80088dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f90f 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10e      	bne.n	8008718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b01      	cmp	r3, #1
 8008706:	d107      	bne.n	8008718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0201 	mvn.w	r2, #1
 8008710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f8d8 	bl	80088c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008722:	2b80      	cmp	r3, #128	; 0x80
 8008724:	d10e      	bne.n	8008744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008730:	2b80      	cmp	r3, #128	; 0x80
 8008732:	d107      	bne.n	8008744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fcec 	bl	800911c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008752:	d10e      	bne.n	8008772 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875e:	2b80      	cmp	r3, #128	; 0x80
 8008760:	d107      	bne.n	8008772 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800876a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fcdf 	bl	8009130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d10e      	bne.n	800879e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d107      	bne.n	800879e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8bd 	bl	8008918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b20      	cmp	r3, #32
 80087aa:	d10e      	bne.n	80087ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d107      	bne.n	80087ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f06f 0220 	mvn.w	r2, #32
 80087c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fc9f 	bl	8009108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80087ee:	2302      	movs	r3, #2
 80087f0:	e066      	b.n	80088c0 <HAL_TIM_OC_ConfigChannel+0xec>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b14      	cmp	r3, #20
 80087fe:	d857      	bhi.n	80088b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080088b1 	.word	0x080088b1
 8008810:	080088b1 	.word	0x080088b1
 8008814:	080088b1 	.word	0x080088b1
 8008818:	0800886b 	.word	0x0800886b
 800881c:	080088b1 	.word	0x080088b1
 8008820:	080088b1 	.word	0x080088b1
 8008824:	080088b1 	.word	0x080088b1
 8008828:	08008879 	.word	0x08008879
 800882c:	080088b1 	.word	0x080088b1
 8008830:	080088b1 	.word	0x080088b1
 8008834:	080088b1 	.word	0x080088b1
 8008838:	08008887 	.word	0x08008887
 800883c:	080088b1 	.word	0x080088b1
 8008840:	080088b1 	.word	0x080088b1
 8008844:	080088b1 	.word	0x080088b1
 8008848:	08008895 	.word	0x08008895
 800884c:	080088b1 	.word	0x080088b1
 8008850:	080088b1 	.word	0x080088b1
 8008854:	080088b1 	.word	0x080088b1
 8008858:	080088a3 	.word	0x080088a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f8fc 	bl	8008a60 <TIM_OC1_SetConfig>
      break;
 8008868:	e025      	b.n	80088b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	4618      	mov	r0, r3
 8008872:	f000 f985 	bl	8008b80 <TIM_OC2_SetConfig>
      break;
 8008876:	e01e      	b.n	80088b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fa08 	bl	8008c94 <TIM_OC3_SetConfig>
      break;
 8008884:	e017      	b.n	80088b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fa89 	bl	8008da4 <TIM_OC4_SetConfig>
      break;
 8008892:	e010      	b.n	80088b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 faec 	bl	8008e78 <TIM_OC5_SetConfig>
      break;
 80088a0:	e009      	b.n	80088b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fb49 	bl	8008f40 <TIM_OC6_SetConfig>
      break;
 80088ae:	e002      	b.n	80088b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
      break;
 80088b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a40      	ldr	r2, [pc, #256]	; (8008a40 <TIM_Base_SetConfig+0x114>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800894a:	d00f      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a3d      	ldr	r2, [pc, #244]	; (8008a44 <TIM_Base_SetConfig+0x118>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00b      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a3c      	ldr	r2, [pc, #240]	; (8008a48 <TIM_Base_SetConfig+0x11c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d007      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a3b      	ldr	r2, [pc, #236]	; (8008a4c <TIM_Base_SetConfig+0x120>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d003      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a3a      	ldr	r2, [pc, #232]	; (8008a50 <TIM_Base_SetConfig+0x124>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d108      	bne.n	800897e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a2f      	ldr	r2, [pc, #188]	; (8008a40 <TIM_Base_SetConfig+0x114>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d01f      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898c:	d01b      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a2c      	ldr	r2, [pc, #176]	; (8008a44 <TIM_Base_SetConfig+0x118>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d017      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a2b      	ldr	r2, [pc, #172]	; (8008a48 <TIM_Base_SetConfig+0x11c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d013      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a2a      	ldr	r2, [pc, #168]	; (8008a4c <TIM_Base_SetConfig+0x120>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00f      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a29      	ldr	r2, [pc, #164]	; (8008a50 <TIM_Base_SetConfig+0x124>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00b      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a28      	ldr	r2, [pc, #160]	; (8008a54 <TIM_Base_SetConfig+0x128>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d007      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a27      	ldr	r2, [pc, #156]	; (8008a58 <TIM_Base_SetConfig+0x12c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d003      	beq.n	80089c6 <TIM_Base_SetConfig+0x9a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a26      	ldr	r2, [pc, #152]	; (8008a5c <TIM_Base_SetConfig+0x130>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d108      	bne.n	80089d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a10      	ldr	r2, [pc, #64]	; (8008a40 <TIM_Base_SetConfig+0x114>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00f      	beq.n	8008a24 <TIM_Base_SetConfig+0xf8>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a12      	ldr	r2, [pc, #72]	; (8008a50 <TIM_Base_SetConfig+0x124>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d00b      	beq.n	8008a24 <TIM_Base_SetConfig+0xf8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a11      	ldr	r2, [pc, #68]	; (8008a54 <TIM_Base_SetConfig+0x128>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d007      	beq.n	8008a24 <TIM_Base_SetConfig+0xf8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a10      	ldr	r2, [pc, #64]	; (8008a58 <TIM_Base_SetConfig+0x12c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_Base_SetConfig+0xf8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a0f      	ldr	r2, [pc, #60]	; (8008a5c <TIM_Base_SetConfig+0x130>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d103      	bne.n	8008a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	615a      	str	r2, [r3, #20]
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40012c00 	.word	0x40012c00
 8008a44:	40000400 	.word	0x40000400
 8008a48:	40000800 	.word	0x40000800
 8008a4c:	40000c00 	.word	0x40000c00
 8008a50:	40013400 	.word	0x40013400
 8008a54:	40014000 	.word	0x40014000
 8008a58:	40014400 	.word	0x40014400
 8008a5c:	40014800 	.word	0x40014800

08008a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f023 0201 	bic.w	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0303 	bic.w	r3, r3, #3
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f023 0302 	bic.w	r3, r3, #2
 8008aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a2c      	ldr	r2, [pc, #176]	; (8008b6c <TIM_OC1_SetConfig+0x10c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <TIM_OC1_SetConfig+0x80>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a2b      	ldr	r2, [pc, #172]	; (8008b70 <TIM_OC1_SetConfig+0x110>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_OC1_SetConfig+0x80>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a2a      	ldr	r2, [pc, #168]	; (8008b74 <TIM_OC1_SetConfig+0x114>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_OC1_SetConfig+0x80>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a29      	ldr	r2, [pc, #164]	; (8008b78 <TIM_OC1_SetConfig+0x118>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC1_SetConfig+0x80>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a28      	ldr	r2, [pc, #160]	; (8008b7c <TIM_OC1_SetConfig+0x11c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10c      	bne.n	8008afa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f023 0308 	bic.w	r3, r3, #8
 8008ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f023 0304 	bic.w	r3, r3, #4
 8008af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a1b      	ldr	r2, [pc, #108]	; (8008b6c <TIM_OC1_SetConfig+0x10c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00f      	beq.n	8008b22 <TIM_OC1_SetConfig+0xc2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a1a      	ldr	r2, [pc, #104]	; (8008b70 <TIM_OC1_SetConfig+0x110>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d00b      	beq.n	8008b22 <TIM_OC1_SetConfig+0xc2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a19      	ldr	r2, [pc, #100]	; (8008b74 <TIM_OC1_SetConfig+0x114>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d007      	beq.n	8008b22 <TIM_OC1_SetConfig+0xc2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a18      	ldr	r2, [pc, #96]	; (8008b78 <TIM_OC1_SetConfig+0x118>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d003      	beq.n	8008b22 <TIM_OC1_SetConfig+0xc2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <TIM_OC1_SetConfig+0x11c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d111      	bne.n	8008b46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	621a      	str	r2, [r3, #32]
}
 8008b60:	bf00      	nop
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	40013400 	.word	0x40013400
 8008b74:	40014000 	.word	0x40014000
 8008b78:	40014400 	.word	0x40014400
 8008b7c:	40014800 	.word	0x40014800

08008b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	f023 0210 	bic.w	r2, r3, #16
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f023 0320 	bic.w	r3, r3, #32
 8008bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a28      	ldr	r2, [pc, #160]	; (8008c80 <TIM_OC2_SetConfig+0x100>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d003      	beq.n	8008bec <TIM_OC2_SetConfig+0x6c>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a27      	ldr	r2, [pc, #156]	; (8008c84 <TIM_OC2_SetConfig+0x104>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d10d      	bne.n	8008c08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <TIM_OC2_SetConfig+0x100>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00f      	beq.n	8008c30 <TIM_OC2_SetConfig+0xb0>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <TIM_OC2_SetConfig+0x104>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <TIM_OC2_SetConfig+0xb0>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a1b      	ldr	r2, [pc, #108]	; (8008c88 <TIM_OC2_SetConfig+0x108>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_OC2_SetConfig+0xb0>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <TIM_OC2_SetConfig+0x10c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_OC2_SetConfig+0xb0>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a19      	ldr	r2, [pc, #100]	; (8008c90 <TIM_OC2_SetConfig+0x110>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d113      	bne.n	8008c58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	621a      	str	r2, [r3, #32]
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40012c00 	.word	0x40012c00
 8008c84:	40013400 	.word	0x40013400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800

08008c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a27      	ldr	r2, [pc, #156]	; (8008d90 <TIM_OC3_SetConfig+0xfc>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d003      	beq.n	8008cfe <TIM_OC3_SetConfig+0x6a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a26      	ldr	r2, [pc, #152]	; (8008d94 <TIM_OC3_SetConfig+0x100>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d10d      	bne.n	8008d1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a1c      	ldr	r2, [pc, #112]	; (8008d90 <TIM_OC3_SetConfig+0xfc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00f      	beq.n	8008d42 <TIM_OC3_SetConfig+0xae>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a1b      	ldr	r2, [pc, #108]	; (8008d94 <TIM_OC3_SetConfig+0x100>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00b      	beq.n	8008d42 <TIM_OC3_SetConfig+0xae>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a1a      	ldr	r2, [pc, #104]	; (8008d98 <TIM_OC3_SetConfig+0x104>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <TIM_OC3_SetConfig+0xae>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a19      	ldr	r2, [pc, #100]	; (8008d9c <TIM_OC3_SetConfig+0x108>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d003      	beq.n	8008d42 <TIM_OC3_SetConfig+0xae>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <TIM_OC3_SetConfig+0x10c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d113      	bne.n	8008d6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	621a      	str	r2, [r3, #32]
}
 8008d84:	bf00      	nop
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	40012c00 	.word	0x40012c00
 8008d94:	40013400 	.word	0x40013400
 8008d98:	40014000 	.word	0x40014000
 8008d9c:	40014400 	.word	0x40014400
 8008da0:	40014800 	.word	0x40014800

08008da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	031b      	lsls	r3, r3, #12
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <TIM_OC4_SetConfig+0xc0>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00f      	beq.n	8008e28 <TIM_OC4_SetConfig+0x84>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a17      	ldr	r2, [pc, #92]	; (8008e68 <TIM_OC4_SetConfig+0xc4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00b      	beq.n	8008e28 <TIM_OC4_SetConfig+0x84>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a16      	ldr	r2, [pc, #88]	; (8008e6c <TIM_OC4_SetConfig+0xc8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d007      	beq.n	8008e28 <TIM_OC4_SetConfig+0x84>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <TIM_OC4_SetConfig+0xcc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d003      	beq.n	8008e28 <TIM_OC4_SetConfig+0x84>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a14      	ldr	r2, [pc, #80]	; (8008e74 <TIM_OC4_SetConfig+0xd0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d109      	bne.n	8008e3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	019b      	lsls	r3, r3, #6
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	621a      	str	r2, [r3, #32]
}
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40012c00 	.word	0x40012c00
 8008e68:	40013400 	.word	0x40013400
 8008e6c:	40014000 	.word	0x40014000
 8008e70:	40014400 	.word	0x40014400
 8008e74:	40014800 	.word	0x40014800

08008e78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a17      	ldr	r2, [pc, #92]	; (8008f2c <TIM_OC5_SetConfig+0xb4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00f      	beq.n	8008ef2 <TIM_OC5_SetConfig+0x7a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a16      	ldr	r2, [pc, #88]	; (8008f30 <TIM_OC5_SetConfig+0xb8>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d00b      	beq.n	8008ef2 <TIM_OC5_SetConfig+0x7a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a15      	ldr	r2, [pc, #84]	; (8008f34 <TIM_OC5_SetConfig+0xbc>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d007      	beq.n	8008ef2 <TIM_OC5_SetConfig+0x7a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a14      	ldr	r2, [pc, #80]	; (8008f38 <TIM_OC5_SetConfig+0xc0>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d003      	beq.n	8008ef2 <TIM_OC5_SetConfig+0x7a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <TIM_OC5_SetConfig+0xc4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d109      	bne.n	8008f06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	021b      	lsls	r3, r3, #8
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	621a      	str	r2, [r3, #32]
}
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	40012c00 	.word	0x40012c00
 8008f30:	40013400 	.word	0x40013400
 8008f34:	40014000 	.word	0x40014000
 8008f38:	40014400 	.word	0x40014400
 8008f3c:	40014800 	.word	0x40014800

08008f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	051b      	lsls	r3, r3, #20
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a18      	ldr	r2, [pc, #96]	; (8008ff8 <TIM_OC6_SetConfig+0xb8>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d00f      	beq.n	8008fbc <TIM_OC6_SetConfig+0x7c>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a17      	ldr	r2, [pc, #92]	; (8008ffc <TIM_OC6_SetConfig+0xbc>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00b      	beq.n	8008fbc <TIM_OC6_SetConfig+0x7c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a16      	ldr	r2, [pc, #88]	; (8009000 <TIM_OC6_SetConfig+0xc0>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d007      	beq.n	8008fbc <TIM_OC6_SetConfig+0x7c>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a15      	ldr	r2, [pc, #84]	; (8009004 <TIM_OC6_SetConfig+0xc4>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d003      	beq.n	8008fbc <TIM_OC6_SetConfig+0x7c>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a14      	ldr	r2, [pc, #80]	; (8009008 <TIM_OC6_SetConfig+0xc8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d109      	bne.n	8008fd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	029b      	lsls	r3, r3, #10
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	621a      	str	r2, [r3, #32]
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	40012c00 	.word	0x40012c00
 8008ffc:	40013400 	.word	0x40013400
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800

0800900c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009024:	2302      	movs	r3, #2
 8009026:	e065      	b.n	80090f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	041b      	lsls	r3, r3, #16
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a16      	ldr	r2, [pc, #88]	; (8009100 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d004      	beq.n	80090b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a14      	ldr	r2, [pc, #80]	; (8009104 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d115      	bne.n	80090e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	051b      	lsls	r3, r3, #20
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	40012c00 	.word	0x40012c00
 8009104:	40013400 	.word	0x40013400

08009108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e042      	b.n	80091dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7f8 fe1f 	bl	8001dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2224      	movs	r2, #36	; 0x24
 8009172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fbfc 	bl	8009984 <UART_SetConfig>
 800918c:	4603      	mov	r3, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e022      	b.n	80091dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 feec 	bl	8009f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0201 	orr.w	r2, r2, #1
 80091d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 ff73 	bl	800a0c0 <UART_CheckIdleState>
 80091da:	4603      	mov	r3, r0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08a      	sub	sp, #40	; 0x28
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	f040 8084 	bne.w	8009308 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <HAL_UART_Transmit+0x28>
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e07c      	b.n	800930a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_UART_Transmit+0x3a>
 800921a:	2302      	movs	r3, #2
 800921c:	e075      	b.n	800930a <HAL_UART_Transmit+0x126>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2221      	movs	r2, #33	; 0x21
 8009232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009236:	f7f9 f817 	bl	8002268 <HAL_GetTick>
 800923a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	88fa      	ldrh	r2, [r7, #6]
 8009240:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	88fa      	ldrh	r2, [r7, #6]
 8009248:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009254:	d108      	bne.n	8009268 <HAL_UART_Transmit+0x84>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d104      	bne.n	8009268 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e003      	b.n	8009270 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009278:	e02d      	b.n	80092d6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2200      	movs	r2, #0
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 ff66 	bl	800a156 <UART_WaitOnFlagUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e03a      	b.n	800930a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10b      	bne.n	80092b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092a6:	b292      	uxth	r2, r2
 80092a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	3302      	adds	r3, #2
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	e008      	b.n	80092c4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	781a      	ldrb	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	b292      	uxth	r2, r2
 80092bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	3301      	adds	r3, #1
 80092c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1cb      	bne.n	800927a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2200      	movs	r2, #0
 80092ea:	2140      	movs	r1, #64	; 0x40
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 ff32 	bl	800a156 <UART_WaitOnFlagUntilTimeout>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e006      	b.n	800930a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	e000      	b.n	800930a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009308:	2302      	movs	r3, #2
  }
}
 800930a:	4618      	mov	r0, r3
 800930c:	3720      	adds	r7, #32
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b0ba      	sub	sp, #232	; 0xe8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800933a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800933e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009342:	4013      	ands	r3, r2
 8009344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11b      	bne.n	8009388 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d015      	beq.n	8009388 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800935c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b00      	cmp	r3, #0
 8009366:	d105      	bne.n	8009374 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800936c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d009      	beq.n	8009388 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 82d6 	beq.w	800992a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
      }
      return;
 8009386:	e2d0      	b.n	800992a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 811f 	beq.w	80095d0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009392:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009396:	4b8b      	ldr	r3, [pc, #556]	; (80095c4 <HAL_UART_IRQHandler+0x2b0>)
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800939e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80093a2:	4b89      	ldr	r3, [pc, #548]	; (80095c8 <HAL_UART_IRQHandler+0x2b4>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 8112 	beq.w	80095d0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d011      	beq.n	80093dc <HAL_UART_IRQHandler+0xc8>
 80093b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2201      	movs	r2, #1
 80093ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <HAL_UART_IRQHandler+0xf8>
 80093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2202      	movs	r2, #2
 80093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009402:	f043 0204 	orr.w	r2, r3, #4
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d011      	beq.n	800943c <HAL_UART_IRQHandler+0x128>
 8009418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2204      	movs	r2, #4
 800942a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009432:	f043 0202 	orr.w	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800943c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d017      	beq.n	8009478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b00      	cmp	r3, #0
 8009452:	d105      	bne.n	8009460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009458:	4b5a      	ldr	r3, [pc, #360]	; (80095c4 <HAL_UART_IRQHandler+0x2b0>)
 800945a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2208      	movs	r2, #8
 8009466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946e:	f043 0208 	orr.w	r2, r3, #8
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009480:	2b00      	cmp	r3, #0
 8009482:	d012      	beq.n	80094aa <HAL_UART_IRQHandler+0x196>
 8009484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00c      	beq.n	80094aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a0:	f043 0220 	orr.w	r2, r3, #32
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 823c 	beq.w	800992e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d013      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d005      	beq.n	800950e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009506:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800950a:	2b00      	cmp	r3, #0
 800950c:	d04f      	beq.n	80095ae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fee9 	bl	800a2e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951e:	2b40      	cmp	r3, #64	; 0x40
 8009520:	d141      	bne.n	80095a6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800953c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800954e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800955a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1d9      	bne.n	8009522 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d013      	beq.n	800959e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957a:	4a14      	ldr	r2, [pc, #80]	; (80095cc <HAL_UART_IRQHandler+0x2b8>)
 800957c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009582:	4618      	mov	r0, r3
 8009584:	f7f9 f80d 	bl	80025a2 <HAL_DMA_Abort_IT>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d017      	beq.n	80095be <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009598:	4610      	mov	r0, r2
 800959a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800959c:	e00f      	b.n	80095be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f9da 	bl	8009958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a4:	e00b      	b.n	80095be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f9d6 	bl	8009958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ac:	e007      	b.n	80095be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f9d2 	bl	8009958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80095bc:	e1b7      	b.n	800992e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095be:	bf00      	nop
    return;
 80095c0:	e1b5      	b.n	800992e <HAL_UART_IRQHandler+0x61a>
 80095c2:	bf00      	nop
 80095c4:	10000001 	.word	0x10000001
 80095c8:	04000120 	.word	0x04000120
 80095cc:	0800a3b3 	.word	0x0800a3b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	f040 814a 	bne.w	800986e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 8143 	beq.w	800986e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ec:	f003 0310 	and.w	r3, r3, #16
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 813c 	beq.w	800986e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2210      	movs	r2, #16
 80095fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009608:	2b40      	cmp	r3, #64	; 0x40
 800960a:	f040 80b5 	bne.w	8009778 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800961a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 8187 	beq.w	8009932 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800962a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800962e:	429a      	cmp	r2, r3
 8009630:	f080 817f 	bcs.w	8009932 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800963a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 8086 	bne.w	800975c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009658:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800966c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800967a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800967e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009686:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1da      	bne.n	8009650 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096ac:	f023 0301 	bic.w	r3, r3, #1
 80096b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3308      	adds	r3, #8
 80096ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e1      	bne.n	800969a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3308      	adds	r3, #8
 80096dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009700:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e3      	bne.n	80096d6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800972a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800972c:	f023 0310 	bic.w	r3, r3, #16
 8009730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800973e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009740:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800974c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e4      	bne.n	800971c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009756:	4618      	mov	r0, r3
 8009758:	f7f8 fec7 	bl	80024ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009768:	b29b      	uxth	r3, r3
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	b29b      	uxth	r3, r3
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f8fb 	bl	800996c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009776:	e0dc      	b.n	8009932 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009784:	b29b      	uxth	r3, r3
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80ce 	beq.w	8009936 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800979a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 80c9 	beq.w	8009936 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097c6:	647b      	str	r3, [r7, #68]	; 0x44
 80097c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e4      	bne.n	80097a4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3308      	adds	r3, #8
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	623b      	str	r3, [r7, #32]
   return(result);
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f0:	f023 0301 	bic.w	r3, r3, #1
 80097f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009802:	633a      	str	r2, [r7, #48]	; 0x30
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e1      	bne.n	80097da <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2220      	movs	r2, #32
 800981a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	60fb      	str	r3, [r7, #12]
   return(result);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0310 	bic.w	r3, r3, #16
 800983e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800984c:	61fb      	str	r3, [r7, #28]
 800984e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	69b9      	ldr	r1, [r7, #24]
 8009852:	69fa      	ldr	r2, [r7, #28]
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	617b      	str	r3, [r7, #20]
   return(result);
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e4      	bne.n	800982a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f880 	bl	800996c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800986c:	e063      	b.n	8009936 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800986e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <HAL_UART_IRQHandler+0x584>
 800987a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800987e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d008      	beq.n	8009898 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800988e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fdcf 	bl	800a434 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009896:	e051      	b.n	800993c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d014      	beq.n	80098ce <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d008      	beq.n	80098ce <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d03a      	beq.n	800993a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	4798      	blx	r3
    }
    return;
 80098cc:	e035      	b.n	800993a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <HAL_UART_IRQHandler+0x5da>
 80098da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fd79 	bl	800a3de <UART_EndTransmit_IT>
    return;
 80098ec:	e026      	b.n	800993c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <HAL_UART_IRQHandler+0x5fa>
 80098fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fda8 	bl	800a45c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800990c:	e016      	b.n	800993c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800990e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d010      	beq.n	800993c <HAL_UART_IRQHandler+0x628>
 800991a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991e:	2b00      	cmp	r3, #0
 8009920:	da0c      	bge.n	800993c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fd90 	bl	800a448 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009928:	e008      	b.n	800993c <HAL_UART_IRQHandler+0x628>
      return;
 800992a:	bf00      	nop
 800992c:	e006      	b.n	800993c <HAL_UART_IRQHandler+0x628>
    return;
 800992e:	bf00      	nop
 8009930:	e004      	b.n	800993c <HAL_UART_IRQHandler+0x628>
      return;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <HAL_UART_IRQHandler+0x628>
      return;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <HAL_UART_IRQHandler+0x628>
    return;
 800993a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800993c:	37e8      	adds	r7, #232	; 0xe8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop

08009944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009988:	b08c      	sub	sp, #48	; 0x30
 800998a:	af00      	add	r7, sp, #0
 800998c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	431a      	orrs	r2, r3
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	431a      	orrs	r2, r3
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	4baa      	ldr	r3, [pc, #680]	; (8009c5c <UART_SetConfig+0x2d8>)
 80099b4:	4013      	ands	r3, r2
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	6812      	ldr	r2, [r2, #0]
 80099ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099bc:	430b      	orrs	r3, r1
 80099be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a9f      	ldr	r2, [pc, #636]	; (8009c60 <UART_SetConfig+0x2dc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d004      	beq.n	80099f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ec:	4313      	orrs	r3, r2
 80099ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80099fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	6812      	ldr	r2, [r2, #0]
 8009a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	f023 010f 	bic.w	r1, r3, #15
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a90      	ldr	r2, [pc, #576]	; (8009c64 <UART_SetConfig+0x2e0>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d125      	bne.n	8009a74 <UART_SetConfig+0xf0>
 8009a28:	4b8f      	ldr	r3, [pc, #572]	; (8009c68 <UART_SetConfig+0x2e4>)
 8009a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d81a      	bhi.n	8009a6c <UART_SetConfig+0xe8>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <UART_SetConfig+0xb8>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a4d 	.word	0x08009a4d
 8009a40:	08009a5d 	.word	0x08009a5d
 8009a44:	08009a55 	.word	0x08009a55
 8009a48:	08009a65 	.word	0x08009a65
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a52:	e116      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009a54:	2302      	movs	r3, #2
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a5a:	e112      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a62:	e10e      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009a64:	2308      	movs	r3, #8
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a6a:	e10a      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009a6c:	2310      	movs	r3, #16
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a72:	e106      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a7c      	ldr	r2, [pc, #496]	; (8009c6c <UART_SetConfig+0x2e8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d138      	bne.n	8009af0 <UART_SetConfig+0x16c>
 8009a7e:	4b7a      	ldr	r3, [pc, #488]	; (8009c68 <UART_SetConfig+0x2e4>)
 8009a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a84:	f003 030c 	and.w	r3, r3, #12
 8009a88:	2b0c      	cmp	r3, #12
 8009a8a:	d82d      	bhi.n	8009ae8 <UART_SetConfig+0x164>
 8009a8c:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <UART_SetConfig+0x110>)
 8009a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a92:	bf00      	nop
 8009a94:	08009ac9 	.word	0x08009ac9
 8009a98:	08009ae9 	.word	0x08009ae9
 8009a9c:	08009ae9 	.word	0x08009ae9
 8009aa0:	08009ae9 	.word	0x08009ae9
 8009aa4:	08009ad9 	.word	0x08009ad9
 8009aa8:	08009ae9 	.word	0x08009ae9
 8009aac:	08009ae9 	.word	0x08009ae9
 8009ab0:	08009ae9 	.word	0x08009ae9
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ae9 	.word	0x08009ae9
 8009abc:	08009ae9 	.word	0x08009ae9
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009ae1 	.word	0x08009ae1
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ace:	e0d8      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ad6:	e0d4      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ade:	e0d0      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ae6:	e0cc      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aee:	e0c8      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a5e      	ldr	r2, [pc, #376]	; (8009c70 <UART_SetConfig+0x2ec>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d125      	bne.n	8009b46 <UART_SetConfig+0x1c2>
 8009afa:	4b5b      	ldr	r3, [pc, #364]	; (8009c68 <UART_SetConfig+0x2e4>)
 8009afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b04:	2b30      	cmp	r3, #48	; 0x30
 8009b06:	d016      	beq.n	8009b36 <UART_SetConfig+0x1b2>
 8009b08:	2b30      	cmp	r3, #48	; 0x30
 8009b0a:	d818      	bhi.n	8009b3e <UART_SetConfig+0x1ba>
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d00a      	beq.n	8009b26 <UART_SetConfig+0x1a2>
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d814      	bhi.n	8009b3e <UART_SetConfig+0x1ba>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <UART_SetConfig+0x19a>
 8009b18:	2b10      	cmp	r3, #16
 8009b1a:	d008      	beq.n	8009b2e <UART_SetConfig+0x1aa>
 8009b1c:	e00f      	b.n	8009b3e <UART_SetConfig+0x1ba>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b24:	e0ad      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b26:	2302      	movs	r3, #2
 8009b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b2c:	e0a9      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b2e:	2304      	movs	r3, #4
 8009b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b34:	e0a5      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b36:	2308      	movs	r3, #8
 8009b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b3c:	e0a1      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b3e:	2310      	movs	r3, #16
 8009b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b44:	e09d      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a4a      	ldr	r2, [pc, #296]	; (8009c74 <UART_SetConfig+0x2f0>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d125      	bne.n	8009b9c <UART_SetConfig+0x218>
 8009b50:	4b45      	ldr	r3, [pc, #276]	; (8009c68 <UART_SetConfig+0x2e4>)
 8009b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8009b5c:	d016      	beq.n	8009b8c <UART_SetConfig+0x208>
 8009b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8009b60:	d818      	bhi.n	8009b94 <UART_SetConfig+0x210>
 8009b62:	2b80      	cmp	r3, #128	; 0x80
 8009b64:	d00a      	beq.n	8009b7c <UART_SetConfig+0x1f8>
 8009b66:	2b80      	cmp	r3, #128	; 0x80
 8009b68:	d814      	bhi.n	8009b94 <UART_SetConfig+0x210>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <UART_SetConfig+0x1f0>
 8009b6e:	2b40      	cmp	r3, #64	; 0x40
 8009b70:	d008      	beq.n	8009b84 <UART_SetConfig+0x200>
 8009b72:	e00f      	b.n	8009b94 <UART_SetConfig+0x210>
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b7a:	e082      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b82:	e07e      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b84:	2304      	movs	r3, #4
 8009b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b8a:	e07a      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b8c:	2308      	movs	r3, #8
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b92:	e076      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b94:	2310      	movs	r3, #16
 8009b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b9a:	e072      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a35      	ldr	r2, [pc, #212]	; (8009c78 <UART_SetConfig+0x2f4>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d12a      	bne.n	8009bfc <UART_SetConfig+0x278>
 8009ba6:	4b30      	ldr	r3, [pc, #192]	; (8009c68 <UART_SetConfig+0x2e4>)
 8009ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb4:	d01a      	beq.n	8009bec <UART_SetConfig+0x268>
 8009bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bba:	d81b      	bhi.n	8009bf4 <UART_SetConfig+0x270>
 8009bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc0:	d00c      	beq.n	8009bdc <UART_SetConfig+0x258>
 8009bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc6:	d815      	bhi.n	8009bf4 <UART_SetConfig+0x270>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <UART_SetConfig+0x250>
 8009bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bd0:	d008      	beq.n	8009be4 <UART_SetConfig+0x260>
 8009bd2:	e00f      	b.n	8009bf4 <UART_SetConfig+0x270>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bda:	e052      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be2:	e04e      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009be4:	2304      	movs	r3, #4
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bea:	e04a      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009bec:	2308      	movs	r3, #8
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf2:	e046      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bfa:	e042      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a17      	ldr	r2, [pc, #92]	; (8009c60 <UART_SetConfig+0x2dc>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d13a      	bne.n	8009c7c <UART_SetConfig+0x2f8>
 8009c06:	4b18      	ldr	r3, [pc, #96]	; (8009c68 <UART_SetConfig+0x2e4>)
 8009c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c14:	d01a      	beq.n	8009c4c <UART_SetConfig+0x2c8>
 8009c16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c1a:	d81b      	bhi.n	8009c54 <UART_SetConfig+0x2d0>
 8009c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c20:	d00c      	beq.n	8009c3c <UART_SetConfig+0x2b8>
 8009c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c26:	d815      	bhi.n	8009c54 <UART_SetConfig+0x2d0>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <UART_SetConfig+0x2b0>
 8009c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c30:	d008      	beq.n	8009c44 <UART_SetConfig+0x2c0>
 8009c32:	e00f      	b.n	8009c54 <UART_SetConfig+0x2d0>
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c3a:	e022      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c42:	e01e      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c4a:	e01a      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c52:	e016      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c5a:	e012      	b.n	8009c82 <UART_SetConfig+0x2fe>
 8009c5c:	cfff69f3 	.word	0xcfff69f3
 8009c60:	40008000 	.word	0x40008000
 8009c64:	40013800 	.word	0x40013800
 8009c68:	40021000 	.word	0x40021000
 8009c6c:	40004400 	.word	0x40004400
 8009c70:	40004800 	.word	0x40004800
 8009c74:	40004c00 	.word	0x40004c00
 8009c78:	40005000 	.word	0x40005000
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4aae      	ldr	r2, [pc, #696]	; (8009f40 <UART_SetConfig+0x5bc>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	f040 8097 	bne.w	8009dbc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	d823      	bhi.n	8009cde <UART_SetConfig+0x35a>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <UART_SetConfig+0x318>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009cc1 	.word	0x08009cc1
 8009ca0:	08009cdf 	.word	0x08009cdf
 8009ca4:	08009cc9 	.word	0x08009cc9
 8009ca8:	08009cdf 	.word	0x08009cdf
 8009cac:	08009ccf 	.word	0x08009ccf
 8009cb0:	08009cdf 	.word	0x08009cdf
 8009cb4:	08009cdf 	.word	0x08009cdf
 8009cb8:	08009cdf 	.word	0x08009cdf
 8009cbc:	08009cd7 	.word	0x08009cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cc0:	f7fb f86a 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8009cc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cc6:	e010      	b.n	8009cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cc8:	4b9e      	ldr	r3, [pc, #632]	; (8009f44 <UART_SetConfig+0x5c0>)
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ccc:	e00d      	b.n	8009cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cce:	f7fa ffcb 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8009cd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cd4:	e009      	b.n	8009cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009cdc:	e005      	b.n	8009cea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 8130 	beq.w	8009f52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	4a94      	ldr	r2, [pc, #592]	; (8009f48 <UART_SetConfig+0x5c4>)
 8009cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	4413      	add	r3, r2
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d305      	bcc.n	8009d22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d903      	bls.n	8009d2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d28:	e113      	b.n	8009f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	60bb      	str	r3, [r7, #8]
 8009d30:	60fa      	str	r2, [r7, #12]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	4a84      	ldr	r2, [pc, #528]	; (8009f48 <UART_SetConfig+0x5c4>)
 8009d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2200      	movs	r2, #0
 8009d40:	603b      	str	r3, [r7, #0]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d4c:	f7f6 ff44 	bl	8000bd8 <__aeabi_uldivmod>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4610      	mov	r0, r2
 8009d56:	4619      	mov	r1, r3
 8009d58:	f04f 0200 	mov.w	r2, #0
 8009d5c:	f04f 0300 	mov.w	r3, #0
 8009d60:	020b      	lsls	r3, r1, #8
 8009d62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d66:	0202      	lsls	r2, r0, #8
 8009d68:	6979      	ldr	r1, [r7, #20]
 8009d6a:	6849      	ldr	r1, [r1, #4]
 8009d6c:	0849      	lsrs	r1, r1, #1
 8009d6e:	2000      	movs	r0, #0
 8009d70:	460c      	mov	r4, r1
 8009d72:	4605      	mov	r5, r0
 8009d74:	eb12 0804 	adds.w	r8, r2, r4
 8009d78:	eb43 0905 	adc.w	r9, r3, r5
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	469a      	mov	sl, r3
 8009d84:	4693      	mov	fp, r2
 8009d86:	4652      	mov	r2, sl
 8009d88:	465b      	mov	r3, fp
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	f7f6 ff23 	bl	8000bd8 <__aeabi_uldivmod>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4613      	mov	r3, r2
 8009d98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009da0:	d308      	bcc.n	8009db4 <UART_SetConfig+0x430>
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da8:	d204      	bcs.n	8009db4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6a3a      	ldr	r2, [r7, #32]
 8009db0:	60da      	str	r2, [r3, #12]
 8009db2:	e0ce      	b.n	8009f52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009dba:	e0ca      	b.n	8009f52 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dc4:	d166      	bne.n	8009e94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d827      	bhi.n	8009e1e <UART_SetConfig+0x49a>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <UART_SetConfig+0x450>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	08009e1f 	.word	0x08009e1f
 8009de4:	08009e0f 	.word	0x08009e0f
 8009de8:	08009e1f 	.word	0x08009e1f
 8009dec:	08009e1f 	.word	0x08009e1f
 8009df0:	08009e1f 	.word	0x08009e1f
 8009df4:	08009e17 	.word	0x08009e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df8:	f7fa ffce 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dfe:	e014      	b.n	8009e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e00:	f7fa ffe0 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8009e04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e06:	e010      	b.n	8009e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e08:	4b4e      	ldr	r3, [pc, #312]	; (8009f44 <UART_SetConfig+0x5c0>)
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e0c:	e00d      	b.n	8009e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e0e:	f7fa ff2b 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8009e12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e14:	e009      	b.n	8009e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e1c:	e005      	b.n	8009e2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 8090 	beq.w	8009f52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	4a44      	ldr	r2, [pc, #272]	; (8009f48 <UART_SetConfig+0x5c4>)
 8009e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e44:	005a      	lsls	r2, r3, #1
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	085b      	lsrs	r3, r3, #1
 8009e4c:	441a      	add	r2, r3
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e56:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b0f      	cmp	r3, #15
 8009e5c:	d916      	bls.n	8009e8c <UART_SetConfig+0x508>
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e64:	d212      	bcs.n	8009e8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f023 030f 	bic.w	r3, r3, #15
 8009e6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	085b      	lsrs	r3, r3, #1
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	8bfb      	ldrh	r3, [r7, #30]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	8bfa      	ldrh	r2, [r7, #30]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	e062      	b.n	8009f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e92:	e05e      	b.n	8009f52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d828      	bhi.n	8009eee <UART_SetConfig+0x56a>
 8009e9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <UART_SetConfig+0x520>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ed1 	.word	0x08009ed1
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	08009eef 	.word	0x08009eef
 8009eb4:	08009edf 	.word	0x08009edf
 8009eb8:	08009eef 	.word	0x08009eef
 8009ebc:	08009eef 	.word	0x08009eef
 8009ec0:	08009eef 	.word	0x08009eef
 8009ec4:	08009ee7 	.word	0x08009ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ec8:	f7fa ff66 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8009ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ece:	e014      	b.n	8009efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ed0:	f7fa ff78 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ed6:	e010      	b.n	8009efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	; (8009f44 <UART_SetConfig+0x5c0>)
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009edc:	e00d      	b.n	8009efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ede:	f7fa fec3 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ee4:	e009      	b.n	8009efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009eec:	e005      	b.n	8009efa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d028      	beq.n	8009f52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	4a10      	ldr	r2, [pc, #64]	; (8009f48 <UART_SetConfig+0x5c4>)
 8009f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	085b      	lsrs	r3, r3, #1
 8009f18:	441a      	add	r2, r3
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f22:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	2b0f      	cmp	r3, #15
 8009f28:	d910      	bls.n	8009f4c <UART_SetConfig+0x5c8>
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f30:	d20c      	bcs.n	8009f4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60da      	str	r2, [r3, #12]
 8009f3c:	e009      	b.n	8009f52 <UART_SetConfig+0x5ce>
 8009f3e:	bf00      	nop
 8009f40:	40008000 	.word	0x40008000
 8009f44:	00f42400 	.word	0x00f42400
 8009f48:	08011ff4 	.word	0x08011ff4
      }
      else
      {
        ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2200      	movs	r2, #0
 8009f66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009f6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3730      	adds	r7, #48	; 0x30
 8009f76:	46bd      	mov	sp, r7
 8009f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00a      	beq.n	8009fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009faa:	f003 0302 	and.w	r3, r3, #2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00a      	beq.n	8009fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fee:	f003 0308 	and.w	r3, r3, #8
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	430a      	orrs	r2, r1
 800a00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a010:	f003 0310 	and.w	r3, r3, #16
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00a      	beq.n	800a02e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	430a      	orrs	r2, r1
 800a02c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	f003 0320 	and.w	r3, r3, #32
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00a      	beq.n	800a050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01a      	beq.n	800a092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	430a      	orrs	r2, r1
 800a070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a07a:	d10a      	bne.n	800a092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	605a      	str	r2, [r3, #4]
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0d0:	f7f8 f8ca 	bl	8002268 <HAL_GetTick>
 800a0d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0308 	and.w	r3, r3, #8
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d10e      	bne.n	800a102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f82f 	bl	800a156 <UART_WaitOnFlagUntilTimeout>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e025      	b.n	800a14e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b04      	cmp	r3, #4
 800a10e:	d10e      	bne.n	800a12e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f819 	bl	800a156 <UART_WaitOnFlagUntilTimeout>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e00f      	b.n	800a14e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2220      	movs	r2, #32
 800a132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b09c      	sub	sp, #112	; 0x70
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	603b      	str	r3, [r7, #0]
 800a162:	4613      	mov	r3, r2
 800a164:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a166:	e0a9      	b.n	800a2bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a16a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a16e:	f000 80a5 	beq.w	800a2bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a172:	f7f8 f879 	bl	8002268 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a17e:	429a      	cmp	r2, r3
 800a180:	d302      	bcc.n	800a188 <UART_WaitOnFlagUntilTimeout+0x32>
 800a182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a184:	2b00      	cmp	r3, #0
 800a186:	d140      	bne.n	800a20a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a198:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a19c:	667b      	str	r3, [r7, #100]	; 0x64
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a1b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e6      	bne.n	800a188 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	f023 0301 	bic.w	r3, r3, #1
 800a1d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1da:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e5      	bne.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e069      	b.n	800a2de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b00      	cmp	r3, #0
 800a216:	d051      	beq.n	800a2bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a226:	d149      	bne.n	800a2bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a230:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a246:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a250:	637b      	str	r3, [r7, #52]	; 0x34
 800a252:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e6      	bne.n	800a232 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3308      	adds	r3, #8
 800a26a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	613b      	str	r3, [r7, #16]
   return(result);
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3308      	adds	r3, #8
 800a282:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a284:	623a      	str	r2, [r7, #32]
 800a286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	69f9      	ldr	r1, [r7, #28]
 800a28a:	6a3a      	ldr	r2, [r7, #32]
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	61bb      	str	r3, [r7, #24]
   return(result);
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e5      	bne.n	800a264 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2220      	movs	r2, #32
 800a29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e010      	b.n	800a2de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	69da      	ldr	r2, [r3, #28]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	bf0c      	ite	eq
 800a2cc:	2301      	moveq	r3, #1
 800a2ce:	2300      	movne	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	f43f af46 	beq.w	800a168 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3770      	adds	r7, #112	; 0x70
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b095      	sub	sp, #84	; 0x54
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a302:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	461a      	mov	r2, r3
 800a30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a30c:	643b      	str	r3, [r7, #64]	; 0x40
 800a30e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e6      	bne.n	800a2ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3308      	adds	r3, #8
 800a326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a336:	f023 0301 	bic.w	r3, r3, #1
 800a33a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3308      	adds	r3, #8
 800a342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a344:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a34c:	e841 2300 	strex	r3, r2, [r1]
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e3      	bne.n	800a320 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d118      	bne.n	800a392 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	e853 3f00 	ldrex	r3, [r3]
 800a36c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f023 0310 	bic.w	r3, r3, #16
 800a374:	647b      	str	r3, [r7, #68]	; 0x44
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a382:	6979      	ldr	r1, [r7, #20]
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	e841 2300 	strex	r3, r2, [r1]
 800a38a:	613b      	str	r3, [r7, #16]
   return(result);
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1e6      	bne.n	800a360 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2220      	movs	r2, #32
 800a396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a3a6:	bf00      	nop
 800a3a8:	3754      	adds	r7, #84	; 0x54
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7ff fac1 	bl	8009958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b088      	sub	sp, #32
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	e853 3f00 	ldrex	r3, [r3]
 800a3f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3fa:	61fb      	str	r3, [r7, #28]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	461a      	mov	r2, r3
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	61bb      	str	r3, [r7, #24]
 800a406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a408:	6979      	ldr	r1, [r7, #20]
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	e841 2300 	strex	r3, r2, [r1]
 800a410:	613b      	str	r3, [r7, #16]
   return(result);
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e6      	bne.n	800a3e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2220      	movs	r2, #32
 800a41c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff fa8c 	bl	8009944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a42c:	bf00      	nop
 800a42e:	3720      	adds	r7, #32
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d101      	bne.n	800a486 <HAL_UARTEx_DisableFifoMode+0x16>
 800a482:	2302      	movs	r3, #2
 800a484:	e027      	b.n	800a4d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2224      	movs	r2, #36	; 0x24
 800a492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0201 	bic.w	r2, r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a4b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e02d      	b.n	800a556 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2224      	movs	r2, #36	; 0x24
 800a506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0201 	bic.w	r2, r2, #1
 800a520:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f850 	bl	800a5dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2220      	movs	r2, #32
 800a548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d101      	bne.n	800a576 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a572:	2302      	movs	r3, #2
 800a574:	e02d      	b.n	800a5d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2224      	movs	r2, #36	; 0x24
 800a582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0201 	bic.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f812 	bl	800a5dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d108      	bne.n	800a5fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5fc:	e031      	b.n	800a662 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5fe:	2308      	movs	r3, #8
 800a600:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a602:	2308      	movs	r3, #8
 800a604:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	0e5b      	lsrs	r3, r3, #25
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	0f5b      	lsrs	r3, r3, #29
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 0307 	and.w	r3, r3, #7
 800a624:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	7b3a      	ldrb	r2, [r7, #12]
 800a62a:	4911      	ldr	r1, [pc, #68]	; (800a670 <UARTEx_SetNbDataToProcess+0x94>)
 800a62c:	5c8a      	ldrb	r2, [r1, r2]
 800a62e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a632:	7b3a      	ldrb	r2, [r7, #12]
 800a634:	490f      	ldr	r1, [pc, #60]	; (800a674 <UARTEx_SetNbDataToProcess+0x98>)
 800a636:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a638:	fb93 f3f2 	sdiv	r3, r3, r2
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	7b7a      	ldrb	r2, [r7, #13]
 800a648:	4909      	ldr	r1, [pc, #36]	; (800a670 <UARTEx_SetNbDataToProcess+0x94>)
 800a64a:	5c8a      	ldrb	r2, [r1, r2]
 800a64c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a650:	7b7a      	ldrb	r2, [r7, #13]
 800a652:	4908      	ldr	r1, [pc, #32]	; (800a674 <UARTEx_SetNbDataToProcess+0x98>)
 800a654:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a656:	fb93 f3f2 	sdiv	r3, r3, r2
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	0801200c 	.word	0x0801200c
 800a674:	08012014 	.word	0x08012014

0800a678 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a678:	b084      	sub	sp, #16
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	f107 001c 	add.w	r0, r7, #28
 800a686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a68e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a690:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a692:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a696:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a69a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a69e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <SDMMC_Init+0x50>)
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	b004      	add	sp, #16
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	ffc02c00 	.word	0xffc02c00

0800a6cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f043 0203 	orr.w	r2, r3, #3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a71c:	2002      	movs	r0, #2
 800a71e:	f7f7 fdaf 	bl	8002280 <HAL_Delay>

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0303 	and.w	r3, r3, #3
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a766:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a76c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a772:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4313      	orrs	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	4b06      	ldr	r3, [pc, #24]	; (800a798 <SDMMC_SendCommand+0x50>)
 800a780:	4013      	ands	r3, r2
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	fffee0c0 	.word	0xfffee0c0

0800a79c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	b2db      	uxtb	r3, r3
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3314      	adds	r3, #20
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a802:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a808:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a80e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	4313      	orrs	r3, r2
 800a814:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	431a      	orrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a826:	2300      	movs	r3, #0

}
 800a828:	4618      	mov	r0, r3
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b088      	sub	sp, #32
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a842:	2310      	movs	r3, #16
 800a844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a84a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a84c:	2300      	movs	r3, #0
 800a84e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a854:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a856:	f107 0308 	add.w	r3, r7, #8
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff ff73 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a862:	f241 3288 	movw	r2, #5000	; 0x1388
 800a866:	2110      	movs	r1, #16
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fa7b 	bl	800ad64 <SDMMC_GetCmdResp1>
 800a86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a870:	69fb      	ldr	r3, [r7, #28]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3720      	adds	r7, #32
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b088      	sub	sp, #32
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a888:	2311      	movs	r3, #17
 800a88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a88c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff ff50 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ac:	2111      	movs	r1, #17
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa58 	bl	800ad64 <SDMMC_GetCmdResp1>
 800a8b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8b6:	69fb      	ldr	r3, [r7, #28]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3720      	adds	r7, #32
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a8ce:	2312      	movs	r3, #18
 800a8d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8e2:	f107 0308 	add.w	r3, r7, #8
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff ff2d 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a8ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f2:	2112      	movs	r1, #18
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fa35 	bl	800ad64 <SDMMC_GetCmdResp1>
 800a8fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3720      	adds	r7, #32
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b088      	sub	sp, #32
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a914:	2318      	movs	r3, #24
 800a916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a91c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a926:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a928:	f107 0308 	add.w	r3, r7, #8
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff ff0a 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a934:	f241 3288 	movw	r2, #5000	; 0x1388
 800a938:	2118      	movs	r1, #24
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fa12 	bl	800ad64 <SDMMC_GetCmdResp1>
 800a940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a942:	69fb      	ldr	r3, [r7, #28]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3720      	adds	r7, #32
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a95a:	2319      	movs	r3, #25
 800a95c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a95e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a96c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a96e:	f107 0308 	add.w	r3, r7, #8
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff fee7 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a97e:	2119      	movs	r1, #25
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f9ef 	bl	800ad64 <SDMMC_GetCmdResp1>
 800a986:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a988:	69fb      	ldr	r3, [r7, #28]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3720      	adds	r7, #32
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a9a0:	230c      	movs	r3, #12
 800a9a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9b2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff feb8 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a9d8:	4a08      	ldr	r2, [pc, #32]	; (800a9fc <SDMMC_CmdStopTransfer+0x68>)
 800a9da:	210c      	movs	r1, #12
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f9c1 	bl	800ad64 <SDMMC_GetCmdResp1>
 800a9e2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3720      	adds	r7, #32
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	05f5e100 	.word	0x05f5e100

0800aa00 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08a      	sub	sp, #40	; 0x28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aa10:	2307      	movs	r3, #7
 800aa12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa18:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa22:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa24:	f107 0310 	add.w	r3, r7, #16
 800aa28:	4619      	mov	r1, r3
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f7ff fe8c 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aa30:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa34:	2107      	movs	r1, #7
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f000 f994 	bl	800ad64 <SDMMC_GetCmdResp1>
 800aa3c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3728      	adds	r7, #40	; 0x28
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa66:	f107 0308 	add.w	r3, r7, #8
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff fe6b 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fbb8 	bl	800b1e8 <SDMMC_GetCmdError>
 800aa78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3720      	adds	r7, #32
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aa8c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aa90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aa92:	2308      	movs	r3, #8
 800aa94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaa6:	f107 0308 	add.w	r3, r7, #8
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff fe4b 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fb4a 	bl	800b14c <SDMMC_GetCmdResp7>
 800aab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaba:	69fb      	ldr	r3, [r7, #28]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3720      	adds	r7, #32
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aad2:	2337      	movs	r3, #55	; 0x37
 800aad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aadc:	2300      	movs	r3, #0
 800aade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aae6:	f107 0308 	add.w	r3, r7, #8
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff fe2b 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aaf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf6:	2137      	movs	r1, #55	; 0x37
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f933 	bl	800ad64 <SDMMC_GetCmdResp1>
 800aafe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab00:	69fb      	ldr	r3, [r7, #28]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3720      	adds	r7, #32
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b088      	sub	sp, #32
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ab18:	2329      	movs	r3, #41	; 0x29
 800ab1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab2c:	f107 0308 	add.w	r3, r7, #8
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff fe08 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fa4f 	bl	800afdc <SDMMC_GetCmdResp3>
 800ab3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab40:	69fb      	ldr	r3, [r7, #28]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3720      	adds	r7, #32
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b088      	sub	sp, #32
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ab58:	2306      	movs	r3, #6
 800ab5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab6c:	f107 0308 	add.w	r3, r7, #8
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fde8 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ab78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab7c:	2106      	movs	r1, #6
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f8f0 	bl	800ad64 <SDMMC_GetCmdResp1>
 800ab84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab86:	69fb      	ldr	r3, [r7, #28]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab9c:	2333      	movs	r3, #51	; 0x33
 800ab9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abb0:	f107 0308 	add.w	r3, r7, #8
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fdc6 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800abbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc0:	2133      	movs	r1, #51	; 0x33
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f8ce 	bl	800ad64 <SDMMC_GetCmdResp1>
 800abc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abca:	69fb      	ldr	r3, [r7, #28]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800abe0:	2302      	movs	r3, #2
 800abe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800abe4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abea:	2300      	movs	r3, #0
 800abec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf4:	f107 0308 	add.w	r3, r7, #8
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fda4 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f9a1 	bl	800af48 <SDMMC_GetCmdResp2>
 800ac06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac08:	69fb      	ldr	r3, [r7, #28]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b088      	sub	sp, #32
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ac20:	2309      	movs	r3, #9
 800ac22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ac24:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac34:	f107 0308 	add.w	r3, r7, #8
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fd84 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f981 	bl	800af48 <SDMMC_GetCmdResp2>
 800ac46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac48:	69fb      	ldr	r3, [r7, #28]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ac60:	2303      	movs	r3, #3
 800ac62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac74:	f107 0308 	add.w	r3, r7, #8
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff fd64 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	2103      	movs	r1, #3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f9e9 	bl	800b05c <SDMMC_GetCmdResp6>
 800ac8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac8c:	69fb      	ldr	r3, [r7, #28]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3720      	adds	r7, #32
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b088      	sub	sp, #32
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aca4:	230d      	movs	r3, #13
 800aca6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb8:	f107 0308 	add.w	r3, r7, #8
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7ff fd42 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800acc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc8:	210d      	movs	r1, #13
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f84a 	bl	800ad64 <SDMMC_GetCmdResp1>
 800acd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acd2:	69fb      	ldr	r3, [r7, #28]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3720      	adds	r7, #32
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b088      	sub	sp, #32
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ace8:	230d      	movs	r3, #13
 800acea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acfc:	f107 0308 	add.w	r3, r7, #8
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff fd20 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ad08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0c:	210d      	movs	r1, #13
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f828 	bl	800ad64 <SDMMC_GetCmdResp1>
 800ad14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad16:	69fb      	ldr	r3, [r7, #28]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800ad2c:	230b      	movs	r3, #11
 800ad2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad40:	f107 0308 	add.w	r3, r7, #8
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff fcfe 	bl	800a748 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800ad4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad50:	210b      	movs	r1, #11
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f806 	bl	800ad64 <SDMMC_GetCmdResp1>
 800ad58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3720      	adds	r7, #32
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ad72:	4b70      	ldr	r3, [pc, #448]	; (800af34 <SDMMC_GetCmdResp1+0x1d0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a70      	ldr	r2, [pc, #448]	; (800af38 <SDMMC_GetCmdResp1+0x1d4>)
 800ad78:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7c:	0a5a      	lsrs	r2, r3, #9
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	fb02 f303 	mul.w	r3, r2, r3
 800ad84:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	1e5a      	subs	r2, r3, #1
 800ad8a:	61fa      	str	r2, [r7, #28]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad94:	e0c9      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	4b67      	ldr	r3, [pc, #412]	; (800af3c <SDMMC_GetCmdResp1+0x1d8>)
 800ada0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0ef      	beq.n	800ad86 <SDMMC_GetCmdResp1+0x22>
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1ea      	bne.n	800ad86 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2204      	movs	r2, #4
 800adc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adc2:	2304      	movs	r3, #4
 800adc4:	e0b1      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2201      	movs	r2, #1
 800add6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800add8:	2301      	movs	r3, #1
 800adda:	e0a6      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4a58      	ldr	r2, [pc, #352]	; (800af40 <SDMMC_GetCmdResp1+0x1dc>)
 800ade0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff fcda 	bl	800a79c <SDMMC_GetCommandResponse>
 800ade8:	4603      	mov	r3, r0
 800adea:	461a      	mov	r2, r3
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	4293      	cmp	r3, r2
 800adf0:	d001      	beq.n	800adf6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e099      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800adf6:	2100      	movs	r1, #0
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7ff fcdc 	bl	800a7b6 <SDMMC_GetResponse>
 800adfe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	4b50      	ldr	r3, [pc, #320]	; (800af44 <SDMMC_GetCmdResp1+0x1e0>)
 800ae04:	4013      	ands	r3, r2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e08d      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	da02      	bge.n	800ae1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae18:	e087      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ae24:	2340      	movs	r3, #64	; 0x40
 800ae26:	e080      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ae32:	2380      	movs	r3, #128	; 0x80
 800ae34:	e079      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ae40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae44:	e071      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ae50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae54:	e069      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ae60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae64:	e061      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ae70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae74:	e059      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae84:	e051      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae94:	e049      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aea4:	e041      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aeb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeb4:	e039      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aec4:	e031      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aed4:	e029      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aee4:	e021      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aef0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aef4:	e019      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800af00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af04:	e011      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800af10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af14:	e009      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f003 0308 	and.w	r3, r3, #8
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800af20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af24:	e001      	b.n	800af2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3720      	adds	r7, #32
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20000008 	.word	0x20000008
 800af38:	10624dd3 	.word	0x10624dd3
 800af3c:	00200045 	.word	0x00200045
 800af40:	002000c5 	.word	0x002000c5
 800af44:	fdffe008 	.word	0xfdffe008

0800af48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af50:	4b1f      	ldr	r3, [pc, #124]	; (800afd0 <SDMMC_GetCmdResp2+0x88>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a1f      	ldr	r2, [pc, #124]	; (800afd4 <SDMMC_GetCmdResp2+0x8c>)
 800af56:	fba2 2303 	umull	r2, r3, r2, r3
 800af5a:	0a5b      	lsrs	r3, r3, #9
 800af5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af60:	fb02 f303 	mul.w	r3, r2, r3
 800af64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	1e5a      	subs	r2, r3, #1
 800af6a:	60fa      	str	r2, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d102      	bne.n	800af76 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af74:	e026      	b.n	800afc4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0ef      	beq.n	800af66 <SDMMC_GetCmdResp2+0x1e>
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1ea      	bne.n	800af66 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2204      	movs	r2, #4
 800afa0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afa2:	2304      	movs	r3, #4
 800afa4:	e00e      	b.n	800afc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afb8:	2301      	movs	r3, #1
 800afba:	e003      	b.n	800afc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a06      	ldr	r2, [pc, #24]	; (800afd8 <SDMMC_GetCmdResp2+0x90>)
 800afc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	20000008 	.word	0x20000008
 800afd4:	10624dd3 	.word	0x10624dd3
 800afd8:	002000c5 	.word	0x002000c5

0800afdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afe4:	4b1a      	ldr	r3, [pc, #104]	; (800b050 <SDMMC_GetCmdResp3+0x74>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a1a      	ldr	r2, [pc, #104]	; (800b054 <SDMMC_GetCmdResp3+0x78>)
 800afea:	fba2 2303 	umull	r2, r3, r2, r3
 800afee:	0a5b      	lsrs	r3, r3, #9
 800aff0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff4:	fb02 f303 	mul.w	r3, r2, r3
 800aff8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1e5a      	subs	r2, r3, #1
 800affe:	60fa      	str	r2, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b008:	e01b      	b.n	800b042 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0ef      	beq.n	800affa <SDMMC_GetCmdResp3+0x1e>
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1ea      	bne.n	800affa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d004      	beq.n	800b03a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2204      	movs	r2, #4
 800b034:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b036:	2304      	movs	r3, #4
 800b038:	e003      	b.n	800b042 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a06      	ldr	r2, [pc, #24]	; (800b058 <SDMMC_GetCmdResp3+0x7c>)
 800b03e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	20000008 	.word	0x20000008
 800b054:	10624dd3 	.word	0x10624dd3
 800b058:	002000c5 	.word	0x002000c5

0800b05c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	460b      	mov	r3, r1
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b06a:	4b35      	ldr	r3, [pc, #212]	; (800b140 <SDMMC_GetCmdResp6+0xe4>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a35      	ldr	r2, [pc, #212]	; (800b144 <SDMMC_GetCmdResp6+0xe8>)
 800b070:	fba2 2303 	umull	r2, r3, r2, r3
 800b074:	0a5b      	lsrs	r3, r3, #9
 800b076:	f241 3288 	movw	r2, #5000	; 0x1388
 800b07a:	fb02 f303 	mul.w	r3, r2, r3
 800b07e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	1e5a      	subs	r2, r3, #1
 800b084:	61fa      	str	r2, [r7, #28]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d102      	bne.n	800b090 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b08a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b08e:	e052      	b.n	800b136 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b094:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d0ef      	beq.n	800b080 <SDMMC_GetCmdResp6+0x24>
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1ea      	bne.n	800b080 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ae:	f003 0304 	and.w	r3, r3, #4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d004      	beq.n	800b0c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2204      	movs	r2, #4
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0bc:	2304      	movs	r3, #4
 800b0be:	e03a      	b.n	800b136 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d004      	beq.n	800b0d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e02f      	b.n	800b136 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f7ff fb60 	bl	800a79c <SDMMC_GetCommandResponse>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	7afb      	ldrb	r3, [r7, #11]
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d001      	beq.n	800b0ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e025      	b.n	800b136 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	4a16      	ldr	r2, [pc, #88]	; (800b148 <SDMMC_GetCmdResp6+0xec>)
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7ff fb5f 	bl	800a7b6 <SDMMC_GetResponse>
 800b0f8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d106      	bne.n	800b112 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	0c1b      	lsrs	r3, r3, #16
 800b108:	b29a      	uxth	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b10e:	2300      	movs	r3, #0
 800b110:	e011      	b.n	800b136 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b11c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b120:	e009      	b.n	800b136 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b12c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b130:	e001      	b.n	800b136 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b136:	4618      	mov	r0, r3
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000008 	.word	0x20000008
 800b144:	10624dd3 	.word	0x10624dd3
 800b148:	002000c5 	.word	0x002000c5

0800b14c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b154:	4b22      	ldr	r3, [pc, #136]	; (800b1e0 <SDMMC_GetCmdResp7+0x94>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a22      	ldr	r2, [pc, #136]	; (800b1e4 <SDMMC_GetCmdResp7+0x98>)
 800b15a:	fba2 2303 	umull	r2, r3, r2, r3
 800b15e:	0a5b      	lsrs	r3, r3, #9
 800b160:	f241 3288 	movw	r2, #5000	; 0x1388
 800b164:	fb02 f303 	mul.w	r3, r2, r3
 800b168:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	60fa      	str	r2, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b178:	e02c      	b.n	800b1d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0ef      	beq.n	800b16a <SDMMC_GetCmdResp7+0x1e>
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1ea      	bne.n	800b16a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2204      	movs	r2, #4
 800b1a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	e014      	b.n	800b1d4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d004      	beq.n	800b1c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e009      	b.n	800b1d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2240      	movs	r2, #64	; 0x40
 800b1d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b1d2:	2300      	movs	r3, #0

}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	20000008 	.word	0x20000008
 800b1e4:	10624dd3 	.word	0x10624dd3

0800b1e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1f0:	4b11      	ldr	r3, [pc, #68]	; (800b238 <SDMMC_GetCmdError+0x50>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a11      	ldr	r2, [pc, #68]	; (800b23c <SDMMC_GetCmdError+0x54>)
 800b1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1fa:	0a5b      	lsrs	r3, r3, #9
 800b1fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b200:	fb02 f303 	mul.w	r3, r2, r3
 800b204:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	1e5a      	subs	r2, r3, #1
 800b20a:	60fa      	str	r2, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b214:	e009      	b.n	800b22a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0f1      	beq.n	800b206 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a06      	ldr	r2, [pc, #24]	; (800b240 <SDMMC_GetCmdError+0x58>)
 800b226:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	20000008 	.word	0x20000008
 800b23c:	10624dd3 	.word	0x10624dd3
 800b240:	002000c5 	.word	0x002000c5

0800b244 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b244:	b084      	sub	sp, #16
 800b246:	b580      	push	{r7, lr}
 800b248:	b084      	sub	sp, #16
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	f107 001c 	add.w	r0, r7, #28
 800b252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f001 faf6 	bl	800c854 <USB_CoreReset>
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d106      	bne.n	800b280 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b276:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
 800b27e:	e005      	b.n	800b28c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b298:	b004      	add	sp, #16
 800b29a:	4770      	bx	lr

0800b29c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d165      	bne.n	800b37c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4a3e      	ldr	r2, [pc, #248]	; (800b3ac <USB_SetTurnaroundTime+0x110>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d906      	bls.n	800b2c6 <USB_SetTurnaroundTime+0x2a>
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	4a3d      	ldr	r2, [pc, #244]	; (800b3b0 <USB_SetTurnaroundTime+0x114>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d202      	bcs.n	800b2c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b2c0:	230f      	movs	r3, #15
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	e05c      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4a39      	ldr	r2, [pc, #228]	; (800b3b0 <USB_SetTurnaroundTime+0x114>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d306      	bcc.n	800b2dc <USB_SetTurnaroundTime+0x40>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	4a38      	ldr	r2, [pc, #224]	; (800b3b4 <USB_SetTurnaroundTime+0x118>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d202      	bcs.n	800b2dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b2d6:	230e      	movs	r3, #14
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e051      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4a35      	ldr	r2, [pc, #212]	; (800b3b4 <USB_SetTurnaroundTime+0x118>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d306      	bcc.n	800b2f2 <USB_SetTurnaroundTime+0x56>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4a34      	ldr	r2, [pc, #208]	; (800b3b8 <USB_SetTurnaroundTime+0x11c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d202      	bcs.n	800b2f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b2ec:	230d      	movs	r3, #13
 800b2ee:	617b      	str	r3, [r7, #20]
 800b2f0:	e046      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	4a30      	ldr	r2, [pc, #192]	; (800b3b8 <USB_SetTurnaroundTime+0x11c>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d306      	bcc.n	800b308 <USB_SetTurnaroundTime+0x6c>
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	4a2f      	ldr	r2, [pc, #188]	; (800b3bc <USB_SetTurnaroundTime+0x120>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d802      	bhi.n	800b308 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b302:	230c      	movs	r3, #12
 800b304:	617b      	str	r3, [r7, #20]
 800b306:	e03b      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	4a2c      	ldr	r2, [pc, #176]	; (800b3bc <USB_SetTurnaroundTime+0x120>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d906      	bls.n	800b31e <USB_SetTurnaroundTime+0x82>
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	4a2b      	ldr	r2, [pc, #172]	; (800b3c0 <USB_SetTurnaroundTime+0x124>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d802      	bhi.n	800b31e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b318:	230b      	movs	r3, #11
 800b31a:	617b      	str	r3, [r7, #20]
 800b31c:	e030      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	4a27      	ldr	r2, [pc, #156]	; (800b3c0 <USB_SetTurnaroundTime+0x124>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d906      	bls.n	800b334 <USB_SetTurnaroundTime+0x98>
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	4a26      	ldr	r2, [pc, #152]	; (800b3c4 <USB_SetTurnaroundTime+0x128>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d802      	bhi.n	800b334 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b32e:	230a      	movs	r3, #10
 800b330:	617b      	str	r3, [r7, #20]
 800b332:	e025      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4a23      	ldr	r2, [pc, #140]	; (800b3c4 <USB_SetTurnaroundTime+0x128>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d906      	bls.n	800b34a <USB_SetTurnaroundTime+0xae>
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	4a22      	ldr	r2, [pc, #136]	; (800b3c8 <USB_SetTurnaroundTime+0x12c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d202      	bcs.n	800b34a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b344:	2309      	movs	r3, #9
 800b346:	617b      	str	r3, [r7, #20]
 800b348:	e01a      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	4a1e      	ldr	r2, [pc, #120]	; (800b3c8 <USB_SetTurnaroundTime+0x12c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d306      	bcc.n	800b360 <USB_SetTurnaroundTime+0xc4>
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	4a1d      	ldr	r2, [pc, #116]	; (800b3cc <USB_SetTurnaroundTime+0x130>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d802      	bhi.n	800b360 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b35a:	2308      	movs	r3, #8
 800b35c:	617b      	str	r3, [r7, #20]
 800b35e:	e00f      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	4a1a      	ldr	r2, [pc, #104]	; (800b3cc <USB_SetTurnaroundTime+0x130>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d906      	bls.n	800b376 <USB_SetTurnaroundTime+0xda>
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	4a19      	ldr	r2, [pc, #100]	; (800b3d0 <USB_SetTurnaroundTime+0x134>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d202      	bcs.n	800b376 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b370:	2307      	movs	r3, #7
 800b372:	617b      	str	r3, [r7, #20]
 800b374:	e004      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b376:	2306      	movs	r3, #6
 800b378:	617b      	str	r3, [r7, #20]
 800b37a:	e001      	b.n	800b380 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b37c:	2309      	movs	r3, #9
 800b37e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	68da      	ldr	r2, [r3, #12]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	029b      	lsls	r3, r3, #10
 800b394:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b398:	431a      	orrs	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	00d8acbf 	.word	0x00d8acbf
 800b3b0:	00e4e1c0 	.word	0x00e4e1c0
 800b3b4:	00f42400 	.word	0x00f42400
 800b3b8:	01067380 	.word	0x01067380
 800b3bc:	011a499f 	.word	0x011a499f
 800b3c0:	01312cff 	.word	0x01312cff
 800b3c4:	014ca43f 	.word	0x014ca43f
 800b3c8:	016e3600 	.word	0x016e3600
 800b3cc:	01a6ab1f 	.word	0x01a6ab1f
 800b3d0:	01e84800 	.word	0x01e84800

0800b3d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f043 0201 	orr.w	r2, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f023 0201 	bic.w	r2, r3, #1
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b434:	78fb      	ldrb	r3, [r7, #3]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d115      	bne.n	800b466 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b446:	2001      	movs	r0, #1
 800b448:	f7f6 ff1a 	bl	8002280 <HAL_Delay>
      ms++;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3301      	adds	r3, #1
 800b450:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 f985 	bl	800c762 <USB_GetMode>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d01e      	beq.n	800b49c <USB_SetCurrentMode+0x84>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b31      	cmp	r3, #49	; 0x31
 800b462:	d9f0      	bls.n	800b446 <USB_SetCurrentMode+0x2e>
 800b464:	e01a      	b.n	800b49c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d115      	bne.n	800b498 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b478:	2001      	movs	r0, #1
 800b47a:	f7f6 ff01 	bl	8002280 <HAL_Delay>
      ms++;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3301      	adds	r3, #1
 800b482:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f001 f96c 	bl	800c762 <USB_GetMode>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d005      	beq.n	800b49c <USB_SetCurrentMode+0x84>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b31      	cmp	r3, #49	; 0x31
 800b494:	d9f0      	bls.n	800b478 <USB_SetCurrentMode+0x60>
 800b496:	e001      	b.n	800b49c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e005      	b.n	800b4a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b32      	cmp	r3, #50	; 0x32
 800b4a0:	d101      	bne.n	800b4a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b4be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	613b      	str	r3, [r7, #16]
 800b4ce:	e009      	b.n	800b4e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	3340      	adds	r3, #64	; 0x40
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2b0e      	cmp	r3, #14
 800b4e8:	d9f2      	bls.n	800b4d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d11c      	bne.n	800b52a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4fe:	f043 0302 	orr.w	r3, r3, #2
 800b502:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b508:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	e005      	b.n	800b536 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b53c:	461a      	mov	r2, r3
 800b53e:	2300      	movs	r3, #0
 800b540:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b548:	4619      	mov	r1, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b550:	461a      	mov	r2, r3
 800b552:	680b      	ldr	r3, [r1, #0]
 800b554:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b556:	2103      	movs	r1, #3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f959 	bl	800b810 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b55e:	2110      	movs	r1, #16
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f8f1 	bl	800b748 <USB_FlushTxFifo>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f91d 	bl	800b7b0 <USB_FlushRxFifo>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b586:	461a      	mov	r2, r3
 800b588:	2300      	movs	r3, #0
 800b58a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b592:	461a      	mov	r2, r3
 800b594:	2300      	movs	r3, #0
 800b596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59e:	461a      	mov	r2, r3
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	613b      	str	r3, [r7, #16]
 800b5a8:	e043      	b.n	800b632 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5c0:	d118      	bne.n	800b5f4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10a      	bne.n	800b5de <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	e013      	b.n	800b606 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	015a      	lsls	r2, r3, #5
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	e008      	b.n	800b606 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b600:	461a      	mov	r2, r3
 800b602:	2300      	movs	r3, #0
 800b604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	015a      	lsls	r2, r3, #5
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4413      	add	r3, r2
 800b60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b612:	461a      	mov	r2, r3
 800b614:	2300      	movs	r3, #0
 800b616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b624:	461a      	mov	r2, r3
 800b626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b62a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	3301      	adds	r3, #1
 800b630:	613b      	str	r3, [r7, #16]
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	429a      	cmp	r2, r3
 800b638:	d3b7      	bcc.n	800b5aa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b63a:	2300      	movs	r3, #0
 800b63c:	613b      	str	r3, [r7, #16]
 800b63e:	e043      	b.n	800b6c8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4413      	add	r3, r2
 800b648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b656:	d118      	bne.n	800b68a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10a      	bne.n	800b674 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	015a      	lsls	r2, r3, #5
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4413      	add	r3, r2
 800b666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b66a:	461a      	mov	r2, r3
 800b66c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	e013      	b.n	800b69c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b680:	461a      	mov	r2, r3
 800b682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	e008      	b.n	800b69c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	015a      	lsls	r2, r3, #5
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	4413      	add	r3, r2
 800b692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b696:	461a      	mov	r2, r3
 800b698:	2300      	movs	r3, #0
 800b69a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	015a      	lsls	r2, r3, #5
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	613b      	str	r3, [r7, #16]
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d3b7      	bcc.n	800b640 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b6f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	f043 0210 	orr.w	r2, r3, #16
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	699a      	ldr	r2, [r3, #24]
 800b702:	4b10      	ldr	r3, [pc, #64]	; (800b744 <USB_DevInit+0x294>)
 800b704:	4313      	orrs	r3, r2
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	f043 0208 	orr.w	r2, r3, #8
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d107      	bne.n	800b732 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b72a:	f043 0304 	orr.w	r3, r3, #4
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b732:	7dfb      	ldrb	r3, [r7, #23]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b73e:	b004      	add	sp, #16
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	803c3800 	.word	0x803c3800

0800b748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b752:	2300      	movs	r3, #0
 800b754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3301      	adds	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4a13      	ldr	r2, [pc, #76]	; (800b7ac <USB_FlushTxFifo+0x64>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d901      	bls.n	800b768 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e01b      	b.n	800b7a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	daf2      	bge.n	800b756 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	019b      	lsls	r3, r3, #6
 800b778:	f043 0220 	orr.w	r2, r3, #32
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3301      	adds	r3, #1
 800b784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4a08      	ldr	r2, [pc, #32]	; (800b7ac <USB_FlushTxFifo+0x64>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d901      	bls.n	800b792 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e006      	b.n	800b7a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f003 0320 	and.w	r3, r3, #32
 800b79a:	2b20      	cmp	r3, #32
 800b79c:	d0f0      	beq.n	800b780 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	00030d40 	.word	0x00030d40

0800b7b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4a11      	ldr	r2, [pc, #68]	; (800b80c <USB_FlushRxFifo+0x5c>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d901      	bls.n	800b7ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	e018      	b.n	800b800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	daf2      	bge.n	800b7bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2210      	movs	r2, #16
 800b7de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	4a08      	ldr	r2, [pc, #32]	; (800b80c <USB_FlushRxFifo+0x5c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d901      	bls.n	800b7f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e006      	b.n	800b800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	f003 0310 	and.w	r3, r3, #16
 800b7fa:	2b10      	cmp	r3, #16
 800b7fc:	d0f0      	beq.n	800b7e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	00030d40 	.word	0x00030d40

0800b810 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	78fb      	ldrb	r3, [r7, #3]
 800b82a:	68f9      	ldr	r1, [r7, #12]
 800b82c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b830:	4313      	orrs	r3, r2
 800b832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b842:	b480      	push	{r7}
 800b844:	b087      	sub	sp, #28
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f003 0306 	and.w	r3, r3, #6
 800b85a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d002      	beq.n	800b868 <USB_GetDevSpeed+0x26>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b06      	cmp	r3, #6
 800b866:	d102      	bne.n	800b86e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b868:	2302      	movs	r3, #2
 800b86a:	75fb      	strb	r3, [r7, #23]
 800b86c:	e001      	b.n	800b872 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b86e:	230f      	movs	r3, #15
 800b870:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b872:	7dfb      	ldrb	r3, [r7, #23]
}
 800b874:	4618      	mov	r0, r3
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d13a      	bne.n	800b912 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a2:	69da      	ldr	r2, [r3, #28]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f003 030f 	and.w	r3, r3, #15
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	68f9      	ldr	r1, [r7, #12]
 800b8b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	015a      	lsls	r2, r3, #5
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d155      	bne.n	800b980 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	791b      	ldrb	r3, [r3, #4]
 800b8ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	059b      	lsls	r3, r3, #22
 800b8f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	0151      	lsls	r1, r2, #5
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	440a      	add	r2, r1
 800b902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b90a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b90e:	6013      	str	r3, [r2, #0]
 800b910:	e036      	b.n	800b980 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b918:	69da      	ldr	r2, [r3, #28]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	f003 030f 	and.w	r3, r3, #15
 800b922:	2101      	movs	r1, #1
 800b924:	fa01 f303 	lsl.w	r3, r1, r3
 800b928:	041b      	lsls	r3, r3, #16
 800b92a:	68f9      	ldr	r1, [r7, #12]
 800b92c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b930:	4313      	orrs	r3, r2
 800b932:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d11a      	bne.n	800b980 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	4413      	add	r3, r2
 800b952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	791b      	ldrb	r3, [r3, #4]
 800b964:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b966:	430b      	orrs	r3, r1
 800b968:	4313      	orrs	r3, r2
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	0151      	lsls	r1, r2, #5
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	440a      	add	r2, r1
 800b972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b97a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b97e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
	...

0800b990 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d161      	bne.n	800ba70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	015a      	lsls	r2, r3, #5
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9c2:	d11f      	bne.n	800ba04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	0151      	lsls	r1, r2, #5
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	440a      	add	r2, r1
 800b9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b9e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	0151      	lsls	r1, r2, #5
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	440a      	add	r2, r1
 800b9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	f003 030f 	and.w	r3, r3, #15
 800ba14:	2101      	movs	r1, #1
 800ba16:	fa01 f303 	lsl.w	r3, r1, r3
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	43db      	mvns	r3, r3
 800ba1e:	68f9      	ldr	r1, [r7, #12]
 800ba20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba24:	4013      	ands	r3, r2
 800ba26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2e:	69da      	ldr	r2, [r3, #28]
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	f003 030f 	and.w	r3, r3, #15
 800ba38:	2101      	movs	r1, #1
 800ba3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	43db      	mvns	r3, r3
 800ba42:	68f9      	ldr	r1, [r7, #12]
 800ba44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba48:	4013      	ands	r3, r2
 800ba4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	0159      	lsls	r1, r3, #5
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	440b      	add	r3, r1
 800ba62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba66:	4619      	mov	r1, r3
 800ba68:	4b35      	ldr	r3, [pc, #212]	; (800bb40 <USB_DeactivateEndpoint+0x1b0>)
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	600b      	str	r3, [r1, #0]
 800ba6e:	e060      	b.n	800bb32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba86:	d11f      	bne.n	800bac8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800baa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f003 030f 	and.w	r3, r3, #15
 800bad8:	2101      	movs	r1, #1
 800bada:	fa01 f303 	lsl.w	r3, r1, r3
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	43db      	mvns	r3, r3
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bae8:	4013      	ands	r3, r2
 800baea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	2101      	movs	r1, #1
 800bafe:	fa01 f303 	lsl.w	r3, r1, r3
 800bb02:	041b      	lsls	r3, r3, #16
 800bb04:	43db      	mvns	r3, r3
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	0159      	lsls	r1, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	440b      	add	r3, r1
 800bb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <USB_DeactivateEndpoint+0x1b4>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	ec337800 	.word	0xec337800
 800bb44:	eff37800 	.word	0xeff37800

0800bb48 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	785b      	ldrb	r3, [r3, #1]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	f040 810a 	bne.w	800bd7a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d132      	bne.n	800bbd4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	0151      	lsls	r1, r2, #5
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	440a      	add	r2, r1
 800bb84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	015a      	lsls	r2, r3, #5
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	4413      	add	r3, r2
 800bb9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	0151      	lsls	r1, r2, #5
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	440a      	add	r2, r1
 800bba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	0151      	lsls	r1, r2, #5
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	440a      	add	r2, r1
 800bbc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbcc:	0cdb      	lsrs	r3, r3, #19
 800bbce:	04db      	lsls	r3, r3, #19
 800bbd0:	6113      	str	r3, [r2, #16]
 800bbd2:	e074      	b.n	800bcbe <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	693a      	ldr	r2, [r7, #16]
 800bbe4:	0151      	lsls	r1, r2, #5
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	440a      	add	r2, r1
 800bbea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbee:	0cdb      	lsrs	r3, r3, #19
 800bbf0:	04db      	lsls	r3, r3, #19
 800bbf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	0151      	lsls	r1, r2, #5
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	440a      	add	r2, r1
 800bc0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	015a      	lsls	r2, r3, #5
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	4413      	add	r3, r2
 800bc20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc24:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	6999      	ldr	r1, [r3, #24]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	440b      	add	r3, r1
 800bc30:	1e59      	subs	r1, r3, #1
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc3a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc3c:	4b9e      	ldr	r3, [pc, #632]	; (800beb8 <USB_EPStartXfer+0x370>)
 800bc3e:	400b      	ands	r3, r1
 800bc40:	6939      	ldr	r1, [r7, #16]
 800bc42:	0148      	lsls	r0, r1, #5
 800bc44:	6979      	ldr	r1, [r7, #20]
 800bc46:	4401      	add	r1, r0
 800bc48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5c:	691a      	ldr	r2, [r3, #16]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc66:	6939      	ldr	r1, [r7, #16]
 800bc68:	0148      	lsls	r0, r1, #5
 800bc6a:	6979      	ldr	r1, [r7, #20]
 800bc6c:	4401      	add	r1, r0
 800bc6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc72:	4313      	orrs	r3, r2
 800bc74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	791b      	ldrb	r3, [r3, #4]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d11f      	bne.n	800bcbe <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	015a      	lsls	r2, r3, #5
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	4413      	add	r3, r2
 800bc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	0151      	lsls	r1, r2, #5
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	440a      	add	r2, r1
 800bc94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bc9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	0151      	lsls	r1, r2, #5
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	440a      	add	r2, r1
 800bcb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcbc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	693a      	ldr	r2, [r7, #16]
 800bcce:	0151      	lsls	r1, r2, #5
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	440a      	add	r2, r1
 800bcd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bcdc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	791b      	ldrb	r3, [r3, #4]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d015      	beq.n	800bd12 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8106 	beq.w	800befc <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	f003 030f 	and.w	r3, r3, #15
 800bd00:	2101      	movs	r1, #1
 800bd02:	fa01 f303 	lsl.w	r3, r1, r3
 800bd06:	6979      	ldr	r1, [r7, #20]
 800bd08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	634b      	str	r3, [r1, #52]	; 0x34
 800bd10:	e0f4      	b.n	800befc <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d110      	bne.n	800bd44 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	015a      	lsls	r2, r3, #5
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	4413      	add	r3, r2
 800bd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	0151      	lsls	r1, r2, #5
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	440a      	add	r2, r1
 800bd38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	e00f      	b.n	800bd64 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	015a      	lsls	r2, r3, #5
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	0151      	lsls	r1, r2, #5
 800bd56:	697a      	ldr	r2, [r7, #20]
 800bd58:	440a      	add	r2, r1
 800bd5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd62:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	6919      	ldr	r1, [r3, #16]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781a      	ldrb	r2, [r3, #0]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fa94 	bl	800c2a0 <USB_WritePacket>
 800bd78:	e0c0      	b.n	800befc <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	015a      	lsls	r2, r3, #5
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	4413      	add	r3, r2
 800bd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	0151      	lsls	r1, r2, #5
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	440a      	add	r2, r1
 800bd90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd94:	0cdb      	lsrs	r3, r3, #19
 800bd96:	04db      	lsls	r3, r3, #19
 800bd98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	015a      	lsls	r2, r3, #5
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	4413      	add	r3, r2
 800bda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	0151      	lsls	r1, r2, #5
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	440a      	add	r2, r1
 800bdb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bdb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bdbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d123      	bne.n	800be0e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	015a      	lsls	r2, r3, #5
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd2:	691a      	ldr	r2, [r3, #16]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bddc:	6939      	ldr	r1, [r7, #16]
 800bdde:	0148      	lsls	r0, r1, #5
 800bde0:	6979      	ldr	r1, [r7, #20]
 800bde2:	4401      	add	r1, r0
 800bde4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bde8:	4313      	orrs	r3, r2
 800bdea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	0151      	lsls	r1, r2, #5
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	440a      	add	r2, r1
 800be02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be0a:	6113      	str	r3, [r2, #16]
 800be0c:	e037      	b.n	800be7e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	699a      	ldr	r2, [r3, #24]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	4413      	add	r3, r2
 800be18:	1e5a      	subs	r2, r3, #1
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be22:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	89fa      	ldrh	r2, [r7, #14]
 800be2a:	fb03 f202 	mul.w	r2, r3, r2
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	015a      	lsls	r2, r3, #5
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3e:	691a      	ldr	r2, [r3, #16]
 800be40:	89fb      	ldrh	r3, [r7, #14]
 800be42:	04d9      	lsls	r1, r3, #19
 800be44:	4b1c      	ldr	r3, [pc, #112]	; (800beb8 <USB_EPStartXfer+0x370>)
 800be46:	400b      	ands	r3, r1
 800be48:	6939      	ldr	r1, [r7, #16]
 800be4a:	0148      	lsls	r0, r1, #5
 800be4c:	6979      	ldr	r1, [r7, #20]
 800be4e:	4401      	add	r1, r0
 800be50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be54:	4313      	orrs	r3, r2
 800be56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be6e:	6939      	ldr	r1, [r7, #16]
 800be70:	0148      	lsls	r0, r1, #5
 800be72:	6979      	ldr	r1, [r7, #20]
 800be74:	4401      	add	r1, r0
 800be76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be7a:	4313      	orrs	r3, r2
 800be7c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	791b      	ldrb	r3, [r3, #4]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d12a      	bne.n	800bedc <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be92:	2b00      	cmp	r3, #0
 800be94:	d112      	bne.n	800bebc <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	015a      	lsls	r2, r3, #5
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	0151      	lsls	r1, r2, #5
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	440a      	add	r2, r1
 800beac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	e011      	b.n	800bedc <USB_EPStartXfer+0x394>
 800beb8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	0151      	lsls	r1, r2, #5
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	440a      	add	r2, r1
 800bed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	0151      	lsls	r1, r2, #5
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	440a      	add	r2, r1
 800bef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800befa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop

0800bf08 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	f040 80ab 	bne.w	800c07c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d132      	bne.n	800bf94 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	0151      	lsls	r1, r2, #5
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	440a      	add	r2, r1
 800bf44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	0151      	lsls	r1, r2, #5
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	440a      	add	r2, r1
 800bf68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	015a      	lsls	r2, r3, #5
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	0151      	lsls	r1, r2, #5
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	440a      	add	r2, r1
 800bf88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf8c:	0cdb      	lsrs	r3, r3, #19
 800bf8e:	04db      	lsls	r3, r3, #19
 800bf90:	6113      	str	r3, [r2, #16]
 800bf92:	e04e      	b.n	800c032 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	0151      	lsls	r1, r2, #5
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	440a      	add	r2, r1
 800bfaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfae:	0cdb      	lsrs	r3, r3, #19
 800bfb0:	04db      	lsls	r3, r3, #19
 800bfb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	015a      	lsls	r2, r3, #5
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4413      	add	r3, r2
 800bfbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	0151      	lsls	r1, r2, #5
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	440a      	add	r2, r1
 800bfca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d903      	bls.n	800bfec <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	68da      	ldr	r2, [r3, #12]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	0151      	lsls	r1, r2, #5
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	440a      	add	r2, r1
 800c002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4413      	add	r3, r2
 800c014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c018:	691a      	ldr	r2, [r3, #16]
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	0148      	lsls	r0, r1, #5
 800c026:	68f9      	ldr	r1, [r7, #12]
 800c028:	4401      	add	r1, r0
 800c02a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c02e:	4313      	orrs	r3, r2
 800c030:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	015a      	lsls	r2, r3, #5
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	4413      	add	r3, r2
 800c03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	0151      	lsls	r1, r2, #5
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	440a      	add	r2, r1
 800c048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c04c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c050:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d071      	beq.n	800c13e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	f003 030f 	and.w	r3, r3, #15
 800c06a:	2101      	movs	r1, #1
 800c06c:	fa01 f303 	lsl.w	r3, r1, r3
 800c070:	68f9      	ldr	r1, [r7, #12]
 800c072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c076:	4313      	orrs	r3, r2
 800c078:	634b      	str	r3, [r1, #52]	; 0x34
 800c07a:	e060      	b.n	800c13e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	0151      	lsls	r1, r2, #5
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	440a      	add	r2, r1
 800c092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c096:	0cdb      	lsrs	r3, r3, #19
 800c098:	04db      	lsls	r3, r3, #19
 800c09a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	0151      	lsls	r1, r2, #5
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	440a      	add	r2, r1
 800c0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	68da      	ldr	r2, [r3, #12]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	0151      	lsls	r1, r2, #5
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	440a      	add	r2, r1
 800c0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	015a      	lsls	r2, r3, #5
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c104:	691a      	ldr	r2, [r3, #16]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c10e:	68b9      	ldr	r1, [r7, #8]
 800c110:	0148      	lsls	r0, r1, #5
 800c112:	68f9      	ldr	r1, [r7, #12]
 800c114:	4401      	add	r1, r0
 800c116:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c11a:	4313      	orrs	r3, r2
 800c11c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	015a      	lsls	r2, r3, #5
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	4413      	add	r3, r2
 800c126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	0151      	lsls	r1, r2, #5
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	440a      	add	r2, r1
 800c134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c138:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c13c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b087      	sub	sp, #28
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	785b      	ldrb	r3, [r3, #1]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d14a      	bne.n	800c200 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c17e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c182:	f040 8086 	bne.w	800c292 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	015a      	lsls	r2, r3, #5
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	4413      	add	r3, r2
 800c190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	0151      	lsls	r1, r2, #5
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	440a      	add	r2, r1
 800c1a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	7812      	ldrb	r2, [r2, #0]
 800c1be:	0151      	lsls	r1, r2, #5
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	440a      	add	r2, r1
 800c1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d902      	bls.n	800c1e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c1e2:	e056      	b.n	800c292 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1fc:	d0e7      	beq.n	800c1ce <USB_EPStopXfer+0x82>
 800c1fe:	e048      	b.n	800c292 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	015a      	lsls	r2, r3, #5
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	4413      	add	r3, r2
 800c20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c218:	d13b      	bne.n	800c292 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	7812      	ldrb	r2, [r2, #0]
 800c22e:	0151      	lsls	r1, r2, #5
 800c230:	693a      	ldr	r2, [r7, #16]
 800c232:	440a      	add	r2, r1
 800c234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c238:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c23c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	7812      	ldrb	r2, [r2, #0]
 800c252:	0151      	lsls	r1, r2, #5
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	440a      	add	r2, r1
 800c258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c25c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c260:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c26e:	4293      	cmp	r3, r2
 800c270:	d902      	bls.n	800c278 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	75fb      	strb	r3, [r7, #23]
          break;
 800c276:	e00c      	b.n	800c292 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	015a      	lsls	r2, r3, #5
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	4413      	add	r3, r2
 800c282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c28c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c290:	d0e7      	beq.n	800c262 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c292:	7dfb      	ldrb	r3, [r7, #23]
}
 800c294:	4618      	mov	r0, r3
 800c296:	371c      	adds	r7, #28
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b089      	sub	sp, #36	; 0x24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	71fb      	strb	r3, [r7, #7]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c2be:	88bb      	ldrh	r3, [r7, #4]
 800c2c0:	3303      	adds	r3, #3
 800c2c2:	089b      	lsrs	r3, r3, #2
 800c2c4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	61bb      	str	r3, [r7, #24]
 800c2ca:	e018      	b.n	800c2fe <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	031a      	lsls	r2, r3, #12
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2d8:	461a      	mov	r2, r3
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	61bb      	str	r3, [r7, #24]
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	429a      	cmp	r2, r3
 800c304:	d3e2      	bcc.n	800c2cc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3724      	adds	r7, #36	; 0x24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c314:	b480      	push	{r7}
 800c316:	b08b      	sub	sp, #44	; 0x2c
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4613      	mov	r3, r2
 800c320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c32a:	88fb      	ldrh	r3, [r7, #6]
 800c32c:	089b      	lsrs	r3, r3, #2
 800c32e:	b29b      	uxth	r3, r3
 800c330:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c332:	88fb      	ldrh	r3, [r7, #6]
 800c334:	f003 0303 	and.w	r3, r3, #3
 800c338:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c33a:	2300      	movs	r3, #0
 800c33c:	623b      	str	r3, [r7, #32]
 800c33e:	e014      	b.n	800c36a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	3301      	adds	r3, #1
 800c350:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	3301      	adds	r3, #1
 800c356:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	3301      	adds	r3, #1
 800c35c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	3301      	adds	r3, #1
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	3301      	adds	r3, #1
 800c368:	623b      	str	r3, [r7, #32]
 800c36a:	6a3a      	ldr	r2, [r7, #32]
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d3e6      	bcc.n	800c340 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c372:	8bfb      	ldrh	r3, [r7, #30]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d01e      	beq.n	800c3b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c378:	2300      	movs	r3, #0
 800c37a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c382:	461a      	mov	r2, r3
 800c384:	f107 0310 	add.w	r3, r7, #16
 800c388:	6812      	ldr	r2, [r2, #0]
 800c38a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	fa22 f303 	lsr.w	r3, r2, r3
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	701a      	strb	r2, [r3, #0]
      i++;
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c3aa:	8bfb      	ldrh	r3, [r7, #30]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c3b0:	8bfb      	ldrh	r3, [r7, #30]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1ea      	bne.n	800c38c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	372c      	adds	r7, #44	; 0x2c
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	785b      	ldrb	r3, [r3, #1]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d12c      	bne.n	800c43a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	db12      	blt.n	800c418 <USB_EPSetStall+0x54>
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00f      	beq.n	800c418 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	0151      	lsls	r1, r2, #5
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	440a      	add	r2, r1
 800c40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c412:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c416:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	015a      	lsls	r2, r3, #5
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	4413      	add	r3, r2
 800c420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	0151      	lsls	r1, r2, #5
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	440a      	add	r2, r1
 800c42e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c436:	6013      	str	r3, [r2, #0]
 800c438:	e02b      	b.n	800c492 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	db12      	blt.n	800c472 <USB_EPSetStall+0xae>
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00f      	beq.n	800c472 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	015a      	lsls	r2, r3, #5
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	4413      	add	r3, r2
 800c45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	0151      	lsls	r1, r2, #5
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	440a      	add	r2, r1
 800c468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c46c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c470:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	0151      	lsls	r1, r2, #5
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	440a      	add	r2, r1
 800c488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c48c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	785b      	ldrb	r3, [r3, #1]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d128      	bne.n	800c50e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	0151      	lsls	r1, r2, #5
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	440a      	add	r2, r1
 800c4d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	791b      	ldrb	r3, [r3, #4]
 800c4e0:	2b03      	cmp	r3, #3
 800c4e2:	d003      	beq.n	800c4ec <USB_EPClearStall+0x4c>
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	791b      	ldrb	r3, [r3, #4]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d138      	bne.n	800c55e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	0151      	lsls	r1, r2, #5
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	440a      	add	r2, r1
 800c502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	e027      	b.n	800c55e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	015a      	lsls	r2, r3, #5
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	4413      	add	r3, r2
 800c516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	0151      	lsls	r1, r2, #5
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	440a      	add	r2, r1
 800c524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c52c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	791b      	ldrb	r3, [r3, #4]
 800c532:	2b03      	cmp	r3, #3
 800c534:	d003      	beq.n	800c53e <USB_EPClearStall+0x9e>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	791b      	ldrb	r3, [r3, #4]
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d10f      	bne.n	800c55e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	0151      	lsls	r1, r2, #5
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	440a      	add	r2, r1
 800c554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c55c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c58a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c58e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	78fb      	ldrb	r3, [r7, #3]
 800c59a:	011b      	lsls	r3, r3, #4
 800c59c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c5a0:	68f9      	ldr	r1, [r7, #12]
 800c5a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5d2:	f023 0303 	bic.w	r3, r3, #3
 800c5d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5e6:	f023 0302 	bic.w	r3, r3, #2
 800c5ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c614:	f023 0303 	bic.w	r3, r3, #3
 800c618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c628:	f043 0302 	orr.w	r3, r3, #2
 800c62c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3714      	adds	r7, #20
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	4013      	ands	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c654:	68fb      	ldr	r3, [r7, #12]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3714      	adds	r7, #20
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c662:	b480      	push	{r7}
 800c664:	b085      	sub	sp, #20
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67e:	69db      	ldr	r3, [r3, #28]
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	4013      	ands	r3, r2
 800c684:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	0c1b      	lsrs	r3, r3, #16
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c696:	b480      	push	{r7}
 800c698:	b085      	sub	sp, #20
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	b29b      	uxth	r3, r3
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b085      	sub	sp, #20
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	015a      	lsls	r2, r3, #5
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c706:	b480      	push	{r7}
 800c708:	b087      	sub	sp, #28
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	460b      	mov	r3, r1
 800c710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c728:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c72a:	78fb      	ldrb	r3, [r7, #3]
 800c72c:	f003 030f 	and.w	r3, r3, #15
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	fa22 f303 	lsr.w	r3, r2, r3
 800c736:	01db      	lsls	r3, r3, #7
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	4013      	ands	r3, r2
 800c752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c754:	68bb      	ldr	r3, [r7, #8]
}
 800c756:	4618      	mov	r0, r3
 800c758:	371c      	adds	r7, #28
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c762:	b480      	push	{r7}
 800c764:	b083      	sub	sp, #12
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	f003 0301 	and.w	r3, r3, #1
}
 800c772:	4618      	mov	r0, r3
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c77e:	b480      	push	{r7}
 800c780:	b085      	sub	sp, #20
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c798:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c79c:	f023 0307 	bic.w	r3, r3, #7
 800c7a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	333c      	adds	r3, #60	; 0x3c
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	4a1c      	ldr	r2, [pc, #112]	; (800c850 <USB_EP0_OutStart+0x8c>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d90a      	bls.n	800c7fa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7f4:	d101      	bne.n	800c7fa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e024      	b.n	800c844 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c800:	461a      	mov	r2, r3
 800c802:	2300      	movs	r3, #0
 800c804:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c828:	f043 0318 	orr.w	r3, r3, #24
 800c82c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c83c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c840:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	4f54300a 	.word	0x4f54300a

0800c854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3301      	adds	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4a13      	ldr	r2, [pc, #76]	; (800c8b8 <USB_CoreReset+0x64>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d901      	bls.n	800c872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	e01b      	b.n	800c8aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	daf2      	bge.n	800c860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c87a:	2300      	movs	r3, #0
 800c87c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	f043 0201 	orr.w	r2, r3, #1
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4a09      	ldr	r2, [pc, #36]	; (800c8b8 <USB_CoreReset+0x64>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d901      	bls.n	800c89c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c898:	2303      	movs	r3, #3
 800c89a:	e006      	b.n	800c8aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d0f0      	beq.n	800c88a <USB_CoreReset+0x36>

  return HAL_OK;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	00030d40 	.word	0x00030d40

0800c8bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c8c0:	4904      	ldr	r1, [pc, #16]	; (800c8d4 <MX_FATFS_Init+0x18>)
 800c8c2:	4805      	ldr	r0, [pc, #20]	; (800c8d8 <MX_FATFS_Init+0x1c>)
 800c8c4:	f001 fe74 	bl	800e5b0 <FATFS_LinkDriver>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	4b03      	ldr	r3, [pc, #12]	; (800c8dc <MX_FATFS_Init+0x20>)
 800c8ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c8d0:	bf00      	nop
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	20000cfc 	.word	0x20000cfc
 800c8d8:	0801201c 	.word	0x0801201c
 800c8dc:	20000cf8 	.word	0x20000cf8

0800c8e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c8ea:	f000 f879 	bl	800c9e0 <BSP_SD_IsDetected>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d001      	beq.n	800c8f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	e012      	b.n	800c91e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c8f8:	480b      	ldr	r0, [pc, #44]	; (800c928 <BSP_SD_Init+0x48>)
 800c8fa:	f7fa f8b1 	bl	8006a60 <HAL_SD_Init>
 800c8fe:	4603      	mov	r3, r0
 800c900:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c902:	79fb      	ldrb	r3, [r7, #7]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d109      	bne.n	800c91c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c90c:	4806      	ldr	r0, [pc, #24]	; (800c928 <BSP_SD_Init+0x48>)
 800c90e:	f7fa ff7d 	bl	800780c <HAL_SD_ConfigWideBusOperation>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d001      	beq.n	800c91c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c91c:	79fb      	ldrb	r3, [r7, #7]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	20000420 	.word	0x20000420

0800c92c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af02      	add	r7, sp, #8
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	68f9      	ldr	r1, [r7, #12]
 800c948:	4806      	ldr	r0, [pc, #24]	; (800c964 <BSP_SD_ReadBlocks+0x38>)
 800c94a:	f7fa f9b1 	bl	8006cb0 <HAL_SD_ReadBlocks>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d001      	beq.n	800c958 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c958:	7dfb      	ldrb	r3, [r7, #23]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3718      	adds	r7, #24
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	20000420 	.word	0x20000420

0800c968 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	68f9      	ldr	r1, [r7, #12]
 800c984:	4806      	ldr	r0, [pc, #24]	; (800c9a0 <BSP_SD_WriteBlocks+0x38>)
 800c986:	f7fa fb25 	bl	8006fd4 <HAL_SD_WriteBlocks>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c994:	7dfb      	ldrb	r3, [r7, #23]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20000420 	.word	0x20000420

0800c9a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c9a8:	4805      	ldr	r0, [pc, #20]	; (800c9c0 <BSP_SD_GetCardState+0x1c>)
 800c9aa:	f7fb f843 	bl	8007a34 <HAL_SD_GetCardState>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	bf14      	ite	ne
 800c9b4:	2301      	movne	r3, #1
 800c9b6:	2300      	moveq	r3, #0
 800c9b8:	b2db      	uxtb	r3, r3
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20000420 	.word	0x20000420

0800c9c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c9cc:	6879      	ldr	r1, [r7, #4]
 800c9ce:	4803      	ldr	r0, [pc, #12]	; (800c9dc <BSP_SD_GetCardInfo+0x18>)
 800c9d0:	f7fa fef0 	bl	80077b4 <HAL_SD_GetCardInfo>
}
 800c9d4:	bf00      	nop
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	20000420 	.word	0x20000420

0800c9e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c9ea:	f000 f80b 	bl	800ca04 <BSP_PlatformIsDetected>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	b2db      	uxtb	r3, r3
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ca0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ca12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ca16:	f7f5 ffb5 	bl	8002984 <HAL_GPIO_ReadPin>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800ca20:	2300      	movs	r3, #0
 800ca22:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ca24:	79fb      	ldrb	r3, [r7, #7]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
	...

0800ca30 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ca3a:	4b0b      	ldr	r3, [pc, #44]	; (800ca68 <SD_CheckStatus+0x38>)
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ca40:	f7ff ffb0 	bl	800c9a4 <BSP_SD_GetCardState>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d107      	bne.n	800ca5a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ca4a:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <SD_CheckStatus+0x38>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f023 0301 	bic.w	r3, r3, #1
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	4b04      	ldr	r3, [pc, #16]	; (800ca68 <SD_CheckStatus+0x38>)
 800ca58:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ca5a:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <SD_CheckStatus+0x38>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	b2db      	uxtb	r3, r3
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	20000011 	.word	0x20000011

0800ca6c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ca76:	4b0b      	ldr	r3, [pc, #44]	; (800caa4 <SD_initialize+0x38>)
 800ca78:	2201      	movs	r2, #1
 800ca7a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ca7c:	f7ff ff30 	bl	800c8e0 <BSP_SD_Init>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d107      	bne.n	800ca96 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ca86:	79fb      	ldrb	r3, [r7, #7]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff ffd1 	bl	800ca30 <SD_CheckStatus>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <SD_initialize+0x38>)
 800ca94:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ca96:	4b03      	ldr	r3, [pc, #12]	; (800caa4 <SD_initialize+0x38>)
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	b2db      	uxtb	r3, r3
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20000011 	.word	0x20000011

0800caa8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cab2:	79fb      	ldrb	r3, [r7, #7]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7ff ffbb 	bl	800ca30 <SD_CheckStatus>
 800caba:	4603      	mov	r3, r0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60b9      	str	r1, [r7, #8]
 800cacc:	607a      	str	r2, [r7, #4]
 800cace:	603b      	str	r3, [r7, #0]
 800cad0:	4603      	mov	r3, r0
 800cad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	68b8      	ldr	r0, [r7, #8]
 800cae2:	f7ff ff23 	bl	800c92c <BSP_SD_ReadBlocks>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d107      	bne.n	800cafc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800caec:	bf00      	nop
 800caee:	f7ff ff59 	bl	800c9a4 <BSP_SD_GetCardState>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1fa      	bne.n	800caee <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cb1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	6879      	ldr	r1, [r7, #4]
 800cb22:	68b8      	ldr	r0, [r7, #8]
 800cb24:	f7ff ff20 	bl	800c968 <BSP_SD_WriteBlocks>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d107      	bne.n	800cb3e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cb2e:	bf00      	nop
 800cb30:	f7ff ff38 	bl	800c9a4 <BSP_SD_GetCardState>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1fa      	bne.n	800cb30 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	; 0x30
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	603a      	str	r2, [r7, #0]
 800cb52:	71fb      	strb	r3, [r7, #7]
 800cb54:	460b      	mov	r3, r1
 800cb56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb5e:	4b25      	ldr	r3, [pc, #148]	; (800cbf4 <SD_ioctl+0xac>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <SD_ioctl+0x28>
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e03c      	b.n	800cbea <SD_ioctl+0xa2>

  switch (cmd)
 800cb70:	79bb      	ldrb	r3, [r7, #6]
 800cb72:	2b03      	cmp	r3, #3
 800cb74:	d834      	bhi.n	800cbe0 <SD_ioctl+0x98>
 800cb76:	a201      	add	r2, pc, #4	; (adr r2, 800cb7c <SD_ioctl+0x34>)
 800cb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7c:	0800cb8d 	.word	0x0800cb8d
 800cb80:	0800cb95 	.word	0x0800cb95
 800cb84:	0800cbad 	.word	0x0800cbad
 800cb88:	0800cbc7 	.word	0x0800cbc7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb92:	e028      	b.n	800cbe6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb94:	f107 0308 	add.w	r3, r7, #8
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7ff ff13 	bl	800c9c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb9e:	6a3a      	ldr	r2, [r7, #32]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbaa:	e01c      	b.n	800cbe6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbac:	f107 0308 	add.w	r3, r7, #8
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7ff ff07 	bl	800c9c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbc4:	e00f      	b.n	800cbe6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbc6:	f107 0308 	add.w	r3, r7, #8
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7ff fefa 	bl	800c9c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	0a5a      	lsrs	r2, r3, #9
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbde:	e002      	b.n	800cbe6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cbe0:	2304      	movs	r3, #4
 800cbe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cbe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3730      	adds	r7, #48	; 0x30
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20000011 	.word	0x20000011

0800cbf8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cc04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cc08:	f002 faae 	bl	800f168 <USBD_static_malloc>
 800cc0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	e066      	b.n	800ccee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	7c1b      	ldrb	r3, [r3, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d119      	bne.n	800cc64 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cc30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc34:	2202      	movs	r2, #2
 800cc36:	2181      	movs	r1, #129	; 0x81
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f002 f8cf 	bl	800eddc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2201      	movs	r2, #1
 800cc42:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc48:	2202      	movs	r2, #2
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f002 f8c5 	bl	800eddc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2210      	movs	r2, #16
 800cc5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cc62:	e016      	b.n	800cc92 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cc64:	2340      	movs	r3, #64	; 0x40
 800cc66:	2202      	movs	r2, #2
 800cc68:	2181      	movs	r1, #129	; 0x81
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f002 f8b6 	bl	800eddc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2201      	movs	r2, #1
 800cc74:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc76:	2340      	movs	r3, #64	; 0x40
 800cc78:	2202      	movs	r2, #2
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f002 f8ad 	bl	800eddc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2210      	movs	r2, #16
 800cc8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc92:	2308      	movs	r3, #8
 800cc94:	2203      	movs	r2, #3
 800cc96:	2182      	movs	r1, #130	; 0x82
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f002 f89f 	bl	800eddc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2201      	movs	r2, #1
 800cca2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7c1b      	ldrb	r3, [r3, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d109      	bne.n	800ccdc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f002 f9fb 	bl	800f0d0 <USBD_LL_PrepareReceive>
 800ccda:	e007      	b.n	800ccec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cce2:	2340      	movs	r3, #64	; 0x40
 800cce4:	2101      	movs	r1, #1
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f002 f9f2 	bl	800f0d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b082      	sub	sp, #8
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	460b      	mov	r3, r1
 800cd00:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cd02:	2181      	movs	r1, #129	; 0x81
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f002 f8a7 	bl	800ee58 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cd10:	2101      	movs	r1, #1
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f002 f8a0 	bl	800ee58 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cd20:	2182      	movs	r1, #130	; 0x82
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f002 f898 	bl	800ee58 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00e      	beq.n	800cd60 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd52:	4618      	mov	r0, r3
 800cd54:	f002 fa16 	bl	800f184 <USBD_static_free>
    pdev->pClassData = NULL;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b086      	sub	sp, #24
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd82:	2300      	movs	r3, #0
 800cd84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd86:	2300      	movs	r3, #0
 800cd88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d101      	bne.n	800cd94 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cd90:	2303      	movs	r3, #3
 800cd92:	e0af      	b.n	800cef4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d03f      	beq.n	800ce20 <USBD_CDC_Setup+0xb4>
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	f040 809f 	bne.w	800cee4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	88db      	ldrh	r3, [r3, #6]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d02e      	beq.n	800ce0c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	b25b      	sxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	da16      	bge.n	800cde6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cdc4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	88d2      	ldrh	r2, [r2, #6]
 800cdca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	88db      	ldrh	r3, [r3, #6]
 800cdd0:	2b07      	cmp	r3, #7
 800cdd2:	bf28      	it	cs
 800cdd4:	2307      	movcs	r3, #7
 800cdd6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	89fa      	ldrh	r2, [r7, #14]
 800cddc:	4619      	mov	r1, r3
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f001 fb19 	bl	800e416 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cde4:	e085      	b.n	800cef2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	785a      	ldrb	r2, [r3, #1]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	88db      	ldrh	r3, [r3, #6]
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cdfc:	6939      	ldr	r1, [r7, #16]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	88db      	ldrh	r3, [r3, #6]
 800ce02:	461a      	mov	r2, r3
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f001 fb32 	bl	800e46e <USBD_CtlPrepareRx>
      break;
 800ce0a:	e072      	b.n	800cef2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	7850      	ldrb	r0, [r2, #1]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	4798      	blx	r3
      break;
 800ce1e:	e068      	b.n	800cef2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	785b      	ldrb	r3, [r3, #1]
 800ce24:	2b0b      	cmp	r3, #11
 800ce26:	d852      	bhi.n	800cece <USBD_CDC_Setup+0x162>
 800ce28:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <USBD_CDC_Setup+0xc4>)
 800ce2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2e:	bf00      	nop
 800ce30:	0800ce61 	.word	0x0800ce61
 800ce34:	0800cedd 	.word	0x0800cedd
 800ce38:	0800cecf 	.word	0x0800cecf
 800ce3c:	0800cecf 	.word	0x0800cecf
 800ce40:	0800cecf 	.word	0x0800cecf
 800ce44:	0800cecf 	.word	0x0800cecf
 800ce48:	0800cecf 	.word	0x0800cecf
 800ce4c:	0800cecf 	.word	0x0800cecf
 800ce50:	0800cecf 	.word	0x0800cecf
 800ce54:	0800cecf 	.word	0x0800cecf
 800ce58:	0800ce8b 	.word	0x0800ce8b
 800ce5c:	0800ceb5 	.word	0x0800ceb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d107      	bne.n	800ce7c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce6c:	f107 030a 	add.w	r3, r7, #10
 800ce70:	2202      	movs	r2, #2
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 face 	bl	800e416 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce7a:	e032      	b.n	800cee2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 fa58 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce84:	2303      	movs	r3, #3
 800ce86:	75fb      	strb	r3, [r7, #23]
          break;
 800ce88:	e02b      	b.n	800cee2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d107      	bne.n	800cea6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce96:	f107 030d 	add.w	r3, r7, #13
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f001 fab9 	bl	800e416 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cea4:	e01d      	b.n	800cee2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f001 fa43 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	75fb      	strb	r3, [r7, #23]
          break;
 800ceb2:	e016      	b.n	800cee2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b03      	cmp	r3, #3
 800cebe:	d00f      	beq.n	800cee0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f001 fa36 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800cec8:	2303      	movs	r3, #3
 800ceca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cecc:	e008      	b.n	800cee0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f001 fa2f 	bl	800e334 <USBD_CtlError>
          ret = USBD_FAIL;
 800ced6:	2303      	movs	r3, #3
 800ced8:	75fb      	strb	r3, [r7, #23]
          break;
 800ceda:	e002      	b.n	800cee2 <USBD_CDC_Setup+0x176>
          break;
 800cedc:	bf00      	nop
 800cede:	e008      	b.n	800cef2 <USBD_CDC_Setup+0x186>
          break;
 800cee0:	bf00      	nop
      }
      break;
 800cee2:	e006      	b.n	800cef2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cee4:	6839      	ldr	r1, [r7, #0]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f001 fa24 	bl	800e334 <USBD_CtlError>
      ret = USBD_FAIL;
 800ceec:	2303      	movs	r3, #3
 800ceee:	75fb      	strb	r3, [r7, #23]
      break;
 800cef0:	bf00      	nop
  }

  return (uint8_t)ret;
 800cef2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	e04f      	b.n	800cfbe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cf26:	78fa      	ldrb	r2, [r7, #3]
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	440b      	add	r3, r1
 800cf34:	3318      	adds	r3, #24
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d029      	beq.n	800cf90 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cf3c:	78fa      	ldrb	r2, [r7, #3]
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	3318      	adds	r3, #24
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	78f9      	ldrb	r1, [r7, #3]
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	460b      	mov	r3, r1
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	440b      	add	r3, r1
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4403      	add	r3, r0
 800cf5c:	3348      	adds	r3, #72	; 0x48
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf64:	fb01 f303 	mul.w	r3, r1, r3
 800cf68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d110      	bne.n	800cf90 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cf6e:	78fa      	ldrb	r2, [r7, #3]
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	4613      	mov	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	440b      	add	r3, r1
 800cf7c:	3318      	adds	r3, #24
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf82:	78f9      	ldrb	r1, [r7, #3]
 800cf84:	2300      	movs	r3, #0
 800cf86:	2200      	movs	r2, #0
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f002 f869 	bl	800f060 <USBD_LL_Transmit>
 800cf8e:	e015      	b.n	800cfbc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cfb8:	78fa      	ldrb	r2, [r7, #3]
 800cfba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e015      	b.n	800d014 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cfe8:	78fb      	ldrb	r3, [r7, #3]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f002 f8a7 	bl	800f140 <USBD_LL_GetRxDataSize>
 800cff2:	4602      	mov	r2, r0
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d00e:	4611      	mov	r1, r2
 800d010:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d02a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d032:	2303      	movs	r3, #3
 800d034:	e01b      	b.n	800d06e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d015      	beq.n	800d06c <USBD_CDC_EP0_RxReady+0x50>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d046:	2bff      	cmp	r3, #255	; 0xff
 800d048:	d010      	beq.n	800d06c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d058:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d060:	b292      	uxth	r2, r2
 800d062:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	22ff      	movs	r2, #255	; 0xff
 800d068:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2243      	movs	r2, #67	; 0x43
 800d084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d086:	4b03      	ldr	r3, [pc, #12]	; (800d094 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d088:	4618      	mov	r0, r3
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	2000009c 	.word	0x2000009c

0800d098 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2243      	movs	r2, #67	; 0x43
 800d0a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d0a6:	4b03      	ldr	r3, [pc, #12]	; (800d0b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	20000058 	.word	0x20000058

0800d0b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2243      	movs	r2, #67	; 0x43
 800d0c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d0c6:	4b03      	ldr	r3, [pc, #12]	; (800d0d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	200000e0 	.word	0x200000e0

0800d0d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	220a      	movs	r2, #10
 800d0e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d0e6:	4b03      	ldr	r3, [pc, #12]	; (800d0f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	20000014 	.word	0x20000014

0800d0f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d101      	bne.n	800d10c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d108:	2303      	movs	r3, #3
 800d10a:	e004      	b.n	800d116 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d122:	b480      	push	{r7}
 800d124:	b087      	sub	sp, #28
 800d126:	af00      	add	r7, sp, #0
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d134:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d13c:	2303      	movs	r3, #3
 800d13e:	e008      	b.n	800d152 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	371c      	adds	r7, #28
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d15e:	b480      	push	{r7}
 800d160:	b085      	sub	sp, #20
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d16e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d176:	2303      	movs	r3, #3
 800d178:	e004      	b.n	800d184 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d19e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	e01a      	b.n	800d1e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d114      	bne.n	800d1e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1da:	2181      	movs	r1, #129	; 0x81
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f001 ff3f 	bl	800f060 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e016      	b.n	800d23c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	7c1b      	ldrb	r3, [r3, #16]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d109      	bne.n	800d22a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d21c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d220:	2101      	movs	r1, #1
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f001 ff54 	bl	800f0d0 <USBD_LL_PrepareReceive>
 800d228:	e007      	b.n	800d23a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d230:	2340      	movs	r3, #64	; 0x40
 800d232:	2101      	movs	r1, #1
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f001 ff4b 	bl	800f0d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4613      	mov	r3, r2
 800d250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d258:	2303      	movs	r3, #3
 800d25a:	e01f      	b.n	800d29c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	79fa      	ldrb	r2, [r7, #7]
 800d28e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f001 fd27 	bl	800ece4 <USBD_LL_Init>
 800d296:	4603      	mov	r3, r0
 800d298:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d101      	bne.n	800d2bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e016      	b.n	800d2ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00b      	beq.n	800d2e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	f107 020e 	add.w	r2, r7, #14
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4798      	blx	r3
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 fd3c 	bl	800ed78 <USBD_LL_Start>
 800d300:	4603      	mov	r3, r0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b083      	sub	sp, #12
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d32c:	2303      	movs	r3, #3
 800d32e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d336:	2b00      	cmp	r3, #0
 800d338:	d009      	beq.n	800d34e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	78fa      	ldrb	r2, [r7, #3]
 800d344:	4611      	mov	r1, r2
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	4798      	blx	r3
 800d34a:	4603      	mov	r3, r0
 800d34c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d007      	beq.n	800d37e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	78fa      	ldrb	r2, [r7, #3]
 800d378:	4611      	mov	r1, r2
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	4798      	blx	r3
  }

  return USBD_OK;
 800d37e:	2300      	movs	r3, #0
}
 800d380:	4618      	mov	r0, r3
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 ff90 	bl	800e2c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d3bc:	f003 031f 	and.w	r3, r3, #31
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d01a      	beq.n	800d3fa <USBD_LL_SetupStage+0x72>
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d822      	bhi.n	800d40e <USBD_LL_SetupStage+0x86>
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <USBD_LL_SetupStage+0x4a>
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d00a      	beq.n	800d3e6 <USBD_LL_SetupStage+0x5e>
 800d3d0:	e01d      	b.n	800d40e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fa62 	bl	800d8a4 <USBD_StdDevReq>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3e4:	e020      	b.n	800d428 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 fac6 	bl	800d980 <USBD_StdItfReq>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d3f8:	e016      	b.n	800d428 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fb05 	bl	800da12 <USBD_StdEPReq>
 800d408:	4603      	mov	r3, r0
 800d40a:	73fb      	strb	r3, [r7, #15]
      break;
 800d40c:	e00c      	b.n	800d428 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	4619      	mov	r1, r3
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 fd51 	bl	800eec4 <USBD_LL_StallEP>
 800d422:	4603      	mov	r3, r0
 800d424:	73fb      	strb	r3, [r7, #15]
      break;
 800d426:	bf00      	nop
  }

  return ret;
 800d428:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	460b      	mov	r3, r1
 800d43c:	607a      	str	r2, [r7, #4]
 800d43e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d440:	7afb      	ldrb	r3, [r7, #11]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d138      	bne.n	800d4b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d44c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d454:	2b03      	cmp	r3, #3
 800d456:	d14a      	bne.n	800d4ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	689a      	ldr	r2, [r3, #8]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	429a      	cmp	r2, r3
 800d462:	d913      	bls.n	800d48c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	689a      	ldr	r2, [r3, #8]
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	1ad2      	subs	r2, r2, r3
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	4293      	cmp	r3, r2
 800d47c:	bf28      	it	cs
 800d47e:	4613      	movcs	r3, r2
 800d480:	461a      	mov	r2, r3
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f001 f80f 	bl	800e4a8 <USBD_CtlContinueRx>
 800d48a:	e030      	b.n	800d4ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b03      	cmp	r3, #3
 800d496:	d10b      	bne.n	800d4b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d005      	beq.n	800d4b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f001 f80a 	bl	800e4ca <USBD_CtlSendStatus>
 800d4b6:	e01a      	b.n	800d4ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	2b03      	cmp	r3, #3
 800d4c2:	d114      	bne.n	800d4ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00e      	beq.n	800d4ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	7afa      	ldrb	r2, [r7, #11]
 800d4da:	4611      	mov	r1, r2
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	4798      	blx	r3
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d4e4:	7dfb      	ldrb	r3, [r7, #23]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	e000      	b.n	800d4f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	460b      	mov	r3, r1
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d506:	7afb      	ldrb	r3, [r7, #11]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d16b      	bne.n	800d5e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	3314      	adds	r3, #20
 800d510:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d156      	bne.n	800d5ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	429a      	cmp	r2, r3
 800d526:	d914      	bls.n	800d552 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	689a      	ldr	r2, [r3, #8]
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	1ad2      	subs	r2, r2, r3
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	461a      	mov	r2, r3
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 ff84 	bl	800e44c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d544:	2300      	movs	r3, #0
 800d546:	2200      	movs	r2, #0
 800d548:	2100      	movs	r1, #0
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f001 fdc0 	bl	800f0d0 <USBD_LL_PrepareReceive>
 800d550:	e03b      	b.n	800d5ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	68da      	ldr	r2, [r3, #12]
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d11c      	bne.n	800d598 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	685a      	ldr	r2, [r3, #4]
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d566:	429a      	cmp	r2, r3
 800d568:	d316      	bcc.n	800d598 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	685a      	ldr	r2, [r3, #4]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d574:	429a      	cmp	r2, r3
 800d576:	d20f      	bcs.n	800d598 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d578:	2200      	movs	r2, #0
 800d57a:	2100      	movs	r1, #0
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 ff65 	bl	800e44c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d58a:	2300      	movs	r3, #0
 800d58c:	2200      	movs	r2, #0
 800d58e:	2100      	movs	r1, #0
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f001 fd9d 	bl	800f0d0 <USBD_LL_PrepareReceive>
 800d596:	e018      	b.n	800d5ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d10b      	bne.n	800d5bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d005      	beq.n	800d5bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5bc:	2180      	movs	r1, #128	; 0x80
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f001 fc80 	bl	800eec4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 ff93 	bl	800e4f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d122      	bne.n	800d61a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f7ff fe98 	bl	800d30a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d5e2:	e01a      	b.n	800d61a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d114      	bne.n	800d61a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00e      	beq.n	800d61a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	7afa      	ldrb	r2, [r7, #11]
 800d606:	4611      	mov	r1, r2
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	4798      	blx	r3
 800d60c:	4603      	mov	r3, r0
 800d60e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d610:	7dfb      	ldrb	r3, [r7, #23]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d616:	7dfb      	ldrb	r3, [r7, #23]
 800d618:	e000      	b.n	800d61c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d654:	2303      	movs	r3, #3
 800d656:	e02f      	b.n	800d6b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00f      	beq.n	800d682 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	6852      	ldr	r2, [r2, #4]
 800d67a:	b2d2      	uxtb	r2, r2
 800d67c:	4611      	mov	r1, r2
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d682:	2340      	movs	r3, #64	; 0x40
 800d684:	2200      	movs	r2, #0
 800d686:	2100      	movs	r1, #0
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f001 fba7 	bl	800eddc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2240      	movs	r2, #64	; 0x40
 800d69a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d69e:	2340      	movs	r3, #64	; 0x40
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2180      	movs	r1, #128	; 0x80
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f001 fb99 	bl	800eddc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2240      	movs	r2, #64	; 0x40
 800d6b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	78fa      	ldrb	r2, [r7, #3]
 800d6d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2204      	movs	r2, #4
 800d6fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b04      	cmp	r3, #4
 800d71e:	d106      	bne.n	800d72e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d726:	b2da      	uxtb	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d101      	bne.n	800d752 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d74e:	2303      	movs	r3, #3
 800d750:	e012      	b.n	800d778 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d10b      	bne.n	800d776 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d764:	69db      	ldr	r3, [r3, #28]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d770:	69db      	ldr	r3, [r3, #28]
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d796:	2303      	movs	r3, #3
 800d798:	e014      	b.n	800d7c4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	d10d      	bne.n	800d7c2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d007      	beq.n	800d7c2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b8:	6a1b      	ldr	r3, [r3, #32]
 800d7ba:	78fa      	ldrb	r2, [r7, #3]
 800d7bc:	4611      	mov	r1, r2
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e014      	b.n	800d810 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d10d      	bne.n	800d80e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d007      	beq.n	800d80e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d806:	78fa      	ldrb	r2, [r7, #3]
 800d808:	4611      	mov	r1, r2
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d844:	2b00      	cmp	r3, #0
 800d846:	d009      	beq.n	800d85c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	6852      	ldr	r2, [r2, #4]
 800d854:	b2d2      	uxtb	r2, r2
 800d856:	4611      	mov	r1, r2
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	4798      	blx	r3
  }

  return USBD_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d866:	b480      	push	{r7}
 800d868:	b087      	sub	sp, #28
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	3301      	adds	r3, #1
 800d87c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d884:	8a3b      	ldrh	r3, [r7, #16]
 800d886:	021b      	lsls	r3, r3, #8
 800d888:	b21a      	sxth	r2, r3
 800d88a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d88e:	4313      	orrs	r3, r2
 800d890:	b21b      	sxth	r3, r3
 800d892:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d894:	89fb      	ldrh	r3, [r7, #14]
}
 800d896:	4618      	mov	r0, r3
 800d898:	371c      	adds	r7, #28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
	...

0800d8a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8ba:	2b40      	cmp	r3, #64	; 0x40
 800d8bc:	d005      	beq.n	800d8ca <USBD_StdDevReq+0x26>
 800d8be:	2b40      	cmp	r3, #64	; 0x40
 800d8c0:	d853      	bhi.n	800d96a <USBD_StdDevReq+0xc6>
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00b      	beq.n	800d8de <USBD_StdDevReq+0x3a>
 800d8c6:	2b20      	cmp	r3, #32
 800d8c8:	d14f      	bne.n	800d96a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	4798      	blx	r3
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]
      break;
 800d8dc:	e04a      	b.n	800d974 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	785b      	ldrb	r3, [r3, #1]
 800d8e2:	2b09      	cmp	r3, #9
 800d8e4:	d83b      	bhi.n	800d95e <USBD_StdDevReq+0xba>
 800d8e6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ec <USBD_StdDevReq+0x48>)
 800d8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ec:	0800d941 	.word	0x0800d941
 800d8f0:	0800d955 	.word	0x0800d955
 800d8f4:	0800d95f 	.word	0x0800d95f
 800d8f8:	0800d94b 	.word	0x0800d94b
 800d8fc:	0800d95f 	.word	0x0800d95f
 800d900:	0800d91f 	.word	0x0800d91f
 800d904:	0800d915 	.word	0x0800d915
 800d908:	0800d95f 	.word	0x0800d95f
 800d90c:	0800d937 	.word	0x0800d937
 800d910:	0800d929 	.word	0x0800d929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d914:	6839      	ldr	r1, [r7, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f9de 	bl	800dcd8 <USBD_GetDescriptor>
          break;
 800d91c:	e024      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fb43 	bl	800dfac <USBD_SetAddress>
          break;
 800d926:	e01f      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fb82 	bl	800e034 <USBD_SetConfig>
 800d930:	4603      	mov	r3, r0
 800d932:	73fb      	strb	r3, [r7, #15]
          break;
 800d934:	e018      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fc21 	bl	800e180 <USBD_GetConfig>
          break;
 800d93e:	e013      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fc52 	bl	800e1ec <USBD_GetStatus>
          break;
 800d948:	e00e      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fc81 	bl	800e254 <USBD_SetFeature>
          break;
 800d952:	e009      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 fc90 	bl	800e27c <USBD_ClrFeature>
          break;
 800d95c:	e004      	b.n	800d968 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 fce7 	bl	800e334 <USBD_CtlError>
          break;
 800d966:	bf00      	nop
      }
      break;
 800d968:	e004      	b.n	800d974 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fce1 	bl	800e334 <USBD_CtlError>
      break;
 800d972:	bf00      	nop
  }

  return ret;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop

0800d980 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d996:	2b40      	cmp	r3, #64	; 0x40
 800d998:	d005      	beq.n	800d9a6 <USBD_StdItfReq+0x26>
 800d99a:	2b40      	cmp	r3, #64	; 0x40
 800d99c:	d82f      	bhi.n	800d9fe <USBD_StdItfReq+0x7e>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <USBD_StdItfReq+0x26>
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	d12b      	bne.n	800d9fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d81d      	bhi.n	800d9f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	889b      	ldrh	r3, [r3, #4]
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d813      	bhi.n	800d9e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	4798      	blx	r3
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	88db      	ldrh	r3, [r3, #6]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d110      	bne.n	800d9fa <USBD_StdItfReq+0x7a>
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10d      	bne.n	800d9fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fd73 	bl	800e4ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d9e4:	e009      	b.n	800d9fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fca3 	bl	800e334 <USBD_CtlError>
          break;
 800d9ee:	e004      	b.n	800d9fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d9f0:	6839      	ldr	r1, [r7, #0]
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fc9e 	bl	800e334 <USBD_CtlError>
          break;
 800d9f8:	e000      	b.n	800d9fc <USBD_StdItfReq+0x7c>
          break;
 800d9fa:	bf00      	nop
      }
      break;
 800d9fc:	e004      	b.n	800da08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fc97 	bl	800e334 <USBD_CtlError>
      break;
 800da06:	bf00      	nop
  }

  return ret;
 800da08:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b084      	sub	sp, #16
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	889b      	ldrh	r3, [r3, #4]
 800da24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da2e:	2b40      	cmp	r3, #64	; 0x40
 800da30:	d007      	beq.n	800da42 <USBD_StdEPReq+0x30>
 800da32:	2b40      	cmp	r3, #64	; 0x40
 800da34:	f200 8145 	bhi.w	800dcc2 <USBD_StdEPReq+0x2b0>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00c      	beq.n	800da56 <USBD_StdEPReq+0x44>
 800da3c:	2b20      	cmp	r3, #32
 800da3e:	f040 8140 	bne.w	800dcc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	4798      	blx	r3
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
      break;
 800da54:	e13a      	b.n	800dccc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	785b      	ldrb	r3, [r3, #1]
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	d007      	beq.n	800da6e <USBD_StdEPReq+0x5c>
 800da5e:	2b03      	cmp	r3, #3
 800da60:	f300 8129 	bgt.w	800dcb6 <USBD_StdEPReq+0x2a4>
 800da64:	2b00      	cmp	r3, #0
 800da66:	d07f      	beq.n	800db68 <USBD_StdEPReq+0x156>
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d03c      	beq.n	800dae6 <USBD_StdEPReq+0xd4>
 800da6c:	e123      	b.n	800dcb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da74:	b2db      	uxtb	r3, r3
 800da76:	2b02      	cmp	r3, #2
 800da78:	d002      	beq.n	800da80 <USBD_StdEPReq+0x6e>
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d016      	beq.n	800daac <USBD_StdEPReq+0x9a>
 800da7e:	e02c      	b.n	800dada <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da80:	7bbb      	ldrb	r3, [r7, #14]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00d      	beq.n	800daa2 <USBD_StdEPReq+0x90>
 800da86:	7bbb      	ldrb	r3, [r7, #14]
 800da88:	2b80      	cmp	r3, #128	; 0x80
 800da8a:	d00a      	beq.n	800daa2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f001 fa17 	bl	800eec4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da96:	2180      	movs	r1, #128	; 0x80
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f001 fa13 	bl	800eec4 <USBD_LL_StallEP>
 800da9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800daa0:	e020      	b.n	800dae4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 fc45 	bl	800e334 <USBD_CtlError>
              break;
 800daaa:	e01b      	b.n	800dae4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	885b      	ldrh	r3, [r3, #2]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d10e      	bne.n	800dad2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dab4:	7bbb      	ldrb	r3, [r7, #14]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00b      	beq.n	800dad2 <USBD_StdEPReq+0xc0>
 800daba:	7bbb      	ldrb	r3, [r7, #14]
 800dabc:	2b80      	cmp	r3, #128	; 0x80
 800dabe:	d008      	beq.n	800dad2 <USBD_StdEPReq+0xc0>
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	88db      	ldrh	r3, [r3, #6]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d104      	bne.n	800dad2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 f9f9 	bl	800eec4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fcf9 	bl	800e4ca <USBD_CtlSendStatus>

              break;
 800dad8:	e004      	b.n	800dae4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 fc29 	bl	800e334 <USBD_CtlError>
              break;
 800dae2:	bf00      	nop
          }
          break;
 800dae4:	e0ec      	b.n	800dcc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d002      	beq.n	800daf8 <USBD_StdEPReq+0xe6>
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d016      	beq.n	800db24 <USBD_StdEPReq+0x112>
 800daf6:	e030      	b.n	800db5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800daf8:	7bbb      	ldrb	r3, [r7, #14]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00d      	beq.n	800db1a <USBD_StdEPReq+0x108>
 800dafe:	7bbb      	ldrb	r3, [r7, #14]
 800db00:	2b80      	cmp	r3, #128	; 0x80
 800db02:	d00a      	beq.n	800db1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800db04:	7bbb      	ldrb	r3, [r7, #14]
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f001 f9db 	bl	800eec4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800db0e:	2180      	movs	r1, #128	; 0x80
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f001 f9d7 	bl	800eec4 <USBD_LL_StallEP>
 800db16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db18:	e025      	b.n	800db66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fc09 	bl	800e334 <USBD_CtlError>
              break;
 800db22:	e020      	b.n	800db66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	885b      	ldrh	r3, [r3, #2]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d11b      	bne.n	800db64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db32:	2b00      	cmp	r3, #0
 800db34:	d004      	beq.n	800db40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800db36:	7bbb      	ldrb	r3, [r7, #14]
 800db38:	4619      	mov	r1, r3
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f001 f9f8 	bl	800ef30 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fcc2 	bl	800e4ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	4798      	blx	r3
 800db54:	4603      	mov	r3, r0
 800db56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800db58:	e004      	b.n	800db64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fbe9 	bl	800e334 <USBD_CtlError>
              break;
 800db62:	e000      	b.n	800db66 <USBD_StdEPReq+0x154>
              break;
 800db64:	bf00      	nop
          }
          break;
 800db66:	e0ab      	b.n	800dcc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b02      	cmp	r3, #2
 800db72:	d002      	beq.n	800db7a <USBD_StdEPReq+0x168>
 800db74:	2b03      	cmp	r3, #3
 800db76:	d032      	beq.n	800dbde <USBD_StdEPReq+0x1cc>
 800db78:	e097      	b.n	800dcaa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d007      	beq.n	800db90 <USBD_StdEPReq+0x17e>
 800db80:	7bbb      	ldrb	r3, [r7, #14]
 800db82:	2b80      	cmp	r3, #128	; 0x80
 800db84:	d004      	beq.n	800db90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fbd3 	bl	800e334 <USBD_CtlError>
                break;
 800db8e:	e091      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db94:	2b00      	cmp	r3, #0
 800db96:	da0b      	bge.n	800dbb0 <USBD_StdEPReq+0x19e>
 800db98:	7bbb      	ldrb	r3, [r7, #14]
 800db9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	3310      	adds	r3, #16
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	4413      	add	r3, r2
 800dbac:	3304      	adds	r3, #4
 800dbae:	e00b      	b.n	800dbc8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbb0:	7bbb      	ldrb	r3, [r7, #14]
 800dbb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2202      	movs	r2, #2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fc1d 	bl	800e416 <USBD_CtlSendData>
              break;
 800dbdc:	e06a      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dbde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	da11      	bge.n	800dc0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dbe6:	7bbb      	ldrb	r3, [r7, #14]
 800dbe8:	f003 020f 	and.w	r2, r3, #15
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	4613      	mov	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	440b      	add	r3, r1
 800dbf8:	3324      	adds	r3, #36	; 0x24
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d117      	bne.n	800dc30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fb96 	bl	800e334 <USBD_CtlError>
                  break;
 800dc08:	e054      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dc0a:	7bbb      	ldrb	r3, [r7, #14]
 800dc0c:	f003 020f 	and.w	r2, r3, #15
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	4613      	mov	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	440b      	add	r3, r1
 800dc1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d104      	bne.n	800dc30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fb83 	bl	800e334 <USBD_CtlError>
                  break;
 800dc2e:	e041      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	da0b      	bge.n	800dc50 <USBD_StdEPReq+0x23e>
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc3e:	4613      	mov	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	3310      	adds	r3, #16
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	e00b      	b.n	800dc68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc50:	7bbb      	ldrb	r3, [r7, #14]
 800dc52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc56:	4613      	mov	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	4413      	add	r3, r2
 800dc66:	3304      	adds	r3, #4
 800dc68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc6a:	7bbb      	ldrb	r3, [r7, #14]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <USBD_StdEPReq+0x264>
 800dc70:	7bbb      	ldrb	r3, [r7, #14]
 800dc72:	2b80      	cmp	r3, #128	; 0x80
 800dc74:	d103      	bne.n	800dc7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	e00e      	b.n	800dc9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 f98a 	bl	800ef9c <USBD_LL_IsStallEP>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d003      	beq.n	800dc96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2201      	movs	r2, #1
 800dc92:	601a      	str	r2, [r3, #0]
 800dc94:	e002      	b.n	800dc9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fbb7 	bl	800e416 <USBD_CtlSendData>
              break;
 800dca8:	e004      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fb41 	bl	800e334 <USBD_CtlError>
              break;
 800dcb2:	bf00      	nop
          }
          break;
 800dcb4:	e004      	b.n	800dcc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fb3b 	bl	800e334 <USBD_CtlError>
          break;
 800dcbe:	bf00      	nop
      }
      break;
 800dcc0:	e004      	b.n	800dccc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 fb35 	bl	800e334 <USBD_CtlError>
      break;
 800dcca:	bf00      	nop
  }

  return ret;
 800dccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
	...

0800dcd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dce2:	2300      	movs	r3, #0
 800dce4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dcea:	2300      	movs	r3, #0
 800dcec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	885b      	ldrh	r3, [r3, #2]
 800dcf2:	0a1b      	lsrs	r3, r3, #8
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	2b06      	cmp	r3, #6
 800dcfa:	f200 8128 	bhi.w	800df4e <USBD_GetDescriptor+0x276>
 800dcfe:	a201      	add	r2, pc, #4	; (adr r2, 800dd04 <USBD_GetDescriptor+0x2c>)
 800dd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd04:	0800dd21 	.word	0x0800dd21
 800dd08:	0800dd39 	.word	0x0800dd39
 800dd0c:	0800dd79 	.word	0x0800dd79
 800dd10:	0800df4f 	.word	0x0800df4f
 800dd14:	0800df4f 	.word	0x0800df4f
 800dd18:	0800deef 	.word	0x0800deef
 800dd1c:	0800df1b 	.word	0x0800df1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	7c12      	ldrb	r2, [r2, #16]
 800dd2c:	f107 0108 	add.w	r1, r7, #8
 800dd30:	4610      	mov	r0, r2
 800dd32:	4798      	blx	r3
 800dd34:	60f8      	str	r0, [r7, #12]
      break;
 800dd36:	e112      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	7c1b      	ldrb	r3, [r3, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10d      	bne.n	800dd5c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd48:	f107 0208 	add.w	r2, r7, #8
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
 800dd50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3301      	adds	r3, #1
 800dd56:	2202      	movs	r2, #2
 800dd58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dd5a:	e100      	b.n	800df5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd64:	f107 0208 	add.w	r2, r7, #8
 800dd68:	4610      	mov	r0, r2
 800dd6a:	4798      	blx	r3
 800dd6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3301      	adds	r3, #1
 800dd72:	2202      	movs	r2, #2
 800dd74:	701a      	strb	r2, [r3, #0]
      break;
 800dd76:	e0f2      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	885b      	ldrh	r3, [r3, #2]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b05      	cmp	r3, #5
 800dd80:	f200 80ac 	bhi.w	800dedc <USBD_GetDescriptor+0x204>
 800dd84:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <USBD_GetDescriptor+0xb4>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800dda5 	.word	0x0800dda5
 800dd90:	0800ddd9 	.word	0x0800ddd9
 800dd94:	0800de0d 	.word	0x0800de0d
 800dd98:	0800de41 	.word	0x0800de41
 800dd9c:	0800de75 	.word	0x0800de75
 800dda0:	0800dea9 	.word	0x0800dea9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00b      	beq.n	800ddc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	7c12      	ldrb	r2, [r2, #16]
 800ddbc:	f107 0108 	add.w	r1, r7, #8
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	4798      	blx	r3
 800ddc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddc6:	e091      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fab2 	bl	800e334 <USBD_CtlError>
            err++;
 800ddd0:	7afb      	ldrb	r3, [r7, #11]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	72fb      	strb	r3, [r7, #11]
          break;
 800ddd6:	e089      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	7c12      	ldrb	r2, [r2, #16]
 800ddf0:	f107 0108 	add.w	r1, r7, #8
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4798      	blx	r3
 800ddf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddfa:	e077      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fa98 	bl	800e334 <USBD_CtlError>
            err++;
 800de04:	7afb      	ldrb	r3, [r7, #11]
 800de06:	3301      	adds	r3, #1
 800de08:	72fb      	strb	r3, [r7, #11]
          break;
 800de0a:	e06f      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00b      	beq.n	800de30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	7c12      	ldrb	r2, [r2, #16]
 800de24:	f107 0108 	add.w	r1, r7, #8
 800de28:	4610      	mov	r0, r2
 800de2a:	4798      	blx	r3
 800de2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de2e:	e05d      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fa7e 	bl	800e334 <USBD_CtlError>
            err++;
 800de38:	7afb      	ldrb	r3, [r7, #11]
 800de3a:	3301      	adds	r3, #1
 800de3c:	72fb      	strb	r3, [r7, #11]
          break;
 800de3e:	e055      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00b      	beq.n	800de64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	7c12      	ldrb	r2, [r2, #16]
 800de58:	f107 0108 	add.w	r1, r7, #8
 800de5c:	4610      	mov	r0, r2
 800de5e:	4798      	blx	r3
 800de60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de62:	e043      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fa64 	bl	800e334 <USBD_CtlError>
            err++;
 800de6c:	7afb      	ldrb	r3, [r7, #11]
 800de6e:	3301      	adds	r3, #1
 800de70:	72fb      	strb	r3, [r7, #11]
          break;
 800de72:	e03b      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de7a:	695b      	ldr	r3, [r3, #20]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00b      	beq.n	800de98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	7c12      	ldrb	r2, [r2, #16]
 800de8c:	f107 0108 	add.w	r1, r7, #8
 800de90:	4610      	mov	r0, r2
 800de92:	4798      	blx	r3
 800de94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de96:	e029      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fa4a 	bl	800e334 <USBD_CtlError>
            err++;
 800dea0:	7afb      	ldrb	r3, [r7, #11]
 800dea2:	3301      	adds	r3, #1
 800dea4:	72fb      	strb	r3, [r7, #11]
          break;
 800dea6:	e021      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00b      	beq.n	800decc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	7c12      	ldrb	r2, [r2, #16]
 800dec0:	f107 0108 	add.w	r1, r7, #8
 800dec4:	4610      	mov	r0, r2
 800dec6:	4798      	blx	r3
 800dec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800deca:	e00f      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fa30 	bl	800e334 <USBD_CtlError>
            err++;
 800ded4:	7afb      	ldrb	r3, [r7, #11]
 800ded6:	3301      	adds	r3, #1
 800ded8:	72fb      	strb	r3, [r7, #11]
          break;
 800deda:	e007      	b.n	800deec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fa28 	bl	800e334 <USBD_CtlError>
          err++;
 800dee4:	7afb      	ldrb	r3, [r7, #11]
 800dee6:	3301      	adds	r3, #1
 800dee8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800deea:	bf00      	nop
      }
      break;
 800deec:	e037      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	7c1b      	ldrb	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d109      	bne.n	800df0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800defc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800defe:	f107 0208 	add.w	r2, r7, #8
 800df02:	4610      	mov	r0, r2
 800df04:	4798      	blx	r3
 800df06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df08:	e029      	b.n	800df5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fa11 	bl	800e334 <USBD_CtlError>
        err++;
 800df12:	7afb      	ldrb	r3, [r7, #11]
 800df14:	3301      	adds	r3, #1
 800df16:	72fb      	strb	r3, [r7, #11]
      break;
 800df18:	e021      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	7c1b      	ldrb	r3, [r3, #16]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10d      	bne.n	800df3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df2a:	f107 0208 	add.w	r2, r7, #8
 800df2e:	4610      	mov	r0, r2
 800df30:	4798      	blx	r3
 800df32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3301      	adds	r3, #1
 800df38:	2207      	movs	r2, #7
 800df3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df3c:	e00f      	b.n	800df5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f9f7 	bl	800e334 <USBD_CtlError>
        err++;
 800df46:	7afb      	ldrb	r3, [r7, #11]
 800df48:	3301      	adds	r3, #1
 800df4a:	72fb      	strb	r3, [r7, #11]
      break;
 800df4c:	e007      	b.n	800df5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 f9ef 	bl	800e334 <USBD_CtlError>
      err++;
 800df56:	7afb      	ldrb	r3, [r7, #11]
 800df58:	3301      	adds	r3, #1
 800df5a:	72fb      	strb	r3, [r7, #11]
      break;
 800df5c:	bf00      	nop
  }

  if (err != 0U)
 800df5e:	7afb      	ldrb	r3, [r7, #11]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d11e      	bne.n	800dfa2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	88db      	ldrh	r3, [r3, #6]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d016      	beq.n	800df9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800df6c:	893b      	ldrh	r3, [r7, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00e      	beq.n	800df90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	88da      	ldrh	r2, [r3, #6]
 800df76:	893b      	ldrh	r3, [r7, #8]
 800df78:	4293      	cmp	r3, r2
 800df7a:	bf28      	it	cs
 800df7c:	4613      	movcs	r3, r2
 800df7e:	b29b      	uxth	r3, r3
 800df80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df82:	893b      	ldrh	r3, [r7, #8]
 800df84:	461a      	mov	r2, r3
 800df86:	68f9      	ldr	r1, [r7, #12]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fa44 	bl	800e416 <USBD_CtlSendData>
 800df8e:	e009      	b.n	800dfa4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 f9ce 	bl	800e334 <USBD_CtlError>
 800df98:	e004      	b.n	800dfa4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fa95 	bl	800e4ca <USBD_CtlSendStatus>
 800dfa0:	e000      	b.n	800dfa4 <USBD_GetDescriptor+0x2cc>
    return;
 800dfa2:	bf00      	nop
  }
}
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop

0800dfac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	889b      	ldrh	r3, [r3, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d131      	bne.n	800e022 <USBD_SetAddress+0x76>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	88db      	ldrh	r3, [r3, #6]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d12d      	bne.n	800e022 <USBD_SetAddress+0x76>
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	885b      	ldrh	r3, [r3, #2]
 800dfca:	2b7f      	cmp	r3, #127	; 0x7f
 800dfcc:	d829      	bhi.n	800e022 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	885b      	ldrh	r3, [r3, #2]
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d104      	bne.n	800dff0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dfe6:	6839      	ldr	r1, [r7, #0]
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 f9a3 	bl	800e334 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfee:	e01d      	b.n	800e02c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7bfa      	ldrb	r2, [r7, #15]
 800dff4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fff9 	bl	800eff4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fa61 	bl	800e4ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d004      	beq.n	800e018 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2202      	movs	r2, #2
 800e012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e016:	e009      	b.n	800e02c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e020:	e004      	b.n	800e02c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f985 	bl	800e334 <USBD_CtlError>
  }
}
 800e02a:	bf00      	nop
 800e02c:	bf00      	nop
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e03e:	2300      	movs	r3, #0
 800e040:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	885b      	ldrh	r3, [r3, #2]
 800e046:	b2da      	uxtb	r2, r3
 800e048:	4b4c      	ldr	r3, [pc, #304]	; (800e17c <USBD_SetConfig+0x148>)
 800e04a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e04c:	4b4b      	ldr	r3, [pc, #300]	; (800e17c <USBD_SetConfig+0x148>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d905      	bls.n	800e060 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f96c 	bl	800e334 <USBD_CtlError>
    return USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e088      	b.n	800e172 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d002      	beq.n	800e072 <USBD_SetConfig+0x3e>
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	d025      	beq.n	800e0bc <USBD_SetConfig+0x88>
 800e070:	e071      	b.n	800e156 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e072:	4b42      	ldr	r3, [pc, #264]	; (800e17c <USBD_SetConfig+0x148>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d01c      	beq.n	800e0b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e07a:	4b40      	ldr	r3, [pc, #256]	; (800e17c <USBD_SetConfig+0x148>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e084:	4b3d      	ldr	r3, [pc, #244]	; (800e17c <USBD_SetConfig+0x148>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff f948 	bl	800d320 <USBD_SetClassConfig>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d004      	beq.n	800e0a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e09a:	6839      	ldr	r1, [r7, #0]
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f949 	bl	800e334 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0a2:	e065      	b.n	800e170 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fa10 	bl	800e4ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2203      	movs	r2, #3
 800e0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e0b2:	e05d      	b.n	800e170 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fa08 	bl	800e4ca <USBD_CtlSendStatus>
      break;
 800e0ba:	e059      	b.n	800e170 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e0bc:	4b2f      	ldr	r3, [pc, #188]	; (800e17c <USBD_SetConfig+0x148>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d112      	bne.n	800e0ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e0cc:	4b2b      	ldr	r3, [pc, #172]	; (800e17c <USBD_SetConfig+0x148>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0d6:	4b29      	ldr	r3, [pc, #164]	; (800e17c <USBD_SetConfig+0x148>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7ff f93b 	bl	800d358 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f9f1 	bl	800e4ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0e8:	e042      	b.n	800e170 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e0ea:	4b24      	ldr	r3, [pc, #144]	; (800e17c <USBD_SetConfig+0x148>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d02a      	beq.n	800e14e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff f929 	bl	800d358 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e106:	4b1d      	ldr	r3, [pc, #116]	; (800e17c <USBD_SetConfig+0x148>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e110:	4b1a      	ldr	r3, [pc, #104]	; (800e17c <USBD_SetConfig+0x148>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff f902 	bl	800d320 <USBD_SetClassConfig>
 800e11c:	4603      	mov	r3, r0
 800e11e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e120:	7bfb      	ldrb	r3, [r7, #15]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00f      	beq.n	800e146 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 f903 	bl	800e334 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff f90e 	bl	800d358 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2202      	movs	r2, #2
 800e140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e144:	e014      	b.n	800e170 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f9bf 	bl	800e4ca <USBD_CtlSendStatus>
      break;
 800e14c:	e010      	b.n	800e170 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f9bb 	bl	800e4ca <USBD_CtlSendStatus>
      break;
 800e154:	e00c      	b.n	800e170 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f8eb 	bl	800e334 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e15e:	4b07      	ldr	r3, [pc, #28]	; (800e17c <USBD_SetConfig+0x148>)
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	4619      	mov	r1, r3
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff f8f7 	bl	800d358 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e16a:	2303      	movs	r3, #3
 800e16c:	73fb      	strb	r3, [r7, #15]
      break;
 800e16e:	bf00      	nop
  }

  return ret;
 800e170:	7bfb      	ldrb	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	20000d00 	.word	0x20000d00

0800e180 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	88db      	ldrh	r3, [r3, #6]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d004      	beq.n	800e19c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f8cd 	bl	800e334 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e19a:	e023      	b.n	800e1e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	dc02      	bgt.n	800e1ae <USBD_GetConfig+0x2e>
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	dc03      	bgt.n	800e1b4 <USBD_GetConfig+0x34>
 800e1ac:	e015      	b.n	800e1da <USBD_GetConfig+0x5a>
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d00b      	beq.n	800e1ca <USBD_GetConfig+0x4a>
 800e1b2:	e012      	b.n	800e1da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3308      	adds	r3, #8
 800e1be:	2201      	movs	r2, #1
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f927 	bl	800e416 <USBD_CtlSendData>
        break;
 800e1c8:	e00c      	b.n	800e1e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f91f 	bl	800e416 <USBD_CtlSendData>
        break;
 800e1d8:	e004      	b.n	800e1e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f8a9 	bl	800e334 <USBD_CtlError>
        break;
 800e1e2:	bf00      	nop
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	3b01      	subs	r3, #1
 800e200:	2b02      	cmp	r3, #2
 800e202:	d81e      	bhi.n	800e242 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d004      	beq.n	800e216 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f890 	bl	800e334 <USBD_CtlError>
        break;
 800e214:	e01a      	b.n	800e24c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e222:	2b00      	cmp	r3, #0
 800e224:	d005      	beq.n	800e232 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	f043 0202 	orr.w	r2, r3, #2
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	330c      	adds	r3, #12
 800e236:	2202      	movs	r2, #2
 800e238:	4619      	mov	r1, r3
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 f8eb 	bl	800e416 <USBD_CtlSendData>
      break;
 800e240:	e004      	b.n	800e24c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 f875 	bl	800e334 <USBD_CtlError>
      break;
 800e24a:	bf00      	nop
  }
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	885b      	ldrh	r3, [r3, #2]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d106      	bne.n	800e274 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f92b 	bl	800e4ca <USBD_CtlSendStatus>
  }
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	3b01      	subs	r3, #1
 800e290:	2b02      	cmp	r3, #2
 800e292:	d80b      	bhi.n	800e2ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	885b      	ldrh	r3, [r3, #2]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d10c      	bne.n	800e2b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f910 	bl	800e4ca <USBD_CtlSendStatus>
      }
      break;
 800e2aa:	e004      	b.n	800e2b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f840 	bl	800e334 <USBD_CtlError>
      break;
 800e2b4:	e000      	b.n	800e2b8 <USBD_ClrFeature+0x3c>
      break;
 800e2b6:	bf00      	nop
  }
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	781a      	ldrb	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	781a      	ldrb	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f7ff fabb 	bl	800d866 <SWAPBYTE>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3301      	adds	r3, #1
 800e302:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f7ff faae 	bl	800d866 <SWAPBYTE>
 800e30a:	4603      	mov	r3, r0
 800e30c:	461a      	mov	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3301      	adds	r3, #1
 800e316:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3301      	adds	r3, #1
 800e31c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f7ff faa1 	bl	800d866 <SWAPBYTE>
 800e324:	4603      	mov	r3, r0
 800e326:	461a      	mov	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	80da      	strh	r2, [r3, #6]
}
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e33e:	2180      	movs	r1, #128	; 0x80
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fdbf 	bl	800eec4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e346:	2100      	movs	r1, #0
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fdbb 	bl	800eec4 <USBD_LL_StallEP>
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b086      	sub	sp, #24
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e362:	2300      	movs	r3, #0
 800e364:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d036      	beq.n	800e3da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e370:	6938      	ldr	r0, [r7, #16]
 800e372:	f000 f836 	bl	800e3e2 <USBD_GetLen>
 800e376:	4603      	mov	r3, r0
 800e378:	3301      	adds	r3, #1
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e384:	7dfb      	ldrb	r3, [r7, #23]
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	4413      	add	r3, r2
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	7812      	ldrb	r2, [r2, #0]
 800e38e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	3301      	adds	r3, #1
 800e394:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e396:	7dfb      	ldrb	r3, [r7, #23]
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	4413      	add	r3, r2
 800e39c:	2203      	movs	r2, #3
 800e39e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e3a6:	e013      	b.n	800e3d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	693a      	ldr	r2, [r7, #16]
 800e3b0:	7812      	ldrb	r2, [r2, #0]
 800e3b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	613b      	str	r3, [r7, #16]
    idx++;
 800e3ba:	7dfb      	ldrb	r3, [r7, #23]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
 800e3c2:	68ba      	ldr	r2, [r7, #8]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1e7      	bne.n	800e3a8 <USBD_GetString+0x52>
 800e3d8:	e000      	b.n	800e3dc <USBD_GetString+0x86>
    return;
 800e3da:	bf00      	nop
  }
}
 800e3dc:	3718      	adds	r7, #24
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b085      	sub	sp, #20
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e3f2:	e005      	b.n	800e400 <USBD_GetLen+0x1e>
  {
    len++;
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1f5      	bne.n	800e3f4 <USBD_GetLen+0x12>
  }

  return len;
 800e408:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2202      	movs	r2, #2
 800e426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	2100      	movs	r1, #0
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f000 fe0f 	bl	800f060 <USBD_LL_Transmit>

  return USBD_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	2100      	movs	r1, #0
 800e45e:	68f8      	ldr	r0, [r7, #12]
 800e460:	f000 fdfe 	bl	800f060 <USBD_LL_Transmit>

  return USBD_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2203      	movs	r2, #3
 800e47e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68ba      	ldr	r2, [r7, #8]
 800e496:	2100      	movs	r1, #0
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 fe19 	bl	800f0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f000 fe08 	bl	800f0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b082      	sub	sp, #8
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e4da:	2300      	movs	r3, #0
 800e4dc:	2200      	movs	r2, #0
 800e4de:	2100      	movs	r1, #0
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fdbd 	bl	800f060 <USBD_LL_Transmit>

  return USBD_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2205      	movs	r2, #5
 800e4fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e500:	2300      	movs	r3, #0
 800e502:	2200      	movs	r2, #0
 800e504:	2100      	movs	r1, #0
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fde2 	bl	800f0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
	...

0800e518 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e518:	b480      	push	{r7}
 800e51a:	b087      	sub	sp, #28
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	4613      	mov	r3, r2
 800e524:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e526:	2301      	movs	r3, #1
 800e528:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e52e:	4b1f      	ldr	r3, [pc, #124]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e530:	7a5b      	ldrb	r3, [r3, #9]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b00      	cmp	r3, #0
 800e536:	d131      	bne.n	800e59c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e538:	4b1c      	ldr	r3, [pc, #112]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e53a:	7a5b      	ldrb	r3, [r3, #9]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	461a      	mov	r2, r3
 800e540:	4b1a      	ldr	r3, [pc, #104]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e542:	2100      	movs	r1, #0
 800e544:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e546:	4b19      	ldr	r3, [pc, #100]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e548:	7a5b      	ldrb	r3, [r3, #9]
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	4a17      	ldr	r2, [pc, #92]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4413      	add	r3, r2
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e556:	4b15      	ldr	r3, [pc, #84]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e558:	7a5b      	ldrb	r3, [r3, #9]
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	461a      	mov	r2, r3
 800e55e:	4b13      	ldr	r3, [pc, #76]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e560:	4413      	add	r3, r2
 800e562:	79fa      	ldrb	r2, [r7, #7]
 800e564:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e566:	4b11      	ldr	r3, [pc, #68]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e568:	7a5b      	ldrb	r3, [r3, #9]
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	b2d1      	uxtb	r1, r2
 800e570:	4a0e      	ldr	r2, [pc, #56]	; (800e5ac <FATFS_LinkDriverEx+0x94>)
 800e572:	7251      	strb	r1, [r2, #9]
 800e574:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e576:	7dbb      	ldrb	r3, [r7, #22]
 800e578:	3330      	adds	r3, #48	; 0x30
 800e57a:	b2da      	uxtb	r2, r3
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	3301      	adds	r3, #1
 800e584:	223a      	movs	r2, #58	; 0x3a
 800e586:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	3302      	adds	r3, #2
 800e58c:	222f      	movs	r2, #47	; 0x2f
 800e58e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	3303      	adds	r3, #3
 800e594:	2200      	movs	r2, #0
 800e596:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e598:	2300      	movs	r3, #0
 800e59a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	371c      	adds	r7, #28
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	20000d04 	.word	0x20000d04

0800e5b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	6839      	ldr	r1, [r7, #0]
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7ff ffaa 	bl	800e518 <FATFS_LinkDriverEx>
 800e5c4:	4603      	mov	r3, r0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	4912      	ldr	r1, [pc, #72]	; (800e620 <MX_USB_DEVICE_Init+0x50>)
 800e5d8:	4812      	ldr	r0, [pc, #72]	; (800e624 <MX_USB_DEVICE_Init+0x54>)
 800e5da:	f7fe fe33 	bl	800d244 <USBD_Init>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e5e4:	f7f3 f9e2 	bl	80019ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e5e8:	490f      	ldr	r1, [pc, #60]	; (800e628 <MX_USB_DEVICE_Init+0x58>)
 800e5ea:	480e      	ldr	r0, [pc, #56]	; (800e624 <MX_USB_DEVICE_Init+0x54>)
 800e5ec:	f7fe fe5a 	bl	800d2a4 <USBD_RegisterClass>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e5f6:	f7f3 f9d9 	bl	80019ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e5fa:	490c      	ldr	r1, [pc, #48]	; (800e62c <MX_USB_DEVICE_Init+0x5c>)
 800e5fc:	4809      	ldr	r0, [pc, #36]	; (800e624 <MX_USB_DEVICE_Init+0x54>)
 800e5fe:	f7fe fd7b 	bl	800d0f8 <USBD_CDC_RegisterInterface>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e608:	f7f3 f9d0 	bl	80019ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e60c:	4805      	ldr	r0, [pc, #20]	; (800e624 <MX_USB_DEVICE_Init+0x54>)
 800e60e:	f7fe fe70 	bl	800d2f2 <USBD_Start>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e618:	f7f3 f9c8 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e61c:	bf00      	nop
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	20000138 	.word	0x20000138
 800e624:	20000d10 	.word	0x20000d10
 800e628:	20000020 	.word	0x20000020
 800e62c:	20000124 	.word	0x20000124

0800e630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e634:	2200      	movs	r2, #0
 800e636:	4905      	ldr	r1, [pc, #20]	; (800e64c <CDC_Init_FS+0x1c>)
 800e638:	4805      	ldr	r0, [pc, #20]	; (800e650 <CDC_Init_FS+0x20>)
 800e63a:	f7fe fd72 	bl	800d122 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e63e:	4905      	ldr	r1, [pc, #20]	; (800e654 <CDC_Init_FS+0x24>)
 800e640:	4803      	ldr	r0, [pc, #12]	; (800e650 <CDC_Init_FS+0x20>)
 800e642:	f7fe fd8c 	bl	800d15e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e648:	4618      	mov	r0, r3
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	200017e0 	.word	0x200017e0
 800e650:	20000d10 	.word	0x20000d10
 800e654:	20000fe0 	.word	0x20000fe0

0800e658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e658:	b480      	push	{r7}
 800e65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e65c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e65e:	4618      	mov	r0, r3
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	4603      	mov	r3, r0
 800e670:	6039      	str	r1, [r7, #0]
 800e672:	71fb      	strb	r3, [r7, #7]
 800e674:	4613      	mov	r3, r2
 800e676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	2b23      	cmp	r3, #35	; 0x23
 800e67c:	d84a      	bhi.n	800e714 <CDC_Control_FS+0xac>
 800e67e:	a201      	add	r2, pc, #4	; (adr r2, 800e684 <CDC_Control_FS+0x1c>)
 800e680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e684:	0800e715 	.word	0x0800e715
 800e688:	0800e715 	.word	0x0800e715
 800e68c:	0800e715 	.word	0x0800e715
 800e690:	0800e715 	.word	0x0800e715
 800e694:	0800e715 	.word	0x0800e715
 800e698:	0800e715 	.word	0x0800e715
 800e69c:	0800e715 	.word	0x0800e715
 800e6a0:	0800e715 	.word	0x0800e715
 800e6a4:	0800e715 	.word	0x0800e715
 800e6a8:	0800e715 	.word	0x0800e715
 800e6ac:	0800e715 	.word	0x0800e715
 800e6b0:	0800e715 	.word	0x0800e715
 800e6b4:	0800e715 	.word	0x0800e715
 800e6b8:	0800e715 	.word	0x0800e715
 800e6bc:	0800e715 	.word	0x0800e715
 800e6c0:	0800e715 	.word	0x0800e715
 800e6c4:	0800e715 	.word	0x0800e715
 800e6c8:	0800e715 	.word	0x0800e715
 800e6cc:	0800e715 	.word	0x0800e715
 800e6d0:	0800e715 	.word	0x0800e715
 800e6d4:	0800e715 	.word	0x0800e715
 800e6d8:	0800e715 	.word	0x0800e715
 800e6dc:	0800e715 	.word	0x0800e715
 800e6e0:	0800e715 	.word	0x0800e715
 800e6e4:	0800e715 	.word	0x0800e715
 800e6e8:	0800e715 	.word	0x0800e715
 800e6ec:	0800e715 	.word	0x0800e715
 800e6f0:	0800e715 	.word	0x0800e715
 800e6f4:	0800e715 	.word	0x0800e715
 800e6f8:	0800e715 	.word	0x0800e715
 800e6fc:	0800e715 	.word	0x0800e715
 800e700:	0800e715 	.word	0x0800e715
 800e704:	0800e715 	.word	0x0800e715
 800e708:	0800e715 	.word	0x0800e715
 800e70c:	0800e715 	.word	0x0800e715
 800e710:	0800e715 	.word	0x0800e715
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e714:	bf00      	nop
  }

  return (USBD_OK);
 800e716:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e72e:	6879      	ldr	r1, [r7, #4]
 800e730:	4805      	ldr	r0, [pc, #20]	; (800e748 <CDC_Receive_FS+0x24>)
 800e732:	f7fe fd14 	bl	800d15e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e736:	4804      	ldr	r0, [pc, #16]	; (800e748 <CDC_Receive_FS+0x24>)
 800e738:	f7fe fd5a 	bl	800d1f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e73c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	20000d10 	.word	0x20000d10

0800e74c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e758:	2300      	movs	r3, #0
 800e75a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e75c:	4b0d      	ldr	r3, [pc, #52]	; (800e794 <CDC_Transmit_FS+0x48>)
 800e75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e762:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e76e:	2301      	movs	r3, #1
 800e770:	e00b      	b.n	800e78a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e772:	887b      	ldrh	r3, [r7, #2]
 800e774:	461a      	mov	r2, r3
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	4806      	ldr	r0, [pc, #24]	; (800e794 <CDC_Transmit_FS+0x48>)
 800e77a:	f7fe fcd2 	bl	800d122 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e77e:	4805      	ldr	r0, [pc, #20]	; (800e794 <CDC_Transmit_FS+0x48>)
 800e780:	f7fe fd06 	bl	800d190 <USBD_CDC_TransmitPacket>
 800e784:	4603      	mov	r3, r0
 800e786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e788:	7bfb      	ldrb	r3, [r7, #15]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	20000d10 	.word	0x20000d10

0800e798 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e798:	b480      	push	{r7}
 800e79a:	b087      	sub	sp, #28
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	371c      	adds	r7, #28
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
	...

0800e7bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	6039      	str	r1, [r7, #0]
 800e7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2212      	movs	r2, #18
 800e7cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e7ce:	4b03      	ldr	r3, [pc, #12]	; (800e7dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	20000154 	.word	0x20000154

0800e7e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	6039      	str	r1, [r7, #0]
 800e7ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2204      	movs	r2, #4
 800e7f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e7f2:	4b03      	ldr	r3, [pc, #12]	; (800e800 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	20000168 	.word	0x20000168

0800e804 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	4603      	mov	r3, r0
 800e80c:	6039      	str	r1, [r7, #0]
 800e80e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e810:	79fb      	ldrb	r3, [r7, #7]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d105      	bne.n	800e822 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	4907      	ldr	r1, [pc, #28]	; (800e838 <USBD_FS_ProductStrDescriptor+0x34>)
 800e81a:	4808      	ldr	r0, [pc, #32]	; (800e83c <USBD_FS_ProductStrDescriptor+0x38>)
 800e81c:	f7ff fd9b 	bl	800e356 <USBD_GetString>
 800e820:	e004      	b.n	800e82c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	4904      	ldr	r1, [pc, #16]	; (800e838 <USBD_FS_ProductStrDescriptor+0x34>)
 800e826:	4805      	ldr	r0, [pc, #20]	; (800e83c <USBD_FS_ProductStrDescriptor+0x38>)
 800e828:	f7ff fd95 	bl	800e356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e82c:	4b02      	ldr	r3, [pc, #8]	; (800e838 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20001fe0 	.word	0x20001fe0
 800e83c:	08011d64 	.word	0x08011d64

0800e840 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	4603      	mov	r3, r0
 800e848:	6039      	str	r1, [r7, #0]
 800e84a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	4904      	ldr	r1, [pc, #16]	; (800e860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e850:	4804      	ldr	r0, [pc, #16]	; (800e864 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e852:	f7ff fd80 	bl	800e356 <USBD_GetString>
  return USBD_StrDesc;
 800e856:	4b02      	ldr	r3, [pc, #8]	; (800e860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	20001fe0 	.word	0x20001fe0
 800e864:	08011d7c 	.word	0x08011d7c

0800e868 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	4603      	mov	r3, r0
 800e870:	6039      	str	r1, [r7, #0]
 800e872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	221a      	movs	r2, #26
 800e878:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e87a:	f000 f843 	bl	800e904 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e87e:	4b02      	ldr	r3, [pc, #8]	; (800e888 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	2000016c 	.word	0x2000016c

0800e88c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	6039      	str	r1, [r7, #0]
 800e896:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d105      	bne.n	800e8aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e89e:	683a      	ldr	r2, [r7, #0]
 800e8a0:	4907      	ldr	r1, [pc, #28]	; (800e8c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e8a2:	4808      	ldr	r0, [pc, #32]	; (800e8c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e8a4:	f7ff fd57 	bl	800e356 <USBD_GetString>
 800e8a8:	e004      	b.n	800e8b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	4904      	ldr	r1, [pc, #16]	; (800e8c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e8ae:	4805      	ldr	r0, [pc, #20]	; (800e8c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e8b0:	f7ff fd51 	bl	800e356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8b4:	4b02      	ldr	r3, [pc, #8]	; (800e8c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20001fe0 	.word	0x20001fe0
 800e8c4:	08011d90 	.word	0x08011d90

0800e8c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	6039      	str	r1, [r7, #0]
 800e8d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e8d4:	79fb      	ldrb	r3, [r7, #7]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d105      	bne.n	800e8e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	4907      	ldr	r1, [pc, #28]	; (800e8fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e8de:	4808      	ldr	r0, [pc, #32]	; (800e900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e8e0:	f7ff fd39 	bl	800e356 <USBD_GetString>
 800e8e4:	e004      	b.n	800e8f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e8e6:	683a      	ldr	r2, [r7, #0]
 800e8e8:	4904      	ldr	r1, [pc, #16]	; (800e8fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e8ea:	4805      	ldr	r0, [pc, #20]	; (800e900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e8ec:	f7ff fd33 	bl	800e356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8f0:	4b02      	ldr	r3, [pc, #8]	; (800e8fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	20001fe0 	.word	0x20001fe0
 800e900:	08011d9c 	.word	0x08011d9c

0800e904 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e90a:	4b0f      	ldr	r3, [pc, #60]	; (800e948 <Get_SerialNum+0x44>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e910:	4b0e      	ldr	r3, [pc, #56]	; (800e94c <Get_SerialNum+0x48>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e916:	4b0e      	ldr	r3, [pc, #56]	; (800e950 <Get_SerialNum+0x4c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4413      	add	r3, r2
 800e922:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d009      	beq.n	800e93e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e92a:	2208      	movs	r2, #8
 800e92c:	4909      	ldr	r1, [pc, #36]	; (800e954 <Get_SerialNum+0x50>)
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f000 f814 	bl	800e95c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e934:	2204      	movs	r2, #4
 800e936:	4908      	ldr	r1, [pc, #32]	; (800e958 <Get_SerialNum+0x54>)
 800e938:	68b8      	ldr	r0, [r7, #8]
 800e93a:	f000 f80f 	bl	800e95c <IntToUnicode>
  }
}
 800e93e:	bf00      	nop
 800e940:	3710      	adds	r7, #16
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	1fff7590 	.word	0x1fff7590
 800e94c:	1fff7594 	.word	0x1fff7594
 800e950:	1fff7598 	.word	0x1fff7598
 800e954:	2000016e 	.word	0x2000016e
 800e958:	2000017e 	.word	0x2000017e

0800e95c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b087      	sub	sp, #28
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	4613      	mov	r3, r2
 800e968:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e96e:	2300      	movs	r3, #0
 800e970:	75fb      	strb	r3, [r7, #23]
 800e972:	e027      	b.n	800e9c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	0f1b      	lsrs	r3, r3, #28
 800e978:	2b09      	cmp	r3, #9
 800e97a:	d80b      	bhi.n	800e994 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	0f1b      	lsrs	r3, r3, #28
 800e980:	b2da      	uxtb	r2, r3
 800e982:	7dfb      	ldrb	r3, [r7, #23]
 800e984:	005b      	lsls	r3, r3, #1
 800e986:	4619      	mov	r1, r3
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	440b      	add	r3, r1
 800e98c:	3230      	adds	r2, #48	; 0x30
 800e98e:	b2d2      	uxtb	r2, r2
 800e990:	701a      	strb	r2, [r3, #0]
 800e992:	e00a      	b.n	800e9aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	0f1b      	lsrs	r3, r3, #28
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	7dfb      	ldrb	r3, [r7, #23]
 800e99c:	005b      	lsls	r3, r3, #1
 800e99e:	4619      	mov	r1, r3
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	440b      	add	r3, r1
 800e9a4:	3237      	adds	r2, #55	; 0x37
 800e9a6:	b2d2      	uxtb	r2, r2
 800e9a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	011b      	lsls	r3, r3, #4
 800e9ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e9b0:	7dfb      	ldrb	r3, [r7, #23]
 800e9b2:	005b      	lsls	r3, r3, #1
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	68ba      	ldr	r2, [r7, #8]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	75fb      	strb	r3, [r7, #23]
 800e9c4:	7dfa      	ldrb	r2, [r7, #23]
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d3d3      	bcc.n	800e974 <IntToUnicode+0x18>
  }
}
 800e9cc:	bf00      	nop
 800e9ce:	bf00      	nop
 800e9d0:	371c      	adds	r7, #28
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
	...

0800e9dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b0b0      	sub	sp, #192	; 0xc0
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	601a      	str	r2, [r3, #0]
 800e9ec:	605a      	str	r2, [r3, #4]
 800e9ee:	609a      	str	r2, [r3, #8]
 800e9f0:	60da      	str	r2, [r3, #12]
 800e9f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e9f4:	f107 0318 	add.w	r3, r7, #24
 800e9f8:	2294      	movs	r2, #148	; 0x94
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 fc0b 	bl	800f218 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea0a:	d163      	bne.n	800ead4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ea0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ea12:	2300      	movs	r3, #0
 800ea14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ea18:	f107 0318 	add.w	r3, r7, #24
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7f6 fad3 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ea28:	f7f2 ffc0 	bl	80019ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea2c:	4b2b      	ldr	r3, [pc, #172]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea30:	4a2a      	ldr	r2, [pc, #168]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea32:	f043 0301 	orr.w	r3, r3, #1
 800ea36:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ea38:	4b28      	ldr	r3, [pc, #160]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea3c:	f003 0301 	and.w	r3, r3, #1
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ea44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ea48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea52:	2300      	movs	r3, #0
 800ea54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea58:	2303      	movs	r3, #3
 800ea5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea5e:	230a      	movs	r3, #10
 800ea60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ea68:	4619      	mov	r1, r3
 800ea6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ea6e:	f7f3 fdf7 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea72:	4b1a      	ldr	r3, [pc, #104]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea76:	4a19      	ldr	r2, [pc, #100]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ea7e:	4b17      	ldr	r3, [pc, #92]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ea8a:	4b14      	ldr	r3, [pc, #80]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d114      	bne.n	800eac0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea96:	4b11      	ldr	r3, [pc, #68]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea9a:	4a10      	ldr	r2, [pc, #64]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800ea9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eaa0:	6593      	str	r3, [r2, #88]	; 0x58
 800eaa2:	4b0e      	ldr	r3, [pc, #56]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800eaa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eaaa:	60fb      	str	r3, [r7, #12]
 800eaac:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800eaae:	f7f5 fb77 	bl	80041a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800eab2:	4b0a      	ldr	r3, [pc, #40]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800eab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eab6:	4a09      	ldr	r2, [pc, #36]	; (800eadc <HAL_PCD_MspInit+0x100>)
 800eab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eabc:	6593      	str	r3, [r2, #88]	; 0x58
 800eabe:	e001      	b.n	800eac4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800eac0:	f7f5 fb6e 	bl	80041a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eac4:	2200      	movs	r2, #0
 800eac6:	2100      	movs	r1, #0
 800eac8:	2043      	movs	r0, #67	; 0x43
 800eaca:	f7f3 fcd8 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eace:	2043      	movs	r0, #67	; 0x43
 800ead0:	f7f3 fcf1 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ead4:	bf00      	nop
 800ead6:	37c0      	adds	r7, #192	; 0xc0
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	40021000 	.word	0x40021000

0800eae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f7fe fc46 	bl	800d388 <USBD_LL_SetupStage>
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eb16:	78fa      	ldrb	r2, [r7, #3]
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	4413      	add	r3, r2
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	440b      	add	r3, r1
 800eb24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	78fb      	ldrb	r3, [r7, #3]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	f7fe fc80 	bl	800d432 <USBD_LL_DataOutStage>
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eb4c:	78fa      	ldrb	r2, [r7, #3]
 800eb4e:	6879      	ldr	r1, [r7, #4]
 800eb50:	4613      	mov	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	4413      	add	r3, r2
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	440b      	add	r3, r1
 800eb5a:	334c      	adds	r3, #76	; 0x4c
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	4619      	mov	r1, r3
 800eb62:	f7fe fcc9 	bl	800d4f8 <USBD_LL_DataInStage>
}
 800eb66:	bf00      	nop
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b082      	sub	sp, #8
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fe fddd 	bl	800d73c <USBD_LL_SOF>
}
 800eb82:	bf00      	nop
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb92:	2301      	movs	r3, #1
 800eb94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d001      	beq.n	800eba2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eb9e:	f7f2 ff05 	bl	80019ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eba8:	7bfa      	ldrb	r2, [r7, #15]
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fe fd87 	bl	800d6c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe fd33 	bl	800d624 <USBD_LL_Reset>
}
 800ebbe:	bf00      	nop
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
	...

0800ebc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	6812      	ldr	r2, [r2, #0]
 800ebde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ebe2:	f043 0301 	orr.w	r3, r3, #1
 800ebe6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fe fd76 	bl	800d6e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a1b      	ldr	r3, [r3, #32]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d005      	beq.n	800ec08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ebfc:	4b04      	ldr	r3, [pc, #16]	; (800ec10 <HAL_PCD_SuspendCallback+0x48>)
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	4a03      	ldr	r2, [pc, #12]	; (800ec10 <HAL_PCD_SuspendCallback+0x48>)
 800ec02:	f043 0306 	orr.w	r3, r3, #6
 800ec06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ec08:	bf00      	nop
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	e000ed00 	.word	0xe000ed00

0800ec14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	6812      	ldr	r2, [r2, #0]
 800ec2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec2e:	f023 0301 	bic.w	r3, r3, #1
 800ec32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6a1b      	ldr	r3, [r3, #32]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d007      	beq.n	800ec4c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec3c:	4b08      	ldr	r3, [pc, #32]	; (800ec60 <HAL_PCD_ResumeCallback+0x4c>)
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	4a07      	ldr	r2, [pc, #28]	; (800ec60 <HAL_PCD_ResumeCallback+0x4c>)
 800ec42:	f023 0306 	bic.w	r3, r3, #6
 800ec46:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ec48:	f000 faa6 	bl	800f198 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fe fd5a 	bl	800d70c <USBD_LL_Resume>
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	e000ed00 	.word	0xe000ed00

0800ec64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec76:	78fa      	ldrb	r2, [r7, #3]
 800ec78:	4611      	mov	r1, r2
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe fda6 	bl	800d7cc <USBD_LL_IsoOUTIncomplete>
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec9a:	78fa      	ldrb	r2, [r7, #3]
 800ec9c:	4611      	mov	r1, r2
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fe fd6e 	bl	800d780 <USBD_LL_IsoINIncomplete>
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe fdac 	bl	800d818 <USBD_LL_DevConnected>
}
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fe fda9 	bl	800d82e <USBD_LL_DevDisconnected>
}
 800ecdc:	bf00      	nop
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d139      	bne.n	800ed68 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ecf4:	4a1f      	ldr	r2, [pc, #124]	; (800ed74 <USBD_LL_Init+0x90>)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a1d      	ldr	r2, [pc, #116]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed04:	4b1b      	ldr	r3, [pc, #108]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ed0c:	4b19      	ldr	r3, [pc, #100]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed0e:	2206      	movs	r2, #6
 800ed10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ed12:	4b18      	ldr	r3, [pc, #96]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed14:	2202      	movs	r2, #2
 800ed16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ed18:	4b16      	ldr	r3, [pc, #88]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ed1e:	4b15      	ldr	r3, [pc, #84]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed20:	2200      	movs	r2, #0
 800ed22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ed24:	4b13      	ldr	r3, [pc, #76]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed26:	2200      	movs	r2, #0
 800ed28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ed2a:	4b12      	ldr	r3, [pc, #72]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ed30:	4b10      	ldr	r3, [pc, #64]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed32:	2200      	movs	r2, #0
 800ed34:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ed36:	4b0f      	ldr	r3, [pc, #60]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ed3c:	480d      	ldr	r0, [pc, #52]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed3e:	f7f3 ff9f 	bl	8002c80 <HAL_PCD_Init>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d001      	beq.n	800ed4c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800ed48:	f7f2 fe30 	bl	80019ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ed4c:	2180      	movs	r1, #128	; 0x80
 800ed4e:	4809      	ldr	r0, [pc, #36]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed50:	f7f5 f921 	bl	8003f96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ed54:	2240      	movs	r2, #64	; 0x40
 800ed56:	2100      	movs	r1, #0
 800ed58:	4806      	ldr	r0, [pc, #24]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed5a:	f7f5 f8d5 	bl	8003f08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ed5e:	2280      	movs	r2, #128	; 0x80
 800ed60:	2101      	movs	r1, #1
 800ed62:	4804      	ldr	r0, [pc, #16]	; (800ed74 <USBD_LL_Init+0x90>)
 800ed64:	f7f5 f8d0 	bl	8003f08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	200021e0 	.word	0x200021e0

0800ed78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7f4 f89a 	bl	8002ec8 <HAL_PCD_Start>
 800ed94:	4603      	mov	r3, r0
 800ed96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed98:	7bbb      	ldrb	r3, [r7, #14]
 800ed9a:	2b03      	cmp	r3, #3
 800ed9c:	d816      	bhi.n	800edcc <USBD_LL_Start+0x54>
 800ed9e:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <USBD_LL_Start+0x2c>)
 800eda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda4:	0800edb5 	.word	0x0800edb5
 800eda8:	0800edbb 	.word	0x0800edbb
 800edac:	0800edc1 	.word	0x0800edc1
 800edb0:	0800edc7 	.word	0x0800edc7
    case HAL_OK :
      usb_status = USBD_OK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	73fb      	strb	r3, [r7, #15]
    break;
 800edb8:	e00b      	b.n	800edd2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edba:	2303      	movs	r3, #3
 800edbc:	73fb      	strb	r3, [r7, #15]
    break;
 800edbe:	e008      	b.n	800edd2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edc0:	2301      	movs	r3, #1
 800edc2:	73fb      	strb	r3, [r7, #15]
    break;
 800edc4:	e005      	b.n	800edd2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800edc6:	2303      	movs	r3, #3
 800edc8:	73fb      	strb	r3, [r7, #15]
    break;
 800edca:	e002      	b.n	800edd2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800edcc:	2303      	movs	r3, #3
 800edce:	73fb      	strb	r3, [r7, #15]
    break;
 800edd0:	bf00      	nop
  }
  return usb_status;
 800edd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	4608      	mov	r0, r1
 800ede6:	4611      	mov	r1, r2
 800ede8:	461a      	mov	r2, r3
 800edea:	4603      	mov	r3, r0
 800edec:	70fb      	strb	r3, [r7, #3]
 800edee:	460b      	mov	r3, r1
 800edf0:	70bb      	strb	r3, [r7, #2]
 800edf2:	4613      	mov	r3, r2
 800edf4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee04:	78bb      	ldrb	r3, [r7, #2]
 800ee06:	883a      	ldrh	r2, [r7, #0]
 800ee08:	78f9      	ldrb	r1, [r7, #3]
 800ee0a:	f7f4 fd44 	bl	8003896 <HAL_PCD_EP_Open>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ee12:	7bbb      	ldrb	r3, [r7, #14]
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	d817      	bhi.n	800ee48 <USBD_LL_OpenEP+0x6c>
 800ee18:	a201      	add	r2, pc, #4	; (adr r2, 800ee20 <USBD_LL_OpenEP+0x44>)
 800ee1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1e:	bf00      	nop
 800ee20:	0800ee31 	.word	0x0800ee31
 800ee24:	0800ee37 	.word	0x0800ee37
 800ee28:	0800ee3d 	.word	0x0800ee3d
 800ee2c:	0800ee43 	.word	0x0800ee43
    case HAL_OK :
      usb_status = USBD_OK;
 800ee30:	2300      	movs	r3, #0
 800ee32:	73fb      	strb	r3, [r7, #15]
    break;
 800ee34:	e00b      	b.n	800ee4e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee36:	2303      	movs	r3, #3
 800ee38:	73fb      	strb	r3, [r7, #15]
    break;
 800ee3a:	e008      	b.n	800ee4e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee40:	e005      	b.n	800ee4e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee42:	2303      	movs	r3, #3
 800ee44:	73fb      	strb	r3, [r7, #15]
    break;
 800ee46:	e002      	b.n	800ee4e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ee48:	2303      	movs	r3, #3
 800ee4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee4c:	bf00      	nop
  }
  return usb_status;
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	460b      	mov	r3, r1
 800ee62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee72:	78fa      	ldrb	r2, [r7, #3]
 800ee74:	4611      	mov	r1, r2
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7f4 fd75 	bl	8003966 <HAL_PCD_EP_Close>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
 800ee82:	2b03      	cmp	r3, #3
 800ee84:	d816      	bhi.n	800eeb4 <USBD_LL_CloseEP+0x5c>
 800ee86:	a201      	add	r2, pc, #4	; (adr r2, 800ee8c <USBD_LL_CloseEP+0x34>)
 800ee88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee8c:	0800ee9d 	.word	0x0800ee9d
 800ee90:	0800eea3 	.word	0x0800eea3
 800ee94:	0800eea9 	.word	0x0800eea9
 800ee98:	0800eeaf 	.word	0x0800eeaf
    case HAL_OK :
      usb_status = USBD_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eea0:	e00b      	b.n	800eeba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eea2:	2303      	movs	r3, #3
 800eea4:	73fb      	strb	r3, [r7, #15]
    break;
 800eea6:	e008      	b.n	800eeba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	73fb      	strb	r3, [r7, #15]
    break;
 800eeac:	e005      	b.n	800eeba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb2:	e002      	b.n	800eeba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb8:	bf00      	nop
  }
  return usb_status;
 800eeba:	7bfb      	ldrb	r3, [r7, #15]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3710      	adds	r7, #16
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	460b      	mov	r3, r1
 800eece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eede:	78fa      	ldrb	r2, [r7, #3]
 800eee0:	4611      	mov	r1, r2
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7f4 fe1c 	bl	8003b20 <HAL_PCD_EP_SetStall>
 800eee8:	4603      	mov	r3, r0
 800eeea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	2b03      	cmp	r3, #3
 800eef0:	d816      	bhi.n	800ef20 <USBD_LL_StallEP+0x5c>
 800eef2:	a201      	add	r2, pc, #4	; (adr r2, 800eef8 <USBD_LL_StallEP+0x34>)
 800eef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef8:	0800ef09 	.word	0x0800ef09
 800eefc:	0800ef0f 	.word	0x0800ef0f
 800ef00:	0800ef15 	.word	0x0800ef15
 800ef04:	0800ef1b 	.word	0x0800ef1b
    case HAL_OK :
      usb_status = USBD_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef0c:	e00b      	b.n	800ef26 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef0e:	2303      	movs	r3, #3
 800ef10:	73fb      	strb	r3, [r7, #15]
    break;
 800ef12:	e008      	b.n	800ef26 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef14:	2301      	movs	r3, #1
 800ef16:	73fb      	strb	r3, [r7, #15]
    break;
 800ef18:	e005      	b.n	800ef26 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef1a:	2303      	movs	r3, #3
 800ef1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef1e:	e002      	b.n	800ef26 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ef20:	2303      	movs	r3, #3
 800ef22:	73fb      	strb	r3, [r7, #15]
    break;
 800ef24:	bf00      	nop
  }
  return usb_status;
 800ef26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	460b      	mov	r3, r1
 800ef3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef4a:	78fa      	ldrb	r2, [r7, #3]
 800ef4c:	4611      	mov	r1, r2
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7f4 fe48 	bl	8003be4 <HAL_PCD_EP_ClrStall>
 800ef54:	4603      	mov	r3, r0
 800ef56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ef58:	7bbb      	ldrb	r3, [r7, #14]
 800ef5a:	2b03      	cmp	r3, #3
 800ef5c:	d816      	bhi.n	800ef8c <USBD_LL_ClearStallEP+0x5c>
 800ef5e:	a201      	add	r2, pc, #4	; (adr r2, 800ef64 <USBD_LL_ClearStallEP+0x34>)
 800ef60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef64:	0800ef75 	.word	0x0800ef75
 800ef68:	0800ef7b 	.word	0x0800ef7b
 800ef6c:	0800ef81 	.word	0x0800ef81
 800ef70:	0800ef87 	.word	0x0800ef87
    case HAL_OK :
      usb_status = USBD_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	73fb      	strb	r3, [r7, #15]
    break;
 800ef78:	e00b      	b.n	800ef92 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef7e:	e008      	b.n	800ef92 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef80:	2301      	movs	r3, #1
 800ef82:	73fb      	strb	r3, [r7, #15]
    break;
 800ef84:	e005      	b.n	800ef92 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef86:	2303      	movs	r3, #3
 800ef88:	73fb      	strb	r3, [r7, #15]
    break;
 800ef8a:	e002      	b.n	800ef92 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ef8c:	2303      	movs	r3, #3
 800ef8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef90:	bf00      	nop
  }
  return usb_status;
 800ef92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	460b      	mov	r3, r1
 800efa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800efb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	da0b      	bge.n	800efd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800efb8:	78fb      	ldrb	r3, [r7, #3]
 800efba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efbe:	68f9      	ldr	r1, [r7, #12]
 800efc0:	4613      	mov	r3, r2
 800efc2:	00db      	lsls	r3, r3, #3
 800efc4:	4413      	add	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	440b      	add	r3, r1
 800efca:	333e      	adds	r3, #62	; 0x3e
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	e00b      	b.n	800efe8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800efd0:	78fb      	ldrb	r3, [r7, #3]
 800efd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efd6:	68f9      	ldr	r1, [r7, #12]
 800efd8:	4613      	mov	r3, r2
 800efda:	00db      	lsls	r3, r3, #3
 800efdc:	4413      	add	r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	440b      	add	r3, r1
 800efe2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800efe6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3714      	adds	r7, #20
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	460b      	mov	r3, r1
 800effe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f000:	2300      	movs	r3, #0
 800f002:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f00e:	78fa      	ldrb	r2, [r7, #3]
 800f010:	4611      	mov	r1, r2
 800f012:	4618      	mov	r0, r3
 800f014:	f7f4 fc1a 	bl	800384c <HAL_PCD_SetAddress>
 800f018:	4603      	mov	r3, r0
 800f01a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f01c:	7bbb      	ldrb	r3, [r7, #14]
 800f01e:	2b03      	cmp	r3, #3
 800f020:	d816      	bhi.n	800f050 <USBD_LL_SetUSBAddress+0x5c>
 800f022:	a201      	add	r2, pc, #4	; (adr r2, 800f028 <USBD_LL_SetUSBAddress+0x34>)
 800f024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f028:	0800f039 	.word	0x0800f039
 800f02c:	0800f03f 	.word	0x0800f03f
 800f030:	0800f045 	.word	0x0800f045
 800f034:	0800f04b 	.word	0x0800f04b
    case HAL_OK :
      usb_status = USBD_OK;
 800f038:	2300      	movs	r3, #0
 800f03a:	73fb      	strb	r3, [r7, #15]
    break;
 800f03c:	e00b      	b.n	800f056 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f03e:	2303      	movs	r3, #3
 800f040:	73fb      	strb	r3, [r7, #15]
    break;
 800f042:	e008      	b.n	800f056 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f044:	2301      	movs	r3, #1
 800f046:	73fb      	strb	r3, [r7, #15]
    break;
 800f048:	e005      	b.n	800f056 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f04a:	2303      	movs	r3, #3
 800f04c:	73fb      	strb	r3, [r7, #15]
    break;
 800f04e:	e002      	b.n	800f056 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f050:	2303      	movs	r3, #3
 800f052:	73fb      	strb	r3, [r7, #15]
    break;
 800f054:	bf00      	nop
  }
  return usb_status;
 800f056:	7bfb      	ldrb	r3, [r7, #15]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	607a      	str	r2, [r7, #4]
 800f06a:	603b      	str	r3, [r7, #0]
 800f06c:	460b      	mov	r3, r1
 800f06e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f070:	2300      	movs	r3, #0
 800f072:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f07e:	7af9      	ldrb	r1, [r7, #11]
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	f7f4 fd0f 	bl	8003aa6 <HAL_PCD_EP_Transmit>
 800f088:	4603      	mov	r3, r0
 800f08a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f08c:	7dbb      	ldrb	r3, [r7, #22]
 800f08e:	2b03      	cmp	r3, #3
 800f090:	d816      	bhi.n	800f0c0 <USBD_LL_Transmit+0x60>
 800f092:	a201      	add	r2, pc, #4	; (adr r2, 800f098 <USBD_LL_Transmit+0x38>)
 800f094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f098:	0800f0a9 	.word	0x0800f0a9
 800f09c:	0800f0af 	.word	0x0800f0af
 800f0a0:	0800f0b5 	.word	0x0800f0b5
 800f0a4:	0800f0bb 	.word	0x0800f0bb
    case HAL_OK :
      usb_status = USBD_OK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	75fb      	strb	r3, [r7, #23]
    break;
 800f0ac:	e00b      	b.n	800f0c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	75fb      	strb	r3, [r7, #23]
    break;
 800f0b2:	e008      	b.n	800f0c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	75fb      	strb	r3, [r7, #23]
    break;
 800f0b8:	e005      	b.n	800f0c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	75fb      	strb	r3, [r7, #23]
    break;
 800f0be:	e002      	b.n	800f0c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	75fb      	strb	r3, [r7, #23]
    break;
 800f0c4:	bf00      	nop
  }
  return usb_status;
 800f0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	607a      	str	r2, [r7, #4]
 800f0da:	603b      	str	r3, [r7, #0]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0ee:	7af9      	ldrb	r1, [r7, #11]
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	f7f4 fc81 	bl	80039fa <HAL_PCD_EP_Receive>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f0fc:	7dbb      	ldrb	r3, [r7, #22]
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	d816      	bhi.n	800f130 <USBD_LL_PrepareReceive+0x60>
 800f102:	a201      	add	r2, pc, #4	; (adr r2, 800f108 <USBD_LL_PrepareReceive+0x38>)
 800f104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f108:	0800f119 	.word	0x0800f119
 800f10c:	0800f11f 	.word	0x0800f11f
 800f110:	0800f125 	.word	0x0800f125
 800f114:	0800f12b 	.word	0x0800f12b
    case HAL_OK :
      usb_status = USBD_OK;
 800f118:	2300      	movs	r3, #0
 800f11a:	75fb      	strb	r3, [r7, #23]
    break;
 800f11c:	e00b      	b.n	800f136 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f11e:	2303      	movs	r3, #3
 800f120:	75fb      	strb	r3, [r7, #23]
    break;
 800f122:	e008      	b.n	800f136 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f124:	2301      	movs	r3, #1
 800f126:	75fb      	strb	r3, [r7, #23]
    break;
 800f128:	e005      	b.n	800f136 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f12a:	2303      	movs	r3, #3
 800f12c:	75fb      	strb	r3, [r7, #23]
    break;
 800f12e:	e002      	b.n	800f136 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f130:	2303      	movs	r3, #3
 800f132:	75fb      	strb	r3, [r7, #23]
    break;
 800f134:	bf00      	nop
  }
  return usb_status;
 800f136:	7dfb      	ldrb	r3, [r7, #23]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	460b      	mov	r3, r1
 800f14a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f152:	78fa      	ldrb	r2, [r7, #3]
 800f154:	4611      	mov	r1, r2
 800f156:	4618      	mov	r0, r3
 800f158:	f7f4 fc8d 	bl	8003a76 <HAL_PCD_EP_GetRxCount>
 800f15c:	4603      	mov	r3, r0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
	...

0800f168 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f170:	4b03      	ldr	r3, [pc, #12]	; (800f180 <USBD_static_malloc+0x18>)
}
 800f172:	4618      	mov	r0, r3
 800f174:	370c      	adds	r7, #12
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	200026ec 	.word	0x200026ec

0800f184 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]

}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f19c:	f7f2 f91c 	bl	80013d8 <SystemClock_Config>
}
 800f1a0:	bf00      	nop
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <__libc_init_array>:
 800f1a4:	b570      	push	{r4, r5, r6, lr}
 800f1a6:	4d0d      	ldr	r5, [pc, #52]	; (800f1dc <__libc_init_array+0x38>)
 800f1a8:	4c0d      	ldr	r4, [pc, #52]	; (800f1e0 <__libc_init_array+0x3c>)
 800f1aa:	1b64      	subs	r4, r4, r5
 800f1ac:	10a4      	asrs	r4, r4, #2
 800f1ae:	2600      	movs	r6, #0
 800f1b0:	42a6      	cmp	r6, r4
 800f1b2:	d109      	bne.n	800f1c8 <__libc_init_array+0x24>
 800f1b4:	4d0b      	ldr	r5, [pc, #44]	; (800f1e4 <__libc_init_array+0x40>)
 800f1b6:	4c0c      	ldr	r4, [pc, #48]	; (800f1e8 <__libc_init_array+0x44>)
 800f1b8:	f002 fda0 	bl	8011cfc <_init>
 800f1bc:	1b64      	subs	r4, r4, r5
 800f1be:	10a4      	asrs	r4, r4, #2
 800f1c0:	2600      	movs	r6, #0
 800f1c2:	42a6      	cmp	r6, r4
 800f1c4:	d105      	bne.n	800f1d2 <__libc_init_array+0x2e>
 800f1c6:	bd70      	pop	{r4, r5, r6, pc}
 800f1c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1cc:	4798      	blx	r3
 800f1ce:	3601      	adds	r6, #1
 800f1d0:	e7ee      	b.n	800f1b0 <__libc_init_array+0xc>
 800f1d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1d6:	4798      	blx	r3
 800f1d8:	3601      	adds	r6, #1
 800f1da:	e7f2      	b.n	800f1c2 <__libc_init_array+0x1e>
 800f1dc:	08012418 	.word	0x08012418
 800f1e0:	08012418 	.word	0x08012418
 800f1e4:	08012418 	.word	0x08012418
 800f1e8:	0801241c 	.word	0x0801241c

0800f1ec <malloc>:
 800f1ec:	4b02      	ldr	r3, [pc, #8]	; (800f1f8 <malloc+0xc>)
 800f1ee:	4601      	mov	r1, r0
 800f1f0:	6818      	ldr	r0, [r3, #0]
 800f1f2:	f000 b885 	b.w	800f300 <_malloc_r>
 800f1f6:	bf00      	nop
 800f1f8:	20000188 	.word	0x20000188

0800f1fc <memcpy>:
 800f1fc:	440a      	add	r2, r1
 800f1fe:	4291      	cmp	r1, r2
 800f200:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f204:	d100      	bne.n	800f208 <memcpy+0xc>
 800f206:	4770      	bx	lr
 800f208:	b510      	push	{r4, lr}
 800f20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f20e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f212:	4291      	cmp	r1, r2
 800f214:	d1f9      	bne.n	800f20a <memcpy+0xe>
 800f216:	bd10      	pop	{r4, pc}

0800f218 <memset>:
 800f218:	4402      	add	r2, r0
 800f21a:	4603      	mov	r3, r0
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d100      	bne.n	800f222 <memset+0xa>
 800f220:	4770      	bx	lr
 800f222:	f803 1b01 	strb.w	r1, [r3], #1
 800f226:	e7f9      	b.n	800f21c <memset+0x4>

0800f228 <_free_r>:
 800f228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f22a:	2900      	cmp	r1, #0
 800f22c:	d044      	beq.n	800f2b8 <_free_r+0x90>
 800f22e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f232:	9001      	str	r0, [sp, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	f1a1 0404 	sub.w	r4, r1, #4
 800f23a:	bfb8      	it	lt
 800f23c:	18e4      	addlt	r4, r4, r3
 800f23e:	f001 fd1f 	bl	8010c80 <__malloc_lock>
 800f242:	4a1e      	ldr	r2, [pc, #120]	; (800f2bc <_free_r+0x94>)
 800f244:	9801      	ldr	r0, [sp, #4]
 800f246:	6813      	ldr	r3, [r2, #0]
 800f248:	b933      	cbnz	r3, 800f258 <_free_r+0x30>
 800f24a:	6063      	str	r3, [r4, #4]
 800f24c:	6014      	str	r4, [r2, #0]
 800f24e:	b003      	add	sp, #12
 800f250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f254:	f001 bd1a 	b.w	8010c8c <__malloc_unlock>
 800f258:	42a3      	cmp	r3, r4
 800f25a:	d908      	bls.n	800f26e <_free_r+0x46>
 800f25c:	6825      	ldr	r5, [r4, #0]
 800f25e:	1961      	adds	r1, r4, r5
 800f260:	428b      	cmp	r3, r1
 800f262:	bf01      	itttt	eq
 800f264:	6819      	ldreq	r1, [r3, #0]
 800f266:	685b      	ldreq	r3, [r3, #4]
 800f268:	1949      	addeq	r1, r1, r5
 800f26a:	6021      	streq	r1, [r4, #0]
 800f26c:	e7ed      	b.n	800f24a <_free_r+0x22>
 800f26e:	461a      	mov	r2, r3
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	b10b      	cbz	r3, 800f278 <_free_r+0x50>
 800f274:	42a3      	cmp	r3, r4
 800f276:	d9fa      	bls.n	800f26e <_free_r+0x46>
 800f278:	6811      	ldr	r1, [r2, #0]
 800f27a:	1855      	adds	r5, r2, r1
 800f27c:	42a5      	cmp	r5, r4
 800f27e:	d10b      	bne.n	800f298 <_free_r+0x70>
 800f280:	6824      	ldr	r4, [r4, #0]
 800f282:	4421      	add	r1, r4
 800f284:	1854      	adds	r4, r2, r1
 800f286:	42a3      	cmp	r3, r4
 800f288:	6011      	str	r1, [r2, #0]
 800f28a:	d1e0      	bne.n	800f24e <_free_r+0x26>
 800f28c:	681c      	ldr	r4, [r3, #0]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	6053      	str	r3, [r2, #4]
 800f292:	4421      	add	r1, r4
 800f294:	6011      	str	r1, [r2, #0]
 800f296:	e7da      	b.n	800f24e <_free_r+0x26>
 800f298:	d902      	bls.n	800f2a0 <_free_r+0x78>
 800f29a:	230c      	movs	r3, #12
 800f29c:	6003      	str	r3, [r0, #0]
 800f29e:	e7d6      	b.n	800f24e <_free_r+0x26>
 800f2a0:	6825      	ldr	r5, [r4, #0]
 800f2a2:	1961      	adds	r1, r4, r5
 800f2a4:	428b      	cmp	r3, r1
 800f2a6:	bf04      	itt	eq
 800f2a8:	6819      	ldreq	r1, [r3, #0]
 800f2aa:	685b      	ldreq	r3, [r3, #4]
 800f2ac:	6063      	str	r3, [r4, #4]
 800f2ae:	bf04      	itt	eq
 800f2b0:	1949      	addeq	r1, r1, r5
 800f2b2:	6021      	streq	r1, [r4, #0]
 800f2b4:	6054      	str	r4, [r2, #4]
 800f2b6:	e7ca      	b.n	800f24e <_free_r+0x26>
 800f2b8:	b003      	add	sp, #12
 800f2ba:	bd30      	pop	{r4, r5, pc}
 800f2bc:	2000290c 	.word	0x2000290c

0800f2c0 <sbrk_aligned>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	4e0e      	ldr	r6, [pc, #56]	; (800f2fc <sbrk_aligned+0x3c>)
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	6831      	ldr	r1, [r6, #0]
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	b911      	cbnz	r1, 800f2d2 <sbrk_aligned+0x12>
 800f2cc:	f000 fd0e 	bl	800fcec <_sbrk_r>
 800f2d0:	6030      	str	r0, [r6, #0]
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f000 fd09 	bl	800fcec <_sbrk_r>
 800f2da:	1c43      	adds	r3, r0, #1
 800f2dc:	d00a      	beq.n	800f2f4 <sbrk_aligned+0x34>
 800f2de:	1cc4      	adds	r4, r0, #3
 800f2e0:	f024 0403 	bic.w	r4, r4, #3
 800f2e4:	42a0      	cmp	r0, r4
 800f2e6:	d007      	beq.n	800f2f8 <sbrk_aligned+0x38>
 800f2e8:	1a21      	subs	r1, r4, r0
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f000 fcfe 	bl	800fcec <_sbrk_r>
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d101      	bne.n	800f2f8 <sbrk_aligned+0x38>
 800f2f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	20002910 	.word	0x20002910

0800f300 <_malloc_r>:
 800f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f304:	1ccd      	adds	r5, r1, #3
 800f306:	f025 0503 	bic.w	r5, r5, #3
 800f30a:	3508      	adds	r5, #8
 800f30c:	2d0c      	cmp	r5, #12
 800f30e:	bf38      	it	cc
 800f310:	250c      	movcc	r5, #12
 800f312:	2d00      	cmp	r5, #0
 800f314:	4607      	mov	r7, r0
 800f316:	db01      	blt.n	800f31c <_malloc_r+0x1c>
 800f318:	42a9      	cmp	r1, r5
 800f31a:	d905      	bls.n	800f328 <_malloc_r+0x28>
 800f31c:	230c      	movs	r3, #12
 800f31e:	603b      	str	r3, [r7, #0]
 800f320:	2600      	movs	r6, #0
 800f322:	4630      	mov	r0, r6
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f328:	4e2e      	ldr	r6, [pc, #184]	; (800f3e4 <_malloc_r+0xe4>)
 800f32a:	f001 fca9 	bl	8010c80 <__malloc_lock>
 800f32e:	6833      	ldr	r3, [r6, #0]
 800f330:	461c      	mov	r4, r3
 800f332:	bb34      	cbnz	r4, 800f382 <_malloc_r+0x82>
 800f334:	4629      	mov	r1, r5
 800f336:	4638      	mov	r0, r7
 800f338:	f7ff ffc2 	bl	800f2c0 <sbrk_aligned>
 800f33c:	1c43      	adds	r3, r0, #1
 800f33e:	4604      	mov	r4, r0
 800f340:	d14d      	bne.n	800f3de <_malloc_r+0xde>
 800f342:	6834      	ldr	r4, [r6, #0]
 800f344:	4626      	mov	r6, r4
 800f346:	2e00      	cmp	r6, #0
 800f348:	d140      	bne.n	800f3cc <_malloc_r+0xcc>
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	4631      	mov	r1, r6
 800f34e:	4638      	mov	r0, r7
 800f350:	eb04 0803 	add.w	r8, r4, r3
 800f354:	f000 fcca 	bl	800fcec <_sbrk_r>
 800f358:	4580      	cmp	r8, r0
 800f35a:	d13a      	bne.n	800f3d2 <_malloc_r+0xd2>
 800f35c:	6821      	ldr	r1, [r4, #0]
 800f35e:	3503      	adds	r5, #3
 800f360:	1a6d      	subs	r5, r5, r1
 800f362:	f025 0503 	bic.w	r5, r5, #3
 800f366:	3508      	adds	r5, #8
 800f368:	2d0c      	cmp	r5, #12
 800f36a:	bf38      	it	cc
 800f36c:	250c      	movcc	r5, #12
 800f36e:	4629      	mov	r1, r5
 800f370:	4638      	mov	r0, r7
 800f372:	f7ff ffa5 	bl	800f2c0 <sbrk_aligned>
 800f376:	3001      	adds	r0, #1
 800f378:	d02b      	beq.n	800f3d2 <_malloc_r+0xd2>
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	442b      	add	r3, r5
 800f37e:	6023      	str	r3, [r4, #0]
 800f380:	e00e      	b.n	800f3a0 <_malloc_r+0xa0>
 800f382:	6822      	ldr	r2, [r4, #0]
 800f384:	1b52      	subs	r2, r2, r5
 800f386:	d41e      	bmi.n	800f3c6 <_malloc_r+0xc6>
 800f388:	2a0b      	cmp	r2, #11
 800f38a:	d916      	bls.n	800f3ba <_malloc_r+0xba>
 800f38c:	1961      	adds	r1, r4, r5
 800f38e:	42a3      	cmp	r3, r4
 800f390:	6025      	str	r5, [r4, #0]
 800f392:	bf18      	it	ne
 800f394:	6059      	strne	r1, [r3, #4]
 800f396:	6863      	ldr	r3, [r4, #4]
 800f398:	bf08      	it	eq
 800f39a:	6031      	streq	r1, [r6, #0]
 800f39c:	5162      	str	r2, [r4, r5]
 800f39e:	604b      	str	r3, [r1, #4]
 800f3a0:	4638      	mov	r0, r7
 800f3a2:	f104 060b 	add.w	r6, r4, #11
 800f3a6:	f001 fc71 	bl	8010c8c <__malloc_unlock>
 800f3aa:	f026 0607 	bic.w	r6, r6, #7
 800f3ae:	1d23      	adds	r3, r4, #4
 800f3b0:	1af2      	subs	r2, r6, r3
 800f3b2:	d0b6      	beq.n	800f322 <_malloc_r+0x22>
 800f3b4:	1b9b      	subs	r3, r3, r6
 800f3b6:	50a3      	str	r3, [r4, r2]
 800f3b8:	e7b3      	b.n	800f322 <_malloc_r+0x22>
 800f3ba:	6862      	ldr	r2, [r4, #4]
 800f3bc:	42a3      	cmp	r3, r4
 800f3be:	bf0c      	ite	eq
 800f3c0:	6032      	streq	r2, [r6, #0]
 800f3c2:	605a      	strne	r2, [r3, #4]
 800f3c4:	e7ec      	b.n	800f3a0 <_malloc_r+0xa0>
 800f3c6:	4623      	mov	r3, r4
 800f3c8:	6864      	ldr	r4, [r4, #4]
 800f3ca:	e7b2      	b.n	800f332 <_malloc_r+0x32>
 800f3cc:	4634      	mov	r4, r6
 800f3ce:	6876      	ldr	r6, [r6, #4]
 800f3d0:	e7b9      	b.n	800f346 <_malloc_r+0x46>
 800f3d2:	230c      	movs	r3, #12
 800f3d4:	603b      	str	r3, [r7, #0]
 800f3d6:	4638      	mov	r0, r7
 800f3d8:	f001 fc58 	bl	8010c8c <__malloc_unlock>
 800f3dc:	e7a1      	b.n	800f322 <_malloc_r+0x22>
 800f3de:	6025      	str	r5, [r4, #0]
 800f3e0:	e7de      	b.n	800f3a0 <_malloc_r+0xa0>
 800f3e2:	bf00      	nop
 800f3e4:	2000290c 	.word	0x2000290c

0800f3e8 <__cvt>:
 800f3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ec:	ec55 4b10 	vmov	r4, r5, d0
 800f3f0:	2d00      	cmp	r5, #0
 800f3f2:	460e      	mov	r6, r1
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	bfbb      	ittet	lt
 800f3fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3fe:	461d      	movlt	r5, r3
 800f400:	2300      	movge	r3, #0
 800f402:	232d      	movlt	r3, #45	; 0x2d
 800f404:	700b      	strb	r3, [r1, #0]
 800f406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f408:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f40c:	4691      	mov	r9, r2
 800f40e:	f023 0820 	bic.w	r8, r3, #32
 800f412:	bfbc      	itt	lt
 800f414:	4622      	movlt	r2, r4
 800f416:	4614      	movlt	r4, r2
 800f418:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f41c:	d005      	beq.n	800f42a <__cvt+0x42>
 800f41e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f422:	d100      	bne.n	800f426 <__cvt+0x3e>
 800f424:	3601      	adds	r6, #1
 800f426:	2102      	movs	r1, #2
 800f428:	e000      	b.n	800f42c <__cvt+0x44>
 800f42a:	2103      	movs	r1, #3
 800f42c:	ab03      	add	r3, sp, #12
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	ab02      	add	r3, sp, #8
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	ec45 4b10 	vmov	d0, r4, r5
 800f438:	4653      	mov	r3, sl
 800f43a:	4632      	mov	r2, r6
 800f43c:	f000 fd10 	bl	800fe60 <_dtoa_r>
 800f440:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f444:	4607      	mov	r7, r0
 800f446:	d102      	bne.n	800f44e <__cvt+0x66>
 800f448:	f019 0f01 	tst.w	r9, #1
 800f44c:	d022      	beq.n	800f494 <__cvt+0xac>
 800f44e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f452:	eb07 0906 	add.w	r9, r7, r6
 800f456:	d110      	bne.n	800f47a <__cvt+0x92>
 800f458:	783b      	ldrb	r3, [r7, #0]
 800f45a:	2b30      	cmp	r3, #48	; 0x30
 800f45c:	d10a      	bne.n	800f474 <__cvt+0x8c>
 800f45e:	2200      	movs	r2, #0
 800f460:	2300      	movs	r3, #0
 800f462:	4620      	mov	r0, r4
 800f464:	4629      	mov	r1, r5
 800f466:	f7f1 fb47 	bl	8000af8 <__aeabi_dcmpeq>
 800f46a:	b918      	cbnz	r0, 800f474 <__cvt+0x8c>
 800f46c:	f1c6 0601 	rsb	r6, r6, #1
 800f470:	f8ca 6000 	str.w	r6, [sl]
 800f474:	f8da 3000 	ldr.w	r3, [sl]
 800f478:	4499      	add	r9, r3
 800f47a:	2200      	movs	r2, #0
 800f47c:	2300      	movs	r3, #0
 800f47e:	4620      	mov	r0, r4
 800f480:	4629      	mov	r1, r5
 800f482:	f7f1 fb39 	bl	8000af8 <__aeabi_dcmpeq>
 800f486:	b108      	cbz	r0, 800f48c <__cvt+0xa4>
 800f488:	f8cd 900c 	str.w	r9, [sp, #12]
 800f48c:	2230      	movs	r2, #48	; 0x30
 800f48e:	9b03      	ldr	r3, [sp, #12]
 800f490:	454b      	cmp	r3, r9
 800f492:	d307      	bcc.n	800f4a4 <__cvt+0xbc>
 800f494:	9b03      	ldr	r3, [sp, #12]
 800f496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f498:	1bdb      	subs	r3, r3, r7
 800f49a:	4638      	mov	r0, r7
 800f49c:	6013      	str	r3, [r2, #0]
 800f49e:	b004      	add	sp, #16
 800f4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a4:	1c59      	adds	r1, r3, #1
 800f4a6:	9103      	str	r1, [sp, #12]
 800f4a8:	701a      	strb	r2, [r3, #0]
 800f4aa:	e7f0      	b.n	800f48e <__cvt+0xa6>

0800f4ac <__exponent>:
 800f4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2900      	cmp	r1, #0
 800f4b2:	bfb8      	it	lt
 800f4b4:	4249      	neglt	r1, r1
 800f4b6:	f803 2b02 	strb.w	r2, [r3], #2
 800f4ba:	bfb4      	ite	lt
 800f4bc:	222d      	movlt	r2, #45	; 0x2d
 800f4be:	222b      	movge	r2, #43	; 0x2b
 800f4c0:	2909      	cmp	r1, #9
 800f4c2:	7042      	strb	r2, [r0, #1]
 800f4c4:	dd2a      	ble.n	800f51c <__exponent+0x70>
 800f4c6:	f10d 0407 	add.w	r4, sp, #7
 800f4ca:	46a4      	mov	ip, r4
 800f4cc:	270a      	movs	r7, #10
 800f4ce:	46a6      	mov	lr, r4
 800f4d0:	460a      	mov	r2, r1
 800f4d2:	fb91 f6f7 	sdiv	r6, r1, r7
 800f4d6:	fb07 1516 	mls	r5, r7, r6, r1
 800f4da:	3530      	adds	r5, #48	; 0x30
 800f4dc:	2a63      	cmp	r2, #99	; 0x63
 800f4de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f4e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	dcf1      	bgt.n	800f4ce <__exponent+0x22>
 800f4ea:	3130      	adds	r1, #48	; 0x30
 800f4ec:	f1ae 0502 	sub.w	r5, lr, #2
 800f4f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f4f4:	1c44      	adds	r4, r0, #1
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	4561      	cmp	r1, ip
 800f4fa:	d30a      	bcc.n	800f512 <__exponent+0x66>
 800f4fc:	f10d 0209 	add.w	r2, sp, #9
 800f500:	eba2 020e 	sub.w	r2, r2, lr
 800f504:	4565      	cmp	r5, ip
 800f506:	bf88      	it	hi
 800f508:	2200      	movhi	r2, #0
 800f50a:	4413      	add	r3, r2
 800f50c:	1a18      	subs	r0, r3, r0
 800f50e:	b003      	add	sp, #12
 800f510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f512:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f516:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f51a:	e7ed      	b.n	800f4f8 <__exponent+0x4c>
 800f51c:	2330      	movs	r3, #48	; 0x30
 800f51e:	3130      	adds	r1, #48	; 0x30
 800f520:	7083      	strb	r3, [r0, #2]
 800f522:	70c1      	strb	r1, [r0, #3]
 800f524:	1d03      	adds	r3, r0, #4
 800f526:	e7f1      	b.n	800f50c <__exponent+0x60>

0800f528 <_printf_float>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	ed2d 8b02 	vpush	{d8}
 800f530:	b08d      	sub	sp, #52	; 0x34
 800f532:	460c      	mov	r4, r1
 800f534:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f538:	4616      	mov	r6, r2
 800f53a:	461f      	mov	r7, r3
 800f53c:	4605      	mov	r5, r0
 800f53e:	f001 fb85 	bl	8010c4c <_localeconv_r>
 800f542:	f8d0 a000 	ldr.w	sl, [r0]
 800f546:	4650      	mov	r0, sl
 800f548:	f7f0 fe5a 	bl	8000200 <strlen>
 800f54c:	2300      	movs	r3, #0
 800f54e:	930a      	str	r3, [sp, #40]	; 0x28
 800f550:	6823      	ldr	r3, [r4, #0]
 800f552:	9305      	str	r3, [sp, #20]
 800f554:	f8d8 3000 	ldr.w	r3, [r8]
 800f558:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f55c:	3307      	adds	r3, #7
 800f55e:	f023 0307 	bic.w	r3, r3, #7
 800f562:	f103 0208 	add.w	r2, r3, #8
 800f566:	f8c8 2000 	str.w	r2, [r8]
 800f56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f572:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f576:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f57a:	9307      	str	r3, [sp, #28]
 800f57c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f580:	ee08 0a10 	vmov	s16, r0
 800f584:	4b9f      	ldr	r3, [pc, #636]	; (800f804 <_printf_float+0x2dc>)
 800f586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f58a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f58e:	f7f1 fae5 	bl	8000b5c <__aeabi_dcmpun>
 800f592:	bb88      	cbnz	r0, 800f5f8 <_printf_float+0xd0>
 800f594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f598:	4b9a      	ldr	r3, [pc, #616]	; (800f804 <_printf_float+0x2dc>)
 800f59a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f59e:	f7f1 fabf 	bl	8000b20 <__aeabi_dcmple>
 800f5a2:	bb48      	cbnz	r0, 800f5f8 <_printf_float+0xd0>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	4649      	mov	r1, r9
 800f5ac:	f7f1 faae 	bl	8000b0c <__aeabi_dcmplt>
 800f5b0:	b110      	cbz	r0, 800f5b8 <_printf_float+0x90>
 800f5b2:	232d      	movs	r3, #45	; 0x2d
 800f5b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5b8:	4b93      	ldr	r3, [pc, #588]	; (800f808 <_printf_float+0x2e0>)
 800f5ba:	4894      	ldr	r0, [pc, #592]	; (800f80c <_printf_float+0x2e4>)
 800f5bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f5c0:	bf94      	ite	ls
 800f5c2:	4698      	movls	r8, r3
 800f5c4:	4680      	movhi	r8, r0
 800f5c6:	2303      	movs	r3, #3
 800f5c8:	6123      	str	r3, [r4, #16]
 800f5ca:	9b05      	ldr	r3, [sp, #20]
 800f5cc:	f023 0204 	bic.w	r2, r3, #4
 800f5d0:	6022      	str	r2, [r4, #0]
 800f5d2:	f04f 0900 	mov.w	r9, #0
 800f5d6:	9700      	str	r7, [sp, #0]
 800f5d8:	4633      	mov	r3, r6
 800f5da:	aa0b      	add	r2, sp, #44	; 0x2c
 800f5dc:	4621      	mov	r1, r4
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f000 f9d8 	bl	800f994 <_printf_common>
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	f040 8090 	bne.w	800f70a <_printf_float+0x1e2>
 800f5ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5ee:	b00d      	add	sp, #52	; 0x34
 800f5f0:	ecbd 8b02 	vpop	{d8}
 800f5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f8:	4642      	mov	r2, r8
 800f5fa:	464b      	mov	r3, r9
 800f5fc:	4640      	mov	r0, r8
 800f5fe:	4649      	mov	r1, r9
 800f600:	f7f1 faac 	bl	8000b5c <__aeabi_dcmpun>
 800f604:	b140      	cbz	r0, 800f618 <_printf_float+0xf0>
 800f606:	464b      	mov	r3, r9
 800f608:	2b00      	cmp	r3, #0
 800f60a:	bfbc      	itt	lt
 800f60c:	232d      	movlt	r3, #45	; 0x2d
 800f60e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f612:	487f      	ldr	r0, [pc, #508]	; (800f810 <_printf_float+0x2e8>)
 800f614:	4b7f      	ldr	r3, [pc, #508]	; (800f814 <_printf_float+0x2ec>)
 800f616:	e7d1      	b.n	800f5bc <_printf_float+0x94>
 800f618:	6863      	ldr	r3, [r4, #4]
 800f61a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f61e:	9206      	str	r2, [sp, #24]
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	d13f      	bne.n	800f6a4 <_printf_float+0x17c>
 800f624:	2306      	movs	r3, #6
 800f626:	6063      	str	r3, [r4, #4]
 800f628:	9b05      	ldr	r3, [sp, #20]
 800f62a:	6861      	ldr	r1, [r4, #4]
 800f62c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f630:	2300      	movs	r3, #0
 800f632:	9303      	str	r3, [sp, #12]
 800f634:	ab0a      	add	r3, sp, #40	; 0x28
 800f636:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f63a:	ab09      	add	r3, sp, #36	; 0x24
 800f63c:	ec49 8b10 	vmov	d0, r8, r9
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	6022      	str	r2, [r4, #0]
 800f644:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f648:	4628      	mov	r0, r5
 800f64a:	f7ff fecd 	bl	800f3e8 <__cvt>
 800f64e:	9b06      	ldr	r3, [sp, #24]
 800f650:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f652:	2b47      	cmp	r3, #71	; 0x47
 800f654:	4680      	mov	r8, r0
 800f656:	d108      	bne.n	800f66a <_printf_float+0x142>
 800f658:	1cc8      	adds	r0, r1, #3
 800f65a:	db02      	blt.n	800f662 <_printf_float+0x13a>
 800f65c:	6863      	ldr	r3, [r4, #4]
 800f65e:	4299      	cmp	r1, r3
 800f660:	dd41      	ble.n	800f6e6 <_printf_float+0x1be>
 800f662:	f1ab 0b02 	sub.w	fp, fp, #2
 800f666:	fa5f fb8b 	uxtb.w	fp, fp
 800f66a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f66e:	d820      	bhi.n	800f6b2 <_printf_float+0x18a>
 800f670:	3901      	subs	r1, #1
 800f672:	465a      	mov	r2, fp
 800f674:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f678:	9109      	str	r1, [sp, #36]	; 0x24
 800f67a:	f7ff ff17 	bl	800f4ac <__exponent>
 800f67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f680:	1813      	adds	r3, r2, r0
 800f682:	2a01      	cmp	r2, #1
 800f684:	4681      	mov	r9, r0
 800f686:	6123      	str	r3, [r4, #16]
 800f688:	dc02      	bgt.n	800f690 <_printf_float+0x168>
 800f68a:	6822      	ldr	r2, [r4, #0]
 800f68c:	07d2      	lsls	r2, r2, #31
 800f68e:	d501      	bpl.n	800f694 <_printf_float+0x16c>
 800f690:	3301      	adds	r3, #1
 800f692:	6123      	str	r3, [r4, #16]
 800f694:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d09c      	beq.n	800f5d6 <_printf_float+0xae>
 800f69c:	232d      	movs	r3, #45	; 0x2d
 800f69e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6a2:	e798      	b.n	800f5d6 <_printf_float+0xae>
 800f6a4:	9a06      	ldr	r2, [sp, #24]
 800f6a6:	2a47      	cmp	r2, #71	; 0x47
 800f6a8:	d1be      	bne.n	800f628 <_printf_float+0x100>
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1bc      	bne.n	800f628 <_printf_float+0x100>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e7b9      	b.n	800f626 <_printf_float+0xfe>
 800f6b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f6b6:	d118      	bne.n	800f6ea <_printf_float+0x1c2>
 800f6b8:	2900      	cmp	r1, #0
 800f6ba:	6863      	ldr	r3, [r4, #4]
 800f6bc:	dd0b      	ble.n	800f6d6 <_printf_float+0x1ae>
 800f6be:	6121      	str	r1, [r4, #16]
 800f6c0:	b913      	cbnz	r3, 800f6c8 <_printf_float+0x1a0>
 800f6c2:	6822      	ldr	r2, [r4, #0]
 800f6c4:	07d0      	lsls	r0, r2, #31
 800f6c6:	d502      	bpl.n	800f6ce <_printf_float+0x1a6>
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	440b      	add	r3, r1
 800f6cc:	6123      	str	r3, [r4, #16]
 800f6ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800f6d0:	f04f 0900 	mov.w	r9, #0
 800f6d4:	e7de      	b.n	800f694 <_printf_float+0x16c>
 800f6d6:	b913      	cbnz	r3, 800f6de <_printf_float+0x1b6>
 800f6d8:	6822      	ldr	r2, [r4, #0]
 800f6da:	07d2      	lsls	r2, r2, #31
 800f6dc:	d501      	bpl.n	800f6e2 <_printf_float+0x1ba>
 800f6de:	3302      	adds	r3, #2
 800f6e0:	e7f4      	b.n	800f6cc <_printf_float+0x1a4>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e7f2      	b.n	800f6cc <_printf_float+0x1a4>
 800f6e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ec:	4299      	cmp	r1, r3
 800f6ee:	db05      	blt.n	800f6fc <_printf_float+0x1d4>
 800f6f0:	6823      	ldr	r3, [r4, #0]
 800f6f2:	6121      	str	r1, [r4, #16]
 800f6f4:	07d8      	lsls	r0, r3, #31
 800f6f6:	d5ea      	bpl.n	800f6ce <_printf_float+0x1a6>
 800f6f8:	1c4b      	adds	r3, r1, #1
 800f6fa:	e7e7      	b.n	800f6cc <_printf_float+0x1a4>
 800f6fc:	2900      	cmp	r1, #0
 800f6fe:	bfd4      	ite	le
 800f700:	f1c1 0202 	rsble	r2, r1, #2
 800f704:	2201      	movgt	r2, #1
 800f706:	4413      	add	r3, r2
 800f708:	e7e0      	b.n	800f6cc <_printf_float+0x1a4>
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	055a      	lsls	r2, r3, #21
 800f70e:	d407      	bmi.n	800f720 <_printf_float+0x1f8>
 800f710:	6923      	ldr	r3, [r4, #16]
 800f712:	4642      	mov	r2, r8
 800f714:	4631      	mov	r1, r6
 800f716:	4628      	mov	r0, r5
 800f718:	47b8      	blx	r7
 800f71a:	3001      	adds	r0, #1
 800f71c:	d12c      	bne.n	800f778 <_printf_float+0x250>
 800f71e:	e764      	b.n	800f5ea <_printf_float+0xc2>
 800f720:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f724:	f240 80e0 	bls.w	800f8e8 <_printf_float+0x3c0>
 800f728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f72c:	2200      	movs	r2, #0
 800f72e:	2300      	movs	r3, #0
 800f730:	f7f1 f9e2 	bl	8000af8 <__aeabi_dcmpeq>
 800f734:	2800      	cmp	r0, #0
 800f736:	d034      	beq.n	800f7a2 <_printf_float+0x27a>
 800f738:	4a37      	ldr	r2, [pc, #220]	; (800f818 <_printf_float+0x2f0>)
 800f73a:	2301      	movs	r3, #1
 800f73c:	4631      	mov	r1, r6
 800f73e:	4628      	mov	r0, r5
 800f740:	47b8      	blx	r7
 800f742:	3001      	adds	r0, #1
 800f744:	f43f af51 	beq.w	800f5ea <_printf_float+0xc2>
 800f748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f74c:	429a      	cmp	r2, r3
 800f74e:	db02      	blt.n	800f756 <_printf_float+0x22e>
 800f750:	6823      	ldr	r3, [r4, #0]
 800f752:	07d8      	lsls	r0, r3, #31
 800f754:	d510      	bpl.n	800f778 <_printf_float+0x250>
 800f756:	ee18 3a10 	vmov	r3, s16
 800f75a:	4652      	mov	r2, sl
 800f75c:	4631      	mov	r1, r6
 800f75e:	4628      	mov	r0, r5
 800f760:	47b8      	blx	r7
 800f762:	3001      	adds	r0, #1
 800f764:	f43f af41 	beq.w	800f5ea <_printf_float+0xc2>
 800f768:	f04f 0800 	mov.w	r8, #0
 800f76c:	f104 091a 	add.w	r9, r4, #26
 800f770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f772:	3b01      	subs	r3, #1
 800f774:	4543      	cmp	r3, r8
 800f776:	dc09      	bgt.n	800f78c <_printf_float+0x264>
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	079b      	lsls	r3, r3, #30
 800f77c:	f100 8105 	bmi.w	800f98a <_printf_float+0x462>
 800f780:	68e0      	ldr	r0, [r4, #12]
 800f782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f784:	4298      	cmp	r0, r3
 800f786:	bfb8      	it	lt
 800f788:	4618      	movlt	r0, r3
 800f78a:	e730      	b.n	800f5ee <_printf_float+0xc6>
 800f78c:	2301      	movs	r3, #1
 800f78e:	464a      	mov	r2, r9
 800f790:	4631      	mov	r1, r6
 800f792:	4628      	mov	r0, r5
 800f794:	47b8      	blx	r7
 800f796:	3001      	adds	r0, #1
 800f798:	f43f af27 	beq.w	800f5ea <_printf_float+0xc2>
 800f79c:	f108 0801 	add.w	r8, r8, #1
 800f7a0:	e7e6      	b.n	800f770 <_printf_float+0x248>
 800f7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	dc39      	bgt.n	800f81c <_printf_float+0x2f4>
 800f7a8:	4a1b      	ldr	r2, [pc, #108]	; (800f818 <_printf_float+0x2f0>)
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	4631      	mov	r1, r6
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	47b8      	blx	r7
 800f7b2:	3001      	adds	r0, #1
 800f7b4:	f43f af19 	beq.w	800f5ea <_printf_float+0xc2>
 800f7b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	d102      	bne.n	800f7c6 <_printf_float+0x29e>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	07d9      	lsls	r1, r3, #31
 800f7c4:	d5d8      	bpl.n	800f778 <_printf_float+0x250>
 800f7c6:	ee18 3a10 	vmov	r3, s16
 800f7ca:	4652      	mov	r2, sl
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	47b8      	blx	r7
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	f43f af09 	beq.w	800f5ea <_printf_float+0xc2>
 800f7d8:	f04f 0900 	mov.w	r9, #0
 800f7dc:	f104 0a1a 	add.w	sl, r4, #26
 800f7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e2:	425b      	negs	r3, r3
 800f7e4:	454b      	cmp	r3, r9
 800f7e6:	dc01      	bgt.n	800f7ec <_printf_float+0x2c4>
 800f7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ea:	e792      	b.n	800f712 <_printf_float+0x1ea>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	4652      	mov	r2, sl
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	47b8      	blx	r7
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f43f aef7 	beq.w	800f5ea <_printf_float+0xc2>
 800f7fc:	f109 0901 	add.w	r9, r9, #1
 800f800:	e7ee      	b.n	800f7e0 <_printf_float+0x2b8>
 800f802:	bf00      	nop
 800f804:	7fefffff 	.word	0x7fefffff
 800f808:	08012034 	.word	0x08012034
 800f80c:	08012038 	.word	0x08012038
 800f810:	08012040 	.word	0x08012040
 800f814:	0801203c 	.word	0x0801203c
 800f818:	08012044 	.word	0x08012044
 800f81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f81e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f820:	429a      	cmp	r2, r3
 800f822:	bfa8      	it	ge
 800f824:	461a      	movge	r2, r3
 800f826:	2a00      	cmp	r2, #0
 800f828:	4691      	mov	r9, r2
 800f82a:	dc37      	bgt.n	800f89c <_printf_float+0x374>
 800f82c:	f04f 0b00 	mov.w	fp, #0
 800f830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f834:	f104 021a 	add.w	r2, r4, #26
 800f838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f83a:	9305      	str	r3, [sp, #20]
 800f83c:	eba3 0309 	sub.w	r3, r3, r9
 800f840:	455b      	cmp	r3, fp
 800f842:	dc33      	bgt.n	800f8ac <_printf_float+0x384>
 800f844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f848:	429a      	cmp	r2, r3
 800f84a:	db3b      	blt.n	800f8c4 <_printf_float+0x39c>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	07da      	lsls	r2, r3, #31
 800f850:	d438      	bmi.n	800f8c4 <_printf_float+0x39c>
 800f852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f854:	9a05      	ldr	r2, [sp, #20]
 800f856:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f858:	1a9a      	subs	r2, r3, r2
 800f85a:	eba3 0901 	sub.w	r9, r3, r1
 800f85e:	4591      	cmp	r9, r2
 800f860:	bfa8      	it	ge
 800f862:	4691      	movge	r9, r2
 800f864:	f1b9 0f00 	cmp.w	r9, #0
 800f868:	dc35      	bgt.n	800f8d6 <_printf_float+0x3ae>
 800f86a:	f04f 0800 	mov.w	r8, #0
 800f86e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f872:	f104 0a1a 	add.w	sl, r4, #26
 800f876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f87a:	1a9b      	subs	r3, r3, r2
 800f87c:	eba3 0309 	sub.w	r3, r3, r9
 800f880:	4543      	cmp	r3, r8
 800f882:	f77f af79 	ble.w	800f778 <_printf_float+0x250>
 800f886:	2301      	movs	r3, #1
 800f888:	4652      	mov	r2, sl
 800f88a:	4631      	mov	r1, r6
 800f88c:	4628      	mov	r0, r5
 800f88e:	47b8      	blx	r7
 800f890:	3001      	adds	r0, #1
 800f892:	f43f aeaa 	beq.w	800f5ea <_printf_float+0xc2>
 800f896:	f108 0801 	add.w	r8, r8, #1
 800f89a:	e7ec      	b.n	800f876 <_printf_float+0x34e>
 800f89c:	4613      	mov	r3, r2
 800f89e:	4631      	mov	r1, r6
 800f8a0:	4642      	mov	r2, r8
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b8      	blx	r7
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	d1c0      	bne.n	800f82c <_printf_float+0x304>
 800f8aa:	e69e      	b.n	800f5ea <_printf_float+0xc2>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	4631      	mov	r1, r6
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	9205      	str	r2, [sp, #20]
 800f8b4:	47b8      	blx	r7
 800f8b6:	3001      	adds	r0, #1
 800f8b8:	f43f ae97 	beq.w	800f5ea <_printf_float+0xc2>
 800f8bc:	9a05      	ldr	r2, [sp, #20]
 800f8be:	f10b 0b01 	add.w	fp, fp, #1
 800f8c2:	e7b9      	b.n	800f838 <_printf_float+0x310>
 800f8c4:	ee18 3a10 	vmov	r3, s16
 800f8c8:	4652      	mov	r2, sl
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	47b8      	blx	r7
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	d1be      	bne.n	800f852 <_printf_float+0x32a>
 800f8d4:	e689      	b.n	800f5ea <_printf_float+0xc2>
 800f8d6:	9a05      	ldr	r2, [sp, #20]
 800f8d8:	464b      	mov	r3, r9
 800f8da:	4442      	add	r2, r8
 800f8dc:	4631      	mov	r1, r6
 800f8de:	4628      	mov	r0, r5
 800f8e0:	47b8      	blx	r7
 800f8e2:	3001      	adds	r0, #1
 800f8e4:	d1c1      	bne.n	800f86a <_printf_float+0x342>
 800f8e6:	e680      	b.n	800f5ea <_printf_float+0xc2>
 800f8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8ea:	2a01      	cmp	r2, #1
 800f8ec:	dc01      	bgt.n	800f8f2 <_printf_float+0x3ca>
 800f8ee:	07db      	lsls	r3, r3, #31
 800f8f0:	d538      	bpl.n	800f964 <_printf_float+0x43c>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	4642      	mov	r2, r8
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	47b8      	blx	r7
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	f43f ae74 	beq.w	800f5ea <_printf_float+0xc2>
 800f902:	ee18 3a10 	vmov	r3, s16
 800f906:	4652      	mov	r2, sl
 800f908:	4631      	mov	r1, r6
 800f90a:	4628      	mov	r0, r5
 800f90c:	47b8      	blx	r7
 800f90e:	3001      	adds	r0, #1
 800f910:	f43f ae6b 	beq.w	800f5ea <_printf_float+0xc2>
 800f914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f918:	2200      	movs	r2, #0
 800f91a:	2300      	movs	r3, #0
 800f91c:	f7f1 f8ec 	bl	8000af8 <__aeabi_dcmpeq>
 800f920:	b9d8      	cbnz	r0, 800f95a <_printf_float+0x432>
 800f922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f924:	f108 0201 	add.w	r2, r8, #1
 800f928:	3b01      	subs	r3, #1
 800f92a:	4631      	mov	r1, r6
 800f92c:	4628      	mov	r0, r5
 800f92e:	47b8      	blx	r7
 800f930:	3001      	adds	r0, #1
 800f932:	d10e      	bne.n	800f952 <_printf_float+0x42a>
 800f934:	e659      	b.n	800f5ea <_printf_float+0xc2>
 800f936:	2301      	movs	r3, #1
 800f938:	4652      	mov	r2, sl
 800f93a:	4631      	mov	r1, r6
 800f93c:	4628      	mov	r0, r5
 800f93e:	47b8      	blx	r7
 800f940:	3001      	adds	r0, #1
 800f942:	f43f ae52 	beq.w	800f5ea <_printf_float+0xc2>
 800f946:	f108 0801 	add.w	r8, r8, #1
 800f94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f94c:	3b01      	subs	r3, #1
 800f94e:	4543      	cmp	r3, r8
 800f950:	dcf1      	bgt.n	800f936 <_printf_float+0x40e>
 800f952:	464b      	mov	r3, r9
 800f954:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f958:	e6dc      	b.n	800f714 <_printf_float+0x1ec>
 800f95a:	f04f 0800 	mov.w	r8, #0
 800f95e:	f104 0a1a 	add.w	sl, r4, #26
 800f962:	e7f2      	b.n	800f94a <_printf_float+0x422>
 800f964:	2301      	movs	r3, #1
 800f966:	4642      	mov	r2, r8
 800f968:	e7df      	b.n	800f92a <_printf_float+0x402>
 800f96a:	2301      	movs	r3, #1
 800f96c:	464a      	mov	r2, r9
 800f96e:	4631      	mov	r1, r6
 800f970:	4628      	mov	r0, r5
 800f972:	47b8      	blx	r7
 800f974:	3001      	adds	r0, #1
 800f976:	f43f ae38 	beq.w	800f5ea <_printf_float+0xc2>
 800f97a:	f108 0801 	add.w	r8, r8, #1
 800f97e:	68e3      	ldr	r3, [r4, #12]
 800f980:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f982:	1a5b      	subs	r3, r3, r1
 800f984:	4543      	cmp	r3, r8
 800f986:	dcf0      	bgt.n	800f96a <_printf_float+0x442>
 800f988:	e6fa      	b.n	800f780 <_printf_float+0x258>
 800f98a:	f04f 0800 	mov.w	r8, #0
 800f98e:	f104 0919 	add.w	r9, r4, #25
 800f992:	e7f4      	b.n	800f97e <_printf_float+0x456>

0800f994 <_printf_common>:
 800f994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f998:	4616      	mov	r6, r2
 800f99a:	4699      	mov	r9, r3
 800f99c:	688a      	ldr	r2, [r1, #8]
 800f99e:	690b      	ldr	r3, [r1, #16]
 800f9a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	bfb8      	it	lt
 800f9a8:	4613      	movlt	r3, r2
 800f9aa:	6033      	str	r3, [r6, #0]
 800f9ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	b10a      	cbz	r2, 800f9ba <_printf_common+0x26>
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	6033      	str	r3, [r6, #0]
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	0699      	lsls	r1, r3, #26
 800f9be:	bf42      	ittt	mi
 800f9c0:	6833      	ldrmi	r3, [r6, #0]
 800f9c2:	3302      	addmi	r3, #2
 800f9c4:	6033      	strmi	r3, [r6, #0]
 800f9c6:	6825      	ldr	r5, [r4, #0]
 800f9c8:	f015 0506 	ands.w	r5, r5, #6
 800f9cc:	d106      	bne.n	800f9dc <_printf_common+0x48>
 800f9ce:	f104 0a19 	add.w	sl, r4, #25
 800f9d2:	68e3      	ldr	r3, [r4, #12]
 800f9d4:	6832      	ldr	r2, [r6, #0]
 800f9d6:	1a9b      	subs	r3, r3, r2
 800f9d8:	42ab      	cmp	r3, r5
 800f9da:	dc26      	bgt.n	800fa2a <_printf_common+0x96>
 800f9dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9e0:	1e13      	subs	r3, r2, #0
 800f9e2:	6822      	ldr	r2, [r4, #0]
 800f9e4:	bf18      	it	ne
 800f9e6:	2301      	movne	r3, #1
 800f9e8:	0692      	lsls	r2, r2, #26
 800f9ea:	d42b      	bmi.n	800fa44 <_printf_common+0xb0>
 800f9ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9f0:	4649      	mov	r1, r9
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	47c0      	blx	r8
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	d01e      	beq.n	800fa38 <_printf_common+0xa4>
 800f9fa:	6823      	ldr	r3, [r4, #0]
 800f9fc:	68e5      	ldr	r5, [r4, #12]
 800f9fe:	6832      	ldr	r2, [r6, #0]
 800fa00:	f003 0306 	and.w	r3, r3, #6
 800fa04:	2b04      	cmp	r3, #4
 800fa06:	bf08      	it	eq
 800fa08:	1aad      	subeq	r5, r5, r2
 800fa0a:	68a3      	ldr	r3, [r4, #8]
 800fa0c:	6922      	ldr	r2, [r4, #16]
 800fa0e:	bf0c      	ite	eq
 800fa10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa14:	2500      	movne	r5, #0
 800fa16:	4293      	cmp	r3, r2
 800fa18:	bfc4      	itt	gt
 800fa1a:	1a9b      	subgt	r3, r3, r2
 800fa1c:	18ed      	addgt	r5, r5, r3
 800fa1e:	2600      	movs	r6, #0
 800fa20:	341a      	adds	r4, #26
 800fa22:	42b5      	cmp	r5, r6
 800fa24:	d11a      	bne.n	800fa5c <_printf_common+0xc8>
 800fa26:	2000      	movs	r0, #0
 800fa28:	e008      	b.n	800fa3c <_printf_common+0xa8>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4652      	mov	r2, sl
 800fa2e:	4649      	mov	r1, r9
 800fa30:	4638      	mov	r0, r7
 800fa32:	47c0      	blx	r8
 800fa34:	3001      	adds	r0, #1
 800fa36:	d103      	bne.n	800fa40 <_printf_common+0xac>
 800fa38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa40:	3501      	adds	r5, #1
 800fa42:	e7c6      	b.n	800f9d2 <_printf_common+0x3e>
 800fa44:	18e1      	adds	r1, r4, r3
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	2030      	movs	r0, #48	; 0x30
 800fa4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa4e:	4422      	add	r2, r4
 800fa50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa58:	3302      	adds	r3, #2
 800fa5a:	e7c7      	b.n	800f9ec <_printf_common+0x58>
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	4622      	mov	r2, r4
 800fa60:	4649      	mov	r1, r9
 800fa62:	4638      	mov	r0, r7
 800fa64:	47c0      	blx	r8
 800fa66:	3001      	adds	r0, #1
 800fa68:	d0e6      	beq.n	800fa38 <_printf_common+0xa4>
 800fa6a:	3601      	adds	r6, #1
 800fa6c:	e7d9      	b.n	800fa22 <_printf_common+0x8e>
	...

0800fa70 <_printf_i>:
 800fa70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa74:	7e0f      	ldrb	r7, [r1, #24]
 800fa76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa78:	2f78      	cmp	r7, #120	; 0x78
 800fa7a:	4691      	mov	r9, r2
 800fa7c:	4680      	mov	r8, r0
 800fa7e:	460c      	mov	r4, r1
 800fa80:	469a      	mov	sl, r3
 800fa82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa86:	d807      	bhi.n	800fa98 <_printf_i+0x28>
 800fa88:	2f62      	cmp	r7, #98	; 0x62
 800fa8a:	d80a      	bhi.n	800faa2 <_printf_i+0x32>
 800fa8c:	2f00      	cmp	r7, #0
 800fa8e:	f000 80d8 	beq.w	800fc42 <_printf_i+0x1d2>
 800fa92:	2f58      	cmp	r7, #88	; 0x58
 800fa94:	f000 80a3 	beq.w	800fbde <_printf_i+0x16e>
 800fa98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800faa0:	e03a      	b.n	800fb18 <_printf_i+0xa8>
 800faa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800faa6:	2b15      	cmp	r3, #21
 800faa8:	d8f6      	bhi.n	800fa98 <_printf_i+0x28>
 800faaa:	a101      	add	r1, pc, #4	; (adr r1, 800fab0 <_printf_i+0x40>)
 800faac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fab0:	0800fb09 	.word	0x0800fb09
 800fab4:	0800fb1d 	.word	0x0800fb1d
 800fab8:	0800fa99 	.word	0x0800fa99
 800fabc:	0800fa99 	.word	0x0800fa99
 800fac0:	0800fa99 	.word	0x0800fa99
 800fac4:	0800fa99 	.word	0x0800fa99
 800fac8:	0800fb1d 	.word	0x0800fb1d
 800facc:	0800fa99 	.word	0x0800fa99
 800fad0:	0800fa99 	.word	0x0800fa99
 800fad4:	0800fa99 	.word	0x0800fa99
 800fad8:	0800fa99 	.word	0x0800fa99
 800fadc:	0800fc29 	.word	0x0800fc29
 800fae0:	0800fb4d 	.word	0x0800fb4d
 800fae4:	0800fc0b 	.word	0x0800fc0b
 800fae8:	0800fa99 	.word	0x0800fa99
 800faec:	0800fa99 	.word	0x0800fa99
 800faf0:	0800fc4b 	.word	0x0800fc4b
 800faf4:	0800fa99 	.word	0x0800fa99
 800faf8:	0800fb4d 	.word	0x0800fb4d
 800fafc:	0800fa99 	.word	0x0800fa99
 800fb00:	0800fa99 	.word	0x0800fa99
 800fb04:	0800fc13 	.word	0x0800fc13
 800fb08:	682b      	ldr	r3, [r5, #0]
 800fb0a:	1d1a      	adds	r2, r3, #4
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	602a      	str	r2, [r5, #0]
 800fb10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb18:	2301      	movs	r3, #1
 800fb1a:	e0a3      	b.n	800fc64 <_printf_i+0x1f4>
 800fb1c:	6820      	ldr	r0, [r4, #0]
 800fb1e:	6829      	ldr	r1, [r5, #0]
 800fb20:	0606      	lsls	r6, r0, #24
 800fb22:	f101 0304 	add.w	r3, r1, #4
 800fb26:	d50a      	bpl.n	800fb3e <_printf_i+0xce>
 800fb28:	680e      	ldr	r6, [r1, #0]
 800fb2a:	602b      	str	r3, [r5, #0]
 800fb2c:	2e00      	cmp	r6, #0
 800fb2e:	da03      	bge.n	800fb38 <_printf_i+0xc8>
 800fb30:	232d      	movs	r3, #45	; 0x2d
 800fb32:	4276      	negs	r6, r6
 800fb34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb38:	485e      	ldr	r0, [pc, #376]	; (800fcb4 <_printf_i+0x244>)
 800fb3a:	230a      	movs	r3, #10
 800fb3c:	e019      	b.n	800fb72 <_printf_i+0x102>
 800fb3e:	680e      	ldr	r6, [r1, #0]
 800fb40:	602b      	str	r3, [r5, #0]
 800fb42:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb46:	bf18      	it	ne
 800fb48:	b236      	sxthne	r6, r6
 800fb4a:	e7ef      	b.n	800fb2c <_printf_i+0xbc>
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	6820      	ldr	r0, [r4, #0]
 800fb50:	1d19      	adds	r1, r3, #4
 800fb52:	6029      	str	r1, [r5, #0]
 800fb54:	0601      	lsls	r1, r0, #24
 800fb56:	d501      	bpl.n	800fb5c <_printf_i+0xec>
 800fb58:	681e      	ldr	r6, [r3, #0]
 800fb5a:	e002      	b.n	800fb62 <_printf_i+0xf2>
 800fb5c:	0646      	lsls	r6, r0, #25
 800fb5e:	d5fb      	bpl.n	800fb58 <_printf_i+0xe8>
 800fb60:	881e      	ldrh	r6, [r3, #0]
 800fb62:	4854      	ldr	r0, [pc, #336]	; (800fcb4 <_printf_i+0x244>)
 800fb64:	2f6f      	cmp	r7, #111	; 0x6f
 800fb66:	bf0c      	ite	eq
 800fb68:	2308      	moveq	r3, #8
 800fb6a:	230a      	movne	r3, #10
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb72:	6865      	ldr	r5, [r4, #4]
 800fb74:	60a5      	str	r5, [r4, #8]
 800fb76:	2d00      	cmp	r5, #0
 800fb78:	bfa2      	ittt	ge
 800fb7a:	6821      	ldrge	r1, [r4, #0]
 800fb7c:	f021 0104 	bicge.w	r1, r1, #4
 800fb80:	6021      	strge	r1, [r4, #0]
 800fb82:	b90e      	cbnz	r6, 800fb88 <_printf_i+0x118>
 800fb84:	2d00      	cmp	r5, #0
 800fb86:	d04d      	beq.n	800fc24 <_printf_i+0x1b4>
 800fb88:	4615      	mov	r5, r2
 800fb8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb8e:	fb03 6711 	mls	r7, r3, r1, r6
 800fb92:	5dc7      	ldrb	r7, [r0, r7]
 800fb94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb98:	4637      	mov	r7, r6
 800fb9a:	42bb      	cmp	r3, r7
 800fb9c:	460e      	mov	r6, r1
 800fb9e:	d9f4      	bls.n	800fb8a <_printf_i+0x11a>
 800fba0:	2b08      	cmp	r3, #8
 800fba2:	d10b      	bne.n	800fbbc <_printf_i+0x14c>
 800fba4:	6823      	ldr	r3, [r4, #0]
 800fba6:	07de      	lsls	r6, r3, #31
 800fba8:	d508      	bpl.n	800fbbc <_printf_i+0x14c>
 800fbaa:	6923      	ldr	r3, [r4, #16]
 800fbac:	6861      	ldr	r1, [r4, #4]
 800fbae:	4299      	cmp	r1, r3
 800fbb0:	bfde      	ittt	le
 800fbb2:	2330      	movle	r3, #48	; 0x30
 800fbb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fbbc:	1b52      	subs	r2, r2, r5
 800fbbe:	6122      	str	r2, [r4, #16]
 800fbc0:	f8cd a000 	str.w	sl, [sp]
 800fbc4:	464b      	mov	r3, r9
 800fbc6:	aa03      	add	r2, sp, #12
 800fbc8:	4621      	mov	r1, r4
 800fbca:	4640      	mov	r0, r8
 800fbcc:	f7ff fee2 	bl	800f994 <_printf_common>
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	d14c      	bne.n	800fc6e <_printf_i+0x1fe>
 800fbd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbd8:	b004      	add	sp, #16
 800fbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbde:	4835      	ldr	r0, [pc, #212]	; (800fcb4 <_printf_i+0x244>)
 800fbe0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fbe4:	6829      	ldr	r1, [r5, #0]
 800fbe6:	6823      	ldr	r3, [r4, #0]
 800fbe8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbec:	6029      	str	r1, [r5, #0]
 800fbee:	061d      	lsls	r5, r3, #24
 800fbf0:	d514      	bpl.n	800fc1c <_printf_i+0x1ac>
 800fbf2:	07df      	lsls	r7, r3, #31
 800fbf4:	bf44      	itt	mi
 800fbf6:	f043 0320 	orrmi.w	r3, r3, #32
 800fbfa:	6023      	strmi	r3, [r4, #0]
 800fbfc:	b91e      	cbnz	r6, 800fc06 <_printf_i+0x196>
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	f023 0320 	bic.w	r3, r3, #32
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	2310      	movs	r3, #16
 800fc08:	e7b0      	b.n	800fb6c <_printf_i+0xfc>
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	f043 0320 	orr.w	r3, r3, #32
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	2378      	movs	r3, #120	; 0x78
 800fc14:	4828      	ldr	r0, [pc, #160]	; (800fcb8 <_printf_i+0x248>)
 800fc16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc1a:	e7e3      	b.n	800fbe4 <_printf_i+0x174>
 800fc1c:	0659      	lsls	r1, r3, #25
 800fc1e:	bf48      	it	mi
 800fc20:	b2b6      	uxthmi	r6, r6
 800fc22:	e7e6      	b.n	800fbf2 <_printf_i+0x182>
 800fc24:	4615      	mov	r5, r2
 800fc26:	e7bb      	b.n	800fba0 <_printf_i+0x130>
 800fc28:	682b      	ldr	r3, [r5, #0]
 800fc2a:	6826      	ldr	r6, [r4, #0]
 800fc2c:	6961      	ldr	r1, [r4, #20]
 800fc2e:	1d18      	adds	r0, r3, #4
 800fc30:	6028      	str	r0, [r5, #0]
 800fc32:	0635      	lsls	r5, r6, #24
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	d501      	bpl.n	800fc3c <_printf_i+0x1cc>
 800fc38:	6019      	str	r1, [r3, #0]
 800fc3a:	e002      	b.n	800fc42 <_printf_i+0x1d2>
 800fc3c:	0670      	lsls	r0, r6, #25
 800fc3e:	d5fb      	bpl.n	800fc38 <_printf_i+0x1c8>
 800fc40:	8019      	strh	r1, [r3, #0]
 800fc42:	2300      	movs	r3, #0
 800fc44:	6123      	str	r3, [r4, #16]
 800fc46:	4615      	mov	r5, r2
 800fc48:	e7ba      	b.n	800fbc0 <_printf_i+0x150>
 800fc4a:	682b      	ldr	r3, [r5, #0]
 800fc4c:	1d1a      	adds	r2, r3, #4
 800fc4e:	602a      	str	r2, [r5, #0]
 800fc50:	681d      	ldr	r5, [r3, #0]
 800fc52:	6862      	ldr	r2, [r4, #4]
 800fc54:	2100      	movs	r1, #0
 800fc56:	4628      	mov	r0, r5
 800fc58:	f7f0 fada 	bl	8000210 <memchr>
 800fc5c:	b108      	cbz	r0, 800fc62 <_printf_i+0x1f2>
 800fc5e:	1b40      	subs	r0, r0, r5
 800fc60:	6060      	str	r0, [r4, #4]
 800fc62:	6863      	ldr	r3, [r4, #4]
 800fc64:	6123      	str	r3, [r4, #16]
 800fc66:	2300      	movs	r3, #0
 800fc68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc6c:	e7a8      	b.n	800fbc0 <_printf_i+0x150>
 800fc6e:	6923      	ldr	r3, [r4, #16]
 800fc70:	462a      	mov	r2, r5
 800fc72:	4649      	mov	r1, r9
 800fc74:	4640      	mov	r0, r8
 800fc76:	47d0      	blx	sl
 800fc78:	3001      	adds	r0, #1
 800fc7a:	d0ab      	beq.n	800fbd4 <_printf_i+0x164>
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	079b      	lsls	r3, r3, #30
 800fc80:	d413      	bmi.n	800fcaa <_printf_i+0x23a>
 800fc82:	68e0      	ldr	r0, [r4, #12]
 800fc84:	9b03      	ldr	r3, [sp, #12]
 800fc86:	4298      	cmp	r0, r3
 800fc88:	bfb8      	it	lt
 800fc8a:	4618      	movlt	r0, r3
 800fc8c:	e7a4      	b.n	800fbd8 <_printf_i+0x168>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	4632      	mov	r2, r6
 800fc92:	4649      	mov	r1, r9
 800fc94:	4640      	mov	r0, r8
 800fc96:	47d0      	blx	sl
 800fc98:	3001      	adds	r0, #1
 800fc9a:	d09b      	beq.n	800fbd4 <_printf_i+0x164>
 800fc9c:	3501      	adds	r5, #1
 800fc9e:	68e3      	ldr	r3, [r4, #12]
 800fca0:	9903      	ldr	r1, [sp, #12]
 800fca2:	1a5b      	subs	r3, r3, r1
 800fca4:	42ab      	cmp	r3, r5
 800fca6:	dcf2      	bgt.n	800fc8e <_printf_i+0x21e>
 800fca8:	e7eb      	b.n	800fc82 <_printf_i+0x212>
 800fcaa:	2500      	movs	r5, #0
 800fcac:	f104 0619 	add.w	r6, r4, #25
 800fcb0:	e7f5      	b.n	800fc9e <_printf_i+0x22e>
 800fcb2:	bf00      	nop
 800fcb4:	08012046 	.word	0x08012046
 800fcb8:	08012057 	.word	0x08012057

0800fcbc <iprintf>:
 800fcbc:	b40f      	push	{r0, r1, r2, r3}
 800fcbe:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <iprintf+0x2c>)
 800fcc0:	b513      	push	{r0, r1, r4, lr}
 800fcc2:	681c      	ldr	r4, [r3, #0]
 800fcc4:	b124      	cbz	r4, 800fcd0 <iprintf+0x14>
 800fcc6:	69a3      	ldr	r3, [r4, #24]
 800fcc8:	b913      	cbnz	r3, 800fcd0 <iprintf+0x14>
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 ff0e 	bl	8010aec <__sinit>
 800fcd0:	ab05      	add	r3, sp, #20
 800fcd2:	9a04      	ldr	r2, [sp, #16]
 800fcd4:	68a1      	ldr	r1, [r4, #8]
 800fcd6:	9301      	str	r3, [sp, #4]
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f001 fba1 	bl	8011420 <_vfiprintf_r>
 800fcde:	b002      	add	sp, #8
 800fce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fce4:	b004      	add	sp, #16
 800fce6:	4770      	bx	lr
 800fce8:	20000188 	.word	0x20000188

0800fcec <_sbrk_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4d06      	ldr	r5, [pc, #24]	; (800fd08 <_sbrk_r+0x1c>)
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	4608      	mov	r0, r1
 800fcf6:	602b      	str	r3, [r5, #0]
 800fcf8:	f001 ffe8 	bl	8011ccc <_sbrk>
 800fcfc:	1c43      	adds	r3, r0, #1
 800fcfe:	d102      	bne.n	800fd06 <_sbrk_r+0x1a>
 800fd00:	682b      	ldr	r3, [r5, #0]
 800fd02:	b103      	cbz	r3, 800fd06 <_sbrk_r+0x1a>
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	20002918 	.word	0x20002918

0800fd0c <__assert_func>:
 800fd0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd0e:	4614      	mov	r4, r2
 800fd10:	461a      	mov	r2, r3
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <__assert_func+0x2c>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4605      	mov	r5, r0
 800fd18:	68d8      	ldr	r0, [r3, #12]
 800fd1a:	b14c      	cbz	r4, 800fd30 <__assert_func+0x24>
 800fd1c:	4b07      	ldr	r3, [pc, #28]	; (800fd3c <__assert_func+0x30>)
 800fd1e:	9100      	str	r1, [sp, #0]
 800fd20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd24:	4906      	ldr	r1, [pc, #24]	; (800fd40 <__assert_func+0x34>)
 800fd26:	462b      	mov	r3, r5
 800fd28:	f000 ff5e 	bl	8010be8 <fiprintf>
 800fd2c:	f001 fdcc 	bl	80118c8 <abort>
 800fd30:	4b04      	ldr	r3, [pc, #16]	; (800fd44 <__assert_func+0x38>)
 800fd32:	461c      	mov	r4, r3
 800fd34:	e7f3      	b.n	800fd1e <__assert_func+0x12>
 800fd36:	bf00      	nop
 800fd38:	20000188 	.word	0x20000188
 800fd3c:	08012068 	.word	0x08012068
 800fd40:	08012075 	.word	0x08012075
 800fd44:	080120a3 	.word	0x080120a3

0800fd48 <quorem>:
 800fd48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4c:	6903      	ldr	r3, [r0, #16]
 800fd4e:	690c      	ldr	r4, [r1, #16]
 800fd50:	42a3      	cmp	r3, r4
 800fd52:	4607      	mov	r7, r0
 800fd54:	f2c0 8081 	blt.w	800fe5a <quorem+0x112>
 800fd58:	3c01      	subs	r4, #1
 800fd5a:	f101 0814 	add.w	r8, r1, #20
 800fd5e:	f100 0514 	add.w	r5, r0, #20
 800fd62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd70:	3301      	adds	r3, #1
 800fd72:	429a      	cmp	r2, r3
 800fd74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd7c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd80:	d331      	bcc.n	800fde6 <quorem+0x9e>
 800fd82:	f04f 0e00 	mov.w	lr, #0
 800fd86:	4640      	mov	r0, r8
 800fd88:	46ac      	mov	ip, r5
 800fd8a:	46f2      	mov	sl, lr
 800fd8c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd90:	b293      	uxth	r3, r2
 800fd92:	fb06 e303 	mla	r3, r6, r3, lr
 800fd96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	ebaa 0303 	sub.w	r3, sl, r3
 800fda0:	f8dc a000 	ldr.w	sl, [ip]
 800fda4:	0c12      	lsrs	r2, r2, #16
 800fda6:	fa13 f38a 	uxtah	r3, r3, sl
 800fdaa:	fb06 e202 	mla	r2, r6, r2, lr
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	9b00      	ldr	r3, [sp, #0]
 800fdb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fdb6:	b292      	uxth	r2, r2
 800fdb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fdbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdc0:	f8bd 3000 	ldrh.w	r3, [sp]
 800fdc4:	4581      	cmp	r9, r0
 800fdc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdca:	f84c 3b04 	str.w	r3, [ip], #4
 800fdce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fdd2:	d2db      	bcs.n	800fd8c <quorem+0x44>
 800fdd4:	f855 300b 	ldr.w	r3, [r5, fp]
 800fdd8:	b92b      	cbnz	r3, 800fde6 <quorem+0x9e>
 800fdda:	9b01      	ldr	r3, [sp, #4]
 800fddc:	3b04      	subs	r3, #4
 800fdde:	429d      	cmp	r5, r3
 800fde0:	461a      	mov	r2, r3
 800fde2:	d32e      	bcc.n	800fe42 <quorem+0xfa>
 800fde4:	613c      	str	r4, [r7, #16]
 800fde6:	4638      	mov	r0, r7
 800fde8:	f001 f9d8 	bl	801119c <__mcmp>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	db24      	blt.n	800fe3a <quorem+0xf2>
 800fdf0:	3601      	adds	r6, #1
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f04f 0c00 	mov.w	ip, #0
 800fdf8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fdfc:	f8d0 e000 	ldr.w	lr, [r0]
 800fe00:	b293      	uxth	r3, r2
 800fe02:	ebac 0303 	sub.w	r3, ip, r3
 800fe06:	0c12      	lsrs	r2, r2, #16
 800fe08:	fa13 f38e 	uxtah	r3, r3, lr
 800fe0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe1a:	45c1      	cmp	r9, r8
 800fe1c:	f840 3b04 	str.w	r3, [r0], #4
 800fe20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe24:	d2e8      	bcs.n	800fdf8 <quorem+0xb0>
 800fe26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe2e:	b922      	cbnz	r2, 800fe3a <quorem+0xf2>
 800fe30:	3b04      	subs	r3, #4
 800fe32:	429d      	cmp	r5, r3
 800fe34:	461a      	mov	r2, r3
 800fe36:	d30a      	bcc.n	800fe4e <quorem+0x106>
 800fe38:	613c      	str	r4, [r7, #16]
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	b003      	add	sp, #12
 800fe3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe42:	6812      	ldr	r2, [r2, #0]
 800fe44:	3b04      	subs	r3, #4
 800fe46:	2a00      	cmp	r2, #0
 800fe48:	d1cc      	bne.n	800fde4 <quorem+0x9c>
 800fe4a:	3c01      	subs	r4, #1
 800fe4c:	e7c7      	b.n	800fdde <quorem+0x96>
 800fe4e:	6812      	ldr	r2, [r2, #0]
 800fe50:	3b04      	subs	r3, #4
 800fe52:	2a00      	cmp	r2, #0
 800fe54:	d1f0      	bne.n	800fe38 <quorem+0xf0>
 800fe56:	3c01      	subs	r4, #1
 800fe58:	e7eb      	b.n	800fe32 <quorem+0xea>
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	e7ee      	b.n	800fe3c <quorem+0xf4>
	...

0800fe60 <_dtoa_r>:
 800fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	ed2d 8b04 	vpush	{d8-d9}
 800fe68:	ec57 6b10 	vmov	r6, r7, d0
 800fe6c:	b093      	sub	sp, #76	; 0x4c
 800fe6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe74:	9106      	str	r1, [sp, #24]
 800fe76:	ee10 aa10 	vmov	sl, s0
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe7e:	930c      	str	r3, [sp, #48]	; 0x30
 800fe80:	46bb      	mov	fp, r7
 800fe82:	b975      	cbnz	r5, 800fea2 <_dtoa_r+0x42>
 800fe84:	2010      	movs	r0, #16
 800fe86:	f7ff f9b1 	bl	800f1ec <malloc>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	6260      	str	r0, [r4, #36]	; 0x24
 800fe8e:	b920      	cbnz	r0, 800fe9a <_dtoa_r+0x3a>
 800fe90:	4ba7      	ldr	r3, [pc, #668]	; (8010130 <_dtoa_r+0x2d0>)
 800fe92:	21ea      	movs	r1, #234	; 0xea
 800fe94:	48a7      	ldr	r0, [pc, #668]	; (8010134 <_dtoa_r+0x2d4>)
 800fe96:	f7ff ff39 	bl	800fd0c <__assert_func>
 800fe9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe9e:	6005      	str	r5, [r0, #0]
 800fea0:	60c5      	str	r5, [r0, #12]
 800fea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fea4:	6819      	ldr	r1, [r3, #0]
 800fea6:	b151      	cbz	r1, 800febe <_dtoa_r+0x5e>
 800fea8:	685a      	ldr	r2, [r3, #4]
 800feaa:	604a      	str	r2, [r1, #4]
 800feac:	2301      	movs	r3, #1
 800feae:	4093      	lsls	r3, r2
 800feb0:	608b      	str	r3, [r1, #8]
 800feb2:	4620      	mov	r0, r4
 800feb4:	f000 ff30 	bl	8010d18 <_Bfree>
 800feb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feba:	2200      	movs	r2, #0
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	1e3b      	subs	r3, r7, #0
 800fec0:	bfaa      	itet	ge
 800fec2:	2300      	movge	r3, #0
 800fec4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fec8:	f8c8 3000 	strge.w	r3, [r8]
 800fecc:	4b9a      	ldr	r3, [pc, #616]	; (8010138 <_dtoa_r+0x2d8>)
 800fece:	bfbc      	itt	lt
 800fed0:	2201      	movlt	r2, #1
 800fed2:	f8c8 2000 	strlt.w	r2, [r8]
 800fed6:	ea33 030b 	bics.w	r3, r3, fp
 800feda:	d11b      	bne.n	800ff14 <_dtoa_r+0xb4>
 800fedc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fede:	f242 730f 	movw	r3, #9999	; 0x270f
 800fee2:	6013      	str	r3, [r2, #0]
 800fee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fee8:	4333      	orrs	r3, r6
 800feea:	f000 8592 	beq.w	8010a12 <_dtoa_r+0xbb2>
 800feee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fef0:	b963      	cbnz	r3, 800ff0c <_dtoa_r+0xac>
 800fef2:	4b92      	ldr	r3, [pc, #584]	; (801013c <_dtoa_r+0x2dc>)
 800fef4:	e022      	b.n	800ff3c <_dtoa_r+0xdc>
 800fef6:	4b92      	ldr	r3, [pc, #584]	; (8010140 <_dtoa_r+0x2e0>)
 800fef8:	9301      	str	r3, [sp, #4]
 800fefa:	3308      	adds	r3, #8
 800fefc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fefe:	6013      	str	r3, [r2, #0]
 800ff00:	9801      	ldr	r0, [sp, #4]
 800ff02:	b013      	add	sp, #76	; 0x4c
 800ff04:	ecbd 8b04 	vpop	{d8-d9}
 800ff08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0c:	4b8b      	ldr	r3, [pc, #556]	; (801013c <_dtoa_r+0x2dc>)
 800ff0e:	9301      	str	r3, [sp, #4]
 800ff10:	3303      	adds	r3, #3
 800ff12:	e7f3      	b.n	800fefc <_dtoa_r+0x9c>
 800ff14:	2200      	movs	r2, #0
 800ff16:	2300      	movs	r3, #0
 800ff18:	4650      	mov	r0, sl
 800ff1a:	4659      	mov	r1, fp
 800ff1c:	f7f0 fdec 	bl	8000af8 <__aeabi_dcmpeq>
 800ff20:	ec4b ab19 	vmov	d9, sl, fp
 800ff24:	4680      	mov	r8, r0
 800ff26:	b158      	cbz	r0, 800ff40 <_dtoa_r+0xe0>
 800ff28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	6013      	str	r3, [r2, #0]
 800ff2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f000 856b 	beq.w	8010a0c <_dtoa_r+0xbac>
 800ff36:	4883      	ldr	r0, [pc, #524]	; (8010144 <_dtoa_r+0x2e4>)
 800ff38:	6018      	str	r0, [r3, #0]
 800ff3a:	1e43      	subs	r3, r0, #1
 800ff3c:	9301      	str	r3, [sp, #4]
 800ff3e:	e7df      	b.n	800ff00 <_dtoa_r+0xa0>
 800ff40:	ec4b ab10 	vmov	d0, sl, fp
 800ff44:	aa10      	add	r2, sp, #64	; 0x40
 800ff46:	a911      	add	r1, sp, #68	; 0x44
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f001 f9cd 	bl	80112e8 <__d2b>
 800ff4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ff52:	ee08 0a10 	vmov	s16, r0
 800ff56:	2d00      	cmp	r5, #0
 800ff58:	f000 8084 	beq.w	8010064 <_dtoa_r+0x204>
 800ff5c:	ee19 3a90 	vmov	r3, s19
 800ff60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff68:	4656      	mov	r6, sl
 800ff6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff76:	4b74      	ldr	r3, [pc, #464]	; (8010148 <_dtoa_r+0x2e8>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	f7f0 f99b 	bl	80002b8 <__aeabi_dsub>
 800ff82:	a365      	add	r3, pc, #404	; (adr r3, 8010118 <_dtoa_r+0x2b8>)
 800ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff88:	f7f0 fb4e 	bl	8000628 <__aeabi_dmul>
 800ff8c:	a364      	add	r3, pc, #400	; (adr r3, 8010120 <_dtoa_r+0x2c0>)
 800ff8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff92:	f7f0 f993 	bl	80002bc <__adddf3>
 800ff96:	4606      	mov	r6, r0
 800ff98:	4628      	mov	r0, r5
 800ff9a:	460f      	mov	r7, r1
 800ff9c:	f7f0 fada 	bl	8000554 <__aeabi_i2d>
 800ffa0:	a361      	add	r3, pc, #388	; (adr r3, 8010128 <_dtoa_r+0x2c8>)
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	f7f0 fb3f 	bl	8000628 <__aeabi_dmul>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	460b      	mov	r3, r1
 800ffae:	4630      	mov	r0, r6
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	f7f0 f983 	bl	80002bc <__adddf3>
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	460f      	mov	r7, r1
 800ffba:	f7f0 fde5 	bl	8000b88 <__aeabi_d2iz>
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	9000      	str	r0, [sp, #0]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	4639      	mov	r1, r7
 800ffc8:	f7f0 fda0 	bl	8000b0c <__aeabi_dcmplt>
 800ffcc:	b150      	cbz	r0, 800ffe4 <_dtoa_r+0x184>
 800ffce:	9800      	ldr	r0, [sp, #0]
 800ffd0:	f7f0 fac0 	bl	8000554 <__aeabi_i2d>
 800ffd4:	4632      	mov	r2, r6
 800ffd6:	463b      	mov	r3, r7
 800ffd8:	f7f0 fd8e 	bl	8000af8 <__aeabi_dcmpeq>
 800ffdc:	b910      	cbnz	r0, 800ffe4 <_dtoa_r+0x184>
 800ffde:	9b00      	ldr	r3, [sp, #0]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	9b00      	ldr	r3, [sp, #0]
 800ffe6:	2b16      	cmp	r3, #22
 800ffe8:	d85a      	bhi.n	80100a0 <_dtoa_r+0x240>
 800ffea:	9a00      	ldr	r2, [sp, #0]
 800ffec:	4b57      	ldr	r3, [pc, #348]	; (801014c <_dtoa_r+0x2ec>)
 800ffee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff6:	ec51 0b19 	vmov	r0, r1, d9
 800fffa:	f7f0 fd87 	bl	8000b0c <__aeabi_dcmplt>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d050      	beq.n	80100a4 <_dtoa_r+0x244>
 8010002:	9b00      	ldr	r3, [sp, #0]
 8010004:	3b01      	subs	r3, #1
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	2300      	movs	r3, #0
 801000a:	930b      	str	r3, [sp, #44]	; 0x2c
 801000c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801000e:	1b5d      	subs	r5, r3, r5
 8010010:	1e6b      	subs	r3, r5, #1
 8010012:	9305      	str	r3, [sp, #20]
 8010014:	bf45      	ittet	mi
 8010016:	f1c5 0301 	rsbmi	r3, r5, #1
 801001a:	9304      	strmi	r3, [sp, #16]
 801001c:	2300      	movpl	r3, #0
 801001e:	2300      	movmi	r3, #0
 8010020:	bf4c      	ite	mi
 8010022:	9305      	strmi	r3, [sp, #20]
 8010024:	9304      	strpl	r3, [sp, #16]
 8010026:	9b00      	ldr	r3, [sp, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	db3d      	blt.n	80100a8 <_dtoa_r+0x248>
 801002c:	9b05      	ldr	r3, [sp, #20]
 801002e:	9a00      	ldr	r2, [sp, #0]
 8010030:	920a      	str	r2, [sp, #40]	; 0x28
 8010032:	4413      	add	r3, r2
 8010034:	9305      	str	r3, [sp, #20]
 8010036:	2300      	movs	r3, #0
 8010038:	9307      	str	r3, [sp, #28]
 801003a:	9b06      	ldr	r3, [sp, #24]
 801003c:	2b09      	cmp	r3, #9
 801003e:	f200 8089 	bhi.w	8010154 <_dtoa_r+0x2f4>
 8010042:	2b05      	cmp	r3, #5
 8010044:	bfc4      	itt	gt
 8010046:	3b04      	subgt	r3, #4
 8010048:	9306      	strgt	r3, [sp, #24]
 801004a:	9b06      	ldr	r3, [sp, #24]
 801004c:	f1a3 0302 	sub.w	r3, r3, #2
 8010050:	bfcc      	ite	gt
 8010052:	2500      	movgt	r5, #0
 8010054:	2501      	movle	r5, #1
 8010056:	2b03      	cmp	r3, #3
 8010058:	f200 8087 	bhi.w	801016a <_dtoa_r+0x30a>
 801005c:	e8df f003 	tbb	[pc, r3]
 8010060:	59383a2d 	.word	0x59383a2d
 8010064:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010068:	441d      	add	r5, r3
 801006a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801006e:	2b20      	cmp	r3, #32
 8010070:	bfc1      	itttt	gt
 8010072:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010076:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801007a:	fa0b f303 	lslgt.w	r3, fp, r3
 801007e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010082:	bfda      	itte	le
 8010084:	f1c3 0320 	rsble	r3, r3, #32
 8010088:	fa06 f003 	lslle.w	r0, r6, r3
 801008c:	4318      	orrgt	r0, r3
 801008e:	f7f0 fa51 	bl	8000534 <__aeabi_ui2d>
 8010092:	2301      	movs	r3, #1
 8010094:	4606      	mov	r6, r0
 8010096:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801009a:	3d01      	subs	r5, #1
 801009c:	930e      	str	r3, [sp, #56]	; 0x38
 801009e:	e76a      	b.n	800ff76 <_dtoa_r+0x116>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e7b2      	b.n	801000a <_dtoa_r+0x1aa>
 80100a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80100a6:	e7b1      	b.n	801000c <_dtoa_r+0x1ac>
 80100a8:	9b04      	ldr	r3, [sp, #16]
 80100aa:	9a00      	ldr	r2, [sp, #0]
 80100ac:	1a9b      	subs	r3, r3, r2
 80100ae:	9304      	str	r3, [sp, #16]
 80100b0:	4253      	negs	r3, r2
 80100b2:	9307      	str	r3, [sp, #28]
 80100b4:	2300      	movs	r3, #0
 80100b6:	930a      	str	r3, [sp, #40]	; 0x28
 80100b8:	e7bf      	b.n	801003a <_dtoa_r+0x1da>
 80100ba:	2300      	movs	r3, #0
 80100bc:	9308      	str	r3, [sp, #32]
 80100be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	dc55      	bgt.n	8010170 <_dtoa_r+0x310>
 80100c4:	2301      	movs	r3, #1
 80100c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80100ca:	461a      	mov	r2, r3
 80100cc:	9209      	str	r2, [sp, #36]	; 0x24
 80100ce:	e00c      	b.n	80100ea <_dtoa_r+0x28a>
 80100d0:	2301      	movs	r3, #1
 80100d2:	e7f3      	b.n	80100bc <_dtoa_r+0x25c>
 80100d4:	2300      	movs	r3, #0
 80100d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100d8:	9308      	str	r3, [sp, #32]
 80100da:	9b00      	ldr	r3, [sp, #0]
 80100dc:	4413      	add	r3, r2
 80100de:	9302      	str	r3, [sp, #8]
 80100e0:	3301      	adds	r3, #1
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	9303      	str	r3, [sp, #12]
 80100e6:	bfb8      	it	lt
 80100e8:	2301      	movlt	r3, #1
 80100ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80100ec:	2200      	movs	r2, #0
 80100ee:	6042      	str	r2, [r0, #4]
 80100f0:	2204      	movs	r2, #4
 80100f2:	f102 0614 	add.w	r6, r2, #20
 80100f6:	429e      	cmp	r6, r3
 80100f8:	6841      	ldr	r1, [r0, #4]
 80100fa:	d93d      	bls.n	8010178 <_dtoa_r+0x318>
 80100fc:	4620      	mov	r0, r4
 80100fe:	f000 fdcb 	bl	8010c98 <_Balloc>
 8010102:	9001      	str	r0, [sp, #4]
 8010104:	2800      	cmp	r0, #0
 8010106:	d13b      	bne.n	8010180 <_dtoa_r+0x320>
 8010108:	4b11      	ldr	r3, [pc, #68]	; (8010150 <_dtoa_r+0x2f0>)
 801010a:	4602      	mov	r2, r0
 801010c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010110:	e6c0      	b.n	800fe94 <_dtoa_r+0x34>
 8010112:	2301      	movs	r3, #1
 8010114:	e7df      	b.n	80100d6 <_dtoa_r+0x276>
 8010116:	bf00      	nop
 8010118:	636f4361 	.word	0x636f4361
 801011c:	3fd287a7 	.word	0x3fd287a7
 8010120:	8b60c8b3 	.word	0x8b60c8b3
 8010124:	3fc68a28 	.word	0x3fc68a28
 8010128:	509f79fb 	.word	0x509f79fb
 801012c:	3fd34413 	.word	0x3fd34413
 8010130:	080121b2 	.word	0x080121b2
 8010134:	080121c9 	.word	0x080121c9
 8010138:	7ff00000 	.word	0x7ff00000
 801013c:	080121ae 	.word	0x080121ae
 8010140:	080121a5 	.word	0x080121a5
 8010144:	08012045 	.word	0x08012045
 8010148:	3ff80000 	.word	0x3ff80000
 801014c:	08012328 	.word	0x08012328
 8010150:	08012224 	.word	0x08012224
 8010154:	2501      	movs	r5, #1
 8010156:	2300      	movs	r3, #0
 8010158:	9306      	str	r3, [sp, #24]
 801015a:	9508      	str	r5, [sp, #32]
 801015c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010160:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010164:	2200      	movs	r2, #0
 8010166:	2312      	movs	r3, #18
 8010168:	e7b0      	b.n	80100cc <_dtoa_r+0x26c>
 801016a:	2301      	movs	r3, #1
 801016c:	9308      	str	r3, [sp, #32]
 801016e:	e7f5      	b.n	801015c <_dtoa_r+0x2fc>
 8010170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010172:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010176:	e7b8      	b.n	80100ea <_dtoa_r+0x28a>
 8010178:	3101      	adds	r1, #1
 801017a:	6041      	str	r1, [r0, #4]
 801017c:	0052      	lsls	r2, r2, #1
 801017e:	e7b8      	b.n	80100f2 <_dtoa_r+0x292>
 8010180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010182:	9a01      	ldr	r2, [sp, #4]
 8010184:	601a      	str	r2, [r3, #0]
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	2b0e      	cmp	r3, #14
 801018a:	f200 809d 	bhi.w	80102c8 <_dtoa_r+0x468>
 801018e:	2d00      	cmp	r5, #0
 8010190:	f000 809a 	beq.w	80102c8 <_dtoa_r+0x468>
 8010194:	9b00      	ldr	r3, [sp, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	dd32      	ble.n	8010200 <_dtoa_r+0x3a0>
 801019a:	4ab7      	ldr	r2, [pc, #732]	; (8010478 <_dtoa_r+0x618>)
 801019c:	f003 030f 	and.w	r3, r3, #15
 80101a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101a8:	9b00      	ldr	r3, [sp, #0]
 80101aa:	05d8      	lsls	r0, r3, #23
 80101ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80101b0:	d516      	bpl.n	80101e0 <_dtoa_r+0x380>
 80101b2:	4bb2      	ldr	r3, [pc, #712]	; (801047c <_dtoa_r+0x61c>)
 80101b4:	ec51 0b19 	vmov	r0, r1, d9
 80101b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101bc:	f7f0 fb5e 	bl	800087c <__aeabi_ddiv>
 80101c0:	f007 070f 	and.w	r7, r7, #15
 80101c4:	4682      	mov	sl, r0
 80101c6:	468b      	mov	fp, r1
 80101c8:	2503      	movs	r5, #3
 80101ca:	4eac      	ldr	r6, [pc, #688]	; (801047c <_dtoa_r+0x61c>)
 80101cc:	b957      	cbnz	r7, 80101e4 <_dtoa_r+0x384>
 80101ce:	4642      	mov	r2, r8
 80101d0:	464b      	mov	r3, r9
 80101d2:	4650      	mov	r0, sl
 80101d4:	4659      	mov	r1, fp
 80101d6:	f7f0 fb51 	bl	800087c <__aeabi_ddiv>
 80101da:	4682      	mov	sl, r0
 80101dc:	468b      	mov	fp, r1
 80101de:	e028      	b.n	8010232 <_dtoa_r+0x3d2>
 80101e0:	2502      	movs	r5, #2
 80101e2:	e7f2      	b.n	80101ca <_dtoa_r+0x36a>
 80101e4:	07f9      	lsls	r1, r7, #31
 80101e6:	d508      	bpl.n	80101fa <_dtoa_r+0x39a>
 80101e8:	4640      	mov	r0, r8
 80101ea:	4649      	mov	r1, r9
 80101ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101f0:	f7f0 fa1a 	bl	8000628 <__aeabi_dmul>
 80101f4:	3501      	adds	r5, #1
 80101f6:	4680      	mov	r8, r0
 80101f8:	4689      	mov	r9, r1
 80101fa:	107f      	asrs	r7, r7, #1
 80101fc:	3608      	adds	r6, #8
 80101fe:	e7e5      	b.n	80101cc <_dtoa_r+0x36c>
 8010200:	f000 809b 	beq.w	801033a <_dtoa_r+0x4da>
 8010204:	9b00      	ldr	r3, [sp, #0]
 8010206:	4f9d      	ldr	r7, [pc, #628]	; (801047c <_dtoa_r+0x61c>)
 8010208:	425e      	negs	r6, r3
 801020a:	4b9b      	ldr	r3, [pc, #620]	; (8010478 <_dtoa_r+0x618>)
 801020c:	f006 020f 	and.w	r2, r6, #15
 8010210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010218:	ec51 0b19 	vmov	r0, r1, d9
 801021c:	f7f0 fa04 	bl	8000628 <__aeabi_dmul>
 8010220:	1136      	asrs	r6, r6, #4
 8010222:	4682      	mov	sl, r0
 8010224:	468b      	mov	fp, r1
 8010226:	2300      	movs	r3, #0
 8010228:	2502      	movs	r5, #2
 801022a:	2e00      	cmp	r6, #0
 801022c:	d17a      	bne.n	8010324 <_dtoa_r+0x4c4>
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1d3      	bne.n	80101da <_dtoa_r+0x37a>
 8010232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010234:	2b00      	cmp	r3, #0
 8010236:	f000 8082 	beq.w	801033e <_dtoa_r+0x4de>
 801023a:	4b91      	ldr	r3, [pc, #580]	; (8010480 <_dtoa_r+0x620>)
 801023c:	2200      	movs	r2, #0
 801023e:	4650      	mov	r0, sl
 8010240:	4659      	mov	r1, fp
 8010242:	f7f0 fc63 	bl	8000b0c <__aeabi_dcmplt>
 8010246:	2800      	cmp	r0, #0
 8010248:	d079      	beq.n	801033e <_dtoa_r+0x4de>
 801024a:	9b03      	ldr	r3, [sp, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d076      	beq.n	801033e <_dtoa_r+0x4de>
 8010250:	9b02      	ldr	r3, [sp, #8]
 8010252:	2b00      	cmp	r3, #0
 8010254:	dd36      	ble.n	80102c4 <_dtoa_r+0x464>
 8010256:	9b00      	ldr	r3, [sp, #0]
 8010258:	4650      	mov	r0, sl
 801025a:	4659      	mov	r1, fp
 801025c:	1e5f      	subs	r7, r3, #1
 801025e:	2200      	movs	r2, #0
 8010260:	4b88      	ldr	r3, [pc, #544]	; (8010484 <_dtoa_r+0x624>)
 8010262:	f7f0 f9e1 	bl	8000628 <__aeabi_dmul>
 8010266:	9e02      	ldr	r6, [sp, #8]
 8010268:	4682      	mov	sl, r0
 801026a:	468b      	mov	fp, r1
 801026c:	3501      	adds	r5, #1
 801026e:	4628      	mov	r0, r5
 8010270:	f7f0 f970 	bl	8000554 <__aeabi_i2d>
 8010274:	4652      	mov	r2, sl
 8010276:	465b      	mov	r3, fp
 8010278:	f7f0 f9d6 	bl	8000628 <__aeabi_dmul>
 801027c:	4b82      	ldr	r3, [pc, #520]	; (8010488 <_dtoa_r+0x628>)
 801027e:	2200      	movs	r2, #0
 8010280:	f7f0 f81c 	bl	80002bc <__adddf3>
 8010284:	46d0      	mov	r8, sl
 8010286:	46d9      	mov	r9, fp
 8010288:	4682      	mov	sl, r0
 801028a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801028e:	2e00      	cmp	r6, #0
 8010290:	d158      	bne.n	8010344 <_dtoa_r+0x4e4>
 8010292:	4b7e      	ldr	r3, [pc, #504]	; (801048c <_dtoa_r+0x62c>)
 8010294:	2200      	movs	r2, #0
 8010296:	4640      	mov	r0, r8
 8010298:	4649      	mov	r1, r9
 801029a:	f7f0 f80d 	bl	80002b8 <__aeabi_dsub>
 801029e:	4652      	mov	r2, sl
 80102a0:	465b      	mov	r3, fp
 80102a2:	4680      	mov	r8, r0
 80102a4:	4689      	mov	r9, r1
 80102a6:	f7f0 fc4f 	bl	8000b48 <__aeabi_dcmpgt>
 80102aa:	2800      	cmp	r0, #0
 80102ac:	f040 8295 	bne.w	80107da <_dtoa_r+0x97a>
 80102b0:	4652      	mov	r2, sl
 80102b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80102b6:	4640      	mov	r0, r8
 80102b8:	4649      	mov	r1, r9
 80102ba:	f7f0 fc27 	bl	8000b0c <__aeabi_dcmplt>
 80102be:	2800      	cmp	r0, #0
 80102c0:	f040 8289 	bne.w	80107d6 <_dtoa_r+0x976>
 80102c4:	ec5b ab19 	vmov	sl, fp, d9
 80102c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	f2c0 8148 	blt.w	8010560 <_dtoa_r+0x700>
 80102d0:	9a00      	ldr	r2, [sp, #0]
 80102d2:	2a0e      	cmp	r2, #14
 80102d4:	f300 8144 	bgt.w	8010560 <_dtoa_r+0x700>
 80102d8:	4b67      	ldr	r3, [pc, #412]	; (8010478 <_dtoa_r+0x618>)
 80102da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f280 80d5 	bge.w	8010494 <_dtoa_r+0x634>
 80102ea:	9b03      	ldr	r3, [sp, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f300 80d1 	bgt.w	8010494 <_dtoa_r+0x634>
 80102f2:	f040 826f 	bne.w	80107d4 <_dtoa_r+0x974>
 80102f6:	4b65      	ldr	r3, [pc, #404]	; (801048c <_dtoa_r+0x62c>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	4640      	mov	r0, r8
 80102fc:	4649      	mov	r1, r9
 80102fe:	f7f0 f993 	bl	8000628 <__aeabi_dmul>
 8010302:	4652      	mov	r2, sl
 8010304:	465b      	mov	r3, fp
 8010306:	f7f0 fc15 	bl	8000b34 <__aeabi_dcmpge>
 801030a:	9e03      	ldr	r6, [sp, #12]
 801030c:	4637      	mov	r7, r6
 801030e:	2800      	cmp	r0, #0
 8010310:	f040 8245 	bne.w	801079e <_dtoa_r+0x93e>
 8010314:	9d01      	ldr	r5, [sp, #4]
 8010316:	2331      	movs	r3, #49	; 0x31
 8010318:	f805 3b01 	strb.w	r3, [r5], #1
 801031c:	9b00      	ldr	r3, [sp, #0]
 801031e:	3301      	adds	r3, #1
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	e240      	b.n	80107a6 <_dtoa_r+0x946>
 8010324:	07f2      	lsls	r2, r6, #31
 8010326:	d505      	bpl.n	8010334 <_dtoa_r+0x4d4>
 8010328:	e9d7 2300 	ldrd	r2, r3, [r7]
 801032c:	f7f0 f97c 	bl	8000628 <__aeabi_dmul>
 8010330:	3501      	adds	r5, #1
 8010332:	2301      	movs	r3, #1
 8010334:	1076      	asrs	r6, r6, #1
 8010336:	3708      	adds	r7, #8
 8010338:	e777      	b.n	801022a <_dtoa_r+0x3ca>
 801033a:	2502      	movs	r5, #2
 801033c:	e779      	b.n	8010232 <_dtoa_r+0x3d2>
 801033e:	9f00      	ldr	r7, [sp, #0]
 8010340:	9e03      	ldr	r6, [sp, #12]
 8010342:	e794      	b.n	801026e <_dtoa_r+0x40e>
 8010344:	9901      	ldr	r1, [sp, #4]
 8010346:	4b4c      	ldr	r3, [pc, #304]	; (8010478 <_dtoa_r+0x618>)
 8010348:	4431      	add	r1, r6
 801034a:	910d      	str	r1, [sp, #52]	; 0x34
 801034c:	9908      	ldr	r1, [sp, #32]
 801034e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010352:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010356:	2900      	cmp	r1, #0
 8010358:	d043      	beq.n	80103e2 <_dtoa_r+0x582>
 801035a:	494d      	ldr	r1, [pc, #308]	; (8010490 <_dtoa_r+0x630>)
 801035c:	2000      	movs	r0, #0
 801035e:	f7f0 fa8d 	bl	800087c <__aeabi_ddiv>
 8010362:	4652      	mov	r2, sl
 8010364:	465b      	mov	r3, fp
 8010366:	f7ef ffa7 	bl	80002b8 <__aeabi_dsub>
 801036a:	9d01      	ldr	r5, [sp, #4]
 801036c:	4682      	mov	sl, r0
 801036e:	468b      	mov	fp, r1
 8010370:	4649      	mov	r1, r9
 8010372:	4640      	mov	r0, r8
 8010374:	f7f0 fc08 	bl	8000b88 <__aeabi_d2iz>
 8010378:	4606      	mov	r6, r0
 801037a:	f7f0 f8eb 	bl	8000554 <__aeabi_i2d>
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	4640      	mov	r0, r8
 8010384:	4649      	mov	r1, r9
 8010386:	f7ef ff97 	bl	80002b8 <__aeabi_dsub>
 801038a:	3630      	adds	r6, #48	; 0x30
 801038c:	f805 6b01 	strb.w	r6, [r5], #1
 8010390:	4652      	mov	r2, sl
 8010392:	465b      	mov	r3, fp
 8010394:	4680      	mov	r8, r0
 8010396:	4689      	mov	r9, r1
 8010398:	f7f0 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 801039c:	2800      	cmp	r0, #0
 801039e:	d163      	bne.n	8010468 <_dtoa_r+0x608>
 80103a0:	4642      	mov	r2, r8
 80103a2:	464b      	mov	r3, r9
 80103a4:	4936      	ldr	r1, [pc, #216]	; (8010480 <_dtoa_r+0x620>)
 80103a6:	2000      	movs	r0, #0
 80103a8:	f7ef ff86 	bl	80002b8 <__aeabi_dsub>
 80103ac:	4652      	mov	r2, sl
 80103ae:	465b      	mov	r3, fp
 80103b0:	f7f0 fbac 	bl	8000b0c <__aeabi_dcmplt>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	f040 80b5 	bne.w	8010524 <_dtoa_r+0x6c4>
 80103ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103bc:	429d      	cmp	r5, r3
 80103be:	d081      	beq.n	80102c4 <_dtoa_r+0x464>
 80103c0:	4b30      	ldr	r3, [pc, #192]	; (8010484 <_dtoa_r+0x624>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	4650      	mov	r0, sl
 80103c6:	4659      	mov	r1, fp
 80103c8:	f7f0 f92e 	bl	8000628 <__aeabi_dmul>
 80103cc:	4b2d      	ldr	r3, [pc, #180]	; (8010484 <_dtoa_r+0x624>)
 80103ce:	4682      	mov	sl, r0
 80103d0:	468b      	mov	fp, r1
 80103d2:	4640      	mov	r0, r8
 80103d4:	4649      	mov	r1, r9
 80103d6:	2200      	movs	r2, #0
 80103d8:	f7f0 f926 	bl	8000628 <__aeabi_dmul>
 80103dc:	4680      	mov	r8, r0
 80103de:	4689      	mov	r9, r1
 80103e0:	e7c6      	b.n	8010370 <_dtoa_r+0x510>
 80103e2:	4650      	mov	r0, sl
 80103e4:	4659      	mov	r1, fp
 80103e6:	f7f0 f91f 	bl	8000628 <__aeabi_dmul>
 80103ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ec:	9d01      	ldr	r5, [sp, #4]
 80103ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80103f0:	4682      	mov	sl, r0
 80103f2:	468b      	mov	fp, r1
 80103f4:	4649      	mov	r1, r9
 80103f6:	4640      	mov	r0, r8
 80103f8:	f7f0 fbc6 	bl	8000b88 <__aeabi_d2iz>
 80103fc:	4606      	mov	r6, r0
 80103fe:	f7f0 f8a9 	bl	8000554 <__aeabi_i2d>
 8010402:	3630      	adds	r6, #48	; 0x30
 8010404:	4602      	mov	r2, r0
 8010406:	460b      	mov	r3, r1
 8010408:	4640      	mov	r0, r8
 801040a:	4649      	mov	r1, r9
 801040c:	f7ef ff54 	bl	80002b8 <__aeabi_dsub>
 8010410:	f805 6b01 	strb.w	r6, [r5], #1
 8010414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010416:	429d      	cmp	r5, r3
 8010418:	4680      	mov	r8, r0
 801041a:	4689      	mov	r9, r1
 801041c:	f04f 0200 	mov.w	r2, #0
 8010420:	d124      	bne.n	801046c <_dtoa_r+0x60c>
 8010422:	4b1b      	ldr	r3, [pc, #108]	; (8010490 <_dtoa_r+0x630>)
 8010424:	4650      	mov	r0, sl
 8010426:	4659      	mov	r1, fp
 8010428:	f7ef ff48 	bl	80002bc <__adddf3>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4640      	mov	r0, r8
 8010432:	4649      	mov	r1, r9
 8010434:	f7f0 fb88 	bl	8000b48 <__aeabi_dcmpgt>
 8010438:	2800      	cmp	r0, #0
 801043a:	d173      	bne.n	8010524 <_dtoa_r+0x6c4>
 801043c:	4652      	mov	r2, sl
 801043e:	465b      	mov	r3, fp
 8010440:	4913      	ldr	r1, [pc, #76]	; (8010490 <_dtoa_r+0x630>)
 8010442:	2000      	movs	r0, #0
 8010444:	f7ef ff38 	bl	80002b8 <__aeabi_dsub>
 8010448:	4602      	mov	r2, r0
 801044a:	460b      	mov	r3, r1
 801044c:	4640      	mov	r0, r8
 801044e:	4649      	mov	r1, r9
 8010450:	f7f0 fb5c 	bl	8000b0c <__aeabi_dcmplt>
 8010454:	2800      	cmp	r0, #0
 8010456:	f43f af35 	beq.w	80102c4 <_dtoa_r+0x464>
 801045a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801045c:	1e6b      	subs	r3, r5, #1
 801045e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010460:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010464:	2b30      	cmp	r3, #48	; 0x30
 8010466:	d0f8      	beq.n	801045a <_dtoa_r+0x5fa>
 8010468:	9700      	str	r7, [sp, #0]
 801046a:	e049      	b.n	8010500 <_dtoa_r+0x6a0>
 801046c:	4b05      	ldr	r3, [pc, #20]	; (8010484 <_dtoa_r+0x624>)
 801046e:	f7f0 f8db 	bl	8000628 <__aeabi_dmul>
 8010472:	4680      	mov	r8, r0
 8010474:	4689      	mov	r9, r1
 8010476:	e7bd      	b.n	80103f4 <_dtoa_r+0x594>
 8010478:	08012328 	.word	0x08012328
 801047c:	08012300 	.word	0x08012300
 8010480:	3ff00000 	.word	0x3ff00000
 8010484:	40240000 	.word	0x40240000
 8010488:	401c0000 	.word	0x401c0000
 801048c:	40140000 	.word	0x40140000
 8010490:	3fe00000 	.word	0x3fe00000
 8010494:	9d01      	ldr	r5, [sp, #4]
 8010496:	4656      	mov	r6, sl
 8010498:	465f      	mov	r7, fp
 801049a:	4642      	mov	r2, r8
 801049c:	464b      	mov	r3, r9
 801049e:	4630      	mov	r0, r6
 80104a0:	4639      	mov	r1, r7
 80104a2:	f7f0 f9eb 	bl	800087c <__aeabi_ddiv>
 80104a6:	f7f0 fb6f 	bl	8000b88 <__aeabi_d2iz>
 80104aa:	4682      	mov	sl, r0
 80104ac:	f7f0 f852 	bl	8000554 <__aeabi_i2d>
 80104b0:	4642      	mov	r2, r8
 80104b2:	464b      	mov	r3, r9
 80104b4:	f7f0 f8b8 	bl	8000628 <__aeabi_dmul>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	4630      	mov	r0, r6
 80104be:	4639      	mov	r1, r7
 80104c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80104c4:	f7ef fef8 	bl	80002b8 <__aeabi_dsub>
 80104c8:	f805 6b01 	strb.w	r6, [r5], #1
 80104cc:	9e01      	ldr	r6, [sp, #4]
 80104ce:	9f03      	ldr	r7, [sp, #12]
 80104d0:	1bae      	subs	r6, r5, r6
 80104d2:	42b7      	cmp	r7, r6
 80104d4:	4602      	mov	r2, r0
 80104d6:	460b      	mov	r3, r1
 80104d8:	d135      	bne.n	8010546 <_dtoa_r+0x6e6>
 80104da:	f7ef feef 	bl	80002bc <__adddf3>
 80104de:	4642      	mov	r2, r8
 80104e0:	464b      	mov	r3, r9
 80104e2:	4606      	mov	r6, r0
 80104e4:	460f      	mov	r7, r1
 80104e6:	f7f0 fb2f 	bl	8000b48 <__aeabi_dcmpgt>
 80104ea:	b9d0      	cbnz	r0, 8010522 <_dtoa_r+0x6c2>
 80104ec:	4642      	mov	r2, r8
 80104ee:	464b      	mov	r3, r9
 80104f0:	4630      	mov	r0, r6
 80104f2:	4639      	mov	r1, r7
 80104f4:	f7f0 fb00 	bl	8000af8 <__aeabi_dcmpeq>
 80104f8:	b110      	cbz	r0, 8010500 <_dtoa_r+0x6a0>
 80104fa:	f01a 0f01 	tst.w	sl, #1
 80104fe:	d110      	bne.n	8010522 <_dtoa_r+0x6c2>
 8010500:	4620      	mov	r0, r4
 8010502:	ee18 1a10 	vmov	r1, s16
 8010506:	f000 fc07 	bl	8010d18 <_Bfree>
 801050a:	2300      	movs	r3, #0
 801050c:	9800      	ldr	r0, [sp, #0]
 801050e:	702b      	strb	r3, [r5, #0]
 8010510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010512:	3001      	adds	r0, #1
 8010514:	6018      	str	r0, [r3, #0]
 8010516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010518:	2b00      	cmp	r3, #0
 801051a:	f43f acf1 	beq.w	800ff00 <_dtoa_r+0xa0>
 801051e:	601d      	str	r5, [r3, #0]
 8010520:	e4ee      	b.n	800ff00 <_dtoa_r+0xa0>
 8010522:	9f00      	ldr	r7, [sp, #0]
 8010524:	462b      	mov	r3, r5
 8010526:	461d      	mov	r5, r3
 8010528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801052c:	2a39      	cmp	r2, #57	; 0x39
 801052e:	d106      	bne.n	801053e <_dtoa_r+0x6de>
 8010530:	9a01      	ldr	r2, [sp, #4]
 8010532:	429a      	cmp	r2, r3
 8010534:	d1f7      	bne.n	8010526 <_dtoa_r+0x6c6>
 8010536:	9901      	ldr	r1, [sp, #4]
 8010538:	2230      	movs	r2, #48	; 0x30
 801053a:	3701      	adds	r7, #1
 801053c:	700a      	strb	r2, [r1, #0]
 801053e:	781a      	ldrb	r2, [r3, #0]
 8010540:	3201      	adds	r2, #1
 8010542:	701a      	strb	r2, [r3, #0]
 8010544:	e790      	b.n	8010468 <_dtoa_r+0x608>
 8010546:	4ba6      	ldr	r3, [pc, #664]	; (80107e0 <_dtoa_r+0x980>)
 8010548:	2200      	movs	r2, #0
 801054a:	f7f0 f86d 	bl	8000628 <__aeabi_dmul>
 801054e:	2200      	movs	r2, #0
 8010550:	2300      	movs	r3, #0
 8010552:	4606      	mov	r6, r0
 8010554:	460f      	mov	r7, r1
 8010556:	f7f0 facf 	bl	8000af8 <__aeabi_dcmpeq>
 801055a:	2800      	cmp	r0, #0
 801055c:	d09d      	beq.n	801049a <_dtoa_r+0x63a>
 801055e:	e7cf      	b.n	8010500 <_dtoa_r+0x6a0>
 8010560:	9a08      	ldr	r2, [sp, #32]
 8010562:	2a00      	cmp	r2, #0
 8010564:	f000 80d7 	beq.w	8010716 <_dtoa_r+0x8b6>
 8010568:	9a06      	ldr	r2, [sp, #24]
 801056a:	2a01      	cmp	r2, #1
 801056c:	f300 80ba 	bgt.w	80106e4 <_dtoa_r+0x884>
 8010570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010572:	2a00      	cmp	r2, #0
 8010574:	f000 80b2 	beq.w	80106dc <_dtoa_r+0x87c>
 8010578:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801057c:	9e07      	ldr	r6, [sp, #28]
 801057e:	9d04      	ldr	r5, [sp, #16]
 8010580:	9a04      	ldr	r2, [sp, #16]
 8010582:	441a      	add	r2, r3
 8010584:	9204      	str	r2, [sp, #16]
 8010586:	9a05      	ldr	r2, [sp, #20]
 8010588:	2101      	movs	r1, #1
 801058a:	441a      	add	r2, r3
 801058c:	4620      	mov	r0, r4
 801058e:	9205      	str	r2, [sp, #20]
 8010590:	f000 fc7a 	bl	8010e88 <__i2b>
 8010594:	4607      	mov	r7, r0
 8010596:	2d00      	cmp	r5, #0
 8010598:	dd0c      	ble.n	80105b4 <_dtoa_r+0x754>
 801059a:	9b05      	ldr	r3, [sp, #20]
 801059c:	2b00      	cmp	r3, #0
 801059e:	dd09      	ble.n	80105b4 <_dtoa_r+0x754>
 80105a0:	42ab      	cmp	r3, r5
 80105a2:	9a04      	ldr	r2, [sp, #16]
 80105a4:	bfa8      	it	ge
 80105a6:	462b      	movge	r3, r5
 80105a8:	1ad2      	subs	r2, r2, r3
 80105aa:	9204      	str	r2, [sp, #16]
 80105ac:	9a05      	ldr	r2, [sp, #20]
 80105ae:	1aed      	subs	r5, r5, r3
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	9305      	str	r3, [sp, #20]
 80105b4:	9b07      	ldr	r3, [sp, #28]
 80105b6:	b31b      	cbz	r3, 8010600 <_dtoa_r+0x7a0>
 80105b8:	9b08      	ldr	r3, [sp, #32]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 80af 	beq.w	801071e <_dtoa_r+0x8be>
 80105c0:	2e00      	cmp	r6, #0
 80105c2:	dd13      	ble.n	80105ec <_dtoa_r+0x78c>
 80105c4:	4639      	mov	r1, r7
 80105c6:	4632      	mov	r2, r6
 80105c8:	4620      	mov	r0, r4
 80105ca:	f000 fd1d 	bl	8011008 <__pow5mult>
 80105ce:	ee18 2a10 	vmov	r2, s16
 80105d2:	4601      	mov	r1, r0
 80105d4:	4607      	mov	r7, r0
 80105d6:	4620      	mov	r0, r4
 80105d8:	f000 fc6c 	bl	8010eb4 <__multiply>
 80105dc:	ee18 1a10 	vmov	r1, s16
 80105e0:	4680      	mov	r8, r0
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 fb98 	bl	8010d18 <_Bfree>
 80105e8:	ee08 8a10 	vmov	s16, r8
 80105ec:	9b07      	ldr	r3, [sp, #28]
 80105ee:	1b9a      	subs	r2, r3, r6
 80105f0:	d006      	beq.n	8010600 <_dtoa_r+0x7a0>
 80105f2:	ee18 1a10 	vmov	r1, s16
 80105f6:	4620      	mov	r0, r4
 80105f8:	f000 fd06 	bl	8011008 <__pow5mult>
 80105fc:	ee08 0a10 	vmov	s16, r0
 8010600:	2101      	movs	r1, #1
 8010602:	4620      	mov	r0, r4
 8010604:	f000 fc40 	bl	8010e88 <__i2b>
 8010608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801060a:	2b00      	cmp	r3, #0
 801060c:	4606      	mov	r6, r0
 801060e:	f340 8088 	ble.w	8010722 <_dtoa_r+0x8c2>
 8010612:	461a      	mov	r2, r3
 8010614:	4601      	mov	r1, r0
 8010616:	4620      	mov	r0, r4
 8010618:	f000 fcf6 	bl	8011008 <__pow5mult>
 801061c:	9b06      	ldr	r3, [sp, #24]
 801061e:	2b01      	cmp	r3, #1
 8010620:	4606      	mov	r6, r0
 8010622:	f340 8081 	ble.w	8010728 <_dtoa_r+0x8c8>
 8010626:	f04f 0800 	mov.w	r8, #0
 801062a:	6933      	ldr	r3, [r6, #16]
 801062c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010630:	6918      	ldr	r0, [r3, #16]
 8010632:	f000 fbd9 	bl	8010de8 <__hi0bits>
 8010636:	f1c0 0020 	rsb	r0, r0, #32
 801063a:	9b05      	ldr	r3, [sp, #20]
 801063c:	4418      	add	r0, r3
 801063e:	f010 001f 	ands.w	r0, r0, #31
 8010642:	f000 8092 	beq.w	801076a <_dtoa_r+0x90a>
 8010646:	f1c0 0320 	rsb	r3, r0, #32
 801064a:	2b04      	cmp	r3, #4
 801064c:	f340 808a 	ble.w	8010764 <_dtoa_r+0x904>
 8010650:	f1c0 001c 	rsb	r0, r0, #28
 8010654:	9b04      	ldr	r3, [sp, #16]
 8010656:	4403      	add	r3, r0
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	9b05      	ldr	r3, [sp, #20]
 801065c:	4403      	add	r3, r0
 801065e:	4405      	add	r5, r0
 8010660:	9305      	str	r3, [sp, #20]
 8010662:	9b04      	ldr	r3, [sp, #16]
 8010664:	2b00      	cmp	r3, #0
 8010666:	dd07      	ble.n	8010678 <_dtoa_r+0x818>
 8010668:	ee18 1a10 	vmov	r1, s16
 801066c:	461a      	mov	r2, r3
 801066e:	4620      	mov	r0, r4
 8010670:	f000 fd24 	bl	80110bc <__lshift>
 8010674:	ee08 0a10 	vmov	s16, r0
 8010678:	9b05      	ldr	r3, [sp, #20]
 801067a:	2b00      	cmp	r3, #0
 801067c:	dd05      	ble.n	801068a <_dtoa_r+0x82a>
 801067e:	4631      	mov	r1, r6
 8010680:	461a      	mov	r2, r3
 8010682:	4620      	mov	r0, r4
 8010684:	f000 fd1a 	bl	80110bc <__lshift>
 8010688:	4606      	mov	r6, r0
 801068a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801068c:	2b00      	cmp	r3, #0
 801068e:	d06e      	beq.n	801076e <_dtoa_r+0x90e>
 8010690:	ee18 0a10 	vmov	r0, s16
 8010694:	4631      	mov	r1, r6
 8010696:	f000 fd81 	bl	801119c <__mcmp>
 801069a:	2800      	cmp	r0, #0
 801069c:	da67      	bge.n	801076e <_dtoa_r+0x90e>
 801069e:	9b00      	ldr	r3, [sp, #0]
 80106a0:	3b01      	subs	r3, #1
 80106a2:	ee18 1a10 	vmov	r1, s16
 80106a6:	9300      	str	r3, [sp, #0]
 80106a8:	220a      	movs	r2, #10
 80106aa:	2300      	movs	r3, #0
 80106ac:	4620      	mov	r0, r4
 80106ae:	f000 fb55 	bl	8010d5c <__multadd>
 80106b2:	9b08      	ldr	r3, [sp, #32]
 80106b4:	ee08 0a10 	vmov	s16, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 81b1 	beq.w	8010a20 <_dtoa_r+0xbc0>
 80106be:	2300      	movs	r3, #0
 80106c0:	4639      	mov	r1, r7
 80106c2:	220a      	movs	r2, #10
 80106c4:	4620      	mov	r0, r4
 80106c6:	f000 fb49 	bl	8010d5c <__multadd>
 80106ca:	9b02      	ldr	r3, [sp, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	4607      	mov	r7, r0
 80106d0:	f300 808e 	bgt.w	80107f0 <_dtoa_r+0x990>
 80106d4:	9b06      	ldr	r3, [sp, #24]
 80106d6:	2b02      	cmp	r3, #2
 80106d8:	dc51      	bgt.n	801077e <_dtoa_r+0x91e>
 80106da:	e089      	b.n	80107f0 <_dtoa_r+0x990>
 80106dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80106e2:	e74b      	b.n	801057c <_dtoa_r+0x71c>
 80106e4:	9b03      	ldr	r3, [sp, #12]
 80106e6:	1e5e      	subs	r6, r3, #1
 80106e8:	9b07      	ldr	r3, [sp, #28]
 80106ea:	42b3      	cmp	r3, r6
 80106ec:	bfbf      	itttt	lt
 80106ee:	9b07      	ldrlt	r3, [sp, #28]
 80106f0:	9607      	strlt	r6, [sp, #28]
 80106f2:	1af2      	sublt	r2, r6, r3
 80106f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80106f6:	bfb6      	itet	lt
 80106f8:	189b      	addlt	r3, r3, r2
 80106fa:	1b9e      	subge	r6, r3, r6
 80106fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80106fe:	9b03      	ldr	r3, [sp, #12]
 8010700:	bfb8      	it	lt
 8010702:	2600      	movlt	r6, #0
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfb7      	itett	lt
 8010708:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801070c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010710:	1a9d      	sublt	r5, r3, r2
 8010712:	2300      	movlt	r3, #0
 8010714:	e734      	b.n	8010580 <_dtoa_r+0x720>
 8010716:	9e07      	ldr	r6, [sp, #28]
 8010718:	9d04      	ldr	r5, [sp, #16]
 801071a:	9f08      	ldr	r7, [sp, #32]
 801071c:	e73b      	b.n	8010596 <_dtoa_r+0x736>
 801071e:	9a07      	ldr	r2, [sp, #28]
 8010720:	e767      	b.n	80105f2 <_dtoa_r+0x792>
 8010722:	9b06      	ldr	r3, [sp, #24]
 8010724:	2b01      	cmp	r3, #1
 8010726:	dc18      	bgt.n	801075a <_dtoa_r+0x8fa>
 8010728:	f1ba 0f00 	cmp.w	sl, #0
 801072c:	d115      	bne.n	801075a <_dtoa_r+0x8fa>
 801072e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010732:	b993      	cbnz	r3, 801075a <_dtoa_r+0x8fa>
 8010734:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010738:	0d1b      	lsrs	r3, r3, #20
 801073a:	051b      	lsls	r3, r3, #20
 801073c:	b183      	cbz	r3, 8010760 <_dtoa_r+0x900>
 801073e:	9b04      	ldr	r3, [sp, #16]
 8010740:	3301      	adds	r3, #1
 8010742:	9304      	str	r3, [sp, #16]
 8010744:	9b05      	ldr	r3, [sp, #20]
 8010746:	3301      	adds	r3, #1
 8010748:	9305      	str	r3, [sp, #20]
 801074a:	f04f 0801 	mov.w	r8, #1
 801074e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010750:	2b00      	cmp	r3, #0
 8010752:	f47f af6a 	bne.w	801062a <_dtoa_r+0x7ca>
 8010756:	2001      	movs	r0, #1
 8010758:	e76f      	b.n	801063a <_dtoa_r+0x7da>
 801075a:	f04f 0800 	mov.w	r8, #0
 801075e:	e7f6      	b.n	801074e <_dtoa_r+0x8ee>
 8010760:	4698      	mov	r8, r3
 8010762:	e7f4      	b.n	801074e <_dtoa_r+0x8ee>
 8010764:	f43f af7d 	beq.w	8010662 <_dtoa_r+0x802>
 8010768:	4618      	mov	r0, r3
 801076a:	301c      	adds	r0, #28
 801076c:	e772      	b.n	8010654 <_dtoa_r+0x7f4>
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	dc37      	bgt.n	80107e4 <_dtoa_r+0x984>
 8010774:	9b06      	ldr	r3, [sp, #24]
 8010776:	2b02      	cmp	r3, #2
 8010778:	dd34      	ble.n	80107e4 <_dtoa_r+0x984>
 801077a:	9b03      	ldr	r3, [sp, #12]
 801077c:	9302      	str	r3, [sp, #8]
 801077e:	9b02      	ldr	r3, [sp, #8]
 8010780:	b96b      	cbnz	r3, 801079e <_dtoa_r+0x93e>
 8010782:	4631      	mov	r1, r6
 8010784:	2205      	movs	r2, #5
 8010786:	4620      	mov	r0, r4
 8010788:	f000 fae8 	bl	8010d5c <__multadd>
 801078c:	4601      	mov	r1, r0
 801078e:	4606      	mov	r6, r0
 8010790:	ee18 0a10 	vmov	r0, s16
 8010794:	f000 fd02 	bl	801119c <__mcmp>
 8010798:	2800      	cmp	r0, #0
 801079a:	f73f adbb 	bgt.w	8010314 <_dtoa_r+0x4b4>
 801079e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a0:	9d01      	ldr	r5, [sp, #4]
 80107a2:	43db      	mvns	r3, r3
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	f04f 0800 	mov.w	r8, #0
 80107aa:	4631      	mov	r1, r6
 80107ac:	4620      	mov	r0, r4
 80107ae:	f000 fab3 	bl	8010d18 <_Bfree>
 80107b2:	2f00      	cmp	r7, #0
 80107b4:	f43f aea4 	beq.w	8010500 <_dtoa_r+0x6a0>
 80107b8:	f1b8 0f00 	cmp.w	r8, #0
 80107bc:	d005      	beq.n	80107ca <_dtoa_r+0x96a>
 80107be:	45b8      	cmp	r8, r7
 80107c0:	d003      	beq.n	80107ca <_dtoa_r+0x96a>
 80107c2:	4641      	mov	r1, r8
 80107c4:	4620      	mov	r0, r4
 80107c6:	f000 faa7 	bl	8010d18 <_Bfree>
 80107ca:	4639      	mov	r1, r7
 80107cc:	4620      	mov	r0, r4
 80107ce:	f000 faa3 	bl	8010d18 <_Bfree>
 80107d2:	e695      	b.n	8010500 <_dtoa_r+0x6a0>
 80107d4:	2600      	movs	r6, #0
 80107d6:	4637      	mov	r7, r6
 80107d8:	e7e1      	b.n	801079e <_dtoa_r+0x93e>
 80107da:	9700      	str	r7, [sp, #0]
 80107dc:	4637      	mov	r7, r6
 80107de:	e599      	b.n	8010314 <_dtoa_r+0x4b4>
 80107e0:	40240000 	.word	0x40240000
 80107e4:	9b08      	ldr	r3, [sp, #32]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f000 80ca 	beq.w	8010980 <_dtoa_r+0xb20>
 80107ec:	9b03      	ldr	r3, [sp, #12]
 80107ee:	9302      	str	r3, [sp, #8]
 80107f0:	2d00      	cmp	r5, #0
 80107f2:	dd05      	ble.n	8010800 <_dtoa_r+0x9a0>
 80107f4:	4639      	mov	r1, r7
 80107f6:	462a      	mov	r2, r5
 80107f8:	4620      	mov	r0, r4
 80107fa:	f000 fc5f 	bl	80110bc <__lshift>
 80107fe:	4607      	mov	r7, r0
 8010800:	f1b8 0f00 	cmp.w	r8, #0
 8010804:	d05b      	beq.n	80108be <_dtoa_r+0xa5e>
 8010806:	6879      	ldr	r1, [r7, #4]
 8010808:	4620      	mov	r0, r4
 801080a:	f000 fa45 	bl	8010c98 <_Balloc>
 801080e:	4605      	mov	r5, r0
 8010810:	b928      	cbnz	r0, 801081e <_dtoa_r+0x9be>
 8010812:	4b87      	ldr	r3, [pc, #540]	; (8010a30 <_dtoa_r+0xbd0>)
 8010814:	4602      	mov	r2, r0
 8010816:	f240 21ea 	movw	r1, #746	; 0x2ea
 801081a:	f7ff bb3b 	b.w	800fe94 <_dtoa_r+0x34>
 801081e:	693a      	ldr	r2, [r7, #16]
 8010820:	3202      	adds	r2, #2
 8010822:	0092      	lsls	r2, r2, #2
 8010824:	f107 010c 	add.w	r1, r7, #12
 8010828:	300c      	adds	r0, #12
 801082a:	f7fe fce7 	bl	800f1fc <memcpy>
 801082e:	2201      	movs	r2, #1
 8010830:	4629      	mov	r1, r5
 8010832:	4620      	mov	r0, r4
 8010834:	f000 fc42 	bl	80110bc <__lshift>
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	f103 0901 	add.w	r9, r3, #1
 801083e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010842:	4413      	add	r3, r2
 8010844:	9305      	str	r3, [sp, #20]
 8010846:	f00a 0301 	and.w	r3, sl, #1
 801084a:	46b8      	mov	r8, r7
 801084c:	9304      	str	r3, [sp, #16]
 801084e:	4607      	mov	r7, r0
 8010850:	4631      	mov	r1, r6
 8010852:	ee18 0a10 	vmov	r0, s16
 8010856:	f7ff fa77 	bl	800fd48 <quorem>
 801085a:	4641      	mov	r1, r8
 801085c:	9002      	str	r0, [sp, #8]
 801085e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010862:	ee18 0a10 	vmov	r0, s16
 8010866:	f000 fc99 	bl	801119c <__mcmp>
 801086a:	463a      	mov	r2, r7
 801086c:	9003      	str	r0, [sp, #12]
 801086e:	4631      	mov	r1, r6
 8010870:	4620      	mov	r0, r4
 8010872:	f000 fcaf 	bl	80111d4 <__mdiff>
 8010876:	68c2      	ldr	r2, [r0, #12]
 8010878:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801087c:	4605      	mov	r5, r0
 801087e:	bb02      	cbnz	r2, 80108c2 <_dtoa_r+0xa62>
 8010880:	4601      	mov	r1, r0
 8010882:	ee18 0a10 	vmov	r0, s16
 8010886:	f000 fc89 	bl	801119c <__mcmp>
 801088a:	4602      	mov	r2, r0
 801088c:	4629      	mov	r1, r5
 801088e:	4620      	mov	r0, r4
 8010890:	9207      	str	r2, [sp, #28]
 8010892:	f000 fa41 	bl	8010d18 <_Bfree>
 8010896:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801089a:	ea43 0102 	orr.w	r1, r3, r2
 801089e:	9b04      	ldr	r3, [sp, #16]
 80108a0:	430b      	orrs	r3, r1
 80108a2:	464d      	mov	r5, r9
 80108a4:	d10f      	bne.n	80108c6 <_dtoa_r+0xa66>
 80108a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108aa:	d02a      	beq.n	8010902 <_dtoa_r+0xaa2>
 80108ac:	9b03      	ldr	r3, [sp, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	dd02      	ble.n	80108b8 <_dtoa_r+0xa58>
 80108b2:	9b02      	ldr	r3, [sp, #8]
 80108b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80108b8:	f88b a000 	strb.w	sl, [fp]
 80108bc:	e775      	b.n	80107aa <_dtoa_r+0x94a>
 80108be:	4638      	mov	r0, r7
 80108c0:	e7ba      	b.n	8010838 <_dtoa_r+0x9d8>
 80108c2:	2201      	movs	r2, #1
 80108c4:	e7e2      	b.n	801088c <_dtoa_r+0xa2c>
 80108c6:	9b03      	ldr	r3, [sp, #12]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	db04      	blt.n	80108d6 <_dtoa_r+0xa76>
 80108cc:	9906      	ldr	r1, [sp, #24]
 80108ce:	430b      	orrs	r3, r1
 80108d0:	9904      	ldr	r1, [sp, #16]
 80108d2:	430b      	orrs	r3, r1
 80108d4:	d122      	bne.n	801091c <_dtoa_r+0xabc>
 80108d6:	2a00      	cmp	r2, #0
 80108d8:	ddee      	ble.n	80108b8 <_dtoa_r+0xa58>
 80108da:	ee18 1a10 	vmov	r1, s16
 80108de:	2201      	movs	r2, #1
 80108e0:	4620      	mov	r0, r4
 80108e2:	f000 fbeb 	bl	80110bc <__lshift>
 80108e6:	4631      	mov	r1, r6
 80108e8:	ee08 0a10 	vmov	s16, r0
 80108ec:	f000 fc56 	bl	801119c <__mcmp>
 80108f0:	2800      	cmp	r0, #0
 80108f2:	dc03      	bgt.n	80108fc <_dtoa_r+0xa9c>
 80108f4:	d1e0      	bne.n	80108b8 <_dtoa_r+0xa58>
 80108f6:	f01a 0f01 	tst.w	sl, #1
 80108fa:	d0dd      	beq.n	80108b8 <_dtoa_r+0xa58>
 80108fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010900:	d1d7      	bne.n	80108b2 <_dtoa_r+0xa52>
 8010902:	2339      	movs	r3, #57	; 0x39
 8010904:	f88b 3000 	strb.w	r3, [fp]
 8010908:	462b      	mov	r3, r5
 801090a:	461d      	mov	r5, r3
 801090c:	3b01      	subs	r3, #1
 801090e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010912:	2a39      	cmp	r2, #57	; 0x39
 8010914:	d071      	beq.n	80109fa <_dtoa_r+0xb9a>
 8010916:	3201      	adds	r2, #1
 8010918:	701a      	strb	r2, [r3, #0]
 801091a:	e746      	b.n	80107aa <_dtoa_r+0x94a>
 801091c:	2a00      	cmp	r2, #0
 801091e:	dd07      	ble.n	8010930 <_dtoa_r+0xad0>
 8010920:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010924:	d0ed      	beq.n	8010902 <_dtoa_r+0xaa2>
 8010926:	f10a 0301 	add.w	r3, sl, #1
 801092a:	f88b 3000 	strb.w	r3, [fp]
 801092e:	e73c      	b.n	80107aa <_dtoa_r+0x94a>
 8010930:	9b05      	ldr	r3, [sp, #20]
 8010932:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010936:	4599      	cmp	r9, r3
 8010938:	d047      	beq.n	80109ca <_dtoa_r+0xb6a>
 801093a:	ee18 1a10 	vmov	r1, s16
 801093e:	2300      	movs	r3, #0
 8010940:	220a      	movs	r2, #10
 8010942:	4620      	mov	r0, r4
 8010944:	f000 fa0a 	bl	8010d5c <__multadd>
 8010948:	45b8      	cmp	r8, r7
 801094a:	ee08 0a10 	vmov	s16, r0
 801094e:	f04f 0300 	mov.w	r3, #0
 8010952:	f04f 020a 	mov.w	r2, #10
 8010956:	4641      	mov	r1, r8
 8010958:	4620      	mov	r0, r4
 801095a:	d106      	bne.n	801096a <_dtoa_r+0xb0a>
 801095c:	f000 f9fe 	bl	8010d5c <__multadd>
 8010960:	4680      	mov	r8, r0
 8010962:	4607      	mov	r7, r0
 8010964:	f109 0901 	add.w	r9, r9, #1
 8010968:	e772      	b.n	8010850 <_dtoa_r+0x9f0>
 801096a:	f000 f9f7 	bl	8010d5c <__multadd>
 801096e:	4639      	mov	r1, r7
 8010970:	4680      	mov	r8, r0
 8010972:	2300      	movs	r3, #0
 8010974:	220a      	movs	r2, #10
 8010976:	4620      	mov	r0, r4
 8010978:	f000 f9f0 	bl	8010d5c <__multadd>
 801097c:	4607      	mov	r7, r0
 801097e:	e7f1      	b.n	8010964 <_dtoa_r+0xb04>
 8010980:	9b03      	ldr	r3, [sp, #12]
 8010982:	9302      	str	r3, [sp, #8]
 8010984:	9d01      	ldr	r5, [sp, #4]
 8010986:	ee18 0a10 	vmov	r0, s16
 801098a:	4631      	mov	r1, r6
 801098c:	f7ff f9dc 	bl	800fd48 <quorem>
 8010990:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010994:	9b01      	ldr	r3, [sp, #4]
 8010996:	f805 ab01 	strb.w	sl, [r5], #1
 801099a:	1aea      	subs	r2, r5, r3
 801099c:	9b02      	ldr	r3, [sp, #8]
 801099e:	4293      	cmp	r3, r2
 80109a0:	dd09      	ble.n	80109b6 <_dtoa_r+0xb56>
 80109a2:	ee18 1a10 	vmov	r1, s16
 80109a6:	2300      	movs	r3, #0
 80109a8:	220a      	movs	r2, #10
 80109aa:	4620      	mov	r0, r4
 80109ac:	f000 f9d6 	bl	8010d5c <__multadd>
 80109b0:	ee08 0a10 	vmov	s16, r0
 80109b4:	e7e7      	b.n	8010986 <_dtoa_r+0xb26>
 80109b6:	9b02      	ldr	r3, [sp, #8]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	bfc8      	it	gt
 80109bc:	461d      	movgt	r5, r3
 80109be:	9b01      	ldr	r3, [sp, #4]
 80109c0:	bfd8      	it	le
 80109c2:	2501      	movle	r5, #1
 80109c4:	441d      	add	r5, r3
 80109c6:	f04f 0800 	mov.w	r8, #0
 80109ca:	ee18 1a10 	vmov	r1, s16
 80109ce:	2201      	movs	r2, #1
 80109d0:	4620      	mov	r0, r4
 80109d2:	f000 fb73 	bl	80110bc <__lshift>
 80109d6:	4631      	mov	r1, r6
 80109d8:	ee08 0a10 	vmov	s16, r0
 80109dc:	f000 fbde 	bl	801119c <__mcmp>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	dc91      	bgt.n	8010908 <_dtoa_r+0xaa8>
 80109e4:	d102      	bne.n	80109ec <_dtoa_r+0xb8c>
 80109e6:	f01a 0f01 	tst.w	sl, #1
 80109ea:	d18d      	bne.n	8010908 <_dtoa_r+0xaa8>
 80109ec:	462b      	mov	r3, r5
 80109ee:	461d      	mov	r5, r3
 80109f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109f4:	2a30      	cmp	r2, #48	; 0x30
 80109f6:	d0fa      	beq.n	80109ee <_dtoa_r+0xb8e>
 80109f8:	e6d7      	b.n	80107aa <_dtoa_r+0x94a>
 80109fa:	9a01      	ldr	r2, [sp, #4]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d184      	bne.n	801090a <_dtoa_r+0xaaa>
 8010a00:	9b00      	ldr	r3, [sp, #0]
 8010a02:	3301      	adds	r3, #1
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	2331      	movs	r3, #49	; 0x31
 8010a08:	7013      	strb	r3, [r2, #0]
 8010a0a:	e6ce      	b.n	80107aa <_dtoa_r+0x94a>
 8010a0c:	4b09      	ldr	r3, [pc, #36]	; (8010a34 <_dtoa_r+0xbd4>)
 8010a0e:	f7ff ba95 	b.w	800ff3c <_dtoa_r+0xdc>
 8010a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f47f aa6e 	bne.w	800fef6 <_dtoa_r+0x96>
 8010a1a:	4b07      	ldr	r3, [pc, #28]	; (8010a38 <_dtoa_r+0xbd8>)
 8010a1c:	f7ff ba8e 	b.w	800ff3c <_dtoa_r+0xdc>
 8010a20:	9b02      	ldr	r3, [sp, #8]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	dcae      	bgt.n	8010984 <_dtoa_r+0xb24>
 8010a26:	9b06      	ldr	r3, [sp, #24]
 8010a28:	2b02      	cmp	r3, #2
 8010a2a:	f73f aea8 	bgt.w	801077e <_dtoa_r+0x91e>
 8010a2e:	e7a9      	b.n	8010984 <_dtoa_r+0xb24>
 8010a30:	08012224 	.word	0x08012224
 8010a34:	08012044 	.word	0x08012044
 8010a38:	080121a5 	.word	0x080121a5

08010a3c <std>:
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	b510      	push	{r4, lr}
 8010a40:	4604      	mov	r4, r0
 8010a42:	e9c0 3300 	strd	r3, r3, [r0]
 8010a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a4a:	6083      	str	r3, [r0, #8]
 8010a4c:	8181      	strh	r1, [r0, #12]
 8010a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8010a50:	81c2      	strh	r2, [r0, #14]
 8010a52:	6183      	str	r3, [r0, #24]
 8010a54:	4619      	mov	r1, r3
 8010a56:	2208      	movs	r2, #8
 8010a58:	305c      	adds	r0, #92	; 0x5c
 8010a5a:	f7fe fbdd 	bl	800f218 <memset>
 8010a5e:	4b05      	ldr	r3, [pc, #20]	; (8010a74 <std+0x38>)
 8010a60:	6263      	str	r3, [r4, #36]	; 0x24
 8010a62:	4b05      	ldr	r3, [pc, #20]	; (8010a78 <std+0x3c>)
 8010a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a66:	4b05      	ldr	r3, [pc, #20]	; (8010a7c <std+0x40>)
 8010a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a6a:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <std+0x44>)
 8010a6c:	6224      	str	r4, [r4, #32]
 8010a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a70:	bd10      	pop	{r4, pc}
 8010a72:	bf00      	nop
 8010a74:	08011681 	.word	0x08011681
 8010a78:	080116a3 	.word	0x080116a3
 8010a7c:	080116db 	.word	0x080116db
 8010a80:	080116ff 	.word	0x080116ff

08010a84 <_cleanup_r>:
 8010a84:	4901      	ldr	r1, [pc, #4]	; (8010a8c <_cleanup_r+0x8>)
 8010a86:	f000 b8c1 	b.w	8010c0c <_fwalk_reent>
 8010a8a:	bf00      	nop
 8010a8c:	08011a05 	.word	0x08011a05

08010a90 <__sfmoreglue>:
 8010a90:	b570      	push	{r4, r5, r6, lr}
 8010a92:	2268      	movs	r2, #104	; 0x68
 8010a94:	1e4d      	subs	r5, r1, #1
 8010a96:	4355      	muls	r5, r2
 8010a98:	460e      	mov	r6, r1
 8010a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a9e:	f7fe fc2f 	bl	800f300 <_malloc_r>
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	b140      	cbz	r0, 8010ab8 <__sfmoreglue+0x28>
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8010aac:	300c      	adds	r0, #12
 8010aae:	60a0      	str	r0, [r4, #8]
 8010ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ab4:	f7fe fbb0 	bl	800f218 <memset>
 8010ab8:	4620      	mov	r0, r4
 8010aba:	bd70      	pop	{r4, r5, r6, pc}

08010abc <__sfp_lock_acquire>:
 8010abc:	4801      	ldr	r0, [pc, #4]	; (8010ac4 <__sfp_lock_acquire+0x8>)
 8010abe:	f000 b8ca 	b.w	8010c56 <__retarget_lock_acquire_recursive>
 8010ac2:	bf00      	nop
 8010ac4:	20002915 	.word	0x20002915

08010ac8 <__sfp_lock_release>:
 8010ac8:	4801      	ldr	r0, [pc, #4]	; (8010ad0 <__sfp_lock_release+0x8>)
 8010aca:	f000 b8c5 	b.w	8010c58 <__retarget_lock_release_recursive>
 8010ace:	bf00      	nop
 8010ad0:	20002915 	.word	0x20002915

08010ad4 <__sinit_lock_acquire>:
 8010ad4:	4801      	ldr	r0, [pc, #4]	; (8010adc <__sinit_lock_acquire+0x8>)
 8010ad6:	f000 b8be 	b.w	8010c56 <__retarget_lock_acquire_recursive>
 8010ada:	bf00      	nop
 8010adc:	20002916 	.word	0x20002916

08010ae0 <__sinit_lock_release>:
 8010ae0:	4801      	ldr	r0, [pc, #4]	; (8010ae8 <__sinit_lock_release+0x8>)
 8010ae2:	f000 b8b9 	b.w	8010c58 <__retarget_lock_release_recursive>
 8010ae6:	bf00      	nop
 8010ae8:	20002916 	.word	0x20002916

08010aec <__sinit>:
 8010aec:	b510      	push	{r4, lr}
 8010aee:	4604      	mov	r4, r0
 8010af0:	f7ff fff0 	bl	8010ad4 <__sinit_lock_acquire>
 8010af4:	69a3      	ldr	r3, [r4, #24]
 8010af6:	b11b      	cbz	r3, 8010b00 <__sinit+0x14>
 8010af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010afc:	f7ff bff0 	b.w	8010ae0 <__sinit_lock_release>
 8010b00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b04:	6523      	str	r3, [r4, #80]	; 0x50
 8010b06:	4b13      	ldr	r3, [pc, #76]	; (8010b54 <__sinit+0x68>)
 8010b08:	4a13      	ldr	r2, [pc, #76]	; (8010b58 <__sinit+0x6c>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b0e:	42a3      	cmp	r3, r4
 8010b10:	bf04      	itt	eq
 8010b12:	2301      	moveq	r3, #1
 8010b14:	61a3      	streq	r3, [r4, #24]
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 f820 	bl	8010b5c <__sfp>
 8010b1c:	6060      	str	r0, [r4, #4]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f000 f81c 	bl	8010b5c <__sfp>
 8010b24:	60a0      	str	r0, [r4, #8]
 8010b26:	4620      	mov	r0, r4
 8010b28:	f000 f818 	bl	8010b5c <__sfp>
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	60e0      	str	r0, [r4, #12]
 8010b30:	2104      	movs	r1, #4
 8010b32:	6860      	ldr	r0, [r4, #4]
 8010b34:	f7ff ff82 	bl	8010a3c <std>
 8010b38:	68a0      	ldr	r0, [r4, #8]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	2109      	movs	r1, #9
 8010b3e:	f7ff ff7d 	bl	8010a3c <std>
 8010b42:	68e0      	ldr	r0, [r4, #12]
 8010b44:	2202      	movs	r2, #2
 8010b46:	2112      	movs	r1, #18
 8010b48:	f7ff ff78 	bl	8010a3c <std>
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	61a3      	str	r3, [r4, #24]
 8010b50:	e7d2      	b.n	8010af8 <__sinit+0xc>
 8010b52:	bf00      	nop
 8010b54:	08012030 	.word	0x08012030
 8010b58:	08010a85 	.word	0x08010a85

08010b5c <__sfp>:
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5e:	4607      	mov	r7, r0
 8010b60:	f7ff ffac 	bl	8010abc <__sfp_lock_acquire>
 8010b64:	4b1e      	ldr	r3, [pc, #120]	; (8010be0 <__sfp+0x84>)
 8010b66:	681e      	ldr	r6, [r3, #0]
 8010b68:	69b3      	ldr	r3, [r6, #24]
 8010b6a:	b913      	cbnz	r3, 8010b72 <__sfp+0x16>
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	f7ff ffbd 	bl	8010aec <__sinit>
 8010b72:	3648      	adds	r6, #72	; 0x48
 8010b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	d503      	bpl.n	8010b84 <__sfp+0x28>
 8010b7c:	6833      	ldr	r3, [r6, #0]
 8010b7e:	b30b      	cbz	r3, 8010bc4 <__sfp+0x68>
 8010b80:	6836      	ldr	r6, [r6, #0]
 8010b82:	e7f7      	b.n	8010b74 <__sfp+0x18>
 8010b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b88:	b9d5      	cbnz	r5, 8010bc0 <__sfp+0x64>
 8010b8a:	4b16      	ldr	r3, [pc, #88]	; (8010be4 <__sfp+0x88>)
 8010b8c:	60e3      	str	r3, [r4, #12]
 8010b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b92:	6665      	str	r5, [r4, #100]	; 0x64
 8010b94:	f000 f85e 	bl	8010c54 <__retarget_lock_init_recursive>
 8010b98:	f7ff ff96 	bl	8010ac8 <__sfp_lock_release>
 8010b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ba4:	6025      	str	r5, [r4, #0]
 8010ba6:	61a5      	str	r5, [r4, #24]
 8010ba8:	2208      	movs	r2, #8
 8010baa:	4629      	mov	r1, r5
 8010bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010bb0:	f7fe fb32 	bl	800f218 <memset>
 8010bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc0:	3468      	adds	r4, #104	; 0x68
 8010bc2:	e7d9      	b.n	8010b78 <__sfp+0x1c>
 8010bc4:	2104      	movs	r1, #4
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	f7ff ff62 	bl	8010a90 <__sfmoreglue>
 8010bcc:	4604      	mov	r4, r0
 8010bce:	6030      	str	r0, [r6, #0]
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d1d5      	bne.n	8010b80 <__sfp+0x24>
 8010bd4:	f7ff ff78 	bl	8010ac8 <__sfp_lock_release>
 8010bd8:	230c      	movs	r3, #12
 8010bda:	603b      	str	r3, [r7, #0]
 8010bdc:	e7ee      	b.n	8010bbc <__sfp+0x60>
 8010bde:	bf00      	nop
 8010be0:	08012030 	.word	0x08012030
 8010be4:	ffff0001 	.word	0xffff0001

08010be8 <fiprintf>:
 8010be8:	b40e      	push	{r1, r2, r3}
 8010bea:	b503      	push	{r0, r1, lr}
 8010bec:	4601      	mov	r1, r0
 8010bee:	ab03      	add	r3, sp, #12
 8010bf0:	4805      	ldr	r0, [pc, #20]	; (8010c08 <fiprintf+0x20>)
 8010bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bf6:	6800      	ldr	r0, [r0, #0]
 8010bf8:	9301      	str	r3, [sp, #4]
 8010bfa:	f000 fc11 	bl	8011420 <_vfiprintf_r>
 8010bfe:	b002      	add	sp, #8
 8010c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c04:	b003      	add	sp, #12
 8010c06:	4770      	bx	lr
 8010c08:	20000188 	.word	0x20000188

08010c0c <_fwalk_reent>:
 8010c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c10:	4606      	mov	r6, r0
 8010c12:	4688      	mov	r8, r1
 8010c14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c18:	2700      	movs	r7, #0
 8010c1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c1e:	f1b9 0901 	subs.w	r9, r9, #1
 8010c22:	d505      	bpl.n	8010c30 <_fwalk_reent+0x24>
 8010c24:	6824      	ldr	r4, [r4, #0]
 8010c26:	2c00      	cmp	r4, #0
 8010c28:	d1f7      	bne.n	8010c1a <_fwalk_reent+0xe>
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c30:	89ab      	ldrh	r3, [r5, #12]
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	d907      	bls.n	8010c46 <_fwalk_reent+0x3a>
 8010c36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	d003      	beq.n	8010c46 <_fwalk_reent+0x3a>
 8010c3e:	4629      	mov	r1, r5
 8010c40:	4630      	mov	r0, r6
 8010c42:	47c0      	blx	r8
 8010c44:	4307      	orrs	r7, r0
 8010c46:	3568      	adds	r5, #104	; 0x68
 8010c48:	e7e9      	b.n	8010c1e <_fwalk_reent+0x12>
	...

08010c4c <_localeconv_r>:
 8010c4c:	4800      	ldr	r0, [pc, #0]	; (8010c50 <_localeconv_r+0x4>)
 8010c4e:	4770      	bx	lr
 8010c50:	200002dc 	.word	0x200002dc

08010c54 <__retarget_lock_init_recursive>:
 8010c54:	4770      	bx	lr

08010c56 <__retarget_lock_acquire_recursive>:
 8010c56:	4770      	bx	lr

08010c58 <__retarget_lock_release_recursive>:
 8010c58:	4770      	bx	lr

08010c5a <__ascii_mbtowc>:
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	b901      	cbnz	r1, 8010c60 <__ascii_mbtowc+0x6>
 8010c5e:	a901      	add	r1, sp, #4
 8010c60:	b142      	cbz	r2, 8010c74 <__ascii_mbtowc+0x1a>
 8010c62:	b14b      	cbz	r3, 8010c78 <__ascii_mbtowc+0x1e>
 8010c64:	7813      	ldrb	r3, [r2, #0]
 8010c66:	600b      	str	r3, [r1, #0]
 8010c68:	7812      	ldrb	r2, [r2, #0]
 8010c6a:	1e10      	subs	r0, r2, #0
 8010c6c:	bf18      	it	ne
 8010c6e:	2001      	movne	r0, #1
 8010c70:	b002      	add	sp, #8
 8010c72:	4770      	bx	lr
 8010c74:	4610      	mov	r0, r2
 8010c76:	e7fb      	b.n	8010c70 <__ascii_mbtowc+0x16>
 8010c78:	f06f 0001 	mvn.w	r0, #1
 8010c7c:	e7f8      	b.n	8010c70 <__ascii_mbtowc+0x16>
	...

08010c80 <__malloc_lock>:
 8010c80:	4801      	ldr	r0, [pc, #4]	; (8010c88 <__malloc_lock+0x8>)
 8010c82:	f7ff bfe8 	b.w	8010c56 <__retarget_lock_acquire_recursive>
 8010c86:	bf00      	nop
 8010c88:	20002914 	.word	0x20002914

08010c8c <__malloc_unlock>:
 8010c8c:	4801      	ldr	r0, [pc, #4]	; (8010c94 <__malloc_unlock+0x8>)
 8010c8e:	f7ff bfe3 	b.w	8010c58 <__retarget_lock_release_recursive>
 8010c92:	bf00      	nop
 8010c94:	20002914 	.word	0x20002914

08010c98 <_Balloc>:
 8010c98:	b570      	push	{r4, r5, r6, lr}
 8010c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	460d      	mov	r5, r1
 8010ca0:	b976      	cbnz	r6, 8010cc0 <_Balloc+0x28>
 8010ca2:	2010      	movs	r0, #16
 8010ca4:	f7fe faa2 	bl	800f1ec <malloc>
 8010ca8:	4602      	mov	r2, r0
 8010caa:	6260      	str	r0, [r4, #36]	; 0x24
 8010cac:	b920      	cbnz	r0, 8010cb8 <_Balloc+0x20>
 8010cae:	4b18      	ldr	r3, [pc, #96]	; (8010d10 <_Balloc+0x78>)
 8010cb0:	4818      	ldr	r0, [pc, #96]	; (8010d14 <_Balloc+0x7c>)
 8010cb2:	2166      	movs	r1, #102	; 0x66
 8010cb4:	f7ff f82a 	bl	800fd0c <__assert_func>
 8010cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cbc:	6006      	str	r6, [r0, #0]
 8010cbe:	60c6      	str	r6, [r0, #12]
 8010cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010cc2:	68f3      	ldr	r3, [r6, #12]
 8010cc4:	b183      	cbz	r3, 8010ce8 <_Balloc+0x50>
 8010cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cc8:	68db      	ldr	r3, [r3, #12]
 8010cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010cce:	b9b8      	cbnz	r0, 8010d00 <_Balloc+0x68>
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8010cd6:	1d72      	adds	r2, r6, #5
 8010cd8:	0092      	lsls	r2, r2, #2
 8010cda:	4620      	mov	r0, r4
 8010cdc:	f000 fb60 	bl	80113a0 <_calloc_r>
 8010ce0:	b160      	cbz	r0, 8010cfc <_Balloc+0x64>
 8010ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ce6:	e00e      	b.n	8010d06 <_Balloc+0x6e>
 8010ce8:	2221      	movs	r2, #33	; 0x21
 8010cea:	2104      	movs	r1, #4
 8010cec:	4620      	mov	r0, r4
 8010cee:	f000 fb57 	bl	80113a0 <_calloc_r>
 8010cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cf4:	60f0      	str	r0, [r6, #12]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1e4      	bne.n	8010cc6 <_Balloc+0x2e>
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	bd70      	pop	{r4, r5, r6, pc}
 8010d00:	6802      	ldr	r2, [r0, #0]
 8010d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d06:	2300      	movs	r3, #0
 8010d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d0c:	e7f7      	b.n	8010cfe <_Balloc+0x66>
 8010d0e:	bf00      	nop
 8010d10:	080121b2 	.word	0x080121b2
 8010d14:	080122a2 	.word	0x080122a2

08010d18 <_Bfree>:
 8010d18:	b570      	push	{r4, r5, r6, lr}
 8010d1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d1c:	4605      	mov	r5, r0
 8010d1e:	460c      	mov	r4, r1
 8010d20:	b976      	cbnz	r6, 8010d40 <_Bfree+0x28>
 8010d22:	2010      	movs	r0, #16
 8010d24:	f7fe fa62 	bl	800f1ec <malloc>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	6268      	str	r0, [r5, #36]	; 0x24
 8010d2c:	b920      	cbnz	r0, 8010d38 <_Bfree+0x20>
 8010d2e:	4b09      	ldr	r3, [pc, #36]	; (8010d54 <_Bfree+0x3c>)
 8010d30:	4809      	ldr	r0, [pc, #36]	; (8010d58 <_Bfree+0x40>)
 8010d32:	218a      	movs	r1, #138	; 0x8a
 8010d34:	f7fe ffea 	bl	800fd0c <__assert_func>
 8010d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d3c:	6006      	str	r6, [r0, #0]
 8010d3e:	60c6      	str	r6, [r0, #12]
 8010d40:	b13c      	cbz	r4, 8010d52 <_Bfree+0x3a>
 8010d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010d44:	6862      	ldr	r2, [r4, #4]
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d4c:	6021      	str	r1, [r4, #0]
 8010d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d52:	bd70      	pop	{r4, r5, r6, pc}
 8010d54:	080121b2 	.word	0x080121b2
 8010d58:	080122a2 	.word	0x080122a2

08010d5c <__multadd>:
 8010d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d60:	690d      	ldr	r5, [r1, #16]
 8010d62:	4607      	mov	r7, r0
 8010d64:	460c      	mov	r4, r1
 8010d66:	461e      	mov	r6, r3
 8010d68:	f101 0c14 	add.w	ip, r1, #20
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8010d72:	b299      	uxth	r1, r3
 8010d74:	fb02 6101 	mla	r1, r2, r1, r6
 8010d78:	0c1e      	lsrs	r6, r3, #16
 8010d7a:	0c0b      	lsrs	r3, r1, #16
 8010d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8010d80:	b289      	uxth	r1, r1
 8010d82:	3001      	adds	r0, #1
 8010d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d88:	4285      	cmp	r5, r0
 8010d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8010d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d92:	dcec      	bgt.n	8010d6e <__multadd+0x12>
 8010d94:	b30e      	cbz	r6, 8010dda <__multadd+0x7e>
 8010d96:	68a3      	ldr	r3, [r4, #8]
 8010d98:	42ab      	cmp	r3, r5
 8010d9a:	dc19      	bgt.n	8010dd0 <__multadd+0x74>
 8010d9c:	6861      	ldr	r1, [r4, #4]
 8010d9e:	4638      	mov	r0, r7
 8010da0:	3101      	adds	r1, #1
 8010da2:	f7ff ff79 	bl	8010c98 <_Balloc>
 8010da6:	4680      	mov	r8, r0
 8010da8:	b928      	cbnz	r0, 8010db6 <__multadd+0x5a>
 8010daa:	4602      	mov	r2, r0
 8010dac:	4b0c      	ldr	r3, [pc, #48]	; (8010de0 <__multadd+0x84>)
 8010dae:	480d      	ldr	r0, [pc, #52]	; (8010de4 <__multadd+0x88>)
 8010db0:	21b5      	movs	r1, #181	; 0xb5
 8010db2:	f7fe ffab 	bl	800fd0c <__assert_func>
 8010db6:	6922      	ldr	r2, [r4, #16]
 8010db8:	3202      	adds	r2, #2
 8010dba:	f104 010c 	add.w	r1, r4, #12
 8010dbe:	0092      	lsls	r2, r2, #2
 8010dc0:	300c      	adds	r0, #12
 8010dc2:	f7fe fa1b 	bl	800f1fc <memcpy>
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	4638      	mov	r0, r7
 8010dca:	f7ff ffa5 	bl	8010d18 <_Bfree>
 8010dce:	4644      	mov	r4, r8
 8010dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010dd4:	3501      	adds	r5, #1
 8010dd6:	615e      	str	r6, [r3, #20]
 8010dd8:	6125      	str	r5, [r4, #16]
 8010dda:	4620      	mov	r0, r4
 8010ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010de0:	08012224 	.word	0x08012224
 8010de4:	080122a2 	.word	0x080122a2

08010de8 <__hi0bits>:
 8010de8:	0c03      	lsrs	r3, r0, #16
 8010dea:	041b      	lsls	r3, r3, #16
 8010dec:	b9d3      	cbnz	r3, 8010e24 <__hi0bits+0x3c>
 8010dee:	0400      	lsls	r0, r0, #16
 8010df0:	2310      	movs	r3, #16
 8010df2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010df6:	bf04      	itt	eq
 8010df8:	0200      	lsleq	r0, r0, #8
 8010dfa:	3308      	addeq	r3, #8
 8010dfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010e00:	bf04      	itt	eq
 8010e02:	0100      	lsleq	r0, r0, #4
 8010e04:	3304      	addeq	r3, #4
 8010e06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010e0a:	bf04      	itt	eq
 8010e0c:	0080      	lsleq	r0, r0, #2
 8010e0e:	3302      	addeq	r3, #2
 8010e10:	2800      	cmp	r0, #0
 8010e12:	db05      	blt.n	8010e20 <__hi0bits+0x38>
 8010e14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010e18:	f103 0301 	add.w	r3, r3, #1
 8010e1c:	bf08      	it	eq
 8010e1e:	2320      	moveq	r3, #32
 8010e20:	4618      	mov	r0, r3
 8010e22:	4770      	bx	lr
 8010e24:	2300      	movs	r3, #0
 8010e26:	e7e4      	b.n	8010df2 <__hi0bits+0xa>

08010e28 <__lo0bits>:
 8010e28:	6803      	ldr	r3, [r0, #0]
 8010e2a:	f013 0207 	ands.w	r2, r3, #7
 8010e2e:	4601      	mov	r1, r0
 8010e30:	d00b      	beq.n	8010e4a <__lo0bits+0x22>
 8010e32:	07da      	lsls	r2, r3, #31
 8010e34:	d423      	bmi.n	8010e7e <__lo0bits+0x56>
 8010e36:	0798      	lsls	r0, r3, #30
 8010e38:	bf49      	itett	mi
 8010e3a:	085b      	lsrmi	r3, r3, #1
 8010e3c:	089b      	lsrpl	r3, r3, #2
 8010e3e:	2001      	movmi	r0, #1
 8010e40:	600b      	strmi	r3, [r1, #0]
 8010e42:	bf5c      	itt	pl
 8010e44:	600b      	strpl	r3, [r1, #0]
 8010e46:	2002      	movpl	r0, #2
 8010e48:	4770      	bx	lr
 8010e4a:	b298      	uxth	r0, r3
 8010e4c:	b9a8      	cbnz	r0, 8010e7a <__lo0bits+0x52>
 8010e4e:	0c1b      	lsrs	r3, r3, #16
 8010e50:	2010      	movs	r0, #16
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	b90a      	cbnz	r2, 8010e5a <__lo0bits+0x32>
 8010e56:	3008      	adds	r0, #8
 8010e58:	0a1b      	lsrs	r3, r3, #8
 8010e5a:	071a      	lsls	r2, r3, #28
 8010e5c:	bf04      	itt	eq
 8010e5e:	091b      	lsreq	r3, r3, #4
 8010e60:	3004      	addeq	r0, #4
 8010e62:	079a      	lsls	r2, r3, #30
 8010e64:	bf04      	itt	eq
 8010e66:	089b      	lsreq	r3, r3, #2
 8010e68:	3002      	addeq	r0, #2
 8010e6a:	07da      	lsls	r2, r3, #31
 8010e6c:	d403      	bmi.n	8010e76 <__lo0bits+0x4e>
 8010e6e:	085b      	lsrs	r3, r3, #1
 8010e70:	f100 0001 	add.w	r0, r0, #1
 8010e74:	d005      	beq.n	8010e82 <__lo0bits+0x5a>
 8010e76:	600b      	str	r3, [r1, #0]
 8010e78:	4770      	bx	lr
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	e7e9      	b.n	8010e52 <__lo0bits+0x2a>
 8010e7e:	2000      	movs	r0, #0
 8010e80:	4770      	bx	lr
 8010e82:	2020      	movs	r0, #32
 8010e84:	4770      	bx	lr
	...

08010e88 <__i2b>:
 8010e88:	b510      	push	{r4, lr}
 8010e8a:	460c      	mov	r4, r1
 8010e8c:	2101      	movs	r1, #1
 8010e8e:	f7ff ff03 	bl	8010c98 <_Balloc>
 8010e92:	4602      	mov	r2, r0
 8010e94:	b928      	cbnz	r0, 8010ea2 <__i2b+0x1a>
 8010e96:	4b05      	ldr	r3, [pc, #20]	; (8010eac <__i2b+0x24>)
 8010e98:	4805      	ldr	r0, [pc, #20]	; (8010eb0 <__i2b+0x28>)
 8010e9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010e9e:	f7fe ff35 	bl	800fd0c <__assert_func>
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	6144      	str	r4, [r0, #20]
 8010ea6:	6103      	str	r3, [r0, #16]
 8010ea8:	bd10      	pop	{r4, pc}
 8010eaa:	bf00      	nop
 8010eac:	08012224 	.word	0x08012224
 8010eb0:	080122a2 	.word	0x080122a2

08010eb4 <__multiply>:
 8010eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb8:	4691      	mov	r9, r2
 8010eba:	690a      	ldr	r2, [r1, #16]
 8010ebc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	bfb8      	it	lt
 8010ec4:	460b      	movlt	r3, r1
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	bfbc      	itt	lt
 8010eca:	464c      	movlt	r4, r9
 8010ecc:	4699      	movlt	r9, r3
 8010ece:	6927      	ldr	r7, [r4, #16]
 8010ed0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ed4:	68a3      	ldr	r3, [r4, #8]
 8010ed6:	6861      	ldr	r1, [r4, #4]
 8010ed8:	eb07 060a 	add.w	r6, r7, sl
 8010edc:	42b3      	cmp	r3, r6
 8010ede:	b085      	sub	sp, #20
 8010ee0:	bfb8      	it	lt
 8010ee2:	3101      	addlt	r1, #1
 8010ee4:	f7ff fed8 	bl	8010c98 <_Balloc>
 8010ee8:	b930      	cbnz	r0, 8010ef8 <__multiply+0x44>
 8010eea:	4602      	mov	r2, r0
 8010eec:	4b44      	ldr	r3, [pc, #272]	; (8011000 <__multiply+0x14c>)
 8010eee:	4845      	ldr	r0, [pc, #276]	; (8011004 <__multiply+0x150>)
 8010ef0:	f240 115d 	movw	r1, #349	; 0x15d
 8010ef4:	f7fe ff0a 	bl	800fd0c <__assert_func>
 8010ef8:	f100 0514 	add.w	r5, r0, #20
 8010efc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010f00:	462b      	mov	r3, r5
 8010f02:	2200      	movs	r2, #0
 8010f04:	4543      	cmp	r3, r8
 8010f06:	d321      	bcc.n	8010f4c <__multiply+0x98>
 8010f08:	f104 0314 	add.w	r3, r4, #20
 8010f0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010f10:	f109 0314 	add.w	r3, r9, #20
 8010f14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010f18:	9202      	str	r2, [sp, #8]
 8010f1a:	1b3a      	subs	r2, r7, r4
 8010f1c:	3a15      	subs	r2, #21
 8010f1e:	f022 0203 	bic.w	r2, r2, #3
 8010f22:	3204      	adds	r2, #4
 8010f24:	f104 0115 	add.w	r1, r4, #21
 8010f28:	428f      	cmp	r7, r1
 8010f2a:	bf38      	it	cc
 8010f2c:	2204      	movcc	r2, #4
 8010f2e:	9201      	str	r2, [sp, #4]
 8010f30:	9a02      	ldr	r2, [sp, #8]
 8010f32:	9303      	str	r3, [sp, #12]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d80c      	bhi.n	8010f52 <__multiply+0x9e>
 8010f38:	2e00      	cmp	r6, #0
 8010f3a:	dd03      	ble.n	8010f44 <__multiply+0x90>
 8010f3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d05a      	beq.n	8010ffa <__multiply+0x146>
 8010f44:	6106      	str	r6, [r0, #16]
 8010f46:	b005      	add	sp, #20
 8010f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4c:	f843 2b04 	str.w	r2, [r3], #4
 8010f50:	e7d8      	b.n	8010f04 <__multiply+0x50>
 8010f52:	f8b3 a000 	ldrh.w	sl, [r3]
 8010f56:	f1ba 0f00 	cmp.w	sl, #0
 8010f5a:	d024      	beq.n	8010fa6 <__multiply+0xf2>
 8010f5c:	f104 0e14 	add.w	lr, r4, #20
 8010f60:	46a9      	mov	r9, r5
 8010f62:	f04f 0c00 	mov.w	ip, #0
 8010f66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010f6a:	f8d9 1000 	ldr.w	r1, [r9]
 8010f6e:	fa1f fb82 	uxth.w	fp, r2
 8010f72:	b289      	uxth	r1, r1
 8010f74:	fb0a 110b 	mla	r1, sl, fp, r1
 8010f78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8010f80:	4461      	add	r1, ip
 8010f82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f86:	fb0a c20b 	mla	r2, sl, fp, ip
 8010f8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010f8e:	b289      	uxth	r1, r1
 8010f90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010f94:	4577      	cmp	r7, lr
 8010f96:	f849 1b04 	str.w	r1, [r9], #4
 8010f9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f9e:	d8e2      	bhi.n	8010f66 <__multiply+0xb2>
 8010fa0:	9a01      	ldr	r2, [sp, #4]
 8010fa2:	f845 c002 	str.w	ip, [r5, r2]
 8010fa6:	9a03      	ldr	r2, [sp, #12]
 8010fa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010fac:	3304      	adds	r3, #4
 8010fae:	f1b9 0f00 	cmp.w	r9, #0
 8010fb2:	d020      	beq.n	8010ff6 <__multiply+0x142>
 8010fb4:	6829      	ldr	r1, [r5, #0]
 8010fb6:	f104 0c14 	add.w	ip, r4, #20
 8010fba:	46ae      	mov	lr, r5
 8010fbc:	f04f 0a00 	mov.w	sl, #0
 8010fc0:	f8bc b000 	ldrh.w	fp, [ip]
 8010fc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010fc8:	fb09 220b 	mla	r2, r9, fp, r2
 8010fcc:	4492      	add	sl, r2
 8010fce:	b289      	uxth	r1, r1
 8010fd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010fd4:	f84e 1b04 	str.w	r1, [lr], #4
 8010fd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010fdc:	f8be 1000 	ldrh.w	r1, [lr]
 8010fe0:	0c12      	lsrs	r2, r2, #16
 8010fe2:	fb09 1102 	mla	r1, r9, r2, r1
 8010fe6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010fea:	4567      	cmp	r7, ip
 8010fec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010ff0:	d8e6      	bhi.n	8010fc0 <__multiply+0x10c>
 8010ff2:	9a01      	ldr	r2, [sp, #4]
 8010ff4:	50a9      	str	r1, [r5, r2]
 8010ff6:	3504      	adds	r5, #4
 8010ff8:	e79a      	b.n	8010f30 <__multiply+0x7c>
 8010ffa:	3e01      	subs	r6, #1
 8010ffc:	e79c      	b.n	8010f38 <__multiply+0x84>
 8010ffe:	bf00      	nop
 8011000:	08012224 	.word	0x08012224
 8011004:	080122a2 	.word	0x080122a2

08011008 <__pow5mult>:
 8011008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801100c:	4615      	mov	r5, r2
 801100e:	f012 0203 	ands.w	r2, r2, #3
 8011012:	4606      	mov	r6, r0
 8011014:	460f      	mov	r7, r1
 8011016:	d007      	beq.n	8011028 <__pow5mult+0x20>
 8011018:	4c25      	ldr	r4, [pc, #148]	; (80110b0 <__pow5mult+0xa8>)
 801101a:	3a01      	subs	r2, #1
 801101c:	2300      	movs	r3, #0
 801101e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011022:	f7ff fe9b 	bl	8010d5c <__multadd>
 8011026:	4607      	mov	r7, r0
 8011028:	10ad      	asrs	r5, r5, #2
 801102a:	d03d      	beq.n	80110a8 <__pow5mult+0xa0>
 801102c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801102e:	b97c      	cbnz	r4, 8011050 <__pow5mult+0x48>
 8011030:	2010      	movs	r0, #16
 8011032:	f7fe f8db 	bl	800f1ec <malloc>
 8011036:	4602      	mov	r2, r0
 8011038:	6270      	str	r0, [r6, #36]	; 0x24
 801103a:	b928      	cbnz	r0, 8011048 <__pow5mult+0x40>
 801103c:	4b1d      	ldr	r3, [pc, #116]	; (80110b4 <__pow5mult+0xac>)
 801103e:	481e      	ldr	r0, [pc, #120]	; (80110b8 <__pow5mult+0xb0>)
 8011040:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011044:	f7fe fe62 	bl	800fd0c <__assert_func>
 8011048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801104c:	6004      	str	r4, [r0, #0]
 801104e:	60c4      	str	r4, [r0, #12]
 8011050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011058:	b94c      	cbnz	r4, 801106e <__pow5mult+0x66>
 801105a:	f240 2171 	movw	r1, #625	; 0x271
 801105e:	4630      	mov	r0, r6
 8011060:	f7ff ff12 	bl	8010e88 <__i2b>
 8011064:	2300      	movs	r3, #0
 8011066:	f8c8 0008 	str.w	r0, [r8, #8]
 801106a:	4604      	mov	r4, r0
 801106c:	6003      	str	r3, [r0, #0]
 801106e:	f04f 0900 	mov.w	r9, #0
 8011072:	07eb      	lsls	r3, r5, #31
 8011074:	d50a      	bpl.n	801108c <__pow5mult+0x84>
 8011076:	4639      	mov	r1, r7
 8011078:	4622      	mov	r2, r4
 801107a:	4630      	mov	r0, r6
 801107c:	f7ff ff1a 	bl	8010eb4 <__multiply>
 8011080:	4639      	mov	r1, r7
 8011082:	4680      	mov	r8, r0
 8011084:	4630      	mov	r0, r6
 8011086:	f7ff fe47 	bl	8010d18 <_Bfree>
 801108a:	4647      	mov	r7, r8
 801108c:	106d      	asrs	r5, r5, #1
 801108e:	d00b      	beq.n	80110a8 <__pow5mult+0xa0>
 8011090:	6820      	ldr	r0, [r4, #0]
 8011092:	b938      	cbnz	r0, 80110a4 <__pow5mult+0x9c>
 8011094:	4622      	mov	r2, r4
 8011096:	4621      	mov	r1, r4
 8011098:	4630      	mov	r0, r6
 801109a:	f7ff ff0b 	bl	8010eb4 <__multiply>
 801109e:	6020      	str	r0, [r4, #0]
 80110a0:	f8c0 9000 	str.w	r9, [r0]
 80110a4:	4604      	mov	r4, r0
 80110a6:	e7e4      	b.n	8011072 <__pow5mult+0x6a>
 80110a8:	4638      	mov	r0, r7
 80110aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ae:	bf00      	nop
 80110b0:	080123f0 	.word	0x080123f0
 80110b4:	080121b2 	.word	0x080121b2
 80110b8:	080122a2 	.word	0x080122a2

080110bc <__lshift>:
 80110bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110c0:	460c      	mov	r4, r1
 80110c2:	6849      	ldr	r1, [r1, #4]
 80110c4:	6923      	ldr	r3, [r4, #16]
 80110c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80110ca:	68a3      	ldr	r3, [r4, #8]
 80110cc:	4607      	mov	r7, r0
 80110ce:	4691      	mov	r9, r2
 80110d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80110d4:	f108 0601 	add.w	r6, r8, #1
 80110d8:	42b3      	cmp	r3, r6
 80110da:	db0b      	blt.n	80110f4 <__lshift+0x38>
 80110dc:	4638      	mov	r0, r7
 80110de:	f7ff fddb 	bl	8010c98 <_Balloc>
 80110e2:	4605      	mov	r5, r0
 80110e4:	b948      	cbnz	r0, 80110fa <__lshift+0x3e>
 80110e6:	4602      	mov	r2, r0
 80110e8:	4b2a      	ldr	r3, [pc, #168]	; (8011194 <__lshift+0xd8>)
 80110ea:	482b      	ldr	r0, [pc, #172]	; (8011198 <__lshift+0xdc>)
 80110ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80110f0:	f7fe fe0c 	bl	800fd0c <__assert_func>
 80110f4:	3101      	adds	r1, #1
 80110f6:	005b      	lsls	r3, r3, #1
 80110f8:	e7ee      	b.n	80110d8 <__lshift+0x1c>
 80110fa:	2300      	movs	r3, #0
 80110fc:	f100 0114 	add.w	r1, r0, #20
 8011100:	f100 0210 	add.w	r2, r0, #16
 8011104:	4618      	mov	r0, r3
 8011106:	4553      	cmp	r3, sl
 8011108:	db37      	blt.n	801117a <__lshift+0xbe>
 801110a:	6920      	ldr	r0, [r4, #16]
 801110c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011110:	f104 0314 	add.w	r3, r4, #20
 8011114:	f019 091f 	ands.w	r9, r9, #31
 8011118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801111c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011120:	d02f      	beq.n	8011182 <__lshift+0xc6>
 8011122:	f1c9 0e20 	rsb	lr, r9, #32
 8011126:	468a      	mov	sl, r1
 8011128:	f04f 0c00 	mov.w	ip, #0
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	fa02 f209 	lsl.w	r2, r2, r9
 8011132:	ea42 020c 	orr.w	r2, r2, ip
 8011136:	f84a 2b04 	str.w	r2, [sl], #4
 801113a:	f853 2b04 	ldr.w	r2, [r3], #4
 801113e:	4298      	cmp	r0, r3
 8011140:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011144:	d8f2      	bhi.n	801112c <__lshift+0x70>
 8011146:	1b03      	subs	r3, r0, r4
 8011148:	3b15      	subs	r3, #21
 801114a:	f023 0303 	bic.w	r3, r3, #3
 801114e:	3304      	adds	r3, #4
 8011150:	f104 0215 	add.w	r2, r4, #21
 8011154:	4290      	cmp	r0, r2
 8011156:	bf38      	it	cc
 8011158:	2304      	movcc	r3, #4
 801115a:	f841 c003 	str.w	ip, [r1, r3]
 801115e:	f1bc 0f00 	cmp.w	ip, #0
 8011162:	d001      	beq.n	8011168 <__lshift+0xac>
 8011164:	f108 0602 	add.w	r6, r8, #2
 8011168:	3e01      	subs	r6, #1
 801116a:	4638      	mov	r0, r7
 801116c:	612e      	str	r6, [r5, #16]
 801116e:	4621      	mov	r1, r4
 8011170:	f7ff fdd2 	bl	8010d18 <_Bfree>
 8011174:	4628      	mov	r0, r5
 8011176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801117a:	f842 0f04 	str.w	r0, [r2, #4]!
 801117e:	3301      	adds	r3, #1
 8011180:	e7c1      	b.n	8011106 <__lshift+0x4a>
 8011182:	3904      	subs	r1, #4
 8011184:	f853 2b04 	ldr.w	r2, [r3], #4
 8011188:	f841 2f04 	str.w	r2, [r1, #4]!
 801118c:	4298      	cmp	r0, r3
 801118e:	d8f9      	bhi.n	8011184 <__lshift+0xc8>
 8011190:	e7ea      	b.n	8011168 <__lshift+0xac>
 8011192:	bf00      	nop
 8011194:	08012224 	.word	0x08012224
 8011198:	080122a2 	.word	0x080122a2

0801119c <__mcmp>:
 801119c:	b530      	push	{r4, r5, lr}
 801119e:	6902      	ldr	r2, [r0, #16]
 80111a0:	690c      	ldr	r4, [r1, #16]
 80111a2:	1b12      	subs	r2, r2, r4
 80111a4:	d10e      	bne.n	80111c4 <__mcmp+0x28>
 80111a6:	f100 0314 	add.w	r3, r0, #20
 80111aa:	3114      	adds	r1, #20
 80111ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80111b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80111b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80111b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80111bc:	42a5      	cmp	r5, r4
 80111be:	d003      	beq.n	80111c8 <__mcmp+0x2c>
 80111c0:	d305      	bcc.n	80111ce <__mcmp+0x32>
 80111c2:	2201      	movs	r2, #1
 80111c4:	4610      	mov	r0, r2
 80111c6:	bd30      	pop	{r4, r5, pc}
 80111c8:	4283      	cmp	r3, r0
 80111ca:	d3f3      	bcc.n	80111b4 <__mcmp+0x18>
 80111cc:	e7fa      	b.n	80111c4 <__mcmp+0x28>
 80111ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111d2:	e7f7      	b.n	80111c4 <__mcmp+0x28>

080111d4 <__mdiff>:
 80111d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d8:	460c      	mov	r4, r1
 80111da:	4606      	mov	r6, r0
 80111dc:	4611      	mov	r1, r2
 80111de:	4620      	mov	r0, r4
 80111e0:	4690      	mov	r8, r2
 80111e2:	f7ff ffdb 	bl	801119c <__mcmp>
 80111e6:	1e05      	subs	r5, r0, #0
 80111e8:	d110      	bne.n	801120c <__mdiff+0x38>
 80111ea:	4629      	mov	r1, r5
 80111ec:	4630      	mov	r0, r6
 80111ee:	f7ff fd53 	bl	8010c98 <_Balloc>
 80111f2:	b930      	cbnz	r0, 8011202 <__mdiff+0x2e>
 80111f4:	4b3a      	ldr	r3, [pc, #232]	; (80112e0 <__mdiff+0x10c>)
 80111f6:	4602      	mov	r2, r0
 80111f8:	f240 2132 	movw	r1, #562	; 0x232
 80111fc:	4839      	ldr	r0, [pc, #228]	; (80112e4 <__mdiff+0x110>)
 80111fe:	f7fe fd85 	bl	800fd0c <__assert_func>
 8011202:	2301      	movs	r3, #1
 8011204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120c:	bfa4      	itt	ge
 801120e:	4643      	movge	r3, r8
 8011210:	46a0      	movge	r8, r4
 8011212:	4630      	mov	r0, r6
 8011214:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011218:	bfa6      	itte	ge
 801121a:	461c      	movge	r4, r3
 801121c:	2500      	movge	r5, #0
 801121e:	2501      	movlt	r5, #1
 8011220:	f7ff fd3a 	bl	8010c98 <_Balloc>
 8011224:	b920      	cbnz	r0, 8011230 <__mdiff+0x5c>
 8011226:	4b2e      	ldr	r3, [pc, #184]	; (80112e0 <__mdiff+0x10c>)
 8011228:	4602      	mov	r2, r0
 801122a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801122e:	e7e5      	b.n	80111fc <__mdiff+0x28>
 8011230:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011234:	6926      	ldr	r6, [r4, #16]
 8011236:	60c5      	str	r5, [r0, #12]
 8011238:	f104 0914 	add.w	r9, r4, #20
 801123c:	f108 0514 	add.w	r5, r8, #20
 8011240:	f100 0e14 	add.w	lr, r0, #20
 8011244:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011248:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801124c:	f108 0210 	add.w	r2, r8, #16
 8011250:	46f2      	mov	sl, lr
 8011252:	2100      	movs	r1, #0
 8011254:	f859 3b04 	ldr.w	r3, [r9], #4
 8011258:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801125c:	fa1f f883 	uxth.w	r8, r3
 8011260:	fa11 f18b 	uxtah	r1, r1, fp
 8011264:	0c1b      	lsrs	r3, r3, #16
 8011266:	eba1 0808 	sub.w	r8, r1, r8
 801126a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801126e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011272:	fa1f f888 	uxth.w	r8, r8
 8011276:	1419      	asrs	r1, r3, #16
 8011278:	454e      	cmp	r6, r9
 801127a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801127e:	f84a 3b04 	str.w	r3, [sl], #4
 8011282:	d8e7      	bhi.n	8011254 <__mdiff+0x80>
 8011284:	1b33      	subs	r3, r6, r4
 8011286:	3b15      	subs	r3, #21
 8011288:	f023 0303 	bic.w	r3, r3, #3
 801128c:	3304      	adds	r3, #4
 801128e:	3415      	adds	r4, #21
 8011290:	42a6      	cmp	r6, r4
 8011292:	bf38      	it	cc
 8011294:	2304      	movcc	r3, #4
 8011296:	441d      	add	r5, r3
 8011298:	4473      	add	r3, lr
 801129a:	469e      	mov	lr, r3
 801129c:	462e      	mov	r6, r5
 801129e:	4566      	cmp	r6, ip
 80112a0:	d30e      	bcc.n	80112c0 <__mdiff+0xec>
 80112a2:	f10c 0203 	add.w	r2, ip, #3
 80112a6:	1b52      	subs	r2, r2, r5
 80112a8:	f022 0203 	bic.w	r2, r2, #3
 80112ac:	3d03      	subs	r5, #3
 80112ae:	45ac      	cmp	ip, r5
 80112b0:	bf38      	it	cc
 80112b2:	2200      	movcc	r2, #0
 80112b4:	441a      	add	r2, r3
 80112b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80112ba:	b17b      	cbz	r3, 80112dc <__mdiff+0x108>
 80112bc:	6107      	str	r7, [r0, #16]
 80112be:	e7a3      	b.n	8011208 <__mdiff+0x34>
 80112c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80112c4:	fa11 f288 	uxtah	r2, r1, r8
 80112c8:	1414      	asrs	r4, r2, #16
 80112ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80112ce:	b292      	uxth	r2, r2
 80112d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80112d4:	f84e 2b04 	str.w	r2, [lr], #4
 80112d8:	1421      	asrs	r1, r4, #16
 80112da:	e7e0      	b.n	801129e <__mdiff+0xca>
 80112dc:	3f01      	subs	r7, #1
 80112de:	e7ea      	b.n	80112b6 <__mdiff+0xe2>
 80112e0:	08012224 	.word	0x08012224
 80112e4:	080122a2 	.word	0x080122a2

080112e8 <__d2b>:
 80112e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80112ec:	4689      	mov	r9, r1
 80112ee:	2101      	movs	r1, #1
 80112f0:	ec57 6b10 	vmov	r6, r7, d0
 80112f4:	4690      	mov	r8, r2
 80112f6:	f7ff fccf 	bl	8010c98 <_Balloc>
 80112fa:	4604      	mov	r4, r0
 80112fc:	b930      	cbnz	r0, 801130c <__d2b+0x24>
 80112fe:	4602      	mov	r2, r0
 8011300:	4b25      	ldr	r3, [pc, #148]	; (8011398 <__d2b+0xb0>)
 8011302:	4826      	ldr	r0, [pc, #152]	; (801139c <__d2b+0xb4>)
 8011304:	f240 310a 	movw	r1, #778	; 0x30a
 8011308:	f7fe fd00 	bl	800fd0c <__assert_func>
 801130c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011314:	bb35      	cbnz	r5, 8011364 <__d2b+0x7c>
 8011316:	2e00      	cmp	r6, #0
 8011318:	9301      	str	r3, [sp, #4]
 801131a:	d028      	beq.n	801136e <__d2b+0x86>
 801131c:	4668      	mov	r0, sp
 801131e:	9600      	str	r6, [sp, #0]
 8011320:	f7ff fd82 	bl	8010e28 <__lo0bits>
 8011324:	9900      	ldr	r1, [sp, #0]
 8011326:	b300      	cbz	r0, 801136a <__d2b+0x82>
 8011328:	9a01      	ldr	r2, [sp, #4]
 801132a:	f1c0 0320 	rsb	r3, r0, #32
 801132e:	fa02 f303 	lsl.w	r3, r2, r3
 8011332:	430b      	orrs	r3, r1
 8011334:	40c2      	lsrs	r2, r0
 8011336:	6163      	str	r3, [r4, #20]
 8011338:	9201      	str	r2, [sp, #4]
 801133a:	9b01      	ldr	r3, [sp, #4]
 801133c:	61a3      	str	r3, [r4, #24]
 801133e:	2b00      	cmp	r3, #0
 8011340:	bf14      	ite	ne
 8011342:	2202      	movne	r2, #2
 8011344:	2201      	moveq	r2, #1
 8011346:	6122      	str	r2, [r4, #16]
 8011348:	b1d5      	cbz	r5, 8011380 <__d2b+0x98>
 801134a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801134e:	4405      	add	r5, r0
 8011350:	f8c9 5000 	str.w	r5, [r9]
 8011354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011358:	f8c8 0000 	str.w	r0, [r8]
 801135c:	4620      	mov	r0, r4
 801135e:	b003      	add	sp, #12
 8011360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011368:	e7d5      	b.n	8011316 <__d2b+0x2e>
 801136a:	6161      	str	r1, [r4, #20]
 801136c:	e7e5      	b.n	801133a <__d2b+0x52>
 801136e:	a801      	add	r0, sp, #4
 8011370:	f7ff fd5a 	bl	8010e28 <__lo0bits>
 8011374:	9b01      	ldr	r3, [sp, #4]
 8011376:	6163      	str	r3, [r4, #20]
 8011378:	2201      	movs	r2, #1
 801137a:	6122      	str	r2, [r4, #16]
 801137c:	3020      	adds	r0, #32
 801137e:	e7e3      	b.n	8011348 <__d2b+0x60>
 8011380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011388:	f8c9 0000 	str.w	r0, [r9]
 801138c:	6918      	ldr	r0, [r3, #16]
 801138e:	f7ff fd2b 	bl	8010de8 <__hi0bits>
 8011392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011396:	e7df      	b.n	8011358 <__d2b+0x70>
 8011398:	08012224 	.word	0x08012224
 801139c:	080122a2 	.word	0x080122a2

080113a0 <_calloc_r>:
 80113a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80113a2:	fba1 2402 	umull	r2, r4, r1, r2
 80113a6:	b94c      	cbnz	r4, 80113bc <_calloc_r+0x1c>
 80113a8:	4611      	mov	r1, r2
 80113aa:	9201      	str	r2, [sp, #4]
 80113ac:	f7fd ffa8 	bl	800f300 <_malloc_r>
 80113b0:	9a01      	ldr	r2, [sp, #4]
 80113b2:	4605      	mov	r5, r0
 80113b4:	b930      	cbnz	r0, 80113c4 <_calloc_r+0x24>
 80113b6:	4628      	mov	r0, r5
 80113b8:	b003      	add	sp, #12
 80113ba:	bd30      	pop	{r4, r5, pc}
 80113bc:	220c      	movs	r2, #12
 80113be:	6002      	str	r2, [r0, #0]
 80113c0:	2500      	movs	r5, #0
 80113c2:	e7f8      	b.n	80113b6 <_calloc_r+0x16>
 80113c4:	4621      	mov	r1, r4
 80113c6:	f7fd ff27 	bl	800f218 <memset>
 80113ca:	e7f4      	b.n	80113b6 <_calloc_r+0x16>

080113cc <__sfputc_r>:
 80113cc:	6893      	ldr	r3, [r2, #8]
 80113ce:	3b01      	subs	r3, #1
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	b410      	push	{r4}
 80113d4:	6093      	str	r3, [r2, #8]
 80113d6:	da08      	bge.n	80113ea <__sfputc_r+0x1e>
 80113d8:	6994      	ldr	r4, [r2, #24]
 80113da:	42a3      	cmp	r3, r4
 80113dc:	db01      	blt.n	80113e2 <__sfputc_r+0x16>
 80113de:	290a      	cmp	r1, #10
 80113e0:	d103      	bne.n	80113ea <__sfputc_r+0x1e>
 80113e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e6:	f000 b98f 	b.w	8011708 <__swbuf_r>
 80113ea:	6813      	ldr	r3, [r2, #0]
 80113ec:	1c58      	adds	r0, r3, #1
 80113ee:	6010      	str	r0, [r2, #0]
 80113f0:	7019      	strb	r1, [r3, #0]
 80113f2:	4608      	mov	r0, r1
 80113f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113f8:	4770      	bx	lr

080113fa <__sfputs_r>:
 80113fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fc:	4606      	mov	r6, r0
 80113fe:	460f      	mov	r7, r1
 8011400:	4614      	mov	r4, r2
 8011402:	18d5      	adds	r5, r2, r3
 8011404:	42ac      	cmp	r4, r5
 8011406:	d101      	bne.n	801140c <__sfputs_r+0x12>
 8011408:	2000      	movs	r0, #0
 801140a:	e007      	b.n	801141c <__sfputs_r+0x22>
 801140c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011410:	463a      	mov	r2, r7
 8011412:	4630      	mov	r0, r6
 8011414:	f7ff ffda 	bl	80113cc <__sfputc_r>
 8011418:	1c43      	adds	r3, r0, #1
 801141a:	d1f3      	bne.n	8011404 <__sfputs_r+0xa>
 801141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011420 <_vfiprintf_r>:
 8011420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011424:	460d      	mov	r5, r1
 8011426:	b09d      	sub	sp, #116	; 0x74
 8011428:	4614      	mov	r4, r2
 801142a:	4698      	mov	r8, r3
 801142c:	4606      	mov	r6, r0
 801142e:	b118      	cbz	r0, 8011438 <_vfiprintf_r+0x18>
 8011430:	6983      	ldr	r3, [r0, #24]
 8011432:	b90b      	cbnz	r3, 8011438 <_vfiprintf_r+0x18>
 8011434:	f7ff fb5a 	bl	8010aec <__sinit>
 8011438:	4b89      	ldr	r3, [pc, #548]	; (8011660 <_vfiprintf_r+0x240>)
 801143a:	429d      	cmp	r5, r3
 801143c:	d11b      	bne.n	8011476 <_vfiprintf_r+0x56>
 801143e:	6875      	ldr	r5, [r6, #4]
 8011440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011442:	07d9      	lsls	r1, r3, #31
 8011444:	d405      	bmi.n	8011452 <_vfiprintf_r+0x32>
 8011446:	89ab      	ldrh	r3, [r5, #12]
 8011448:	059a      	lsls	r2, r3, #22
 801144a:	d402      	bmi.n	8011452 <_vfiprintf_r+0x32>
 801144c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801144e:	f7ff fc02 	bl	8010c56 <__retarget_lock_acquire_recursive>
 8011452:	89ab      	ldrh	r3, [r5, #12]
 8011454:	071b      	lsls	r3, r3, #28
 8011456:	d501      	bpl.n	801145c <_vfiprintf_r+0x3c>
 8011458:	692b      	ldr	r3, [r5, #16]
 801145a:	b9eb      	cbnz	r3, 8011498 <_vfiprintf_r+0x78>
 801145c:	4629      	mov	r1, r5
 801145e:	4630      	mov	r0, r6
 8011460:	f000 f9c4 	bl	80117ec <__swsetup_r>
 8011464:	b1c0      	cbz	r0, 8011498 <_vfiprintf_r+0x78>
 8011466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011468:	07dc      	lsls	r4, r3, #31
 801146a:	d50e      	bpl.n	801148a <_vfiprintf_r+0x6a>
 801146c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011470:	b01d      	add	sp, #116	; 0x74
 8011472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011476:	4b7b      	ldr	r3, [pc, #492]	; (8011664 <_vfiprintf_r+0x244>)
 8011478:	429d      	cmp	r5, r3
 801147a:	d101      	bne.n	8011480 <_vfiprintf_r+0x60>
 801147c:	68b5      	ldr	r5, [r6, #8]
 801147e:	e7df      	b.n	8011440 <_vfiprintf_r+0x20>
 8011480:	4b79      	ldr	r3, [pc, #484]	; (8011668 <_vfiprintf_r+0x248>)
 8011482:	429d      	cmp	r5, r3
 8011484:	bf08      	it	eq
 8011486:	68f5      	ldreq	r5, [r6, #12]
 8011488:	e7da      	b.n	8011440 <_vfiprintf_r+0x20>
 801148a:	89ab      	ldrh	r3, [r5, #12]
 801148c:	0598      	lsls	r0, r3, #22
 801148e:	d4ed      	bmi.n	801146c <_vfiprintf_r+0x4c>
 8011490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011492:	f7ff fbe1 	bl	8010c58 <__retarget_lock_release_recursive>
 8011496:	e7e9      	b.n	801146c <_vfiprintf_r+0x4c>
 8011498:	2300      	movs	r3, #0
 801149a:	9309      	str	r3, [sp, #36]	; 0x24
 801149c:	2320      	movs	r3, #32
 801149e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80114a6:	2330      	movs	r3, #48	; 0x30
 80114a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801166c <_vfiprintf_r+0x24c>
 80114ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114b0:	f04f 0901 	mov.w	r9, #1
 80114b4:	4623      	mov	r3, r4
 80114b6:	469a      	mov	sl, r3
 80114b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114bc:	b10a      	cbz	r2, 80114c2 <_vfiprintf_r+0xa2>
 80114be:	2a25      	cmp	r2, #37	; 0x25
 80114c0:	d1f9      	bne.n	80114b6 <_vfiprintf_r+0x96>
 80114c2:	ebba 0b04 	subs.w	fp, sl, r4
 80114c6:	d00b      	beq.n	80114e0 <_vfiprintf_r+0xc0>
 80114c8:	465b      	mov	r3, fp
 80114ca:	4622      	mov	r2, r4
 80114cc:	4629      	mov	r1, r5
 80114ce:	4630      	mov	r0, r6
 80114d0:	f7ff ff93 	bl	80113fa <__sfputs_r>
 80114d4:	3001      	adds	r0, #1
 80114d6:	f000 80aa 	beq.w	801162e <_vfiprintf_r+0x20e>
 80114da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114dc:	445a      	add	r2, fp
 80114de:	9209      	str	r2, [sp, #36]	; 0x24
 80114e0:	f89a 3000 	ldrb.w	r3, [sl]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	f000 80a2 	beq.w	801162e <_vfiprintf_r+0x20e>
 80114ea:	2300      	movs	r3, #0
 80114ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114f4:	f10a 0a01 	add.w	sl, sl, #1
 80114f8:	9304      	str	r3, [sp, #16]
 80114fa:	9307      	str	r3, [sp, #28]
 80114fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011500:	931a      	str	r3, [sp, #104]	; 0x68
 8011502:	4654      	mov	r4, sl
 8011504:	2205      	movs	r2, #5
 8011506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801150a:	4858      	ldr	r0, [pc, #352]	; (801166c <_vfiprintf_r+0x24c>)
 801150c:	f7ee fe80 	bl	8000210 <memchr>
 8011510:	9a04      	ldr	r2, [sp, #16]
 8011512:	b9d8      	cbnz	r0, 801154c <_vfiprintf_r+0x12c>
 8011514:	06d1      	lsls	r1, r2, #27
 8011516:	bf44      	itt	mi
 8011518:	2320      	movmi	r3, #32
 801151a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801151e:	0713      	lsls	r3, r2, #28
 8011520:	bf44      	itt	mi
 8011522:	232b      	movmi	r3, #43	; 0x2b
 8011524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011528:	f89a 3000 	ldrb.w	r3, [sl]
 801152c:	2b2a      	cmp	r3, #42	; 0x2a
 801152e:	d015      	beq.n	801155c <_vfiprintf_r+0x13c>
 8011530:	9a07      	ldr	r2, [sp, #28]
 8011532:	4654      	mov	r4, sl
 8011534:	2000      	movs	r0, #0
 8011536:	f04f 0c0a 	mov.w	ip, #10
 801153a:	4621      	mov	r1, r4
 801153c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011540:	3b30      	subs	r3, #48	; 0x30
 8011542:	2b09      	cmp	r3, #9
 8011544:	d94e      	bls.n	80115e4 <_vfiprintf_r+0x1c4>
 8011546:	b1b0      	cbz	r0, 8011576 <_vfiprintf_r+0x156>
 8011548:	9207      	str	r2, [sp, #28]
 801154a:	e014      	b.n	8011576 <_vfiprintf_r+0x156>
 801154c:	eba0 0308 	sub.w	r3, r0, r8
 8011550:	fa09 f303 	lsl.w	r3, r9, r3
 8011554:	4313      	orrs	r3, r2
 8011556:	9304      	str	r3, [sp, #16]
 8011558:	46a2      	mov	sl, r4
 801155a:	e7d2      	b.n	8011502 <_vfiprintf_r+0xe2>
 801155c:	9b03      	ldr	r3, [sp, #12]
 801155e:	1d19      	adds	r1, r3, #4
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	9103      	str	r1, [sp, #12]
 8011564:	2b00      	cmp	r3, #0
 8011566:	bfbb      	ittet	lt
 8011568:	425b      	neglt	r3, r3
 801156a:	f042 0202 	orrlt.w	r2, r2, #2
 801156e:	9307      	strge	r3, [sp, #28]
 8011570:	9307      	strlt	r3, [sp, #28]
 8011572:	bfb8      	it	lt
 8011574:	9204      	strlt	r2, [sp, #16]
 8011576:	7823      	ldrb	r3, [r4, #0]
 8011578:	2b2e      	cmp	r3, #46	; 0x2e
 801157a:	d10c      	bne.n	8011596 <_vfiprintf_r+0x176>
 801157c:	7863      	ldrb	r3, [r4, #1]
 801157e:	2b2a      	cmp	r3, #42	; 0x2a
 8011580:	d135      	bne.n	80115ee <_vfiprintf_r+0x1ce>
 8011582:	9b03      	ldr	r3, [sp, #12]
 8011584:	1d1a      	adds	r2, r3, #4
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	9203      	str	r2, [sp, #12]
 801158a:	2b00      	cmp	r3, #0
 801158c:	bfb8      	it	lt
 801158e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011592:	3402      	adds	r4, #2
 8011594:	9305      	str	r3, [sp, #20]
 8011596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801167c <_vfiprintf_r+0x25c>
 801159a:	7821      	ldrb	r1, [r4, #0]
 801159c:	2203      	movs	r2, #3
 801159e:	4650      	mov	r0, sl
 80115a0:	f7ee fe36 	bl	8000210 <memchr>
 80115a4:	b140      	cbz	r0, 80115b8 <_vfiprintf_r+0x198>
 80115a6:	2340      	movs	r3, #64	; 0x40
 80115a8:	eba0 000a 	sub.w	r0, r0, sl
 80115ac:	fa03 f000 	lsl.w	r0, r3, r0
 80115b0:	9b04      	ldr	r3, [sp, #16]
 80115b2:	4303      	orrs	r3, r0
 80115b4:	3401      	adds	r4, #1
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115bc:	482c      	ldr	r0, [pc, #176]	; (8011670 <_vfiprintf_r+0x250>)
 80115be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115c2:	2206      	movs	r2, #6
 80115c4:	f7ee fe24 	bl	8000210 <memchr>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d03f      	beq.n	801164c <_vfiprintf_r+0x22c>
 80115cc:	4b29      	ldr	r3, [pc, #164]	; (8011674 <_vfiprintf_r+0x254>)
 80115ce:	bb1b      	cbnz	r3, 8011618 <_vfiprintf_r+0x1f8>
 80115d0:	9b03      	ldr	r3, [sp, #12]
 80115d2:	3307      	adds	r3, #7
 80115d4:	f023 0307 	bic.w	r3, r3, #7
 80115d8:	3308      	adds	r3, #8
 80115da:	9303      	str	r3, [sp, #12]
 80115dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115de:	443b      	add	r3, r7
 80115e0:	9309      	str	r3, [sp, #36]	; 0x24
 80115e2:	e767      	b.n	80114b4 <_vfiprintf_r+0x94>
 80115e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80115e8:	460c      	mov	r4, r1
 80115ea:	2001      	movs	r0, #1
 80115ec:	e7a5      	b.n	801153a <_vfiprintf_r+0x11a>
 80115ee:	2300      	movs	r3, #0
 80115f0:	3401      	adds	r4, #1
 80115f2:	9305      	str	r3, [sp, #20]
 80115f4:	4619      	mov	r1, r3
 80115f6:	f04f 0c0a 	mov.w	ip, #10
 80115fa:	4620      	mov	r0, r4
 80115fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011600:	3a30      	subs	r2, #48	; 0x30
 8011602:	2a09      	cmp	r2, #9
 8011604:	d903      	bls.n	801160e <_vfiprintf_r+0x1ee>
 8011606:	2b00      	cmp	r3, #0
 8011608:	d0c5      	beq.n	8011596 <_vfiprintf_r+0x176>
 801160a:	9105      	str	r1, [sp, #20]
 801160c:	e7c3      	b.n	8011596 <_vfiprintf_r+0x176>
 801160e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011612:	4604      	mov	r4, r0
 8011614:	2301      	movs	r3, #1
 8011616:	e7f0      	b.n	80115fa <_vfiprintf_r+0x1da>
 8011618:	ab03      	add	r3, sp, #12
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	462a      	mov	r2, r5
 801161e:	4b16      	ldr	r3, [pc, #88]	; (8011678 <_vfiprintf_r+0x258>)
 8011620:	a904      	add	r1, sp, #16
 8011622:	4630      	mov	r0, r6
 8011624:	f7fd ff80 	bl	800f528 <_printf_float>
 8011628:	4607      	mov	r7, r0
 801162a:	1c78      	adds	r0, r7, #1
 801162c:	d1d6      	bne.n	80115dc <_vfiprintf_r+0x1bc>
 801162e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011630:	07d9      	lsls	r1, r3, #31
 8011632:	d405      	bmi.n	8011640 <_vfiprintf_r+0x220>
 8011634:	89ab      	ldrh	r3, [r5, #12]
 8011636:	059a      	lsls	r2, r3, #22
 8011638:	d402      	bmi.n	8011640 <_vfiprintf_r+0x220>
 801163a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801163c:	f7ff fb0c 	bl	8010c58 <__retarget_lock_release_recursive>
 8011640:	89ab      	ldrh	r3, [r5, #12]
 8011642:	065b      	lsls	r3, r3, #25
 8011644:	f53f af12 	bmi.w	801146c <_vfiprintf_r+0x4c>
 8011648:	9809      	ldr	r0, [sp, #36]	; 0x24
 801164a:	e711      	b.n	8011470 <_vfiprintf_r+0x50>
 801164c:	ab03      	add	r3, sp, #12
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	462a      	mov	r2, r5
 8011652:	4b09      	ldr	r3, [pc, #36]	; (8011678 <_vfiprintf_r+0x258>)
 8011654:	a904      	add	r1, sp, #16
 8011656:	4630      	mov	r0, r6
 8011658:	f7fe fa0a 	bl	800fa70 <_printf_i>
 801165c:	e7e4      	b.n	8011628 <_vfiprintf_r+0x208>
 801165e:	bf00      	nop
 8011660:	08012258 	.word	0x08012258
 8011664:	08012278 	.word	0x08012278
 8011668:	08012238 	.word	0x08012238
 801166c:	080123fc 	.word	0x080123fc
 8011670:	08012406 	.word	0x08012406
 8011674:	0800f529 	.word	0x0800f529
 8011678:	080113fb 	.word	0x080113fb
 801167c:	08012402 	.word	0x08012402

08011680 <__sread>:
 8011680:	b510      	push	{r4, lr}
 8011682:	460c      	mov	r4, r1
 8011684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011688:	f000 fa70 	bl	8011b6c <_read_r>
 801168c:	2800      	cmp	r0, #0
 801168e:	bfab      	itete	ge
 8011690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011692:	89a3      	ldrhlt	r3, [r4, #12]
 8011694:	181b      	addge	r3, r3, r0
 8011696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801169a:	bfac      	ite	ge
 801169c:	6563      	strge	r3, [r4, #84]	; 0x54
 801169e:	81a3      	strhlt	r3, [r4, #12]
 80116a0:	bd10      	pop	{r4, pc}

080116a2 <__swrite>:
 80116a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116a6:	461f      	mov	r7, r3
 80116a8:	898b      	ldrh	r3, [r1, #12]
 80116aa:	05db      	lsls	r3, r3, #23
 80116ac:	4605      	mov	r5, r0
 80116ae:	460c      	mov	r4, r1
 80116b0:	4616      	mov	r6, r2
 80116b2:	d505      	bpl.n	80116c0 <__swrite+0x1e>
 80116b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116b8:	2302      	movs	r3, #2
 80116ba:	2200      	movs	r2, #0
 80116bc:	f000 f9de 	bl	8011a7c <_lseek_r>
 80116c0:	89a3      	ldrh	r3, [r4, #12]
 80116c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116ca:	81a3      	strh	r3, [r4, #12]
 80116cc:	4632      	mov	r2, r6
 80116ce:	463b      	mov	r3, r7
 80116d0:	4628      	mov	r0, r5
 80116d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116d6:	f000 b877 	b.w	80117c8 <_write_r>

080116da <__sseek>:
 80116da:	b510      	push	{r4, lr}
 80116dc:	460c      	mov	r4, r1
 80116de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116e2:	f000 f9cb 	bl	8011a7c <_lseek_r>
 80116e6:	1c43      	adds	r3, r0, #1
 80116e8:	89a3      	ldrh	r3, [r4, #12]
 80116ea:	bf15      	itete	ne
 80116ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80116ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80116f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80116f6:	81a3      	strheq	r3, [r4, #12]
 80116f8:	bf18      	it	ne
 80116fa:	81a3      	strhne	r3, [r4, #12]
 80116fc:	bd10      	pop	{r4, pc}

080116fe <__sclose>:
 80116fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011702:	f000 b8e9 	b.w	80118d8 <_close_r>
	...

08011708 <__swbuf_r>:
 8011708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170a:	460e      	mov	r6, r1
 801170c:	4614      	mov	r4, r2
 801170e:	4605      	mov	r5, r0
 8011710:	b118      	cbz	r0, 801171a <__swbuf_r+0x12>
 8011712:	6983      	ldr	r3, [r0, #24]
 8011714:	b90b      	cbnz	r3, 801171a <__swbuf_r+0x12>
 8011716:	f7ff f9e9 	bl	8010aec <__sinit>
 801171a:	4b21      	ldr	r3, [pc, #132]	; (80117a0 <__swbuf_r+0x98>)
 801171c:	429c      	cmp	r4, r3
 801171e:	d12b      	bne.n	8011778 <__swbuf_r+0x70>
 8011720:	686c      	ldr	r4, [r5, #4]
 8011722:	69a3      	ldr	r3, [r4, #24]
 8011724:	60a3      	str	r3, [r4, #8]
 8011726:	89a3      	ldrh	r3, [r4, #12]
 8011728:	071a      	lsls	r2, r3, #28
 801172a:	d52f      	bpl.n	801178c <__swbuf_r+0x84>
 801172c:	6923      	ldr	r3, [r4, #16]
 801172e:	b36b      	cbz	r3, 801178c <__swbuf_r+0x84>
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	6820      	ldr	r0, [r4, #0]
 8011734:	1ac0      	subs	r0, r0, r3
 8011736:	6963      	ldr	r3, [r4, #20]
 8011738:	b2f6      	uxtb	r6, r6
 801173a:	4283      	cmp	r3, r0
 801173c:	4637      	mov	r7, r6
 801173e:	dc04      	bgt.n	801174a <__swbuf_r+0x42>
 8011740:	4621      	mov	r1, r4
 8011742:	4628      	mov	r0, r5
 8011744:	f000 f95e 	bl	8011a04 <_fflush_r>
 8011748:	bb30      	cbnz	r0, 8011798 <__swbuf_r+0x90>
 801174a:	68a3      	ldr	r3, [r4, #8]
 801174c:	3b01      	subs	r3, #1
 801174e:	60a3      	str	r3, [r4, #8]
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	1c5a      	adds	r2, r3, #1
 8011754:	6022      	str	r2, [r4, #0]
 8011756:	701e      	strb	r6, [r3, #0]
 8011758:	6963      	ldr	r3, [r4, #20]
 801175a:	3001      	adds	r0, #1
 801175c:	4283      	cmp	r3, r0
 801175e:	d004      	beq.n	801176a <__swbuf_r+0x62>
 8011760:	89a3      	ldrh	r3, [r4, #12]
 8011762:	07db      	lsls	r3, r3, #31
 8011764:	d506      	bpl.n	8011774 <__swbuf_r+0x6c>
 8011766:	2e0a      	cmp	r6, #10
 8011768:	d104      	bne.n	8011774 <__swbuf_r+0x6c>
 801176a:	4621      	mov	r1, r4
 801176c:	4628      	mov	r0, r5
 801176e:	f000 f949 	bl	8011a04 <_fflush_r>
 8011772:	b988      	cbnz	r0, 8011798 <__swbuf_r+0x90>
 8011774:	4638      	mov	r0, r7
 8011776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011778:	4b0a      	ldr	r3, [pc, #40]	; (80117a4 <__swbuf_r+0x9c>)
 801177a:	429c      	cmp	r4, r3
 801177c:	d101      	bne.n	8011782 <__swbuf_r+0x7a>
 801177e:	68ac      	ldr	r4, [r5, #8]
 8011780:	e7cf      	b.n	8011722 <__swbuf_r+0x1a>
 8011782:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <__swbuf_r+0xa0>)
 8011784:	429c      	cmp	r4, r3
 8011786:	bf08      	it	eq
 8011788:	68ec      	ldreq	r4, [r5, #12]
 801178a:	e7ca      	b.n	8011722 <__swbuf_r+0x1a>
 801178c:	4621      	mov	r1, r4
 801178e:	4628      	mov	r0, r5
 8011790:	f000 f82c 	bl	80117ec <__swsetup_r>
 8011794:	2800      	cmp	r0, #0
 8011796:	d0cb      	beq.n	8011730 <__swbuf_r+0x28>
 8011798:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801179c:	e7ea      	b.n	8011774 <__swbuf_r+0x6c>
 801179e:	bf00      	nop
 80117a0:	08012258 	.word	0x08012258
 80117a4:	08012278 	.word	0x08012278
 80117a8:	08012238 	.word	0x08012238

080117ac <__ascii_wctomb>:
 80117ac:	b149      	cbz	r1, 80117c2 <__ascii_wctomb+0x16>
 80117ae:	2aff      	cmp	r2, #255	; 0xff
 80117b0:	bf85      	ittet	hi
 80117b2:	238a      	movhi	r3, #138	; 0x8a
 80117b4:	6003      	strhi	r3, [r0, #0]
 80117b6:	700a      	strbls	r2, [r1, #0]
 80117b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80117bc:	bf98      	it	ls
 80117be:	2001      	movls	r0, #1
 80117c0:	4770      	bx	lr
 80117c2:	4608      	mov	r0, r1
 80117c4:	4770      	bx	lr
	...

080117c8 <_write_r>:
 80117c8:	b538      	push	{r3, r4, r5, lr}
 80117ca:	4d07      	ldr	r5, [pc, #28]	; (80117e8 <_write_r+0x20>)
 80117cc:	4604      	mov	r4, r0
 80117ce:	4608      	mov	r0, r1
 80117d0:	4611      	mov	r1, r2
 80117d2:	2200      	movs	r2, #0
 80117d4:	602a      	str	r2, [r5, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	f000 fa86 	bl	8011ce8 <_write>
 80117dc:	1c43      	adds	r3, r0, #1
 80117de:	d102      	bne.n	80117e6 <_write_r+0x1e>
 80117e0:	682b      	ldr	r3, [r5, #0]
 80117e2:	b103      	cbz	r3, 80117e6 <_write_r+0x1e>
 80117e4:	6023      	str	r3, [r4, #0]
 80117e6:	bd38      	pop	{r3, r4, r5, pc}
 80117e8:	20002918 	.word	0x20002918

080117ec <__swsetup_r>:
 80117ec:	4b32      	ldr	r3, [pc, #200]	; (80118b8 <__swsetup_r+0xcc>)
 80117ee:	b570      	push	{r4, r5, r6, lr}
 80117f0:	681d      	ldr	r5, [r3, #0]
 80117f2:	4606      	mov	r6, r0
 80117f4:	460c      	mov	r4, r1
 80117f6:	b125      	cbz	r5, 8011802 <__swsetup_r+0x16>
 80117f8:	69ab      	ldr	r3, [r5, #24]
 80117fa:	b913      	cbnz	r3, 8011802 <__swsetup_r+0x16>
 80117fc:	4628      	mov	r0, r5
 80117fe:	f7ff f975 	bl	8010aec <__sinit>
 8011802:	4b2e      	ldr	r3, [pc, #184]	; (80118bc <__swsetup_r+0xd0>)
 8011804:	429c      	cmp	r4, r3
 8011806:	d10f      	bne.n	8011828 <__swsetup_r+0x3c>
 8011808:	686c      	ldr	r4, [r5, #4]
 801180a:	89a3      	ldrh	r3, [r4, #12]
 801180c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011810:	0719      	lsls	r1, r3, #28
 8011812:	d42c      	bmi.n	801186e <__swsetup_r+0x82>
 8011814:	06dd      	lsls	r5, r3, #27
 8011816:	d411      	bmi.n	801183c <__swsetup_r+0x50>
 8011818:	2309      	movs	r3, #9
 801181a:	6033      	str	r3, [r6, #0]
 801181c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011820:	81a3      	strh	r3, [r4, #12]
 8011822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011826:	e03e      	b.n	80118a6 <__swsetup_r+0xba>
 8011828:	4b25      	ldr	r3, [pc, #148]	; (80118c0 <__swsetup_r+0xd4>)
 801182a:	429c      	cmp	r4, r3
 801182c:	d101      	bne.n	8011832 <__swsetup_r+0x46>
 801182e:	68ac      	ldr	r4, [r5, #8]
 8011830:	e7eb      	b.n	801180a <__swsetup_r+0x1e>
 8011832:	4b24      	ldr	r3, [pc, #144]	; (80118c4 <__swsetup_r+0xd8>)
 8011834:	429c      	cmp	r4, r3
 8011836:	bf08      	it	eq
 8011838:	68ec      	ldreq	r4, [r5, #12]
 801183a:	e7e6      	b.n	801180a <__swsetup_r+0x1e>
 801183c:	0758      	lsls	r0, r3, #29
 801183e:	d512      	bpl.n	8011866 <__swsetup_r+0x7a>
 8011840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011842:	b141      	cbz	r1, 8011856 <__swsetup_r+0x6a>
 8011844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011848:	4299      	cmp	r1, r3
 801184a:	d002      	beq.n	8011852 <__swsetup_r+0x66>
 801184c:	4630      	mov	r0, r6
 801184e:	f7fd fceb 	bl	800f228 <_free_r>
 8011852:	2300      	movs	r3, #0
 8011854:	6363      	str	r3, [r4, #52]	; 0x34
 8011856:	89a3      	ldrh	r3, [r4, #12]
 8011858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801185c:	81a3      	strh	r3, [r4, #12]
 801185e:	2300      	movs	r3, #0
 8011860:	6063      	str	r3, [r4, #4]
 8011862:	6923      	ldr	r3, [r4, #16]
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	89a3      	ldrh	r3, [r4, #12]
 8011868:	f043 0308 	orr.w	r3, r3, #8
 801186c:	81a3      	strh	r3, [r4, #12]
 801186e:	6923      	ldr	r3, [r4, #16]
 8011870:	b94b      	cbnz	r3, 8011886 <__swsetup_r+0x9a>
 8011872:	89a3      	ldrh	r3, [r4, #12]
 8011874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801187c:	d003      	beq.n	8011886 <__swsetup_r+0x9a>
 801187e:	4621      	mov	r1, r4
 8011880:	4630      	mov	r0, r6
 8011882:	f000 f933 	bl	8011aec <__smakebuf_r>
 8011886:	89a0      	ldrh	r0, [r4, #12]
 8011888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801188c:	f010 0301 	ands.w	r3, r0, #1
 8011890:	d00a      	beq.n	80118a8 <__swsetup_r+0xbc>
 8011892:	2300      	movs	r3, #0
 8011894:	60a3      	str	r3, [r4, #8]
 8011896:	6963      	ldr	r3, [r4, #20]
 8011898:	425b      	negs	r3, r3
 801189a:	61a3      	str	r3, [r4, #24]
 801189c:	6923      	ldr	r3, [r4, #16]
 801189e:	b943      	cbnz	r3, 80118b2 <__swsetup_r+0xc6>
 80118a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118a4:	d1ba      	bne.n	801181c <__swsetup_r+0x30>
 80118a6:	bd70      	pop	{r4, r5, r6, pc}
 80118a8:	0781      	lsls	r1, r0, #30
 80118aa:	bf58      	it	pl
 80118ac:	6963      	ldrpl	r3, [r4, #20]
 80118ae:	60a3      	str	r3, [r4, #8]
 80118b0:	e7f4      	b.n	801189c <__swsetup_r+0xb0>
 80118b2:	2000      	movs	r0, #0
 80118b4:	e7f7      	b.n	80118a6 <__swsetup_r+0xba>
 80118b6:	bf00      	nop
 80118b8:	20000188 	.word	0x20000188
 80118bc:	08012258 	.word	0x08012258
 80118c0:	08012278 	.word	0x08012278
 80118c4:	08012238 	.word	0x08012238

080118c8 <abort>:
 80118c8:	b508      	push	{r3, lr}
 80118ca:	2006      	movs	r0, #6
 80118cc:	f000 f988 	bl	8011be0 <raise>
 80118d0:	2001      	movs	r0, #1
 80118d2:	f000 fa11 	bl	8011cf8 <_exit>
	...

080118d8 <_close_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	4d06      	ldr	r5, [pc, #24]	; (80118f4 <_close_r+0x1c>)
 80118dc:	2300      	movs	r3, #0
 80118de:	4604      	mov	r4, r0
 80118e0:	4608      	mov	r0, r1
 80118e2:	602b      	str	r3, [r5, #0]
 80118e4:	f000 f9ba 	bl	8011c5c <_close>
 80118e8:	1c43      	adds	r3, r0, #1
 80118ea:	d102      	bne.n	80118f2 <_close_r+0x1a>
 80118ec:	682b      	ldr	r3, [r5, #0]
 80118ee:	b103      	cbz	r3, 80118f2 <_close_r+0x1a>
 80118f0:	6023      	str	r3, [r4, #0]
 80118f2:	bd38      	pop	{r3, r4, r5, pc}
 80118f4:	20002918 	.word	0x20002918

080118f8 <__sflush_r>:
 80118f8:	898a      	ldrh	r2, [r1, #12]
 80118fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118fe:	4605      	mov	r5, r0
 8011900:	0710      	lsls	r0, r2, #28
 8011902:	460c      	mov	r4, r1
 8011904:	d458      	bmi.n	80119b8 <__sflush_r+0xc0>
 8011906:	684b      	ldr	r3, [r1, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	dc05      	bgt.n	8011918 <__sflush_r+0x20>
 801190c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801190e:	2b00      	cmp	r3, #0
 8011910:	dc02      	bgt.n	8011918 <__sflush_r+0x20>
 8011912:	2000      	movs	r0, #0
 8011914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801191a:	2e00      	cmp	r6, #0
 801191c:	d0f9      	beq.n	8011912 <__sflush_r+0x1a>
 801191e:	2300      	movs	r3, #0
 8011920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011924:	682f      	ldr	r7, [r5, #0]
 8011926:	602b      	str	r3, [r5, #0]
 8011928:	d032      	beq.n	8011990 <__sflush_r+0x98>
 801192a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801192c:	89a3      	ldrh	r3, [r4, #12]
 801192e:	075a      	lsls	r2, r3, #29
 8011930:	d505      	bpl.n	801193e <__sflush_r+0x46>
 8011932:	6863      	ldr	r3, [r4, #4]
 8011934:	1ac0      	subs	r0, r0, r3
 8011936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011938:	b10b      	cbz	r3, 801193e <__sflush_r+0x46>
 801193a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801193c:	1ac0      	subs	r0, r0, r3
 801193e:	2300      	movs	r3, #0
 8011940:	4602      	mov	r2, r0
 8011942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011944:	6a21      	ldr	r1, [r4, #32]
 8011946:	4628      	mov	r0, r5
 8011948:	47b0      	blx	r6
 801194a:	1c43      	adds	r3, r0, #1
 801194c:	89a3      	ldrh	r3, [r4, #12]
 801194e:	d106      	bne.n	801195e <__sflush_r+0x66>
 8011950:	6829      	ldr	r1, [r5, #0]
 8011952:	291d      	cmp	r1, #29
 8011954:	d82c      	bhi.n	80119b0 <__sflush_r+0xb8>
 8011956:	4a2a      	ldr	r2, [pc, #168]	; (8011a00 <__sflush_r+0x108>)
 8011958:	40ca      	lsrs	r2, r1
 801195a:	07d6      	lsls	r6, r2, #31
 801195c:	d528      	bpl.n	80119b0 <__sflush_r+0xb8>
 801195e:	2200      	movs	r2, #0
 8011960:	6062      	str	r2, [r4, #4]
 8011962:	04d9      	lsls	r1, r3, #19
 8011964:	6922      	ldr	r2, [r4, #16]
 8011966:	6022      	str	r2, [r4, #0]
 8011968:	d504      	bpl.n	8011974 <__sflush_r+0x7c>
 801196a:	1c42      	adds	r2, r0, #1
 801196c:	d101      	bne.n	8011972 <__sflush_r+0x7a>
 801196e:	682b      	ldr	r3, [r5, #0]
 8011970:	b903      	cbnz	r3, 8011974 <__sflush_r+0x7c>
 8011972:	6560      	str	r0, [r4, #84]	; 0x54
 8011974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011976:	602f      	str	r7, [r5, #0]
 8011978:	2900      	cmp	r1, #0
 801197a:	d0ca      	beq.n	8011912 <__sflush_r+0x1a>
 801197c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011980:	4299      	cmp	r1, r3
 8011982:	d002      	beq.n	801198a <__sflush_r+0x92>
 8011984:	4628      	mov	r0, r5
 8011986:	f7fd fc4f 	bl	800f228 <_free_r>
 801198a:	2000      	movs	r0, #0
 801198c:	6360      	str	r0, [r4, #52]	; 0x34
 801198e:	e7c1      	b.n	8011914 <__sflush_r+0x1c>
 8011990:	6a21      	ldr	r1, [r4, #32]
 8011992:	2301      	movs	r3, #1
 8011994:	4628      	mov	r0, r5
 8011996:	47b0      	blx	r6
 8011998:	1c41      	adds	r1, r0, #1
 801199a:	d1c7      	bne.n	801192c <__sflush_r+0x34>
 801199c:	682b      	ldr	r3, [r5, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d0c4      	beq.n	801192c <__sflush_r+0x34>
 80119a2:	2b1d      	cmp	r3, #29
 80119a4:	d001      	beq.n	80119aa <__sflush_r+0xb2>
 80119a6:	2b16      	cmp	r3, #22
 80119a8:	d101      	bne.n	80119ae <__sflush_r+0xb6>
 80119aa:	602f      	str	r7, [r5, #0]
 80119ac:	e7b1      	b.n	8011912 <__sflush_r+0x1a>
 80119ae:	89a3      	ldrh	r3, [r4, #12]
 80119b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119b4:	81a3      	strh	r3, [r4, #12]
 80119b6:	e7ad      	b.n	8011914 <__sflush_r+0x1c>
 80119b8:	690f      	ldr	r7, [r1, #16]
 80119ba:	2f00      	cmp	r7, #0
 80119bc:	d0a9      	beq.n	8011912 <__sflush_r+0x1a>
 80119be:	0793      	lsls	r3, r2, #30
 80119c0:	680e      	ldr	r6, [r1, #0]
 80119c2:	bf08      	it	eq
 80119c4:	694b      	ldreq	r3, [r1, #20]
 80119c6:	600f      	str	r7, [r1, #0]
 80119c8:	bf18      	it	ne
 80119ca:	2300      	movne	r3, #0
 80119cc:	eba6 0807 	sub.w	r8, r6, r7
 80119d0:	608b      	str	r3, [r1, #8]
 80119d2:	f1b8 0f00 	cmp.w	r8, #0
 80119d6:	dd9c      	ble.n	8011912 <__sflush_r+0x1a>
 80119d8:	6a21      	ldr	r1, [r4, #32]
 80119da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119dc:	4643      	mov	r3, r8
 80119de:	463a      	mov	r2, r7
 80119e0:	4628      	mov	r0, r5
 80119e2:	47b0      	blx	r6
 80119e4:	2800      	cmp	r0, #0
 80119e6:	dc06      	bgt.n	80119f6 <__sflush_r+0xfe>
 80119e8:	89a3      	ldrh	r3, [r4, #12]
 80119ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119ee:	81a3      	strh	r3, [r4, #12]
 80119f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119f4:	e78e      	b.n	8011914 <__sflush_r+0x1c>
 80119f6:	4407      	add	r7, r0
 80119f8:	eba8 0800 	sub.w	r8, r8, r0
 80119fc:	e7e9      	b.n	80119d2 <__sflush_r+0xda>
 80119fe:	bf00      	nop
 8011a00:	20400001 	.word	0x20400001

08011a04 <_fflush_r>:
 8011a04:	b538      	push	{r3, r4, r5, lr}
 8011a06:	690b      	ldr	r3, [r1, #16]
 8011a08:	4605      	mov	r5, r0
 8011a0a:	460c      	mov	r4, r1
 8011a0c:	b913      	cbnz	r3, 8011a14 <_fflush_r+0x10>
 8011a0e:	2500      	movs	r5, #0
 8011a10:	4628      	mov	r0, r5
 8011a12:	bd38      	pop	{r3, r4, r5, pc}
 8011a14:	b118      	cbz	r0, 8011a1e <_fflush_r+0x1a>
 8011a16:	6983      	ldr	r3, [r0, #24]
 8011a18:	b90b      	cbnz	r3, 8011a1e <_fflush_r+0x1a>
 8011a1a:	f7ff f867 	bl	8010aec <__sinit>
 8011a1e:	4b14      	ldr	r3, [pc, #80]	; (8011a70 <_fflush_r+0x6c>)
 8011a20:	429c      	cmp	r4, r3
 8011a22:	d11b      	bne.n	8011a5c <_fflush_r+0x58>
 8011a24:	686c      	ldr	r4, [r5, #4]
 8011a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d0ef      	beq.n	8011a0e <_fflush_r+0xa>
 8011a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a30:	07d0      	lsls	r0, r2, #31
 8011a32:	d404      	bmi.n	8011a3e <_fflush_r+0x3a>
 8011a34:	0599      	lsls	r1, r3, #22
 8011a36:	d402      	bmi.n	8011a3e <_fflush_r+0x3a>
 8011a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a3a:	f7ff f90c 	bl	8010c56 <__retarget_lock_acquire_recursive>
 8011a3e:	4628      	mov	r0, r5
 8011a40:	4621      	mov	r1, r4
 8011a42:	f7ff ff59 	bl	80118f8 <__sflush_r>
 8011a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a48:	07da      	lsls	r2, r3, #31
 8011a4a:	4605      	mov	r5, r0
 8011a4c:	d4e0      	bmi.n	8011a10 <_fflush_r+0xc>
 8011a4e:	89a3      	ldrh	r3, [r4, #12]
 8011a50:	059b      	lsls	r3, r3, #22
 8011a52:	d4dd      	bmi.n	8011a10 <_fflush_r+0xc>
 8011a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a56:	f7ff f8ff 	bl	8010c58 <__retarget_lock_release_recursive>
 8011a5a:	e7d9      	b.n	8011a10 <_fflush_r+0xc>
 8011a5c:	4b05      	ldr	r3, [pc, #20]	; (8011a74 <_fflush_r+0x70>)
 8011a5e:	429c      	cmp	r4, r3
 8011a60:	d101      	bne.n	8011a66 <_fflush_r+0x62>
 8011a62:	68ac      	ldr	r4, [r5, #8]
 8011a64:	e7df      	b.n	8011a26 <_fflush_r+0x22>
 8011a66:	4b04      	ldr	r3, [pc, #16]	; (8011a78 <_fflush_r+0x74>)
 8011a68:	429c      	cmp	r4, r3
 8011a6a:	bf08      	it	eq
 8011a6c:	68ec      	ldreq	r4, [r5, #12]
 8011a6e:	e7da      	b.n	8011a26 <_fflush_r+0x22>
 8011a70:	08012258 	.word	0x08012258
 8011a74:	08012278 	.word	0x08012278
 8011a78:	08012238 	.word	0x08012238

08011a7c <_lseek_r>:
 8011a7c:	b538      	push	{r3, r4, r5, lr}
 8011a7e:	4d07      	ldr	r5, [pc, #28]	; (8011a9c <_lseek_r+0x20>)
 8011a80:	4604      	mov	r4, r0
 8011a82:	4608      	mov	r0, r1
 8011a84:	4611      	mov	r1, r2
 8011a86:	2200      	movs	r2, #0
 8011a88:	602a      	str	r2, [r5, #0]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	f000 f90e 	bl	8011cac <_lseek>
 8011a90:	1c43      	adds	r3, r0, #1
 8011a92:	d102      	bne.n	8011a9a <_lseek_r+0x1e>
 8011a94:	682b      	ldr	r3, [r5, #0]
 8011a96:	b103      	cbz	r3, 8011a9a <_lseek_r+0x1e>
 8011a98:	6023      	str	r3, [r4, #0]
 8011a9a:	bd38      	pop	{r3, r4, r5, pc}
 8011a9c:	20002918 	.word	0x20002918

08011aa0 <__swhatbuf_r>:
 8011aa0:	b570      	push	{r4, r5, r6, lr}
 8011aa2:	460e      	mov	r6, r1
 8011aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa8:	2900      	cmp	r1, #0
 8011aaa:	b096      	sub	sp, #88	; 0x58
 8011aac:	4614      	mov	r4, r2
 8011aae:	461d      	mov	r5, r3
 8011ab0:	da08      	bge.n	8011ac4 <__swhatbuf_r+0x24>
 8011ab2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	602a      	str	r2, [r5, #0]
 8011aba:	061a      	lsls	r2, r3, #24
 8011abc:	d410      	bmi.n	8011ae0 <__swhatbuf_r+0x40>
 8011abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ac2:	e00e      	b.n	8011ae2 <__swhatbuf_r+0x42>
 8011ac4:	466a      	mov	r2, sp
 8011ac6:	f000 f8a7 	bl	8011c18 <_fstat_r>
 8011aca:	2800      	cmp	r0, #0
 8011acc:	dbf1      	blt.n	8011ab2 <__swhatbuf_r+0x12>
 8011ace:	9a01      	ldr	r2, [sp, #4]
 8011ad0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ad4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ad8:	425a      	negs	r2, r3
 8011ada:	415a      	adcs	r2, r3
 8011adc:	602a      	str	r2, [r5, #0]
 8011ade:	e7ee      	b.n	8011abe <__swhatbuf_r+0x1e>
 8011ae0:	2340      	movs	r3, #64	; 0x40
 8011ae2:	2000      	movs	r0, #0
 8011ae4:	6023      	str	r3, [r4, #0]
 8011ae6:	b016      	add	sp, #88	; 0x58
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011aec <__smakebuf_r>:
 8011aec:	898b      	ldrh	r3, [r1, #12]
 8011aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011af0:	079d      	lsls	r5, r3, #30
 8011af2:	4606      	mov	r6, r0
 8011af4:	460c      	mov	r4, r1
 8011af6:	d507      	bpl.n	8011b08 <__smakebuf_r+0x1c>
 8011af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011afc:	6023      	str	r3, [r4, #0]
 8011afe:	6123      	str	r3, [r4, #16]
 8011b00:	2301      	movs	r3, #1
 8011b02:	6163      	str	r3, [r4, #20]
 8011b04:	b002      	add	sp, #8
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	ab01      	add	r3, sp, #4
 8011b0a:	466a      	mov	r2, sp
 8011b0c:	f7ff ffc8 	bl	8011aa0 <__swhatbuf_r>
 8011b10:	9900      	ldr	r1, [sp, #0]
 8011b12:	4605      	mov	r5, r0
 8011b14:	4630      	mov	r0, r6
 8011b16:	f7fd fbf3 	bl	800f300 <_malloc_r>
 8011b1a:	b948      	cbnz	r0, 8011b30 <__smakebuf_r+0x44>
 8011b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b20:	059a      	lsls	r2, r3, #22
 8011b22:	d4ef      	bmi.n	8011b04 <__smakebuf_r+0x18>
 8011b24:	f023 0303 	bic.w	r3, r3, #3
 8011b28:	f043 0302 	orr.w	r3, r3, #2
 8011b2c:	81a3      	strh	r3, [r4, #12]
 8011b2e:	e7e3      	b.n	8011af8 <__smakebuf_r+0xc>
 8011b30:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <__smakebuf_r+0x7c>)
 8011b32:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b34:	89a3      	ldrh	r3, [r4, #12]
 8011b36:	6020      	str	r0, [r4, #0]
 8011b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b3c:	81a3      	strh	r3, [r4, #12]
 8011b3e:	9b00      	ldr	r3, [sp, #0]
 8011b40:	6163      	str	r3, [r4, #20]
 8011b42:	9b01      	ldr	r3, [sp, #4]
 8011b44:	6120      	str	r0, [r4, #16]
 8011b46:	b15b      	cbz	r3, 8011b60 <__smakebuf_r+0x74>
 8011b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f000 f875 	bl	8011c3c <_isatty_r>
 8011b52:	b128      	cbz	r0, 8011b60 <__smakebuf_r+0x74>
 8011b54:	89a3      	ldrh	r3, [r4, #12]
 8011b56:	f023 0303 	bic.w	r3, r3, #3
 8011b5a:	f043 0301 	orr.w	r3, r3, #1
 8011b5e:	81a3      	strh	r3, [r4, #12]
 8011b60:	89a0      	ldrh	r0, [r4, #12]
 8011b62:	4305      	orrs	r5, r0
 8011b64:	81a5      	strh	r5, [r4, #12]
 8011b66:	e7cd      	b.n	8011b04 <__smakebuf_r+0x18>
 8011b68:	08010a85 	.word	0x08010a85

08011b6c <_read_r>:
 8011b6c:	b538      	push	{r3, r4, r5, lr}
 8011b6e:	4d07      	ldr	r5, [pc, #28]	; (8011b8c <_read_r+0x20>)
 8011b70:	4604      	mov	r4, r0
 8011b72:	4608      	mov	r0, r1
 8011b74:	4611      	mov	r1, r2
 8011b76:	2200      	movs	r2, #0
 8011b78:	602a      	str	r2, [r5, #0]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	f000 f89e 	bl	8011cbc <_read>
 8011b80:	1c43      	adds	r3, r0, #1
 8011b82:	d102      	bne.n	8011b8a <_read_r+0x1e>
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	b103      	cbz	r3, 8011b8a <_read_r+0x1e>
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	20002918 	.word	0x20002918

08011b90 <_raise_r>:
 8011b90:	291f      	cmp	r1, #31
 8011b92:	b538      	push	{r3, r4, r5, lr}
 8011b94:	4604      	mov	r4, r0
 8011b96:	460d      	mov	r5, r1
 8011b98:	d904      	bls.n	8011ba4 <_raise_r+0x14>
 8011b9a:	2316      	movs	r3, #22
 8011b9c:	6003      	str	r3, [r0, #0]
 8011b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ba2:	bd38      	pop	{r3, r4, r5, pc}
 8011ba4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ba6:	b112      	cbz	r2, 8011bae <_raise_r+0x1e>
 8011ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bac:	b94b      	cbnz	r3, 8011bc2 <_raise_r+0x32>
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 f830 	bl	8011c14 <_getpid_r>
 8011bb4:	462a      	mov	r2, r5
 8011bb6:	4601      	mov	r1, r0
 8011bb8:	4620      	mov	r0, r4
 8011bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bbe:	f000 b817 	b.w	8011bf0 <_kill_r>
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d00a      	beq.n	8011bdc <_raise_r+0x4c>
 8011bc6:	1c59      	adds	r1, r3, #1
 8011bc8:	d103      	bne.n	8011bd2 <_raise_r+0x42>
 8011bca:	2316      	movs	r3, #22
 8011bcc:	6003      	str	r3, [r0, #0]
 8011bce:	2001      	movs	r0, #1
 8011bd0:	e7e7      	b.n	8011ba2 <_raise_r+0x12>
 8011bd2:	2400      	movs	r4, #0
 8011bd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bd8:	4628      	mov	r0, r5
 8011bda:	4798      	blx	r3
 8011bdc:	2000      	movs	r0, #0
 8011bde:	e7e0      	b.n	8011ba2 <_raise_r+0x12>

08011be0 <raise>:
 8011be0:	4b02      	ldr	r3, [pc, #8]	; (8011bec <raise+0xc>)
 8011be2:	4601      	mov	r1, r0
 8011be4:	6818      	ldr	r0, [r3, #0]
 8011be6:	f7ff bfd3 	b.w	8011b90 <_raise_r>
 8011bea:	bf00      	nop
 8011bec:	20000188 	.word	0x20000188

08011bf0 <_kill_r>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4d07      	ldr	r5, [pc, #28]	; (8011c10 <_kill_r+0x20>)
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4608      	mov	r0, r1
 8011bfa:	4611      	mov	r1, r2
 8011bfc:	602b      	str	r3, [r5, #0]
 8011bfe:	f000 f84d 	bl	8011c9c <_kill>
 8011c02:	1c43      	adds	r3, r0, #1
 8011c04:	d102      	bne.n	8011c0c <_kill_r+0x1c>
 8011c06:	682b      	ldr	r3, [r5, #0]
 8011c08:	b103      	cbz	r3, 8011c0c <_kill_r+0x1c>
 8011c0a:	6023      	str	r3, [r4, #0]
 8011c0c:	bd38      	pop	{r3, r4, r5, pc}
 8011c0e:	bf00      	nop
 8011c10:	20002918 	.word	0x20002918

08011c14 <_getpid_r>:
 8011c14:	f000 b832 	b.w	8011c7c <_getpid>

08011c18 <_fstat_r>:
 8011c18:	b538      	push	{r3, r4, r5, lr}
 8011c1a:	4d07      	ldr	r5, [pc, #28]	; (8011c38 <_fstat_r+0x20>)
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	4604      	mov	r4, r0
 8011c20:	4608      	mov	r0, r1
 8011c22:	4611      	mov	r1, r2
 8011c24:	602b      	str	r3, [r5, #0]
 8011c26:	f000 f821 	bl	8011c6c <_fstat>
 8011c2a:	1c43      	adds	r3, r0, #1
 8011c2c:	d102      	bne.n	8011c34 <_fstat_r+0x1c>
 8011c2e:	682b      	ldr	r3, [r5, #0]
 8011c30:	b103      	cbz	r3, 8011c34 <_fstat_r+0x1c>
 8011c32:	6023      	str	r3, [r4, #0]
 8011c34:	bd38      	pop	{r3, r4, r5, pc}
 8011c36:	bf00      	nop
 8011c38:	20002918 	.word	0x20002918

08011c3c <_isatty_r>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4d06      	ldr	r5, [pc, #24]	; (8011c58 <_isatty_r+0x1c>)
 8011c40:	2300      	movs	r3, #0
 8011c42:	4604      	mov	r4, r0
 8011c44:	4608      	mov	r0, r1
 8011c46:	602b      	str	r3, [r5, #0]
 8011c48:	f000 f820 	bl	8011c8c <_isatty>
 8011c4c:	1c43      	adds	r3, r0, #1
 8011c4e:	d102      	bne.n	8011c56 <_isatty_r+0x1a>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	b103      	cbz	r3, 8011c56 <_isatty_r+0x1a>
 8011c54:	6023      	str	r3, [r4, #0]
 8011c56:	bd38      	pop	{r3, r4, r5, pc}
 8011c58:	20002918 	.word	0x20002918

08011c5c <_close>:
 8011c5c:	4b02      	ldr	r3, [pc, #8]	; (8011c68 <_close+0xc>)
 8011c5e:	2258      	movs	r2, #88	; 0x58
 8011c60:	601a      	str	r2, [r3, #0]
 8011c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c66:	4770      	bx	lr
 8011c68:	20002918 	.word	0x20002918

08011c6c <_fstat>:
 8011c6c:	4b02      	ldr	r3, [pc, #8]	; (8011c78 <_fstat+0xc>)
 8011c6e:	2258      	movs	r2, #88	; 0x58
 8011c70:	601a      	str	r2, [r3, #0]
 8011c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c76:	4770      	bx	lr
 8011c78:	20002918 	.word	0x20002918

08011c7c <_getpid>:
 8011c7c:	4b02      	ldr	r3, [pc, #8]	; (8011c88 <_getpid+0xc>)
 8011c7e:	2258      	movs	r2, #88	; 0x58
 8011c80:	601a      	str	r2, [r3, #0]
 8011c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c86:	4770      	bx	lr
 8011c88:	20002918 	.word	0x20002918

08011c8c <_isatty>:
 8011c8c:	4b02      	ldr	r3, [pc, #8]	; (8011c98 <_isatty+0xc>)
 8011c8e:	2258      	movs	r2, #88	; 0x58
 8011c90:	601a      	str	r2, [r3, #0]
 8011c92:	2000      	movs	r0, #0
 8011c94:	4770      	bx	lr
 8011c96:	bf00      	nop
 8011c98:	20002918 	.word	0x20002918

08011c9c <_kill>:
 8011c9c:	4b02      	ldr	r3, [pc, #8]	; (8011ca8 <_kill+0xc>)
 8011c9e:	2258      	movs	r2, #88	; 0x58
 8011ca0:	601a      	str	r2, [r3, #0]
 8011ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ca6:	4770      	bx	lr
 8011ca8:	20002918 	.word	0x20002918

08011cac <_lseek>:
 8011cac:	4b02      	ldr	r3, [pc, #8]	; (8011cb8 <_lseek+0xc>)
 8011cae:	2258      	movs	r2, #88	; 0x58
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cb6:	4770      	bx	lr
 8011cb8:	20002918 	.word	0x20002918

08011cbc <_read>:
 8011cbc:	4b02      	ldr	r3, [pc, #8]	; (8011cc8 <_read+0xc>)
 8011cbe:	2258      	movs	r2, #88	; 0x58
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cc6:	4770      	bx	lr
 8011cc8:	20002918 	.word	0x20002918

08011ccc <_sbrk>:
 8011ccc:	4a04      	ldr	r2, [pc, #16]	; (8011ce0 <_sbrk+0x14>)
 8011cce:	6811      	ldr	r1, [r2, #0]
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	b909      	cbnz	r1, 8011cd8 <_sbrk+0xc>
 8011cd4:	4903      	ldr	r1, [pc, #12]	; (8011ce4 <_sbrk+0x18>)
 8011cd6:	6011      	str	r1, [r2, #0]
 8011cd8:	6810      	ldr	r0, [r2, #0]
 8011cda:	4403      	add	r3, r0
 8011cdc:	6013      	str	r3, [r2, #0]
 8011cde:	4770      	bx	lr
 8011ce0:	2000291c 	.word	0x2000291c
 8011ce4:	20002920 	.word	0x20002920

08011ce8 <_write>:
 8011ce8:	4b02      	ldr	r3, [pc, #8]	; (8011cf4 <_write+0xc>)
 8011cea:	2258      	movs	r2, #88	; 0x58
 8011cec:	601a      	str	r2, [r3, #0]
 8011cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cf2:	4770      	bx	lr
 8011cf4:	20002918 	.word	0x20002918

08011cf8 <_exit>:
 8011cf8:	e7fe      	b.n	8011cf8 <_exit>
	...

08011cfc <_init>:
 8011cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cfe:	bf00      	nop
 8011d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d02:	bc08      	pop	{r3}
 8011d04:	469e      	mov	lr, r3
 8011d06:	4770      	bx	lr

08011d08 <_fini>:
 8011d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d0a:	bf00      	nop
 8011d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d0e:	bc08      	pop	{r3}
 8011d10:	469e      	mov	lr, r3
 8011d12:	4770      	bx	lr
